TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfd24eb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;batterycharge.c:
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2003
                               98 ; 3    |//
                               99 ; 4    |// Filename: batterycharge.c
                              100 ; 5    |// Description: Contains the core 
                              101 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |////////////////////////////////////////////////////////////////////////////////
                              104 ; 9    |//   Includes and external references
                              105 ; 10   |////////////////////////////////////////////////////////////////////////////////
                              106 ; 11   |#include "types.h"
                              107 
                              109 
                              110 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              111 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              112 ; 3    |//
                              113 ; 4    |// Filename: types.h
                              114 ; 5    |// Description: Standard data types
                              115 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              116 ; 7    |
                              117 ; 8    |#ifndef _TYPES_H
                              118 ; 9    |#define _TYPES_H
                              119 ; 10   |
                              120 ; 11   |// TODO:  move this outta here!
                              121 ; 12   |#if !defined(NOERROR)
                              122 ; 13   |#define NOERROR 0
                              123 ; 14   |#define SUCCESS 0
                              124 ; 15   |#endif 
                              125 ; 16   |#if !defined(SUCCESS)
                              126 ; 17   |#define SUCCESS  0
                              127 ; 18   |#endif
                              128 ; 19   |#if !defined(ERROR)
                              129 ; 20   |#define ERROR   -1
                              130 ; 21   |#endif
                              131 ; 22   |#if !defined(FALSE)
                              132 ; 23   |#define FALSE 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 24   |#endif
                              134 ; 25   |#if !defined(TRUE)
                              135 ; 26   |#define TRUE  1
                              136 ; 27   |#endif
                              137 ; 28   |
                              138 ; 29   |#if !defined(NULL)
                              139 ; 30   |#define NULL 0
                              140 ; 31   |#endif
                              141 ; 32   |
                              142 ; 33   |#define MAX_INT     0x7FFFFF
                              143 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              144 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              145 ; 36   |#define MAX_ULONG   (-1) 
                              146 ; 37   |
                              147 ; 38   |#define WORD_SIZE   24              // word size in bits
                              148 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              149 ; 40   |
                              150 ; 41   |
                              151 ; 42   |#define BYTE    unsigned char       // btVarName
                              152 ; 43   |#define CHAR    signed char         // cVarName
                              153 ; 44   |#define USHORT  unsigned short      // usVarName
                              154 ; 45   |#define SHORT   unsigned short      // sVarName
                              155 ; 46   |#define WORD    unsigned int        // wVarName
                              156 ; 47   |#define INT     signed int          // iVarName
                              157 ; 48   |#define DWORD   unsigned long       // dwVarName
                              158 ; 49   |#define LONG    signed long         // lVarName
                              159 ; 50   |#define BOOL    unsigned int        // bVarName
                              160 ; 51   |#define FRACT   _fract              // frVarName
                              161 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              162 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              163 ; 54   |#define FLOAT   float               // fVarName
                              164 ; 55   |#define DBL     double              // dVarName
                              165 ; 56   |#define ENUM    enum                // eVarName
                              166 ; 57   |#define CMX     _complex            // cmxVarName
                              167 ; 58   |typedef WORD UCS3;                   // 
                              168 ; 59   |
                              169 ; 60   |#define UINT16  unsigned short
                              170 ; 61   |#define UINT8   unsigned char   
                              171 ; 62   |#define UINT32  unsigned long
                              172 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              173 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              174 ; 65   |#define WCHAR   UINT16
                              175 ; 66   |
                              176 ; 67   |//UINT128 is 16 bytes or 6 words
                              177 ; 68   |typedef struct UINT128_3500 {   
                              178 ; 69   |    int val[6];     
                              179 ; 70   |} UINT128_3500;
                              180 ; 71   |
                              181 ; 72   |#define UINT128   UINT128_3500
                              182 ; 73   |
                              183 ; 74   |// Little endian word packed byte strings:   
                              184 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 77   |// Little endian word packed byte strings:   
                              187 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              188 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              189 ; 80   |
                              190 ; 81   |// Declare Memory Spaces To Use When Coding
                              191 ; 82   |// A. Sector Buffers
                              192 ; 83   |#define SECTOR_BUFFER_MEM_X _X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              194 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              195 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              196 
                              198 
                              199 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              200 ; 88   |// B. Media DDI Memory
                              201 ; 89   |#define MEDIA_DDI_MEM _Y
                              202 ; 90   |
                              203 ; 91   |
                              204 ; 92   |
                              205 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              206 ; 94   |// Examples of circular pointers:
                              207 ; 95   |//    INT CIRC cpiVarName
                              208 ; 96   |//    DWORD CIRC cpdwVarName
                              209 ; 97   |
                              210 ; 98   |#define RETCODE INT                 // rcVarName
                              211 ; 99   |
                              212 ; 100  |// generic bitfield structure
                              213 ; 101  |struct Bitfield {
                              214 ; 102  |    unsigned int B0  :1;
                              215 ; 103  |    unsigned int B1  :1;
                              216 ; 104  |    unsigned int B2  :1;
                              217 ; 105  |    unsigned int B3  :1;
                              218 ; 106  |    unsigned int B4  :1;
                              219 ; 107  |    unsigned int B5  :1;
                              220 ; 108  |    unsigned int B6  :1;
                              221 ; 109  |    unsigned int B7  :1;
                              222 ; 110  |    unsigned int B8  :1;
                              223 ; 111  |    unsigned int B9  :1;
                              224 ; 112  |    unsigned int B10 :1;
                              225 ; 113  |    unsigned int B11 :1;
                              226 ; 114  |    unsigned int B12 :1;
                              227 ; 115  |    unsigned int B13 :1;
                              228 ; 116  |    unsigned int B14 :1;
                              229 ; 117  |    unsigned int B15 :1;
                              230 ; 118  |    unsigned int B16 :1;
                              231 ; 119  |    unsigned int B17 :1;
                              232 ; 120  |    unsigned int B18 :1;
                              233 ; 121  |    unsigned int B19 :1;
                              234 ; 122  |    unsigned int B20 :1;
                              235 ; 123  |    unsigned int B21 :1;
                              236 ; 124  |    unsigned int B22 :1;
                              237 ; 125  |    unsigned int B23 :1;
                              238 ; 126  |};
                              239 ; 127  |
                              240 ; 128  |union BitInt {
                              241 ; 129  |        struct Bitfield B;
                              242 ; 130  |        int        I;
                              243 ; 131  |};
                              244 ; 132  |
                              245 ; 133  |#define MAX_MSG_LENGTH 10
                              246 ; 134  |struct CMessage
                              247 ; 135  |{
                              248 ; 136  |        unsigned int m_uLength;
                              249 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              250 ; 138  |};
                              251 ; 139  |
                              252 ; 140  |typedef struct {
                              253 ; 141  |    WORD m_wLength;
                              254 ; 142  |    WORD m_wMessage;
                              255 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 144  |} Message;
                              257 ; 145  |
                              258 ; 146  |struct MessageQueueDescriptor
                              259 ; 147  |{
                              260 ; 148  |        int *m_pBase;
                              261 ; 149  |        int m_iModulo;
                              262 ; 150  |        int m_iSize;
                              263 ; 151  |        int *m_pHead;
                              264 ; 152  |        int *m_pTail;
                              265 ; 153  |};
                              266 ; 154  |
                              267 ; 155  |struct ModuleEntry
                              268 ; 156  |{
                              269 ; 157  |    int m_iSignaledEventMask;
                              270 ; 158  |    int m_iWaitEventMask;
                              271 ; 159  |    int m_iResourceOfCode;
                              272 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              273 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              274 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              275 ; 163  |    int m_uTimeOutHigh;
                              276 ; 164  |    int m_uTimeOutLow;
                              277 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              278 ; 166  |};
                              279 ; 167  |
                              280 ; 168  |union WaitMask{
                              281 ; 169  |    struct B{
                              282 ; 170  |        unsigned int m_bNone     :1;
                              283 ; 171  |        unsigned int m_bMessage  :1;
                              284 ; 172  |        unsigned int m_bTimer    :1;
                              285 ; 173  |        unsigned int m_bButton   :1;
                              286 ; 174  |    } B;
                              287 ; 175  |    int I;
                              288 ; 176  |} ;
                              289 ; 177  |
                              290 ; 178  |
                              291 ; 179  |struct Button {
                              292 ; 180  |        WORD wButtonEvent;
                              293 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              294 ; 182  |};
                              295 ; 183  |
                              296 ; 184  |struct Message {
                              297 ; 185  |        WORD wMsgLength;
                              298 ; 186  |        WORD wMsgCommand;
                              299 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              300 ; 188  |};
                              301 ; 189  |
                              302 ; 190  |union EventTypes {
                              303 ; 191  |        struct CMessage msg;
                              304 ; 192  |        struct Button Button ;
                              305 ; 193  |        struct Message Message;
                              306 ; 194  |};
                              307 ; 195  |
                              308 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              309 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              310 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              311 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              312 ; 200  |
                              313 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              314 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              315 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              316 ; 204  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 205  |#if DEBUG
                              318 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              319 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              320 ; 208  |#else 
                              321 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              322 ; 210  |#define DebugBuildAssert(x)    
                              323 ; 211  |#endif
                              324 ; 212  |
                              325 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              326 ; 214  |//  #pragma asm
                              327 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              328 ; 216  |//  #pragma endasm
                              329 ; 217  |
                              330 ; 218  |
                              331 ; 219  |#ifdef COLOR_262K
                              332 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              333 ; 221  |#elif defined(COLOR_65K)
                              334 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              335 ; 223  |#else
                              336 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              337 ; 225  |#endif
                              338 ; 226  |    
                              339 ; 227  |#endif // #ifndef _TYPES_H
                              340 
                              342 
                              343 ; 12   |#include "batterycharge.h"
                              344 
                              346 
                              347 ; 1    |#ifndef __BATTERYCHARGE_H
                              348 ; 2    |#define __BATTERYCHARGE_H
                              349 ; 3    |
                              350 ; 4    |//entry point for menus. function called via SysCallFunction()
                              351 ; 5    |#ifdef STMP_BUILD_PLAYER
                              352 ; 6    |_reentrant int BatteryChargeStateMachine(int a, int b, int *c);
                              353 ; 7    |#else
                              354 ; 8    |_reentrant void BatteryChargeStateMachine(void);
                              355 ; 9    |#endif
                              356 ; 10   |
                              357 ; 11   |_reentrant WORD BatteryChargeInitialize(void);
                              358 ; 12   |_reentrant void BatteryChargeDisableCharging(BOOL);
                              359 ; 13   |_reentrant void BatteryChargeEnableCharging(void);
                              360 ; 14   |_reentrant BOOL BatteryChargeIsCharging(void);
                              361 ; 15   |_reentrant BOOL BatteryChargeIsTrickleCharging(void);
                              362 ; 16   |
                              363 ; 17   |_reentrant WORD BatteryChargeImplementationInitialize(void);
                              364 ; 18   |_reentrant void BatteryChargeImplementationSample(BOOL);
                              365 ; 19   |_reentrant WORD BatteryChargeImplementatonGetCurrentLimit(void);
                              366 ; 20   |
                              367 ; 21   |
                              368 ; 22   |#endif 
                              369 
                              371 
                              372 ; 13   |#include "regsdcdc.h"
                              373 
                              375 
                              376 ; 1    |#if !(defined(regsdcdcinc))
                              377 ; 2    |
                              378 ; 3    |#define regssysteminc 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              379 ; 4    |
                              380 ; 5    |
                              381 ; 6    |
                              382 ; 7    |#include "types.h"
                              383 
                              385 
                              386 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              387 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              388 ; 3    |//
                              389 ; 4    |// Filename: types.h
                              390 ; 5    |// Description: Standard data types
                              391 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              392 ; 7    |
                              393 ; 8    |#ifndef _TYPES_H
                              394 ; 9    |#define _TYPES_H
                              395 ; 10   |
                              396 ; 11   |// TODO:  move this outta here!
                              397 ; 12   |#if !defined(NOERROR)
                              398 ; 13   |#define NOERROR 0
                              399 ; 14   |#define SUCCESS 0
                              400 ; 15   |#endif 
                              401 ; 16   |#if !defined(SUCCESS)
                              402 ; 17   |#define SUCCESS  0
                              403 ; 18   |#endif
                              404 ; 19   |#if !defined(ERROR)
                              405 ; 20   |#define ERROR   -1
                              406 ; 21   |#endif
                              407 ; 22   |#if !defined(FALSE)
                              408 ; 23   |#define FALSE 0
                              409 ; 24   |#endif
                              410 ; 25   |#if !defined(TRUE)
                              411 ; 26   |#define TRUE  1
                              412 ; 27   |#endif
                              413 ; 28   |
                              414 ; 29   |#if !defined(NULL)
                              415 ; 30   |#define NULL 0
                              416 ; 31   |#endif
                              417 ; 32   |
                              418 ; 33   |#define MAX_INT     0x7FFFFF
                              419 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              420 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              421 ; 36   |#define MAX_ULONG   (-1) 
                              422 ; 37   |
                              423 ; 38   |#define WORD_SIZE   24              // word size in bits
                              424 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              425 ; 40   |
                              426 ; 41   |
                              427 ; 42   |#define BYTE    unsigned char       // btVarName
                              428 ; 43   |#define CHAR    signed char         // cVarName
                              429 ; 44   |#define USHORT  unsigned short      // usVarName
                              430 ; 45   |#define SHORT   unsigned short      // sVarName
                              431 ; 46   |#define WORD    unsigned int        // wVarName
                              432 ; 47   |#define INT     signed int          // iVarName
                              433 ; 48   |#define DWORD   unsigned long       // dwVarName
                              434 ; 49   |#define LONG    signed long         // lVarName
                              435 ; 50   |#define BOOL    unsigned int        // bVarName
                              436 ; 51   |#define FRACT   _fract              // frVarName
                              437 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              438 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              439 ; 54   |#define FLOAT   float               // fVarName
                              440 ; 55   |#define DBL     double              // dVarName
                              441 ; 56   |#define ENUM    enum                // eVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              442 ; 57   |#define CMX     _complex            // cmxVarName
                              443 ; 58   |typedef WORD UCS3;                   // 
                              444 ; 59   |
                              445 ; 60   |#define UINT16  unsigned short
                              446 ; 61   |#define UINT8   unsigned char   
                              447 ; 62   |#define UINT32  unsigned long
                              448 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              449 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              450 ; 65   |#define WCHAR   UINT16
                              451 ; 66   |
                              452 ; 67   |//UINT128 is 16 bytes or 6 words
                              453 ; 68   |typedef struct UINT128_3500 {   
                              454 ; 69   |    int val[6];     
                              455 ; 70   |} UINT128_3500;
                              456 ; 71   |
                              457 ; 72   |#define UINT128   UINT128_3500
                              458 ; 73   |
                              459 ; 74   |// Little endian word packed byte strings:   
                              460 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              461 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              462 ; 77   |// Little endian word packed byte strings:   
                              463 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              464 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              465 ; 80   |
                              466 ; 81   |// Declare Memory Spaces To Use When Coding
                              467 ; 82   |// A. Sector Buffers
                              468 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              469 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              470 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              471 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              472 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              473 ; 88   |// B. Media DDI Memory
                              474 ; 89   |#define MEDIA_DDI_MEM _Y
                              475 ; 90   |
                              476 ; 91   |
                              477 ; 92   |
                              478 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              479 ; 94   |// Examples of circular pointers:
                              480 ; 95   |//    INT CIRC cpiVarName
                              481 ; 96   |//    DWORD CIRC cpdwVarName
                              482 ; 97   |
                              483 ; 98   |#define RETCODE INT                 // rcVarName
                              484 ; 99   |
                              485 ; 100  |// generic bitfield structure
                              486 ; 101  |struct Bitfield {
                              487 ; 102  |    unsigned int B0  :1;
                              488 ; 103  |    unsigned int B1  :1;
                              489 ; 104  |    unsigned int B2  :1;
                              490 ; 105  |    unsigned int B3  :1;
                              491 ; 106  |    unsigned int B4  :1;
                              492 ; 107  |    unsigned int B5  :1;
                              493 ; 108  |    unsigned int B6  :1;
                              494 ; 109  |    unsigned int B7  :1;
                              495 ; 110  |    unsigned int B8  :1;
                              496 ; 111  |    unsigned int B9  :1;
                              497 ; 112  |    unsigned int B10 :1;
                              498 ; 113  |    unsigned int B11 :1;
                              499 ; 114  |    unsigned int B12 :1;
                              500 ; 115  |    unsigned int B13 :1;
                              501 ; 116  |    unsigned int B14 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              502 ; 117  |    unsigned int B15 :1;
                              503 ; 118  |    unsigned int B16 :1;
                              504 ; 119  |    unsigned int B17 :1;
                              505 ; 120  |    unsigned int B18 :1;
                              506 ; 121  |    unsigned int B19 :1;
                              507 ; 122  |    unsigned int B20 :1;
                              508 ; 123  |    unsigned int B21 :1;
                              509 ; 124  |    unsigned int B22 :1;
                              510 ; 125  |    unsigned int B23 :1;
                              511 ; 126  |};
                              512 ; 127  |
                              513 ; 128  |union BitInt {
                              514 ; 129  |        struct Bitfield B;
                              515 ; 130  |        int        I;
                              516 ; 131  |};
                              517 ; 132  |
                              518 ; 133  |#define MAX_MSG_LENGTH 10
                              519 ; 134  |struct CMessage
                              520 ; 135  |{
                              521 ; 136  |        unsigned int m_uLength;
                              522 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              523 ; 138  |};
                              524 ; 139  |
                              525 ; 140  |typedef struct {
                              526 ; 141  |    WORD m_wLength;
                              527 ; 142  |    WORD m_wMessage;
                              528 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              529 ; 144  |} Message;
                              530 ; 145  |
                              531 ; 146  |struct MessageQueueDescriptor
                              532 ; 147  |{
                              533 ; 148  |        int *m_pBase;
                              534 ; 149  |        int m_iModulo;
                              535 ; 150  |        int m_iSize;
                              536 ; 151  |        int *m_pHead;
                              537 ; 152  |        int *m_pTail;
                              538 ; 153  |};
                              539 ; 154  |
                              540 ; 155  |struct ModuleEntry
                              541 ; 156  |{
                              542 ; 157  |    int m_iSignaledEventMask;
                              543 ; 158  |    int m_iWaitEventMask;
                              544 ; 159  |    int m_iResourceOfCode;
                              545 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              546 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              547 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              548 ; 163  |    int m_uTimeOutHigh;
                              549 ; 164  |    int m_uTimeOutLow;
                              550 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              551 ; 166  |};
                              552 ; 167  |
                              553 ; 168  |union WaitMask{
                              554 ; 169  |    struct B{
                              555 ; 170  |        unsigned int m_bNone     :1;
                              556 ; 171  |        unsigned int m_bMessage  :1;
                              557 ; 172  |        unsigned int m_bTimer    :1;
                              558 ; 173  |        unsigned int m_bButton   :1;
                              559 ; 174  |    } B;
                              560 ; 175  |    int I;
                              561 ; 176  |} ;
                              562 ; 177  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              563 ; 178  |
                              564 ; 179  |struct Button {
                              565 ; 180  |        WORD wButtonEvent;
                              566 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              567 ; 182  |};
                              568 ; 183  |
                              569 ; 184  |struct Message {
                              570 ; 185  |        WORD wMsgLength;
                              571 ; 186  |        WORD wMsgCommand;
                              572 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              573 ; 188  |};
                              574 ; 189  |
                              575 ; 190  |union EventTypes {
                              576 ; 191  |        struct CMessage msg;
                              577 ; 192  |        struct Button Button ;
                              578 ; 193  |        struct Message Message;
                              579 ; 194  |};
                              580 ; 195  |
                              581 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              582 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              583 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              584 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              585 ; 200  |
                              586 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              587 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              588 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              589 ; 204  |
                              590 ; 205  |#if DEBUG
                              591 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              592 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              593 ; 208  |#else 
                              594 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              595 ; 210  |#define DebugBuildAssert(x)    
                              596 ; 211  |#endif
                              597 ; 212  |
                              598 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              599 ; 214  |//  #pragma asm
                              600 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              601 ; 216  |//  #pragma endasm
                              602 ; 217  |
                              603 ; 218  |
                              604 ; 219  |#ifdef COLOR_262K
                              605 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              606 ; 221  |#elif defined(COLOR_65K)
                              607 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              608 ; 223  |#else
                              609 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              610 ; 225  |#endif
                              611 ; 226  |    
                              612 ; 227  |#endif // #ifndef _TYPES_H
                              613 
                              615 
                              616 ; 8    |
                              617 ; 9    |
                              618 ; 10   |
                              619 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              620 ; 12   |
                              621 ; 13   |//   SYSTEM STMP Registers 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              622 ; 14   |//      Last Edited 2.19.2003 M. May
                              623 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              624 ; 16   |
                              625 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                              626 ; 18   |
                              627 ; 19   |
                              628 ; 20   |
                              629 ; 21   |
                              630 ; 22   |
                              631 ; 23   |
                              632 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                              633 ; 25   |
                              634 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                              635 ; 27   |
                              636 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                              637 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                              638 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                              639 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                              640 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                              641 ; 33   |
                              642 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                              643 ; 35   |
                              644 ; 36   |
                              645 ; 37   |
                              646 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                              647 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                              648 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                              649 ; 41   |
                              650 ; 42   |
                              651 ; 43   |
                              652 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                              653 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                              654 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                              655 ; 47   |
                              656 ; 48   |
                              657 ; 49   |
                              658 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                              659 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                              660 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                              661 ; 53   |
                              662 ; 54   |
                              663 ; 55   |
                              664 ; 56   |
                              665 ; 57   |
                              666 ; 58   |typedef union               
                              667 ; 59   |{
                              668 ; 60   |    struct {
                              669 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                              670 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                              671 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                              672 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                              673 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                              674 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                              675 ; 67   |    } B;
                              676 ; 68   |    unsigned int I;
                              677 ; 69   |} dcdc1_ctrl0_type;
                              678 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                              679 ; 71   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              680 ; 72   |
                              681 ; 73   |
                              682 ; 74   |
                              683 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                              684 ; 76   |
                              685 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                              686 ; 78   |
                              687 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                              688 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                              689 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                              690 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                              691 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                              692 ; 84   |
                              693 ; 85   |
                              694 ; 86   |
                              695 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                              696 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                              697 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                              698 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                              699 ; 91   |
                              700 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                              701 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                              702 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                              703 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                              704 ; 96   |
                              705 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                              706 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                              707 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                              708 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                              709 ; 101  |
                              710 ; 102  |
                              711 ; 103  |typedef union               
                              712 ; 104  |{
                              713 ; 105  |    struct {
                              714 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                              715 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                              716 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              717 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                              718 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                              719 ; 111  |    } B;
                              720 ; 112  |    unsigned int I;
                              721 ; 113  |} dcdc1_ctrl1_type;
                              722 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                              723 ; 115  |
                              724 ; 116  |
                              725 ; 117  |
                              726 ; 118  |
                              727 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                              728 ; 120  |
                              729 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                              730 ; 122  |
                              731 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                              732 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                              733 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                              734 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                              735 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                              736 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              737 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                              738 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                              739 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                              740 ; 132  |
                              741 ; 133  |
                              742 ; 134  |
                              743 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                              744 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                              745 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                              746 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                              747 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                              748 ; 140  |
                              749 ; 141  |
                              750 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                              751 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                              752 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                              753 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                              754 ; 146  |
                              755 ; 147  |
                              756 ; 148  |
                              757 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                              758 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                              759 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                              760 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                              761 ; 153  |
                              762 ; 154  |
                              763 ; 155  |typedef union               
                              764 ; 156  |{
                              765 ; 157  |    struct {
                              766 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                              767 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                              768 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                              769 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                              770 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                              771 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                              772 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                              773 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                              774 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                              775 ; 167  |    } B;
                              776 ; 168  |    unsigned int I;
                              777 ; 169  |} dcdc_vddio_type;
                              778 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                              779 ; 171  |
                              780 ; 172  |
                              781 ; 173  |
                              782 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                              783 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                              784 ; 176  |
                              785 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                              786 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                              787 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                              788 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                              789 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              790 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                              791 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                              792 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                              793 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                              794 ; 186  |
                              795 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                              796 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                              797 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                              798 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                              799 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                              800 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                              801 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                              802 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                              803 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                              804 ; 196  |
                              805 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                              806 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                              807 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                              808 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                              809 ; 201  |
                              810 ; 202  |typedef union               
                              811 ; 203  |{
                              812 ; 204  |    struct {
                              813 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                              814 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                              815 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                              816 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                              817 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                              818 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                              819 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                              820 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                              821 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                              822 ; 214  |    } B;
                              823 ; 215  |   unsigned int I;
                              824 ; 216  |        unsigned U;
                              825 ; 217  |} dcdc_vddd_type;
                              826 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                              827 ; 219  |
                              828 ; 220  |
                              829 ; 221  |
                              830 ; 222  |
                              831 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                              832 ; 224  |
                              833 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                              834 ; 226  |
                              835 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                              836 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                              837 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                              838 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                              839 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                              840 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                              841 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                              842 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                              843 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              844 ; 236  |
                              845 ; 237  |
                              846 ; 238  |
                              847 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                              848 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                              849 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                              850 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                              851 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                              852 ; 244  |
                              853 ; 245  |
                              854 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                              855 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                              856 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                              857 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                              858 ; 250  |
                              859 ; 251  |
                              860 ; 252  |
                              861 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                              862 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                              863 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                              864 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                              865 ; 257  |
                              866 ; 258  |
                              867 ; 259  |typedef union               
                              868 ; 260  |{
                              869 ; 261  |    struct {
                              870 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                              871 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                              872 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                              873 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                              874 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                              875 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                              876 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                              877 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                              878 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                              879 ; 271  |    } B;
                              880 ; 272  |    unsigned int I;
                              881 ; 273  |} dcdc_vdda_type;
                              882 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                              883 ; 275  |
                              884 ; 276  |
                              885 ; 277  |
                              886 ; 278  |
                              887 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                              888 ; 280  |
                              889 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                              890 ; 282  |
                              891 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                              892 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                              893 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                              894 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                              895 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                              896 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                              897 ; 289  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              898 ; 290  |
                              899 ; 291  |
                              900 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                              901 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                              902 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                              903 ; 295  |
                              904 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                              905 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                              906 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                              907 ; 299  |
                              908 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                              909 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                              910 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                              911 ; 303  |
                              912 ; 304  |
                              913 ; 305  |typedef union               
                              914 ; 306  |{
                              915 ; 307  |    struct {
                              916 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                              917 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                              918 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                              919 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                              920 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                              921 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                              922 ; 314  |    } B;
                              923 ; 315  |    unsigned int I;
                              924 ; 316  |} dcdc2_ctrl0_type; 
                              925 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                              926 ; 318  |
                              927 ; 319  |
                              928 ; 320  |
                              929 ; 321  |
                              930 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                              931 ; 323  |
                              932 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                              933 ; 325  |
                              934 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                              935 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                              936 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                              937 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                              938 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                              939 ; 331  |
                              940 ; 332  |
                              941 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                              942 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                              943 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                              944 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                              945 ; 337  |
                              946 ; 338  |
                              947 ; 339  |
                              948 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                              949 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                              950 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                              951 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              952 ; 344  |
                              953 ; 345  |
                              954 ; 346  |
                              955 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                              956 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                              957 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                              958 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                              959 ; 351  |
                              960 ; 352  |
                              961 ; 353  |typedef union               
                              962 ; 354  |{
                              963 ; 355  |    struct {
                              964 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                              965 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                              966 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              967 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                              968 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                              969 ; 361  |    } B;
                              970 ; 362  |    unsigned int I;
                              971 ; 363  |} dcdc2_ctrl1_type;
                              972 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                              973 ; 365  |
                              974 ; 366  |
                              975 ; 367  |
                              976 ; 368  |
                              977 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                              978 ; 370  |
                              979 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                              980 ; 372  |
                              981 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                              982 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                              983 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                              984 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                              985 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                              986 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                              987 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                              988 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                              989 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                              990 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                              991 ; 383  |
                              992 ; 384  |
                              993 ; 385  |
                              994 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                              995 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                              996 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                              997 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                              998 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                              999 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             1000 ; 392  |
                             1001 ; 393  |
                             1002 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             1003 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             1004 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             1005 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             1006 ; 398  |
                             1007 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1008 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             1009 ; 401  |
                             1010 ; 402  |
                             1011 ; 403  |
                             1012 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             1013 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             1014 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             1015 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             1016 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             1017 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             1018 ; 410  |
                             1019 ; 411  |
                             1020 ; 412  |typedef union               
                             1021 ; 413  |{
                             1022 ; 414  |    struct {
                             1023 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             1024 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             1025 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             1026 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             1027 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             1028 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             1029 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             1030 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             1031 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             1032 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             1033 ; 425  |    } B;
                             1034 ; 426  |    unsigned int I;
                             1035 ; 427  |} speed_type;
                             1036 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             1037 ; 429  |
                             1038 ; 430  |
                             1039 ; 431  |
                             1040 ; 432  |
                             1041 ; 433  |
                             1042 ; 434  |
                             1043 ; 435  |
                             1044 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             1045 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             1046 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             1047 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             1048 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             1049 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             1050 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             1051 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             1052 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             1053 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             1054 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             1055 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             1056 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             1057 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             1058 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             1059 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             1060 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             1061 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             1062 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             1063 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             1064 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             1065 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             1066 ; 458  |
                             1067 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1068 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             1069 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             1070 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             1071 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             1072 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             1073 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             1074 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             1075 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             1076 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             1077 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             1078 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             1079 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             1080 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             1081 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             1082 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             1083 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             1084 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             1085 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             1086 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             1087 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             1088 ; 480  |
                             1089 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             1090 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             1091 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             1092 ; 484  |
                             1093 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             1094 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             1095 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             1096 ; 488  |
                             1097 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             1098 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             1099 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             1100 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             1101 ; 493  |
                             1102 ; 494  |typedef union               
                             1103 ; 495  |{
                             1104 ; 496  |    struct {
                             1105 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             1106 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             1107 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             1108 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             1109 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             1110 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             1111 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             1112 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             1113 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             1114 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             1115 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             1116 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             1117 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             1118 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             1119 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             1120 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1121 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             1122 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             1123 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             1124 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             1125 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             1126 ; 518  |    } B;
                             1127 ; 519  |    unsigned int I;
                             1128 ; 520  |} usb_dcdctbr_type;
                             1129 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             1130 ; 522  |
                             1131 ; 523  |
                             1132 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             1133 ; 525  |
                             1134 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             1135 ; 527  |
                             1136 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             1137 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             1138 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             1139 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             1140 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             1141 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             1142 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             1143 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             1144 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             1145 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             1146 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             1147 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             1148 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             1149 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             1150 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             1151 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             1152 ; 544  |
                             1153 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             1154 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             1155 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             1156 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             1157 ; 549  |
                             1158 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             1159 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             1160 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             1161 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             1162 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             1163 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             1164 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             1165 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             1166 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             1167 ; 559  |
                             1168 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             1169 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             1170 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             1171 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             1172 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             1173 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             1174 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1175 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             1176 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             1177 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             1178 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             1179 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             1180 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             1181 ; 573  |
                             1182 ; 574  |
                             1183 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             1184 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             1185 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             1186 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             1187 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             1188 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             1189 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             1190 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             1191 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             1192 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             1193 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             1194 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             1195 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             1196 ; 588  |
                             1197 ; 589  |typedef union               
                             1198 ; 590  |{
                             1199 ; 591  |    struct {
                             1200 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             1201 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             1202 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             1203 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             1204 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             1205 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             1206 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             1207 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             1208 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             1209 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             1210 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             1211 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             1212 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             1213 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             1214 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             1215 ; 607  |    } B;
                             1216 ; 608  |    unsigned int I;
                             1217 ; 609  |} usb_pwr_charge_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1218 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             1219 ; 611  |
                             1220 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             1221 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             1222 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             1223 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             1224 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             1225 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             1226 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             1227 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             1228 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             1229 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             1230 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             1231 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             1232 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             1233 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             1234 ; 626  |
                             1235 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             1236 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             1237 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             1238 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             1239 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             1240 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             1241 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             1242 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             1243 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             1244 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             1245 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             1246 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             1247 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             1248 ; 640  |
                             1249 ; 641  |typedef union               
                             1250 ; 642  |{
                             1251 ; 643  |    struct {       
                             1252 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             1253 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             1254 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             1255 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             1256 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             1257 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             1258 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             1259 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             1260 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             1261 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             1262 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             1263 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             1264 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             1265 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             1266 ; 658  |    } B;
                             1267 ; 659  |    int I;
                             1268 ; 660  |} usb_dcdcpersist_type;
                             1269 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             1270 ; 662  |
                             1271 ; 663  |
                             1272 ; 664  |
                             1273 ; 665  |#endif
                             1274 ; 666  |
                             1275 ; 667  |
                             1276 ; 668  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1277 
                             1279 
                             1280 ; 14   |#include "regsusb20phy.h"
                             1281 
                             1283 
                             1284 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1285 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                             1286 ; 3    |//;  File        : regsusbphy.inc
                             1287 ; 4    |//;  Description : USB20 PHY Register definition
                             1288 ; 5    |//;  Updated 2.23.2003 By M. Henson
                             1289 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1290 ; 7    |
                             1291 ; 8    |// The following naming conventions are followed in this file.
                             1292 ; 9    |// All registers are named using the format...
                             1293 ; 10   |//     HW_<module>_<regname>
                             1294 ; 11   |// where <module> is the module name which can be any of the following...
                             1295 ; 12   |//     USB20
                             1296 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             1297 ; 14   |// module name includes a number starting from 0 for the first instance of
                             1298 ; 15   |// that module)
                             1299 ; 16   |// <regname> is the specific register within that module
                             1300 ; 17   |// We also define the following...
                             1301 ; 18   |//     HW_<module>_<regname>_BITPOS
                             1302 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             1303 ; 20   |//     HW_<module>_<regname>_SETMASK
                             1304 ; 21   |// which does something else, and
                             1305 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             1306 ; 23   |// which does something else.
                             1307 ; 24   |// Other rules
                             1308 ; 25   |//     All caps
                             1309 ; 26   |//     Numeric identifiers start at 0
                             1310 ; 27   |
                             1311 ; 28   |#if !(defined(regsusbphyinc))
                             1312 ; 29   |#define regsusbphyinc 1
                             1313 ; 30   |
                             1314 ; 31   |#include "types.h"
                             1315 
                             1317 
                             1318 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1319 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1320 ; 3    |//
                             1321 ; 4    |// Filename: types.h
                             1322 ; 5    |// Description: Standard data types
                             1323 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1324 ; 7    |
                             1325 ; 8    |#ifndef _TYPES_H
                             1326 ; 9    |#define _TYPES_H
                             1327 ; 10   |
                             1328 ; 11   |// TODO:  move this outta here!
                             1329 ; 12   |#if !defined(NOERROR)
                             1330 ; 13   |#define NOERROR 0
                             1331 ; 14   |#define SUCCESS 0
                             1332 ; 15   |#endif 
                             1333 ; 16   |#if !defined(SUCCESS)
                             1334 ; 17   |#define SUCCESS  0
                             1335 ; 18   |#endif
                             1336 ; 19   |#if !defined(ERROR)
                             1337 ; 20   |#define ERROR   -1
                             1338 ; 21   |#endif
                             1339 ; 22   |#if !defined(FALSE)
                             1340 ; 23   |#define FALSE 0
                             1341 ; 24   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1342 ; 25   |#if !defined(TRUE)
                             1343 ; 26   |#define TRUE  1
                             1344 ; 27   |#endif
                             1345 ; 28   |
                             1346 ; 29   |#if !defined(NULL)
                             1347 ; 30   |#define NULL 0
                             1348 ; 31   |#endif
                             1349 ; 32   |
                             1350 ; 33   |#define MAX_INT     0x7FFFFF
                             1351 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1352 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1353 ; 36   |#define MAX_ULONG   (-1) 
                             1354 ; 37   |
                             1355 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1356 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1357 ; 40   |
                             1358 ; 41   |
                             1359 ; 42   |#define BYTE    unsigned char       // btVarName
                             1360 ; 43   |#define CHAR    signed char         // cVarName
                             1361 ; 44   |#define USHORT  unsigned short      // usVarName
                             1362 ; 45   |#define SHORT   unsigned short      // sVarName
                             1363 ; 46   |#define WORD    unsigned int        // wVarName
                             1364 ; 47   |#define INT     signed int          // iVarName
                             1365 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1366 ; 49   |#define LONG    signed long         // lVarName
                             1367 ; 50   |#define BOOL    unsigned int        // bVarName
                             1368 ; 51   |#define FRACT   _fract              // frVarName
                             1369 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1370 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1371 ; 54   |#define FLOAT   float               // fVarName
                             1372 ; 55   |#define DBL     double              // dVarName
                             1373 ; 56   |#define ENUM    enum                // eVarName
                             1374 ; 57   |#define CMX     _complex            // cmxVarName
                             1375 ; 58   |typedef WORD UCS3;                   // 
                             1376 ; 59   |
                             1377 ; 60   |#define UINT16  unsigned short
                             1378 ; 61   |#define UINT8   unsigned char   
                             1379 ; 62   |#define UINT32  unsigned long
                             1380 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1381 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1382 ; 65   |#define WCHAR   UINT16
                             1383 ; 66   |
                             1384 ; 67   |//UINT128 is 16 bytes or 6 words
                             1385 ; 68   |typedef struct UINT128_3500 {   
                             1386 ; 69   |    int val[6];     
                             1387 ; 70   |} UINT128_3500;
                             1388 ; 71   |
                             1389 ; 72   |#define UINT128   UINT128_3500
                             1390 ; 73   |
                             1391 ; 74   |// Little endian word packed byte strings:   
                             1392 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1393 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1394 ; 77   |// Little endian word packed byte strings:   
                             1395 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1396 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1397 ; 80   |
                             1398 ; 81   |// Declare Memory Spaces To Use When Coding
                             1399 ; 82   |// A. Sector Buffers
                             1400 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1401 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1402 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1403 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1404 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1405 ; 88   |// B. Media DDI Memory
                             1406 ; 89   |#define MEDIA_DDI_MEM _Y
                             1407 ; 90   |
                             1408 ; 91   |
                             1409 ; 92   |
                             1410 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1411 ; 94   |// Examples of circular pointers:
                             1412 ; 95   |//    INT CIRC cpiVarName
                             1413 ; 96   |//    DWORD CIRC cpdwVarName
                             1414 ; 97   |
                             1415 ; 98   |#define RETCODE INT                 // rcVarName
                             1416 ; 99   |
                             1417 ; 100  |// generic bitfield structure
                             1418 ; 101  |struct Bitfield {
                             1419 ; 102  |    unsigned int B0  :1;
                             1420 ; 103  |    unsigned int B1  :1;
                             1421 ; 104  |    unsigned int B2  :1;
                             1422 ; 105  |    unsigned int B3  :1;
                             1423 ; 106  |    unsigned int B4  :1;
                             1424 ; 107  |    unsigned int B5  :1;
                             1425 ; 108  |    unsigned int B6  :1;
                             1426 ; 109  |    unsigned int B7  :1;
                             1427 ; 110  |    unsigned int B8  :1;
                             1428 ; 111  |    unsigned int B9  :1;
                             1429 ; 112  |    unsigned int B10 :1;
                             1430 ; 113  |    unsigned int B11 :1;
                             1431 ; 114  |    unsigned int B12 :1;
                             1432 ; 115  |    unsigned int B13 :1;
                             1433 ; 116  |    unsigned int B14 :1;
                             1434 ; 117  |    unsigned int B15 :1;
                             1435 ; 118  |    unsigned int B16 :1;
                             1436 ; 119  |    unsigned int B17 :1;
                             1437 ; 120  |    unsigned int B18 :1;
                             1438 ; 121  |    unsigned int B19 :1;
                             1439 ; 122  |    unsigned int B20 :1;
                             1440 ; 123  |    unsigned int B21 :1;
                             1441 ; 124  |    unsigned int B22 :1;
                             1442 ; 125  |    unsigned int B23 :1;
                             1443 ; 126  |};
                             1444 ; 127  |
                             1445 ; 128  |union BitInt {
                             1446 ; 129  |        struct Bitfield B;
                             1447 ; 130  |        int        I;
                             1448 ; 131  |};
                             1449 ; 132  |
                             1450 ; 133  |#define MAX_MSG_LENGTH 10
                             1451 ; 134  |struct CMessage
                             1452 ; 135  |{
                             1453 ; 136  |        unsigned int m_uLength;
                             1454 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1455 ; 138  |};
                             1456 ; 139  |
                             1457 ; 140  |typedef struct {
                             1458 ; 141  |    WORD m_wLength;
                             1459 ; 142  |    WORD m_wMessage;
                             1460 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1461 ; 144  |} Message;
                             1462 ; 145  |
                             1463 ; 146  |struct MessageQueueDescriptor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1464 ; 147  |{
                             1465 ; 148  |        int *m_pBase;
                             1466 ; 149  |        int m_iModulo;
                             1467 ; 150  |        int m_iSize;
                             1468 ; 151  |        int *m_pHead;
                             1469 ; 152  |        int *m_pTail;
                             1470 ; 153  |};
                             1471 ; 154  |
                             1472 ; 155  |struct ModuleEntry
                             1473 ; 156  |{
                             1474 ; 157  |    int m_iSignaledEventMask;
                             1475 ; 158  |    int m_iWaitEventMask;
                             1476 ; 159  |    int m_iResourceOfCode;
                             1477 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1478 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1479 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1480 ; 163  |    int m_uTimeOutHigh;
                             1481 ; 164  |    int m_uTimeOutLow;
                             1482 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1483 ; 166  |};
                             1484 ; 167  |
                             1485 ; 168  |union WaitMask{
                             1486 ; 169  |    struct B{
                             1487 ; 170  |        unsigned int m_bNone     :1;
                             1488 ; 171  |        unsigned int m_bMessage  :1;
                             1489 ; 172  |        unsigned int m_bTimer    :1;
                             1490 ; 173  |        unsigned int m_bButton   :1;
                             1491 ; 174  |    } B;
                             1492 ; 175  |    int I;
                             1493 ; 176  |} ;
                             1494 ; 177  |
                             1495 ; 178  |
                             1496 ; 179  |struct Button {
                             1497 ; 180  |        WORD wButtonEvent;
                             1498 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1499 ; 182  |};
                             1500 ; 183  |
                             1501 ; 184  |struct Message {
                             1502 ; 185  |        WORD wMsgLength;
                             1503 ; 186  |        WORD wMsgCommand;
                             1504 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1505 ; 188  |};
                             1506 ; 189  |
                             1507 ; 190  |union EventTypes {
                             1508 ; 191  |        struct CMessage msg;
                             1509 ; 192  |        struct Button Button ;
                             1510 ; 193  |        struct Message Message;
                             1511 ; 194  |};
                             1512 ; 195  |
                             1513 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1514 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1515 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1516 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1517 ; 200  |
                             1518 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1519 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1520 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1521 ; 204  |
                             1522 ; 205  |#if DEBUG
                             1523 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1524 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1525 ; 208  |#else 
                             1526 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1527 ; 210  |#define DebugBuildAssert(x)    
                             1528 ; 211  |#endif
                             1529 ; 212  |
                             1530 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1531 ; 214  |//  #pragma asm
                             1532 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1533 ; 216  |//  #pragma endasm
                             1534 ; 217  |
                             1535 ; 218  |
                             1536 ; 219  |#ifdef COLOR_262K
                             1537 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1538 ; 221  |#elif defined(COLOR_65K)
                             1539 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1540 ; 223  |#else
                             1541 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1542 ; 225  |#endif
                             1543 ; 226  |    
                             1544 ; 227  |#endif // #ifndef _TYPES_H
                             1545 
                             1547 
                             1548 ; 32   |
                             1549 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1550 ; 34   |//   USB2.0 PHY STMP Registers 
                             1551 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1552 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                             1553 ; 37   |
                             1554 ; 38   |
                             1555 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                             1556 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                             1557 ; 41   |
                             1558 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                             1559 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                             1560 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                             1561 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                             1562 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                             1563 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                             1564 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                             1565 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                             1566 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                             1567 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                             1568 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                             1569 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                             1570 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                             1571 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                             1572 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                             1573 ; 57   |
                             1574 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                             1575 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                             1576 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                             1577 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                             1578 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                             1579 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                             1580 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                             1581 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                             1582 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                             1583 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1584 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                             1585 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                             1586 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                             1587 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                             1588 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                             1589 ; 73   |
                             1590 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                             1591 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                             1592 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                             1593 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                             1594 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                             1595 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                             1596 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                             1597 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                             1598 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                             1599 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                             1600 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                             1601 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                             1602 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                             1603 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                             1604 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                             1605 ; 89   |
                             1606 ; 90   |typedef union               
                             1607 ; 91   |{
                             1608 ; 92   |    struct {
                             1609 ; 93   |        int RSVD0          :5;
                             1610 ; 94   |        int TXDISCON1500   :1;
                             1611 ; 95   |        int PLLVCOPWD      :1;
                             1612 ; 96   |        int PLLVCPPWD      :1;
                             1613 ; 97   |        int RSVD1          :2;
                             1614 ; 98   |        int TXPWDFS        :1;
                             1615 ; 99   |        int TXPWDIBIAS     :1;
                             1616 ; 100  |        int TXPWDV2I       :1;
                             1617 ; 101  |        int TXPWDVBG       :1;
                             1618 ; 102  |        int TXPWDCOMP      :1;
                             1619 ; 103  |        int RSVD2          :1;
                             1620 ; 104  |        int RXPWDDISCONDET :1;
                             1621 ; 105  |        int RXPWDENV       :1;
                             1622 ; 106  |        int RXPWD1PT1      :1;
                             1623 ; 107  |        int RXPWDDIFF      :1;
                             1624 ; 108  |        int RXPWDRX        :1;
                             1625 ; 109  |        int RSVD3          :1;
                             1626 ; 110  |        int PWDIBIAS       :1;
                             1627 ; 111  |        int REGRESET       :1;
                             1628 ; 112  |    } B;
                             1629 ; 113  |    int I;
                             1630 ; 114  |} usbphypwd_type;
                             1631 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                             1632 ; 116  |
                             1633 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1634 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                             1635 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                             1636 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                             1637 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                             1638 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                             1639 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                             1640 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                             1641 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                             1642 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                             1643 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                             1644 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1645 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                             1646 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                             1647 ; 131  |
                             1648 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                             1649 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                             1650 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                             1651 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                             1652 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                             1653 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                             1654 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                             1655 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                             1656 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                             1657 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                             1658 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                             1659 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                             1660 ; 144  |
                             1661 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                             1662 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                             1663 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                             1664 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                             1665 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                             1666 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
                             1667 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                             1668 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
                             1669 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                             1670 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                             1671 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                             1672 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                             1673 ; 157  |
                             1674 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                             1675 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                             1676 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                             1677 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                             1678 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                             1679 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                             1680 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                             1681 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                             1682 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                             1683 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                             1684 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                             1685 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                             1686 ; 170  |
                             1687 ; 171  |typedef union               
                             1688 ; 172  |{
                             1689 ; 173  |    struct {
                             1690 ; 174  |        int TXCAL1500          :4;
                             1691 ; 175  |        int RSVD0              :1;
                             1692 ; 176  |        int TXENCAL1500        :1;
                             1693 ; 177  |        int TXHSXCVR           :1;
                             1694 ; 178  |        int TXCALIBRATE        :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1695 ; 179  |        int TXCAL45DN          :4;
                             1696 ; 180  |        int RSVD1              :1;
                             1697 ; 181  |        int TXENCAL45DN        :1;
                             1698 ; 182  |        int TXHSTERM           :1;
                             1699 ; 183  |        int TXSKEW             :1;
                             1700 ; 184  |        int TXCAL45DP          :4;
                             1701 ; 185  |        int RSVD2              :1;
                             1702 ; 186  |        int TXENCAL45DP        :1;
                             1703 ; 187  |        int TXFSHIZ            :1;
                             1704 ; 188  |        int TXCOMPOUT          :1;
                             1705 ; 189  |    } B;
                             1706 ; 190  |    int I;
                             1707 ; 191  |} usbphytx_type;
                             1708 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                             1709 ; 193  |
                             1710 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                             1711 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                             1712 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                             1713 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                             1714 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                             1715 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                             1716 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                             1717 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                             1718 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                             1719 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                             1720 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                             1721 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                             1722 ; 206  |
                             1723 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                             1724 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                             1725 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                             1726 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                             1727 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                             1728 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                             1729 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                             1730 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                             1731 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                             1732 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                             1733 ; 217  |
                             1734 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                             1735 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                             1736 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                             1737 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                             1738 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                             1739 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                             1740 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                             1741 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                             1742 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                             1743 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                             1744 ; 228  |
                             1745 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                             1746 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1747 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                             1748 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                             1749 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                             1750 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                             1751 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                             1752 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                             1753 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                             1754 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                             1755 ; 239  |
                             1756 ; 240  |typedef union               
                             1757 ; 241  |{
                             1758 ; 242  |    struct {
                             1759 ; 243  |        int PLLV2ISEL        :4;
                             1760 ; 244  |        int RSVD0            :1;
                             1761 ; 245  |        int PLLCPDBLIP       :1;
                             1762 ; 246  |        int PLLVCOCLK2       :1;
                             1763 ; 247  |        int PLLVCOCLK24      :1;
                             1764 ; 248  |        int PLLCPNSEL        :4;
                             1765 ; 249  |        int PLLCLKDIVSEL     :4;
                             1766 ; 250  |        int RSVD1            :4;
                             1767 ; 251  |        int PLLPFDRST        :1;
                             1768 ; 252  |        int PLLCPSHORTLFR    :1;
                             1769 ; 253  |        int PLLVCOKSTART     :1;
                             1770 ; 254  |        int PLLCLKDIVRSTZ    :1;
                             1771 ; 255  |    } B;
                             1772 ; 256  |    int I;
                             1773 ; 257  |} usbphypll_type;
                             1774 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                             1775 ; 259  |
                             1776 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                             1777 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                             1778 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                             1779 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                             1780 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                             1781 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                             1782 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                             1783 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                             1784 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                             1785 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                             1786 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                             1787 ; 271  |
                             1788 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                             1789 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                             1790 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                             1791 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                             1792 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                             1793 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                             1794 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                             1795 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                             1796 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                             1797 ; 281  |
                             1798 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                             1799 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                             1800 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                             1801 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                             1802 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                             1803 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1804 ; 288  |//              480Mhz/7 =68.57Mhz
                             1805 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                             1806 ; 290  |
                             1807 ; 291  |//              480Mhz/8 ~60Mhz
                             1808 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                             1809 ; 293  |
                             1810 ; 294  |//              480Mhz/9 =53.3Mhz
                             1811 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                             1812 ; 296  |
                             1813 ; 297  |//              480Mhz/10 =48Mhz
                             1814 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                             1815 ; 299  |
                             1816 ; 300  |
                             1817 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                             1818 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                             1819 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                             1820 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                             1821 ; 305  |
                             1822 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                             1823 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                             1824 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                             1825 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                             1826 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                             1827 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                             1828 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                             1829 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                             1830 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                             1831 ; 315  |
                             1832 ; 316  |typedef union               
                             1833 ; 317  |{
                             1834 ; 318  |    struct {
                             1835 ; 319  |     int ENVADJ               :4;
                             1836 ; 320  |     int DISCONADJ            :4;
                             1837 ; 321  |     int DEBUGMODE            :4;
                             1838 ; 322  |     int PLLLKTIMECTL         :4;
                             1839 ; 323  |     int PLLCKDIVCTL          :4;
                             1840 ; 324  |     int HOSTMODETEST         :1;
                             1841 ; 325  |     int FSCKSOURCESEL        :1;
                             1842 ; 326  |     int REGRXDBYPASS         :1;
                             1843 ; 327  |     int PLLLOCKED            :1;
                             1844 ; 328  |    } B;
                             1845 ; 329  |    int I;
                             1846 ; 330  |} usbphyrx_type;
                             1847 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                             1848 ; 332  |
                             1849 ; 333  |#endif
                             1850 ; 334  |
                             1851 
                             1853 
                             1854 ; 15   |
                             1855 ; 16   |
                             1856 ; 17   |////////////////////////////////////////////////////////////////////////////////
                             1857 ; 18   |// Variables
                             1858 ; 19   |////////////////////////////////////////////////////////////////////////////////
                             1859 ; 20   |//The charging starts out disabled, but not permanently
                             1860 ; 21   |BOOL g_bBatteryChargeEnabled =FALSE;
                             1861 
                             1862 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:0000                       1863         org     y,".ydatabatterycharge",init:
                             1864 Fg_bBatteryChargeEnabled:
Y:0000 000000                1865         dc      $000000
                             1868 
                             1869 ; 22   |
                             1870 ; 23   |//NOTE:  maybe this PERMANENT thing should be stored in stickybits?
                             1871 ; 24   |BOOL g_bBatteryChargePermanentlyDisabled=FALSE;
                             1872 
                             1873 Fg_bBatteryChargePermanentlyDisabled:
Y:0001 000000                1874         dc      $000000
                             1877 
                             1878 ; 25   |
                             1879 ; 26   |////////////////////////////////////////////////////////////////////////////////
                             1880 ; 27   |// Code
                             1881 ; 28   |////////////////////////////////////////////////////////////////////////////////
                             1882 ; 29   |
                             1883 ; 30   |#ifndef STMP_BUILD_PLAYER
                             1884 ; 31   |/////////////////////////////////////////////////////////////////////////////////////////
                             1885 ; 32   |//
                             1886 ; 33   |//>  Name:          BatteryChargeInitialize
                             1887 ; 34   |//
                             1888 ; 35   |//   Type:          Function 
                             1889 ; 36   |//
                             1890 ; 37   |//   Description:   Initialize the battery charge component.
                             1891 ; 38   |//
                             1892 ; 39   |//   Inputs:        none
                             1893 ; 40   |//
                             1894 ; 41   |//   Outputs:       SUCCESS or not 
                             1895 ; 42   |//
                             1896 ; 43   |//   Notes:         Current does nothing as the state variables are initialized by the 
                             1897 ; 44   |//                  compiler without needing code.
                             1898 ; 45   |//<
                             1899 ; 46   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             1900 ; 47   |_reentrant WORD BatteryChargeInitialize(void)
                             1901 ; 48   |{
                             1902 ; 49   |    //currently, nothing to do.  These variables are initialized by the compiler.
                             1903 ; 50   |    //g_bBatteryChargeEnabled =FALSE;
                             1904 ; 51   |    //g_bBatteryChargePermanentlyDisabled=FALSE;
                             1905 ; 52   |    
                             1906 ; 53   |    HW_USBPHYPWD.B.PWDIBIAS = FALSE;//required to get it to operate
                             1907 ; 54   |
                             1908 ; 55   |    return BatteryChargeImplementationInitialize();
                             1909 ; 56   |}
                             1910 ; 57   |
                             1911 ; 58   |/////////////////////////////////////////////////////////////////////////////////////////
                             1912 ; 59   |//
                             1913 ; 60   |//>  Name:          BatteryChargeIsTrickleCharging
                             1914 ; 61   |//
                             1915 ; 62   |//   Type:          Function 
                             1916 ; 63   |//
                             1917 ; 64   |//   Description:   Returns TRUE if the battery is charging in trickle mode.
                             1918 ; 65   |//
                             1919 ; 66   |//   Inputs:        none 
                             1920 ; 67   |//                  
                             1921 ; 68   |//   Outputs:       TRUE or FALSE
                             1922 ; 69   |//
                             1923 ; 70   |//   Notes:         Should only be used as a display mechanism.   It may lag 
                             1924 ; 71   |//                  (by several hundred milliseconds) the true state of the charging circu
                                  it.
                             1925 ; 72   |//<
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1926 ; 73   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             1927 ; 74   |extern BOOL g_bTrickleChargingNow;
                             1928 ; 75   |_reentrant BOOL BatteryChargeIsTrickleCharging(void)
                             1929 ; 76   |{
                             1930 ; 77   |    BOOL bIsTrickleCharging = FALSE;
                             1931 ; 78   |    if((!HW_VDD5V_PWR_CHARGE.B.PWD) && HW_VDD5V_PWR_CHARGE.B.VDD5V_PRESENT && g_bTrickleCh
                                  argingNow)
                             1932 ; 79   |        bIsTrickleCharging = TRUE;
                             1933 ; 80   |    return bIsTrickleCharging;
                             1934 ; 81   |}
                             1935 ; 82   |
                             1936 ; 83   |#endif
                             1937 ; 84   |
                             1938 ; 85   |/////////////////////////////////////////////////////////////////////////////////////////
                             1939 ; 86   |//
                             1940 ; 87   |//>  Name:          BatteryChargeStopCharging
                             1941 ; 88   |//
                             1942 ; 89   |//   Type:          Function 
                             1943 ; 90   |//
                             1944 ; 91   |//   Description:   Turns off battery charge.
                             1945 ; 92   |//
                             1946 ; 93   |//   Inputs:        BOOL bPermanent--"permanently" disable recharge (until power off) 
                             1947 ; 94   |//                  
                             1948 ; 95   |//
                             1949 ; 96   |//   Outputs:       none 
                             1950 ; 97   |//
                             1951 ; 98   |//   Notes:         
                             1952 ; 99   |//<
                             1953 ; 100  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             1954 ; 101  |_reentrant void BatteryChargeStopCharging(void)
                             1955 ; 102  |{
                             1956 
P:0000                       1957         org     p,".ptextbatterycharge":
                             1997 FBatteryChargeStopCharging:
                             1998 
                             1999 ; 103  |    //Power off the charging
                             2000 ; 104  |    HW_VDD5V_PWR_CHARGE.B.PWD = TRUE;
                             2001 
P:0000 0A7028 00FA1D  6    6 2003         bset    #8,x:$FA1D
                             2004 
                             2005 ; 105  |    HW_VDD5V_PWR_CHARGE.B.BATT_CURRENT = 0;
                             2006 
P:0002 57F000 00FA1D  3    9 2008         move    x:$FA1D,b
P:0004 45F400 FFFFC0  3   12 2009         move    #$FFFFC0,x1
P:0006 20006E         2   14 2010         and     x1,b
P:0007 557000 00FA1D  3   17 2011         move    b1,x:$FA1D
                             2012 
                             2013 ; 106  |#ifndef STMP_BUILD_PLAYER
                             2014 ; 107  |        g_bTrickleChargingNow = FALSE;
                             2015 ; 108  |#endif
                             2016 ; 109  |}
                             2017 
P:0009 00000C         4   21 2019         rts
                             2021 
                             2022 ; 110  | 
                             2023 ; 111  |/////////////////////////////////////////////////////////////////////////////////////////
                             2024 ; 112  |//
                             2025 ; 113  |//>  Name:          BatteryChargeDisableCharging
                             2026 ; 114  |//
                             2027 ; 115  |//   Type:          Function 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2028 ; 116  |//
                             2029 ; 117  |//   Description:   Disables the battery charge circuit (maybe "permanently).
                             2030 ; 118  |//
                             2031 ; 119  |//   Inputs:        BOOL bPermanent--"permanently" disable recharge (until power off) 
                             2032 ; 120  |//                  
                             2033 ; 121  |//
                             2034 ; 122  |//   Outputs:       none 
                             2035 ; 123  |//
                             2036 ; 124  |//   Notes:         
                             2037 ; 125  |//<
                             2038 ; 126  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             2039 ; 127  |_reentrant void BatteryChargeDisableCharging(BOOL bPermanent)
                             2040 ; 128  |{
                             2041 
                             2046 FBatteryChargeDisableCharging:
P:000A 055F7C         2   23 2047         movec   ssh,y:(r7)+
P:000B 205F00         2   25 2050         move    (r7)+
P:000C 045FA0         2   27 2054         movec   m0,n7
P:000D 000000         2   29 2055         nop
P:000E 5C6F00         4   33 2056         move    a1,y:(r7+n7)
                             2059 
                             2060 ; 129  |    BatteryChargeStopCharging();
                             2061 
P:000F 0BF080 rrrrrr  6   39 2063         jsr     FBatteryChargeStopCharging
                             2064 
                             2065 ; 130  |
                             2066 ; 131  |    if(bPermanent)//once this is set, there's no turning back
                             2067 
P:0011 045FA0         2   41 2069         movec   m0,n7
P:0012 000000         2   43 2070         nop
P:0013 5FEF00         4   47 2071         move    y:(r7+n7),b
P:0014 2B0000         2   49 2072         move    #0,b2
P:0015 20000B         2   51 2073         tst     b
P:0016 0AF0AA rrrrrr  6   57 2076         jeq     L3
                             2077 
                             2078 ; 132  |        g_bBatteryChargePermanentlyDisabled = TRUE;
                             2079 
P:0018 44F400 000001  3   60 2081         move    #>1,x0
P:001A 4C7000 rrrrrr  3   63 2082         move    x0,y:Fg_bBatteryChargePermanentlyDisabled
                             2083 
                             2084 ; 133  |
                             2085 ; 134  |    g_bBatteryChargeEnabled = FALSE;
                             2086 
P:001C 2D0000         2   65 2088 L3:     move    #0,b1
P:001D 5D7000 rrrrrr  3   68 2090         move    b1,y:Fg_bBatteryChargeEnabled
                             2091 
                             2092 ; 135  |
                             2093 ; 136  |}
                             2094 
P:001F 205700         2   70 2096         move    (r7)-
P:0020 05FF7C         4   74 2098         movec   y:-(r7),ssh
P:0021 000000         2   76 2101         nop
P:0022 00000C         4   80 2102         rts
                             2104 
                             2105 ; 137  |
                             2106 ; 138  |
                             2107 ; 139  |/////////////////////////////////////////////////////////////////////////////////////////
                             2108 ; 140  |//
                             2109 ; 141  |//>  Name:          BatteryChargeEnableCharging
                             2110 ; 142  |//
                             2111 ; 143  |//   Type:          Function 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2112 ; 144  |//
                             2113 ; 145  |//   Description:   Enables battery charging.
                             2114 ; 146  |//
                             2115 ; 147  |//   Inputs:        none 
                             2116 ; 148  |//                  
                             2117 ; 149  |//   Outputs:       none 
                             2118 ; 150  |//
                             2119 ; 151  |//   Notes:         
                             2120 ; 152  |//<
                             2121 ; 153  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             2122 ; 154  |_reentrant void BatteryChargeEnableCharging(void)
                             2123 ; 155  |{
                             2124 
                             2129 FBatteryChargeEnableCharging:
                             2130 
                             2131 ; 156  |
                             2132 ; 157  |    g_bBatteryChargeEnabled = TRUE;
                             2133 
P:0023 2D0100         2   82 2135         move    #1,b1
P:0024 5D7000 rrrrrr  3   85 2136         move    b1,y:Fg_bBatteryChargeEnabled
                             2137 
                             2138 ; 158  |
                             2139 ; 159  |}
                             2140 
P:0026 00000C         4   89 2142         rts
                             2144 
                             2145 ; 160  |
                             2146 ; 161  |
                             2147 ; 162  |/////////////////////////////////////////////////////////////////////////////////////////
                             2148 ; 163  |//
                             2149 ; 164  |//>  Name:          BatteryChargeIsCharging
                             2150 ; 165  |//
                             2151 ; 166  |//   Type:          Function 
                             2152 ; 167  |//
                             2153 ; 168  |//   Description:   Returns true if the battery charging hardware is enabled, and the 
                             2154 ; 169  |//                  current limit is greater than 0.
                             2155 ; 170  |//
                             2156 ; 171  |//   Inputs:        none 
                             2157 ; 172  |//                  
                             2158 ; 173  |//   Outputs:       none 
                             2159 ; 174  |//
                             2160 ; 175  |//   Notes:         Should only be used as a display mechanism.   It may lag 
                             2161 ; 176  |//                  (by several hundred milliseconds) the true state of the charging circu
                                  it.
                             2162 ; 177  |//<
                             2163 ; 178  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                             2164 ; 179  |_reentrant BOOL BatteryChargeIsCharging(void)
                             2165 ; 180  |{
                             2166 
                             2171 FBatteryChargeIsCharging:
                             2174 
                             2175 ; 181  |    BOOL bIsCharging = FALSE;
                             2176 
P:0027 200013         2   91 2178         clr     a   
                             2180 
                             2181 ; 182  |    if((!HW_VDD5V_PWR_CHARGE.B.PWD) && HW_VDD5V_PWR_CHARGE.B.VDD5V_PRESENT)
                             2182 
P:0028 46F000 00FA1D  3   94 2184         move    x:$FA1D,y0
P:002A 0AC628 rrrrrr  6  100 2185         jset    #8,y0,L5
P:002C 46F000 00FA1D  3  103 2186         move    x:$FA1D,y0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
P:002E 0AC614 rrrrrr  6  109 2187         jclr    #20,y0,L5
                             2188 
                             2189 ; 183  |        bIsCharging = TRUE;
                             2190 
P:0030 56F400 000001  3  112 2192         move    #>1,a
                             2193 L5:
                             2194 
                             2195 ; 184  |    return bIsCharging;
                             2196 ; 185  |}
                             2197 
P:0032 00000C         4  116 2199         rts
                             2202 
                             2203 ; 186  |
                             2204 ; 187  |
                             2205 
                             2207 
                             2208         global  FBatteryChargeDisableCharging
                             2209         global  FBatteryChargeEnableCharging, FBatteryChargeIsCharging
                             2210         global  FBatteryChargeStopCharging, Fg_bBatteryChargeEnabled
                             2211         global  Fg_bBatteryChargePermanentlyDisabled
                             2212 
                             2213         local   L3, L5
                             2214 
                             2215         calls   "BatteryChargeDisableCharging", "BatteryChargeStopCharging"
                             2216 
