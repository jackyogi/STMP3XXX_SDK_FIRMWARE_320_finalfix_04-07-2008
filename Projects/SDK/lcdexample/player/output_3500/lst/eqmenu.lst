TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfc57eb.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;       eqmenu.c:
                               96 ; 1    |// Filename: EqMenu.c (LCD version)
                               97 ; 2    |
                               98 ; 3    |#include "exec.h"
                               99 
                              101 
                              102 ; 1    |#ifndef EXEC_H
                              103 ; 2    |#define EXEC_H
                              104 ; 3    |
                              105 ; 4    |
                              106 ; 5    |void _reentrant SysPostMessage(int iLength,...);
                              107 ; 6    |int _asmfunc GetMessage(struct MessageQueueDescriptor*,struct CMessage * );
                              108 ; 7    |long _asmfunc SysGetCurrentTime(void);
                              109 ; 8    |
                              110 ; 9    |
                              111 ; 10   |#endif
                              112 
                              114 
                              115 ; 4    |#include "types.h"
                              116 
                              118 
                              119 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              120 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              121 ; 3    |//
                              122 ; 4    |// Filename: types.h
                              123 ; 5    |// Description: Standard data types
                              124 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              125 ; 7    |
                              126 ; 8    |#ifndef _TYPES_H
                              127 ; 9    |#define _TYPES_H
                              128 ; 10   |
                              129 ; 11   |// TODO:  move this outta here!
                              130 ; 12   |#if !defined(NOERROR)
                              131 ; 13   |#define NOERROR 0
                              132 ; 14   |#define SUCCESS 0
                              133 ; 15   |#endif 
                              134 ; 16   |#if !defined(SUCCESS)
                              135 ; 17   |#define SUCCESS  0
                              136 ; 18   |#endif
                              137 ; 19   |#if !defined(ERROR)
                              138 ; 20   |#define ERROR   -1
                              139 ; 21   |#endif
                              140 ; 22   |#if !defined(FALSE)
                              141 ; 23   |#define FALSE 0
                              142 ; 24   |#endif
                              143 ; 25   |#if !defined(TRUE)
                              144 ; 26   |#define TRUE  1
                              145 ; 27   |#endif
                              146 ; 28   |
                              147 ; 29   |#if !defined(NULL)
                              148 ; 30   |#define NULL 0
                              149 ; 31   |#endif
                              150 ; 32   |
                              151 ; 33   |#define MAX_INT     0x7FFFFF
                              152 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              153 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              154 ; 36   |#define MAX_ULONG   (-1) 
                              155 ; 37   |
                              156 ; 38   |#define WORD_SIZE   24              // word size in bits
                              157 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              158 ; 40   |
                              159 ; 41   |
                              160 ; 42   |#define BYTE    unsigned char       // btVarName
                              161 ; 43   |#define CHAR    signed char         // cVarName
                              162 ; 44   |#define USHORT  unsigned short      // usVarName
                              163 ; 45   |#define SHORT   unsigned short      // sVarName
                              164 ; 46   |#define WORD    unsigned int        // wVarName
                              165 ; 47   |#define INT     signed int          // iVarName
                              166 ; 48   |#define DWORD   unsigned long       // dwVarName
                              167 ; 49   |#define LONG    signed long         // lVarName
                              168 ; 50   |#define BOOL    unsigned int        // bVarName
                              169 ; 51   |#define FRACT   _fract              // frVarName
                              170 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              171 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              172 ; 54   |#define FLOAT   float               // fVarName
                              173 ; 55   |#define DBL     double              // dVarName
                              174 ; 56   |#define ENUM    enum                // eVarName
                              175 ; 57   |#define CMX     _complex            // cmxVarName
                              176 ; 58   |typedef WORD UCS3;                   // 
                              177 ; 59   |
                              178 ; 60   |#define UINT16  unsigned short
                              179 ; 61   |#define UINT8   unsigned char   
                              180 ; 62   |#define UINT32  unsigned long
                              181 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              182 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              183 ; 65   |#define WCHAR   UINT16
                              184 ; 66   |
                              185 ; 67   |//UINT128 is 16 bytes or 6 words
                              186 ; 68   |typedef struct UINT128_3500 {   
                              187 ; 69   |    int val[6];     
                              188 ; 70   |} UINT128_3500;
                              189 ; 71   |
                              190 ; 72   |#define UINT128   UINT128_3500
                              191 ; 73   |
                              192 ; 74   |// Little endian word packed byte strings:   
                              193 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              194 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              195 ; 77   |// Little endian word packed byte strings:   
                              196 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              197 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              198 ; 80   |
                              199 ; 81   |// Declare Memory Spaces To Use When Coding
                              200 ; 82   |// A. Sector Buffers
                              201 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              202 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              203 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              204 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              205 
                              207 
                              208 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              209 ; 88   |// B. Media DDI Memory
                              210 ; 89   |#define MEDIA_DDI_MEM _Y
                              211 ; 90   |
                              212 ; 91   |
                              213 ; 92   |
                              214 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              215 ; 94   |// Examples of circular pointers:
                              216 ; 95   |//    INT CIRC cpiVarName
                              217 ; 96   |//    DWORD CIRC cpdwVarName
                              218 ; 97   |
                              219 ; 98   |#define RETCODE INT                 // rcVarName
                              220 ; 99   |
                              221 ; 100  |// generic bitfield structure
                              222 ; 101  |struct Bitfield {
                              223 ; 102  |    unsigned int B0  :1;
                              224 ; 103  |    unsigned int B1  :1;
                              225 ; 104  |    unsigned int B2  :1;
                              226 ; 105  |    unsigned int B3  :1;
                              227 ; 106  |    unsigned int B4  :1;
                              228 ; 107  |    unsigned int B5  :1;
                              229 ; 108  |    unsigned int B6  :1;
                              230 ; 109  |    unsigned int B7  :1;
                              231 ; 110  |    unsigned int B8  :1;
                              232 ; 111  |    unsigned int B9  :1;
                              233 ; 112  |    unsigned int B10 :1;
                              234 ; 113  |    unsigned int B11 :1;
                              235 ; 114  |    unsigned int B12 :1;
                              236 ; 115  |    unsigned int B13 :1;
                              237 ; 116  |    unsigned int B14 :1;
                              238 ; 117  |    unsigned int B15 :1;
                              239 ; 118  |    unsigned int B16 :1;
                              240 ; 119  |    unsigned int B17 :1;
                              241 ; 120  |    unsigned int B18 :1;
                              242 ; 121  |    unsigned int B19 :1;
                              243 ; 122  |    unsigned int B20 :1;
                              244 ; 123  |    unsigned int B21 :1;
                              245 ; 124  |    unsigned int B22 :1;
                              246 ; 125  |    unsigned int B23 :1;
                              247 ; 126  |};
                              248 ; 127  |
                              249 ; 128  |union BitInt {
                              250 ; 129  |        struct Bitfield B;
                              251 ; 130  |        int        I;
                              252 ; 131  |};
                              253 ; 132  |
                              254 ; 133  |#define MAX_MSG_LENGTH 10
                              255 ; 134  |struct CMessage
                              256 ; 135  |{
                              257 ; 136  |        unsigned int m_uLength;
                              258 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              259 ; 138  |};
                              260 ; 139  |
                              261 ; 140  |typedef struct {
                              262 ; 141  |    WORD m_wLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              263 ; 142  |    WORD m_wMessage;
                              264 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              265 ; 144  |} Message;
                              266 ; 145  |
                              267 ; 146  |struct MessageQueueDescriptor
                              268 ; 147  |{
                              269 ; 148  |        int *m_pBase;
                              270 ; 149  |        int m_iModulo;
                              271 ; 150  |        int m_iSize;
                              272 ; 151  |        int *m_pHead;
                              273 ; 152  |        int *m_pTail;
                              274 ; 153  |};
                              275 ; 154  |
                              276 ; 155  |struct ModuleEntry
                              277 ; 156  |{
                              278 ; 157  |    int m_iSignaledEventMask;
                              279 ; 158  |    int m_iWaitEventMask;
                              280 ; 159  |    int m_iResourceOfCode;
                              281 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              282 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              283 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              284 ; 163  |    int m_uTimeOutHigh;
                              285 ; 164  |    int m_uTimeOutLow;
                              286 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              287 ; 166  |};
                              288 ; 167  |
                              289 ; 168  |union WaitMask{
                              290 ; 169  |    struct B{
                              291 ; 170  |        unsigned int m_bNone     :1;
                              292 ; 171  |        unsigned int m_bMessage  :1;
                              293 ; 172  |        unsigned int m_bTimer    :1;
                              294 ; 173  |        unsigned int m_bButton   :1;
                              295 ; 174  |    } B;
                              296 ; 175  |    int I;
                              297 ; 176  |} ;
                              298 ; 177  |
                              299 ; 178  |
                              300 ; 179  |struct Button {
                              301 ; 180  |        WORD wButtonEvent;
                              302 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              303 ; 182  |};
                              304 ; 183  |
                              305 ; 184  |struct Message {
                              306 ; 185  |        WORD wMsgLength;
                              307 ; 186  |        WORD wMsgCommand;
                              308 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              309 ; 188  |};
                              310 ; 189  |
                              311 ; 190  |union EventTypes {
                              312 ; 191  |        struct CMessage msg;
                              313 ; 192  |        struct Button Button ;
                              314 ; 193  |        struct Message Message;
                              315 ; 194  |};
                              316 ; 195  |
                              317 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              318 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              319 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              320 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              321 ; 200  |
                              322 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              323 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              324 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              325 ; 204  |
                              326 ; 205  |#if DEBUG
                              327 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              328 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              329 ; 208  |#else 
                              330 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              331 ; 210  |#define DebugBuildAssert(x)    
                              332 ; 211  |#endif
                              333 ; 212  |
                              334 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              335 ; 214  |//  #pragma asm
                              336 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              337 ; 216  |//  #pragma endasm
                              338 ; 217  |
                              339 ; 218  |
                              340 ; 219  |#ifdef COLOR_262K
                              341 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              342 ; 221  |#elif defined(COLOR_65K)
                              343 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              344 ; 223  |#else
                              345 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              346 ; 225  |#endif
                              347 ; 226  |    
                              348 ; 227  |#endif // #ifndef _TYPES_H
                              349 
                              351 
                              352 ; 5    |#include "menumanager.h"
                              353 
                              355 
                              356 ; 1    |#ifndef _EXEC_H
                              357 ; 2    |#define _EXEC_H
                              358 ; 3    |
                              359 ; 4    |#include "types.h"
                              360 
                              362 
                              363 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              364 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              365 ; 3    |//
                              366 ; 4    |// Filename: types.h
                              367 ; 5    |// Description: Standard data types
                              368 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              369 ; 7    |
                              370 ; 8    |#ifndef _TYPES_H
                              371 ; 9    |#define _TYPES_H
                              372 ; 10   |
                              373 ; 11   |// TODO:  move this outta here!
                              374 ; 12   |#if !defined(NOERROR)
                              375 ; 13   |#define NOERROR 0
                              376 ; 14   |#define SUCCESS 0
                              377 ; 15   |#endif 
                              378 ; 16   |#if !defined(SUCCESS)
                              379 ; 17   |#define SUCCESS  0
                              380 ; 18   |#endif
                              381 ; 19   |#if !defined(ERROR)
                              382 ; 20   |#define ERROR   -1
                              383 ; 21   |#endif
                              384 ; 22   |#if !defined(FALSE)
                              385 ; 23   |#define FALSE 0
                              386 ; 24   |#endif
                              387 ; 25   |#if !defined(TRUE)
                              388 ; 26   |#define TRUE  1
                              389 ; 27   |#endif
                              390 ; 28   |
                              391 ; 29   |#if !defined(NULL)
                              392 ; 30   |#define NULL 0
                              393 ; 31   |#endif
                              394 ; 32   |
                              395 ; 33   |#define MAX_INT     0x7FFFFF
                              396 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              397 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              398 ; 36   |#define MAX_ULONG   (-1) 
                              399 ; 37   |
                              400 ; 38   |#define WORD_SIZE   24              // word size in bits
                              401 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              402 ; 40   |
                              403 ; 41   |
                              404 ; 42   |#define BYTE    unsigned char       // btVarName
                              405 ; 43   |#define CHAR    signed char         // cVarName
                              406 ; 44   |#define USHORT  unsigned short      // usVarName
                              407 ; 45   |#define SHORT   unsigned short      // sVarName
                              408 ; 46   |#define WORD    unsigned int        // wVarName
                              409 ; 47   |#define INT     signed int          // iVarName
                              410 ; 48   |#define DWORD   unsigned long       // dwVarName
                              411 ; 49   |#define LONG    signed long         // lVarName
                              412 ; 50   |#define BOOL    unsigned int        // bVarName
                              413 ; 51   |#define FRACT   _fract              // frVarName
                              414 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              415 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              416 ; 54   |#define FLOAT   float               // fVarName
                              417 ; 55   |#define DBL     double              // dVarName
                              418 ; 56   |#define ENUM    enum                // eVarName
                              419 ; 57   |#define CMX     _complex            // cmxVarName
                              420 ; 58   |typedef WORD UCS3;                   // 
                              421 ; 59   |
                              422 ; 60   |#define UINT16  unsigned short
                              423 ; 61   |#define UINT8   unsigned char   
                              424 ; 62   |#define UINT32  unsigned long
                              425 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              426 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              427 ; 65   |#define WCHAR   UINT16
                              428 ; 66   |
                              429 ; 67   |//UINT128 is 16 bytes or 6 words
                              430 ; 68   |typedef struct UINT128_3500 {   
                              431 ; 69   |    int val[6];     
                              432 ; 70   |} UINT128_3500;
                              433 ; 71   |
                              434 ; 72   |#define UINT128   UINT128_3500
                              435 ; 73   |
                              436 ; 74   |// Little endian word packed byte strings:   
                              437 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              438 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              439 ; 77   |// Little endian word packed byte strings:   
                              440 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              441 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              442 ; 80   |
                              443 ; 81   |// Declare Memory Spaces To Use When Coding
                              444 ; 82   |// A. Sector Buffers
                              445 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              446 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              447 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              448 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              449 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              450 ; 88   |// B. Media DDI Memory
                              451 ; 89   |#define MEDIA_DDI_MEM _Y
                              452 ; 90   |
                              453 ; 91   |
                              454 ; 92   |
                              455 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              456 ; 94   |// Examples of circular pointers:
                              457 ; 95   |//    INT CIRC cpiVarName
                              458 ; 96   |//    DWORD CIRC cpdwVarName
                              459 ; 97   |
                              460 ; 98   |#define RETCODE INT                 // rcVarName
                              461 ; 99   |
                              462 ; 100  |// generic bitfield structure
                              463 ; 101  |struct Bitfield {
                              464 ; 102  |    unsigned int B0  :1;
                              465 ; 103  |    unsigned int B1  :1;
                              466 ; 104  |    unsigned int B2  :1;
                              467 ; 105  |    unsigned int B3  :1;
                              468 ; 106  |    unsigned int B4  :1;
                              469 ; 107  |    unsigned int B5  :1;
                              470 ; 108  |    unsigned int B6  :1;
                              471 ; 109  |    unsigned int B7  :1;
                              472 ; 110  |    unsigned int B8  :1;
                              473 ; 111  |    unsigned int B9  :1;
                              474 ; 112  |    unsigned int B10 :1;
                              475 ; 113  |    unsigned int B11 :1;
                              476 ; 114  |    unsigned int B12 :1;
                              477 ; 115  |    unsigned int B13 :1;
                              478 ; 116  |    unsigned int B14 :1;
                              479 ; 117  |    unsigned int B15 :1;
                              480 ; 118  |    unsigned int B16 :1;
                              481 ; 119  |    unsigned int B17 :1;
                              482 ; 120  |    unsigned int B18 :1;
                              483 ; 121  |    unsigned int B19 :1;
                              484 ; 122  |    unsigned int B20 :1;
                              485 ; 123  |    unsigned int B21 :1;
                              486 ; 124  |    unsigned int B22 :1;
                              487 ; 125  |    unsigned int B23 :1;
                              488 ; 126  |};
                              489 ; 127  |
                              490 ; 128  |union BitInt {
                              491 ; 129  |        struct Bitfield B;
                              492 ; 130  |        int        I;
                              493 ; 131  |};
                              494 ; 132  |
                              495 ; 133  |#define MAX_MSG_LENGTH 10
                              496 ; 134  |struct CMessage
                              497 ; 135  |{
                              498 ; 136  |        unsigned int m_uLength;
                              499 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              500 ; 138  |};
                              501 ; 139  |
                              502 ; 140  |typedef struct {
                              503 ; 141  |    WORD m_wLength;
                              504 ; 142  |    WORD m_wMessage;
                              505 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              506 ; 144  |} Message;
                              507 ; 145  |
                              508 ; 146  |struct MessageQueueDescriptor
                              509 ; 147  |{
                              510 ; 148  |        int *m_pBase;
                              511 ; 149  |        int m_iModulo;
                              512 ; 150  |        int m_iSize;
                              513 ; 151  |        int *m_pHead;
                              514 ; 152  |        int *m_pTail;
                              515 ; 153  |};
                              516 ; 154  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              517 ; 155  |struct ModuleEntry
                              518 ; 156  |{
                              519 ; 157  |    int m_iSignaledEventMask;
                              520 ; 158  |    int m_iWaitEventMask;
                              521 ; 159  |    int m_iResourceOfCode;
                              522 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              523 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              524 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              525 ; 163  |    int m_uTimeOutHigh;
                              526 ; 164  |    int m_uTimeOutLow;
                              527 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              528 ; 166  |};
                              529 ; 167  |
                              530 ; 168  |union WaitMask{
                              531 ; 169  |    struct B{
                              532 ; 170  |        unsigned int m_bNone     :1;
                              533 ; 171  |        unsigned int m_bMessage  :1;
                              534 ; 172  |        unsigned int m_bTimer    :1;
                              535 ; 173  |        unsigned int m_bButton   :1;
                              536 ; 174  |    } B;
                              537 ; 175  |    int I;
                              538 ; 176  |} ;
                              539 ; 177  |
                              540 ; 178  |
                              541 ; 179  |struct Button {
                              542 ; 180  |        WORD wButtonEvent;
                              543 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              544 ; 182  |};
                              545 ; 183  |
                              546 ; 184  |struct Message {
                              547 ; 185  |        WORD wMsgLength;
                              548 ; 186  |        WORD wMsgCommand;
                              549 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              550 ; 188  |};
                              551 ; 189  |
                              552 ; 190  |union EventTypes {
                              553 ; 191  |        struct CMessage msg;
                              554 ; 192  |        struct Button Button ;
                              555 ; 193  |        struct Message Message;
                              556 ; 194  |};
                              557 ; 195  |
                              558 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              559 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              560 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              561 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              562 ; 200  |
                              563 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              564 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              565 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              566 ; 204  |
                              567 ; 205  |#if DEBUG
                              568 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              569 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              570 ; 208  |#else 
                              571 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              572 ; 210  |#define DebugBuildAssert(x)    
                              573 ; 211  |#endif
                              574 ; 212  |
                              575 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              576 ; 214  |//  #pragma asm
                              577 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              578 ; 216  |//  #pragma endasm
                              579 ; 217  |
                              580 ; 218  |
                              581 ; 219  |#ifdef COLOR_262K
                              582 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              583 ; 221  |#elif defined(COLOR_65K)
                              584 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              585 ; 223  |#else
                              586 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              587 ; 225  |#endif
                              588 ; 226  |    
                              589 ; 227  |#endif // #ifndef _TYPES_H
                              590 
                              592 
                              593 ; 5    |
                              594 ; 6    |int _asmfunc SysWaitOnEvent(unsigned int uEvent,struct CMessage *,int uLength);
                              595 ; 7    |int _asmfunc SysCallFunction(unsigned int RESOURCE,int _reentrant (int,int,int*),  int, int, int *);
                              596 ; 8    |
                              597 ; 9    |#if !defined(NULL)
                              598 ; 10   |#define NULL 0
                              599 ; 11   |#endif 
                              600 ; 12   |
                              601 ; 13   |#if !defined(FALSE)
                              602 ; 14   |#define FALSE 0
                              603 ; 15   |#endif
                              604 ; 16   |#if !defined(TRUE)
                              605 ; 17   |#define TRUE  !FALSE
                              606 ; 18   |#endif
                              607 ; 19   |
                              608 ; 20   |// The same memory location contains either a menu message or button event. 
                              609 ; 21   |// The button info is stored in the first word or the entire message is stored.
                              610 ; 22   |
                              611 ; 23   |// CMessage is kept for backards compatibility.
                              612 ; 24   |// The union and 2 new structures are added to aid in readability.
                              613 ; 25   |
                              614 ; 26   |
                              615 ; 27   |#include "messages.h"
                              616 
                              618 
                              619 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              620 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              621 ; 3    |// Message defs
                              622 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              623 ; 5    |
                              624 ; 6    |#if (!defined(MSGEQU_INC))
                              625 ; 7    |#define MSGEQU_INC 1
                              626 ; 8    |
                              627 ; 9    |
                              628 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                              629 ; 11   |
                              630 ; 12   |
                              631 ; 13   |#define MSG_TYPE_DECODER 0x000000
                              632 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                              633 ; 15   |#define MSG_TYPE_PARSER 0x020000
                              634 ; 16   |#define MSG_TYPE_LCD 0x030000
                              635 ; 17   |#define MSG_TYPE_MIXER 0x040000
                              636 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                              637 ; 19   |#define MSG_TYPE_MENU 0x060000
                              638 ; 20   |#define MSG_TYPE_LED 0x070000
                              639 ; 21   |#define MSG_TYPE_TUNER 0x080000
                              640 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                              641 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              642 ; 24   |// Equalizer and other effects
                              643 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                              644 ; 26   |#if (defined(USE_PLAYLIST3))
                              645 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                              646 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                              647 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                              648 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                              649 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                              650 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                              651 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                              652 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                              653 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                              654 ; 36   |#if defined(USE_PLAYLIST5)
                              655 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                              656 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                              657 ; 39   |#endif // if @def('USE_PLAYLIST5')
                              658 ; 40   |
                              659 ; 41   |// Message Structure Offsets
                              660 ; 42   |#define MSG_Length 0
                              661 ; 43   |#define MSG_ID 1
                              662 ; 44   |#define MSG_Argument1 2
                              663 ; 45   |#define MSG_Argument2 3
                              664 ; 46   |#define MSG_Argument3 4
                              665 ; 47   |#define MSG_Argument4 5
                              666 ; 48   |#define MSG_Argument5 6
                              667 ; 49   |#define MSG_Argument6 7
                              668 ; 50   |
                              669 ; 51   |
                              670 ; 52   |
                              671 ; 53   |// LCD Message IDs
                              672 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              673 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              674 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              675 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              676 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              677 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              678 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                              679 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                              680 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                              681 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                              682 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                              683 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                              684 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                              685 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                              686 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                              687 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                              688 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                              689 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                              690 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                              691 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                              692 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                              693 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                              694 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                              695 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                              696 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                              697 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                              698 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                              699 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                              700 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                              701 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                              702 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                              703 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                              704 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                              705 ; 87   |//send a NULL as Param1 to return to root frame buffer
                              706 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                              707 ; 89   |//Param1 = left
                              708 ; 90   |//Param2 = top
                              709 ; 91   |//Param3 = right
                              710 ; 92   |//Param4 = bottom
                              711 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                              712 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                              713 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                              714 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                              715 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                              716 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                              717 ; 99   |
                              718 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                              719 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                              720 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                              721 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                              722 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                              723 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                              724 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                              725 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                              726 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                              727 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                              728 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                              729 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                              730 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                              731 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                              732 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                              733 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                              734 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                              735 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                              736 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                              737 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                              738 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                              739 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                              740 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                              741 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                              742 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                              743 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                              744 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                              745 ; 127  |
                              746 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                              747 ; 129  |
                              748 ; 130  |#if defined(CLCD_16BIT)
                              749 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                              750 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                              751 ; 133  |
                              752 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                              753 ; 135  |#else 
                              754 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                              755 ; 137  |#endif
                              756 ; 138  |
                              757 ; 139  |// If you change the LCD message ID's then you must
                              758 ; 140  |// also change the jump table in lcdapi.asm
                              759 ; 141  |
                              760 ; 142  |// Character LCD Message IDs
                              761 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              762 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              763 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              764 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              765 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              766 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              767 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              768 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              769 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              770 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              771 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                              772 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              773 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              774 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                              775 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              776 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              777 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              778 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              779 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              780 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              781 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                              782 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                              783 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              784 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              785 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                              786 ; 168  |// also change the jump table in lcdapi.asm
                              787 ; 169  |
                              788 ; 170  |// Decoder Message IDs
                              789 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                              790 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                              791 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                              792 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                              793 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                              794 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                              795 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                              796 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                              797 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                              798 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                              799 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                              800 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                              801 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                              802 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                              803 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                              804 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                              805 ; 187  |// If you change the Decoder message ID's, then you must
                              806 ; 188  |// also change the jump table in decoder_overlay.asm
                              807 ; 189  |// and in dec_adpcm_overlay.asm.
                              808 ; 190  |
                              809 ; 191  |// Encoder Message IDs
                              810 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                              811 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                              812 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                              813 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                              814 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                              815 ; 197  |// If you change the Encoder message ID's, then you must
                              816 ; 198  |// also change the jump table in all encoder overlay modules.
                              817 ; 199  |
                              818 ; 200  |// Parser Message IDs
                              819 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                              820 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                              821 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                              822 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                              823 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                              824 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                              825 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                              826 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                              827 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                              828 ; 210  |// If you change the Parser message ID's, then you must
                              829 ; 211  |// also change the jump table in parser.asm
                              830 ; 212  |
                              831 ; 213  |// Button Message IDs
                              832 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                              833 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                              834 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                              835 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                              836 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                              837 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                              838 ; 220  |
                              839 ; 221  |// Mixer Message IDs
                              840 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                              841 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                              842 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                              843 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                              844 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                              845 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                              846 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                              847 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                              848 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                              849 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                              850 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                              851 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                              852 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                              853 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                              854 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                              855 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                              856 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                              857 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                              858 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                              859 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                              860 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                              861 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                              862 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                              863 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                              864 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                              865 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                              866 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                              867 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                              868 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                              869 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                              870 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                              871 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                              872 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                              873 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                              874 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                              875 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                              876 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                              877 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                              878 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                              879 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                              880 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                              881 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                              882 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                              883 ; 265  |// If you change the mixer message ID's then you must
                              884 ; 266  |// also change the jump table in mixer.asm
                              885 ; 267  |#define MIXER_ON 0
                              886 ; 268  |#define MIXER_OFF 1
                              887 ; 269  |
                              888 ; 270  |
                              889 ; 271  |// System Message IDs
                              890 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                              891 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                              892 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                              893 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                              894 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                              895 ; 277  |// If you change the system message ID's then you must
                              896 ; 278  |// also change the jump table in systemapi.asm
                              897 ; 279  |
                              898 ; 280  |// Menu IDs
                              899 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                              900 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                              901 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                              902 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                              903 ; 285  |//sub parameters for this message:
                              904 ; 286  |#define RECORDER_START 0
                              905 ; 287  |#define RECORDER_PAUSE 0x2000
                              906 ; 288  |#define RECORDER_RESUME 0x4000
                              907 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                              908 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                              909 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                              910 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                              911 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                              912 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                              913 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                              914 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                              915 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                              916 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                              917 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                              918 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                              919 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                              920 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                              921 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                              922 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                              923 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                              924 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                              925 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                              926 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                              927 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                              928 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                              929 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                              930 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                              931 ; 313  |
                              932 ; 314  |// Note that other versions of this file have different msg equates.
                              933 ; 315  |// If you change the system message ID's then you must
                              934 ; 316  |// also change the jump table in all menu *.asm
                              935 ; 317  |
                              936 ; 318  |// LED Message IDs
                              937 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                              938 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                              939 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                              940 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                              941 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                              942 ; 324  |// If you change the LeD message ID's then you must
                              943 ; 325  |// also change the jump table in ledapi.asm
                              944 ; 326  |
                              945 ; 327  |#if (!defined(REMOVE_FM))
                              946 ; 328  |// FM Tuner Message IDs
                              947 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                              948 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                              949 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                              950 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                              951 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                              952 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                              953 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                              954 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                              955 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                              956 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                              957 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                              958 ; 340  |//one parameter--the sensitivity in uV
                              959 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                              960 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                              961 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                              962 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                              963 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                              964 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                              965 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                              966 ; 348  |#endif
                              967 ; 349  |
                              968 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                              969 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                              970 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                              971 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                              972 ; 354  |
                              973 ; 355  |
                              974 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                              975 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                              976 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                              977 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                              978 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                              979 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                              980 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                              981 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                              982 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                              983 ; 365  |
                              984 ; 366  |#if (defined(USE_PLAYLIST3))
                              985 ; 367  |// Music Library
                              986 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                              987 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                              988 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                              989 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                              990 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                              991 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                              992 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                              993 ; 375  |
                              994 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                              995 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                              996 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                              997 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                              998 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                              999 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                             1000 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                             1001 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                             1002 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                             1003 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                             1004 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                             1005 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                             1006 ; 388  |
                             1007 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1008 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1009 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1010 ; 392  |
                             1011 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1012 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1013 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1014 ; 396  |
                             1015 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1016 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1017 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1018 ; 400  |
                             1019 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                             1020 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1021 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                             1022 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                             1023 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                             1024 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                             1025 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                             1026 ; 408  |
                             1027 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1028 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1029 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1030 ; 412  |
                             1031 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                             1032 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                             1033 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                             1034 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                             1035 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                             1036 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                             1037 ; 419  |
                             1038 ; 420  |#if defined(USE_PLAYLIST5)
                             1039 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                             1040 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                             1041 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                             1042 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                             1043 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                             1044 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                             1045 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                             1046 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                             1047 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                             1048 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                             1049 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                             1050 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                             1051 ; 433  |
                             1052 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                             1053 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                             1054 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                             1055 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                             1056 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                             1057 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                             1058 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                             1059 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                             1060 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                             1061 ; 443  |#endif // if @def('USE_PLAYLIST5')
                             1062 ; 444  |// Events
                             1063 ; 445  |// No event
                             1064 ; 446  |#define EVENT_NONE 0x000001   
                             1065 ; 447  |// A message has been posted
                             1066 ; 448  |#define EVENT_MESSAGE 0x000002   
                             1067 ; 449  |// Run if wait time elapsed
                             1068 ; 450  |#define EVENT_TIMER 0x000004   
                             1069 ; 451  |// Run if a button event occured
                             1070 ; 452  |#define EVENT_BUTTON 0x000008   
                             1071 ; 453  |// Run if a background event occured
                             1072 ; 454  |#define EVENT_BACKGROUND 0x000010   
                             1073 ; 455  |// The executive should immediately repeat this module
                             1074 ; 456  |#define EVENT_REPEAT 0x000020   
                             1075 ; 457  |// Run the module's init routine
                             1076 ; 458  |#define EVENT_INIT 0x800000   
                             1077 ; 459  |
                             1078 ; 460  |#define EVENT_NONE_BITPOS 0
                             1079 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                             1080 ; 462  |#define EVENT_TIMER_BITPOS 2
                             1081 ; 463  |#define EVENT_BUTTON_BITPOS 3
                             1082 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                             1083 ; 465  |#define EVENT_REPEAT_BITPOS 5
                             1084 ; 466  |#define EVENT_INIT_BITPOS 23
                             1085 ; 467  |
                             1086 ; 468  |// Parser Message Buffers
                             1087 ; 469  |#define ParserPlayBit 0
                             1088 ; 470  |#define ButtonPressBit 1
                             1089 ; 471  |#define ParserRwndBit 1
                             1090 ; 472  |#define ParserFfwdBit 2
                             1091 ; 473  |
                             1092 ; 474  |//NextSong Message Parameters
                             1093 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                             1094 ; 476  |#define NEXT_SONG 2             
                             1095 ; 477  |// ButtonPressBit1 cleared
                             1096 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                             1097 ; 479  |// ButtonPressBit1 set
                             1098 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                             1099 ; 481  |// NextSong + Ffwd
                             1100 ; 482  |#define NEXT_SONG_FFWD 4          
                             1101 ; 483  |
                             1102 ; 484  |//PrevSong Message Parameters
                             1103 ; 485  |// PrevSong + Stopped
                             1104 ; 486  |#define PREV_SONG 0          
                             1105 ; 487  |// PrevSong + Play
                             1106 ; 488  |#define PREV_SONG_PLAY 1          
                             1107 ; 489  |// PrevSong + Rwnd
                             1108 ; 490  |#define PREV_SONG_RWND 2          
                             1109 ; 491  |
                             1110 ; 492  |
                             1111 ; 493  |
                             1112 ; 494  |
                             1113 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                             1114 ; 496  |
                             1115 ; 497  |
                             1116 
                             1118 
                             1119 ; 28   |
                             1120 ; 29   |#endif 
                             1121 
                             1123 
                             1124 ; 6    |#include "messages.h"
                             1125 
                             1127 
                             1128 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1129 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                             1130 ; 3    |// Message defs
                             1131 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             1132 ; 5    |
                             1133 ; 6    |#if (!defined(MSGEQU_INC))
                             1134 ; 7    |#define MSGEQU_INC 1
                             1135 ; 8    |
                             1136 ; 9    |
                             1137 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                             1138 ; 11   |
                             1139 ; 12   |
                             1140 ; 13   |#define MSG_TYPE_DECODER 0x000000
                             1141 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                             1142 ; 15   |#define MSG_TYPE_PARSER 0x020000
                             1143 ; 16   |#define MSG_TYPE_LCD 0x030000
                             1144 ; 17   |#define MSG_TYPE_MIXER 0x040000
                             1145 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                             1146 ; 19   |#define MSG_TYPE_MENU 0x060000
                             1147 ; 20   |#define MSG_TYPE_LED 0x070000
                             1148 ; 21   |#define MSG_TYPE_TUNER 0x080000
                             1149 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                             1150 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                             1151 ; 24   |// Equalizer and other effects
                             1152 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                             1153 ; 26   |#if (defined(USE_PLAYLIST3))
                             1154 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                             1155 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                             1156 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                             1157 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                             1158 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                             1159 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                             1160 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                             1161 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                             1162 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                             1163 ; 36   |#if defined(USE_PLAYLIST5)
                             1164 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                             1165 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                             1166 ; 39   |#endif // if @def('USE_PLAYLIST5')
                             1167 ; 40   |
                             1168 ; 41   |// Message Structure Offsets
                             1169 ; 42   |#define MSG_Length 0
                             1170 ; 43   |#define MSG_ID 1
                             1171 ; 44   |#define MSG_Argument1 2
                             1172 ; 45   |#define MSG_Argument2 3
                             1173 ; 46   |#define MSG_Argument3 4
                             1174 ; 47   |#define MSG_Argument4 5
                             1175 ; 48   |#define MSG_Argument5 6
                             1176 ; 49   |#define MSG_Argument6 7
                             1177 ; 50   |
                             1178 ; 51   |
                             1179 ; 52   |
                             1180 ; 53   |// LCD Message IDs
                             1181 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                             1182 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                             1183 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                             1184 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                             1185 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                             1186 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                             1187 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                             1188 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                             1189 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                             1190 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                             1191 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                             1192 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                             1193 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                             1194 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                             1195 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                             1196 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                             1197 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                             1198 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                             1199 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                             1200 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                             1201 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                             1202 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                             1203 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                             1204 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                             1205 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                             1206 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                             1207 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                             1208 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                             1209 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                             1210 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                             1211 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                             1212 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                             1213 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                             1214 ; 87   |//send a NULL as Param1 to return to root frame buffer
                             1215 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                             1216 ; 89   |//Param1 = left
                             1217 ; 90   |//Param2 = top
                             1218 ; 91   |//Param3 = right
                             1219 ; 92   |//Param4 = bottom
                             1220 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                             1221 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                             1222 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                             1223 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                             1224 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                             1225 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                             1226 ; 99   |
                             1227 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                             1228 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                             1229 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                             1230 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                             1231 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                             1232 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                             1233 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                             1234 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                             1235 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                             1236 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                             1237 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                             1238 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                             1239 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                             1240 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                             1241 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                             1242 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                             1243 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                             1244 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                             1245 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                             1246 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                             1247 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                             1248 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                             1249 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                             1250 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                             1251 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                             1252 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                             1253 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                             1254 ; 127  |
                             1255 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                             1256 ; 129  |
                             1257 ; 130  |#if defined(CLCD_16BIT)
                             1258 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                             1259 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                             1260 ; 133  |
                             1261 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                             1262 ; 135  |#else 
                             1263 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                             1264 ; 137  |#endif
                             1265 ; 138  |
                             1266 ; 139  |// If you change the LCD message ID's then you must
                             1267 ; 140  |// also change the jump table in lcdapi.asm
                             1268 ; 141  |
                             1269 ; 142  |// Character LCD Message IDs
                             1270 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                             1271 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                             1272 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                             1273 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                             1274 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1275 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                             1276 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                             1277 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                             1278 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                             1279 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                             1280 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                             1281 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                             1282 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                             1283 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                             1284 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                             1285 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                             1286 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                             1287 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                             1288 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                             1289 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                             1290 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                             1291 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                             1292 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                             1293 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                             1294 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                             1295 ; 168  |// also change the jump table in lcdapi.asm
                             1296 ; 169  |
                             1297 ; 170  |// Decoder Message IDs
                             1298 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                             1299 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                             1300 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                             1301 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             1302 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                             1303 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                             1304 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             1305 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             1306 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             1307 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             1308 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             1309 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             1310 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             1311 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                             1312 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                             1313 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                             1314 ; 187  |// If you change the Decoder message ID's, then you must
                             1315 ; 188  |// also change the jump table in decoder_overlay.asm
                             1316 ; 189  |// and in dec_adpcm_overlay.asm.
                             1317 ; 190  |
                             1318 ; 191  |// Encoder Message IDs
                             1319 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             1320 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             1321 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                             1322 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             1323 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             1324 ; 197  |// If you change the Encoder message ID's, then you must
                             1325 ; 198  |// also change the jump table in all encoder overlay modules.
                             1326 ; 199  |
                             1327 ; 200  |// Parser Message IDs
                             1328 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             1329 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             1330 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             1331 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             1332 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             1333 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             1334 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             1335 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             1336 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             1337 ; 210  |// If you change the Parser message ID's, then you must
                             1338 ; 211  |// also change the jump table in parser.asm
                             1339 ; 212  |
                             1340 ; 213  |// Button Message IDs
                             1341 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             1342 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             1343 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             1344 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             1345 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             1346 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             1347 ; 220  |
                             1348 ; 221  |// Mixer Message IDs
                             1349 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             1350 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             1351 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             1352 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                             1353 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             1354 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             1355 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             1356 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             1357 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             1358 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             1359 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             1360 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             1361 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             1362 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             1363 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             1364 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                             1365 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                             1366 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             1367 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             1368 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             1369 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             1370 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             1371 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             1372 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             1373 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             1374 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             1375 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             1376 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             1377 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                             1378 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             1379 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                             1380 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             1381 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             1382 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             1383 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                             1384 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             1385 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             1386 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             1387 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             1388 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             1389 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                             1390 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                             1391 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                             1392 ; 265  |// If you change the mixer message ID's then you must
                             1393 ; 266  |// also change the jump table in mixer.asm
                             1394 ; 267  |#define MIXER_ON 0
                             1395 ; 268  |#define MIXER_OFF 1
                             1396 ; 269  |
                             1397 ; 270  |
                             1398 ; 271  |// System Message IDs
                             1399 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             1400 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             1401 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             1402 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                             1403 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             1404 ; 277  |// If you change the system message ID's then you must
                             1405 ; 278  |// also change the jump table in systemapi.asm
                             1406 ; 279  |
                             1407 ; 280  |// Menu IDs
                             1408 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             1409 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             1410 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             1411 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             1412 ; 285  |//sub parameters for this message:
                             1413 ; 286  |#define RECORDER_START 0
                             1414 ; 287  |#define RECORDER_PAUSE 0x2000
                             1415 ; 288  |#define RECORDER_RESUME 0x4000
                             1416 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                             1417 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             1418 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             1419 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                             1420 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             1421 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             1422 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             1423 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             1424 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             1425 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             1426 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                             1427 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                             1428 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                             1429 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                             1430 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                             1431 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                             1432 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                             1433 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                             1434 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                             1435 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                             1436 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                             1437 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                             1438 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                             1439 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                             1440 ; 313  |
                             1441 ; 314  |// Note that other versions of this file have different msg equates.
                             1442 ; 315  |// If you change the system message ID's then you must
                             1443 ; 316  |// also change the jump table in all menu *.asm
                             1444 ; 317  |
                             1445 ; 318  |// LED Message IDs
                             1446 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             1447 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                             1448 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                             1449 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                             1450 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                             1451 ; 324  |// If you change the LeD message ID's then you must
                             1452 ; 325  |// also change the jump table in ledapi.asm
                             1453 ; 326  |
                             1454 ; 327  |#if (!defined(REMOVE_FM))
                             1455 ; 328  |// FM Tuner Message IDs
                             1456 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             1457 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             1458 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             1459 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             1460 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             1461 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             1462 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             1463 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             1464 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             1465 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             1466 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             1467 ; 340  |//one parameter--the sensitivity in uV
                             1468 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             1469 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             1470 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             1471 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                             1472 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             1473 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             1474 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             1475 ; 348  |#endif
                             1476 ; 349  |
                             1477 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             1478 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             1479 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             1480 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             1481 ; 354  |
                             1482 ; 355  |
                             1483 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             1484 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             1485 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             1486 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             1487 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             1488 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                             1489 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                             1490 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             1491 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             1492 ; 365  |
                             1493 ; 366  |#if (defined(USE_PLAYLIST3))
                             1494 ; 367  |// Music Library
                             1495 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                             1496 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                             1497 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                             1498 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                             1499 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                             1500 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                             1501 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                             1502 ; 375  |
                             1503 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                             1504 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                             1505 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                             1506 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                             1507 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                             1508 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                             1509 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                             1510 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                             1511 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                             1512 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                             1513 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                             1514 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                             1515 ; 388  |
                             1516 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1517 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1518 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1519 ; 392  |
                             1520 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1521 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1522 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1523 ; 396  |
                             1524 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1525 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1526 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1527 ; 400  |
                             1528 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                             1529 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                             1530 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                             1531 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                             1532 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                             1533 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                             1534 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                             1535 ; 408  |
                             1536 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1537 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1538 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1539 ; 412  |
                             1540 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                             1541 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                             1542 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                             1543 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                             1544 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                             1545 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                             1546 ; 419  |
                             1547 ; 420  |#if defined(USE_PLAYLIST5)
                             1548 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                             1549 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                             1550 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                             1551 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                             1552 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                             1553 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                             1554 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                             1555 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                             1556 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                             1557 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                             1558 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                             1559 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                             1560 ; 433  |
                             1561 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                             1562 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                             1563 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                             1564 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                             1565 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                             1566 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                             1567 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                             1568 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                             1569 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                             1570 ; 443  |#endif // if @def('USE_PLAYLIST5')
                             1571 ; 444  |// Events
                             1572 ; 445  |// No event
                             1573 ; 446  |#define EVENT_NONE 0x000001   
                             1574 ; 447  |// A message has been posted
                             1575 ; 448  |#define EVENT_MESSAGE 0x000002   
                             1576 ; 449  |// Run if wait time elapsed
                             1577 ; 450  |#define EVENT_TIMER 0x000004   
                             1578 ; 451  |// Run if a button event occured
                             1579 ; 452  |#define EVENT_BUTTON 0x000008   
                             1580 ; 453  |// Run if a background event occured
                             1581 ; 454  |#define EVENT_BACKGROUND 0x000010   
                             1582 ; 455  |// The executive should immediately repeat this module
                             1583 ; 456  |#define EVENT_REPEAT 0x000020   
                             1584 ; 457  |// Run the module's init routine
                             1585 ; 458  |#define EVENT_INIT 0x800000   
                             1586 ; 459  |
                             1587 ; 460  |#define EVENT_NONE_BITPOS 0
                             1588 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                             1589 ; 462  |#define EVENT_TIMER_BITPOS 2
                             1590 ; 463  |#define EVENT_BUTTON_BITPOS 3
                             1591 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                             1592 ; 465  |#define EVENT_REPEAT_BITPOS 5
                             1593 ; 466  |#define EVENT_INIT_BITPOS 23
                             1594 ; 467  |
                             1595 ; 468  |// Parser Message Buffers
                             1596 ; 469  |#define ParserPlayBit 0
                             1597 ; 470  |#define ButtonPressBit 1
                             1598 ; 471  |#define ParserRwndBit 1
                             1599 ; 472  |#define ParserFfwdBit 2
                             1600 ; 473  |
                             1601 ; 474  |//NextSong Message Parameters
                             1602 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                             1603 ; 476  |#define NEXT_SONG 2             
                             1604 ; 477  |// ButtonPressBit1 cleared
                             1605 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                             1606 ; 479  |// ButtonPressBit1 set
                             1607 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                             1608 ; 481  |// NextSong + Ffwd
                             1609 ; 482  |#define NEXT_SONG_FFWD 4          
                             1610 ; 483  |
                             1611 ; 484  |//PrevSong Message Parameters
                             1612 ; 485  |// PrevSong + Stopped
                             1613 ; 486  |#define PREV_SONG 0          
                             1614 ; 487  |// PrevSong + Play
                             1615 ; 488  |#define PREV_SONG_PLAY 1          
                             1616 ; 489  |// PrevSong + Rwnd
                             1617 ; 490  |#define PREV_SONG_RWND 2          
                             1618 ; 491  |
                             1619 ; 492  |
                             1620 ; 493  |
                             1621 ; 494  |
                             1622 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                             1623 ; 496  |
                             1624 ; 497  |
                             1625 
                             1627 
                             1628 ; 7    |#include "resource.h"
                             1629 
                             1631 
                             1632 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1633 ; 2    |//  Do not edit it directly.
                             1634 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                             1635 ; 4    |
                             1636 ; 5    |
                             1637 ; 6    |
                             1638 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1639 ; 8    |//  Do not edit it directly.
                             1640 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                             1641 ; 10   |
                             1642 ; 11   |
                             1643 ; 12   |
                             1644 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1645 ; 14   |//  Do not edit it directly.
                             1646 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                             1647 ; 16   |
                             1648 ; 17   |
                             1649 ; 18   |
                             1650 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1651 ; 20   |//  Do not edit it directly.
                             1652 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                             1653 ; 22   |
                             1654 ; 23   |
                             1655 ; 24   |
                             1656 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1657 ; 26   |//  Do not edit it directly.
                             1658 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                             1659 ; 28   |
                             1660 ; 29   |
                             1661 ; 30   |
                             1662 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1663 ; 32   |//  Do not edit it directly.
                             1664 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                             1665 ; 34   |
                             1666 ; 35   |
                             1667 ; 36   |
                             1668 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1669 ; 38   |//  Do not edit it directly.
                             1670 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                             1671 ; 40   |
                             1672 ; 41   |
                             1673 ; 42   |
                             1674 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1675 ; 44   |//  Do not edit it directly.
                             1676 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
                             1677 ; 46   |
                             1678 ; 47   |
                             1679 ; 48   |
                             1680 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1681 ; 50   |//  Do not edit it directly.
                             1682 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                             1683 ; 52   |
                             1684 ; 53   |
                             1685 ; 54   |
                             1686 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1687 ; 56   |//  Do not edit it directly.
                             1688 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                             1689 ; 58   |
                             1690 ; 59   |
                             1691 ; 60   |
                             1692 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1693 ; 62   |//  Do not edit it directly.
                             1694 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                             1695 ; 64   |
                             1696 ; 65   |
                             1697 ; 66   |
                             1698 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1699 ; 68   |//  Do not edit it directly.
                             1700 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
                             1701 ; 70   |
                             1702 ; 71   |
                             1703 ; 72   |
                             1704 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1705 ; 74   |//  Do not edit it directly.
                             1706 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                             1707 ; 76   |
                             1708 ; 77   |
                             1709 ; 78   |
                             1710 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1711 ; 80   |//  Do not edit it directly.
                             1712 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                             1713 ; 82   |
                             1714 ; 83   |
                             1715 ; 84   |
                             1716 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1717 ; 86   |//  Do not edit it directly.
                             1718 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                             1719 ; 88   |
                             1720 ; 89   |
                             1721 ; 90   |
                             1722 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1723 ; 92   |//  Do not edit it directly.
                             1724 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                             1725 ; 94   |
                             1726 ; 95   |
                             1727 ; 96   |
                             1728 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1729 ; 98   |//  Do not edit it directly.
                             1730 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                             1731 ; 100  |
                             1732 ; 101  |
                             1733 ; 102  |
                             1734 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1735 ; 104  |//  Do not edit it directly.
                             1736 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                             1737 ; 106  |
                             1738 ; 107  |
                             1739 ; 108  |
                             1740 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1741 ; 110  |//  Do not edit it directly.
                             1742 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                             1743 ; 112  |
                             1744 ; 113  |
                             1745 ; 114  |
                             1746 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1747 ; 116  |//  Do not edit it directly.
                             1748 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                             1749 ; 118  |
                             1750 ; 119  |
                             1751 ; 120  |
                             1752 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1753 ; 122  |//  Do not edit it directly.
                             1754 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                             1755 ; 124  |
                             1756 ; 125  |
                             1757 ; 126  |
                             1758 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                             1759 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                             1760 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
                             1761 ; 130  |// LCD example resource listing
                             1762 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                             1763 ; 132  |
                             1764 ; 133  |#if (!defined(resources))
                             1765 ; 134  |#define resources 1
                             1766 ; 135  |
                             1767 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                             1768 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                             1769 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             1770 ; 139  |
                             1771 ; 140  |#define VERSION_MAJOR 3
                             1772 ; 141  |#define VERSION_MIDDLE 200
                             1773 ; 142  |#define VERSION_MINOR 910
                             1774 ; 143  |
                             1775 ; 144  |#define LCD_SEG_OFFSET 0x000000
                             1776 ; 145  |#define NUMBER_OF_PRESETS 10
                             1777 ; 146  |
                             1778 ; 147  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1779 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             1780 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
                             1781 ; 150  |//  the resource index cache if it was added.
                             1782 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                             1783 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             1784 ; 153  |
                             1785 ; 154  |//$FILENAME searchdirectory.src
                             1786 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                             1787 ; 156  |//$FILENAME shortdirmatch.src
                             1788 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                             1789 ; 158  |//$FILENAME fopen.src
                             1790 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                             1791 ; 160  |//$FILENAME musicmenu.src
                             1792 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                             1793 ; 162  |//$FILENAME changepath.src
                             1794 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                             1795 ; 164  |//$FILENAME _openandverifyslot.src
                             1796 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                             1797 ; 166  |//$FILENAME _loadslot.src
                             1798 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                             1799 ; 168  |//$FILENAME getname.src
                             1800 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
                             1801 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                             1802 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                             1803 ; 172  |//$FILENAME sethandleforsearch.src
                             1804 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                             1805 ; 174  |//$FILENAME wmaWrap.src
                             1806 ; 175  |#define RSRC_WMADEC_CODE 11    
                             1807 ; 176  |//$FILENAME extractfilename.src
                             1808 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                             1809 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                             1810 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                             1811 ; 180  |//$FILENAME SoftTimerMod.src
                             1812 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                             1813 ; 182  |//$FILENAME GetShortfilename.src
                             1814 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
                             1815 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
                             1816 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                             1817 ; 186  |//$FILENAME playerstatemachine.src
                             1818 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                             1819 ; 188  |//$FILENAME SysMod.src
                             1820 ; 189  |#define RSRC_SYSMOD_CODE 18    
                             1821 ; 190  |//$FILENAME drm_b64_decodew.src
                             1822 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
                             1823 ; 192  |//$FILENAME discardtrailigperiods.src
                             1824 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
                             1825 ; 194  |//$FILENAME uppercase.src
                             1826 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                             1827 ; 196  |//$FILENAME strlength.src
                             1828 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                             1829 ; 198  |//$FILENAME ConverToShortname.src
                             1830 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                             1831 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                             1832 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                             1833 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                             1834 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                             1835 ; 204  |//$FILENAME drm_sst_closekey.src
                             1836 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                             1837 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                             1838 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                             1839 ; 208  |//$FILENAME freehandle.src
                             1840 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                             1841 ; 210  |//$FILENAME searchfreehandleallocate.src
                             1842 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                             1843 ; 212  |//$FILENAME _parselicenseattributes.src
                             1844 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                             1845 ; 214  |//$FILENAME variablesecstategetorset.src
                             1846 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                             1847 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                             1848 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                             1849 ; 218  |//$FILENAME drm_mgr_initialize.src
                             1850 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                             1851 ; 220  |//$FILENAME display.src
                             1852 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                             1853 ; 222  |//$FILENAME DisplayModule.src
                             1854 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                             1855 ; 224  |//$FILENAME extractpath.src
                             1856 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                             1857 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                             1858 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                             1859 ; 228  |//$FILENAME _getprivatekey.src
                             1860 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                             1861 ; 230  |//$FILENAME drm_hds_opennamespace.src
                             1862 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
                             1863 ; 232  |//$FILENAME drm_hds_openslot.src
                             1864 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                             1865 ; 234  |//$FILENAME fclose.src
                             1866 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                             1867 ; 236  |//$FILENAME drm_cphr_init.src
                             1868 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                             1869 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                             1870 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                             1871 ; 240  |//$FILENAME drm_mgr_bind.src
                             1872 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                             1873 ; 242  |//$FILENAME _decryptcontentkey.src
                             1874 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                             1875 ; 244  |//$FILENAME drm_mac_inv32.src
                             1876 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
                             1877 ; 246  |//$FILENAME drm_lic_getattribute.src
                             1878 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                             1879 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                             1880 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                             1881 ; 250  |//$FILENAME drm_dcp_getattribute.src
                             1882 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                             1883 ; 252  |//$FILENAME effectsmodules.src
                             1884 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
                             1885 ; 254  |//$FILENAME janusx.src
                             1886 ; 255  |#define RSRC_JANUSX_CODE 51    
                             1887 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                             1888 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                             1889 ; 258  |//$FILENAME eval.src
                             1890 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                             1891 ; 260  |//$FILENAME _verifyslothash.src
                             1892 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                             1893 ; 262  |//$FILENAME januscommon.src
                             1894 ; 263  |#define RSRC_JANUS_COMMON 55    
                             1895 ; 264  |//$FILENAME changecase.src
                             1896 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                             1897 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                             1898 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                             1899 ; 268  |//$FILENAME _loadlicenseattributes.src
                             1900 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                             1901 ; 270  |//$FILENAME drm_hds_slotseek.src
                             1902 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                             1903 ; 272  |//$FILENAME drm_hds_slotwrite.src
                             1904 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                             1905 ; 274  |//$FILENAME drm_levl_performoperations.src
                             1906 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                             1907 ; 276  |//$FILENAME drm_lic_verifysignature.src
                             1908 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                             1909 ; 278  |//$FILENAME drm_lst_getlicense.src
                             1910 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                             1911 ; 280  |//$FILENAME drm_utl_numbertostring.src
                             1912 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                             1913 ; 282  |//$FILENAME oem_writefile.src
                             1914 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                             1915 ; 284  |//$FILENAME drm_sst_getdata.src
                             1916 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                             1917 ; 286  |//$FILENAME updatehandlemode.src
                             1918 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
                             1919 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                             1920 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                             1921 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                             1922 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                             1923 ; 292  |//$FILENAME doplay_p.src
                             1924 ; 293  |#define RSRC_DOPLAY_P 70    
                             1925 ; 294  |//$FILENAME fatwritep.src
                             1926 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                             1927 ; 296  |//$FILENAME findfirst.src
                             1928 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                             1929 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                             1930 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                             1931 ; 300  |//$FILENAME changetorootdirectory.src
                             1932 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                             1933 ; 302  |//$FILENAME _findkeypair.src
                             1934 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                             1935 ; 304  |//$FILENAME variablemachinegetorset.src
                             1936 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                             1937 ; 306  |//$FILENAME _hdsslotenumnext.src
                             1938 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
                             1939 ; 308  |//$FILENAME getlspubkey.src
                             1940 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                             1941 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                             1942 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                             1943 ; 312  |//$FILENAME drm_utl_decodekid.src
                             1944 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                             1945 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                             1946 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
                             1947 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
                             1948 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
                             1949 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                             1950 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                             1951 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                             1952 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                             1953 ; 322  |//$FILENAME aes_enc.src
                             1954 ; 323  |#define RSRC_AES_ENC 85    
                             1955 ; 324  |//$FILENAME getprivkey.src
                             1956 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                             1957 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                             1958 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                             1959 ; 328  |//$FILENAME playlist_codebank.src
                             1960 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                             1961 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                             1962 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                             1963 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                             1964 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                             1965 ; 334  |//$FILENAME _getdevicecert.src
                             1966 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                             1967 ; 336  |//$FILENAME drm_lic_reportactions.src
                             1968 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                             1969 ; 338  |//$FILENAME drmcrt_wcsntol.src
                             1970 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                             1971 ; 340  |//$FILENAME _basicheaderchecks.src
                             1972 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                             1973 ; 342  |//$FILENAME drm_hdr_getattribute.src
                             1974 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                             1975 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                             1976 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                             1977 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                             1978 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                             1979 ; 348  |//$FILENAME drm_lst_open.src
                             1980 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                             1981 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                             1982 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                             1983 ; 352  |//$FILENAME _verifysymmerticsignature.src
                             1984 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                             1985 ; 354  |//$FILENAME oem_openfile.src
                             1986 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
                             1987 ; 356  |//$FILENAME _getdrmfullpathname.src
                             1988 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                             1989 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                             1990 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                             1991 ; 360  |//$FILENAME _applydiffstostore.src
                             1992 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                             1993 ; 362  |//$FILENAME drm_sst_setdata.src
                             1994 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                             1995 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                             1996 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                             1997 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                             1998 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                             1999 ; 368  |//$FILENAME playerlib_extra.src
                             2000 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
                             2001 ; 370  |//$FILENAME wmaCommon.src
                             2002 ; 371  |#define RSRC_WMA_COMMON 109    
                             2003 ; 372  |//$FILENAME wmainit.src
                             2004 ; 373  |#define RSRC_WMA_INIT 110    
                             2005 ; 374  |//$FILENAME playlist2traverse_codebank.src
                             2006 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                             2007 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                             2008 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
                             2009 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                             2010 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
                             2011 ; 380  |//$FILENAME drm_hds_closestore.src
                             2012 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                             2013 ; 382  |//$FILENAME _hdsloadsrn.src
                             2014 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                             2015 ; 384  |//$FILENAME _loadproritizedlist.src
                             2016 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                             2017 ; 386  |//$FILENAME drm_lst_initenum.src
                             2018 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                             2019 ; 388  |//$FILENAME _loadattributesintocache.src
                             2020 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                             2021 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                             2022 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                             2023 ; 392  |
                             2024 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                             2025 ; 394  |//  Menu Modules (codebanks)
                             2026 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                             2027 ; 396  |//$FILENAME mainmenu.src
                             2028 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                             2029 ; 398  |//$FILENAME displaylists.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2030 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                             2031 ; 400  |
                             2032 ; 401  |//$FILENAME voicemenu.src
                             2033 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                             2034 ; 403  |//$FILENAME fmtunermenu.src
                             2035 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                             2036 ; 405  |//$FILENAME recorderstatemachine.src
                             2037 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                             2038 ; 407  |
                             2039 ; 408  |//$FILENAME eqmenu.src
                             2040 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                             2041 ; 410  |//$FILENAME playmodemenu.src
                             2042 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                             2043 ; 412  |//$FILENAME contrastmenu.src
                             2044 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                             2045 ; 414  |//$FILENAME pwrsettingsmenu.src
                             2046 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                             2047 ; 416  |//$FILENAME timedatemenu.src
                             2048 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
                             2049 ; 418  |//$FILENAME settimemenu.src
                             2050 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                             2051 ; 420  |//$FILENAME setdatemenu.src
                             2052 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                             2053 ; 422  |//$FILENAME settingsmenu.src
                             2054 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                             2055 ; 424  |//$FILENAME string_system_menu.src
                             2056 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                             2057 ; 426  |//$FILENAME deletemenu.src
                             2058 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                             2059 ; 428  |//$FILENAME aboutmenu.src
                             2060 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                             2061 ; 430  |
                             2062 ; 431  |//$FILENAME spectrogram.src
                             2063 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
                             2064 ; 433  |
                             2065 ; 434  |//$FILENAME motionvideomenu.src
                             2066 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                             2067 ; 436  |//$FILENAME motionvideomenuinitstate.src
                             2068 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                             2069 ; 438  |//$FILENAME jpegdisplaymenu.src
                             2070 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
                             2071 ; 440  |//$FILENAME jpegmanualmenu.src
                             2072 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
                             2073 ; 442  |//$FILENAME jpegthumbnailmenu.src
                             2074 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                             2075 ; 444  |//$FILENAME jpegslideshowmenu.src
                             2076 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                             2077 ; 446  |//$FILENAME albumartmenu.src
                             2078 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                             2079 ; 448  |//$FILENAME jpegfileutilextra.src
                             2080 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                             2081 ; 450  |
                             2082 ; 451  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2083 ; 452  |// General Modules
                             2084 ; 453  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2085 ; 454  |//$FILENAME MixMod.src
                             2086 ; 455  |#define RSRC_MIXMOD_CODE 145    
                             2087 ; 456  |//$FILENAME TunerModule.src
                             2088 ; 457  |#define RSRC_TUNER_MODULE 146    
                             2089 ; 458  |//$FILENAME geqoverlay.src
                             2090 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                             2091 ; 460  |
                             2092 ; 461  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2093 ; 462  |// Decoders/Encoders
                             2094 ; 463  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2095 ; 464  |//$FILENAME DecMod.src
                             2096 ; 465  |#define RSRC_DECMOD_CODE 148    
                             2097 ; 466  |//$FILENAME mp3p.src
                             2098 ; 467  |#define RSRC_MP3P_CODE 149    
                             2099 ; 468  |//$FILENAME mp3x.src
                             2100 ; 469  |#define RSRC_MP3X_CODE 150    
                             2101 ; 470  |//$FILENAME mp3y.src
                             2102 ; 471  |#define RSRC_MP3Y_CODE 151    
                             2103 ; 472  |//$FILENAME janusp.src
                             2104 ; 473  |#define RSRC_JANUSP_CODE 152    
                             2105 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                             2106 ; 475  |
                             2107 ; 476  |//$FILENAME decadpcmimamod.src
                             2108 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                             2109 ; 478  |//$FILENAME dec_adpcmp.src
                             2110 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                             2111 ; 480  |//$FILENAME dec_adpcmx.src
                             2112 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                             2113 ; 482  |//$FILENAME dec_adpcmy.src
                             2114 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                             2115 ; 484  |
                             2116 ; 485  |//$FILENAME decadpcmsmvmod.src
                             2117 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                             2118 ; 487  |//$FILENAME dec_smvadpcmp.src
                             2119 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                             2120 ; 489  |//$FILENAME dec_smvadpcmx.src
                             2121 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
                             2122 ; 491  |//$FILENAME dec_smvadpcmy.src
                             2123 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                             2124 ; 493  |
                             2125 ; 494  |//$FILENAME encadpcmimamod.src
                             2126 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                             2127 ; 496  |//$FILENAME enc_adpcmp.src
                             2128 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
                             2129 ; 498  |//$FILENAME enc_adpcmx.src
                             2130 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
                             2131 ; 500  |//$FILENAME enc_adpcmy.src
                             2132 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                             2133 ; 502  |
                             2134 ; 503  |//$FILENAME jpeg_p.src
                             2135 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                             2136 ; 505  |//$FILENAME jpeg_x.src
                             2137 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                             2138 ; 507  |//$FILENAME jpeg_y.src
                             2139 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                             2140 ; 509  |//$FILENAME jpeg2_y.src
                             2141 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                             2142 ; 511  |//$FILENAME bmp2_y.src
                             2143 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                             2144 ; 513  |//$FILENAME bmp_p.src
                             2145 ; 514  |#define RSRC_BMP_DECODER_P 170    
                             2146 ; 515  |
                             2147 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                             2148 ; 517  |//$FILENAME smvjpeg_x.src
                             2149 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                             2150 ; 519  |//$FILENAME smvjpeg_y.src
                             2151 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                             2152 ; 521  |
                             2153 ; 522  |
                             2154 ; 523  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2155 ; 524  |// System Settings
                             2156 ; 525  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2157 ; 526  |//$FILENAME settings.src
                             2158 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                             2159 ; 528  |
                             2160 ; 529  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2161 ; 530  |// Media Device Drivers
                             2162 ; 531  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2163 ; 532  |//This resource is filled with garbage unless it is the MMC build
                             2164 ; 533  |//$FILENAME null.src
                             2165 ; 534  |#define RSRC_MMCDD_CODE 174    
                             2166 ; 535  |//$FILENAME null.src
                             2167 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                             2168 ; 537  |
                             2169 ; 538  |/////////////////////////////////////////////////////////////////////////////////
                             2170 ; 539  |//  PlayState resources
                             2171 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             2172 ; 541  |//$FILENAME play_icon_with_border.src
                             2173 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                             2174 ; 543  |//$FILENAME pause_icon_with_border.src
                             2175 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                             2176 ; 545  |//$FILENAME stop_icon_with_border.src
                             2177 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                             2178 ; 547  |//$FILENAME record_icon_with_border.src
                             2179 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
                             2180 ; 549  |//$FILENAME paused_record_icon_with_border.src
                             2181 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                             2182 ; 551  |//$FILENAME ffwd_icon_with_border.src
                             2183 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                             2184 ; 553  |//$FILENAME rwnd_icon_with_border.src
                             2185 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                             2186 ; 555  |
                             2187 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                             2188 ; 557  |//  PlayMode resources
                             2189 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                             2190 ; 559  |//$FILENAME repeatall_icon.src
                             2191 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                             2192 ; 561  |//$FILENAME repeatsong_icon.src
                             2193 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                             2194 ; 563  |//$FILENAME shuffle_icon.src
                             2195 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                             2196 ; 565  |//$FILENAME random_icon.src
                             2197 ; 566  |#define RSRC_RANDOM_ICON 186    
                             2198 ; 567  |//$FILENAME repeatallclear_icon.src
                             2199 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                             2200 ; 569  |//$FILENAME repeatsongclear_icon.src
                             2201 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                             2202 ; 571  |//$FILENAME shuffleclear_icon.src
                             2203 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                             2204 ; 573  |
                             2205 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                             2206 ; 575  |//  Battery Status
                             2207 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                             2208 ; 577  |//$FILENAME battery_00.src
                             2209 ; 578  |#define RSRC_BATTERY_00 190    
                             2210 ; 579  |//$FILENAME battery_01.src
                             2211 ; 580  |#define RSRC_BATTERY_01 191    
                             2212 ; 581  |//$FILENAME battery_02.src
                             2213 ; 582  |#define RSRC_BATTERY_02 192    
                             2214 ; 583  |//$FILENAME battery_03.src
                             2215 ; 584  |#define RSRC_BATTERY_03 193    
                             2216 ; 585  |//$FILENAME battery_04.src
                             2217 ; 586  |#define RSRC_BATTERY_04 194    
                             2218 ; 587  |//$FILENAME battery_05.src
                             2219 ; 588  |#define RSRC_BATTERY_05 195    
                             2220 ; 589  |//$FILENAME battery_06.src
                             2221 ; 590  |#define RSRC_BATTERY_06 196    
                             2222 ; 591  |//$FILENAME battery_07.src
                             2223 ; 592  |#define RSRC_BATTERY_07 197    
                             2224 ; 593  |//$FILENAME battery_08.src
                             2225 ; 594  |#define RSRC_BATTERY_08 198    
                             2226 ; 595  |//$FILENAME battery_09.src
                             2227 ; 596  |#define RSRC_BATTERY_09 199    
                             2228 ; 597  |//$FILENAME battery_10.src
                             2229 ; 598  |#define RSRC_BATTERY_10 200    
                             2230 ; 599  |
                             2231 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                             2232 ; 601  |//  System Icons
                             2233 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                             2234 ; 603  |//$FILENAME disk_small.src
                             2235 ; 604  |#define RSRC_DISK_ICON 201    
                             2236 ; 605  |//$FILENAME lock_small.src
                             2237 ; 606  |#define RSRC_LOCK_ICON 202    
                             2238 ; 607  |//$FILENAME icon_music_mode.src
                             2239 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                             2240 ; 609  |//$FILENAME icon_voice_mode.src
                             2241 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
                             2242 ; 611  |
                             2243 ; 612  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2244 ; 613  |// Volume Bitmaps
                             2245 ; 614  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2246 ; 615  |//$FILENAME icon_vol_00.src
                             2247 ; 616  |#define RSRC_ICON_VOL_00 205    
                             2248 ; 617  |//$FILENAME icon_vol_01.src
                             2249 ; 618  |#define RSRC_ICON_VOL_01 206    
                             2250 ; 619  |//$FILENAME icon_vol_02.src
                             2251 ; 620  |#define RSRC_ICON_VOL_02 207    
                             2252 ; 621  |//$FILENAME icon_vol_03.src
                             2253 ; 622  |#define RSRC_ICON_VOL_03 208    
                             2254 ; 623  |//$FILENAME icon_vol_04.src
                             2255 ; 624  |#define RSRC_ICON_VOL_04 209    
                             2256 ; 625  |//$FILENAME icon_vol_05.src
                             2257 ; 626  |#define RSRC_ICON_VOL_05 210    
                             2258 ; 627  |//$FILENAME icon_vol_06.src
                             2259 ; 628  |#define RSRC_ICON_VOL_06 211    
                             2260 ; 629  |//$FILENAME icon_vol_07.src
                             2261 ; 630  |#define RSRC_ICON_VOL_07 212    
                             2262 ; 631  |//$FILENAME icon_vol_08.src
                             2263 ; 632  |#define RSRC_ICON_VOL_08 213    
                             2264 ; 633  |//$FILENAME icon_vol_09.src
                             2265 ; 634  |#define RSRC_ICON_VOL_09 214    
                             2266 ; 635  |//$FILENAME icon_vol_10.src
                             2267 ; 636  |#define RSRC_ICON_VOL_10 215    
                             2268 ; 637  |//$FILENAME icon_vol_11.src
                             2269 ; 638  |#define RSRC_ICON_VOL_11 216    
                             2270 ; 639  |//$FILENAME icon_vol_12.src
                             2271 ; 640  |#define RSRC_ICON_VOL_12 217    
                             2272 ; 641  |//$FILENAME icon_vol_13.src
                             2273 ; 642  |#define RSRC_ICON_VOL_13 218    
                             2274 ; 643  |//$FILENAME icon_vol_14.src
                             2275 ; 644  |#define RSRC_ICON_VOL_14 219    
                             2276 ; 645  |//$FILENAME icon_vol_15.src
                             2277 ; 646  |#define RSRC_ICON_VOL_15 220    
                             2278 ; 647  |//$FILENAME icon_vol_16.src
                             2279 ; 648  |#define RSRC_ICON_VOL_16 221    
                             2280 ; 649  |//$FILENAME icon_vol_17.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2281 ; 650  |#define RSRC_ICON_VOL_17 222    
                             2282 ; 651  |//$FILENAME icon_vol_18.src
                             2283 ; 652  |#define RSRC_ICON_VOL_18 223    
                             2284 ; 653  |//$FILENAME icon_vol_19.src
                             2285 ; 654  |#define RSRC_ICON_VOL_19 224    
                             2286 ; 655  |//$FILENAME icon_vol_20.src
                             2287 ; 656  |#define RSRC_ICON_VOL_20 225    
                             2288 ; 657  |//$FILENAME icon_vol_21.src
                             2289 ; 658  |#define RSRC_ICON_VOL_21 226    
                             2290 ; 659  |//$FILENAME icon_vol_22.src
                             2291 ; 660  |#define RSRC_ICON_VOL_22 227    
                             2292 ; 661  |//$FILENAME icon_vol_23.src
                             2293 ; 662  |#define RSRC_ICON_VOL_23 228    
                             2294 ; 663  |//$FILENAME icon_vol_24.src
                             2295 ; 664  |#define RSRC_ICON_VOL_24 229    
                             2296 ; 665  |//$FILENAME icon_vol_25.src
                             2297 ; 666  |#define RSRC_ICON_VOL_25 230    
                             2298 ; 667  |//$FILENAME icon_vol_26.src
                             2299 ; 668  |#define RSRC_ICON_VOL_26 231    
                             2300 ; 669  |//$FILENAME icon_vol_27.src
                             2301 ; 670  |#define RSRC_ICON_VOL_27 232    
                             2302 ; 671  |//$FILENAME icon_vol_28.src
                             2303 ; 672  |#define RSRC_ICON_VOL_28 233    
                             2304 ; 673  |//$FILENAME icon_vol_29.src
                             2305 ; 674  |#define RSRC_ICON_VOL_29 234    
                             2306 ; 675  |//$FILENAME icon_vol_30.src
                             2307 ; 676  |#define RSRC_ICON_VOL_30 235    
                             2308 ; 677  |//$FILENAME icon_vol_31.src
                             2309 ; 678  |#define RSRC_ICON_VOL_31 236    
                             2310 ; 679  |
                             2311 ; 680  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2312 ; 681  |// Splash Screen Stuff
                             2313 ; 682  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2314 ; 683  |//$FILENAME st_bw1.src
                             2315 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                             2316 ; 685  |//$FILENAME siglogo1.src
                             2317 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                             2318 ; 687  |//$FILENAME siglogo2.src
                             2319 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                             2320 ; 689  |//$FILENAME siglogo3.src
                             2321 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                             2322 ; 691  |//$FILENAME siglogo4.src
                             2323 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                             2324 ; 693  |//$FILENAME siglogo5.src
                             2325 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                             2326 ; 695  |//$FILENAME siglogo6.src
                             2327 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                             2328 ; 697  |//$FILENAME siglogo7.src
                             2329 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                             2330 ; 699  |//$FILENAME siglogo8.src
                             2331 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                             2332 ; 701  |//$FILENAME siglogo9.src
                             2333 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                             2334 ; 703  |//$FILENAME siglogo10.src
                             2335 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                             2336 ; 705  |//$FILENAME siglogo11.src
                             2337 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                             2338 ; 707  |//$FILENAME siglogo12.src
                             2339 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                             2340 ; 709  |//$FILENAME siglogo13.src
                             2341 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                             2342 ; 711  |//$FILENAME siglogo.src
                             2343 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                             2344 ; 713  |
                             2345 ; 714  |//$FILENAME locked.src
                             2346 ; 715  |#define RSRC_LOCKED_SCREEN 252    
                             2347 ; 716  |
                             2348 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                             2349 ; 718  |//  Shutdown
                             2350 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                             2351 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                             2352 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                             2353 ; 722  |//$FILENAME status_16_6_steps_0.src
                             2354 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                             2355 ; 724  |//$FILENAME status_16_6_steps_1.src
                             2356 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                             2357 ; 726  |//$FILENAME status_16_6_steps_2.src
                             2358 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                             2359 ; 728  |//$FILENAME status_16_6_steps_3.src
                             2360 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
                             2361 ; 730  |//$FILENAME status_16_6_steps_4.src
                             2362 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                             2363 ; 732  |//$FILENAME status_16_6_steps_5.src
                             2364 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                             2365 ; 734  |//$FILENAME status_16_6_steps_6.src
                             2366 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                             2367 ; 736  |
                             2368 ; 737  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2369 ; 738  |// EQ
                             2370 ; 739  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2371 ; 740  |//$FILENAME eq_clear_icon.src
                             2372 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                             2373 ; 742  |//$FILENAME rock_icon.src
                             2374 ; 743  |#define RSRC_ROCK_ICON 262    
                             2375 ; 744  |//$FILENAME jazz_icon.src
                             2376 ; 745  |#define RSRC_JAZZ_ICON 263    
                             2377 ; 746  |//$FILENAME classic_icon.src
                             2378 ; 747  |#define RSRC_CLASSIC_ICON 264    
                             2379 ; 748  |//$FILENAME pop_icon.src
                             2380 ; 749  |#define RSRC_POP_ICON 265    
                             2381 ; 750  |//$FILENAME custom_icon.src
                             2382 ; 751  |#define RSRC_CUSTOM_ICON 266    
                             2383 ; 752  |
                             2384 ; 753  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2385 ; 754  |// AB
                             2386 ; 755  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2387 ; 756  |//$FILENAME ab_mark_a.src
                             2388 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                             2389 ; 758  |//$FILENAME ab_mark_b.src
                             2390 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                             2391 ; 760  |
                             2392 ; 761  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2393 ; 762  |// Menu Display Resources
                             2394 ; 763  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             2395 ; 764  |//$FILENAME string_music_menu.src
                             2396 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                             2397 ; 766  |//$FILENAME string_mvideo_menu.src
                             2398 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                             2399 ; 768  |//$FILENAME string_jpeg_display_menu.src
                             2400 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                             2401 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                             2402 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
                             2403 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                             2404 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                             2405 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                             2406 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                             2407 ; 776  |//$FILENAME string_voice_menu.src
                             2408 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                             2409 ; 778  |//$FILENAME string_audible_menu.src
                             2410 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                             2411 ; 780  |//$FILENAME string_fmtuner_menu.src
                             2412 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                             2413 ; 782  |//$FILENAME string_settings_menu.src
                             2414 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                             2415 ; 784  |//$FILENAME string_eq_menu.src
                             2416 ; 785  |#define RSRC_STRING_EQ_MENU 279    
                             2417 ; 786  |//$FILENAME string_playmode_menu.src
                             2418 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                             2419 ; 788  |//$FILENAME string_contrast_menu.src
                             2420 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
                             2421 ; 790  |//$FILENAME string_pwrsavings_menu.src
                             2422 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                             2423 ; 792  |//$FILENAME string_time_date_menu.src
                             2424 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                             2425 ; 794  |//$FILENAME string_set_time_menu.src
                             2426 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
                             2427 ; 796  |//$FILENAME string_set_date_menu.src
                             2428 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                             2429 ; 798  |//$FILENAME string_exit_menu.src
                             2430 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                             2431 ; 800  |//$FILENAME string_rock_menu.src
                             2432 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                             2433 ; 802  |//$FILENAME string_pop_menu.src
                             2434 ; 803  |#define RSRC_STRING_POP_MENU 288    
                             2435 ; 804  |//$FILENAME string_classic_menu.src
                             2436 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                             2437 ; 806  |//$FILENAME string_normal_menu.src
                             2438 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                             2439 ; 808  |//$FILENAME string_jazz_menu.src
                             2440 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                             2441 ; 810  |//$FILENAME string_repeat1_menu.src
                             2442 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                             2443 ; 812  |//$FILENAME string_repeatall_menu.src
                             2444 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                             2445 ; 814  |//$FILENAME string_shuffle_menu.src
                             2446 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                             2447 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                             2448 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
                             2449 ; 818  |//$FILENAME string_disable_menu.src
                             2450 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                             2451 ; 820  |//$FILENAME string_1min_menu.src
                             2452 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                             2453 ; 822  |//$FILENAME string_2min_menu.src
                             2454 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                             2455 ; 824  |//$FILENAME string_5min_menu.src
                             2456 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                             2457 ; 826  |//$FILENAME string_10min_menu.src
                             2458 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                             2459 ; 828  |//$FILENAME string_system_menu.src
                             2460 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                             2461 ; 830  |//$FILENAME string_about_menu.src
                             2462 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                             2463 ; 832  |//$FILENAME string_delete_menu.src
                             2464 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
                             2465 ; 834  |//$FILENAME string_record_menu.src
                             2466 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                             2467 ; 836  |//$FILENAME string_spectrogram_menu.src
                             2468 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                             2469 ; 838  |
                             2470 ; 839  |//$FILENAME string_end_of_slide_show.src
                             2471 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                             2472 ; 841  |
                             2473 ; 842  |//$FILENAME string_mb.src
                             2474 ; 843  |#define RSRC_STRING_MB 307    
                             2475 ; 844  |
                             2476 ; 845  |//$FILENAME internal_media.src
                             2477 ; 846  |#define RSRC_INT_MEDIA 308    
                             2478 ; 847  |//$FILENAME external_media.src
                             2479 ; 848  |#define RSRC_EXT_MEDIA 309    
                             2480 ; 849  |
                             2481 ; 850  |//$FILENAME about_title.src
                             2482 ; 851  |#define RSRC_ABOUT_TITLE 310    
                             2483 ; 852  |//$FILENAME player_name.src
                             2484 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                             2485 ; 854  |
                             2486 ; 855  |//$FILENAME settings_title.src
                             2487 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                             2488 ; 857  |//$FILENAME jpeg_display_title.src
                             2489 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                             2490 ; 859  |//$FILENAME erase_title.src
                             2491 ; 860  |#define RSRC_ERASE_TITLE 314    
                             2492 ; 861  |
                             2493 ; 862  |//$FILENAME del_warning_no.src
                             2494 ; 863  |#define RSRC_DELETE_NO 315    
                             2495 ; 864  |//$FILENAME del_warning_yes.src
                             2496 ; 865  |#define RSRC_DELETE_YES 316    
                             2497 ; 866  |//$FILENAME del_warning_line1.src
                             2498 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                             2499 ; 868  |//$FILENAME del_warning_line2.src
                             2500 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                             2501 ; 870  |//$FILENAME lowbattery.src
                             2502 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                             2503 ; 872  |//$FILENAME vbr.src
                             2504 ; 873  |#define RSRC_VBR_BITMAP 320    
                             2505 ; 874  |
                             2506 ; 875  |//$FILENAME string_song.src
                             2507 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                             2508 ; 877  |//$FILENAME string_voice.src
                             2509 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                             2510 ; 879  |
                             2511 ; 880  |//$FILENAME time_date_title.src
                             2512 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                             2513 ; 882  |//$FILENAME set_time_title.src
                             2514 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                             2515 ; 884  |//$FILENAME set_date_title.src
                             2516 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                             2517 ; 886  |//$FILENAME string_searching.src
                             2518 ; 887  |#define RSRC_STRING_SEARCHING 326    
                             2519 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                             2520 ; 889  |//  Save Changes
                             2521 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                             2522 ; 891  |//$FILENAME save_changes_yes.src
                             2523 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                             2524 ; 893  |//$FILENAME save_changes_no.src
                             2525 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                             2526 ; 895  |//$FILENAME save_changes_cancel.src
                             2527 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                             2528 ; 897  |//$FILENAME save_changes_clear.src
                             2529 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                             2530 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                             2531 ; 900  |//  Contrast
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2532 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                             2533 ; 902  |//$FILENAME contrast_title.src
                             2534 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                             2535 ; 904  |//$FILENAME contrast_frame.src
                             2536 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                             2537 ; 906  |//$FILENAME contrast_level0.src
                             2538 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                             2539 ; 908  |//$FILENAME contrast_level1.src
                             2540 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
                             2541 ; 910  |//$FILENAME contrast_level2.src
                             2542 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                             2543 ; 912  |//$FILENAME contrast_level3.src
                             2544 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                             2545 ; 914  |//$FILENAME contrast_level4.src
                             2546 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                             2547 ; 916  |//$FILENAME contrast_level5.src
                             2548 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                             2549 ; 918  |//$FILENAME contrast_level6.src
                             2550 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
                             2551 ; 920  |//$FILENAME contrast_level7.src
                             2552 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                             2553 ; 922  |//$FILENAME contrast_level8.src
                             2554 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                             2555 ; 924  |//$FILENAME contrast_level9.src
                             2556 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                             2557 ; 926  |//$FILENAME contrast_level10.src
                             2558 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                             2559 ; 928  |
                             2560 ; 929  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2561 ; 930  |// Funclets
                             2562 ; 931  |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2563 ; 932  |//$FILENAME Funclet_SetRTC.src
                             2564 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                             2565 ; 934  |//$FILENAME Funclet_InitRTC.src
                             2566 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                             2567 ; 936  |//$FILENAME Funclet_ReadRTC.src
                             2568 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                             2569 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                             2570 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                             2571 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                             2572 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                             2573 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                             2574 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                             2575 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                             2576 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                             2577 ; 946  |//$FILENAME Funclet_AnalogInit.src
                             2578 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                             2579 ; 948  |//$FILENAME Funclet_UsbConnected.src
                             2580 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                             2581 ; 950  |//$FILENAME Funclet_ButtonInit.src
                             2582 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                             2583 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                             2584 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                             2585 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                             2586 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
                             2587 ; 956  |//$FILENAME Funclet_StartProject.src
                             2588 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                             2589 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                             2590 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                             2591 ; 960  |//$FILENAME null.src
                             2592 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                             2593 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                             2594 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                             2595 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                             2596 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                             2597 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                             2598 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                             2599 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                             2600 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
                             2601 ; 970  |//$FILENAME null.src
                             2602 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                             2603 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                             2604 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                             2605 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                             2606 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                             2607 ; 976  |//$FILENAME null.src
                             2608 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                             2609 ; 978  |//$FILENAME null.src
                             2610 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
                             2611 ; 980  |//$FILENAME null.src
                             2612 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                             2613 ; 982  |//$FILENAME null.src
                             2614 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                             2615 ; 984  |//$FILENAME null.src
                             2616 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                             2617 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                             2618 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                             2619 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                             2620 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                             2621 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                             2622 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                             2623 ; 992  |//$FILENAME null.src
                             2624 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                             2625 ; 994  |//$FILENAME null.src
                             2626 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                             2627 ; 996  |//$FILENAME Funclet_SaveSettings.src
                             2628 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                             2629 ; 998  |//$FILENAME Funclet_LoadSettings.src
                             2630 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                             2631 ; 1000 |///////////////////////////////////////////////////////////////
                             2632 ; 1001 |// Sanyo FM Tuner Fuclet
                             2633 ; 1002 |///////////////////////////////////////////////////////////////
                             2634 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                             2635 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations.src
                             2636 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.src
                             2637 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoStereo.src
                             2638 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                             2639 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                             2640 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.src
                             2641 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
                             2642 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.src
                             2643 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFieldStrength.src
                             2644 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapOsc.src
                             2645 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmStation.src
                             2646 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPreset.src
                             2647 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                             2648 ; 1017 |
                             2649 ; 1018 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2650 ; 1019 |// WMA Resources
                             2651 ; 1020 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2652 ; 1021 |//$FILENAME wmaCore.src
                             2653 ; 1022 |#define RSRC_WMA_CORE 378    
                             2654 ; 1023 |//$FILENAME wmaMidLow.src
                             2655 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                             2656 ; 1025 |//$FILENAME wmaHigh.src
                             2657 ; 1026 |#define RSRC_WMA_HIGH 380    
                             2658 ; 1027 |//$FILENAME wmaHighMid.src
                             2659 ; 1028 |#define RSRC_WMA_HIGHMID 381    
                             2660 ; 1029 |//$FILENAME wmaMid.src
                             2661 ; 1030 |#define RSRC_WMA_MID 382    
                             2662 ; 1031 |//$FILENAME wmaLow.src
                             2663 ; 1032 |#define RSRC_WMA_LOW 383    
                             2664 ; 1033 |//$FILENAME wmaX1mem.src
                             2665 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                             2666 ; 1035 |//$FILENAME wmaYmem.src
                             2667 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                             2668 ; 1037 |//$FILENAME wmaLXmem.src
                             2669 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                             2670 ; 1039 |//$FILENAME wmaLYmem.src
                             2671 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
                             2672 ; 1041 |//$FILENAME wmaHuff44Qb.src
                             2673 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                             2674 ; 1043 |//$FILENAME wmaHuff44Ob.src
                             2675 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                             2676 ; 1045 |//$FILENAME wmaHuff16Ob.src
                             2677 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                             2678 ; 1047 |//$FILENAME drmpdcommon.src
                             2679 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                             2680 ; 1049 |//$FILENAME januswmasupport.src
                             2681 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                             2682 ; 1051 |//$FILENAME wmalicenseinit.src
                             2683 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                             2684 ; 1053 |//$FILENAME wma_tables.src
                             2685 ; 1054 |#define RSRC_WMA_TABLES 394    
                             2686 ; 1055 |//$FILENAME janus_tables.src
                             2687 ; 1056 |#define RSRC_JANUS_TABLES 395    
                             2688 ; 1057 |//$FILENAME wma_constants.src
                             2689 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                             2690 ; 1059 |//$FILENAME janus_constants.src
                             2691 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                             2692 ; 1061 |//$FILENAME janus_xmem.src
                             2693 ; 1062 |#define RSRC_JANUS_X 398    
                             2694 ; 1063 |//$FILENAME janusy_data.src
                             2695 ; 1064 |#define RSRC_JANUSY_DATA 399    
                             2696 ; 1065 |
                             2697 ; 1066 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2698 ; 1067 |// Fonts -- these are last because they are very large
                             2699 ; 1068 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             2700 ; 1069 |//$FILENAME font_table.src
                             2701 ; 1070 |#define RSRC_FONT_TABLE 400    
                             2702 ; 1071 |//$FILENAME font_PGM.src
                             2703 ; 1072 |#define RSRC_PGM_8 401    
                             2704 ; 1073 |//$FILENAME font_SGMs.src
                             2705 ; 1074 |#define RSRC_SGMS_8 402    
                             2706 ; 1075 |//$FILENAME font_script_00.src
                             2707 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                             2708 ; 1077 |//$FILENAME font_scripts.src
                             2709 ; 1078 |#define RSRC_SCRIPTS_8 404    
                             2710 ; 1079 |//$FILENAME font_PDM.src
                             2711 ; 1080 |#define RSRC_PDM 405    
                             2712 ; 1081 |//$FILENAME font_SDMs.src
                             2713 ; 1082 |#define RSRC_SDMS 406    
                             2714 ; 1083 |//$FILENAME bitmap_warning.src
                             2715 ; 1084 |#define RSRC_WARNING 407    
                             2716 ; 1085 |//$FILENAME bitmap_device_full.src
                             2717 ; 1086 |#define RSRC_DEVICE_FULL 408    
                             2718 ; 1087 |
                             2719 ; 1088 |
                             2720 ; 1089 |//$FILENAME lcd_controller_init.src
                             2721 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                             2722 ; 1091 |
                             2723 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                             2724 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                             2725 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                             2726 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                             2727 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                             2728 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                             2729 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                             2730 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                             2731 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                             2732 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                             2733 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                             2734 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                             2735 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                             2736 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                             2737 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                             2738 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                             2739 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                             2740 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                             2741 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                             2742 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                             2743 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                             2744 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                             2745 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                             2746 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                             2747 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                             2748 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                             2749 ; 1118 |
                             2750 ; 1119 |
                             2751 ; 1120 |//$FILENAME sysrecord.src
                             2752 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                             2753 ; 1122 |
                             2754 ; 1123 |//$FILENAME string_record_settings.src
                             2755 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                             2756 ; 1125 |//$FILENAME string_sample_rate.src
                             2757 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                             2758 ; 1127 |//$FILENAME string_encoder.src
                             2759 ; 1128 |#define RSRC_STRING_ENCODER 426    
                             2760 ; 1129 |//$FILENAME string_adpcm.src
                             2761 ; 1130 |#define RSRC_STRING_ADPCM 427    
                             2762 ; 1131 |//$FILENAME string_msadpcm.src
                             2763 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                             2764 ; 1133 |//$FILENAME string_imadpcm.src
                             2765 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                             2766 ; 1135 |//$FILENAME string_pcm.src
                             2767 ; 1136 |#define RSRC_STRING_PCM 430    
                             2768 ; 1137 |//$FILENAME string_internal.src
                             2769 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                             2770 ; 1139 |//$FILENAME string_external.src
                             2771 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
                             2772 ; 1141 |//$FILENAME string_device.src
                             2773 ; 1142 |#define RSRC_STRING_DEVICE 433    
                             2774 ; 1143 |//$FILENAME string_source.src
                             2775 ; 1144 |#define RSRC_STRING_SOURCE 434    
                             2776 ; 1145 |//$FILENAME string_microphone.src
                             2777 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                             2778 ; 1147 |//$FILENAME string_linein.src
                             2779 ; 1148 |#define RSRC_STRING_LINEIN 436    
                             2780 ; 1149 |//$FILENAME string_bits.src
                             2781 ; 1150 |#define RSRC_STRING_BITS 437    
                             2782 ; 1151 |//$FILENAME string_4.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2783 ; 1152 |#define RSRC_STRING_4 438    
                             2784 ; 1153 |//$FILENAME string_8.src
                             2785 ; 1154 |#define RSRC_STRING_8 439    
                             2786 ; 1155 |//$FILENAME string_16.src
                             2787 ; 1156 |#define RSRC_STRING_16 440    
                             2788 ; 1157 |//$FILENAME string_24.src
                             2789 ; 1158 |#define RSRC_STRING_24 441    
                             2790 ; 1159 |//$FILENAME string_fm.src
                             2791 ; 1160 |#define RSRC_STRING_FM 442    
                             2792 ; 1161 |//$FILENAME string_mono.src
                             2793 ; 1162 |#define RSRC_STRING_MONO 443    
                             2794 ; 1163 |//$FILENAME string_stereo.src
                             2795 ; 1164 |#define RSRC_STRING_STEREO 444    
                             2796 ; 1165 |//$FILENAME string_8000hz.src
                             2797 ; 1166 |#define RSRC_STRING_8000HZ 445    
                             2798 ; 1167 |//$FILENAME string_11025hz.src
                             2799 ; 1168 |#define RSRC_STRING_11025HZ 446    
                             2800 ; 1169 |//$FILENAME string_16000hz.src
                             2801 ; 1170 |#define RSRC_STRING_16000HZ 447    
                             2802 ; 1171 |//$FILENAME string_22050hz.src
                             2803 ; 1172 |#define RSRC_STRING_22050HZ 448    
                             2804 ; 1173 |//$FILENAME string_32000hz.src
                             2805 ; 1174 |#define RSRC_STRING_32000HZ 449    
                             2806 ; 1175 |//$FILENAME string_44100hz.src
                             2807 ; 1176 |#define RSRC_STRING_44100HZ 450    
                             2808 ; 1177 |//$FILENAME string_48000hz.src
                             2809 ; 1178 |#define RSRC_STRING_48000HZ 451    
                             2810 ; 1179 |//$FILENAME string_channels.src
                             2811 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                             2812 ; 1181 |//$FILENAME string_spaces.src
                             2813 ; 1182 |#define RSRC_STRING_SPACES 453    
                             2814 ; 1183 |//$FILENAME slider_bar.src
                             2815 ; 1184 |#define RSRC_SLIDER_BAR 454    
                             2816 ; 1185 |//$FILENAME slider_bar_inv.src
                             2817 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                             2818 ; 1187 |//$FILENAME slider_track.src
                             2819 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                             2820 ; 1189 |//$FILENAME string_no_files.src
                             2821 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                             2822 ; 1191 |
                             2823 ; 1192 |/////////////////////////////////////////////////////////////////////
                             2824 ; 1193 |//  Time and Date Resource Strings
                             2825 ; 1194 |/////////////////////////////////////////////////////////////////////
                             2826 ; 1195 |//$FILENAME string_sunday.src
                             2827 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                             2828 ; 1197 |//$FILENAME string_monday.src
                             2829 ; 1198 |#define RSRC_STRING_MONDAY 459    
                             2830 ; 1199 |//$FILENAME string_tuesday.src
                             2831 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                             2832 ; 1201 |//$FILENAME string_wednesday.src
                             2833 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
                             2834 ; 1203 |//$FILENAME string_thursday.src
                             2835 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                             2836 ; 1205 |//$FILENAME string_friday.src
                             2837 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                             2838 ; 1207 |//$FILENAME string_saturday.src
                             2839 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                             2840 ; 1209 |//$FILENAME string_am.src
                             2841 ; 1210 |#define RSRC_STRING_AM 465    
                             2842 ; 1211 |//$FILENAME string_pm.src
                             2843 ; 1212 |#define RSRC_STRING_PM 466    
                             2844 ; 1213 |//$FILENAME string_amclear.src
                             2845 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                             2846 ; 1215 |//$FILENAME string_slash.src
                             2847 ; 1216 |#define RSRC_STRING_SLASH 468    
                             2848 ; 1217 |//$FILENAME string_colon.src
                             2849 ; 1218 |#define RSRC_STRING_COLON 469    
                             2850 ; 1219 |//$FILENAME string_12hour.src
                             2851 ; 1220 |#define RSRC_STRING_12HOUR 470    
                             2852 ; 1221 |//$FILENAME string_24hour.src
                             2853 ; 1222 |#define RSRC_STRING_24HOUR 471    
                             2854 ; 1223 |//$FILENAME string_format.src
                             2855 ; 1224 |#define RSRC_STRING_FORMAT 472    
                             2856 ; 1225 |//$FILENAME string_mmddyyyy.src
                             2857 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                             2858 ; 1227 |//$FILENAME string_ddmmyyyy.src
                             2859 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                             2860 ; 1229 |//$FILENAME string_yyyymmdd.src
                             2861 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                             2862 ; 1231 |//$FILENAME string_ok.src
                             2863 ; 1232 |#define RSRC_STRING_OK 476    
                             2864 ; 1233 |//$FILENAME string_cancel.src
                             2865 ; 1234 |#define RSRC_STRING_CANCEL 477    
                             2866 ; 1235 |//$FILENAME negative_sign.src
                             2867 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                             2868 ; 1237 |//$FILENAME string_dec_pt5.src
                             2869 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                             2870 ; 1239 |//$FILENAME string_dec_pt0.src
                             2871 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                             2872 ; 1241 |//$FILENAME string_db.src
                             2873 ; 1242 |#define RSRC_DB_STRING 481    
                             2874 ; 1243 |//$FILENAME string_hz2.src
                             2875 ; 1244 |#define RSRC_HZ2_STRING 482    
                             2876 ; 1245 |
                             2877 ; 1246 |
                             2878 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                             2879 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                             2880 ; 1249 |//$FILENAME metadata_codebank.src
                             2881 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                             2882 ; 1251 |//$FILENAME mp3metadata_codebank.src
                             2883 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                             2884 ; 1253 |//$FILENAME wmametadata_codebank.src
                             2885 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                             2886 ; 1255 |//$FILENAME wavmetadata_codebank.src
                             2887 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                             2888 ; 1257 |//$FILENAME smvmetadata_codebank.src
                             2889 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                             2890 ; 1259 |//$FILENAME playlist2init_codebank.src
                             2891 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                             2892 ; 1261 |
                             2893 ; 1262 |//$FILENAME delete_successful.src
                             2894 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                             2895 ; 1264 |//$FILENAME delete_error.src
                             2896 ; 1265 |#define RSRC_DELETE_ERROR 491    
                             2897 ; 1266 |//$FILENAME lic_expired.src
                             2898 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                             2899 ; 1268 |//$FILENAME id3v2_codebank.src
                             2900 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                             2901 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                             2902 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
                             2903 ; 1272 |//$FILENAME lyrics3_codebank.src
                             2904 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                             2905 ; 1274 |//$FILENAME lrc_codebank.src
                             2906 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                             2907 ; 1276 |//$FILENAME lyrics_api_codebank.src
                             2908 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                             2909 ; 1278 |//$FILENAME wmalyrics_codebank.src
                             2910 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                             2911 ; 1280 |//$FILENAME apicframe_codebank.src
                             2912 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                             2913 ; 1282 |
                             2914 ; 1283 |//$FILENAME exmediaerror1.src
                             2915 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                             2916 ; 1285 |//$FILENAME exmediaerror2.src
                             2917 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                             2918 ; 1287 |//$FILENAME inmediaerror1.src
                             2919 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                             2920 ; 1289 |
                             2921 ; 1290 |//$FILENAME backlight_title.src
                             2922 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
                             2923 ; 1292 |//$FILENAME backlight_state_on.src
                             2924 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                             2925 ; 1294 |//$FILENAME backlight_state_off.src
                             2926 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                             2927 ; 1296 |//$FILENAME backlightmenu.src
                             2928 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                             2929 ; 1298 |//$FILENAME string_backlight_menu.src
                             2930 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                             2931 ; 1300 |
                             2932 ; 1301 |//$FILENAME enc_mp3mod.src
                             2933 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                             2934 ; 1303 |//$FILENAME enc_mp3p.src
                             2935 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                             2936 ; 1305 |//$FILENAME enc_mp3x.src
                             2937 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                             2938 ; 1307 |//$FILENAME enc_mp3y.src
                             2939 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                             2940 ; 1309 |//$FILENAME mp3_implementation.src
                             2941 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                             2942 ; 1311 |//$FILENAME string_mp3.src
                             2943 ; 1312 |#define RSRC_STRING_MP3 513    
                             2944 ; 1313 |//$FILENAME string_all.src
                             2945 ; 1314 |#define RSRC_STRING_ALL 514    
                             2946 ; 1315 |
                             2947 ; 1316 |//$FILENAME mediastartup.src
                             2948 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                             2949 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                             2950 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             2951 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
                             2952 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                             2953 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                             2954 ; 1323 |
                             2955 ; 1324 |//$FILENAME nanddatadriveinit.src
                             2956 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                             2957 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
                             2958 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                             2959 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                             2960 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                             2961 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                             2962 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                             2963 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                             2964 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
                             2965 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                             2966 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                             2967 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
                             2968 ; 1337 |
                             2969 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                             2970 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                             2971 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                             2972 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                             2973 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                             2974 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                             2975 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                             2976 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                             2977 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                             2978 ; 1347 |
                             2979 ; 1348 |//$FILENAME vbr_codebank.src
                             2980 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                             2981 ; 1350 |
                             2982 ; 1351 |//$FILENAME string_recordtest_menu.src
                             2983 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                             2984 ; 1353 |//$FILENAME string_recordtest_duration.src
                             2985 ; 1354 |#define RSRC_STRING_DURATION 520    
                             2986 ; 1355 |//$FILENAME string_recordtest_time5.src
                             2987 ; 1356 |#define RSRC_STRING_TIME5 521    
                             2988 ; 1357 |//$FILENAME string_recordtest_time10.src
                             2989 ; 1358 |#define RSRC_STRING_TIME10 522    
                             2990 ; 1359 |//$FILENAME string_recordtest_time30.src
                             2991 ; 1360 |#define RSRC_STRING_TIME30 523    
                             2992 ; 1361 |//$FILENAME string_recordtest_time60.src
                             2993 ; 1362 |#define RSRC_STRING_TIME60 524    
                             2994 ; 1363 |//$FILENAME string_recordtest_time300.src
                             2995 ; 1364 |#define RSRC_STRING_TIME300 525    
                             2996 ; 1365 |//$FILENAME string_recordtest_time600.src
                             2997 ; 1366 |#define RSRC_STRING_TIME600 526    
                             2998 ; 1367 |
                             2999 ; 1368 |//$FILENAME test_title.src
                             3000 ; 1369 |#define RSRC_TEST_TITLE 527    
                             3001 ; 1370 |//$FILENAME testmenu.src
                             3002 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                             3003 ; 1372 |
                             3004 ; 1373 |
                             3005 ; 1374 |//$FILENAME mmcmediastartup.src
                             3006 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                             3007 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                             3008 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                             3009 ; 1378 |//$FILENAME mmcinfo.src
                             3010 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                             3011 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                             3012 ; 1381 |//$FILENAME mmcerase.src
                             3013 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                             3014 ; 1383 |
                             3015 ; 1384 |
                             3016 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                             3017 ; 1386 |
                             3018 ; 1387 |//$FILENAME mmcenumerate.src
                             3019 ; 1388 |#define RSRC_MMCENUMERATE 532    
                             3020 ; 1389 |//$FILENAME mmcresetdevice.src
                             3021 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                             3022 ; 1391 |//$FILENAME mmcprocesscsd.src
                             3023 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                             3024 ; 1393 |//$FILENAME mmcprocesscid.src
                             3025 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                             3026 ; 1395 |//$FILENAME mmcprocesscid2.src
                             3027 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                             3028 ; 1397 |//$FILENAME mmcdetectpresence.src
                             3029 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
                             3030 ; 1399 |//$FILENAME mmcserialnumberinit.src
                             3031 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                             3032 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                             3033 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3034 ; 1403 |
                             3035 ; 1404 |//$FILENAME mmcread.src
                             3036 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                             3037 ; 1406 |//$FILENAME mmcmediainit.src
                             3038 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                             3039 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                             3040 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                             3041 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                             3042 ; 1411 |//$FILENAME mmcdatadriveerase.src
                             3043 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                             3044 ; 1413 |
                             3045 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                             3046 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                             3047 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                             3048 ; 1417 |
                             3049 ; 1418 |
                             3050 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                             3051 ; 1420 |//  File system
                             3052 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                             3053 ; 1422 |//$FILENAME arrangefilename.src
                             3054 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                             3055 ; 1424 |//$FILENAME clearcluster.src
                             3056 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                             3057 ; 1426 |//$FILENAME createdirectory.src
                             3058 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                             3059 ; 1428 |//$FILENAME deletecontent.src
                             3060 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                             3061 ; 1430 |//$FILENAME deleterecord.src
                             3062 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                             3063 ; 1432 |//$FILENAME fastopen.src
                             3064 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                             3065 ; 1434 |//$FILENAME fcreate.src
                             3066 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
                             3067 ; 1436 |//$FILENAME filegetattrib.src
                             3068 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                             3069 ; 1438 |//$FILENAME filegetdate.src
                             3070 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                             3071 ; 1440 |//$FILENAME filesetattrib.src
                             3072 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                             3073 ; 1442 |//$FILENAME filesetdate.src
                             3074 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                             3075 ; 1444 |//$FILENAME fsinit.src
                             3076 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                             3077 ; 1446 |//$FILENAME fsshutdown.src
                             3078 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                             3079 ; 1448 |//$FILENAME readdevicerecord.src
                             3080 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                             3081 ; 1450 |//$FILENAME checkspaceinrootdir.src
                             3082 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                             3083 ; 1452 |//$FILENAME setcwdhandle.src
                             3084 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                             3085 ; 1454 |//$FILENAME fsdriveinit.src
                             3086 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                             3087 ; 1456 |//$FILENAME fsclearBuf.src
                             3088 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
                             3089 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                             3090 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.src
                             3091 ; 1460 |//$FILENAME fgetfasthandle.src
                             3092 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                             3093 ; 1462 |//$FILENAME ishandlewriteallocated.src
                             3094 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                             3095 ; 1464 |//$FILENAME isfileopen.src
                             3096 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                             3097 ; 1466 |//$FILENAME iscurrworkdir.src
                             3098 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                             3099 ; 1468 |//$FILENAME chdir.src
                             3100 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                             3101 ; 1470 |//$FILENAME chdirFromOffset.src
                             3102 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                             3103 ; 1472 |//$FILENAME deletetree.src
                             3104 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                             3105 ; 1474 |//$FILENAME deleteallrecords.src
                             3106 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                             3107 ; 1476 |//$FILENAME cleardata.src
                             3108 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                             3109 ; 1478 |//$FILENAME changetolowleveldir.src
                             3110 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                             3111 ; 1480 |//$FILENAME getrecordnumber.src
                             3112 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                             3113 ; 1482 |//$FILENAME fileremove.src
                             3114 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                             3115 ; 1484 |//$FILENAME charactersearch.src
                             3116 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                             3117 ; 1486 |//$FILENAME stringcompare.src
                             3118 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                             3119 ; 1488 |//$FILENAME fopenw.src
                             3120 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                             3121 ; 1490 |//$FILENAME fremove.src
                             3122 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                             3123 ; 1492 |//$FILENAME fremovew.src
                             3124 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                             3125 ; 1494 |//$FILENAME mkdir.src
                             3126 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                             3127 ; 1496 |//$FILENAME mkdirw.src
                             3128 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                             3129 ; 1498 |//$FILENAME rmdir.src
                             3130 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                             3131 ; 1500 |//$FILENAME rmdirw.src
                             3132 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                             3133 ; 1502 |//$FILENAME fgetc.src
                             3134 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                             3135 ; 1504 |//$FILENAME fgets.src
                             3136 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                             3137 ; 1506 |//$FILENAME fputc.src
                             3138 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                             3139 ; 1508 |//$FILENAME fputs.src
                             3140 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                             3141 ; 1510 |//$FILENAME arrangelongfilename.src
                             3142 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
                             3143 ; 1512 |//$FILENAME convert_itoa.src
                             3144 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                             3145 ; 1514 |//$FILENAME createdirrecord.src
                             3146 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                             3147 ; 1516 |//$FILENAME chksum.src
                             3148 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                             3149 ; 1518 |//$FILENAME createshortdirrecord.src
                             3150 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                             3151 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                             3152 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
                             3153 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                             3154 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                             3155 ; 1524 |//$FILENAME extractfilenamew.src
                             3156 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                             3157 ; 1526 |//$FILENAME extractpathw.src
                             3158 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                             3159 ; 1528 |//$FILENAME findfreerecord.src
                             3160 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                             3161 ; 1530 |//$FILENAME getnamew.src
                             3162 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                             3163 ; 1532 |//$FILENAME isdirectoryempty.src
                             3164 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                             3165 ; 1534 |//$FILENAME isshortnamevalid.src
                             3166 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                             3167 ; 1536 |//$FILENAME longdirmatch.src
                             3168 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                             3169 ; 1538 |//$FILENAME unicodetooem.src
                             3170 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                             3171 ; 1540 |//$FILENAME matchdirrecordw.src
                             3172 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                             3173 ; 1542 |//$FILENAME setcwd.src
                             3174 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                             3175 ; 1544 |//$FILENAME setshortfilename.src
                             3176 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                             3177 ; 1546 |//$FILENAME generatefilenametail.src
                             3178 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                             3179 ; 1548 |//$FILENAME dbcstounicode.src
                             3180 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                             3181 ; 1550 |//$FILENAME strcpy.src
                             3182 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                             3183 ; 1552 |//$FILENAME strcpyw.src
                             3184 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                             3185 ; 1554 |//$FILENAME strlengthw.src
                             3186 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                             3187 ; 1556 |//$FILENAME filesystempresent.src
                             3188 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                             3189 ; 1558 |//$FILENAME DataDriveInit.src
                             3190 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                             3191 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                             3192 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                             3193 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                             3194 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                             3195 ; 1564 |//$FILENAME DataDriveGetSize.src
                             3196 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                             3197 ; 1566 |//$FILENAME ConstructLongFileName.src
                             3198 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                             3199 ; 1568 |//$FILENAME strcpyucs3_2.src
                             3200 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                             3201 ; 1570 |//$FILENAME getvolumelabel.src
                             3202 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
                             3203 ; 1572 |//$FILENAME setvolumelabel.src
                             3204 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
                             3205 ; 1574 |//$FILENAME disk_full.src
                             3206 ; 1575 |#define RSRC_DISK_FULL 619    
                             3207 ; 1576 |//$FILENAME chkdskstartup.src
                             3208 ; 1577 |#define RSRC_CHECKDISK 620    
                             3209 ; 1578 |//$FILENAME chkdskstartupy.src
                             3210 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                             3211 ; 1580 |//$FILENAME low_level_pwr_line1.src
                             3212 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                             3213 ; 1582 |//$FILENAME low_level_pwr_line2.src
                             3214 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
                             3215 ; 1584 |//$FILENAME string_bit_rate.src
                             3216 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                             3217 ; 1586 |//$FILENAME string_96000hz.src
                             3218 ; 1587 |#define RSRC_STRING_96KBPS 625    
                             3219 ; 1588 |//$FILENAME string_112000hz.src
                             3220 ; 1589 |#define RSRC_STRING_112KBPS 626    
                             3221 ; 1590 |//$FILENAME string_128000hz.src
                             3222 ; 1591 |#define RSRC_STRING_128KBPS 627    
                             3223 ; 1592 |//$FILENAME string_160000hz.src
                             3224 ; 1593 |#define RSRC_STRING_160KBPS 628    
                             3225 ; 1594 |//$FILENAME string_192000hz.src
                             3226 ; 1595 |#define RSRC_STRING_192KBPS 629    
                             3227 ; 1596 |//$FILENAME string_224000hz.src
                             3228 ; 1597 |#define RSRC_STRING_224KBPS 630    
                             3229 ; 1598 |//$FILENAME string_256000hz.src
                             3230 ; 1599 |#define RSRC_STRING_256KBPS 631    
                             3231 ; 1600 |//$FILENAME string_320000hz.src
                             3232 ; 1601 |#define RSRC_STRING_320KBPS 632    
                             3233 ; 1602 |//$FILENAME string_hz.src
                             3234 ; 1603 |#define RSRC_STRING_HZ 633    
                             3235 ; 1604 |//$FILENAME EncCommonp.src
                             3236 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                             3237 ; 1606 |//$FILENAME adc_adcx.src
                             3238 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                             3239 ; 1608 |//$FILENAME adc_adcy.src
                             3240 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                             3241 ; 1610 |//$FILENAME Funclet_encodercommon.src
                             3242 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                             3243 ; 1612 |//$FILENAME string_album.src
                             3244 ; 1613 |#define RSRC_STRING_ALBUM 638    
                             3245 ; 1614 |//$FILENAME string_encoder_song.src
                             3246 ; 1615 |#define RSRC_STRING_SONG 639    
                             3247 ; 1616 |//$FILENAME string_mode.src
                             3248 ; 1617 |#define RSRC_STRING_MODE 640    
                             3249 ; 1618 |
                             3250 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                             3251 ; 1620 |// display related
                             3252 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                             3253 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                             3254 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                             3255 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                             3256 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                             3257 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                             3258 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                             3259 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                             3260 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                             3261 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                             3262 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                             3263 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                             3264 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                             3265 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                             3266 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
                             3267 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                             3268 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                             3269 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                             3270 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                             3271 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                             3272 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                             3273 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
                             3274 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                             3275 ; 1644 |
                             3276 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
                             3277 ; 1646 |//WMDRM Related
                             3278 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                             3279 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                             3280 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                             3281 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                             3282 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                             3283 ; 1652 |//$FILENAME drm_bbx_initialize.src
                             3284 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3285 ; 1654 |//$FILENAME drm_bbx_canbind.src
                             3286 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
                             3287 ; 1656 |//$FILENAME verifychecksum.src
                             3288 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                             3289 ; 1658 |//$FILENAME drm_b64_encodew.src
                             3290 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                             3291 ; 1660 |//$FILENAME _performactions.src
                             3292 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                             3293 ; 1662 |//$FILENAME _processendofchain.src
                             3294 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                             3295 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                             3296 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                             3297 ; 1666 |//$FILENAME drmcrt_towlower.src
                             3298 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                             3299 ; 1668 |//$FILENAME drmcrt_wcslen.src
                             3300 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                             3301 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                             3302 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                             3303 ; 1672 |//$FILENAME drmcrt_memmove.src
                             3304 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                             3305 ; 1674 |//$FILENAME performoperation_part1.src
                             3306 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                             3307 ; 1676 |//$FILENAME performoperation_part2.src
                             3308 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                             3309 ; 1678 |//$FILENAME performoperation_part3.src
                             3310 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                             3311 ; 1680 |//$FILENAME performoperation_part4.src
                             3312 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                             3313 ; 1682 |//$FILENAME performoperation_part5.src
                             3314 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                             3315 ; 1684 |//$FILENAME performoperation_part6.src
                             3316 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                             3317 ; 1686 |//$FILENAME isvalidfunction.src
                             3318 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                             3319 ; 1688 |//$FILENAME functiongetvalue.src
                             3320 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                             3321 ; 1690 |//$FILENAME globalsetvariable.src
                             3322 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                             3323 ; 1692 |//$FILENAME variabledrmkgetorset.src
                             3324 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                             3325 ; 1694 |//$FILENAME variabledrmgetorset.src
                             3326 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                             3327 ; 1696 |//$FILENAME variableappgetorset.src
                             3328 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
                             3329 ; 1698 |//$FILENAME variablelicensegetorset.src
                             3330 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                             3331 ; 1700 |//$FILENAME variablecontentgetorset.src
                             3332 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                             3333 ; 1702 |//$FILENAME variabledevicegetorset.src
                             3334 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                             3335 ; 1704 |//$FILENAME variablepmlicensegetorset.src
                             3336 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                             3337 ; 1706 |//$FILENAME drm_hds_createstore.src
                             3338 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
                             3339 ; 1708 |//$FILENAME drm_hds_init.src
                             3340 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                             3341 ; 1710 |//$FILENAME drm_hds_uninit.src
                             3342 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                             3343 ; 1712 |//$FILENAME drm_hds_openstore.src
                             3344 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                             3345 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                             3346 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                             3347 ; 1716 |//$FILENAME drm_hds_slotresize.src
                             3348 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                             3349 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                             3350 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                             3351 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                             3352 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                             3353 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                             3354 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                             3355 ; 1724 |//$FILENAME _hdscopychildpayload.src
                             3356 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                             3357 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                             3358 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                             3359 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                             3360 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                             3361 ; 1730 |//$FILENAME _hdscleanupstore.src
                             3362 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                             3363 ; 1732 |//$FILENAME drm_lst_clean.src
                             3364 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                             3365 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                             3366 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                             3367 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                             3368 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                             3369 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                             3370 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                             3371 ; 1740 |//$FILENAME _hdscreatenamespace.src
                             3372 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                             3373 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                             3374 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                             3375 ; 1744 |//$FILENAME _writesrn.src
                             3376 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                             3377 ; 1746 |//$FILENAME _writecommonblockheader.src
                             3378 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                             3379 ; 1748 |//$FILENAME _writechildblockheader.src
                             3380 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                             3381 ; 1750 |//$FILENAME _readdatablockheader.src
                             3382 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                             3383 ; 1752 |//$FILENAME _writedatablockheader.src
                             3384 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                             3385 ; 1754 |//$FILENAME _hdsexpandstore.src
                             3386 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                             3387 ; 1756 |//$FILENAME _hdsallocblock.src
                             3388 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                             3389 ; 1758 |//$FILENAME _hdsfreeblock.src
                             3390 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
                             3391 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                             3392 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                             3393 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                             3394 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                             3395 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                             3396 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                             3397 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
                             3398 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                             3399 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                             3400 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
                             3401 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                             3402 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                             3403 ; 1772 |//$FILENAME _hdsremoveslot.src
                             3404 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                             3405 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                             3406 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                             3407 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                             3408 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                             3409 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                             3410 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                             3411 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                             3412 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                             3413 ; 1782 |//$FILENAME _hdsslotresize.src
                             3414 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                             3415 ; 1784 |//$FILENAME _isnull.src
                             3416 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                             3417 ; 1786 |//$FILENAME _hdsgensrnhash.src
                             3418 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                             3419 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                             3420 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                             3421 ; 1790 |//$FILENAME _readsrn.src
                             3422 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                             3423 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                             3424 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
                             3425 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                             3426 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                             3427 ; 1796 |//$FILENAME _hdsslotwrite.src
                             3428 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                             3429 ; 1798 |//$FILENAME _hdsinitslotenum.src
                             3430 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                             3431 ; 1800 |//$FILENAME drm_lst_close.src
                             3432 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                             3433 ; 1802 |//$FILENAME drm_lst_enumnext.src
                             3434 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                             3435 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                             3436 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                             3437 ; 1806 |//$FILENAME _processextensions.src
                             3438 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                             3439 ; 1808 |//$FILENAME _processidlist.src
                             3440 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                             3441 ; 1810 |//$FILENAME _processexclusions.src
                             3442 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                             3443 ; 1812 |//$FILENAME _processinclusions.src
                             3444 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                             3445 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                             3446 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                             3447 ; 1816 |//$FILENAME _getopllevel.src
                             3448 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                             3449 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                             3450 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                             3451 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                             3452 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
                             3453 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
                             3454 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                             3455 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                             3456 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                             3457 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                             3458 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                             3459 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
                             3460 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                             3461 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                             3462 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
                             3463 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                             3464 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                             3465 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                             3466 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                             3467 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                             3468 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                             3469 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                             3470 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                             3471 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                             3472 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                             3473 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                             3474 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                             3475 ; 1844 |//$FILENAME overlappingdates.src
                             3476 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                             3477 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                             3478 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                             3479 ; 1848 |//$FILENAME neginfdate.src
                             3480 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                             3481 ; 1850 |//$FILENAME infdate.src
                             3482 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                             3483 ; 1852 |//$FILENAME isexpired.src
                             3484 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                             3485 ; 1854 |//$FILENAME getsecstateattr.src
                             3486 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                             3487 ; 1856 |//$FILENAME setexpirycategory.src
                             3488 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                             3489 ; 1858 |//$FILENAME getv2licenseinfo.src
                             3490 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                             3491 ; 1860 |//$FILENAME getnextlicense.src
                             3492 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                             3493 ; 1862 |//$FILENAME aggregate.src
                             3494 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                             3495 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                             3496 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                             3497 ; 1866 |//$FILENAME _scannodeforattributew.src
                             3498 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                             3499 ; 1868 |//$FILENAME _getxmlnodecdataw.src
                             3500 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                             3501 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                             3502 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                             3503 ; 1872 |//$FILENAME _createdevicestore.src
                             3504 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                             3505 ; 1874 |//$FILENAME _mapdrmerror.src
                             3506 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                             3507 ; 1876 |//$FILENAME _comparemachineid.src
                             3508 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                             3509 ; 1878 |//$FILENAME initmgrcontext.src
                             3510 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                             3511 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                             3512 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                             3513 ; 1882 |//$FILENAME drm_mgr_commit.src
                             3514 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
                             3515 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                             3516 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                             3517 ; 1886 |//$FILENAME januscleandatastore.src
                             3518 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                             3519 ; 1888 |//$FILENAME drm_mtr_openid.src
                             3520 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                             3521 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
                             3522 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                             3523 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                             3524 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
                             3525 ; 1894 |//$FILENAME oem_setendoffile.src
                             3526 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                             3527 ; 1896 |//$FILENAME oem_genrandombytes.src
                             3528 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                             3529 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                             3530 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                             3531 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                             3532 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                             3533 ; 1902 |//$FILENAME oem_setdevicecert.src
                             3534 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                             3535 ; 1904 |//$FILENAME oem_getclockresetstate.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3536 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                             3537 ; 1906 |//$FILENAME oem_setclockresetstate.src
                             3538 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                             3539 ; 1908 |//$FILENAME oem_getuniqueid.src
                             3540 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                             3541 ; 1910 |//$FILENAME oem_getdevicecert.src
                             3542 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                             3543 ; 1912 |//$FILENAME drm_snc_openstore.src
                             3544 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                             3545 ; 1914 |//$FILENAME drm_snc_closestore.src
                             3546 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                             3547 ; 1916 |//$FILENAME _setkidstoredata.src
                             3548 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                             3549 ; 1918 |//$FILENAME drm_snc_deletekid.src
                             3550 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                             3551 ; 1920 |//$FILENAME drm_snc_updatekid.src
                             3552 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                             3553 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                             3554 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                             3555 ; 1924 |//$FILENAME functiongetvalue_part1.src
                             3556 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                             3557 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                             3558 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                             3559 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                             3560 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                             3561 ; 1930 |//$FILENAME drm_hds_createstore2.src
                             3562 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                             3563 ; 1932 |//$FILENAME drm_hds_openstore2.src
                             3564 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                             3565 ; 1934 |//$FILENAME _hdsprealloc.src
                             3566 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                             3567 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                             3568 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                             3569 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                             3570 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                             3571 ; 1940 |//$FILENAME gendevicecertificate.src
                             3572 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                             3573 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                             3574 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                             3575 ; 1944 |//$FILENAME copyhdsdtore.src
                             3576 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
                             3577 ; 1946 |//$FILENAME generatedevicecert.src
                             3578 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                             3579 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                             3580 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                             3581 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                             3582 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                             3583 ; 1952 |//$FILENAME _hdsupdatesrn.src
                             3584 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                             3585 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                             3586 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
                             3587 ; 1956 |//$FILENAME _checksecureclock.src
                             3588 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                             3589 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                             3590 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                             3591 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                             3592 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                             3593 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                             3594 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                             3595 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                             3596 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                             3597 ; 1966 |//$FILENAME strtol.src
                             3598 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                             3599 ; 1968 |//$FILENAME mktime.src
                             3600 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                             3601 ; 1970 |//$FILENAME gmtime.src
                             3602 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                             3603 ; 1972 |//$FILENAME localtime.src
                             3604 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                             3605 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                             3606 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                             3607 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                             3608 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                             3609 ; 1978 |//$FILENAME _systemtimetotime_t.src
                             3610 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                             3611 ; 1980 |//$FILENAME oem_setsystemtime.src
                             3612 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                             3613 ; 1982 |//$FILENAME const_pkcrypto.src
                             3614 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                             3615 ; 1984 |//$FILENAME const_y.src
                             3616 ; 1985 |#define RSRC_CONST_Y 820    
                             3617 ; 1986 |//$FILENAME aes_dec_table.src
                             3618 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                             3619 ; 1988 |//$FILENAME aes_key_table.src
                             3620 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                             3621 ; 1990 |//$FILENAME aes_enc_table.src
                             3622 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                             3623 ; 1992 |//$FILENAME device_cert.src
                             3624 ; 1993 |#define RSRC_DEVCERT 824    
                             3625 ; 1994 |//$FILENAME devcert_template.src
                             3626 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                             3627 ; 1996 |//$FILENAME getbase64decodedkey.src
                             3628 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                             3629 ; 1998 |//$FILENAME _initslot.src
                             3630 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                             3631 ; 2000 |//$FILENAME hdsimplcommon.src
                             3632 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                             3633 ; 2002 |//$FILENAME hdsimpl_p.src
                             3634 ; 2003 |#define RSRC_HDSIMPL_P 829    
                             3635 ; 2004 |
                             3636 ; 2005 |
                             3637 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                             3638 ; 2007 |//pkcrypto Related
                             3639 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                             3640 ; 2009 |//$FILENAME two_adic_inverse.src
                             3641 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                             3642 ; 2011 |//$FILENAME mp_shift.src
                             3643 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                             3644 ; 2013 |//$FILENAME mp_significant_bit_count.src
                             3645 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
                             3646 ; 2015 |//$FILENAME set_immediate.src
                             3647 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                             3648 ; 2017 |//$FILENAME multiply_immediate.src
                             3649 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                             3650 ; 2019 |//$FILENAME multiply.src
                             3651 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                             3652 ; 2021 |//$FILENAME divide_precondition_1.src
                             3653 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                             3654 ; 2023 |//$FILENAME divide_immediate.src
                             3655 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                             3656 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                             3657 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                             3658 ; 2027 |//$FILENAME ecaffine_table_construction.src
                             3659 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                             3660 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                             3661 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                             3662 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                             3663 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                             3664 ; 2033 |//$FILENAME ecaffine_on_curve.src
                             3665 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                             3666 ; 2035 |//$FILENAME ecaffine_addition.src
                             3667 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                             3668 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                             3669 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                             3670 ; 2039 |//$FILENAME ecaffine_attributes2.src
                             3671 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                             3672 ; 2041 |//$FILENAME kfdesc_initialize.src
                             3673 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                             3674 ; 2043 |//$FILENAME kimmediate.src
                             3675 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
                             3676 ; 2045 |//$FILENAME kprime_immediater.src
                             3677 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                             3678 ; 2047 |//$FILENAME kprime_sqrter.src
                             3679 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                             3680 ; 2049 |//$FILENAME kinitialize_prime.src
                             3681 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                             3682 ; 2051 |//$FILENAME mod_lucasuv.src
                             3683 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                             3684 ; 2053 |//$FILENAME mod_lucas.src
                             3685 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
                             3686 ; 2055 |//$FILENAME bucket_multiply.src
                             3687 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                             3688 ; 2057 |//$FILENAME mod_exp2000.src
                             3689 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                             3690 ; 2059 |//$FILENAME mod_exp.src
                             3691 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                             3692 ; 2061 |//$FILENAME modmul_choices1.src
                             3693 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                             3694 ; 2063 |//$FILENAME mod_sqrt.src
                             3695 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                             3696 ; 2065 |//$FILENAME create_modulus.src
                             3697 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                             3698 ; 2067 |//$FILENAME from_modular.src
                             3699 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                             3700 ; 2069 |//$FILENAME add_immediate.src
                             3701 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                             3702 ; 2071 |//$FILENAME add_diff.src
                             3703 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
                             3704 ; 2073 |//$FILENAME add_full.src
                             3705 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                             3706 ; 2075 |//$FILENAME compare_sum_same.src
                             3707 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
                             3708 ; 2077 |//$FILENAME sub_immediate.src
                             3709 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                             3710 ; 2079 |//$FILENAME mp_initialization.src
                             3711 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                             3712 ; 2081 |//$FILENAME new_random_bytes.src
                             3713 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                             3714 ; 2083 |//$FILENAME new_random_dword_interval.src
                             3715 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                             3716 ; 2085 |//$FILENAME new_random_digit_interval.src
                             3717 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                             3718 ; 2087 |//$FILENAME new_random_mod.src
                             3719 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                             3720 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                             3721 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                             3722 ; 2091 |//$FILENAME new_random_digits.src
                             3723 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                             3724 ; 2093 |//$FILENAME words_to_ecaffine.src
                             3725 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                             3726 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                             3727 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                             3728 ; 2097 |//$FILENAME _threadunsafepkinit.src
                             3729 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                             3730 ; 2099 |//$FILENAME pkinit.src
                             3731 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                             3732 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                             3733 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                             3734 ; 2103 |//$FILENAME drm_pk_encrypt.src
                             3735 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                             3736 ; 2105 |//$FILENAME drm_pk_decrypt.src
                             3737 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                             3738 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                             3739 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                             3740 ; 2109 |//$FILENAME fe2ipmod.src
                             3741 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                             3742 ; 2111 |//$FILENAME drm_pk_sign.src
                             3743 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                             3744 ; 2113 |//$FILENAME drm_pk_verify.src
                             3745 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                             3746 ; 2115 |//$FILENAME random_bytes.src
                             3747 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
                             3748 ; 2117 |//$FILENAME mp_gcdex.src
                             3749 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                             3750 ; 2119 |//$FILENAME mp_gcdex_split1.src
                             3751 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                             3752 ; 2121 |//$FILENAME pkcrypto_p.src
                             3753 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                             3754 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                             3755 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                             3756 ; 2125 |//$FILENAME del_all_warning_line2.src
                             3757 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                             3758 ; 2127 |//$FILENAME del_all_file_star.src
                             3759 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                             3760 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                             3761 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                             3762 ; 2131 |//$FILENAME Funclet_Init5VSense.src
                             3763 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                             3764 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                             3765 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                             3766 ; 2135 |//$FILENAME Funclet_changeplayset.src
                             3767 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                             3768 ; 2137 |
                             3769 ; 2138 |//$FILENAME Funclet_mmctesterase.src
                             3770 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                             3771 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                             3772 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
                             3773 ; 2142 |
                             3774 ; 2143 |
                             3775 ; 2144 |// Added to allow rechargeable battery configurations to build
                             3776 ; 2145 |//$FILENAME battery_charging.src
                             3777 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                             3778 ; 2147 |//$FILENAME batterychargecodebank.src
                             3779 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                             3780 ; 2149 |//$FILENAME updatevolume.src
                             3781 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                             3782 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                             3783 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                             3784 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                             3785 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                             3786 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3787 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                             3788 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
                             3789 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                             3790 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                             3791 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                             3792 ; 2161 |//$FILENAME _iscachedevent.src
                             3793 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                             3794 ; 2163 |//$FILENAME setcountedexpirycategory.src
                             3795 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                             3796 ; 2165 |//$FILENAME oem_data.src
                             3797 ; 2166 |#define RSRC_OEM_DATA 906    
                             3798 ; 2167 |//$FILENAME gpk_p.src
                             3799 ; 2168 |#define RSRC_GPK_P 907    
                             3800 ; 2169 |//$FILENAME key_data.src
                             3801 ; 2170 |#define RSRC_KEY_DATA 908    
                             3802 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                             3803 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                             3804 ; 2173 |//$FILENAME string_working.src
                             3805 ; 2174 |#define RSRC_STRING_WORKING 910    
                             3806 ; 2175 |//$FILENAME Funclet_loadusertime.src
                             3807 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                             3808 ; 2177 |//$FILENAME Funclet_saveusertime.src
                             3809 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
                             3810 ; 2179 |
                             3811 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                             3812 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                             3813 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                             3814 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                             3815 ; 2184 |
                             3816 ; 2185 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3817 ; 2186 |// Audible ACELP Resources
                             3818 ; 2187 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3819 ; 2188 |//$FILENAME AudibleAcelpDec.src
                             3820 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                             3821 ; 2190 |//$FILENAME AudibleAcelpP.src
                             3822 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
                             3823 ; 2192 |//$FILENAME AudibleAcelpX.src
                             3824 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                             3825 ; 2194 |//$FILENAME AudibleAcelpY.src
                             3826 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                             3827 ; 2196 |
                             3828 ; 2197 |//$FILENAME AudibleDecMod.src
                             3829 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
                             3830 ; 2199 |//$FILENAME audiblemp3p.src
                             3831 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                             3832 ; 2201 |//$FILENAME audiblemp3x.src
                             3833 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                             3834 ; 2203 |//$FILENAME audiblemp3y.src
                             3835 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                             3836 ; 2205 |
                             3837 ; 2206 |//$FILENAME audiblemetadata_p.src
                             3838 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                             3839 ; 2208 |//$FILENAME audiblemetadata_y.src
                             3840 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                             3841 ; 2210 |//$FILENAME audiblesongposition_p.src
                             3842 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                             3843 ; 2212 |//$FILENAME audibletargetcheck_p.src
                             3844 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                             3845 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                             3846 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                             3847 ; 2216 |//$FILENAME audibledsa_p.src
                             3848 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                             3849 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                             3850 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                             3851 ; 2220 |//$FILENAME audiblemetastrings_p.src
                             3852 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                             3853 ; 2222 |//$FILENAME aaactivationrecords_p.src
                             3854 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                             3855 ; 2224 |
                             3856 ; 2225 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3857 ; 2226 |// Effects and SRS Resources
                             3858 ; 2227 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3859 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                             3860 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                             3861 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                             3862 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                             3863 ; 2232 |//$FILENAME wowctrl.src
                             3864 ; 2233 |#define RSRC_WOW_CTRL 934    
                             3865 ; 2234 |
                             3866 ; 2235 |//$FILENAME wowmenu.src
                             3867 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
                             3868 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                             3869 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                             3870 ; 2239 |//$FILENAME string_wow_menu.src
                             3871 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                             3872 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                             3873 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                             3874 ; 2243 |//$FILENAME string_wowvolume_menu.src
                             3875 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                             3876 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                             3877 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                             3878 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                             3879 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                             3880 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                             3881 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                             3882 ; 2251 |//$FILENAME wow_icon.src
                             3883 ; 2252 |#define RSRC_WOW_ICON 943    
                             3884 ; 2253 |
                             3885 ; 2254 |//$FILENAME wow16k.src
                             3886 ; 2255 |#define RSRC_WOW16K 944    
                             3887 ; 2256 |//$FILENAME wow32k.src
                             3888 ; 2257 |#define RSRC_WOW32K 945    
                             3889 ; 2258 |//$FILENAME wow8k.src
                             3890 ; 2259 |#define RSRC_WOW8K 946    
                             3891 ; 2260 |//$FILENAME wow11k.src
                             3892 ; 2261 |#define RSRC_WOW11K 947    
                             3893 ; 2262 |//$FILENAME wow22k.src
                             3894 ; 2263 |#define RSRC_WOW22K 948    
                             3895 ; 2264 |//$FILENAME wow24k.src
                             3896 ; 2265 |#define RSRC_WOW24K 949    
                             3897 ; 2266 |//$FILENAME wow44k.src
                             3898 ; 2267 |#define RSRC_WOW44K 950    
                             3899 ; 2268 |//$FILENAME wow48k.src
                             3900 ; 2269 |#define RSRC_WOW48K 951    
                             3901 ; 2270 |
                             3902 ; 2271 |//$FILENAME wow16k_Y.src
                             3903 ; 2272 |#define RSRC_WOW16K_Y 952    
                             3904 ; 2273 |//$FILENAME wow32k_Y.src
                             3905 ; 2274 |#define RSRC_WOW32K_Y 953    
                             3906 ; 2275 |//$FILENAME wow8k_Y.src
                             3907 ; 2276 |#define RSRC_WOW8K_Y 954    
                             3908 ; 2277 |//$FILENAME wow11k_Y.src
                             3909 ; 2278 |#define RSRC_WOW11K_Y 955    
                             3910 ; 2279 |//$FILENAME wow22k_Y.src
                             3911 ; 2280 |#define RSRC_WOW22K_Y 956    
                             3912 ; 2281 |//$FILENAME wow24k_Y.src
                             3913 ; 2282 |#define RSRC_WOW24K_Y 957    
                             3914 ; 2283 |//$FILENAME wow44k_Y.src
                             3915 ; 2284 |#define RSRC_WOW44K_Y 958    
                             3916 ; 2285 |//$FILENAME wow48k_Y.src
                             3917 ; 2286 |#define RSRC_WOW48K_Y 959    
                             3918 ; 2287 |
                             3919 ; 2288 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             3920 ; 2289 |// Audible Section Navigation
                             3921 ; 2290 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                             3922 ; 2291 |//$FILENAME audible_secnav.src
                             3923 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                             3924 ; 2293 |
                             3925 ; 2294 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3926 ; 2295 |// PLAYLIST3 and Music Library
                             3927 ; 2296 |////////////////////////////////////////////////////////////////////////////////////////////////////
                             3928 ; 2297 |
                             3929 ; 2298 |//$FILENAME build_ml.src
                             3930 ; 2299 |#define RSRC_BUILD_ML 961    
                             3931 ; 2300 |//$FILENAME build_ml_warning.src
                             3932 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                             3933 ; 2302 |//$FILENAME build_ml_warning2.src
                             3934 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                             3935 ; 2304 |//$FILENAME build_flash1.src
                             3936 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                             3937 ; 2306 |//$FILENAME build_flash2.src
                             3938 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                             3939 ; 2308 |//$FILENAME build_flash3.src
                             3940 ; 2309 |#define RSRC_BUILD_FLASH3 966    
                             3941 ; 2310 |//$FILENAME build_sd1.src
                             3942 ; 2311 |#define RSRC_BUILD_SD1 967    
                             3943 ; 2312 |//$FILENAME build_sd2.src
                             3944 ; 2313 |#define RSRC_BUILD_SD2 968    
                             3945 ; 2314 |//$FILENAME build_sd3.src
                             3946 ; 2315 |#define RSRC_BUILD_SD3 969    
                             3947 ; 2316 |//$FILENAME build_newmusic.src
                             3948 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                             3949 ; 2318 |//$FILENAME sdmd.src
                             3950 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
                             3951 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                             3952 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                             3953 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                             3954 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
                             3955 ; 2324 |//$FILENAME MusicLibBuildModule.src
                             3956 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                             3957 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                             3958 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                             3959 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                             3960 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                             3961 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                             3962 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                             3963 ; 2332 |//$FILENAME MusicLibPlayModule.src
                             3964 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                             3965 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                             3966 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                             3967 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                             3968 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                             3969 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                             3970 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                             3971 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                             3972 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                             3973 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                             3974 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                             3975 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                             3976 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                             3977 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                             3978 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                             3979 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                             3980 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                             3981 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                             3982 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                             3983 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                             3984 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                             3985 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                             3986 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                             3987 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
                             3988 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                             3989 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                             3990 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                             3991 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                             3992 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                             3993 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                             3994 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                             3995 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                             3996 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                             3997 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                             3998 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                             3999 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                             4000 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                             4001 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                             4002 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
                             4003 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                             4004 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                             4005 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                             4006 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                             4007 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                             4008 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                             4009 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
                             4010 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                             4011 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                             4012 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
                             4013 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                             4014 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                             4015 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                             4016 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                             4017 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                             4018 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                             4019 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                             4020 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                             4021 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                             4022 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                             4023 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                             4024 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                             4025 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                             4026 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                             4027 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                             4028 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                             4029 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                             4030 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                             4031 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                             4032 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                             4033 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                             4034 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                             4035 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                             4036 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                             4037 ; 2406 |//$FILENAME MusicLibMergeFunction.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4038 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                             4039 ; 2408 |//$FILENAME MusicLibMergeModule.src
                             4040 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                             4041 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                             4042 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                             4043 ; 2412 |//$FILENAME playmusicmenu.src
                             4044 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                             4045 ; 2414 |//$FILENAME browsemenu.src
                             4046 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                             4047 ; 2416 |//$FILENAME browsemenu_extra.src
                             4048 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                             4049 ; 2418 |//$FILENAME string_play_all.src
                             4050 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                             4051 ; 2420 |//$FILENAME string_play.src
                             4052 ; 2421 |#define RSRC_STRING_PLAY 1022    
                             4053 ; 2422 |//$FILENAME string_unknown_year.src
                             4054 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                             4055 ; 2424 |//$FILENAME string_year_width.src
                             4056 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                             4057 ; 2426 |//$FILENAME string_artist.src
                             4058 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                             4059 ; 2428 |//$FILENAME string_songs.src
                             4060 ; 2429 |#define RSRC_STRING_SONGS 1026    
                             4061 ; 2430 |//$FILENAME string_on_the_fly.src
                             4062 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                             4063 ; 2432 |//$FILENAME string_new_music.src
                             4064 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
                             4065 ; 2434 |//$FILENAME string_genre.src
                             4066 ; 2435 |#define RSRC_STRING_GENRE 1029    
                             4067 ; 2436 |//$FILENAME string_year.src
                             4068 ; 2437 |#define RSRC_STRING_YEAR 1030    
                             4069 ; 2438 |//$FILENAME string_playlist.src
                             4070 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                             4071 ; 2440 |//$FILENAME string_fm_rec.src
                             4072 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                             4073 ; 2442 |//$FILENAME string_linein_rec.src
                             4074 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
                             4075 ; 2444 |//$FILENAME string_play_music.src
                             4076 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                             4077 ; 2446 |//$FILENAME highlight_back.src
                             4078 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                             4079 ; 2448 |//$FILENAME newmusicmenu.src
                             4080 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                             4081 ; 2450 |//$FILENAME string_1_day.src
                             4082 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                             4083 ; 2452 |//$FILENAME string_1_week.src
                             4084 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                             4085 ; 2454 |//$FILENAME string_1_month.src
                             4086 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                             4087 ; 2456 |//$FILENAME on_the_fly_full.src
                             4088 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                             4089 ; 2458 |//$FILENAME on_the_fly_free1.src
                             4090 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                             4091 ; 2460 |//$FILENAME on_the_fly_free2.src
                             4092 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                             4093 ; 2462 |//$FILENAME on_the_fly_delete1.src
                             4094 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                             4095 ; 2464 |//$FILENAME on_the_fly_delete2.src
                             4096 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                             4097 ; 2466 |//$FILENAME empty_favourite.src
                             4098 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                             4099 ; 2468 |//$FILENAME sd_remove.src
                             4100 ; 2469 |#define RSRC_SD_REMOVE 1046    
                             4101 ; 2470 |//$FILENAME sd_insert.src
                             4102 ; 2471 |#define RSRC_SD_INSERT 1047    
                             4103 ; 2472 |//$FILENAME check_disk_1.src
                             4104 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                             4105 ; 2474 |//$FILENAME check_disk_2.src
                             4106 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                             4107 ; 2476 |//$FILENAME check_disk_3.src
                             4108 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                             4109 ; 2478 |//$FILENAME flash_error.src
                             4110 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                             4111 ; 2480 |
                             4112 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4113 ; 2482 |// STFM1000 Tuner funclet
                             4114 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4115 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                             4116 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                             4117 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                             4118 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                             4119 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                             4120 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                             4121 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                             4122 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                             4123 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                             4124 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                             4125 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                             4126 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
                             4127 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                             4128 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                             4129 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                             4130 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                             4131 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                             4132 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                             4133 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
                             4134 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                             4135 ; 2504 |//$FILENAME decstfmmod.src
                             4136 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
                             4137 ; 2506 |//$FILENAME dec_stfmp.src
                             4138 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                             4139 ; 2508 |//$FILENAME dec_stfmx.src
                             4140 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                             4141 ; 2510 |//$FILENAME dec_stfmy.src
                             4142 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                             4143 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                             4144 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                             4145 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                             4146 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                             4147 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                             4148 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                             4149 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                             4150 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                             4151 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                             4152 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                             4153 ; 2522 |//$FILENAME Funclet_I2CReset.src
                             4154 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                             4155 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                             4156 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                             4157 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                             4158 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                             4159 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                             4160 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                             4161 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                             4162 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                             4163 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                             4164 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                             4165 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                             4166 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                             4167 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaBias.src
                             4168 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookForPilot.src
                             4169 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                             4170 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                             4171 ; 2540 |// for RestoreDriveFromBackup
                             4172 ; 2541 |//$FILENAME restoresysdrive.src
                             4173 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                             4174 ; 2543 |
                             4175 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4176 ; 2545 |// Playlist5 sources
                             4177 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4178 ; 2547 |//$FILENAME playlist5_browsemenu.src
                             4179 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                             4180 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                             4181 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                             4182 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                             4183 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                             4184 ; 2553 |//$FILENAME playlist5_playback_module.src
                             4185 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                             4186 ; 2555 |//$FILENAME playlist5_browse_module.src
                             4187 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                             4188 ; 2557 |
                             4189 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                             4190 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                             4191 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                             4192 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                             4193 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
                             4194 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                             4195 ; 2564 |
                             4196 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4197 ; 2566 |// DanhNguyen added bitmaps
                             4198 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4199 ; 2568 |//$FILENAME icon_folder.src
                             4200 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                             4201 ; 2570 |//$FILENAME icon_song.src
                             4202 ; 2571 |#define RSRC_ICON_SONG 1089    
                             4203 ; 2572 |
                             4204 ; 2573 |//$FILENAME menu_music.src
                             4205 ; 2574 |#define RSRC_MENU_MUSIC 1090    
                             4206 ; 2575 |//$FILENAME vie_menu_music.src
                             4207 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                             4208 ; 2577 |
                             4209 ; 2578 |//$FILENAME menu_voice.src
                             4210 ; 2579 |#define RSRC_MENU_VOICE 1092    
                             4211 ; 2580 |//$FILENAME vie_menu_voice.src
                             4212 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                             4213 ; 2582 |
                             4214 ; 2583 |//$FILENAME menu_fmtuner.src
                             4215 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                             4216 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                             4217 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                             4218 ; 2587 |
                             4219 ; 2588 |//$FILENAME menu_record.src
                             4220 ; 2589 |#define RSRC_MENU_RECORD 1096    
                             4221 ; 2590 |//$FILENAME vie_menu_record.src
                             4222 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                             4223 ; 2592 |
                             4224 ; 2593 |//$FILENAME menu_settings.src
                             4225 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                             4226 ; 2595 |//$FILENAME vie_menu_settings.src
                             4227 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                             4228 ; 2597 |
                             4229 ; 2598 |//$FILENAME menu_shutdown.src
                             4230 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                             4231 ; 2600 |//$FILENAME vie_menu_shutdown.src
                             4232 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                             4233 ; 2602 |
                             4234 ; 2603 |//$FILENAME menu_clock.src
                             4235 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                             4236 ; 2605 |//$FILENAME vie_menu_clock.src
                             4237 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                             4238 ; 2607 |
                             4239 ; 2608 |//$FILENAME menu_ab.src
                             4240 ; 2609 |#define RSRC_MENU_AB 1104    
                             4241 ; 2610 |//$FILENAME vie_menu_ab.src
                             4242 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                             4243 ; 2612 |
                             4244 ; 2613 |//$FILENAME menu_delete.src
                             4245 ; 2614 |#define RSRC_MENU_DELETE 1106    
                             4246 ; 2615 |//$FILENAME vie_menu_delete.src
                             4247 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                             4248 ; 2617 |
                             4249 ; 2618 |//$FILENAME menu_about.src
                             4250 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                             4251 ; 2620 |//$FILENAME vie_menu_about.src
                             4252 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                             4253 ; 2622 |
                             4254 ; 2623 |//$FILENAME menu_exit.src
                             4255 ; 2624 |#define RSRC_MENU_EXIT 1110    
                             4256 ; 2625 |//$FILENAME vie_menu_exit.src
                             4257 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                             4258 ; 2627 |
                             4259 ; 2628 |//$FILENAME music_play_all.src
                             4260 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                             4261 ; 2630 |//$FILENAME vie_music_play_all.src
                             4262 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                             4263 ; 2632 |
                             4264 ; 2633 |//$FILENAME music_folder_internal.src
                             4265 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                             4266 ; 2635 |//$FILENAME vie_music_folder_internal.src
                             4267 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                             4268 ; 2637 |
                             4269 ; 2638 |//$FILENAME music_folder_external.src
                             4270 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                             4271 ; 2640 |//$FILENAME vie_music_folder_external.src
                             4272 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                             4273 ; 2642 |
                             4274 ; 2643 |//$FILENAME music_songs.src
                             4275 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                             4276 ; 2645 |//$FILENAME vie_music_songs.src
                             4277 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                             4278 ; 2647 |
                             4279 ; 2648 |//$FILENAME music_favorites.src
                             4280 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                             4281 ; 2650 |//$FILENAME vie_music_favorites.src
                             4282 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                             4283 ; 2652 |
                             4284 ; 2653 |//$FILENAME music_fm_record.src
                             4285 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                             4286 ; 2655 |//$FILENAME vie_music_fm_record.src
                             4287 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                             4288 ; 2657 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4289 ; 2658 |//$FILENAME music_exit.src
                             4290 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
                             4291 ; 2660 |//$FILENAME vie_music_exit.src
                             4292 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                             4293 ; 2662 |
                             4294 ; 2663 |//$FILENAME browse_music_folder_internal.src
                             4295 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
                             4296 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                             4297 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                             4298 ; 2667 |
                             4299 ; 2668 |//$FILENAME browse_music_folder_external.src
                             4300 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                             4301 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                             4302 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                             4303 ; 2672 |
                             4304 ; 2673 |//$FILENAME browse_music_list_songs.src
                             4305 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                             4306 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                             4307 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                             4308 ; 2677 |
                             4309 ; 2678 |//$FILENAME browse_music_favourites.src
                             4310 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
                             4311 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                             4312 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                             4313 ; 2682 |
                             4314 ; 2683 |//$FILENAME browse_music_fm_files.src
                             4315 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                             4316 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                             4317 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
                             4318 ; 2687 |
                             4319 ; 2688 |//$FILENAME browse_voice.src
                             4320 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
                             4321 ; 2690 |//$FILENAME vie_browse_voice.src
                             4322 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                             4323 ; 2692 |
                             4324 ; 2693 |//$FILENAME favourites_list_add.src
                             4325 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                             4326 ; 2695 |//$FILENAME vie_favourites_list_add.src
                             4327 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                             4328 ; 2697 |
                             4329 ; 2698 |//$FILENAME favourites_list_remove.src
                             4330 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                             4331 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                             4332 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                             4333 ; 2702 |
                             4334 ; 2703 |//$FILENAME favourites_list_is_full.src
                             4335 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                             4336 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                             4337 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                             4338 ; 2707 |
                             4339 ; 2708 |//$FILENAME about_screen_1.src
                             4340 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                             4341 ; 2710 |//$FILENAME vie_about_screen_1.src
                             4342 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                             4343 ; 2712 |
                             4344 ; 2713 |//$FILENAME about_screen_2.src
                             4345 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                             4346 ; 2715 |//$FILENAME vie_about_screen_2.src
                             4347 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                             4348 ; 2717 |
                             4349 ; 2718 |//$FILENAME about_screen_3.src
                             4350 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                             4351 ; 2720 |//$FILENAME vie_about_screen_3.src
                             4352 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                             4353 ; 2722 |
                             4354 ; 2723 |//$FILENAME about_screen_4.src
                             4355 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                             4356 ; 2725 |//$FILENAME vie_about_screen_4.src
                             4357 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
                             4358 ; 2727 |
                             4359 ; 2728 |//$FILENAME time_date_exit_title.src
                             4360 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                             4361 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                             4362 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                             4363 ; 2732 |
                             4364 ; 2733 |//$FILENAME time_clean_desktop.src
                             4365 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                             4366 ; 2735 |//$FILENAME time_dash.src
                             4367 ; 2736 |#define RSRC_TIME_DASH 1155    
                             4368 ; 2737 |
                             4369 ; 2738 |//$FILENAME time_day_7.src
                             4370 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                             4371 ; 2740 |//$FILENAME vie_time_day_7.src
                             4372 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
                             4373 ; 2742 |//$FILENAME time_day_cn.src
                             4374 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                             4375 ; 2744 |//$FILENAME vie_time_day_cn.src
                             4376 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                             4377 ; 2746 |//$FILENAME time_day_2.src
                             4378 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                             4379 ; 2748 |//$FILENAME vie_time_day_2.src
                             4380 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                             4381 ; 2750 |//$FILENAME time_day_3.src
                             4382 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
                             4383 ; 2752 |//$FILENAME vie_time_day_3.src
                             4384 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                             4385 ; 2754 |//$FILENAME time_day_4.src
                             4386 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                             4387 ; 2756 |//$FILENAME vie_time_day_4.src
                             4388 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                             4389 ; 2758 |//$FILENAME time_day_5.src
                             4390 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                             4391 ; 2760 |//$FILENAME vie_time_day_5.src
                             4392 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                             4393 ; 2762 |//$FILENAME time_day_6.src
                             4394 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                             4395 ; 2764 |//$FILENAME vie_time_day_6.src
                             4396 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                             4397 ; 2766 |
                             4398 ; 2767 |//$FILENAME time_month_1.src
                             4399 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                             4400 ; 2769 |//$FILENAME vie_time_month_1.src
                             4401 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                             4402 ; 2771 |//$FILENAME time_month_2.src
                             4403 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                             4404 ; 2773 |//$FILENAME vie_time_month_2.src
                             4405 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                             4406 ; 2775 |//$FILENAME time_month_3.src
                             4407 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                             4408 ; 2777 |//$FILENAME vie_time_month_3.src
                             4409 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                             4410 ; 2779 |//$FILENAME time_month_4.src
                             4411 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                             4412 ; 2781 |//$FILENAME vie_time_month_4.src
                             4413 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                             4414 ; 2783 |//$FILENAME time_month_5.src
                             4415 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                             4416 ; 2785 |//$FILENAME vie_time_month_5.src
                             4417 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                             4418 ; 2787 |//$FILENAME time_month_6.src
                             4419 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
                             4420 ; 2789 |//$FILENAME vie_time_month_6.src
                             4421 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                             4422 ; 2791 |//$FILENAME time_month_7.src
                             4423 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                             4424 ; 2793 |//$FILENAME vie_time_month_7.src
                             4425 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                             4426 ; 2795 |//$FILENAME time_month_8.src
                             4427 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                             4428 ; 2797 |//$FILENAME vie_time_month_8.src
                             4429 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                             4430 ; 2799 |//$FILENAME time_month_9.src
                             4431 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                             4432 ; 2801 |//$FILENAME vie_time_month_9.src
                             4433 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                             4434 ; 2803 |//$FILENAME time_month_10.src
                             4435 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                             4436 ; 2805 |//$FILENAME vie_time_month_10.src
                             4437 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                             4438 ; 2807 |//$FILENAME time_month_11.src
                             4439 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                             4440 ; 2809 |//$FILENAME vie_time_month_11.src
                             4441 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
                             4442 ; 2811 |//$FILENAME time_month_12.src
                             4443 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                             4444 ; 2813 |//$FILENAME vie_time_month_12.src
                             4445 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                             4446 ; 2815 |
                             4447 ; 2816 |//$FILENAME time_num_am.src
                             4448 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                             4449 ; 2818 |//$FILENAME time_num_am.src
                             4450 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                             4451 ; 2820 |//$FILENAME settime_format_12h.src
                             4452 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                             4453 ; 2822 |//$FILENAME settime_format_24h.src
                             4454 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                             4455 ; 2824 |//$FILENAME setdate_format_dmy.src
                             4456 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
                             4457 ; 2826 |//$FILENAME setdate_format_mdy.src
                             4458 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                             4459 ; 2828 |//$FILENAME setdate_format_ymd.src
                             4460 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                             4461 ; 2830 |
                             4462 ; 2831 |//$FILENAME time_num_large_0.src
                             4463 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                             4464 ; 2833 |//$FILENAME time_num_large_1.src
                             4465 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                             4466 ; 2835 |//$FILENAME time_num_large_2.src
                             4467 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                             4468 ; 2837 |//$FILENAME time_num_large_3.src
                             4469 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                             4470 ; 2839 |//$FILENAME time_num_large_4.src
                             4471 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                             4472 ; 2841 |//$FILENAME time_num_large_5.src
                             4473 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                             4474 ; 2843 |//$FILENAME time_num_large_6.src
                             4475 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                             4476 ; 2845 |//$FILENAME time_num_large_7.src
                             4477 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                             4478 ; 2847 |//$FILENAME time_num_large_8.src
                             4479 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                             4480 ; 2849 |//$FILENAME time_num_large_9.src
                             4481 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
                             4482 ; 2851 |
                             4483 ; 2852 |//$FILENAME time_num_medium_0.src
                             4484 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                             4485 ; 2854 |//$FILENAME time_num_medium_1.src
                             4486 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                             4487 ; 2856 |//$FILENAME time_num_medium_2.src
                             4488 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                             4489 ; 2858 |//$FILENAME time_num_medium_3.src
                             4490 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                             4491 ; 2860 |//$FILENAME time_num_medium_4.src
                             4492 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                             4493 ; 2862 |//$FILENAME time_num_medium_5.src
                             4494 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                             4495 ; 2864 |//$FILENAME time_num_medium_6.src
                             4496 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
                             4497 ; 2866 |//$FILENAME time_num_medium_7.src
                             4498 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                             4499 ; 2868 |//$FILENAME time_num_medium_8.src
                             4500 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                             4501 ; 2870 |//$FILENAME time_num_medium_9.src
                             4502 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                             4503 ; 2872 |
                             4504 ; 2873 |//$FILENAME time_colon.src
                             4505 ; 2874 |#define RSRC_TIME_COLON 1221    
                             4506 ; 2875 |
                             4507 ; 2876 |//$FILENAME settings_backlight_title.src
                             4508 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                             4509 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                             4510 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                             4511 ; 2880 |//$FILENAME settings_playmode_title.src
                             4512 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                             4513 ; 2882 |
                             4514 ; 2883 |//$FILENAME settings_contrast_title.src
                             4515 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                             4516 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                             4517 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                             4518 ; 2887 |
                             4519 ; 2888 |//$FILENAME settings_eq_title.src
                             4520 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                             4521 ; 2890 |//$FILENAME vie_settings_eq_title.src
                             4522 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                             4523 ; 2892 |
                             4524 ; 2893 |//$FILENAME settings_exit_title.src
                             4525 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                             4526 ; 2895 |//$FILENAME vie_settings_exit_title.src
                             4527 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                             4528 ; 2897 |
                             4529 ; 2898 |//$FILENAME settings_set_date_title.src
                             4530 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                             4531 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                             4532 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                             4533 ; 2902 |
                             4534 ; 2903 |//$FILENAME settings_set_time_title.src
                             4535 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                             4536 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                             4537 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                             4538 ; 2907 |
                             4539 ; 2908 |//$FILENAME settings_playmode_normal.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4540 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                             4541 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
                             4542 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                             4543 ; 2912 |
                             4544 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                             4545 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                             4546 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                             4547 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                             4548 ; 2917 |
                             4549 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                             4550 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                             4551 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                             4552 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                             4553 ; 2922 |
                             4554 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                             4555 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                             4556 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                             4557 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                             4558 ; 2927 |
                             4559 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                             4560 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                             4561 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                             4562 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                             4563 ; 2932 |
                             4564 ; 2933 |//$FILENAME settings_backlight_on.src
                             4565 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
                             4566 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                             4567 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                             4568 ; 2937 |
                             4569 ; 2938 |//$FILENAME settings_backlight_10s.src
                             4570 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                             4571 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                             4572 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                             4573 ; 2942 |
                             4574 ; 2943 |//$FILENAME settings_backlight_20s.src
                             4575 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                             4576 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                             4577 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                             4578 ; 2947 |
                             4579 ; 2948 |//$FILENAME settings_backlight_30s.src
                             4580 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                             4581 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                             4582 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                             4583 ; 2952 |
                             4584 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                             4585 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                             4586 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                             4587 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                             4588 ; 2957 |
                             4589 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                             4590 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                             4591 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                             4592 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                             4593 ; 2962 |
                             4594 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                             4595 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                             4596 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                             4597 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                             4598 ; 2967 |
                             4599 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                             4600 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                             4601 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                             4602 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                             4603 ; 2972 |
                             4604 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                             4605 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
                             4606 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                             4607 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                             4608 ; 2977 |
                             4609 ; 2978 |//$FILENAME settings_languages_eng.src
                             4610 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                             4611 ; 2980 |//$FILENAME settings_languages_vie.src
                             4612 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                             4613 ; 2982 |
                             4614 ; 2983 |//$FILENAME fraction_dot.src
                             4615 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                             4616 ; 2985 |
                             4617 ; 2986 |//$FILENAME fm_background.src
                             4618 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                             4619 ; 2988 |//$FILENAME vie_fm_background.src
                             4620 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
                             4621 ; 2990 |
                             4622 ; 2991 |//$FILENAME searching_please_wait.src
                             4623 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                             4624 ; 2993 |//$FILENAME vie_searching_please_wait.src
                             4625 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                             4626 ; 2995 |
                             4627 ; 2996 |//$FILENAME fm_auto_search.src
                             4628 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                             4629 ; 2998 |//$FILENAME vie_fm_auto_search.src
                             4630 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
                             4631 ; 3000 |
                             4632 ; 3001 |//$FILENAME jvj_shutdown_player.src
                             4633 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                             4634 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                             4635 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                             4636 ; 3005 |
                             4637 ; 3006 |#endif //IF (!@def(resources))
                             4638 ; 3007 |
                             4639 
                             4641 
                             4642 ; 8    |#include "buttons.h"
                             4643 
                             4645 
                             4646 ; 1    |#ifndef _BUTTONS_H
                             4647 ; 2    |#define _BUTTONS_H
                             4648 ; 3    |
                             4649 ; 4    |#include "types.h"
                             4650 
                             4652 
                             4653 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4654 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4655 ; 3    |//
                             4656 ; 4    |// Filename: types.h
                             4657 ; 5    |// Description: Standard data types
                             4658 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4659 ; 7    |
                             4660 ; 8    |#ifndef _TYPES_H
                             4661 ; 9    |#define _TYPES_H
                             4662 ; 10   |
                             4663 ; 11   |// TODO:  move this outta here!
                             4664 ; 12   |#if !defined(NOERROR)
                             4665 ; 13   |#define NOERROR 0
                             4666 ; 14   |#define SUCCESS 0
                             4667 ; 15   |#endif 
                             4668 ; 16   |#if !defined(SUCCESS)
                             4669 ; 17   |#define SUCCESS  0
                             4670 ; 18   |#endif
                             4671 ; 19   |#if !defined(ERROR)
                             4672 ; 20   |#define ERROR   -1
                             4673 ; 21   |#endif
                             4674 ; 22   |#if !defined(FALSE)
                             4675 ; 23   |#define FALSE 0
                             4676 ; 24   |#endif
                             4677 ; 25   |#if !defined(TRUE)
                             4678 ; 26   |#define TRUE  1
                             4679 ; 27   |#endif
                             4680 ; 28   |
                             4681 ; 29   |#if !defined(NULL)
                             4682 ; 30   |#define NULL 0
                             4683 ; 31   |#endif
                             4684 ; 32   |
                             4685 ; 33   |#define MAX_INT     0x7FFFFF
                             4686 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4687 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4688 ; 36   |#define MAX_ULONG   (-1) 
                             4689 ; 37   |
                             4690 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4691 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4692 ; 40   |
                             4693 ; 41   |
                             4694 ; 42   |#define BYTE    unsigned char       // btVarName
                             4695 ; 43   |#define CHAR    signed char         // cVarName
                             4696 ; 44   |#define USHORT  unsigned short      // usVarName
                             4697 ; 45   |#define SHORT   unsigned short      // sVarName
                             4698 ; 46   |#define WORD    unsigned int        // wVarName
                             4699 ; 47   |#define INT     signed int          // iVarName
                             4700 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4701 ; 49   |#define LONG    signed long         // lVarName
                             4702 ; 50   |#define BOOL    unsigned int        // bVarName
                             4703 ; 51   |#define FRACT   _fract              // frVarName
                             4704 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4705 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4706 ; 54   |#define FLOAT   float               // fVarName
                             4707 ; 55   |#define DBL     double              // dVarName
                             4708 ; 56   |#define ENUM    enum                // eVarName
                             4709 ; 57   |#define CMX     _complex            // cmxVarName
                             4710 ; 58   |typedef WORD UCS3;                   // 
                             4711 ; 59   |
                             4712 ; 60   |#define UINT16  unsigned short
                             4713 ; 61   |#define UINT8   unsigned char   
                             4714 ; 62   |#define UINT32  unsigned long
                             4715 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4716 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4717 ; 65   |#define WCHAR   UINT16
                             4718 ; 66   |
                             4719 ; 67   |//UINT128 is 16 bytes or 6 words
                             4720 ; 68   |typedef struct UINT128_3500 {   
                             4721 ; 69   |    int val[6];     
                             4722 ; 70   |} UINT128_3500;
                             4723 ; 71   |
                             4724 ; 72   |#define UINT128   UINT128_3500
                             4725 ; 73   |
                             4726 ; 74   |// Little endian word packed byte strings:   
                             4727 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4728 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4729 ; 77   |// Little endian word packed byte strings:   
                             4730 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4731 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4732 ; 80   |
                             4733 ; 81   |// Declare Memory Spaces To Use When Coding
                             4734 ; 82   |// A. Sector Buffers
                             4735 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4736 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4737 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4738 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4739 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4740 ; 88   |// B. Media DDI Memory
                             4741 ; 89   |#define MEDIA_DDI_MEM _Y
                             4742 ; 90   |
                             4743 ; 91   |
                             4744 ; 92   |
                             4745 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4746 ; 94   |// Examples of circular pointers:
                             4747 ; 95   |//    INT CIRC cpiVarName
                             4748 ; 96   |//    DWORD CIRC cpdwVarName
                             4749 ; 97   |
                             4750 ; 98   |#define RETCODE INT                 // rcVarName
                             4751 ; 99   |
                             4752 ; 100  |// generic bitfield structure
                             4753 ; 101  |struct Bitfield {
                             4754 ; 102  |    unsigned int B0  :1;
                             4755 ; 103  |    unsigned int B1  :1;
                             4756 ; 104  |    unsigned int B2  :1;
                             4757 ; 105  |    unsigned int B3  :1;
                             4758 ; 106  |    unsigned int B4  :1;
                             4759 ; 107  |    unsigned int B5  :1;
                             4760 ; 108  |    unsigned int B6  :1;
                             4761 ; 109  |    unsigned int B7  :1;
                             4762 ; 110  |    unsigned int B8  :1;
                             4763 ; 111  |    unsigned int B9  :1;
                             4764 ; 112  |    unsigned int B10 :1;
                             4765 ; 113  |    unsigned int B11 :1;
                             4766 ; 114  |    unsigned int B12 :1;
                             4767 ; 115  |    unsigned int B13 :1;
                             4768 ; 116  |    unsigned int B14 :1;
                             4769 ; 117  |    unsigned int B15 :1;
                             4770 ; 118  |    unsigned int B16 :1;
                             4771 ; 119  |    unsigned int B17 :1;
                             4772 ; 120  |    unsigned int B18 :1;
                             4773 ; 121  |    unsigned int B19 :1;
                             4774 ; 122  |    unsigned int B20 :1;
                             4775 ; 123  |    unsigned int B21 :1;
                             4776 ; 124  |    unsigned int B22 :1;
                             4777 ; 125  |    unsigned int B23 :1;
                             4778 ; 126  |};
                             4779 ; 127  |
                             4780 ; 128  |union BitInt {
                             4781 ; 129  |        struct Bitfield B;
                             4782 ; 130  |        int        I;
                             4783 ; 131  |};
                             4784 ; 132  |
                             4785 ; 133  |#define MAX_MSG_LENGTH 10
                             4786 ; 134  |struct CMessage
                             4787 ; 135  |{
                             4788 ; 136  |        unsigned int m_uLength;
                             4789 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4790 ; 138  |};
                             4791 ; 139  |
                             4792 ; 140  |typedef struct {
                             4793 ; 141  |    WORD m_wLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4794 ; 142  |    WORD m_wMessage;
                             4795 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4796 ; 144  |} Message;
                             4797 ; 145  |
                             4798 ; 146  |struct MessageQueueDescriptor
                             4799 ; 147  |{
                             4800 ; 148  |        int *m_pBase;
                             4801 ; 149  |        int m_iModulo;
                             4802 ; 150  |        int m_iSize;
                             4803 ; 151  |        int *m_pHead;
                             4804 ; 152  |        int *m_pTail;
                             4805 ; 153  |};
                             4806 ; 154  |
                             4807 ; 155  |struct ModuleEntry
                             4808 ; 156  |{
                             4809 ; 157  |    int m_iSignaledEventMask;
                             4810 ; 158  |    int m_iWaitEventMask;
                             4811 ; 159  |    int m_iResourceOfCode;
                             4812 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4813 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4814 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4815 ; 163  |    int m_uTimeOutHigh;
                             4816 ; 164  |    int m_uTimeOutLow;
                             4817 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4818 ; 166  |};
                             4819 ; 167  |
                             4820 ; 168  |union WaitMask{
                             4821 ; 169  |    struct B{
                             4822 ; 170  |        unsigned int m_bNone     :1;
                             4823 ; 171  |        unsigned int m_bMessage  :1;
                             4824 ; 172  |        unsigned int m_bTimer    :1;
                             4825 ; 173  |        unsigned int m_bButton   :1;
                             4826 ; 174  |    } B;
                             4827 ; 175  |    int I;
                             4828 ; 176  |} ;
                             4829 ; 177  |
                             4830 ; 178  |
                             4831 ; 179  |struct Button {
                             4832 ; 180  |        WORD wButtonEvent;
                             4833 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4834 ; 182  |};
                             4835 ; 183  |
                             4836 ; 184  |struct Message {
                             4837 ; 185  |        WORD wMsgLength;
                             4838 ; 186  |        WORD wMsgCommand;
                             4839 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4840 ; 188  |};
                             4841 ; 189  |
                             4842 ; 190  |union EventTypes {
                             4843 ; 191  |        struct CMessage msg;
                             4844 ; 192  |        struct Button Button ;
                             4845 ; 193  |        struct Message Message;
                             4846 ; 194  |};
                             4847 ; 195  |
                             4848 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4849 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4850 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4851 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4852 ; 200  |
                             4853 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4854 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4855 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4856 ; 204  |
                             4857 ; 205  |#if DEBUG
                             4858 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4859 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4860 ; 208  |#else 
                             4861 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4862 ; 210  |#define DebugBuildAssert(x)    
                             4863 ; 211  |#endif
                             4864 ; 212  |
                             4865 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4866 ; 214  |//  #pragma asm
                             4867 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4868 ; 216  |//  #pragma endasm
                             4869 ; 217  |
                             4870 ; 218  |
                             4871 ; 219  |#ifdef COLOR_262K
                             4872 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4873 ; 221  |#elif defined(COLOR_65K)
                             4874 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4875 ; 223  |#else
                             4876 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4877 ; 225  |#endif
                             4878 ; 226  |    
                             4879 ; 227  |#endif // #ifndef _TYPES_H
                             4880 
                             4882 
                             4883 ; 5    |
                             4884 ; 6    |//These must match the definintions in buttondefs.inc, otherwise the button presses will trigger
                             4885 ; 7    |//unexpected events.
                             4886 ; 8    |
                             4887 ; 9    |#define PR_RW           0
                             4888 ; 10   |#define PH_RW                   1
                             4889 ; 11   |#define PR_FF           2
                             4890 ; 12   |#define PH_FF           3
                             4891 ; 13   |#define PR_MENU         4
                             4892 ; 14   |#define PH_MENU         5
                             4893 ; 15   |#define PR_RV           6
                             4894 ; 16   |#define PH_RV           7
                             4895 ; 17   |#define PR_PLAY                 8
                             4896 ; 18   |#define PH_PLAY         9
                             4897 ; 19   |#define PR_HOLD         10
                             4898 ; 20   |#define PH_HOLD         11
                             4899 ; 21   |#define PR_VOL_DOWN     12
                             4900 ; 22   |#define PR_VOL_UP       13
                             4901 ; 23   |
                             4902 ; 24   |
                             4903 ; 25   |
                             4904 ; 26   |
                             4905 ; 27   |#define PH_VOL_DOWN     14
                             4906 ; 28   |#define PH_VOL_UP       15
                             4907 ; 29   |#define PR_MODE         24
                             4908 ; 30   |#define PR_STOP                 25
                             4909 ; 31   |#define PH_STOP         26
                             4910 ; 32   |#define PR_RECORD      27
                             4911 ; 33   |#define PH_RECORD       28
                             4912 ; 34   |#define PR_AB           33
                             4913 ; 35   |#define PR_ERASE        34
                             4914 ; 36   |#define PH_ERASE        35
                             4915 ; 37   |#define PR_EQ           36
                             4916 ; 38   |#define PH_EQ       37
                             4917 ; 39   |
                             4918 ; 40   |
                             4919 ; 41   |
                             4920 ; 42   |
                             4921 ; 43   |extern WORD g_wLastButton;
                             4922 ; 44   |
                             4923 ; 45   |#endif //_BUTTONS_H
                             4924 
                             4926 
                             4927 ; 9    |#include "menus.h"
                             4928 
                             4930 
                             4931 ; 1    |#ifndef _MENU_H
                             4932 ; 2    |#define _MENU_H
                             4933 ; 3    |
                             4934 ; 4    |#include "types.h"
                             4935 
                             4937 
                             4938 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4939 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4940 ; 3    |//
                             4941 ; 4    |// Filename: types.h
                             4942 ; 5    |// Description: Standard data types
                             4943 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4944 ; 7    |
                             4945 ; 8    |#ifndef _TYPES_H
                             4946 ; 9    |#define _TYPES_H
                             4947 ; 10   |
                             4948 ; 11   |// TODO:  move this outta here!
                             4949 ; 12   |#if !defined(NOERROR)
                             4950 ; 13   |#define NOERROR 0
                             4951 ; 14   |#define SUCCESS 0
                             4952 ; 15   |#endif 
                             4953 ; 16   |#if !defined(SUCCESS)
                             4954 ; 17   |#define SUCCESS  0
                             4955 ; 18   |#endif
                             4956 ; 19   |#if !defined(ERROR)
                             4957 ; 20   |#define ERROR   -1
                             4958 ; 21   |#endif
                             4959 ; 22   |#if !defined(FALSE)
                             4960 ; 23   |#define FALSE 0
                             4961 ; 24   |#endif
                             4962 ; 25   |#if !defined(TRUE)
                             4963 ; 26   |#define TRUE  1
                             4964 ; 27   |#endif
                             4965 ; 28   |
                             4966 ; 29   |#if !defined(NULL)
                             4967 ; 30   |#define NULL 0
                             4968 ; 31   |#endif
                             4969 ; 32   |
                             4970 ; 33   |#define MAX_INT     0x7FFFFF
                             4971 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4972 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4973 ; 36   |#define MAX_ULONG   (-1) 
                             4974 ; 37   |
                             4975 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4976 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4977 ; 40   |
                             4978 ; 41   |
                             4979 ; 42   |#define BYTE    unsigned char       // btVarName
                             4980 ; 43   |#define CHAR    signed char         // cVarName
                             4981 ; 44   |#define USHORT  unsigned short      // usVarName
                             4982 ; 45   |#define SHORT   unsigned short      // sVarName
                             4983 ; 46   |#define WORD    unsigned int        // wVarName
                             4984 ; 47   |#define INT     signed int          // iVarName
                             4985 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4986 ; 49   |#define LONG    signed long         // lVarName
                             4987 ; 50   |#define BOOL    unsigned int        // bVarName
                             4988 ; 51   |#define FRACT   _fract              // frVarName
                             4989 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4990 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4991 ; 54   |#define FLOAT   float               // fVarName
                             4992 ; 55   |#define DBL     double              // dVarName
                             4993 ; 56   |#define ENUM    enum                // eVarName
                             4994 ; 57   |#define CMX     _complex            // cmxVarName
                             4995 ; 58   |typedef WORD UCS3;                   // 
                             4996 ; 59   |
                             4997 ; 60   |#define UINT16  unsigned short
                             4998 ; 61   |#define UINT8   unsigned char   
                             4999 ; 62   |#define UINT32  unsigned long
                             5000 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             5001 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             5002 ; 65   |#define WCHAR   UINT16
                             5003 ; 66   |
                             5004 ; 67   |//UINT128 is 16 bytes or 6 words
                             5005 ; 68   |typedef struct UINT128_3500 {   
                             5006 ; 69   |    int val[6];     
                             5007 ; 70   |} UINT128_3500;
                             5008 ; 71   |
                             5009 ; 72   |#define UINT128   UINT128_3500
                             5010 ; 73   |
                             5011 ; 74   |// Little endian word packed byte strings:   
                             5012 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5013 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5014 ; 77   |// Little endian word packed byte strings:   
                             5015 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5016 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5017 ; 80   |
                             5018 ; 81   |// Declare Memory Spaces To Use When Coding
                             5019 ; 82   |// A. Sector Buffers
                             5020 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5021 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5022 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5023 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5024 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5025 ; 88   |// B. Media DDI Memory
                             5026 ; 89   |#define MEDIA_DDI_MEM _Y
                             5027 ; 90   |
                             5028 ; 91   |
                             5029 ; 92   |
                             5030 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5031 ; 94   |// Examples of circular pointers:
                             5032 ; 95   |//    INT CIRC cpiVarName
                             5033 ; 96   |//    DWORD CIRC cpdwVarName
                             5034 ; 97   |
                             5035 ; 98   |#define RETCODE INT                 // rcVarName
                             5036 ; 99   |
                             5037 ; 100  |// generic bitfield structure
                             5038 ; 101  |struct Bitfield {
                             5039 ; 102  |    unsigned int B0  :1;
                             5040 ; 103  |    unsigned int B1  :1;
                             5041 ; 104  |    unsigned int B2  :1;
                             5042 ; 105  |    unsigned int B3  :1;
                             5043 ; 106  |    unsigned int B4  :1;
                             5044 ; 107  |    unsigned int B5  :1;
                             5045 ; 108  |    unsigned int B6  :1;
                             5046 ; 109  |    unsigned int B7  :1;
                             5047 ; 110  |    unsigned int B8  :1;
                             5048 ; 111  |    unsigned int B9  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5049 ; 112  |    unsigned int B10 :1;
                             5050 ; 113  |    unsigned int B11 :1;
                             5051 ; 114  |    unsigned int B12 :1;
                             5052 ; 115  |    unsigned int B13 :1;
                             5053 ; 116  |    unsigned int B14 :1;
                             5054 ; 117  |    unsigned int B15 :1;
                             5055 ; 118  |    unsigned int B16 :1;
                             5056 ; 119  |    unsigned int B17 :1;
                             5057 ; 120  |    unsigned int B18 :1;
                             5058 ; 121  |    unsigned int B19 :1;
                             5059 ; 122  |    unsigned int B20 :1;
                             5060 ; 123  |    unsigned int B21 :1;
                             5061 ; 124  |    unsigned int B22 :1;
                             5062 ; 125  |    unsigned int B23 :1;
                             5063 ; 126  |};
                             5064 ; 127  |
                             5065 ; 128  |union BitInt {
                             5066 ; 129  |        struct Bitfield B;
                             5067 ; 130  |        int        I;
                             5068 ; 131  |};
                             5069 ; 132  |
                             5070 ; 133  |#define MAX_MSG_LENGTH 10
                             5071 ; 134  |struct CMessage
                             5072 ; 135  |{
                             5073 ; 136  |        unsigned int m_uLength;
                             5074 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5075 ; 138  |};
                             5076 ; 139  |
                             5077 ; 140  |typedef struct {
                             5078 ; 141  |    WORD m_wLength;
                             5079 ; 142  |    WORD m_wMessage;
                             5080 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5081 ; 144  |} Message;
                             5082 ; 145  |
                             5083 ; 146  |struct MessageQueueDescriptor
                             5084 ; 147  |{
                             5085 ; 148  |        int *m_pBase;
                             5086 ; 149  |        int m_iModulo;
                             5087 ; 150  |        int m_iSize;
                             5088 ; 151  |        int *m_pHead;
                             5089 ; 152  |        int *m_pTail;
                             5090 ; 153  |};
                             5091 ; 154  |
                             5092 ; 155  |struct ModuleEntry
                             5093 ; 156  |{
                             5094 ; 157  |    int m_iSignaledEventMask;
                             5095 ; 158  |    int m_iWaitEventMask;
                             5096 ; 159  |    int m_iResourceOfCode;
                             5097 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5098 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             5099 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5100 ; 163  |    int m_uTimeOutHigh;
                             5101 ; 164  |    int m_uTimeOutLow;
                             5102 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5103 ; 166  |};
                             5104 ; 167  |
                             5105 ; 168  |union WaitMask{
                             5106 ; 169  |    struct B{
                             5107 ; 170  |        unsigned int m_bNone     :1;
                             5108 ; 171  |        unsigned int m_bMessage  :1;
                             5109 ; 172  |        unsigned int m_bTimer    :1;
                             5110 ; 173  |        unsigned int m_bButton   :1;
                             5111 ; 174  |    } B;
                             5112 ; 175  |    int I;
                             5113 ; 176  |} ;
                             5114 ; 177  |
                             5115 ; 178  |
                             5116 ; 179  |struct Button {
                             5117 ; 180  |        WORD wButtonEvent;
                             5118 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5119 ; 182  |};
                             5120 ; 183  |
                             5121 ; 184  |struct Message {
                             5122 ; 185  |        WORD wMsgLength;
                             5123 ; 186  |        WORD wMsgCommand;
                             5124 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5125 ; 188  |};
                             5126 ; 189  |
                             5127 ; 190  |union EventTypes {
                             5128 ; 191  |        struct CMessage msg;
                             5129 ; 192  |        struct Button Button ;
                             5130 ; 193  |        struct Message Message;
                             5131 ; 194  |};
                             5132 ; 195  |
                             5133 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5134 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5135 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5136 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5137 ; 200  |
                             5138 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5139 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5140 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5141 ; 204  |
                             5142 ; 205  |#if DEBUG
                             5143 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5144 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5145 ; 208  |#else 
                             5146 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             5147 ; 210  |#define DebugBuildAssert(x)    
                             5148 ; 211  |#endif
                             5149 ; 212  |
                             5150 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5151 ; 214  |//  #pragma asm
                             5152 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5153 ; 216  |//  #pragma endasm
                             5154 ; 217  |
                             5155 ; 218  |
                             5156 ; 219  |#ifdef COLOR_262K
                             5157 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             5158 ; 221  |#elif defined(COLOR_65K)
                             5159 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             5160 ; 223  |#else
                             5161 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             5162 ; 225  |#endif
                             5163 ; 226  |    
                             5164 ; 227  |#endif // #ifndef _TYPES_H
                             5165 
                             5167 
                             5168 ; 5    |
                             5169 ; 6    |#define TIMER_ANIMATE           0
                             5170 ; 7    |#define TIMER_AUTO_SHUTDOWN     1
                             5171 ; 8    |#define TIMER_BATT_CHK          2
                             5172 ; 9    |#define TIMER_SONG_CHANGE       3
                             5173 ; 10   |#define TIMER_TUNER                             4
                             5174 ; 11   |#define TIMER_BACKLIGHT                 5
                             5175 ; 12   |#define TIMER_FFRWND                6
                             5176 ; 13   |#define TIMER_BATTERY_CHARGER   7
                             5177 ; 14   |#define TIMER_TIMEDATE                  8
                             5178 ; 15   |#define TIMER_JPEG_DECODER_CALLBACK 6 //shared with TIMER_FFRWND since they won't use together
                             5179 ; 16   |#define TIMER_APIC_UPDATE               9
                             5180 ; 17   |
                             5181 ; 18   |#define MENU_MSG_ANIMATE            MENU_LAST_MSG_ID+1
                             5182 ; 19   |#define MENU_MSG_AUTOSHUTDOWN       MENU_LAST_MSG_ID+2
                             5183 ; 20   |#define MENU_SONG_CHANGE_TIMEOUT    MENU_LAST_MSG_ID+3
                             5184 ; 21   |#define MENU_TUNER_READY                        MENU_LAST_MSG_ID+4
                             5185 ; 22   |#define MENU_MSG_TURN_OFF_BACKLIGHT MENU_LAST_MSG_ID+5
                             5186 ; 23   |#define MENU_MSG_SEND_FF            MENU_LAST_MSG_ID+6
                             5187 ; 24   |#define MENU_MSG_SEND_RWND          MENU_LAST_MSG_ID+7
                             5188 ; 25   |#define MENU_BATTERY_CHARGER_TIMEOUT  MENU_LAST_MSG_ID+8
                             5189 ; 26   |#define MENU_MSG_REFRESH_TIMEDATE       MENU_LAST_MSG_ID+9
                             5190 ; 27   |#ifdef USE_PLAYLIST3
                             5191 ; 28   |#define MENU_PAGE_ITEM_COUNT    (4)
                             5192 ; 29   |#define MENU_ITEM_HEIGHT                (8)
                             5193 ; 30   |#define MENU_ITEM_X_OFFSET      (0)
                             5194 ; 31   |#define MENU_ITEM_Y_OFFSET      (16)
                             5195 ; 32   |
                             5196 ; 33   |#define PLAYLIST_ENABLE         (0)
                             5197 ; 34   |#endif
                             5198 ; 35   |#define ANIMATE_PERIOD          (100)
                             5199 ; 36   |#define MENU_MSG_JPEG_CALLBACK            MENU_LAST_MSG_ID+10
                             5200 ; 37   |#define MENU_JPEG_THUMBNAIL_CURSOR  MENU_LAST_MSG_ID+11
                             5201 ; 38   |#define MENU_JPEG_NEXT_PICTURE          MENU_LAST_MSG_ID+12
                             5202 ; 39   |#define MENU_MSG_APIC_UPDATE            MENU_LAST_MSG_ID+13
                             5203 ; 40   |#ifdef USE_PLAYLIST5
                             5204 ; 41   |#define MENU_MSG_PL5_PLAY_SONG          MENU_LAST_MSG_ID+14
                             5205 ; 42   |#endif
                             5206 ; 43   |
                             5207 ; 44   |#define MENU_BATTERY_CHARGER_TIMEOUT  MENU_LAST_MSG_ID+8
                             5208 ; 45   |#define FILE_NAME_BUFFER_SIZE  7
                             5209 ; 46   |#define TIMER_JPEG_DECODER_TIMEOUT_MS 5
                             5210 ; 47   |
                             5211 ; 48   |// used with shutdown menu
                             5212 ; 49   |// FORCESHUTDOWN does not allow abort
                             5213 ; 50   |// USERSHUTDOWN allows user abort if PH_STOP is not held long enough
                             5214 ; 51   |#define FORCESHUTDOWN                   TRUE
                             5215 ; 52   |#define USERSHUTDOWN                    FALSE
                             5216 ; 53   |
                             5217 ; 54   |// if low battery display low battery message
                             5218 ; 55   |#define LOWBATT                                 TRUE
                             5219 ; 56   |#define REGBATT                                 FALSE
                             5220 ; 57   |
                             5221 ; 58   |//Backlight Define Statements
                             5222 ; 59   |#ifdef CLCD
                             5223 ; 60   |#ifdef CLCD_16BIT
                             5224 ; 61   |#define BACKLIGHT_CONTROL_REGISTER              HW_PWM_CH0AR.I
                             5225 ; 62   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9  //PWM2
                             5226 ; 63   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                             5227 ; 64   |#define BACKLIGHT_ON                            0x06C000
                             5228 ; 65   |#define BACKLIGHT_OFF                           0x024000
                             5229 ; 66   |#else
                             5230 ; 67   |#define BACKLIGHT_CONTROL_REGISTER              HW_PWM_CH2AR.I
                             5231 ; 68   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9  //PWM2
                             5232 ; 69   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                             5233 ; 70   |#define BACKLIGHT_ON                            0x006000
                             5234 ; 71   |#define BACKLIGHT_OFF                           0x002000
                             5235 ; 72   |#endif
                             5236 ; 73   |#else
                             5237 ; 74   |#define BACKLIGHT_CONTROL_REGISTER              HW_GP0DOR.B.B9
                             5238 ; 75   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9
                             5239 ; 76   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                             5240 ; 77   |#define BACKLIGHT_ON                            TRUE
                             5241 ; 78   |#define BACKLIGHT_OFF                           FALSE
                             5242 ; 79   |#endif
                             5243 ; 80   |#define BACKLIGHT_TIME                                          5000            //5 seconds
                             5244 ; 81   |
                             5245 ; 82   |// used with NextEQ / NextPlayMode to indicate direction
                             5246 ; 83   |#define INCREMENT 1
                             5247 ; 84   |#define DECREMENT 0
                             5248 ; 85   |
                             5249 ; 86   |//These two sit outside the boundary of MENU_FIRST and MENU_LAST simply because they're
                             5250 ; 87   |//states that aren't included in the displayed list.
                             5251 ; 88   |#define MENU_EXIT       101
                             5252 ; 89   |#define MENU_MAIN       100
                             5253 ; 90   |
                             5254 ; 91   |// menu flags
                             5255 ; 92   |#define MENU_FLAG_POWER_DOWN_ENABLED    B0      // when clear, disable tracking
                             5256 ; 93   |#define MENU_FLAG_ESCAPE_TO_MUSIC               B1      // when set, escape all menu nesting to music
                             5257 ; 94   |#define MENU_FLAG_SAVE_CHANGES          B2  // true if fast escape interrupted by save changes?
                             5258 ; 95   |#if (defined USE_PLAYLIST3) || (defined USE_PLAYLIST5)
                             5259 ; 96   |#define MENU_FLAG_ESCAPE_TO_RECORD              B2      // when set, escape all menu nesting to voice/fm menu and start recording
                             5260 ; 97   |#define MENU_FLAG_RETURN_TO_MUSIC               B3      // when set, escape all menu nesting to music
                             5261 ; 98   |#endif
                             5262 ; 99   |
                             5263 ; 100  |#define LANGUAGES_ENG   0
                             5264 ; 101  |#define LANGUAGES_VIE   1
                             5265 ; 102  |#define LANGUAGES_FIRST LANGUAGES_ENG
                             5266 ; 103  |#define LANGUAGES_LAST          LANGUAGES_VIE
                             5267 ; 104  |
                             5268 ; 105  |// 1 word menu variable -- bit flags
                             5269 ; 106  |extern struct Bitfield g_MenuFlags;
                             5270 ; 107  |
                             5271 ; 108  |// This data type is declared in mainmenu.c, but is externed here for all other menus.
                             5272 ; 109  |extern union EventTypes gEventInfo;
                             5273 ; 110  |
                             5274 ; 111  |//each menu should set g_iCurrentMenu to make sure the menu icon shows up correctly.
                             5275 ; 112  |extern INT g_iCurrentMenu;
                             5276 ; 113  |
                             5277 ; 114  |//Backlight State
                             5278 ; 115  |extern INT g_iBackLightState;
                             5279 ; 116  |
                             5280 ; 117  |//Language state
                             5281 ; 118  |extern INT g_iLanguage;
                             5282 ; 119  |
                             5283 ; 120  |//Export all Menu prototypes for calls allowed from other code banks
                             5284 ; 121  |void _reentrant UserTask(int a, int b, int *pPtr);
                             5285 ; 122  |_reentrant INT ShutdownMenu( INT iIgnored1, INT iIgnored2, INT *pPtr);
                             5286 ; 123  |_reentrant INT SplashScreen( INT iResource, INT iMilliseconds, INT *pPtr);
                             5287 ; 124  |int _reentrant MusicMenu(INT a, INT b, INT *c);
                             5288 ; 125  |#ifdef USE_PLAYLIST3
                             5289 ; 126  |int _reentrant PlayMusicMenu(INT a, INT b, INT *c);
                             5290 ; 127  |int _reentrant NewMusicMenu(INT a, INT b, INT *c);
                             5291 ; 128  |int _reentrant BrowseMenu(INT a, INT b, INT *c);
                             5292 ; 129  |#endif // #ifdef USE_PLAYLIST3
                             5293 ; 130  |#ifdef MOTION_VIDEO
                             5294 ; 131  |int _reentrant MotionVideoMenu(INT a, INT b, INT *c);
                             5295 ; 132  |#endif
                             5296 ; 133  |#ifdef JPEG_APP
                             5297 ; 134  |int _reentrant JpegDisplayMenu(int a, int b, int *pPtr);
                             5298 ; 135  |int _reentrant JpegManualMenu(int a, int b, int *pPtr);
                             5299 ; 136  |int _reentrant JpegSlideshowMenu(int a, int b, int *pPtr);
                             5300 ; 137  |int _reentrant JpegThumbnailMenu(int a, int b, int *pPtr);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5301 ; 138  |#endif
                             5302 ; 139  |int _reentrant SpectrogramMenu(INT a, INT b, INT *pPtr);
                             5303 ; 140  |int _reentrant VoiceMenu(int a, int b, int *c);
                             5304 ; 141  |int _reentrant SettingsMenu(int a, int b, int *pPtr);
                             5305 ; 142  |int _reentrant EqMenu(int a, int b, int *pPtr);
                             5306 ; 143  |int _reentrant SendEQ(int iCurrentEQ, int b, int *pPtr);
                             5307 ; 144  |
                             5308 ; 145  |int _reentrant PlayModeMenu(int a, int b, int *pPtr);
                             5309 ; 146  |int _reentrant NextPlayMode(int iDirection, int b, int *c);
                             5310 ; 147  |int _reentrant ContrastMenu(int a, int b, int *pPtr);
                             5311 ; 148  |int _reentrant AboutMenu(int a, int b, int *pPtr);
                             5312 ; 149  |#ifdef USE_PLAYLIST5
                             5313 ; 150  |int _reentrant BrowseMenu(INT a, INT b, INT *c);
                             5314 ; 151  |#endif
                             5315 ; 152  |int _reentrant DeleteMenu(int a, int b, int *pPtr);
                             5316 ; 153  |int _reentrant PwrSavingsMenu(int a, int b, int *pPtr);
                             5317 ; 154  |int _reentrant BackLightMenu(int a, int b, int *pPtr);
                             5318 ; 155  |int _reentrant RecordSettingsMenu(int a, int b, int *pPtr);
                             5319 ; 156  |int _reentrant TimeDateMenu(int a, int b, int *pPtr);
                             5320 ; 157  |int _reentrant SetTimeMenu(int a, int b, int *pPtr);
                             5321 ; 158  |int _reentrant SetDateMenu(int a, int b, int *pPtr);
                             5322 ; 159  |
                             5323 ; 160  |int _reentrant TestMenu(int a, int b, int *pPtr);
                             5324 ; 161  |void _reentrant RecordTestMenu(void);
                             5325 ; 162  |
                             5326 ; 163  |int _reentrant FMTunerMenu(int a, int b, int *c);
                             5327 ; 164  |int _reentrant InitPlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                             5328 ; 165  |int _reentrant HandlePlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                             5329 ; 166  |int _reentrant ExitPlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                             5330 ; 167  |_reentrant int InitRecorderStateMachine(int EncodingType, int InputSource, int *c);
                             5331 ; 168  |_reentrant int HandleRecorderStateMachine(int a, int b, int *c);
                             5332 ; 169  |_reentrant int ExitRecorderStateMachine(int InputSource, int b, int *c);
                             5333 ; 170  |int _reentrant NextEQ(INT iDirection, INT b, INT *c);
                             5334 ; 171  |_reentrant INT RecordVoiceFile(INT a, INT b, INT *pPtr);
                             5335 ; 172  |_reentrant int RefreshDisplay           ( int iDisplayHint, int a, int *pPtr);
                             5336 ; 173  |_reentrant void DisplayClearDisplay      ( int iDisplayHint, int a, int *pPtr);
                             5337 ; 174  |_reentrant int DisplayEQIcon            ( int iDisplayHint, int a, int *pPtr);
                             5338 ; 175  |_reentrant int DisplayVolume            ( int iDisplayHint, int a, int *pPtr);
                             5339 ; 176  |_reentrant int DisplayShutdownProgress  ( int iDisplayHint, int a, int *pPtr);
                             5340 ; 177  |_reentrant int DisplayDefragmentstore  ( int iDisplayHint, int a, int *pPtr);
                             5341 ; 178  |_reentrant int DisplayKickOff           ( int iDisplayHint, int a, int *pPtr);
                             5342 ; 179  |_reentrant int DisplayKickOffLocked     ( int iDisplayHint, int a, int *pPtr);
                             5343 ; 180  |_reentrant void DisplayLockIcon          ( int iDisplayHint, int a, int *pPtr);
                             5344 ; 181  |_reentrant void ChangePlaySet(INT mode);
                             5345 ; 182  |void _reentrant UpdateAutoShutdownTimer (void);
                             5346 ; 183  |int _reentrant SetPwrSetting (int iCurrentPwrSetting, int b, int *pPtr);
                             5347 ; 184  |int  _reentrant SendPlayMode(int iCurrentPlayMode, int b, int *pPtr);
                             5348 ; 185  |_reentrant int DeleteFilePrompt(int a,int b, int *pPtr);
                             5349 ; 186  |#endif
                             5350 ; 187  |
                             5351 
                             5353 
                             5354 ; 10   |#include "display.h"
                             5355 
                             5357 
                             5358 ; 1    |#ifndef _DISPLAY_H
                             5359 ; 2    |#define _DISPLAY_H
                             5360 ; 3    |
                             5361 ; 4    |//Display bits
                             5362 ; 5    |#define DISPLAY_CLEAR_DISPLAY_BITPOS        0
                             5363 ; 6    |
                             5364 ; 7    |#define DISPLAY_ENCODER_TRACK_TIME_BITPOS   1
                             5365 ; 8    |#define DISPLAY_ENCODER_TRACK_NAME_BITPOS   2
                             5366 ; 9    |#define DISPLAY_RECORD_MODE_BITPOS          3
                             5367 ; 10   |
                             5368 ; 11   |//This bit (DISPLAY_MISC_BITPOS) is set to allow DisplayHints to be non zero, but does not map
                             5369 ; 12   |//to anything in UpdateDisplay();  (meant to be used to indicate that specific
                             5370 ; 13   |//things that are specific for that menu.
                             5371 ; 14   |#define DISPLAY_MISC_BITPOS                 4
                             5372 ; 15   |
                             5373 ; 16   |#define DISPLAY_FMTUNER_FREQUENCY           5
                             5374 ; 17   |#define DISPLAY_FMTUNER_PRESET              6
                             5375 ; 18   |#define DISPLAY_FMTUNER_STRENGTH            7
                             5376 ; 19   |
                             5377 ; 20   |#define DISPLAY_PLAYSTATE_BITPOS             9
                             5378 ; 21   |#define DISPLAY_AB_ICON_BITPOS              10
                             5379 ; 22   |#define DISPLAY_PLAYMODE_BITPOS             11
                             5380 ; 23   |#define DISPLAY_PLAYSET_BITPOS              12
                             5381 ; 24   |
                             5382 ; 25   |//Playback info
                             5383 ; 26   |#define DISPLAY_EQ_BITPOS                   13
                             5384 ; 27   |#define DISPLAY_VOLUME_BITPOS               14
                             5385 ; 28   |
                             5386 ; 29   |//Track Info
                             5387 ; 30   |#define DISPLAY_SONGARTISTALBUM_BITPOS      15
                             5388 ; 31   |#define DISPLAY_SONGTITLE_BITPOS            16
                             5389 ; 32   |#define DISPLAY_CURRENTTRACK_BITPOS         17
                             5390 ; 33   |#define DISPLAY_TRACKTIME_BITPOS            18
                             5391 ; 34   |#define DISPLAY_TOTALTRACKTIME_BITPOS        8
                             5392 ; 35   |#define DISPLAY_BITRATE_BITPOS              19
                             5393 ; 36   |
                             5394 ; 37   |//Device status info
                             5395 ; 38   |#define DISPLAY_LOCK_BITPOS                 20
                             5396 ; 39   |#define DISPLAY_DISK_BITPOS                 21
                             5397 ; 40   |#define DISPLAY_BATTERY_BITPOS              22
                             5398 ; 41   |#define DISPLAY_ALBUMART_BITPOS              23
                             5399 ; 42   |
                             5400 ; 43   |#ifdef PLAYER_STRESS
                             5401 ; 44   |// this may not work since album art uses bit 23 so we may need a new word variable for this player stress test bit below.
                             5402 ; 45   |#define DISPLAY_STRESSTEST_BITPOS            23
                             5403 ; 46   |#endif
                             5404 ; 47   |
                             5405 ; 48   |
                             5406 ; 49   |union DisplayHints
                             5407 ; 50   |{
                             5408 ; 51   |    struct {
                             5409 ; 52   |        int ClearDisplay        :1;//0
                             5410 ; 53   |        int EncoderTrackTime    :1;//1
                             5411 ; 54   |        int EncoderTrackName    :1;//2
                             5412 ; 55   |        int RecordMode          :1;//3
                             5413 ; 56   |        int Misc                :1;//4
                             5414 ; 57   |        int FMTunerFrequency    :1;//5
                             5415 ; 58   |        int FMTunerPreset       :1;//6
                             5416 ; 59   |        int FMTunerStrength     :1;//7
                             5417 ; 60   |        int TotalTrackTime      :1;//8
                             5418 ; 61   |        int PlayState           :1;//9
                             5419 ; 62   |        int ABIcon              :1;//10
                             5420 ; 63   |        int PlayMode            :1;//11
                             5421 ; 64   |        int PlaySet             :1;//12
                             5422 ; 65   |        int EQ                  :1;//13
                             5423 ; 66   |        int Volume              :1;//14
                             5424 ; 67   |        int SongArtistAlbum     :1;//15
                             5425 ; 68   |        int SongTitle           :1;//16
                             5426 ; 69   |        int CurrentTrack        :1;//17
                             5427 ; 70   |        int TrackTime           :1;//18
                             5428 ; 71   |        int Bitrate             :1;//19
                             5429 ; 72   |        int LockIcon            :1;//20
                             5430 ; 73   |        int Disk                :1;//21
                             5431 ; 74   |        int Battery             :1;//22
                             5432 ; 75   |#ifdef PLAYER_STRESS
                             5433 ; 76   |        int StressTest         :1;//23  // this might not work since bit 23 is already taken by album art. 23 is last bit in word.
                             5434 ; 77   |#else
                             5435 ; 78   |        int AlbumArt            :1;//23
                             5436 ; 79   |#endif
                             5437 ; 80   |    } bits;
                             5438 ; 81   |    WORD I;
                             5439 ; 82   |};
                             5440 ; 83   |
                             5441 ; 84   |// setup default display for all menus
                             5442 ; 85   |// can be adjusted in each menus as required.
                             5443 ; 86   |#define COMMON_DISPLAY_ALL  (\ 
                             5444 ; 87   |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             5445 ; 88   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             5446 ; 89   |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5447 ; 90   |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             5448 ; 91   |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             5449 ; 92   |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             5450 ; 93   |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             5451 ; 94   |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             5452 ; 95   |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             5453 ; 96   |                                )
                             5454 ; 97   |
                             5455 ; 98   |#define SPECTROGRAM_MENU_DISPLAY_ALL  (\ 
                             5456 ; 99   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             5457 ; 100  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             5458 ; 101  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             5459 ; 102  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             5460 ; 103  |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             5461 ; 104  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             5462 ; 105  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             5463 ; 106  |                                )
                             5464 ; 107  |
                             5465 ; 108  |//-----------------------------------------------
                             5466 ; 109  |#ifdef JPEG_ALBUM_ART
                             5467 ; 110  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_ALBUMART_BITPOS)
                             5468 ; 111  |#else
                             5469 ; 112  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (0)
                             5470 ; 113  |#endif
                             5471 ; 114  |
                             5472 ; 115  |#ifdef PLAYER_STRESS
                             5473 ; 116  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_STRESSTEST_BITPOS)
                             5474 ; 117  |#else
                             5475 ; 118  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (0)
                             5476 ; 119  |#endif
                             5477 ; 120  |
                             5478 ; 121  |
                             5479 ; 122  |#define MUSIC_MENU_DISPLAY_ALL  (\ 
                             5480 ; 123  |                                (COMMON_DISPLAY_ALL)|\ 
                             5481 ; 124  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5482 ; 125  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5483 ; 126  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5484 ; 127  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             5485 ; 128  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             5486 ; 129  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5487 ; 130  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             5488 ; 131  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)\ 
                             5489 ; 132  |                                )
                             5490 ; 133  |
                             5491 ; 134  |#define MUSIC_MENU_DISPLAY_NEW_TRACK (\ 
                             5492 ; 135  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5493 ; 136  |                                (PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE)|\ 
                             5494 ; 137  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             5495 ; 138  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             5496 ; 139  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5497 ; 140  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             5498 ; 141  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             5499 ; 142  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             5500 ; 143  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5501 ; 144  |                                (1<<DISPLAY_PLAYSET_BITPOS)\ 
                             5502 ; 145  |                                )
                             5503 ; 146  |//-----------------------------------------------
                             5504 ; 147  |
                             5505 ; 148  |
                             5506 ; 149  |#define MVIDEO_MENU_DISPLAY_ALL ((1<<DISPLAY_CURRENTTRACK_BITPOS)|(1<<DISPLAY_SONGTITLE_BITPOS))
                             5507 ; 150  |
                             5508 ; 151  |
                             5509 ; 152  |#define VOICE_MENU_DISPLAY_ALL  (\ 
                             5510 ; 153  |                                COMMON_DISPLAY_ALL|\ 
                             5511 ; 154  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             5512 ; 155  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5513 ; 156  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5514 ; 157  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             5515 ; 158  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             5516 ; 159  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5517 ; 160  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             5518 ; 161  |                                (1<<DISPLAY_TRACKTIME_BITPOS)\ 
                             5519 ; 162  |                                )
                             5520 ; 163  |
                             5521 ; 164  |
                             5522 ; 165  |#define RECORDING_DISPLAY_ALL   (\ 
                             5523 ; 166  |                                COMMON_DISPLAY_ALL|\ 
                             5524 ; 167  |                                (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             5525 ; 168  |                                (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                             5526 ; 169  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5527 ; 170  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5528 ; 171  |                                (1<<DISPLAY_RECORD_MODE_BITPOS)\ 
                             5529 ; 172  |                                )
                             5530 ; 173  |
                             5531 ; 174  |#ifdef USE_PLAYLIST3
                             5532 ; 175  |#define BROWSE_MENU_DISPLAY_ALL  (\ 
                             5533 ; 176  |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             5534 ; 177  |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             5535 ; 178  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             5536 ; 179  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             5537 ; 180  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             5538 ; 181  |                                )
                             5539 ; 182  |#else
                             5540 ; 183  |#ifdef USE_PLAYLIST5
                             5541 ; 184  |#if 0
                             5542 ; 185  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             5543 ; 186  |                                 COMMON_DISPLAY_ALL|\ 
                             5544 ; 187  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5545 ; 188  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5546 ; 189  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5547 ; 190  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5548 ; 191  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             5549 ; 192  |                                )
                             5550 ; 193  |#else
                             5551 ; 194  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             5552 ; 195  |                                 COMMON_DISPLAY_ALL|\ 
                             5553 ; 196  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5554 ; 197  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5555 ; 198  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5556 ; 199  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             5557 ; 200  |                                )
                             5558 ; 201  |#endif
                             5559 ; 202  |#endif  // #ifdef USE_PLAYLIST5
                             5560 ; 203  |#endif  // #ifdef USE_PLAYLIST3
                             5561 ; 204  |
                             5562 ; 205  |
                             5563 ; 206  |
                             5564 ; 207  |#define MAIN_MENU_DISPLAY_ALL           (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5565 ; 208  |
                             5566 ; 209  |#define EQ_MENU_DISPLAY_ALL             (\ 
                             5567 ; 210  |                                        COMMON_DISPLAY_ALL|\ 
                             5568 ; 211  |                                        (1<<DISPLAY_EQ_BITPOS)|\ 
                             5569 ; 212  |                                        (1<<DISPLAY_VOLUME_BITPOS)\ 
                             5570 ; 213  |                                        )     // (SDK2.520)
                             5571 ; 214  |
                             5572 ; 215  |#define PM_MENU_DISPLAY_ALL             (COMMON_DISPLAY_ALL|(1<<DISPLAY_PLAYMODE_BITPOS)|(1<<DISPLAY_MISC_BITPOS))
                             5573 ; 216  |#define PWR_MENU_DISPLAY_ALL            (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5574 ; 217  |#define SETTINGS_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5575 ; 218  |#define JPEG_DISPLAY_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5576 ; 219  |#define DELETE_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5577 ; 220  |#define ABOUT_MENU_DISPLAY_ALL          (COMMON_DISPLAY_ALL)
                             5578 ; 221  |#define ERASE_MENU_DISPLAY_ALL          ((1<<DISPLAY_BATTERY_BITPOS)|(1<<DISPLAY_LOCK_BITPOS))
                             5579 ; 222  |
                             5580 ; 223  |#define CONTRAST_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5581 ; 224  |
                             5582 ; 225  |#define TIME_DATE_MENU_DISPLAY_ALL      0
                             5583 ; 226  |#define RECORDTEST_DISPLAY_ALL       (\ 
                             5584 ; 227  |                                        (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             5585 ; 228  |                                                                        (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                             5586 ; 229  |                                                                        (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5587 ; 230  |                                        (1<<DISPLAY_RECORD_MODE_BITPOS)|\ 
                             5588 ; 231  |                                    (1<<DISPLAY_MISC_BITPOS)\ 
                             5589 ; 232  |                                                                        )
                             5590 ; 233  |
                             5591 ; 234  |#define SPLASH_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5592 ; 235  |// used during track update to force total time update
                             5593 ; 236  |#define AUTOUPDATE              FALSE
                             5594 ; 237  |#define FORCEUPDATE             TRUE
                             5595 ; 238  |
                             5596 ; 239  |
                             5597 ; 240  |// based on font used for title/artist display
                             5598 ; 241  |#define DEFAULT_CHAR_WIDTH  5
                             5599 ; 242  |
                             5600 ; 243  |
                             5601 ; 244  |// LCD dimensions
                             5602 ; 245  |#ifdef LDS514_LCD
                             5603 ; 246  |#define   LCD_SIZE_X       96
                             5604 ; 247  |#define   LCD_SIZE_Y       64
                             5605 ; 248  |#endif
                             5606 ; 249  |
                             5607 ; 250  |#ifdef ILI814_LCD
                             5608 ; 251  |#define   LCD_SIZE_X       96
                             5609 ; 252  |#define   LCD_SIZE_Y       64
                             5610 ; 253  |#endif
                             5611 ; 254  |
                             5612 ; 255  |#ifdef ML9341_LCD
                             5613 ; 256  |#define   LCD_SIZE_X       96
                             5614 ; 257  |#define   LCD_SIZE_Y       96
                             5615 ; 258  |#endif
                             5616 ; 259  |
                             5617 ; 260  |#ifdef SSD1332_LCD
                             5618 ; 261  |#define   LCD_SIZE_X       96
                             5619 ; 262  |#define   LCD_SIZE_Y       64
                             5620 ; 263  |#endif
                             5621 ; 264  |
                             5622 ; 265  |#ifdef S6B33B0A_LCD
                             5623 ; 266  |#define   LCD_SIZE_X       128
                             5624 ; 267  |#define   LCD_SIZE_Y       159
                             5625 ; 268  |#endif
                             5626 ; 269  |
                             5627 ; 270  |#ifdef SED15XX_LCD
                             5628 ; 271  |#define LCD_SIZE_X                      128
                             5629 ; 272  |#define LCD_SIZE_Y                      64
                             5630 ; 273  |#endif
                             5631 ; 274  |
                             5632 ; 275  |#define LCD_SIZE_ROW                     8
                             5633 ; 276  |
                             5634 ; 277  |#define TOP_OF_SCREEN           0
                             5635 ; 278  |#define LEFT_OF_SCREEN          0
                             5636 ; 279  |
                             5637 ; 280  |#ifdef LDS514_LCD
                             5638 ; 281  |#define   SCREEN_WIDTH       96
                             5639 ; 282  |#define   SCREEN_HEIGHT       64
                             5640 ; 283  |#endif
                             5641 ; 284  |
                             5642 ; 285  |#ifdef ILI814_LCD
                             5643 ; 286  |#define   SCREEN_WIDTH       96
                             5644 ; 287  |#define   SCREEN_HEIGHT       64
                             5645 ; 288  |#endif
                             5646 ; 289  |
                             5647 ; 290  |#ifdef ML9341_LCD
                             5648 ; 291  |#define   SCREEN_WIDTH       96
                             5649 ; 292  |#define   SCREEN_HEIGHT       96
                             5650 ; 293  |#endif
                             5651 ; 294  |
                             5652 ; 295  |#ifdef SSD1332_LCD
                             5653 ; 296  |#define   SCREEN_WIDTH       96
                             5654 ; 297  |#define   SCREEN_HEIGHT       64
                             5655 ; 298  |#endif
                             5656 ; 299  |
                             5657 ; 300  |#ifdef S6B33B0A_LCD
                             5658 ; 301  |#define   SCREEN_WIDTH       128
                             5659 ; 302  |#define   SCREEN_HEIGHT       159
                             5660 ; 303  |#endif
                             5661 ; 304  |
                             5662 ; 305  |#ifdef SED15XX_LCD
                             5663 ; 306  |#define SCREEN_WIDTH            128
                             5664 ; 307  |#define SCREEN_HEIGHT           64
                             5665 ; 308  |#endif
                             5666 ; 309  |
                             5667 ; 310  |#define CHAR_SIZE_X             6
                             5668 ; 311  |#define CHAR_SIZE_Y             8
                             5669 ; 312  |
                             5670 ; 313  |// Physical rows are numbered from 0 to LCD_SIZE_Y/LCD_SIZE_ROW
                             5671 ; 314  |#define LCD_FIRST_ROW_NUM                1
                             5672 ; 315  |#define LCD_FIRST_ROW_POS_Y=LCD_FIRST_ROW_NUM*LCD_SIZE_ROW  // skipping the first row
                             5673 ; 316  |
                             5674 ; 317  |// Top row in order from left to right
                             5675 ; 318  |#define PLAY_STATE_ICON_X_POS   LEFT_OF_SCREEN+0
                             5676 ; 319  |#define PLAY_STATE_ICON_Y_POS   TOP_OF_SCREEN+0
                             5677 ; 320  |#define PLAY_STATE_ICON_X_SIZE  12
                             5678 ; 321  |#define PLAY_STATE_ICON_Y_SIZE  8
                             5679 ; 322  |
                             5680 ; 323  |#define REPEAT_ICON_X_POS       LEFT_OF_SCREEN+13
                             5681 ; 324  |#define REPEAT_ICON_Y_POS       TOP_OF_SCREEN+0
                             5682 ; 325  |#define REPEAT_ICON_X_SIZE      12
                             5683 ; 326  |#define REPEAT_ICON_Y_SIZE      8
                             5684 ; 327  |
                             5685 ; 328  |#define SHUFFLE_ICON_X_POS      LEFT_OF_SCREEN+25
                             5686 ; 329  |#define SHUFFLE_ICON_Y_POS      TOP_OF_SCREEN+0
                             5687 ; 330  |#define SHUFFLE_ICON_X_SIZE     5     // includes white space on left side of .bmp
                             5688 ; 331  |#define SHUFFLE_ICON_Y_SIZE     8
                             5689 ; 332  |
                             5690 ; 333  |#define AB_ICON_X_POS           LEFT_OF_SCREEN+31
                             5691 ; 334  |#define AB_ICON_Y_POS           TOP_OF_SCREEN+0
                             5692 ; 335  |#define AB_ICON_X_SIZE          12
                             5693 ; 336  |#define AB_ICON_Y_SIZE          8
                             5694 ; 337  |
                             5695 ; 338  |#ifdef  AUDIBLE
                             5696 ; 339  |#define SECNAV_ICON_X_POS       LEFT_OF_SCREEN+31
                             5697 ; 340  |#define SECNAV_ICON_Y_POS       TOP_OF_SCREEN+0
                             5698 ; 341  |#define SECNAV_ICON_X_SIZE      12
                             5699 ; 342  |#define SECNAV_ICON_Y_SIZE      8
                             5700 ; 343  |#endif
                             5701 ; 344  |
                             5702 ; 345  |#define EQ_ICON_X_POS           LEFT_OF_SCREEN+44
                             5703 ; 346  |#define EQ_ICON_Y_POS           TOP_OF_SCREEN+0
                             5704 ; 347  |#define EQ_ICON_X_SIZE          22
                             5705 ; 348  |#define EQ_ICON_Y_SIZE          8
                             5706 ; 349  |
                             5707 ; 350  |#ifdef WOW
                             5708 ; 351  |#define WOW_X_POS               EQ_ICON_X_POS
                             5709 ; 352  |#define WOW_Y_POS               EQ_ICON_Y_POS
                             5710 ; 353  |#endif
                             5711 ; 354  |
                             5712 ; 355  |
                             5713 ; 356  |// Media icon
                             5714 ; 357  |#define DISK_X_POS              LEFT_OF_SCREEN+66
                             5715 ; 358  |#define DISK_Y_POS              TOP_OF_SCREEN
                             5716 ; 359  |#define DISK_X_SIZE             8
                             5717 ; 360  |#define DISK_Y_SIZE             8
                             5718 ; 361  |
                             5719 ; 362  |// Hold icon
                             5720 ; 363  |#define LOCK_ICON_X_POS         LEFT_OF_SCREEN+73
                             5721 ; 364  |#define LOCK_ICON_Y_POS         TOP_OF_SCREEN
                             5722 ; 365  |#define LOCK_ICON_X_SIZE        8
                             5723 ; 366  |#define LOCK_ICON_Y_SIZE        8
                             5724 ; 367  |
                             5725 ; 368  |#define BATTERY_ICON_X_POS      LEFT_OF_SCREEN+110
                             5726 ; 369  |#define BATTERY_ICON_Y_POS      TOP_OF_SCREEN+0
                             5727 ; 370  |#define BATTERY_ICON_X_SIZE     16
                             5728 ; 371  |#define BATTERY_ICON_Y_SIZE     8
                             5729 ; 372  |#define BATTERY_RESOURCE        RSRC_BATTERY_00
                             5730 ; 373  |
                             5731 ; 374  |// Second row from left to right
                             5732 ; 375  |#define VOLUME_ICON_X_POS       LEFT_OF_SCREEN+0
                             5733 ; 376  |#define VOLUME_ICON_Y_POS       TOP_OF_SCREEN+8
                             5734 ; 377  |#define VOLUME_ICON_X_SIZE      48
                             5735 ; 378  |#define VOLUME_ICON_Y_SIZE      8
                             5736 ; 379  |#define VOLUME_RESOURCE         RSRC_ICON_VOL_00
                             5737 ; 380  |#define VOLUME_NUM_ICONS        27
                             5738 ; 381  |
                             5739 ; 382  |#define PLAYSET_X_POS           SCREEN_WIDTH-8
                             5740 ; 383  |#define PLAYSET_Y_POS           TOP_OF_SCREEN+8
                             5741 ; 384  |
                             5742 ; 385  |//Lyrics Position
                             5743 ; 386  |#define LYRICS_DISPLAY_X_POS    LEFT_OF_SCREEN
                             5744 ; 387  |#define LYRICS_DISPLAY_Y_POS    TOP_OF_SCREEN+16
                             5745 ; 388  |#define LYRICS_DISPLAY_HEIGHT           10
                             5746 ; 389  |
                             5747 ; 390  |// Music menu
                             5748 ; 391  |#define SONG_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5749 ; 392  |#define SONG_TITLE_Y_POS        TOP_OF_SCREEN+16
                             5750 ; 393  |#define SONG_TITLE_X_SIZE       SCREEN_WIDTH
                             5751 ; 394  |#define SONG_TITLE_Y_SIZE       10
                             5752 ; 395  |
                             5753 ; 396  |#define SONG_ARTIST_X_POS       LEFT_OF_SCREEN
                             5754 ; 397  |#define SONG_ARTIST_Y_POS       TOP_OF_SCREEN+26
                             5755 ; 398  |#define SONG_ARTIST_X_SIZE      SCREEN_WIDTH
                             5756 ; 399  |#define SONG_ARTIST_Y_SIZE      10
                             5757 ; 400  |
                             5758 ; 401  |#define SONG_ALBUM_X_POS       LEFT_OF_SCREEN
                             5759 ; 402  |#define SONG_ALBUM_Y_POS       TOP_OF_SCREEN+36
                             5760 ; 403  |#define SONG_ALBUM_X_SIZE      SCREEN_WIDTH
                             5761 ; 404  |#define SONG_ALBUM_Y_SIZE      10
                             5762 ; 405  |
                             5763 ; 406  |#ifdef USE_PLAYLIST5
                             5764 ; 407  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+28
                             5765 ; 408  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             5766 ; 409  |#define TRACK_NUMBER_X_SIZE     6*4
                             5767 ; 410  |#define TRACK_NUMBER_Y_SIZE     8
                             5768 ; 411  |
                             5769 ; 412  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             5770 ; 413  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             5771 ; 414  |#define TRACK_COUNT_X_SIZE      6*4
                             5772 ; 415  |#define TRACK_COUNT_Y_SIZE      8
                             5773 ; 416  |
                             5774 ; 417  |#define TRACK_DIVIDE_X TRACK_NUMBER_X_POS+TRACK_COUNT_X_SIZE + 2
                             5775 ; 418  |#else
                             5776 ; 419  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+34
                             5777 ; 420  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             5778 ; 421  |#define TRACK_NUMBER_X_SIZE     6*3
                             5779 ; 422  |#define TRACK_NUMBER_Y_SIZE     8
                             5780 ; 423  |
                             5781 ; 424  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             5782 ; 425  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             5783 ; 426  |#define TRACK_COUNT_X_SIZE      6*3
                             5784 ; 427  |#define TRACK_COUNT_Y_SIZE      8
                             5785 ; 428  |
                             5786 ; 429  |#define TRACK_DIVIDE_X  TRACK_NUMBER_X_POS+24
                             5787 ; 430  |#endif
                             5788 ; 431  |
                             5789 ; 432  |
                             5790 ; 433  |#define TRACK_CURR_TIME_X_POS       LEFT_OF_SCREEN+28
                             5791 ; 434  |#define TRACK_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             5792 ; 435  |#define TRACK_CURR_TIME_X_SIZE      25
                             5793 ; 436  |#define TRACK_CURR_TIME_Y_SIZE      8
                             5794 ; 437  |
                             5795 ; 438  |#define TRACK_SLASH_X_SIZE          5
                             5796 ; 439  |#define TRACK_SLASH_X_POS           TRACK_TOTAL_TIME_X_POS-TRACK_SLASH_X_SIZE
                             5797 ; 440  |#define TRACK_SLASH_Y_POS           TRACK_CURR_TIME_Y_POS
                             5798 ; 441  |
                             5799 ; 442  |#define TRACK_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+60
                             5800 ; 443  |#define TRACK_TOTAL_TIME_Y_POS      TRACK_CURR_TIME_Y_POS
                             5801 ; 444  |#define TRACK_TOTAL_TIME_X_SIZE     28
                             5802 ; 445  |#define TRACK_TOTAL_TIME_Y_SIZE     8
                             5803 ; 446  |
                             5804 ; 447  |#define VBR_FLAG_X_POS      LEFT_OF_SCREEN+80
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5805 ; 448  |#define VBR_FLAG_Y_POS      8
                             5806 ; 449  |#define VBR_FLAG_X_SIZE     20
                             5807 ; 450  |#define VBR_FLAG_Y_SIZE     8
                             5808 ; 451  |#ifdef JPEG_ALBUM_ART
                             5809 ; 452  |// Album art display parameters:
                             5810 ; 453  |#define ALBUM_ART_X_POS         TOP_OF_SCREEN
                             5811 ; 454  |#define ALBUM_ART_Y_POS         80
                             5812 ; 455  |#define ALBUM_ART_X_SIZE        SCREEN_WIDTH
                             5813 ; 456  |#define ALBUM_ART_Y_SIZE        (SCREEN_HEIGHT-ALBUM_ART_Y_POS)
                             5814 ; 457  |#endif
                             5815 ; 458  |
                             5816 ; 459  |// Recording Display
                             5817 ; 460  |#define REC_CURR_TIME_X_POS       LEFT_OF_SCREEN
                             5818 ; 461  |#define REC_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             5819 ; 462  |#define REC_CURR_TIME_X_SIZE      12
                             5820 ; 463  |#define REC_CURR_TIME_Y_SIZE      8
                             5821 ; 464  |
                             5822 ; 465  |#define REC_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+45
                             5823 ; 466  |#define REC_TOTAL_TIME_Y_POS      TOP_OF_SCREEN+48
                             5824 ; 467  |#define REC_TOTAL_TIME_X_SIZE     28
                             5825 ; 468  |#define REC_TOTAL_TIME_Y_SIZE     8
                             5826 ; 469  |
                             5827 ; 470  |// Playback Display with hours added.
                             5828 ; 471  |#ifdef LDS514_LCD
                             5829 ; 472  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5830 ; 473  |#endif
                             5831 ; 474  |
                             5832 ; 475  |#ifdef ILI814_LCD
                             5833 ; 476  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5834 ; 477  |#endif
                             5835 ; 478  |
                             5836 ; 479  |#ifdef ML9341_LCD
                             5837 ; 480  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5838 ; 481  |#endif
                             5839 ; 482  |
                             5840 ; 483  |#ifdef SSD1332_LCD
                             5841 ; 484  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5842 ; 485  |#endif
                             5843 ; 486  |
                             5844 ; 487  |#ifdef S6B33B0A_LCD
                             5845 ; 488  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5846 ; 489  |#endif
                             5847 ; 490  |
                             5848 ; 491  |#ifdef SED15XX_LCD
                             5849 ; 492  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5850 ; 493  |#endif
                             5851 ; 494  |
                             5852 ; 495  |#define HR_TRACK_CURR_TIME_Y_POS        TOP_OF_SCREEN+48
                             5853 ; 496  |#define HR_TRACK_CURR_TIME_X_SIZE       28
                             5854 ; 497  |#define HR_TRACK_CURR_TIME_Y_SIZE       8
                             5855 ; 498  |
                             5856 ; 499  |#define HR_TRACK_TOTAL_TIME_X_POS       LEFT_OF_SCREEN+59
                             5857 ; 500  |#define HR_TRACK_TOTAL_TIME_Y_POS       TRACK_CURR_TIME_Y_POS
                             5858 ; 501  |#define HR_TRACK_TOTAL_TIME_X_SIZE      28
                             5859 ; 502  |#define HR_TRACK_TOTAL_TIME_Y_SIZE      8
                             5860 ; 503  |
                             5861 ; 504  |//Clear entire Track Time when song changes.
                             5862 ; 505  |#define CLR_TRACK_TIME_X_POS            LEFT_OF_SCREEN
                             5863 ; 506  |#define CLR_TRACK_TIME_Y_POS            TRACK_CURR_TIME_Y_POS
                             5864 ; 507  |#define CLR_TRACK_TIME_X_SIZE           SCREEN_WIDTH
                             5865 ; 508  |#define CLR_TRACK_TIME_Y_SIZE           8
                             5866 ; 509  |
                             5867 ; 510  |#define HR_TRACK_SLASH_X_SIZE           3
                             5868 ; 511  |#define HR_TRACK_SLASH_X_POS            HR_TRACK_TOTAL_TIME_X_POS-HR_TRACK_SLASH_X_SIZE
                             5869 ; 512  |#define HR_TRACK_SLASH_Y_POS            HR_TRACK_CURR_TIME_Y_POS
                             5870 ; 513  |
                             5871 ; 514  | //DVRWARN
                             5872 ; 515  |#define VOICE_SPACE_WARN_X_POS      LEFT_OF_SCREEN
                             5873 ; 516  |#define VOICE_SPACE_WARN_Y_POS      SONG_TITLE_Y_POS
                             5874 ; 517  |#define VOICE_SPACE_WARN_X_SIZE     93
                             5875 ; 518  |#define VOICE_SPACE_WARN_Y_SIZE     16
                             5876 ; 519  |
                             5877 ; 520  |//Shutdown
                             5878 ; 521  |#define SHUTDOWN_PROGRESS_X_POS     LEFT_OF_SCREEN+24
                             5879 ; 522  |#define SHUTDOWN_PROGRESS_Y_POS     TOP_OF_SCREEN+32
                             5880 ; 523  |#define SHUTDOWN_PROGRESS_X_SIZE    59
                             5881 ; 524  |#define SHUTDOWN_PROGRESS_Y_SIZE    16
                             5882 ; 525  |#define SHUTDOWN_PROGRESS_RESOURCE  RSRC_PDOWN_STATUS_0
                             5883 ; 526  |
                             5884 ; 527  |#define SHUTDOWN_STRING_X_POS       LEFT_OF_SCREEN+10
                             5885 ; 528  |#define SHUTDOWN_STRING_Y_POS       TOP_OF_SCREEN+16
                             5886 ; 529  |#define SHUTDOWN_STRING_X_SIZE      59
                             5887 ; 530  |#define SHUTDOWN_STRING_Y_SIZE      16
                             5888 ; 531  |#define SHUTDOWN_STRING_RESOURCE    RSRC_PDOWN_HOLD_STRING
                             5889 ; 532  |
                             5890 ; 533  |#define DEFRAGMENT_STRING_X_POS       LEFT_OF_SCREEN+0
                             5891 ; 534  |#define DEFRAGMENT_STRING_Y_POS       TOP_OF_SCREEN+16
                             5892 ; 535  |#define DEFRAGMENT_STRING_X_SIZE      59
                             5893 ; 536  |#define DEFRAGMENT_STRING_Y_SIZE      16
                             5894 ; 537  |#define DEFRAGMENT_STRING_RESOURCE    RSRC_DEFRAGMENT_STORE_STRING
                             5895 ; 538  |
                             5896 ; 539  |
                             5897 ; 540  |//Contrast Display
                             5898 ; 541  |#define CONTRAST_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5899 ; 542  |#define CONTRAST_TITLE_Y_POS        TOP_OF_SCREEN+16
                             5900 ; 543  |
                             5901 ; 544  |#define CONTRAST_X_POS              LEFT_OF_SCREEN+8
                             5902 ; 545  |#define CONTRAST_Y_POS              TOP_OF_SCREEN+32
                             5903 ; 546  |#define CONTRAST_X_SIZE             96
                             5904 ; 547  |#define CONTRAST_Y_SIZE             8
                             5905 ; 548  |#define CONTRAST_RESOURCE           RSRC_CONTRAST_LEVEL_0
                             5906 ; 549  |
                             5907 ; 550  |//Backlight Display
                             5908 ; 551  |#define BACKLIGHT_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5909 ; 552  |#define BACKLIGHT_TITLE_Y_POS        TOP_OF_SCREEN+24
                             5910 ; 553  |#define BACKLIGHT_STATE_X_POS        LEFT_OF_SCREEN+0
                             5911 ; 554  |#define BACKLIGHT_STATE_Y_POS        (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             5912 ; 555  |
                             5913 ; 556  |//settings title display
                             5914 ; 557  |#define SETTINGS_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5915 ; 558  |#define SETTINGS_TITLE_Y_POS        TOP_OF_SCREEN+8
                             5916 ; 559  |//jpeg display title display
                             5917 ; 560  |#define JPEG_DISPLAY_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5918 ; 561  |#define JPEG_DISPLAY_TITLE_Y_POS        TOP_OF_SCREEN+8
                             5919 ; 562  |//erase files title display
                             5920 ; 563  |#define ERASE_TITLE_X_POS           LEFT_OF_SCREEN+0
                             5921 ; 564  |#define ERASE_TITLE_Y_POS           TOP_OF_SCREEN+8
                             5922 ; 565  |
                             5923 ; 566  |// Splashscreen
                             5924 ; 567  |#ifdef LDS514_LCD
                             5925 ; 568  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5926 ; 569  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5927 ; 570  |#define SPLASH_SCREEN_X_SIZE        96
                             5928 ; 571  |#define SPLASH_SCREEN_Y_SIZE        64
                             5929 ; 572  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5930 ; 573  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5931 ; 574  |#endif
                             5932 ; 575  |
                             5933 ; 576  |#ifdef ILI814_LCD
                             5934 ; 577  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5935 ; 578  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5936 ; 579  |#define SPLASH_SCREEN_X_SIZE        96
                             5937 ; 580  |#define SPLASH_SCREEN_Y_SIZE        64
                             5938 ; 581  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5939 ; 582  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5940 ; 583  |#endif
                             5941 ; 584  |
                             5942 ; 585  |#ifdef ML9341_LCD
                             5943 ; 586  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5944 ; 587  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5945 ; 588  |#define SPLASH_SCREEN_X_SIZE        96
                             5946 ; 589  |#define SPLASH_SCREEN_Y_SIZE        96
                             5947 ; 590  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5948 ; 591  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5949 ; 592  |#endif
                             5950 ; 593  |
                             5951 ; 594  |#ifdef SSD1332_LCD
                             5952 ; 595  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5953 ; 596  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5954 ; 597  |#define SPLASH_SCREEN_X_SIZE        96
                             5955 ; 598  |#define SPLASH_SCREEN_Y_SIZE        64
                             5956 ; 599  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5957 ; 600  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5958 ; 601  |#endif
                             5959 ; 602  |
                             5960 ; 603  |#ifdef S6B33B0A_LCD
                             5961 ; 604  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5962 ; 605  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN + 16
                             5963 ; 606  |#define SPLASH_SCREEN_X_SIZE        80
                             5964 ; 607  |#define SPLASH_SCREEN_Y_SIZE        48
                             5965 ; 608  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5966 ; 609  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5967 ; 610  |#endif
                             5968 ; 611  |
                             5969 ; 612  |#ifdef SED15XX_LCD
                             5970 ; 613  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5971 ; 614  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN 
                             5972 ; 615  |#define SPLASH_SCREEN_X_SIZE        128
                             5973 ; 616  |#define SPLASH_SCREEN_Y_SIZE        64    
                             5974 ; 617  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5975 ; 618  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5976 ; 619  |#endif
                             5977 ; 620  |
                             5978 ; 621  |// FM tuner
                             5979 ; 622  |#define FM_TUNER_FREQUENCY_X_POS    LEFT_OF_SCREEN+30
                             5980 ; 623  |#define FM_TUNER_FREQUENCY_Y_POS    TOP_OF_SCREEN+24
                             5981 ; 624  |#define FM_TUNER_FREQUENCY_X_SIZE   CHAR_SIZE_X*10
                             5982 ; 625  |#define FM_TUNER_FREQUENCY_Y_SIZE   CHAR_SIZE_Y
                             5983 ; 626  |#define FM_TUNER_FREQUENCY_DOT_X_POS    FM_TUNER_FREQUENCY_X_POS+CHAR_SIZE_X*3
                             5984 ; 627  |#define FM_TUNER_FRAC_FREQUENCY_X_POS    FM_TUNER_FREQUENCY_DOT_X_POS+3
                             5985 ; 628  |
                             5986 ; 629  |#define FM_TUNER_PRESET_X_POS       LEFT_OF_SCREEN+30
                             5987 ; 630  |#define FM_TUNER_PRESET_Y_POS       TOP_OF_SCREEN+34
                             5988 ; 631  |#define FM_TUNER_PRESET_X_SIZE      CHAR_SIZE_X*5
                             5989 ; 632  |#define FM_TUNER_PRESET_Y_SIZE      CHAR_SIZE_Y
                             5990 ; 633  |
                             5991 ; 634  |#define FM_TUNER_PILOT_X_POS       LEFT_OF_SCREEN+30
                             5992 ; 635  |#define FM_TUNER_PILOT_Y_POS       TOP_OF_SCREEN+44
                             5993 ; 636  |
                             5994 ; 637  |// About menu
                             5995 ; 638  |#define ABOUT_TITLE_X_POS           LEFT_OF_SCREEN+0
                             5996 ; 639  |#define ABOUT_TITLE_Y_POS           TOP_OF_SCREEN+LCD_SIZE_ROW
                             5997 ; 640  |// starting row -- use offsets for the rest
                             5998 ; 641  |#define ABOUT_LINE_LABEL_X_POS      LEFT_OF_SCREEN+0
                             5999 ; 642  |#define ABOUT_LINE_LABEL_Y_POS      ABOUT_TITLE_Y_POS+(2*LCD_SIZE_ROW)
                             6000 ; 643  |
                             6001 ; 644  |#ifdef PLAYER_STRESS
                             6002 ; 645  |#define STRESS_TEST_X_POS       LEFT_OF_SCREEN
                             6003 ; 646  |#define STRESS_TEST_Y_POS       TOP_OF_SCREEN+40
                             6004 ; 647  |#define STRESS_TEST_X_SIZE      SCREEN_WIDTH
                             6005 ; 648  |#define STRESS_TEST_Y_SIZE      8
                             6006 ; 649  |#endif
                             6007 ; 650  |
                             6008 ; 651  |
                             6009 ; 652  |// Delete Menu
                             6010 ; 653  |#define WARNING_MSG_LINE1_X         LEFT_OF_SCREEN
                             6011 ; 654  |#define WARNING_MSG_LINE1_Y         (LCD_FIRST_ROW_NUM+1)*LCD_SIZE_ROW
                             6012 ; 655  |#define WARNING_MSG_LINE2_X         LEFT_OF_SCREEN
                             6013 ; 656  |#define WARNING_MSG_LINE2_Y         (LCD_FIRST_ROW_NUM+2)*LCD_SIZE_ROW
                             6014 ; 657  |#define WARNING_MSG_FILE_X          LEFT_OF_SCREEN
                             6015 ; 658  |#define WARNING_MSG_FILE_Y          (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             6016 ; 659  |#define WARNING_MSG_YES_X           LEFT_OF_SCREEN
                             6017 ; 660  |#define WARNING_MSG_YES_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6018 ; 661  |#define DELETE_FAIL_MSG_X           LEFT_OF_SCREEN
                             6019 ; 662  |#define DELETE_FAIL_MSG_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6020 ; 663  |
                             6021 ; 664  |_reentrant void DisplayClear (void);
                             6022 ; 665  |_reentrant void DisplayLowBattery (void);
                             6023 ; 666  |
                             6024 ; 667  |_reentrant int DisplayContrast( int bDisplay, int iIgnored1, void *pPtr);
                             6025 ; 668  |
                             6026 ; 669  |_reentrant int DisplayBacklight( int bDisplay, int iIgnored1, void *pPtr);
                             6027 ; 670  |#ifdef WOW
                             6028 ; 671  |_reentrant int DisplayBar( int bDisplay, int step, void *pPtr);
                             6029 ; 672  |#endif
                             6030 ; 673  |extern _X BOOL g_bSongStringScroll;
                             6031 ; 674  |extern _X INT  g_iSongStringOffset;
                             6032 ; 675  |extern _X INT  g_iSongStringLength;
                             6033 ; 676  |
                             6034 ; 677  |extern _X BOOL g_bArtistStringScroll;
                             6035 ; 678  |extern _X INT  g_iArtistStringOffset;
                             6036 ; 679  |extern _X INT  g_iArtistStringLength;
                             6037 ; 680  |
                             6038 ; 681  |
                             6039 ; 682  |extern _X BOOL g_bAlbumStringScroll;
                             6040 ; 683  |extern _X INT  g_iAlbumStringOffset;
                             6041 ; 684  |extern _X INT  g_iAlbumStringLength;
                             6042 ; 685  |extern int g_iVolume_Control_Mode;
                             6043 ; 686  |extern int g_iAB_Control_Mode;
                             6044 ; 687  |
                             6045 ; 688  |
                             6046 ; 689  |#endif //_DISPLAY_H
                             6047 
                             6049 
                             6050 ; 11   |#include "displaylists.h"
                             6051 
                             6053 
                             6054 ; 1    |#ifndef _DISPLAY_LISTS_H
                             6055 ; 2    |#define _DISPLAY_LISTS_H
                             6056 ; 3    |
                             6057 ; 4    |#include "display.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6058 
                             6060 
                             6061 ; 1    |#ifndef _DISPLAY_H
                             6062 ; 2    |#define _DISPLAY_H
                             6063 ; 3    |
                             6064 ; 4    |//Display bits
                             6065 ; 5    |#define DISPLAY_CLEAR_DISPLAY_BITPOS        0
                             6066 ; 6    |
                             6067 ; 7    |#define DISPLAY_ENCODER_TRACK_TIME_BITPOS   1
                             6068 ; 8    |#define DISPLAY_ENCODER_TRACK_NAME_BITPOS   2
                             6069 ; 9    |#define DISPLAY_RECORD_MODE_BITPOS          3
                             6070 ; 10   |
                             6071 ; 11   |//This bit (DISPLAY_MISC_BITPOS) is set to allow DisplayHints to be non zero, but does not map
                             6072 ; 12   |//to anything in UpdateDisplay();  (meant to be used to indicate that specific
                             6073 ; 13   |//things that are specific for that menu.
                             6074 ; 14   |#define DISPLAY_MISC_BITPOS                 4
                             6075 ; 15   |
                             6076 ; 16   |#define DISPLAY_FMTUNER_FREQUENCY           5
                             6077 ; 17   |#define DISPLAY_FMTUNER_PRESET              6
                             6078 ; 18   |#define DISPLAY_FMTUNER_STRENGTH            7
                             6079 ; 19   |
                             6080 ; 20   |#define DISPLAY_PLAYSTATE_BITPOS             9
                             6081 ; 21   |#define DISPLAY_AB_ICON_BITPOS              10
                             6082 ; 22   |#define DISPLAY_PLAYMODE_BITPOS             11
                             6083 ; 23   |#define DISPLAY_PLAYSET_BITPOS              12
                             6084 ; 24   |
                             6085 ; 25   |//Playback info
                             6086 ; 26   |#define DISPLAY_EQ_BITPOS                   13
                             6087 ; 27   |#define DISPLAY_VOLUME_BITPOS               14
                             6088 ; 28   |
                             6089 ; 29   |//Track Info
                             6090 ; 30   |#define DISPLAY_SONGARTISTALBUM_BITPOS      15
                             6091 ; 31   |#define DISPLAY_SONGTITLE_BITPOS            16
                             6092 ; 32   |#define DISPLAY_CURRENTTRACK_BITPOS         17
                             6093 ; 33   |#define DISPLAY_TRACKTIME_BITPOS            18
                             6094 ; 34   |#define DISPLAY_TOTALTRACKTIME_BITPOS        8
                             6095 ; 35   |#define DISPLAY_BITRATE_BITPOS              19
                             6096 ; 36   |
                             6097 ; 37   |//Device status info
                             6098 ; 38   |#define DISPLAY_LOCK_BITPOS                 20
                             6099 ; 39   |#define DISPLAY_DISK_BITPOS                 21
                             6100 ; 40   |#define DISPLAY_BATTERY_BITPOS              22
                             6101 ; 41   |#define DISPLAY_ALBUMART_BITPOS              23
                             6102 ; 42   |
                             6103 ; 43   |#ifdef PLAYER_STRESS
                             6104 ; 44   |// this may not work since album art uses bit 23 so we may need a new word variable for this player stress test bit below.
                             6105 ; 45   |#define DISPLAY_STRESSTEST_BITPOS            23
                             6106 ; 46   |#endif
                             6107 ; 47   |
                             6108 ; 48   |
                             6109 ; 49   |union DisplayHints
                             6110 ; 50   |{
                             6111 ; 51   |    struct {
                             6112 ; 52   |        int ClearDisplay        :1;//0
                             6113 ; 53   |        int EncoderTrackTime    :1;//1
                             6114 ; 54   |        int EncoderTrackName    :1;//2
                             6115 ; 55   |        int RecordMode          :1;//3
                             6116 ; 56   |        int Misc                :1;//4
                             6117 ; 57   |        int FMTunerFrequency    :1;//5
                             6118 ; 58   |        int FMTunerPreset       :1;//6
                             6119 ; 59   |        int FMTunerStrength     :1;//7
                             6120 ; 60   |        int TotalTrackTime      :1;//8
                             6121 ; 61   |        int PlayState           :1;//9
                             6122 ; 62   |        int ABIcon              :1;//10
                             6123 ; 63   |        int PlayMode            :1;//11
                             6124 ; 64   |        int PlaySet             :1;//12
                             6125 ; 65   |        int EQ                  :1;//13
                             6126 ; 66   |        int Volume              :1;//14
                             6127 ; 67   |        int SongArtistAlbum     :1;//15
                             6128 ; 68   |        int SongTitle           :1;//16
                             6129 ; 69   |        int CurrentTrack        :1;//17
                             6130 ; 70   |        int TrackTime           :1;//18
                             6131 ; 71   |        int Bitrate             :1;//19
                             6132 ; 72   |        int LockIcon            :1;//20
                             6133 ; 73   |        int Disk                :1;//21
                             6134 ; 74   |        int Battery             :1;//22
                             6135 ; 75   |#ifdef PLAYER_STRESS
                             6136 ; 76   |        int StressTest         :1;//23  // this might not work since bit 23 is already taken by album art. 23 is last bit in word.
                             6137 ; 77   |#else
                             6138 ; 78   |        int AlbumArt            :1;//23
                             6139 ; 79   |#endif
                             6140 ; 80   |    } bits;
                             6141 ; 81   |    WORD I;
                             6142 ; 82   |};
                             6143 ; 83   |
                             6144 ; 84   |// setup default display for all menus
                             6145 ; 85   |// can be adjusted in each menus as required.
                             6146 ; 86   |#define COMMON_DISPLAY_ALL  (\ 
                             6147 ; 87   |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             6148 ; 88   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             6149 ; 89   |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6150 ; 90   |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             6151 ; 91   |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             6152 ; 92   |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             6153 ; 93   |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             6154 ; 94   |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             6155 ; 95   |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             6156 ; 96   |                                )
                             6157 ; 97   |
                             6158 ; 98   |#define SPECTROGRAM_MENU_DISPLAY_ALL  (\ 
                             6159 ; 99   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             6160 ; 100  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             6161 ; 101  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             6162 ; 102  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             6163 ; 103  |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             6164 ; 104  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             6165 ; 105  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             6166 ; 106  |                                )
                             6167 ; 107  |
                             6168 ; 108  |//-----------------------------------------------
                             6169 ; 109  |#ifdef JPEG_ALBUM_ART
                             6170 ; 110  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_ALBUMART_BITPOS)
                             6171 ; 111  |#else
                             6172 ; 112  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (0)
                             6173 ; 113  |#endif
                             6174 ; 114  |
                             6175 ; 115  |#ifdef PLAYER_STRESS
                             6176 ; 116  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_STRESSTEST_BITPOS)
                             6177 ; 117  |#else
                             6178 ; 118  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (0)
                             6179 ; 119  |#endif
                             6180 ; 120  |
                             6181 ; 121  |
                             6182 ; 122  |#define MUSIC_MENU_DISPLAY_ALL  (\ 
                             6183 ; 123  |                                (COMMON_DISPLAY_ALL)|\ 
                             6184 ; 124  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             6185 ; 125  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6186 ; 126  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6187 ; 127  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             6188 ; 128  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             6189 ; 129  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             6190 ; 130  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             6191 ; 131  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)\ 
                             6192 ; 132  |                                )
                             6193 ; 133  |
                             6194 ; 134  |#define MUSIC_MENU_DISPLAY_NEW_TRACK (\ 
                             6195 ; 135  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             6196 ; 136  |                                (PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE)|\ 
                             6197 ; 137  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             6198 ; 138  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             6199 ; 139  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             6200 ; 140  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             6201 ; 141  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             6202 ; 142  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             6203 ; 143  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6204 ; 144  |                                (1<<DISPLAY_PLAYSET_BITPOS)\ 
                             6205 ; 145  |                                )
                             6206 ; 146  |//-----------------------------------------------
                             6207 ; 147  |
                             6208 ; 148  |
                             6209 ; 149  |#define MVIDEO_MENU_DISPLAY_ALL ((1<<DISPLAY_CURRENTTRACK_BITPOS)|(1<<DISPLAY_SONGTITLE_BITPOS))
                             6210 ; 150  |
                             6211 ; 151  |
                             6212 ; 152  |#define VOICE_MENU_DISPLAY_ALL  (\ 
                             6213 ; 153  |                                COMMON_DISPLAY_ALL|\ 
                             6214 ; 154  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             6215 ; 155  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6216 ; 156  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6217 ; 157  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             6218 ; 158  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             6219 ; 159  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             6220 ; 160  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             6221 ; 161  |                                (1<<DISPLAY_TRACKTIME_BITPOS)\ 
                             6222 ; 162  |                                )
                             6223 ; 163  |
                             6224 ; 164  |
                             6225 ; 165  |#define RECORDING_DISPLAY_ALL   (\ 
                             6226 ; 166  |                                COMMON_DISPLAY_ALL|\ 
                             6227 ; 167  |                                (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             6228 ; 168  |                                (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                             6229 ; 169  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6230 ; 170  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6231 ; 171  |                                (1<<DISPLAY_RECORD_MODE_BITPOS)\ 
                             6232 ; 172  |                                )
                             6233 ; 173  |
                             6234 ; 174  |#ifdef USE_PLAYLIST3
                             6235 ; 175  |#define BROWSE_MENU_DISPLAY_ALL  (\ 
                             6236 ; 176  |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             6237 ; 177  |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             6238 ; 178  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             6239 ; 179  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             6240 ; 180  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             6241 ; 181  |                                )
                             6242 ; 182  |#else
                             6243 ; 183  |#ifdef USE_PLAYLIST5
                             6244 ; 184  |#if 0
                             6245 ; 185  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             6246 ; 186  |                                 COMMON_DISPLAY_ALL|\ 
                             6247 ; 187  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             6248 ; 188  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6249 ; 189  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6250 ; 190  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             6251 ; 191  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             6252 ; 192  |                                )
                             6253 ; 193  |#else
                             6254 ; 194  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             6255 ; 195  |                                 COMMON_DISPLAY_ALL|\ 
                             6256 ; 196  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             6257 ; 197  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6258 ; 198  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6259 ; 199  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             6260 ; 200  |                                )
                             6261 ; 201  |#endif
                             6262 ; 202  |#endif  // #ifdef USE_PLAYLIST5
                             6263 ; 203  |#endif  // #ifdef USE_PLAYLIST3
                             6264 ; 204  |
                             6265 ; 205  |
                             6266 ; 206  |
                             6267 ; 207  |#define MAIN_MENU_DISPLAY_ALL           (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6268 ; 208  |
                             6269 ; 209  |#define EQ_MENU_DISPLAY_ALL             (\ 
                             6270 ; 210  |                                        COMMON_DISPLAY_ALL|\ 
                             6271 ; 211  |                                        (1<<DISPLAY_EQ_BITPOS)|\ 
                             6272 ; 212  |                                        (1<<DISPLAY_VOLUME_BITPOS)\ 
                             6273 ; 213  |                                        )     // (SDK2.520)
                             6274 ; 214  |
                             6275 ; 215  |#define PM_MENU_DISPLAY_ALL             (COMMON_DISPLAY_ALL|(1<<DISPLAY_PLAYMODE_BITPOS)|(1<<DISPLAY_MISC_BITPOS))
                             6276 ; 216  |#define PWR_MENU_DISPLAY_ALL            (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6277 ; 217  |#define SETTINGS_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6278 ; 218  |#define JPEG_DISPLAY_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6279 ; 219  |#define DELETE_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6280 ; 220  |#define ABOUT_MENU_DISPLAY_ALL          (COMMON_DISPLAY_ALL)
                             6281 ; 221  |#define ERASE_MENU_DISPLAY_ALL          ((1<<DISPLAY_BATTERY_BITPOS)|(1<<DISPLAY_LOCK_BITPOS))
                             6282 ; 222  |
                             6283 ; 223  |#define CONTRAST_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6284 ; 224  |
                             6285 ; 225  |#define TIME_DATE_MENU_DISPLAY_ALL      0
                             6286 ; 226  |#define RECORDTEST_DISPLAY_ALL       (\ 
                             6287 ; 227  |                                        (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             6288 ; 228  |                                                                        (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                             6289 ; 229  |                                                                        (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6290 ; 230  |                                        (1<<DISPLAY_RECORD_MODE_BITPOS)|\ 
                             6291 ; 231  |                                    (1<<DISPLAY_MISC_BITPOS)\ 
                             6292 ; 232  |                                                                        )
                             6293 ; 233  |
                             6294 ; 234  |#define SPLASH_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6295 ; 235  |// used during track update to force total time update
                             6296 ; 236  |#define AUTOUPDATE              FALSE
                             6297 ; 237  |#define FORCEUPDATE             TRUE
                             6298 ; 238  |
                             6299 ; 239  |
                             6300 ; 240  |// based on font used for title/artist display
                             6301 ; 241  |#define DEFAULT_CHAR_WIDTH  5
                             6302 ; 242  |
                             6303 ; 243  |
                             6304 ; 244  |// LCD dimensions
                             6305 ; 245  |#ifdef LDS514_LCD
                             6306 ; 246  |#define   LCD_SIZE_X       96
                             6307 ; 247  |#define   LCD_SIZE_Y       64
                             6308 ; 248  |#endif
                             6309 ; 249  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6310 ; 250  |#ifdef ILI814_LCD
                             6311 ; 251  |#define   LCD_SIZE_X       96
                             6312 ; 252  |#define   LCD_SIZE_Y       64
                             6313 ; 253  |#endif
                             6314 ; 254  |
                             6315 ; 255  |#ifdef ML9341_LCD
                             6316 ; 256  |#define   LCD_SIZE_X       96
                             6317 ; 257  |#define   LCD_SIZE_Y       96
                             6318 ; 258  |#endif
                             6319 ; 259  |
                             6320 ; 260  |#ifdef SSD1332_LCD
                             6321 ; 261  |#define   LCD_SIZE_X       96
                             6322 ; 262  |#define   LCD_SIZE_Y       64
                             6323 ; 263  |#endif
                             6324 ; 264  |
                             6325 ; 265  |#ifdef S6B33B0A_LCD
                             6326 ; 266  |#define   LCD_SIZE_X       128
                             6327 ; 267  |#define   LCD_SIZE_Y       159
                             6328 ; 268  |#endif
                             6329 ; 269  |
                             6330 ; 270  |#ifdef SED15XX_LCD
                             6331 ; 271  |#define LCD_SIZE_X                      128
                             6332 ; 272  |#define LCD_SIZE_Y                      64
                             6333 ; 273  |#endif
                             6334 ; 274  |
                             6335 ; 275  |#define LCD_SIZE_ROW                     8
                             6336 ; 276  |
                             6337 ; 277  |#define TOP_OF_SCREEN           0
                             6338 ; 278  |#define LEFT_OF_SCREEN          0
                             6339 ; 279  |
                             6340 ; 280  |#ifdef LDS514_LCD
                             6341 ; 281  |#define   SCREEN_WIDTH       96
                             6342 ; 282  |#define   SCREEN_HEIGHT       64
                             6343 ; 283  |#endif
                             6344 ; 284  |
                             6345 ; 285  |#ifdef ILI814_LCD
                             6346 ; 286  |#define   SCREEN_WIDTH       96
                             6347 ; 287  |#define   SCREEN_HEIGHT       64
                             6348 ; 288  |#endif
                             6349 ; 289  |
                             6350 ; 290  |#ifdef ML9341_LCD
                             6351 ; 291  |#define   SCREEN_WIDTH       96
                             6352 ; 292  |#define   SCREEN_HEIGHT       96
                             6353 ; 293  |#endif
                             6354 ; 294  |
                             6355 ; 295  |#ifdef SSD1332_LCD
                             6356 ; 296  |#define   SCREEN_WIDTH       96
                             6357 ; 297  |#define   SCREEN_HEIGHT       64
                             6358 ; 298  |#endif
                             6359 ; 299  |
                             6360 ; 300  |#ifdef S6B33B0A_LCD
                             6361 ; 301  |#define   SCREEN_WIDTH       128
                             6362 ; 302  |#define   SCREEN_HEIGHT       159
                             6363 ; 303  |#endif
                             6364 ; 304  |
                             6365 ; 305  |#ifdef SED15XX_LCD
                             6366 ; 306  |#define SCREEN_WIDTH            128
                             6367 ; 307  |#define SCREEN_HEIGHT           64
                             6368 ; 308  |#endif
                             6369 ; 309  |
                             6370 ; 310  |#define CHAR_SIZE_X             6
                             6371 ; 311  |#define CHAR_SIZE_Y             8
                             6372 ; 312  |
                             6373 ; 313  |// Physical rows are numbered from 0 to LCD_SIZE_Y/LCD_SIZE_ROW
                             6374 ; 314  |#define LCD_FIRST_ROW_NUM                1
                             6375 ; 315  |#define LCD_FIRST_ROW_POS_Y=LCD_FIRST_ROW_NUM*LCD_SIZE_ROW  // skipping the first row
                             6376 ; 316  |
                             6377 ; 317  |// Top row in order from left to right
                             6378 ; 318  |#define PLAY_STATE_ICON_X_POS   LEFT_OF_SCREEN+0
                             6379 ; 319  |#define PLAY_STATE_ICON_Y_POS   TOP_OF_SCREEN+0
                             6380 ; 320  |#define PLAY_STATE_ICON_X_SIZE  12
                             6381 ; 321  |#define PLAY_STATE_ICON_Y_SIZE  8
                             6382 ; 322  |
                             6383 ; 323  |#define REPEAT_ICON_X_POS       LEFT_OF_SCREEN+13
                             6384 ; 324  |#define REPEAT_ICON_Y_POS       TOP_OF_SCREEN+0
                             6385 ; 325  |#define REPEAT_ICON_X_SIZE      12
                             6386 ; 326  |#define REPEAT_ICON_Y_SIZE      8
                             6387 ; 327  |
                             6388 ; 328  |#define SHUFFLE_ICON_X_POS      LEFT_OF_SCREEN+25
                             6389 ; 329  |#define SHUFFLE_ICON_Y_POS      TOP_OF_SCREEN+0
                             6390 ; 330  |#define SHUFFLE_ICON_X_SIZE     5     // includes white space on left side of .bmp
                             6391 ; 331  |#define SHUFFLE_ICON_Y_SIZE     8
                             6392 ; 332  |
                             6393 ; 333  |#define AB_ICON_X_POS           LEFT_OF_SCREEN+31
                             6394 ; 334  |#define AB_ICON_Y_POS           TOP_OF_SCREEN+0
                             6395 ; 335  |#define AB_ICON_X_SIZE          12
                             6396 ; 336  |#define AB_ICON_Y_SIZE          8
                             6397 ; 337  |
                             6398 ; 338  |#ifdef  AUDIBLE
                             6399 ; 339  |#define SECNAV_ICON_X_POS       LEFT_OF_SCREEN+31
                             6400 ; 340  |#define SECNAV_ICON_Y_POS       TOP_OF_SCREEN+0
                             6401 ; 341  |#define SECNAV_ICON_X_SIZE      12
                             6402 ; 342  |#define SECNAV_ICON_Y_SIZE      8
                             6403 ; 343  |#endif
                             6404 ; 344  |
                             6405 ; 345  |#define EQ_ICON_X_POS           LEFT_OF_SCREEN+44
                             6406 ; 346  |#define EQ_ICON_Y_POS           TOP_OF_SCREEN+0
                             6407 ; 347  |#define EQ_ICON_X_SIZE          22
                             6408 ; 348  |#define EQ_ICON_Y_SIZE          8
                             6409 ; 349  |
                             6410 ; 350  |#ifdef WOW
                             6411 ; 351  |#define WOW_X_POS               EQ_ICON_X_POS
                             6412 ; 352  |#define WOW_Y_POS               EQ_ICON_Y_POS
                             6413 ; 353  |#endif
                             6414 ; 354  |
                             6415 ; 355  |
                             6416 ; 356  |// Media icon
                             6417 ; 357  |#define DISK_X_POS              LEFT_OF_SCREEN+66
                             6418 ; 358  |#define DISK_Y_POS              TOP_OF_SCREEN
                             6419 ; 359  |#define DISK_X_SIZE             8
                             6420 ; 360  |#define DISK_Y_SIZE             8
                             6421 ; 361  |
                             6422 ; 362  |// Hold icon
                             6423 ; 363  |#define LOCK_ICON_X_POS         LEFT_OF_SCREEN+73
                             6424 ; 364  |#define LOCK_ICON_Y_POS         TOP_OF_SCREEN
                             6425 ; 365  |#define LOCK_ICON_X_SIZE        8
                             6426 ; 366  |#define LOCK_ICON_Y_SIZE        8
                             6427 ; 367  |
                             6428 ; 368  |#define BATTERY_ICON_X_POS      LEFT_OF_SCREEN+110
                             6429 ; 369  |#define BATTERY_ICON_Y_POS      TOP_OF_SCREEN+0
                             6430 ; 370  |#define BATTERY_ICON_X_SIZE     16
                             6431 ; 371  |#define BATTERY_ICON_Y_SIZE     8
                             6432 ; 372  |#define BATTERY_RESOURCE        RSRC_BATTERY_00
                             6433 ; 373  |
                             6434 ; 374  |// Second row from left to right
                             6435 ; 375  |#define VOLUME_ICON_X_POS       LEFT_OF_SCREEN+0
                             6436 ; 376  |#define VOLUME_ICON_Y_POS       TOP_OF_SCREEN+8
                             6437 ; 377  |#define VOLUME_ICON_X_SIZE      48
                             6438 ; 378  |#define VOLUME_ICON_Y_SIZE      8
                             6439 ; 379  |#define VOLUME_RESOURCE         RSRC_ICON_VOL_00
                             6440 ; 380  |#define VOLUME_NUM_ICONS        27
                             6441 ; 381  |
                             6442 ; 382  |#define PLAYSET_X_POS           SCREEN_WIDTH-8
                             6443 ; 383  |#define PLAYSET_Y_POS           TOP_OF_SCREEN+8
                             6444 ; 384  |
                             6445 ; 385  |//Lyrics Position
                             6446 ; 386  |#define LYRICS_DISPLAY_X_POS    LEFT_OF_SCREEN
                             6447 ; 387  |#define LYRICS_DISPLAY_Y_POS    TOP_OF_SCREEN+16
                             6448 ; 388  |#define LYRICS_DISPLAY_HEIGHT           10
                             6449 ; 389  |
                             6450 ; 390  |// Music menu
                             6451 ; 391  |#define SONG_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6452 ; 392  |#define SONG_TITLE_Y_POS        TOP_OF_SCREEN+16
                             6453 ; 393  |#define SONG_TITLE_X_SIZE       SCREEN_WIDTH
                             6454 ; 394  |#define SONG_TITLE_Y_SIZE       10
                             6455 ; 395  |
                             6456 ; 396  |#define SONG_ARTIST_X_POS       LEFT_OF_SCREEN
                             6457 ; 397  |#define SONG_ARTIST_Y_POS       TOP_OF_SCREEN+26
                             6458 ; 398  |#define SONG_ARTIST_X_SIZE      SCREEN_WIDTH
                             6459 ; 399  |#define SONG_ARTIST_Y_SIZE      10
                             6460 ; 400  |
                             6461 ; 401  |#define SONG_ALBUM_X_POS       LEFT_OF_SCREEN
                             6462 ; 402  |#define SONG_ALBUM_Y_POS       TOP_OF_SCREEN+36
                             6463 ; 403  |#define SONG_ALBUM_X_SIZE      SCREEN_WIDTH
                             6464 ; 404  |#define SONG_ALBUM_Y_SIZE      10
                             6465 ; 405  |
                             6466 ; 406  |#ifdef USE_PLAYLIST5
                             6467 ; 407  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+28
                             6468 ; 408  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             6469 ; 409  |#define TRACK_NUMBER_X_SIZE     6*4
                             6470 ; 410  |#define TRACK_NUMBER_Y_SIZE     8
                             6471 ; 411  |
                             6472 ; 412  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             6473 ; 413  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             6474 ; 414  |#define TRACK_COUNT_X_SIZE      6*4
                             6475 ; 415  |#define TRACK_COUNT_Y_SIZE      8
                             6476 ; 416  |
                             6477 ; 417  |#define TRACK_DIVIDE_X TRACK_NUMBER_X_POS+TRACK_COUNT_X_SIZE + 2
                             6478 ; 418  |#else
                             6479 ; 419  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+34
                             6480 ; 420  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             6481 ; 421  |#define TRACK_NUMBER_X_SIZE     6*3
                             6482 ; 422  |#define TRACK_NUMBER_Y_SIZE     8
                             6483 ; 423  |
                             6484 ; 424  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             6485 ; 425  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             6486 ; 426  |#define TRACK_COUNT_X_SIZE      6*3
                             6487 ; 427  |#define TRACK_COUNT_Y_SIZE      8
                             6488 ; 428  |
                             6489 ; 429  |#define TRACK_DIVIDE_X  TRACK_NUMBER_X_POS+24
                             6490 ; 430  |#endif
                             6491 ; 431  |
                             6492 ; 432  |
                             6493 ; 433  |#define TRACK_CURR_TIME_X_POS       LEFT_OF_SCREEN+28
                             6494 ; 434  |#define TRACK_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             6495 ; 435  |#define TRACK_CURR_TIME_X_SIZE      25
                             6496 ; 436  |#define TRACK_CURR_TIME_Y_SIZE      8
                             6497 ; 437  |
                             6498 ; 438  |#define TRACK_SLASH_X_SIZE          5
                             6499 ; 439  |#define TRACK_SLASH_X_POS           TRACK_TOTAL_TIME_X_POS-TRACK_SLASH_X_SIZE
                             6500 ; 440  |#define TRACK_SLASH_Y_POS           TRACK_CURR_TIME_Y_POS
                             6501 ; 441  |
                             6502 ; 442  |#define TRACK_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+60
                             6503 ; 443  |#define TRACK_TOTAL_TIME_Y_POS      TRACK_CURR_TIME_Y_POS
                             6504 ; 444  |#define TRACK_TOTAL_TIME_X_SIZE     28
                             6505 ; 445  |#define TRACK_TOTAL_TIME_Y_SIZE     8
                             6506 ; 446  |
                             6507 ; 447  |#define VBR_FLAG_X_POS      LEFT_OF_SCREEN+80
                             6508 ; 448  |#define VBR_FLAG_Y_POS      8
                             6509 ; 449  |#define VBR_FLAG_X_SIZE     20
                             6510 ; 450  |#define VBR_FLAG_Y_SIZE     8
                             6511 ; 451  |#ifdef JPEG_ALBUM_ART
                             6512 ; 452  |// Album art display parameters:
                             6513 ; 453  |#define ALBUM_ART_X_POS         TOP_OF_SCREEN
                             6514 ; 454  |#define ALBUM_ART_Y_POS         80
                             6515 ; 455  |#define ALBUM_ART_X_SIZE        SCREEN_WIDTH
                             6516 ; 456  |#define ALBUM_ART_Y_SIZE        (SCREEN_HEIGHT-ALBUM_ART_Y_POS)
                             6517 ; 457  |#endif
                             6518 ; 458  |
                             6519 ; 459  |// Recording Display
                             6520 ; 460  |#define REC_CURR_TIME_X_POS       LEFT_OF_SCREEN
                             6521 ; 461  |#define REC_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             6522 ; 462  |#define REC_CURR_TIME_X_SIZE      12
                             6523 ; 463  |#define REC_CURR_TIME_Y_SIZE      8
                             6524 ; 464  |
                             6525 ; 465  |#define REC_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+45
                             6526 ; 466  |#define REC_TOTAL_TIME_Y_POS      TOP_OF_SCREEN+48
                             6527 ; 467  |#define REC_TOTAL_TIME_X_SIZE     28
                             6528 ; 468  |#define REC_TOTAL_TIME_Y_SIZE     8
                             6529 ; 469  |
                             6530 ; 470  |// Playback Display with hours added.
                             6531 ; 471  |#ifdef LDS514_LCD
                             6532 ; 472  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6533 ; 473  |#endif
                             6534 ; 474  |
                             6535 ; 475  |#ifdef ILI814_LCD
                             6536 ; 476  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6537 ; 477  |#endif
                             6538 ; 478  |
                             6539 ; 479  |#ifdef ML9341_LCD
                             6540 ; 480  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6541 ; 481  |#endif
                             6542 ; 482  |
                             6543 ; 483  |#ifdef SSD1332_LCD
                             6544 ; 484  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6545 ; 485  |#endif
                             6546 ; 486  |
                             6547 ; 487  |#ifdef S6B33B0A_LCD
                             6548 ; 488  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6549 ; 489  |#endif
                             6550 ; 490  |
                             6551 ; 491  |#ifdef SED15XX_LCD
                             6552 ; 492  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6553 ; 493  |#endif
                             6554 ; 494  |
                             6555 ; 495  |#define HR_TRACK_CURR_TIME_Y_POS        TOP_OF_SCREEN+48
                             6556 ; 496  |#define HR_TRACK_CURR_TIME_X_SIZE       28
                             6557 ; 497  |#define HR_TRACK_CURR_TIME_Y_SIZE       8
                             6558 ; 498  |
                             6559 ; 499  |#define HR_TRACK_TOTAL_TIME_X_POS       LEFT_OF_SCREEN+59
                             6560 ; 500  |#define HR_TRACK_TOTAL_TIME_Y_POS       TRACK_CURR_TIME_Y_POS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6561 ; 501  |#define HR_TRACK_TOTAL_TIME_X_SIZE      28
                             6562 ; 502  |#define HR_TRACK_TOTAL_TIME_Y_SIZE      8
                             6563 ; 503  |
                             6564 ; 504  |//Clear entire Track Time when song changes.
                             6565 ; 505  |#define CLR_TRACK_TIME_X_POS            LEFT_OF_SCREEN
                             6566 ; 506  |#define CLR_TRACK_TIME_Y_POS            TRACK_CURR_TIME_Y_POS
                             6567 ; 507  |#define CLR_TRACK_TIME_X_SIZE           SCREEN_WIDTH
                             6568 ; 508  |#define CLR_TRACK_TIME_Y_SIZE           8
                             6569 ; 509  |
                             6570 ; 510  |#define HR_TRACK_SLASH_X_SIZE           3
                             6571 ; 511  |#define HR_TRACK_SLASH_X_POS            HR_TRACK_TOTAL_TIME_X_POS-HR_TRACK_SLASH_X_SIZE
                             6572 ; 512  |#define HR_TRACK_SLASH_Y_POS            HR_TRACK_CURR_TIME_Y_POS
                             6573 ; 513  |
                             6574 ; 514  | //DVRWARN
                             6575 ; 515  |#define VOICE_SPACE_WARN_X_POS      LEFT_OF_SCREEN
                             6576 ; 516  |#define VOICE_SPACE_WARN_Y_POS      SONG_TITLE_Y_POS
                             6577 ; 517  |#define VOICE_SPACE_WARN_X_SIZE     93
                             6578 ; 518  |#define VOICE_SPACE_WARN_Y_SIZE     16
                             6579 ; 519  |
                             6580 ; 520  |//Shutdown
                             6581 ; 521  |#define SHUTDOWN_PROGRESS_X_POS     LEFT_OF_SCREEN+24
                             6582 ; 522  |#define SHUTDOWN_PROGRESS_Y_POS     TOP_OF_SCREEN+32
                             6583 ; 523  |#define SHUTDOWN_PROGRESS_X_SIZE    59
                             6584 ; 524  |#define SHUTDOWN_PROGRESS_Y_SIZE    16
                             6585 ; 525  |#define SHUTDOWN_PROGRESS_RESOURCE  RSRC_PDOWN_STATUS_0
                             6586 ; 526  |
                             6587 ; 527  |#define SHUTDOWN_STRING_X_POS       LEFT_OF_SCREEN+10
                             6588 ; 528  |#define SHUTDOWN_STRING_Y_POS       TOP_OF_SCREEN+16
                             6589 ; 529  |#define SHUTDOWN_STRING_X_SIZE      59
                             6590 ; 530  |#define SHUTDOWN_STRING_Y_SIZE      16
                             6591 ; 531  |#define SHUTDOWN_STRING_RESOURCE    RSRC_PDOWN_HOLD_STRING
                             6592 ; 532  |
                             6593 ; 533  |#define DEFRAGMENT_STRING_X_POS       LEFT_OF_SCREEN+0
                             6594 ; 534  |#define DEFRAGMENT_STRING_Y_POS       TOP_OF_SCREEN+16
                             6595 ; 535  |#define DEFRAGMENT_STRING_X_SIZE      59
                             6596 ; 536  |#define DEFRAGMENT_STRING_Y_SIZE      16
                             6597 ; 537  |#define DEFRAGMENT_STRING_RESOURCE    RSRC_DEFRAGMENT_STORE_STRING
                             6598 ; 538  |
                             6599 ; 539  |
                             6600 ; 540  |//Contrast Display
                             6601 ; 541  |#define CONTRAST_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6602 ; 542  |#define CONTRAST_TITLE_Y_POS        TOP_OF_SCREEN+16
                             6603 ; 543  |
                             6604 ; 544  |#define CONTRAST_X_POS              LEFT_OF_SCREEN+8
                             6605 ; 545  |#define CONTRAST_Y_POS              TOP_OF_SCREEN+32
                             6606 ; 546  |#define CONTRAST_X_SIZE             96
                             6607 ; 547  |#define CONTRAST_Y_SIZE             8
                             6608 ; 548  |#define CONTRAST_RESOURCE           RSRC_CONTRAST_LEVEL_0
                             6609 ; 549  |
                             6610 ; 550  |//Backlight Display
                             6611 ; 551  |#define BACKLIGHT_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6612 ; 552  |#define BACKLIGHT_TITLE_Y_POS        TOP_OF_SCREEN+24
                             6613 ; 553  |#define BACKLIGHT_STATE_X_POS        LEFT_OF_SCREEN+0
                             6614 ; 554  |#define BACKLIGHT_STATE_Y_POS        (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             6615 ; 555  |
                             6616 ; 556  |//settings title display
                             6617 ; 557  |#define SETTINGS_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6618 ; 558  |#define SETTINGS_TITLE_Y_POS        TOP_OF_SCREEN+8
                             6619 ; 559  |//jpeg display title display
                             6620 ; 560  |#define JPEG_DISPLAY_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6621 ; 561  |#define JPEG_DISPLAY_TITLE_Y_POS        TOP_OF_SCREEN+8
                             6622 ; 562  |//erase files title display
                             6623 ; 563  |#define ERASE_TITLE_X_POS           LEFT_OF_SCREEN+0
                             6624 ; 564  |#define ERASE_TITLE_Y_POS           TOP_OF_SCREEN+8
                             6625 ; 565  |
                             6626 ; 566  |// Splashscreen
                             6627 ; 567  |#ifdef LDS514_LCD
                             6628 ; 568  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6629 ; 569  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             6630 ; 570  |#define SPLASH_SCREEN_X_SIZE        96
                             6631 ; 571  |#define SPLASH_SCREEN_Y_SIZE        64
                             6632 ; 572  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6633 ; 573  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6634 ; 574  |#endif
                             6635 ; 575  |
                             6636 ; 576  |#ifdef ILI814_LCD
                             6637 ; 577  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6638 ; 578  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             6639 ; 579  |#define SPLASH_SCREEN_X_SIZE        96
                             6640 ; 580  |#define SPLASH_SCREEN_Y_SIZE        64
                             6641 ; 581  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6642 ; 582  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6643 ; 583  |#endif
                             6644 ; 584  |
                             6645 ; 585  |#ifdef ML9341_LCD
                             6646 ; 586  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6647 ; 587  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             6648 ; 588  |#define SPLASH_SCREEN_X_SIZE        96
                             6649 ; 589  |#define SPLASH_SCREEN_Y_SIZE        96
                             6650 ; 590  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6651 ; 591  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6652 ; 592  |#endif
                             6653 ; 593  |
                             6654 ; 594  |#ifdef SSD1332_LCD
                             6655 ; 595  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6656 ; 596  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             6657 ; 597  |#define SPLASH_SCREEN_X_SIZE        96
                             6658 ; 598  |#define SPLASH_SCREEN_Y_SIZE        64
                             6659 ; 599  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6660 ; 600  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6661 ; 601  |#endif
                             6662 ; 602  |
                             6663 ; 603  |#ifdef S6B33B0A_LCD
                             6664 ; 604  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6665 ; 605  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN + 16
                             6666 ; 606  |#define SPLASH_SCREEN_X_SIZE        80
                             6667 ; 607  |#define SPLASH_SCREEN_Y_SIZE        48
                             6668 ; 608  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6669 ; 609  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6670 ; 610  |#endif
                             6671 ; 611  |
                             6672 ; 612  |#ifdef SED15XX_LCD
                             6673 ; 613  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6674 ; 614  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN 
                             6675 ; 615  |#define SPLASH_SCREEN_X_SIZE        128
                             6676 ; 616  |#define SPLASH_SCREEN_Y_SIZE        64    
                             6677 ; 617  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6678 ; 618  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6679 ; 619  |#endif
                             6680 ; 620  |
                             6681 ; 621  |// FM tuner
                             6682 ; 622  |#define FM_TUNER_FREQUENCY_X_POS    LEFT_OF_SCREEN+30
                             6683 ; 623  |#define FM_TUNER_FREQUENCY_Y_POS    TOP_OF_SCREEN+24
                             6684 ; 624  |#define FM_TUNER_FREQUENCY_X_SIZE   CHAR_SIZE_X*10
                             6685 ; 625  |#define FM_TUNER_FREQUENCY_Y_SIZE   CHAR_SIZE_Y
                             6686 ; 626  |#define FM_TUNER_FREQUENCY_DOT_X_POS    FM_TUNER_FREQUENCY_X_POS+CHAR_SIZE_X*3
                             6687 ; 627  |#define FM_TUNER_FRAC_FREQUENCY_X_POS    FM_TUNER_FREQUENCY_DOT_X_POS+3
                             6688 ; 628  |
                             6689 ; 629  |#define FM_TUNER_PRESET_X_POS       LEFT_OF_SCREEN+30
                             6690 ; 630  |#define FM_TUNER_PRESET_Y_POS       TOP_OF_SCREEN+34
                             6691 ; 631  |#define FM_TUNER_PRESET_X_SIZE      CHAR_SIZE_X*5
                             6692 ; 632  |#define FM_TUNER_PRESET_Y_SIZE      CHAR_SIZE_Y
                             6693 ; 633  |
                             6694 ; 634  |#define FM_TUNER_PILOT_X_POS       LEFT_OF_SCREEN+30
                             6695 ; 635  |#define FM_TUNER_PILOT_Y_POS       TOP_OF_SCREEN+44
                             6696 ; 636  |
                             6697 ; 637  |// About menu
                             6698 ; 638  |#define ABOUT_TITLE_X_POS           LEFT_OF_SCREEN+0
                             6699 ; 639  |#define ABOUT_TITLE_Y_POS           TOP_OF_SCREEN+LCD_SIZE_ROW
                             6700 ; 640  |// starting row -- use offsets for the rest
                             6701 ; 641  |#define ABOUT_LINE_LABEL_X_POS      LEFT_OF_SCREEN+0
                             6702 ; 642  |#define ABOUT_LINE_LABEL_Y_POS      ABOUT_TITLE_Y_POS+(2*LCD_SIZE_ROW)
                             6703 ; 643  |
                             6704 ; 644  |#ifdef PLAYER_STRESS
                             6705 ; 645  |#define STRESS_TEST_X_POS       LEFT_OF_SCREEN
                             6706 ; 646  |#define STRESS_TEST_Y_POS       TOP_OF_SCREEN+40
                             6707 ; 647  |#define STRESS_TEST_X_SIZE      SCREEN_WIDTH
                             6708 ; 648  |#define STRESS_TEST_Y_SIZE      8
                             6709 ; 649  |#endif
                             6710 ; 650  |
                             6711 ; 651  |
                             6712 ; 652  |// Delete Menu
                             6713 ; 653  |#define WARNING_MSG_LINE1_X         LEFT_OF_SCREEN
                             6714 ; 654  |#define WARNING_MSG_LINE1_Y         (LCD_FIRST_ROW_NUM+1)*LCD_SIZE_ROW
                             6715 ; 655  |#define WARNING_MSG_LINE2_X         LEFT_OF_SCREEN
                             6716 ; 656  |#define WARNING_MSG_LINE2_Y         (LCD_FIRST_ROW_NUM+2)*LCD_SIZE_ROW
                             6717 ; 657  |#define WARNING_MSG_FILE_X          LEFT_OF_SCREEN
                             6718 ; 658  |#define WARNING_MSG_FILE_Y          (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             6719 ; 659  |#define WARNING_MSG_YES_X           LEFT_OF_SCREEN
                             6720 ; 660  |#define WARNING_MSG_YES_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6721 ; 661  |#define DELETE_FAIL_MSG_X           LEFT_OF_SCREEN
                             6722 ; 662  |#define DELETE_FAIL_MSG_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6723 ; 663  |
                             6724 ; 664  |_reentrant void DisplayClear (void);
                             6725 ; 665  |_reentrant void DisplayLowBattery (void);
                             6726 ; 666  |
                             6727 ; 667  |_reentrant int DisplayContrast( int bDisplay, int iIgnored1, void *pPtr);
                             6728 ; 668  |
                             6729 ; 669  |_reentrant int DisplayBacklight( int bDisplay, int iIgnored1, void *pPtr);
                             6730 ; 670  |#ifdef WOW
                             6731 ; 671  |_reentrant int DisplayBar( int bDisplay, int step, void *pPtr);
                             6732 ; 672  |#endif
                             6733 ; 673  |extern _X BOOL g_bSongStringScroll;
                             6734 ; 674  |extern _X INT  g_iSongStringOffset;
                             6735 ; 675  |extern _X INT  g_iSongStringLength;
                             6736 ; 676  |
                             6737 ; 677  |extern _X BOOL g_bArtistStringScroll;
                             6738 ; 678  |extern _X INT  g_iArtistStringOffset;
                             6739 ; 679  |extern _X INT  g_iArtistStringLength;
                             6740 ; 680  |
                             6741 ; 681  |
                             6742 ; 682  |extern _X BOOL g_bAlbumStringScroll;
                             6743 ; 683  |extern _X INT  g_iAlbumStringOffset;
                             6744 ; 684  |extern _X INT  g_iAlbumStringLength;
                             6745 ; 685  |extern int g_iVolume_Control_Mode;
                             6746 ; 686  |extern int g_iAB_Control_Mode;
                             6747 ; 687  |
                             6748 ; 688  |
                             6749 ; 689  |#endif //_DISPLAY_H
                             6750 
                             6752 
                             6753 ; 5    |
                             6754 ; 6    |//Display lists is very LCD centric
                             6755 ; 7    |
                             6756 ; 8    |
                             6757 ; 9    |//Each menu item contains which page it belongs on, the resource required to display this, and the
                             6758 ; 10   |//X and Y position.  All Items on the same page as the selected item will be displayed using the
                             6759 ; 11   |//coordinates listed below.
                             6760 ; 12   |struct MenuItem
                             6761 ; 13   |{
                             6762 ; 14   |    int m_iPage;
                             6763 ; 15   |    int m_iResource;
                             6764 ; 16   |    int m_ixPos;
                             6765 ; 17   |    int m_iyPos;
                             6766 ; 18   |};
                             6767 ; 19   |
                             6768 ; 20   |//The PagedListStructure contains the message used to display items in the list, 
                             6769 ; 21   |//the message used to display the selected item in the list, the number of items
                             6770 ; 22   |//in the list, and a pointer to an array of these items.
                             6771 ; 23   |struct PagedListStructure
                             6772 ; 24   |{
                             6773 ; 25   |    int m_iNormalDisplayMsg;
                             6774 ; 26   |    int m_iSelectedDisplayMsg;
                             6775 ; 27   |    int m_iItems;
                             6776 ; 28   |    struct MenuItem *m_pItems;
                             6777 ; 29   |};
                             6778 ; 30   |
                             6779 ; 31   |_reentrant int DisplayPagedList(int iSelectedItem, int iTitle, void*ListStructure);
                             6780 ; 32   |
                             6781 ; 33   |// iTitle values
                             6782 ; 34   |#define BITMAP_SETTINGS_TITLE_NUM 1 //sdk2.1 for displaying title bitmap SETTINGS. 
                             6783 ; 35   |#define BITMAP_ERASE_TITLE_NUM    2 //sdk2.1 for displaying title bitmap ERASE. 
                             6784 ; 36   |#define BITMAP_TEST_TITLE_NUM    3 
                             6785 ; 37   |#define BITMAP_RECORD_SETTINGS_TITLE_NUM 4
                             6786 ; 38   |
                             6787 ; 39   |#ifdef JPEG_APP
                             6788 ; 40   |#define BITMAP_JPEG_DISPLAY_TITLE_NUM 5 //sdk2.1 for displaying title bitmap JPEG DISPLAY. 
                             6789 ; 41   |#endif
                             6790 ; 42   |
                             6791 ; 43   |#endif
                             6792 
                             6794 
                             6795 ; 12   |#include "eqmenu.h"
                             6796 
                             6798 
                             6799 ; 1    |#ifndef _EQ_H
                             6800 ; 2    |#define _EQ_H
                             6801 ; 3    |
                             6802 ; 4    |#include "types.h"
                             6803 
                             6805 
                             6806 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6807 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6808 ; 3    |//
                             6809 ; 4    |// Filename: types.h
                             6810 ; 5    |// Description: Standard data types
                             6811 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6812 ; 7    |
                             6813 ; 8    |#ifndef _TYPES_H
                             6814 ; 9    |#define _TYPES_H
                             6815 ; 10   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6816 ; 11   |// TODO:  move this outta here!
                             6817 ; 12   |#if !defined(NOERROR)
                             6818 ; 13   |#define NOERROR 0
                             6819 ; 14   |#define SUCCESS 0
                             6820 ; 15   |#endif 
                             6821 ; 16   |#if !defined(SUCCESS)
                             6822 ; 17   |#define SUCCESS  0
                             6823 ; 18   |#endif
                             6824 ; 19   |#if !defined(ERROR)
                             6825 ; 20   |#define ERROR   -1
                             6826 ; 21   |#endif
                             6827 ; 22   |#if !defined(FALSE)
                             6828 ; 23   |#define FALSE 0
                             6829 ; 24   |#endif
                             6830 ; 25   |#if !defined(TRUE)
                             6831 ; 26   |#define TRUE  1
                             6832 ; 27   |#endif
                             6833 ; 28   |
                             6834 ; 29   |#if !defined(NULL)
                             6835 ; 30   |#define NULL 0
                             6836 ; 31   |#endif
                             6837 ; 32   |
                             6838 ; 33   |#define MAX_INT     0x7FFFFF
                             6839 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6840 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6841 ; 36   |#define MAX_ULONG   (-1) 
                             6842 ; 37   |
                             6843 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6844 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6845 ; 40   |
                             6846 ; 41   |
                             6847 ; 42   |#define BYTE    unsigned char       // btVarName
                             6848 ; 43   |#define CHAR    signed char         // cVarName
                             6849 ; 44   |#define USHORT  unsigned short      // usVarName
                             6850 ; 45   |#define SHORT   unsigned short      // sVarName
                             6851 ; 46   |#define WORD    unsigned int        // wVarName
                             6852 ; 47   |#define INT     signed int          // iVarName
                             6853 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6854 ; 49   |#define LONG    signed long         // lVarName
                             6855 ; 50   |#define BOOL    unsigned int        // bVarName
                             6856 ; 51   |#define FRACT   _fract              // frVarName
                             6857 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6858 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6859 ; 54   |#define FLOAT   float               // fVarName
                             6860 ; 55   |#define DBL     double              // dVarName
                             6861 ; 56   |#define ENUM    enum                // eVarName
                             6862 ; 57   |#define CMX     _complex            // cmxVarName
                             6863 ; 58   |typedef WORD UCS3;                   // 
                             6864 ; 59   |
                             6865 ; 60   |#define UINT16  unsigned short
                             6866 ; 61   |#define UINT8   unsigned char   
                             6867 ; 62   |#define UINT32  unsigned long
                             6868 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6869 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6870 ; 65   |#define WCHAR   UINT16
                             6871 ; 66   |
                             6872 ; 67   |//UINT128 is 16 bytes or 6 words
                             6873 ; 68   |typedef struct UINT128_3500 {   
                             6874 ; 69   |    int val[6];     
                             6875 ; 70   |} UINT128_3500;
                             6876 ; 71   |
                             6877 ; 72   |#define UINT128   UINT128_3500
                             6878 ; 73   |
                             6879 ; 74   |// Little endian word packed byte strings:   
                             6880 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6881 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6882 ; 77   |// Little endian word packed byte strings:   
                             6883 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6884 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6885 ; 80   |
                             6886 ; 81   |// Declare Memory Spaces To Use When Coding
                             6887 ; 82   |// A. Sector Buffers
                             6888 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6889 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6890 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6891 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6892 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6893 ; 88   |// B. Media DDI Memory
                             6894 ; 89   |#define MEDIA_DDI_MEM _Y
                             6895 ; 90   |
                             6896 ; 91   |
                             6897 ; 92   |
                             6898 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6899 ; 94   |// Examples of circular pointers:
                             6900 ; 95   |//    INT CIRC cpiVarName
                             6901 ; 96   |//    DWORD CIRC cpdwVarName
                             6902 ; 97   |
                             6903 ; 98   |#define RETCODE INT                 // rcVarName
                             6904 ; 99   |
                             6905 ; 100  |// generic bitfield structure
                             6906 ; 101  |struct Bitfield {
                             6907 ; 102  |    unsigned int B0  :1;
                             6908 ; 103  |    unsigned int B1  :1;
                             6909 ; 104  |    unsigned int B2  :1;
                             6910 ; 105  |    unsigned int B3  :1;
                             6911 ; 106  |    unsigned int B4  :1;
                             6912 ; 107  |    unsigned int B5  :1;
                             6913 ; 108  |    unsigned int B6  :1;
                             6914 ; 109  |    unsigned int B7  :1;
                             6915 ; 110  |    unsigned int B8  :1;
                             6916 ; 111  |    unsigned int B9  :1;
                             6917 ; 112  |    unsigned int B10 :1;
                             6918 ; 113  |    unsigned int B11 :1;
                             6919 ; 114  |    unsigned int B12 :1;
                             6920 ; 115  |    unsigned int B13 :1;
                             6921 ; 116  |    unsigned int B14 :1;
                             6922 ; 117  |    unsigned int B15 :1;
                             6923 ; 118  |    unsigned int B16 :1;
                             6924 ; 119  |    unsigned int B17 :1;
                             6925 ; 120  |    unsigned int B18 :1;
                             6926 ; 121  |    unsigned int B19 :1;
                             6927 ; 122  |    unsigned int B20 :1;
                             6928 ; 123  |    unsigned int B21 :1;
                             6929 ; 124  |    unsigned int B22 :1;
                             6930 ; 125  |    unsigned int B23 :1;
                             6931 ; 126  |};
                             6932 ; 127  |
                             6933 ; 128  |union BitInt {
                             6934 ; 129  |        struct Bitfield B;
                             6935 ; 130  |        int        I;
                             6936 ; 131  |};
                             6937 ; 132  |
                             6938 ; 133  |#define MAX_MSG_LENGTH 10
                             6939 ; 134  |struct CMessage
                             6940 ; 135  |{
                             6941 ; 136  |        unsigned int m_uLength;
                             6942 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6943 ; 138  |};
                             6944 ; 139  |
                             6945 ; 140  |typedef struct {
                             6946 ; 141  |    WORD m_wLength;
                             6947 ; 142  |    WORD m_wMessage;
                             6948 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6949 ; 144  |} Message;
                             6950 ; 145  |
                             6951 ; 146  |struct MessageQueueDescriptor
                             6952 ; 147  |{
                             6953 ; 148  |        int *m_pBase;
                             6954 ; 149  |        int m_iModulo;
                             6955 ; 150  |        int m_iSize;
                             6956 ; 151  |        int *m_pHead;
                             6957 ; 152  |        int *m_pTail;
                             6958 ; 153  |};
                             6959 ; 154  |
                             6960 ; 155  |struct ModuleEntry
                             6961 ; 156  |{
                             6962 ; 157  |    int m_iSignaledEventMask;
                             6963 ; 158  |    int m_iWaitEventMask;
                             6964 ; 159  |    int m_iResourceOfCode;
                             6965 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6966 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             6967 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6968 ; 163  |    int m_uTimeOutHigh;
                             6969 ; 164  |    int m_uTimeOutLow;
                             6970 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6971 ; 166  |};
                             6972 ; 167  |
                             6973 ; 168  |union WaitMask{
                             6974 ; 169  |    struct B{
                             6975 ; 170  |        unsigned int m_bNone     :1;
                             6976 ; 171  |        unsigned int m_bMessage  :1;
                             6977 ; 172  |        unsigned int m_bTimer    :1;
                             6978 ; 173  |        unsigned int m_bButton   :1;
                             6979 ; 174  |    } B;
                             6980 ; 175  |    int I;
                             6981 ; 176  |} ;
                             6982 ; 177  |
                             6983 ; 178  |
                             6984 ; 179  |struct Button {
                             6985 ; 180  |        WORD wButtonEvent;
                             6986 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6987 ; 182  |};
                             6988 ; 183  |
                             6989 ; 184  |struct Message {
                             6990 ; 185  |        WORD wMsgLength;
                             6991 ; 186  |        WORD wMsgCommand;
                             6992 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6993 ; 188  |};
                             6994 ; 189  |
                             6995 ; 190  |union EventTypes {
                             6996 ; 191  |        struct CMessage msg;
                             6997 ; 192  |        struct Button Button ;
                             6998 ; 193  |        struct Message Message;
                             6999 ; 194  |};
                             7000 ; 195  |
                             7001 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7002 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7003 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7004 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7005 ; 200  |
                             7006 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7007 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7008 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7009 ; 204  |
                             7010 ; 205  |#if DEBUG
                             7011 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7012 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7013 ; 208  |#else 
                             7014 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7015 ; 210  |#define DebugBuildAssert(x)    
                             7016 ; 211  |#endif
                             7017 ; 212  |
                             7018 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7019 ; 214  |//  #pragma asm
                             7020 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7021 ; 216  |//  #pragma endasm
                             7022 ; 217  |
                             7023 ; 218  |
                             7024 ; 219  |#ifdef COLOR_262K
                             7025 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7026 ; 221  |#elif defined(COLOR_65K)
                             7027 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7028 ; 223  |#else
                             7029 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7030 ; 225  |#endif
                             7031 ; 226  |    
                             7032 ; 227  |#endif // #ifndef _TYPES_H
                             7033 
                             7035 
                             7036 ; 5    |
                             7037 ; 6    |// Order of EQ selection
                             7038 ; 7    |// must match order of struct MenuItem defined in Eqmenu.c
                             7039 ; 8    |#define FIRST_EQ    0
                             7040 ; 9    |#define EQ_NORMAL   0
                             7041 ; 10   |#define EQ_ROCK     1
                             7042 ; 11   |#define EQ_JAZZ     2   
                             7043 ; 12   |#define EQ_CLASSIC  3   
                             7044 ; 13   |#define EQ_POP      4
                             7045 ; 14   |#define EQ_CUSTOM   5
                             7046 ; 15   |#define LAST_EQ     5
                             7047 ; 16   |#define EQMENU_COUNT   LAST_EQ+1
                             7048 ; 17   |
                             7049 ; 18   |// Band Pass Filter Center Frequencies  (SDK2.520)
                             7050 ; 19   |#define CENTER_FREQ1  80    // 80 Hz  (see 'CenterFreq' defined in Geqmem.asm)
                             7051 ; 20   |#define CENTER_FREQ2  250
                             7052 ; 21   |#define CENTER_FREQ3  1000
                             7053 ; 22   |#define CENTER_FREQ4  4000
                             7054 ; 23   |#define CENTER_FREQ5  12000
                             7055 ; 24   |
                             7056 ; 25   |#define EQ_BAND_FIRST 0
                             7057 ; 26   |#define EQ_BAND1      0
                             7058 ; 27   |#define EQ_BAND2      1
                             7059 ; 28   |#define EQ_BAND3      2
                             7060 ; 29   |#define EQ_BAND4      3
                             7061 ; 30   |#define EQ_BAND5      4
                             7062 ; 31   |#define EQ_BAND_LAST  4
                             7063 ; 32   |#define NUM_EQ_BANDS EQ_BAND_LAST + 1
                             7064 ; 33   |
                             7065 ; 34   |#define EQ_ROCK_GAIN1    18
                             7066 ; 35   |#define EQ_ROCK_GAIN2   -4
                             7067 ; 36   |#define EQ_ROCK_GAIN3   -2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7068 ; 37   |#define EQ_ROCK_GAIN4    14
                             7069 ; 38   |#define EQ_ROCK_GAIN5    14
                             7070 ; 39   |
                             7071 ; 40   |#define EQ_JAZZ_GAIN1    12
                             7072 ; 41   |#define EQ_JAZZ_GAIN2   -2
                             7073 ; 42   |#define EQ_JAZZ_GAIN3   -4
                             7074 ; 43   |#define EQ_JAZZ_GAIN4    0
                             7075 ; 44   |#define EQ_JAZZ_GAIN5    8
                             7076 ; 45   |
                             7077 ; 46   |#define EQ_CLASS_GAIN1   0
                             7078 ; 47   |#define EQ_CLASS_GAIN2   0
                             7079 ; 48   |#define EQ_CLASS_GAIN3   0
                             7080 ; 49   |#define EQ_CLASS_GAIN4  -7
                             7081 ; 50   |#define EQ_CLASS_GAIN5  -10
                             7082 ; 51   |
                             7083 ; 52   |#define EQ_POP_GAIN1    -4
                             7084 ; 53   |#define EQ_POP_GAIN2     8
                             7085 ; 54   |#define EQ_POP_GAIN3     8
                             7086 ; 55   |#define EQ_POP_GAIN4    -2
                             7087 ; 56   |#define EQ_POP_GAIN5     0
                             7088 ; 57   |
                             7089 ; 58   |#define EQ_NORM_GAIN1    0
                             7090 ; 59   |#define EQ_NORM_GAIN2    0
                             7091 ; 60   |#define EQ_NORM_GAIN3    0
                             7092 ; 61   |#define EQ_NORM_GAIN4    0
                             7093 ; 62   |#define EQ_NORM_GAIN5    0
                             7094 ; 63   |
                             7095 ; 64   |// dB gain level:  number of 0.5dB units
                             7096 ; 65   |#define EQ_MAX_GAIN      28    // +14dB  (see 'dBTable' defined in Geqmem.asm)
                             7097 ; 66   |#define EQ_ZERO_GAIN     0     //  0 dB  (see 'ZerodBPoint')
                             7098 ; 67   |#define EQ_MIN_GAIN     -28    // -14dB  (divide gain by 2 to get dB)
                             7099 ; 68   |
                             7100 ; 69   |extern INT g_iEqSetting;
                             7101 ; 70   |
                             7102 ; 71   |#endif
                             7103 
                             7105 
                             7106 ; 13   |#include "mainmenu.h"
                             7107 
                             7109 
                             7110 ; 1    |#ifndef _MAIN_MENU_H
                             7111 ; 2    |#define _MAIN_MENU_H
                             7112 ; 3    |
                             7113 ; 4    |// menus in mainmenu
                             7114 ; 5    |#define MAINMENU_FIRST  0
                             7115 ; 6    |
                             7116 ; 7    |enum _MENU_ID
                             7117 ; 8    |{
                             7118 ; 9    |        MENU_MUSIC = 0,
                             7119 ; 10   |#ifdef JPEG_APP
                             7120 ; 11   |        MENU_JPEG_DISPLAY,
                             7121 ; 12   |#endif
                             7122 ; 13   |#ifdef MOTION_VIDEO
                             7123 ; 14   |        MENU_MVIDEO,
                             7124 ; 15   |#endif
                             7125 ; 16   |        MENU_VOICE,
                             7126 ; 17   |
                             7127 ; 18   |/*This version does not use PL5
                             7128 ; 19   |#ifdef USE_PLAYLIST5
                             7129 ; 20   |#ifndef REMOVE_FM
                             7130 ; 21   |    MENU_FMREC,
                             7131 ; 22   |#endif
                             7132 ; 23   |    MENU_LINEIN,
                             7133 ; 24   |#ifdef AUDIBLE
                             7134 ; 25   |        MENU_AUDIBLE,
                             7135 ; 26   |#endif
                             7136 ; 27   |#endif  // #ifdef USE_PLAYLIST5
                             7137 ; 28   |*/
                             7138 ; 29   |
                             7139 ; 30   |#ifdef USE_PLAYLIST3
                             7140 ; 31   |#ifdef AUDIBLE
                             7141 ; 32   |        MENU_AUDIBLE,
                             7142 ; 33   |#endif
                             7143 ; 34   |#endif
                             7144 ; 35   |#ifndef REMOVE_FM
                             7145 ; 36   |        MENU_FMTUNER,
                             7146 ; 37   |#endif
                             7147 ; 38   |        MENU_RECORD,
                             7148 ; 39   |        MENU_SETTINGS,
                             7149 ; 40   |        MENU_SHUTDOWN,
                             7150 ; 41   |        MENU_TIME_DATE,
                             7151 ; 42   |        MENU_AB,
                             7152 ; 43   |        MENU_DELETE,
                             7153 ; 44   |        MENU_ABOUT,
                             7154 ; 45   |#ifdef SPECTRUM_ANAL
                             7155 ; 46   |        MENU_SPECTROGRAM,
                             7156 ; 47   |#endif
                             7157 ; 48   |        MENU_MAIN_EXIT
                             7158 ; 49   |};
                             7159 ; 50   |
                             7160 ; 51   |
                             7161 ; 52   |#define MAINMENU_LAST    MENU_MAIN_EXIT
                             7162 ; 53   |#define MAINMENU_COUNT  (MAINMENU_LAST+1)
                             7163 ; 54   |
                             7164 ; 55   |#ifdef S6B33B0A_LCD
                             7165 ; 56   |#define MAINMENU_PAGE1_COUNT    MAINMENU_COUNT
                             7166 ; 57   |#endif
                             7167 ; 58   |
                             7168 ; 59   |#ifdef SED15XX_LCD
                             7169 ; 60   |#define MAINMENU_PAGE1_COUNT    4
                             7170 ; 61   |#endif
                             7171 ; 62   |
                             7172 ; 63   |
                             7173 ; 64   |// Media error constants
                             7174 ; 65   |// Each device gets 5 bits for error codes, in the global g_FSinitErrorCode.
                             7175 ; 66   |// If there is no external device, the internal device uses bits 0-4.  If there
                             7176 ; 67   |// is an external device, the internal device is shifted up 5 bits (to bits 5-9),
                             7177 ; 68   |// and the external device uses bits 0-4.  (More than one external device is not
                             7178 ; 69   |// supported in the current code.)
                             7179 ; 70   |
                             7180 ; 71   |#define ERROR_ON_INTERNAL_MEDIA         0x0F
                             7181 ; 72   |#define INTERNAL_MEDIA_NOT_SIGMATEL_FORMAT      0x010
                             7182 ; 73   |
                             7183 ; 74   |#define ERROR_ON_EXTERNAL_MEDIA                         0x0E
                             7184 ; 75   |#define EXTERNAL_MEDIA_NOT_SIGMATEL_FORMAT      0x010
                             7185 ; 76   |
                             7186 ; 77   |#define ERROR_ON_INTERNAL_MEDIA_SHIFTED         0x01E0
                             7187 ; 78   |#define INTERNAL_MEDIA_NOT_SIGMATEL_FORMAT_SHIFTED      0x020
                             7188 ; 79   |
                             7189 ; 80   |#ifdef USE_PLAYLIST3
                             7190 ; 81   |extern INT  g_current_index;
                             7191 ; 82   |extern INT  g_current_size;
                             7192 ; 83   |extern _packed BYTE g_strMusicLib_FilePath[];
                             7193 ; 84   |extern _packed BYTE g_strMusicLib_SecTable_FilePath[];
                             7194 ; 85   |extern INT  g_iFileHandle;
                             7195 ; 86   |extern INT  g_ML_save_on_exit;
                             7196 ; 87   |extern WORD g_rsrc_TimeDate_CodeBank;
                             7197 ; 88   |#endif  // USE_PLAYLIST3
                             7198 ; 89   |
                             7199 ; 90   |////////////////////////////////////////////////////////////////////////////////
                             7200 ; 91   |//  Prototypes
                             7201 ; 92   |////////////////////////////////////////////////////////////////////////////////
                             7202 ; 93   |#ifdef USE_PLAYLIST3
                             7203 ; 94   |void _reentrant ML_building_engine_init(void);
                             7204 ; 95   |#endif  // USE_PLAYLIST3
                             7205 ; 96   |
                             7206 ; 97   |#endif
                             7207 
                             7209 
                             7210 ; 14   |#include "settingsmenu.h"
                             7211 
                             7213 
                             7214 ; 1    |#ifndef _SETTINGS_MENU_H
                             7215 ; 2    |#define _SETTINGS_MENU_H
                             7216 ; 3    |
                             7217 ; 4    |// menus in settings menu
                             7218 ; 5    |// defines order of selection
                             7219 ; 6    |#define SETTINGSMENU_FIRST  0
                             7220 ; 7    |
                             7221 ; 8    |enum _MENUSETTING_ID
                             7222 ; 9    |{
                             7223 ; 10   |MENU_EQ = 0,
                             7224 ; 11   |MENU_PLAYMODE,
                             7225 ; 12   |MENU_CONTRAST,
                             7226 ; 13   |MENU_PWRSAVINGS,
                             7227 ; 14   |#ifdef BACKLIGHT
                             7228 ; 15   |MENU_BACKLIGHT,
                             7229 ; 16   |#endif
                             7230 ; 17   |MENU_RECORD_SETTINGS,
                             7231 ; 18   |MENU_SET_TIME,
                             7232 ; 19   |MENU_SET_DATE,
                             7233 ; 20   | #ifdef WOW
                             7234 ; 21   |MENU_WOW,
                             7235 ; 22   | #endif
                             7236 ; 23   |MENU_SETTINGS_EXIT
                             7237 ; 24   |#ifndef BACKLIGHT
                             7238 ; 25   |,MENU_BACKLIGHT
                             7239 ; 26   |#endif
                             7240 ; 27   |};
                             7241 ; 28   |
                             7242 ; 29   |#define SETTINGSMENU_LAST   MENU_SETTINGS_EXIT
                             7243 ; 30   |#define SETTINGSMENU_COUNT  (SETTINGSMENU_LAST+1)
                             7244 ; 31   |        
                             7245 ; 32   |#ifdef S6B33B0A_LCD
                             7246 ; 33   |#define SETTINGSMENU_PAGE1_COUNT        SETTINGSMENU_COUNT
                             7247 ; 34   |#endif
                             7248 ; 35   |
                             7249 ; 36   |#ifdef SED15XX_LCD
                             7250 ; 37   |#define SETTINGSMENU_PAGE1_COUNT        4
                             7251 ; 38   |#endif
                             7252 ; 39   |
                             7253 ; 40   |#endif
                             7254 
                             7256 
                             7257 ; 15   |#include "const.h"
                             7258 
                             7260 
                             7261 ; 1    |//******************************************************************************
                             7262 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                             7263 ; 3    |//
                             7264 ; 4    |//  Use these values to reduce memory
                             7265 ; 5    |//;******************************************************************************
                             7266 ; 6    |
                             7267 ; 7    |#ifndef _CONST_H
                             7268 ; 8    |#define _CONST_H
                             7269 ; 9    |
                             7270 ; 10   |
                             7271 ; 11   |extern unsigned int _Y const_zero;    
                             7272 ; 12   |extern unsigned int _Y const_one;     
                             7273 ; 13   |extern unsigned int _Y const_two;     
                             7274 ; 14   |extern unsigned int _Y const_three;   
                             7275 ; 15   |extern unsigned int _Y const_four;    
                             7276 ; 16   |extern unsigned int _Y const_eight;   
                             7277 ; 17   |extern unsigned int _Y const_12;   
                             7278 ; 18   |extern unsigned int _Y const_16;   
                             7279 ; 19   |extern unsigned int _Y const_24;      
                             7280 ; 20   |extern unsigned int _Y const_32;     
                             7281 ; 21   |extern unsigned int _Y const_minus_1; 
                             7282 ; 22   |extern unsigned int _Y fract_one;     
                             7283 ; 23   |
                             7284 ; 24   |#endif
                             7285 
                             7287 
                             7288 ; 16   |#include "hwequ.h"
                             7289 
                             7291 
                             7292 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7293 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                             7294 ; 3    |//  File        : hwequ.inc
                             7295 ; 4    |//  Description : STMP Hardware Constants
                             7296 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7297 ; 6    |
                             7298 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                             7299 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                             7300 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                             7301 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                             7302 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                             7303 ; 12   |
                             7304 ; 13   |#if (!defined(HWEQU_INC))
                             7305 ; 14   |#define HWEQU_INC 1
                             7306 ; 15   |
                             7307 ; 16   |#include "types.h"
                             7308 
                             7310 
                             7311 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7312 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7313 ; 3    |//
                             7314 ; 4    |// Filename: types.h
                             7315 ; 5    |// Description: Standard data types
                             7316 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7317 ; 7    |
                             7318 ; 8    |#ifndef _TYPES_H
                             7319 ; 9    |#define _TYPES_H
                             7320 ; 10   |
                             7321 ; 11   |// TODO:  move this outta here!
                             7322 ; 12   |#if !defined(NOERROR)
                             7323 ; 13   |#define NOERROR 0
                             7324 ; 14   |#define SUCCESS 0
                             7325 ; 15   |#endif 
                             7326 ; 16   |#if !defined(SUCCESS)
                             7327 ; 17   |#define SUCCESS  0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7328 ; 18   |#endif
                             7329 ; 19   |#if !defined(ERROR)
                             7330 ; 20   |#define ERROR   -1
                             7331 ; 21   |#endif
                             7332 ; 22   |#if !defined(FALSE)
                             7333 ; 23   |#define FALSE 0
                             7334 ; 24   |#endif
                             7335 ; 25   |#if !defined(TRUE)
                             7336 ; 26   |#define TRUE  1
                             7337 ; 27   |#endif
                             7338 ; 28   |
                             7339 ; 29   |#if !defined(NULL)
                             7340 ; 30   |#define NULL 0
                             7341 ; 31   |#endif
                             7342 ; 32   |
                             7343 ; 33   |#define MAX_INT     0x7FFFFF
                             7344 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7345 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7346 ; 36   |#define MAX_ULONG   (-1) 
                             7347 ; 37   |
                             7348 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7349 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7350 ; 40   |
                             7351 ; 41   |
                             7352 ; 42   |#define BYTE    unsigned char       // btVarName
                             7353 ; 43   |#define CHAR    signed char         // cVarName
                             7354 ; 44   |#define USHORT  unsigned short      // usVarName
                             7355 ; 45   |#define SHORT   unsigned short      // sVarName
                             7356 ; 46   |#define WORD    unsigned int        // wVarName
                             7357 ; 47   |#define INT     signed int          // iVarName
                             7358 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7359 ; 49   |#define LONG    signed long         // lVarName
                             7360 ; 50   |#define BOOL    unsigned int        // bVarName
                             7361 ; 51   |#define FRACT   _fract              // frVarName
                             7362 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7363 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7364 ; 54   |#define FLOAT   float               // fVarName
                             7365 ; 55   |#define DBL     double              // dVarName
                             7366 ; 56   |#define ENUM    enum                // eVarName
                             7367 ; 57   |#define CMX     _complex            // cmxVarName
                             7368 ; 58   |typedef WORD UCS3;                   // 
                             7369 ; 59   |
                             7370 ; 60   |#define UINT16  unsigned short
                             7371 ; 61   |#define UINT8   unsigned char   
                             7372 ; 62   |#define UINT32  unsigned long
                             7373 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7374 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7375 ; 65   |#define WCHAR   UINT16
                             7376 ; 66   |
                             7377 ; 67   |//UINT128 is 16 bytes or 6 words
                             7378 ; 68   |typedef struct UINT128_3500 {   
                             7379 ; 69   |    int val[6];     
                             7380 ; 70   |} UINT128_3500;
                             7381 ; 71   |
                             7382 ; 72   |#define UINT128   UINT128_3500
                             7383 ; 73   |
                             7384 ; 74   |// Little endian word packed byte strings:   
                             7385 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7386 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7387 ; 77   |// Little endian word packed byte strings:   
                             7388 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7389 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7390 ; 80   |
                             7391 ; 81   |// Declare Memory Spaces To Use When Coding
                             7392 ; 82   |// A. Sector Buffers
                             7393 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7394 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7395 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7396 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7397 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7398 ; 88   |// B. Media DDI Memory
                             7399 ; 89   |#define MEDIA_DDI_MEM _Y
                             7400 ; 90   |
                             7401 ; 91   |
                             7402 ; 92   |
                             7403 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7404 ; 94   |// Examples of circular pointers:
                             7405 ; 95   |//    INT CIRC cpiVarName
                             7406 ; 96   |//    DWORD CIRC cpdwVarName
                             7407 ; 97   |
                             7408 ; 98   |#define RETCODE INT                 // rcVarName
                             7409 ; 99   |
                             7410 ; 100  |// generic bitfield structure
                             7411 ; 101  |struct Bitfield {
                             7412 ; 102  |    unsigned int B0  :1;
                             7413 ; 103  |    unsigned int B1  :1;
                             7414 ; 104  |    unsigned int B2  :1;
                             7415 ; 105  |    unsigned int B3  :1;
                             7416 ; 106  |    unsigned int B4  :1;
                             7417 ; 107  |    unsigned int B5  :1;
                             7418 ; 108  |    unsigned int B6  :1;
                             7419 ; 109  |    unsigned int B7  :1;
                             7420 ; 110  |    unsigned int B8  :1;
                             7421 ; 111  |    unsigned int B9  :1;
                             7422 ; 112  |    unsigned int B10 :1;
                             7423 ; 113  |    unsigned int B11 :1;
                             7424 ; 114  |    unsigned int B12 :1;
                             7425 ; 115  |    unsigned int B13 :1;
                             7426 ; 116  |    unsigned int B14 :1;
                             7427 ; 117  |    unsigned int B15 :1;
                             7428 ; 118  |    unsigned int B16 :1;
                             7429 ; 119  |    unsigned int B17 :1;
                             7430 ; 120  |    unsigned int B18 :1;
                             7431 ; 121  |    unsigned int B19 :1;
                             7432 ; 122  |    unsigned int B20 :1;
                             7433 ; 123  |    unsigned int B21 :1;
                             7434 ; 124  |    unsigned int B22 :1;
                             7435 ; 125  |    unsigned int B23 :1;
                             7436 ; 126  |};
                             7437 ; 127  |
                             7438 ; 128  |union BitInt {
                             7439 ; 129  |        struct Bitfield B;
                             7440 ; 130  |        int        I;
                             7441 ; 131  |};
                             7442 ; 132  |
                             7443 ; 133  |#define MAX_MSG_LENGTH 10
                             7444 ; 134  |struct CMessage
                             7445 ; 135  |{
                             7446 ; 136  |        unsigned int m_uLength;
                             7447 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7448 ; 138  |};
                             7449 ; 139  |
                             7450 ; 140  |typedef struct {
                             7451 ; 141  |    WORD m_wLength;
                             7452 ; 142  |    WORD m_wMessage;
                             7453 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7454 ; 144  |} Message;
                             7455 ; 145  |
                             7456 ; 146  |struct MessageQueueDescriptor
                             7457 ; 147  |{
                             7458 ; 148  |        int *m_pBase;
                             7459 ; 149  |        int m_iModulo;
                             7460 ; 150  |        int m_iSize;
                             7461 ; 151  |        int *m_pHead;
                             7462 ; 152  |        int *m_pTail;
                             7463 ; 153  |};
                             7464 ; 154  |
                             7465 ; 155  |struct ModuleEntry
                             7466 ; 156  |{
                             7467 ; 157  |    int m_iSignaledEventMask;
                             7468 ; 158  |    int m_iWaitEventMask;
                             7469 ; 159  |    int m_iResourceOfCode;
                             7470 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7471 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7472 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7473 ; 163  |    int m_uTimeOutHigh;
                             7474 ; 164  |    int m_uTimeOutLow;
                             7475 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7476 ; 166  |};
                             7477 ; 167  |
                             7478 ; 168  |union WaitMask{
                             7479 ; 169  |    struct B{
                             7480 ; 170  |        unsigned int m_bNone     :1;
                             7481 ; 171  |        unsigned int m_bMessage  :1;
                             7482 ; 172  |        unsigned int m_bTimer    :1;
                             7483 ; 173  |        unsigned int m_bButton   :1;
                             7484 ; 174  |    } B;
                             7485 ; 175  |    int I;
                             7486 ; 176  |} ;
                             7487 ; 177  |
                             7488 ; 178  |
                             7489 ; 179  |struct Button {
                             7490 ; 180  |        WORD wButtonEvent;
                             7491 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7492 ; 182  |};
                             7493 ; 183  |
                             7494 ; 184  |struct Message {
                             7495 ; 185  |        WORD wMsgLength;
                             7496 ; 186  |        WORD wMsgCommand;
                             7497 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7498 ; 188  |};
                             7499 ; 189  |
                             7500 ; 190  |union EventTypes {
                             7501 ; 191  |        struct CMessage msg;
                             7502 ; 192  |        struct Button Button ;
                             7503 ; 193  |        struct Message Message;
                             7504 ; 194  |};
                             7505 ; 195  |
                             7506 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7507 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7508 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7509 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7510 ; 200  |
                             7511 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7512 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7513 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7514 ; 204  |
                             7515 ; 205  |#if DEBUG
                             7516 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7517 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7518 ; 208  |#else 
                             7519 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7520 ; 210  |#define DebugBuildAssert(x)    
                             7521 ; 211  |#endif
                             7522 ; 212  |
                             7523 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7524 ; 214  |//  #pragma asm
                             7525 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7526 ; 216  |//  #pragma endasm
                             7527 ; 217  |
                             7528 ; 218  |
                             7529 ; 219  |#ifdef COLOR_262K
                             7530 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7531 ; 221  |#elif defined(COLOR_65K)
                             7532 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7533 ; 223  |#else
                             7534 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7535 ; 225  |#endif
                             7536 ; 226  |    
                             7537 ; 227  |#endif // #ifndef _TYPES_H
                             7538 
                             7540 
                             7541 ; 17   |#include "regsclkctrl.h"
                             7542 
                             7544 
                             7545 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                             7546 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                             7547 ; 3    |
                             7548 ; 4    |
                             7549 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7550 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                             7551 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                             7552 ; 8    |#define HW_CCR_LTC_BITPOS 1
                             7553 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                             7554 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                             7555 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                             7556 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                             7557 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                             7558 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                             7559 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                             7560 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                             7561 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                             7562 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                             7563 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                             7564 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                             7565 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                             7566 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                             7567 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                             7568 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                             7569 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                             7570 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                             7571 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                             7572 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                             7573 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                             7574 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                             7575 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                             7576 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                             7577 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                             7578 ; 34   |
                             7579 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                             7580 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7581 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                             7582 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                             7583 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                             7584 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                             7585 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                             7586 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                             7587 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                             7588 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                             7589 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                             7590 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                             7591 ; 47   |
                             7592 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                             7593 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                             7594 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                             7595 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                             7596 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                             7597 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                             7598 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                             7599 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                             7600 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                             7601 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                             7602 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                             7603 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                             7604 ; 60   |
                             7605 ; 61   |typedef union               
                             7606 ; 62   |{
                             7607 ; 63   |    struct
                             7608 ; 64   |    {
                             7609 ; 65   |        int CKRST       :1; // Clock Reset
                             7610 ; 66   |        int LTC         :1;
                             7611 ; 67   |        int PLLEN       :1;
                             7612 ; 68   |        int XTLEN       :1;
                             7613 ; 69   |        int FLB         :1;
                             7614 ; 70   |        unsigned ADIV   :3;
                             7615 ; 71   |        int CKSRC       :1;
                             7616 ; 72   |        unsigned DDIV   :3;
                             7617 ; 73   |        unsigned PDIV   :5;
                             7618 ; 74   |        int PWDN        :1;
                             7619 ; 75   |        int ACKEN       :1;
                             7620 ; 76   |        int LOCK        :1;
                             7621 ; 77   |        unsigned ADIV1  :3;
                             7622 ; 78   |        unsigned DDIV_MSB:1;
                             7623 ; 79   |    } B;
                             7624 ; 80   |
                             7625 ; 81   |    int I;
                             7626 ; 82   |    unsigned int U;
                             7627 ; 83   |
                             7628 ; 84   |} ccr_type;
                             7629 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                             7630 ; 86   |
                             7631 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             7632 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                             7633 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                             7634 ; 90   |#define HW_RCR_SRST_BITPOS 4
                             7635 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                             7636 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                             7637 ; 93   |#define HW_RCR_NMI_BITPOS 10
                             7638 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                             7639 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                             7640 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                             7641 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                             7642 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                             7643 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                             7644 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                             7645 ; 101  |
                             7646 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                             7647 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                             7648 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                             7649 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                             7650 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                             7651 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                             7652 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                             7653 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                             7654 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                             7655 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                             7656 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                             7657 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                             7658 ; 114  |
                             7659 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                             7660 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                             7661 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                             7662 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                             7663 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                             7664 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                             7665 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                             7666 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                             7667 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                             7668 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                             7669 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                             7670 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                             7671 ; 127  |
                             7672 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                             7673 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                             7674 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                             7675 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                             7676 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                             7677 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                             7678 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                             7679 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                             7680 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                             7681 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                             7682 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                             7683 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                             7684 ; 140  |
                             7685 ; 141  |typedef union               
                             7686 ; 142  |{
                             7687 ; 143  |    struct
                             7688 ; 144  |   {
                             7689 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                             7690 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                             7691 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                             7692 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                             7693 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                             7694 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                             7695 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                             7696 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                             7697 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                             7698 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                             7699 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                             7700 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                             7701 ; 157  |    } B;
                             7702 ; 158  |
                             7703 ; 159  |    int I;
                             7704 ; 160  |    unsigned int U;
                             7705 ; 161  |
                             7706 ; 162  |} rcr_type;
                             7707 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                             7708 ; 164  |
                             7709 ; 165  |
                             7710 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             7711 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                             7712 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                             7713 ; 169  |
                             7714 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                             7715 ; 171  |
                             7716 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                             7717 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                             7718 ; 174  |typedef union               
                             7719 ; 175  |{
                             7720 ; 176  |    struct
                             7721 ; 177  |   {
                             7722 ; 178  |        int LOW;
                             7723 ; 179  |    } B;
                             7724 ; 180  |
                             7725 ; 181  |    int I;
                             7726 ; 182  |    unsigned int U;
                             7727 ; 183  |
                             7728 ; 184  |} dclkcntl_type;
                             7729 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                             7730 ; 186  |
                             7731 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             7732 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                             7733 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                             7734 ; 190  |
                             7735 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                             7736 ; 192  |
                             7737 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS) 
                             7738 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                             7739 ; 195  |typedef union               
                             7740 ; 196  |{
                             7741 ; 197  |    struct
                             7742 ; 198  |   {
                             7743 ; 199  |        int HIGH;
                             7744 ; 200  |    } B;
                             7745 ; 201  |
                             7746 ; 202  |    int I;
                             7747 ; 203  |    unsigned int U;
                             7748 ; 204  |
                             7749 ; 205  |} dclkcntu_type;
                             7750 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                             7751 ; 207  |
                             7752 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             7753 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             7754 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                             7755 ; 211  |
                             7756 ; 212  |// Clock count register (lower)
                             7757 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                             7758 ; 214  |// Clock count register (upper)
                             7759 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                             7760 ; 216  |// Cycle steal count register
                             7761 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                             7762 ; 218  |
                             7763 ; 219  |#endif
                             7764 ; 220  |
                             7765 ; 221  |
                             7766 
                             7768 
                             7769 ; 18   |#include "regscore.h"
                             7770 
                             7772 
                             7773 ; 1    |#if !(defined(__REGS_STATUS_INC))
                             7774 ; 2    |#define __REGS_STATUS_INC 1
                             7775 ; 3    |
                             7776 ; 4    |
                             7777 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7778 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                             7779 ; 7    |#define HW_OMR_MA_BITPOS 0
                             7780 ; 8    |#define HW_OMR_MB_BITPOS 1
                             7781 ; 9    |#define HW_OMR_DE_BITPOS 2
                             7782 ; 10   |#define HW_OMR_YE_BITPOS 3
                             7783 ; 11   |#define HW_OMR_MC_BITPOS 4
                             7784 ; 12   |#define HW_OMR_SD_BITPOS 6
                             7785 ; 13   |
                             7786 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                             7787 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                             7788 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                             7789 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                             7790 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                             7791 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                             7792 ; 20   |
                             7793 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                             7794 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                             7795 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                             7796 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                             7797 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                             7798 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                             7799 ; 27   |
                             7800 ; 28   |
                             7801 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                             7802 ; 30   |//  Status Register (HW_SR) Bit Positions
                             7803 ; 31   |#define HW_SR_C_BITPOS 0
                             7804 ; 32   |#define HW_SR_O_BITPOS 1
                             7805 ; 33   |#define HW_SR_Z_BITPOS 2
                             7806 ; 34   |#define HW_SR_N_BITPOS 3
                             7807 ; 35   |#define HW_SR_U_BITPOS 4
                             7808 ; 36   |#define HW_SR_E_BITPOS 5
                             7809 ; 37   |#define HW_SR_L_BITPOS 6
                             7810 ; 38   |#define HW_SR_IM_BITPOS 8
                             7811 ; 39   |#define HW_SR_IM0_BITPOS 8
                             7812 ; 40   |#define HW_SR_IM1_BITPOS 9
                             7813 ; 41   |#define HW_SR_SM_BITPOS 10
                             7814 ; 42   |#define HW_SR_SM0_BITPOS 10
                             7815 ; 43   |#define HW_SR_SM1_BITPOS 11
                             7816 ; 44   |#define HW_SR_TM_BITPOS 13
                             7817 ; 45   |#define HW_SR_DP_BITPOS 14
                             7818 ; 46   |#define HW_SR_LOOP_BITPOS 15
                             7819 ; 47   |
                             7820 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                             7821 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                             7822 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                             7823 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                             7824 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                             7825 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                             7826 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                             7827 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                             7828 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                             7829 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                             7830 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                             7831 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                             7832 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                             7833 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7834 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                             7835 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                             7836 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                             7837 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                             7838 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                             7839 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                             7840 ; 68   |
                             7841 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                             7842 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                             7843 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                             7844 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                             7845 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                             7846 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                             7847 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                             7848 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                             7849 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                             7850 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                             7851 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                             7852 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                             7853 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                             7854 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                             7855 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                             7856 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                             7857 ; 85   |
                             7858 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                             7859 ; 87   |//  RAM/ROM Config Register Bit Positions
                             7860 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                             7861 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                             7862 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                             7863 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                             7864 ; 92   |#endif
                             7865 ; 93   |
                             7866 ; 94   |
                             7867 
                             7869 
                             7870 ; 19   |#include "regscodec.h"
                             7871 
                             7873 
                             7874 ; 1    |#if !(defined(regscodecinc))
                             7875 ; 2    |#define regscodecinc 1
                             7876 ; 3    |
                             7877 ; 4    |
                             7878 ; 5    |
                             7879 ; 6    |#include "types.h"
                             7880 
                             7882 
                             7883 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7884 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7885 ; 3    |//
                             7886 ; 4    |// Filename: types.h
                             7887 ; 5    |// Description: Standard data types
                             7888 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7889 ; 7    |
                             7890 ; 8    |#ifndef _TYPES_H
                             7891 ; 9    |#define _TYPES_H
                             7892 ; 10   |
                             7893 ; 11   |// TODO:  move this outta here!
                             7894 ; 12   |#if !defined(NOERROR)
                             7895 ; 13   |#define NOERROR 0
                             7896 ; 14   |#define SUCCESS 0
                             7897 ; 15   |#endif 
                             7898 ; 16   |#if !defined(SUCCESS)
                             7899 ; 17   |#define SUCCESS  0
                             7900 ; 18   |#endif
                             7901 ; 19   |#if !defined(ERROR)
                             7902 ; 20   |#define ERROR   -1
                             7903 ; 21   |#endif
                             7904 ; 22   |#if !defined(FALSE)
                             7905 ; 23   |#define FALSE 0
                             7906 ; 24   |#endif
                             7907 ; 25   |#if !defined(TRUE)
                             7908 ; 26   |#define TRUE  1
                             7909 ; 27   |#endif
                             7910 ; 28   |
                             7911 ; 29   |#if !defined(NULL)
                             7912 ; 30   |#define NULL 0
                             7913 ; 31   |#endif
                             7914 ; 32   |
                             7915 ; 33   |#define MAX_INT     0x7FFFFF
                             7916 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7917 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7918 ; 36   |#define MAX_ULONG   (-1) 
                             7919 ; 37   |
                             7920 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7921 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7922 ; 40   |
                             7923 ; 41   |
                             7924 ; 42   |#define BYTE    unsigned char       // btVarName
                             7925 ; 43   |#define CHAR    signed char         // cVarName
                             7926 ; 44   |#define USHORT  unsigned short      // usVarName
                             7927 ; 45   |#define SHORT   unsigned short      // sVarName
                             7928 ; 46   |#define WORD    unsigned int        // wVarName
                             7929 ; 47   |#define INT     signed int          // iVarName
                             7930 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7931 ; 49   |#define LONG    signed long         // lVarName
                             7932 ; 50   |#define BOOL    unsigned int        // bVarName
                             7933 ; 51   |#define FRACT   _fract              // frVarName
                             7934 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7935 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7936 ; 54   |#define FLOAT   float               // fVarName
                             7937 ; 55   |#define DBL     double              // dVarName
                             7938 ; 56   |#define ENUM    enum                // eVarName
                             7939 ; 57   |#define CMX     _complex            // cmxVarName
                             7940 ; 58   |typedef WORD UCS3;                   // 
                             7941 ; 59   |
                             7942 ; 60   |#define UINT16  unsigned short
                             7943 ; 61   |#define UINT8   unsigned char   
                             7944 ; 62   |#define UINT32  unsigned long
                             7945 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7946 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7947 ; 65   |#define WCHAR   UINT16
                             7948 ; 66   |
                             7949 ; 67   |//UINT128 is 16 bytes or 6 words
                             7950 ; 68   |typedef struct UINT128_3500 {   
                             7951 ; 69   |    int val[6];     
                             7952 ; 70   |} UINT128_3500;
                             7953 ; 71   |
                             7954 ; 72   |#define UINT128   UINT128_3500
                             7955 ; 73   |
                             7956 ; 74   |// Little endian word packed byte strings:   
                             7957 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7958 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7959 ; 77   |// Little endian word packed byte strings:   
                             7960 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7961 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7962 ; 80   |
                             7963 ; 81   |// Declare Memory Spaces To Use When Coding
                             7964 ; 82   |// A. Sector Buffers
                             7965 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7966 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7967 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7968 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7969 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7970 ; 88   |// B. Media DDI Memory
                             7971 ; 89   |#define MEDIA_DDI_MEM _Y
                             7972 ; 90   |
                             7973 ; 91   |
                             7974 ; 92   |
                             7975 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7976 ; 94   |// Examples of circular pointers:
                             7977 ; 95   |//    INT CIRC cpiVarName
                             7978 ; 96   |//    DWORD CIRC cpdwVarName
                             7979 ; 97   |
                             7980 ; 98   |#define RETCODE INT                 // rcVarName
                             7981 ; 99   |
                             7982 ; 100  |// generic bitfield structure
                             7983 ; 101  |struct Bitfield {
                             7984 ; 102  |    unsigned int B0  :1;
                             7985 ; 103  |    unsigned int B1  :1;
                             7986 ; 104  |    unsigned int B2  :1;
                             7987 ; 105  |    unsigned int B3  :1;
                             7988 ; 106  |    unsigned int B4  :1;
                             7989 ; 107  |    unsigned int B5  :1;
                             7990 ; 108  |    unsigned int B6  :1;
                             7991 ; 109  |    unsigned int B7  :1;
                             7992 ; 110  |    unsigned int B8  :1;
                             7993 ; 111  |    unsigned int B9  :1;
                             7994 ; 112  |    unsigned int B10 :1;
                             7995 ; 113  |    unsigned int B11 :1;
                             7996 ; 114  |    unsigned int B12 :1;
                             7997 ; 115  |    unsigned int B13 :1;
                             7998 ; 116  |    unsigned int B14 :1;
                             7999 ; 117  |    unsigned int B15 :1;
                             8000 ; 118  |    unsigned int B16 :1;
                             8001 ; 119  |    unsigned int B17 :1;
                             8002 ; 120  |    unsigned int B18 :1;
                             8003 ; 121  |    unsigned int B19 :1;
                             8004 ; 122  |    unsigned int B20 :1;
                             8005 ; 123  |    unsigned int B21 :1;
                             8006 ; 124  |    unsigned int B22 :1;
                             8007 ; 125  |    unsigned int B23 :1;
                             8008 ; 126  |};
                             8009 ; 127  |
                             8010 ; 128  |union BitInt {
                             8011 ; 129  |        struct Bitfield B;
                             8012 ; 130  |        int        I;
                             8013 ; 131  |};
                             8014 ; 132  |
                             8015 ; 133  |#define MAX_MSG_LENGTH 10
                             8016 ; 134  |struct CMessage
                             8017 ; 135  |{
                             8018 ; 136  |        unsigned int m_uLength;
                             8019 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8020 ; 138  |};
                             8021 ; 139  |
                             8022 ; 140  |typedef struct {
                             8023 ; 141  |    WORD m_wLength;
                             8024 ; 142  |    WORD m_wMessage;
                             8025 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8026 ; 144  |} Message;
                             8027 ; 145  |
                             8028 ; 146  |struct MessageQueueDescriptor
                             8029 ; 147  |{
                             8030 ; 148  |        int *m_pBase;
                             8031 ; 149  |        int m_iModulo;
                             8032 ; 150  |        int m_iSize;
                             8033 ; 151  |        int *m_pHead;
                             8034 ; 152  |        int *m_pTail;
                             8035 ; 153  |};
                             8036 ; 154  |
                             8037 ; 155  |struct ModuleEntry
                             8038 ; 156  |{
                             8039 ; 157  |    int m_iSignaledEventMask;
                             8040 ; 158  |    int m_iWaitEventMask;
                             8041 ; 159  |    int m_iResourceOfCode;
                             8042 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8043 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8044 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8045 ; 163  |    int m_uTimeOutHigh;
                             8046 ; 164  |    int m_uTimeOutLow;
                             8047 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8048 ; 166  |};
                             8049 ; 167  |
                             8050 ; 168  |union WaitMask{
                             8051 ; 169  |    struct B{
                             8052 ; 170  |        unsigned int m_bNone     :1;
                             8053 ; 171  |        unsigned int m_bMessage  :1;
                             8054 ; 172  |        unsigned int m_bTimer    :1;
                             8055 ; 173  |        unsigned int m_bButton   :1;
                             8056 ; 174  |    } B;
                             8057 ; 175  |    int I;
                             8058 ; 176  |} ;
                             8059 ; 177  |
                             8060 ; 178  |
                             8061 ; 179  |struct Button {
                             8062 ; 180  |        WORD wButtonEvent;
                             8063 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8064 ; 182  |};
                             8065 ; 183  |
                             8066 ; 184  |struct Message {
                             8067 ; 185  |        WORD wMsgLength;
                             8068 ; 186  |        WORD wMsgCommand;
                             8069 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8070 ; 188  |};
                             8071 ; 189  |
                             8072 ; 190  |union EventTypes {
                             8073 ; 191  |        struct CMessage msg;
                             8074 ; 192  |        struct Button Button ;
                             8075 ; 193  |        struct Message Message;
                             8076 ; 194  |};
                             8077 ; 195  |
                             8078 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8079 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8080 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8081 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8082 ; 200  |
                             8083 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8084 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8085 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8086 ; 204  |
                             8087 ; 205  |#if DEBUG
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8088 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8089 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8090 ; 208  |#else 
                             8091 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8092 ; 210  |#define DebugBuildAssert(x)    
                             8093 ; 211  |#endif
                             8094 ; 212  |
                             8095 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8096 ; 214  |//  #pragma asm
                             8097 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8098 ; 216  |//  #pragma endasm
                             8099 ; 217  |
                             8100 ; 218  |
                             8101 ; 219  |#ifdef COLOR_262K
                             8102 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8103 ; 221  |#elif defined(COLOR_65K)
                             8104 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8105 ; 223  |#else
                             8106 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8107 ; 225  |#endif
                             8108 ; 226  |    
                             8109 ; 227  |#endif // #ifndef _TYPES_H
                             8110 
                             8112 
                             8113 ; 7    |
                             8114 ; 8    |
                             8115 ; 9    |
                             8116 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8117 ; 11   |
                             8118 ; 12   |//   SYSTEM STMP Registers 
                             8119 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             8120 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8121 ; 15   |
                             8122 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             8123 ; 17   |
                             8124 ; 18   |
                             8125 ; 19   |
                             8126 ; 20   |
                             8127 ; 21   |
                             8128 ; 22   |
                             8129 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             8130 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             8131 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             8132 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             8133 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             8134 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             8135 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             8136 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             8137 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             8138 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             8139 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             8140 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             8141 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             8142 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             8143 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             8144 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             8145 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             8146 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             8147 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             8148 ; 42   |
                             8149 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             8150 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             8151 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             8152 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             8153 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             8154 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             8155 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             8156 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             8157 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             8158 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             8159 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             8160 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             8161 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             8162 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             8163 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             8164 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             8165 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             8166 ; 60   |
                             8167 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             8168 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             8169 ; 63   |
                             8170 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8171 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8172 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8173 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8174 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8175 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8176 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8177 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8178 ; 72   |
                             8179 ; 73   |#if defined(CAPLESS_HP)
                             8180 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             8181 ; 75   |#else 
                             8182 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             8183 ; 77   |#endif
                             8184 ; 78   |
                             8185 ; 79   |// Headphone control register
                             8186 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             8187 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             8188 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             8189 ; 83   |typedef union               
                             8190 ; 84   |{
                             8191 ; 85   |    struct {
                             8192 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             8193 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             8194 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             8195 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             8196 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             8197 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             8198 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             8199 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             8200 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             8201 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             8202 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             8203 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             8204 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             8205 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             8206 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             8207 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             8208 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             8209 ; 103  |    } B;
                             8210 ; 104  |    int I;
                             8211 ; 105  |    unsigned int U;
                             8212 ; 106  |} hpctrl_type;
                             8213 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             8214 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             8215 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             8216 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             8217 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             8218 ; 112  |
                             8219 ; 113  |
                             8220 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             8221 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             8222 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             8223 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             8224 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             8225 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             8226 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             8227 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             8228 ; 122  |
                             8229 ; 123  |
                             8230 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             8231 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             8232 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             8233 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             8234 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             8235 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             8236 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             8237 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             8238 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             8239 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             8240 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             8241 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             8242 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             8243 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             8244 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             8245 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             8246 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             8247 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             8248 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             8249 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             8250 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             8251 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             8252 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             8253 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             8254 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             8255 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             8256 ; 150  |
                             8257 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             8258 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             8259 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             8260 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             8261 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             8262 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             8263 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             8264 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             8265 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             8266 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             8267 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             8268 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             8269 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             8270 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             8271 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             8272 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             8273 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             8274 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             8275 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             8276 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             8277 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             8278 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             8279 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             8280 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             8281 ; 175  |
                             8282 ; 176  |
                             8283 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             8284 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             8285 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             8286 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             8287 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             8288 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             8289 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             8290 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             8291 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             8292 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             8293 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             8294 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             8295 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             8296 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             8297 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             8298 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             8299 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             8300 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             8301 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             8302 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             8303 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             8304 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             8305 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             8306 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             8307 ; 201  |
                             8308 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             8309 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             8310 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             8311 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             8312 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             8313 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             8314 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             8315 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             8316 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             8317 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             8318 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             8319 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             8320 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             8321 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             8322 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             8323 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             8324 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             8325 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             8326 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             8327 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             8328 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             8329 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             8330 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             8331 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             8332 ; 226  |
                             8333 ; 227  |typedef union               
                             8334 ; 228  |{
                             8335 ; 229  |    struct {
                             8336 ; 230  |        int INV_USB_CLK            : 1;
                             8337 ; 231  |        int USB_DFF_BYPASS         : 1;
                             8338 ; 232  |        int HOLD_GND               : 1;
                             8339 ; 233  |        int ACKI                   : 1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8340 ; 234  |        int ASD2X                  : 1;
                             8341 ; 235  |        int PCPCU                  : 1;
                             8342 ; 236  |        int PCPCD                  : 1;
                             8343 ; 237  |        int DCKI                   : 1;
                             8344 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             8345 ; 239  |        int PSRN                   : 1;
                             8346 ; 240  |        int FX2                    : 1;
                             8347 ; 241  |        int VCOS                   : 1;
                             8348 ; 242  |        int XBCO                   : 1;
                             8349 ; 243  |        int XBGC                   : 1;
                             8350 ; 244  |        int ADTHD                  : 1;
                             8351 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             8352 ; 246  |        int PWDADC                 : 1;
                             8353 ; 247  |        int MICBIAS1               : 1;
                             8354 ; 248  |        int EZD                    : 1;
                             8355 ; 249  |        int DZCDA                  : 1;
                             8356 ; 250  |        int DZCFM                  : 1;
                             8357 ; 251  |        int DZCLI                  : 1;
                             8358 ; 252  |        int DZCMI                  : 1;
                             8359 ; 253  |        int DZCMA                  : 1;
                             8360 ; 254  |    } B;
                             8361 ; 255  |    int I;
                             8362 ; 256  |    unsigned int U;
                             8363 ; 257  |} mix_tbr_type;
                             8364 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             8365 ; 259  |
                             8366 ; 260  |
                             8367 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             8368 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             8369 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             8370 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             8371 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             8372 ; 266  |
                             8373 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             8374 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             8375 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             8376 ; 270  |
                             8377 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             8378 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             8379 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             8380 ; 274  |
                             8381 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             8382 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             8383 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             8384 ; 278  |
                             8385 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             8386 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             8387 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             8388 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             8389 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             8390 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             8391 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             8392 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             8393 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             8394 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             8395 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             8396 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             8397 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             8398 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             8399 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             8400 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             8401 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             8402 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             8403 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             8404 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             8405 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             8406 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             8407 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             8408 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             8409 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             8410 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             8411 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             8412 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             8413 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             8414 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             8415 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             8416 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             8417 ; 311  |
                             8418 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             8419 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             8420 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             8421 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             8422 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             8423 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             8424 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             8425 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             8426 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             8427 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             8428 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             8429 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             8430 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             8431 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             8432 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             8433 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             8434 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             8435 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             8436 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             8437 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             8438 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             8439 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             8440 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             8441 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             8442 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             8443 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             8444 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             8445 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             8446 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             8447 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             8448 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             8449 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             8450 ; 344  |
                             8451 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             8452 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             8453 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             8454 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             8455 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             8456 ; 350  |
                             8457 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             8458 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             8459 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             8460 ; 354  |
                             8461 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             8462 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             8463 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             8464 ; 358  |
                             8465 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             8466 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             8467 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             8468 ; 362  |
                             8469 ; 363  |
                             8470 ; 364  |typedef union               
                             8471 ; 365  |{
                             8472 ; 366  |    struct
                             8473 ; 367  |    {
                             8474 ; 368  |        unsigned MR :5;
                             8475 ; 369  |        int         :3;
                             8476 ; 370  |        unsigned ML :5;
                             8477 ; 371  |        int         :2;
                             8478 ; 372  |        int MUTE    :1;
                             8479 ; 373  |    } B;
                             8480 ; 374  |    int I;
                             8481 ; 375  |    unsigned int U;
                             8482 ; 376  |} mix_mastervr_type;
                             8483 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             8484 ; 378  |
                             8485 ; 379  |
                             8486 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             8487 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             8488 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             8489 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             8490 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             8491 ; 385  |
                             8492 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             8493 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             8494 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             8495 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             8496 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             8497 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             8498 ; 392  |
                             8499 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             8500 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             8501 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             8502 ; 396  |
                             8503 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             8504 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             8505 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             8506 ; 400  |
                             8507 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             8508 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             8509 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             8510 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             8511 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             8512 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             8513 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             8514 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             8515 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             8516 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             8517 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             8518 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             8519 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             8520 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             8521 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             8522 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             8523 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             8524 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             8525 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             8526 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             8527 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             8528 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             8529 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             8530 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             8531 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             8532 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             8533 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             8534 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             8535 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             8536 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             8537 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             8538 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             8539 ; 433  |
                             8540 ; 434  |typedef union               
                             8541 ; 435  |{
                             8542 ; 436  |    struct {
                             8543 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             8544 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             8545 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             8546 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             8547 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             8548 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             8549 ; 443  |    } B;
                             8550 ; 444  |    int I;
                             8551 ; 445  |    unsigned int U;
                             8552 ; 446  |} mix_micinvr_type;
                             8553 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             8554 ; 448  |
                             8555 ; 449  |
                             8556 ; 450  |
                             8557 ; 451  |
                             8558 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             8559 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             8560 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             8561 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             8562 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             8563 ; 457  |
                             8564 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             8565 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             8566 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             8567 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             8568 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             8569 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             8570 ; 464  |
                             8571 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             8572 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             8573 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             8574 ; 468  |
                             8575 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             8576 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             8577 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             8578 ; 472  |
                             8579 ; 473  |typedef union               
                             8580 ; 474  |{
                             8581 ; 475  |    struct {
                             8582 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             8583 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             8584 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             8585 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             8586 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             8587 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             8588 ; 482  |    } B;
                             8589 ; 483  |    int I;
                             8590 ; 484  |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8591 ; 485  |} mix_line1invr_type;
                             8592 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             8593 ; 487  |
                             8594 ; 488  |
                             8595 ; 489  |
                             8596 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             8597 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             8598 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             8599 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             8600 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             8601 ; 495  |
                             8602 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             8603 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             8604 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             8605 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             8606 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             8607 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             8608 ; 502  |
                             8609 ; 503  |
                             8610 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             8611 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             8612 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             8613 ; 507  |
                             8614 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             8615 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             8616 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             8617 ; 511  |
                             8618 ; 512  |typedef union               
                             8619 ; 513  |{
                             8620 ; 514  |    struct {
                             8621 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             8622 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             8623 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             8624 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             8625 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             8626 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             8627 ; 521  |    } B;
                             8628 ; 522  |    int I;
                             8629 ; 523  |    unsigned int U;
                             8630 ; 524  |} mix_line2invr_type;
                             8631 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             8632 ; 526  |
                             8633 ; 527  |
                             8634 ; 528  |
                             8635 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             8636 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             8637 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             8638 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             8639 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             8640 ; 534  |
                             8641 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             8642 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             8643 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             8644 ; 538  |
                             8645 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             8646 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             8647 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             8648 ; 542  |
                             8649 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             8650 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             8651 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             8652 ; 546  |
                             8653 ; 547  |typedef union               
                             8654 ; 548  |{
                             8655 ; 549  |    struct {
                             8656 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             8657 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             8658 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             8659 ; 553  |    } B;
                             8660 ; 554  |    int I;
                             8661 ; 555  |    unsigned int U;
                             8662 ; 556  |} mix_dacinvr_type;
                             8663 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             8664 ; 558  |
                             8665 ; 559  |
                             8666 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             8667 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             8668 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             8669 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             8670 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             8671 ; 565  |
                             8672 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             8673 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             8674 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             8675 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             8676 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             8677 ; 571  |
                             8678 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             8679 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             8680 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             8681 ; 575  |
                             8682 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             8683 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             8684 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             8685 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             8686 ; 580  |
                             8687 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             8688 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             8689 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             8690 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             8691 ; 585  |
                             8692 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             8693 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             8694 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
                             8695 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             8696 ; 590  |
                             8697 ; 591  |typedef union               
                             8698 ; 592  |{
                             8699 ; 593  |    struct {
                             8700 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             8701 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             8702 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             8703 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             8704 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             8705 ; 599  |    } B;
                             8706 ; 600  |    int I;
                             8707 ; 601  |    unsigned int U;
                             8708 ; 602  |} mix_recselr_type;
                             8709 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             8710 ; 604  |
                             8711 ; 605  |
                             8712 ; 606  |
                             8713 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             8714 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             8715 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             8716 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             8717 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             8718 ; 612  |
                             8719 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             8720 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             8721 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             8722 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             8723 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             8724 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             8725 ; 619  |
                             8726 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             8727 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             8728 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             8729 ; 623  |
                             8730 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             8731 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             8732 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             8733 ; 627  |
                             8734 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             8735 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             8736 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             8737 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             8738 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             8739 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             8740 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             8741 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             8742 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             8743 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             8744 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             8745 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             8746 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             8747 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             8748 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             8749 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             8750 ; 644  |
                             8751 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             8752 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             8753 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             8754 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             8755 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             8756 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             8757 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             8758 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             8759 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             8760 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             8761 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             8762 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             8763 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             8764 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             8765 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             8766 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             8767 ; 661  |
                             8768 ; 662  |typedef union               
                             8769 ; 663  |{
                             8770 ; 664  |    struct {
                             8771 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             8772 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             8773 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             8774 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             8775 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             8776 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             8777 ; 671  |    } B;
                             8778 ; 672  |    int I;
                             8779 ; 673  |    unsigned int U;
                             8780 ; 674  |} mix_adcgainr_type;
                             8781 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             8782 ; 676  |
                             8783 ; 677  |
                             8784 ; 678  |
                             8785 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             8786 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             8787 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             8788 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             8789 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             8790 ; 684  |
                             8791 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             8792 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             8793 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             8794 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             8795 ; 689  |
                             8796 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             8797 ; 691  |
                             8798 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             8799 ; 693  |
                             8800 ; 694  |typedef union               
                             8801 ; 695  |{
                             8802 ; 696  |    struct {
                             8803 ; 697  |                int                     : 9;
                             8804 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             8805 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             8806 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             8807 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             8808 ; 702  |    } B;
                             8809 ; 703  |    int I;
                             8810 ; 704  |    unsigned int U;
                             8811 ; 705  |} mix_pwrdnr_type;
                             8812 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             8813 ; 707  |
                             8814 ; 708  |
                             8815 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             8816 ; 710  |
                             8817 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             8818 ; 712  |
                             8819 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             8820 ; 714  |
                             8821 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             8822 ; 716  |
                             8823 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             8824 ; 718  |
                             8825 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             8826 ; 720  |
                             8827 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             8828 ; 722  |
                             8829 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             8830 ; 724  |
                             8831 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             8832 ; 726  |
                             8833 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             8834 ; 728  |
                             8835 ; 729  |
                             8836 ; 730  |
                             8837 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             8838 ; 732  |
                             8839 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             8840 ; 734  |
                             8841 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8842 ; 736  |
                             8843 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             8844 ; 738  |
                             8845 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             8846 ; 740  |
                             8847 ; 741  |
                             8848 ; 742  |
                             8849 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        
                             8850 ; 744  |
                             8851 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             8852 ; 746  |
                             8853 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             8854 ; 748  |
                             8855 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 
                             8856 ; 750  |
                             8857 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 
                             8858 ; 752  |
                             8859 ; 753  |
                             8860 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             8861 ; 755  |
                             8862 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     
                             8863 ; 757  |
                             8864 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             8865 ; 759  |
                             8866 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             8867 ; 761  |
                             8868 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             8869 ; 763  |
                             8870 ; 764  |
                             8871 ; 765  |typedef union               
                             8872 ; 766  |{
                             8873 ; 767  |    struct {
                             8874 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             8875 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             8876 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             8877 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             8878 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             8879 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             8880 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             8881 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             8882 ; 776  |    } B;
                             8883 ; 777  |    int I;
                             8884 ; 778  |    unsigned int U;
                             8885 ; 779  |} mix_test_type;
                             8886 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */
                             8887 ; 781  |
                             8888 ; 782  |
                             8889 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             8890 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             8891 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             8892 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             8893 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             8894 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             8895 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             8896 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             8897 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             8898 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             8899 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             8900 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             8901 ; 795  |
                             8902 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             8903 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             8904 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             8905 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             8906 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             8907 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             8908 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             8909 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             8910 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             8911 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             8912 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             8913 ; 807  |
                             8914 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
                             8915 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
                             8916 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
                             8917 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
                             8918 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
                             8919 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
                             8920 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
                             8921 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
                             8922 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
                             8923 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)
                             8924 ; 818  |
                             8925 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             8926 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             8927 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             8928 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             8929 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             8930 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             8931 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             8932 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             8933 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             8934 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             8935 ; 829  |
                             8936 ; 830  |typedef union               
                             8937 ; 831  |{
                             8938 ; 832  |    struct {
                             8939 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             8940 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             8941 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             8942 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             8943 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             8944 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             8945 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             8946 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             8947 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             8948 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             8949 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             8950 ; 844  |    } B;
                             8951 ; 845  |    int I;
                             8952 ; 846  |    unsigned int U;
                             8953 ; 847  |} ref_ctrl_type;
                             8954 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             8955 ; 849  |
                             8956 ; 850  |
                             8957 ; 851  |
                             8958 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             8959 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             8960 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             8961 ; 855  |//////  DAC Registers
                             8962 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             8963 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             8964 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             8965 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             8966 ; 860  |
                             8967 ; 861  |
                             8968 ; 862  |
                             8969 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             8970 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             8971 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             8972 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             8973 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             8974 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             8975 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             8976 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             8977 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             8978 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             8979 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             8980 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             8981 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             8982 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             8983 ; 877  |
                             8984 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             8985 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             8986 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             8987 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             8988 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             8989 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             8990 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             8991 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             8992 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             8993 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             8994 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             8995 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             8996 ; 890  |
                             8997 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             8998 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             8999 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             9000 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             9001 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             9002 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             9003 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             9004 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             9005 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             9006 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             9007 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             9008 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             9009 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             9010 ; 904  |
                             9011 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             9012 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             9013 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             9014 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             9015 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             9016 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             9017 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             9018 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             9019 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             9020 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             9021 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             9022 ; 916  |
                             9023 ; 917  |
                             9024 ; 918  |typedef union               
                             9025 ; 919  |{
                             9026 ; 920  |    struct {
                             9027 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             9028 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             9029 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             9030 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             9031 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             9032 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             9033 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             9034 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             9035 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             9036 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             9037 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             9038 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             9039 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             9040 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             9041 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             9042 ; 936  |    } B;
                             9043 ; 937  |    int I;
                             9044 ; 938  |    unsigned int U;
                             9045 ; 939  |} dac_csr_type;
                             9046 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             9047 ; 941  |
                             9048 ; 942  |
                             9049 ; 943  |
                             9050 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             9051 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             9052 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             9053 ; 947  |
                             9054 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             9055 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             9056 ; 950  |
                             9057 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             9058 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             9059 ; 953  |
                             9060 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             9061 ; 955  |
                             9062 ; 956  |typedef union               
                             9063 ; 957  |{
                             9064 ; 958  |    struct {
                             9065 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             9066 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             9067 ; 961  |    } B;
                             9068 ; 962  |    int I;
                             9069 ; 963  |    unsigned int U;
                             9070 ; 964  |} dac_srr_type;
                             9071 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             9072 ; 966  |
                             9073 ; 967  |
                             9074 ; 968  |
                             9075 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             9076 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             9077 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             9078 ; 972  |
                             9079 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             9080 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             9081 ; 975  |
                             9082 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             9083 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                             9084 ; 978  |
                             9085 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             9086 ; 980  |
                             9087 ; 981  |typedef union               
                             9088 ; 982  |{
                             9089 ; 983  |    struct {
                             9090 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             9091 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             9092 ; 986  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9093 ; 987  |    int I;
                             9094 ; 988  |    unsigned int U;
                             9095 ; 989  |} dac_wcr_type;
                             9096 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             9097 ; 991  |
                             9098 ; 992  |
                             9099 ; 993  |
                             9100 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             9101 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             9102 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             9103 ; 997  |
                             9104 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             9105 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             9106 ; 1000 |
                             9107 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             9108 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                             9109 ; 1003 |
                             9110 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             9111 ; 1005 |
                             9112 ; 1006 |typedef union               
                             9113 ; 1007 |{
                             9114 ; 1008 |    struct {
                             9115 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             9116 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             9117 ; 1011 |    } B;
                             9118 ; 1012 |    int I;
                             9119 ; 1013 |    unsigned int U;
                             9120 ; 1014 |} dac_cpr_type;
                             9121 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             9122 ; 1016 |
                             9123 ; 1017 |
                             9124 ; 1018 |
                             9125 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             9126 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             9127 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             9128 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             9129 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             9130 ; 1024 |
                             9131 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             9132 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             9133 ; 1027 |
                             9134 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             9135 ; 1029 |
                             9136 ; 1030 |typedef union               
                             9137 ; 1031 |{
                             9138 ; 1032 |    struct {
                             9139 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             9140 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             9141 ; 1035 |    } B;
                             9142 ; 1036 |    int I;
                             9143 ; 1037 |    unsigned int U;
                             9144 ; 1038 |} dac_mr_type;
                             9145 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             9146 ; 1040 |
                             9147 ; 1041 |
                             9148 ; 1042 |
                             9149 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             9150 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             9151 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             9152 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             9153 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             9154 ; 1048 |
                             9155 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             9156 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                             9157 ; 1051 |
                             9158 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             9159 ; 1053 |
                             9160 ; 1054 |typedef union               
                             9161 ; 1055 |{
                             9162 ; 1056 |    struct {
                             9163 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             9164 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             9165 ; 1059 |    } B;
                             9166 ; 1060 |    int I;
                             9167 ; 1061 |    unsigned int U;
                             9168 ; 1062 |} dac_bar_type;
                             9169 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             9170 ; 1064 |
                             9171 ; 1065 |
                             9172 ; 1066 |
                             9173 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             9174 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             9175 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             9176 ; 1070 |
                             9177 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             9178 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             9179 ; 1073 |
                             9180 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                             9181 ; 1075 |
                             9182 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             9183 ; 1077 |
                             9184 ; 1078 |typedef union               
                             9185 ; 1079 |{
                             9186 ; 1080 |    struct {
                             9187 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             9188 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             9189 ; 1083 |    } B;
                             9190 ; 1084 |    int I;
                             9191 ; 1085 |    unsigned int U;
                             9192 ; 1086 |} dac_icr_type;
                             9193 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             9194 ; 1088 |
                             9195 ; 1089 |
                             9196 ; 1090 |
                             9197 ; 1091 |
                             9198 ; 1092 |
                             9199 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             9200 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             9201 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             9202 ; 1096 |//////  ADC Registers
                             9203 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             9204 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             9205 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             9206 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             9207 ; 1101 |
                             9208 ; 1102 |
                             9209 ; 1103 |
                             9210 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             9211 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             9212 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             9213 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             9214 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             9215 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             9216 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             9217 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             9218 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             9219 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             9220 ; 1114 |
                             9221 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             9222 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             9223 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             9224 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             9225 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             9226 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             9227 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             9228 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             9229 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             9230 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             9231 ; 1125 |
                             9232 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             9233 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             9234 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             9235 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             9236 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             9237 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
                             9238 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
                             9239 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             9240 ; 1134 |
                             9241 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             9242 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             9243 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             9244 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             9245 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             9246 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             9247 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             9248 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             9249 ; 1143 |
                             9250 ; 1144 |typedef union               
                             9251 ; 1145 |{
                             9252 ; 1146 |    struct {
                             9253 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             9254 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             9255 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             9256 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             9257 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             9258 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             9259 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             9260 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             9261 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             9262 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             9263 ; 1157 |    } B;
                             9264 ; 1158 |    int I;
                             9265 ; 1159 |    unsigned int U;
                             9266 ; 1160 |} adc_csr_type;
                             9267 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             9268 ; 1162 |
                             9269 ; 1163 |
                             9270 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             9271 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             9272 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             9273 ; 1167 |
                             9274 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             9275 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             9276 ; 1170 |
                             9277 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                             9278 ; 1172 |
                             9279 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             9280 ; 1174 |
                             9281 ; 1175 |typedef union               
                             9282 ; 1176 |{
                             9283 ; 1177 |    struct {
                             9284 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             9285 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             9286 ; 1180 |    } B;
                             9287 ; 1181 |    int I;
                             9288 ; 1182 |    unsigned int U;
                             9289 ; 1183 |} adc_wcr_type;
                             9290 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             9291 ; 1185 |
                             9292 ; 1186 |
                             9293 ; 1187 |
                             9294 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             9295 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             9296 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             9297 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             9298 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             9299 ; 1193 |
                             9300 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             9301 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                             9302 ; 1196 |
                             9303 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             9304 ; 1198 |
                             9305 ; 1199 |typedef union               
                             9306 ; 1200 |{
                             9307 ; 1201 |    struct {
                             9308 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             9309 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             9310 ; 1204 |    } B;
                             9311 ; 1205 |    int I;
                             9312 ; 1206 |    unsigned int U;
                             9313 ; 1207 |} adc_bar_type;
                             9314 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             9315 ; 1209 |
                             9316 ; 1210 |
                             9317 ; 1211 |
                             9318 ; 1212 |
                             9319 ; 1213 |
                             9320 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             9321 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             9322 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             9323 ; 1217 |
                             9324 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             9325 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             9326 ; 1220 |
                             9327 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                             9328 ; 1222 |
                             9329 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             9330 ; 1224 |
                             9331 ; 1225 |typedef union               
                             9332 ; 1226 |{
                             9333 ; 1227 |    struct {
                             9334 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             9335 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             9336 ; 1230 |    } B;
                             9337 ; 1231 |    int I;
                             9338 ; 1232 |    unsigned int U;
                             9339 ; 1233 |} adc_cpr_type;
                             9340 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             9341 ; 1235 |
                             9342 ; 1236 |
                             9343 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9344 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             9345 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             9346 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             9347 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             9348 ; 1242 |
                             9349 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             9350 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             9351 ; 1245 |
                             9352 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             9353 ; 1247 |
                             9354 ; 1248 |typedef union               
                             9355 ; 1249 |{
                             9356 ; 1250 |    struct {
                             9357 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             9358 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             9359 ; 1253 |    } B;
                             9360 ; 1254 |    int I;
                             9361 ; 1255 |    unsigned int U;
                             9362 ; 1256 |} adc_mr_type;
                             9363 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             9364 ; 1258 |
                             9365 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             9366 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             9367 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             9368 ; 1262 |
                             9369 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             9370 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             9371 ; 1265 |
                             9372 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             9373 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             9374 ; 1268 |
                             9375 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             9376 ; 1270 |
                             9377 ; 1271 |typedef union               
                             9378 ; 1272 |{
                             9379 ; 1273 |    struct {
                             9380 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             9381 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             9382 ; 1276 |    } B;
                             9383 ; 1277 |    int I;
                             9384 ; 1278 |    unsigned int U;
                             9385 ; 1279 |} adc_srr_type;
                             9386 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             9387 ; 1281 |
                             9388 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             9389 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             9390 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             9391 ; 1285 |
                             9392 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             9393 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             9394 ; 1288 |
                             9395 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                             9396 ; 1290 |
                             9397 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             9398 ; 1292 |
                             9399 ; 1293 |typedef union               
                             9400 ; 1294 |{
                             9401 ; 1295 |    struct {
                             9402 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             9403 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             9404 ; 1298 |    } B;
                             9405 ; 1299 |    int I;
                             9406 ; 1300 |    unsigned int U;
                             9407 ; 1301 |} adc_icr_type;
                             9408 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             9409 ; 1303 |
                             9410 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             9411 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             9412 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             9413 ; 1307 |
                             9414 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             9415 ; 1309 |
                             9416 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             9417 ; 1311 |
                             9418 ; 1312 |#endif
                             9419 ; 1313 |
                             9420 
                             9422 
                             9423 ; 20   |#include "regsdcdc.h"
                             9424 
                             9426 
                             9427 ; 1    |#if !(defined(regsdcdcinc))
                             9428 ; 2    |
                             9429 ; 3    |#define regssysteminc 1
                             9430 ; 4    |
                             9431 ; 5    |
                             9432 ; 6    |
                             9433 ; 7    |#include "types.h"
                             9434 
                             9436 
                             9437 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9438 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9439 ; 3    |//
                             9440 ; 4    |// Filename: types.h
                             9441 ; 5    |// Description: Standard data types
                             9442 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9443 ; 7    |
                             9444 ; 8    |#ifndef _TYPES_H
                             9445 ; 9    |#define _TYPES_H
                             9446 ; 10   |
                             9447 ; 11   |// TODO:  move this outta here!
                             9448 ; 12   |#if !defined(NOERROR)
                             9449 ; 13   |#define NOERROR 0
                             9450 ; 14   |#define SUCCESS 0
                             9451 ; 15   |#endif 
                             9452 ; 16   |#if !defined(SUCCESS)
                             9453 ; 17   |#define SUCCESS  0
                             9454 ; 18   |#endif
                             9455 ; 19   |#if !defined(ERROR)
                             9456 ; 20   |#define ERROR   -1
                             9457 ; 21   |#endif
                             9458 ; 22   |#if !defined(FALSE)
                             9459 ; 23   |#define FALSE 0
                             9460 ; 24   |#endif
                             9461 ; 25   |#if !defined(TRUE)
                             9462 ; 26   |#define TRUE  1
                             9463 ; 27   |#endif
                             9464 ; 28   |
                             9465 ; 29   |#if !defined(NULL)
                             9466 ; 30   |#define NULL 0
                             9467 ; 31   |#endif
                             9468 ; 32   |
                             9469 ; 33   |#define MAX_INT     0x7FFFFF
                             9470 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9471 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9472 ; 36   |#define MAX_ULONG   (-1) 
                             9473 ; 37   |
                             9474 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9475 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9476 ; 40   |
                             9477 ; 41   |
                             9478 ; 42   |#define BYTE    unsigned char       // btVarName
                             9479 ; 43   |#define CHAR    signed char         // cVarName
                             9480 ; 44   |#define USHORT  unsigned short      // usVarName
                             9481 ; 45   |#define SHORT   unsigned short      // sVarName
                             9482 ; 46   |#define WORD    unsigned int        // wVarName
                             9483 ; 47   |#define INT     signed int          // iVarName
                             9484 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9485 ; 49   |#define LONG    signed long         // lVarName
                             9486 ; 50   |#define BOOL    unsigned int        // bVarName
                             9487 ; 51   |#define FRACT   _fract              // frVarName
                             9488 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9489 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9490 ; 54   |#define FLOAT   float               // fVarName
                             9491 ; 55   |#define DBL     double              // dVarName
                             9492 ; 56   |#define ENUM    enum                // eVarName
                             9493 ; 57   |#define CMX     _complex            // cmxVarName
                             9494 ; 58   |typedef WORD UCS3;                   // 
                             9495 ; 59   |
                             9496 ; 60   |#define UINT16  unsigned short
                             9497 ; 61   |#define UINT8   unsigned char   
                             9498 ; 62   |#define UINT32  unsigned long
                             9499 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9500 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9501 ; 65   |#define WCHAR   UINT16
                             9502 ; 66   |
                             9503 ; 67   |//UINT128 is 16 bytes or 6 words
                             9504 ; 68   |typedef struct UINT128_3500 {   
                             9505 ; 69   |    int val[6];     
                             9506 ; 70   |} UINT128_3500;
                             9507 ; 71   |
                             9508 ; 72   |#define UINT128   UINT128_3500
                             9509 ; 73   |
                             9510 ; 74   |// Little endian word packed byte strings:   
                             9511 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9512 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9513 ; 77   |// Little endian word packed byte strings:   
                             9514 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9515 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9516 ; 80   |
                             9517 ; 81   |// Declare Memory Spaces To Use When Coding
                             9518 ; 82   |// A. Sector Buffers
                             9519 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9520 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9521 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9522 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9523 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9524 ; 88   |// B. Media DDI Memory
                             9525 ; 89   |#define MEDIA_DDI_MEM _Y
                             9526 ; 90   |
                             9527 ; 91   |
                             9528 ; 92   |
                             9529 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9530 ; 94   |// Examples of circular pointers:
                             9531 ; 95   |//    INT CIRC cpiVarName
                             9532 ; 96   |//    DWORD CIRC cpdwVarName
                             9533 ; 97   |
                             9534 ; 98   |#define RETCODE INT                 // rcVarName
                             9535 ; 99   |
                             9536 ; 100  |// generic bitfield structure
                             9537 ; 101  |struct Bitfield {
                             9538 ; 102  |    unsigned int B0  :1;
                             9539 ; 103  |    unsigned int B1  :1;
                             9540 ; 104  |    unsigned int B2  :1;
                             9541 ; 105  |    unsigned int B3  :1;
                             9542 ; 106  |    unsigned int B4  :1;
                             9543 ; 107  |    unsigned int B5  :1;
                             9544 ; 108  |    unsigned int B6  :1;
                             9545 ; 109  |    unsigned int B7  :1;
                             9546 ; 110  |    unsigned int B8  :1;
                             9547 ; 111  |    unsigned int B9  :1;
                             9548 ; 112  |    unsigned int B10 :1;
                             9549 ; 113  |    unsigned int B11 :1;
                             9550 ; 114  |    unsigned int B12 :1;
                             9551 ; 115  |    unsigned int B13 :1;
                             9552 ; 116  |    unsigned int B14 :1;
                             9553 ; 117  |    unsigned int B15 :1;
                             9554 ; 118  |    unsigned int B16 :1;
                             9555 ; 119  |    unsigned int B17 :1;
                             9556 ; 120  |    unsigned int B18 :1;
                             9557 ; 121  |    unsigned int B19 :1;
                             9558 ; 122  |    unsigned int B20 :1;
                             9559 ; 123  |    unsigned int B21 :1;
                             9560 ; 124  |    unsigned int B22 :1;
                             9561 ; 125  |    unsigned int B23 :1;
                             9562 ; 126  |};
                             9563 ; 127  |
                             9564 ; 128  |union BitInt {
                             9565 ; 129  |        struct Bitfield B;
                             9566 ; 130  |        int        I;
                             9567 ; 131  |};
                             9568 ; 132  |
                             9569 ; 133  |#define MAX_MSG_LENGTH 10
                             9570 ; 134  |struct CMessage
                             9571 ; 135  |{
                             9572 ; 136  |        unsigned int m_uLength;
                             9573 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9574 ; 138  |};
                             9575 ; 139  |
                             9576 ; 140  |typedef struct {
                             9577 ; 141  |    WORD m_wLength;
                             9578 ; 142  |    WORD m_wMessage;
                             9579 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9580 ; 144  |} Message;
                             9581 ; 145  |
                             9582 ; 146  |struct MessageQueueDescriptor
                             9583 ; 147  |{
                             9584 ; 148  |        int *m_pBase;
                             9585 ; 149  |        int m_iModulo;
                             9586 ; 150  |        int m_iSize;
                             9587 ; 151  |        int *m_pHead;
                             9588 ; 152  |        int *m_pTail;
                             9589 ; 153  |};
                             9590 ; 154  |
                             9591 ; 155  |struct ModuleEntry
                             9592 ; 156  |{
                             9593 ; 157  |    int m_iSignaledEventMask;
                             9594 ; 158  |    int m_iWaitEventMask;
                             9595 ; 159  |    int m_iResourceOfCode;
                             9596 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9597 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9598 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9599 ; 163  |    int m_uTimeOutHigh;
                             9600 ; 164  |    int m_uTimeOutLow;
                             9601 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9602 ; 166  |};
                             9603 ; 167  |
                             9604 ; 168  |union WaitMask{
                             9605 ; 169  |    struct B{
                             9606 ; 170  |        unsigned int m_bNone     :1;
                             9607 ; 171  |        unsigned int m_bMessage  :1;
                             9608 ; 172  |        unsigned int m_bTimer    :1;
                             9609 ; 173  |        unsigned int m_bButton   :1;
                             9610 ; 174  |    } B;
                             9611 ; 175  |    int I;
                             9612 ; 176  |} ;
                             9613 ; 177  |
                             9614 ; 178  |
                             9615 ; 179  |struct Button {
                             9616 ; 180  |        WORD wButtonEvent;
                             9617 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9618 ; 182  |};
                             9619 ; 183  |
                             9620 ; 184  |struct Message {
                             9621 ; 185  |        WORD wMsgLength;
                             9622 ; 186  |        WORD wMsgCommand;
                             9623 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9624 ; 188  |};
                             9625 ; 189  |
                             9626 ; 190  |union EventTypes {
                             9627 ; 191  |        struct CMessage msg;
                             9628 ; 192  |        struct Button Button ;
                             9629 ; 193  |        struct Message Message;
                             9630 ; 194  |};
                             9631 ; 195  |
                             9632 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9633 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9634 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9635 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9636 ; 200  |
                             9637 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9638 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9639 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9640 ; 204  |
                             9641 ; 205  |#if DEBUG
                             9642 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9643 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9644 ; 208  |#else 
                             9645 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9646 ; 210  |#define DebugBuildAssert(x)    
                             9647 ; 211  |#endif
                             9648 ; 212  |
                             9649 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9650 ; 214  |//  #pragma asm
                             9651 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9652 ; 216  |//  #pragma endasm
                             9653 ; 217  |
                             9654 ; 218  |
                             9655 ; 219  |#ifdef COLOR_262K
                             9656 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9657 ; 221  |#elif defined(COLOR_65K)
                             9658 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9659 ; 223  |#else
                             9660 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9661 ; 225  |#endif
                             9662 ; 226  |    
                             9663 ; 227  |#endif // #ifndef _TYPES_H
                             9664 
                             9666 
                             9667 ; 8    |
                             9668 ; 9    |
                             9669 ; 10   |
                             9670 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9671 ; 12   |
                             9672 ; 13   |//   SYSTEM STMP Registers 
                             9673 ; 14   |//      Last Edited 2.19.2003 M. May
                             9674 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9675 ; 16   |
                             9676 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             9677 ; 18   |
                             9678 ; 19   |
                             9679 ; 20   |
                             9680 ; 21   |
                             9681 ; 22   |
                             9682 ; 23   |
                             9683 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             9684 ; 25   |
                             9685 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             9686 ; 27   |
                             9687 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             9688 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             9689 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             9690 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             9691 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             9692 ; 33   |
                             9693 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             9694 ; 35   |
                             9695 ; 36   |
                             9696 ; 37   |
                             9697 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             9698 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             9699 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             9700 ; 41   |
                             9701 ; 42   |
                             9702 ; 43   |
                             9703 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBU_BITPOS)        
                             9704 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBO_BITPOS) 
                             9705 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NLEV_BITPOS)  
                             9706 ; 47   |
                             9707 ; 48   |
                             9708 ; 49   |
                             9709 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             9710 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             9711 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             9712 ; 53   |
                             9713 ; 54   |
                             9714 ; 55   |
                             9715 ; 56   |
                             9716 ; 57   |
                             9717 ; 58   |typedef union               
                             9718 ; 59   |{
                             9719 ; 60   |    struct {
                             9720 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             9721 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             9722 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             9723 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             9724 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             9725 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             9726 ; 67   |    } B;
                             9727 ; 68   |    unsigned int I;
                             9728 ; 69   |} dcdc1_ctrl0_type;
                             9729 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Limit Level Register */
                             9730 ; 71   |
                             9731 ; 72   |
                             9732 ; 73   |
                             9733 ; 74   |
                             9734 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             9735 ; 76   |
                             9736 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             9737 ; 78   |
                             9738 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             9739 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             9740 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             9741 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             9742 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             9743 ; 84   |
                             9744 ; 85   |
                             9745 ; 86   |
                             9746 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             9747 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             9748 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             9749 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             9750 ; 91   |
                             9751 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS)        
                             9752 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS) 
                             9753 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FFOR_BITPOS)  
                             9754 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CTRL1_PFMCTRL_BITPOS)   
                             9755 ; 96   |
                             9756 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             9757 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             9758 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             9759 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             9760 ; 101  |
                             9761 ; 102  |
                             9762 ; 103  |typedef union               
                             9763 ; 104  |{
                             9764 ; 105  |    struct {
                             9765 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             9766 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             9767 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             9768 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             9769 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             9770 ; 111  |    } B;
                             9771 ; 112  |    unsigned int I;
                             9772 ; 113  |} dcdc1_ctrl1_type;
                             9773 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 Ctrl #1 Register */
                             9774 ; 115  |
                             9775 ; 116  |
                             9776 ; 117  |
                             9777 ; 118  |
                             9778 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             9779 ; 120  |
                             9780 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             9781 ; 122  |
                             9782 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             9783 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             9784 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             9785 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             9786 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             9787 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             9788 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             9789 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             9790 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             9791 ; 132  |
                             9792 ; 133  |
                             9793 ; 134  |
                             9794 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             9795 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             9796 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             9797 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             9798 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             9799 ; 140  |
                             9800 ; 141  |
                             9801 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             9802 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             9803 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             9804 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             9805 ; 146  |
                             9806 ; 147  |
                             9807 ; 148  |
                             9808 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
                             9809 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
                             9810 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
                             9811 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  
                             9812 ; 153  |
                             9813 ; 154  |
                             9814 ; 155  |typedef union               
                             9815 ; 156  |{
                             9816 ; 157  |    struct {
                             9817 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             9818 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             9819 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             9820 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             9821 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             9822 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             9823 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             9824 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             9825 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             9826 ; 167  |    } B;
                             9827 ; 168  |    unsigned int I;
                             9828 ; 169  |} dcdc_vddio_type;
                             9829 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDIO Register */
                             9830 ; 171  |
                             9831 ; 172  |
                             9832 ; 173  |
                             9833 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             9834 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             9835 ; 176  |
                             9836 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             9837 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             9838 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             9839 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             9840 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             9841 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             9842 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             9843 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             9844 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             9845 ; 186  |
                             9846 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             9847 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             9848 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             9849 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9850 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             9851 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             9852 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             9853 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             9854 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             9855 ; 196  |
                             9856 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
                             9857 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             9858 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
                             9859 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  
                             9860 ; 201  |
                             9861 ; 202  |typedef union               
                             9862 ; 203  |{
                             9863 ; 204  |    struct {
                             9864 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             9865 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             9866 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             9867 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             9868 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             9869 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             9870 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             9871 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             9872 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             9873 ; 214  |    } B;
                             9874 ; 215  |   unsigned int I;
                             9875 ; 216  |        unsigned U;
                             9876 ; 217  |} dcdc_vddd_type;
                             9877 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD Register */
                             9878 ; 219  |
                             9879 ; 220  |
                             9880 ; 221  |
                             9881 ; 222  |
                             9882 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             9883 ; 224  |
                             9884 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             9885 ; 226  |
                             9886 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             9887 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             9888 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             9889 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             9890 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             9891 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             9892 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             9893 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             9894 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             9895 ; 236  |
                             9896 ; 237  |
                             9897 ; 238  |
                             9898 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             9899 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             9900 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             9901 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             9902 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             9903 ; 244  |
                             9904 ; 245  |
                             9905 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             9906 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             9907 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             9908 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             9909 ; 250  |
                             9910 ; 251  |
                             9911 ; 252  |
                             9912 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
                             9913 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             9914 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
                             9915 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  
                             9916 ; 257  |
                             9917 ; 258  |
                             9918 ; 259  |typedef union               
                             9919 ; 260  |{
                             9920 ; 261  |    struct {
                             9921 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             9922 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             9923 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             9924 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             9925 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             9926 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             9927 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             9928 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             9929 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             9930 ; 271  |    } B;
                             9931 ; 272  |    unsigned int I;
                             9932 ; 273  |} dcdc_vdda_type;
                             9933 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA Register */
                             9934 ; 275  |
                             9935 ; 276  |
                             9936 ; 277  |
                             9937 ; 278  |
                             9938 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             9939 ; 280  |
                             9940 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             9941 ; 282  |
                             9942 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             9943 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             9944 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             9945 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             9946 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             9947 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             9948 ; 289  |
                             9949 ; 290  |
                             9950 ; 291  |
                             9951 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             9952 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             9953 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             9954 ; 295  |
                             9955 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBU_BITPOS)        
                             9956 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBO_BITPOS) 
                             9957 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NLEV_BITPOS)  
                             9958 ; 299  |
                             9959 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             9960 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             9961 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             9962 ; 303  |
                             9963 ; 304  |
                             9964 ; 305  |typedef union               
                             9965 ; 306  |{
                             9966 ; 307  |    struct {
                             9967 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             9968 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             9969 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             9970 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             9971 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             9972 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             9973 ; 314  |    } B;
                             9974 ; 315  |    unsigned int I;
                             9975 ; 316  |} dcdc2_ctrl0_type; 
                             9976 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 Limit Level Register */
                             9977 ; 318  |
                             9978 ; 319  |
                             9979 ; 320  |
                             9980 ; 321  |
                             9981 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             9982 ; 323  |
                             9983 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             9984 ; 325  |
                             9985 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             9986 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             9987 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             9988 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             9989 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             9990 ; 331  |
                             9991 ; 332  |
                             9992 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             9993 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             9994 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             9995 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             9996 ; 337  |
                             9997 ; 338  |
                             9998 ; 339  |
                             9999 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS)        
                            10000 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS) 
                            10001 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FFOR_BITPOS)  
                            10002 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CTRL1_PFMCTRL_BITPOS)  
                            10003 ; 344  |
                            10004 ; 345  |
                            10005 ; 346  |
                            10006 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                            10007 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                            10008 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                            10009 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                            10010 ; 351  |
                            10011 ; 352  |
                            10012 ; 353  |typedef union               
                            10013 ; 354  |{
                            10014 ; 355  |    struct {
                            10015 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                            10016 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                            10017 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                            10018 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                            10019 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                            10020 ; 361  |    } B;
                            10021 ; 362  |    unsigned int I;
                            10022 ; 363  |} dcdc2_ctrl1_type;
                            10023 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 Ctrl Register #1 */
                            10024 ; 365  |
                            10025 ; 366  |
                            10026 ; 367  |
                            10027 ; 368  |
                            10028 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                            10029 ; 370  |
                            10030 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                            10031 ; 372  |
                            10032 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                            10033 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                            10034 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                            10035 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                            10036 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                            10037 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                            10038 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                            10039 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                            10040 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                            10041 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                            10042 ; 383  |
                            10043 ; 384  |
                            10044 ; 385  |
                            10045 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                            10046 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                            10047 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                            10048 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                            10049 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                            10050 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                            10051 ; 392  |
                            10052 ; 393  |
                            10053 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWRUP_BITPOS)        
                            10054 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC1_START_COUNT_BITPOS)        
                            10055 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BITPOS) 
                            10056 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWRUP_BITPOS)        
                            10057 ; 398  |
                            10058 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC2_START_COUNT_BITPOS)        
                            10059 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BITPOS) 
                            10060 ; 401  |
                            10061 ; 402  |
                            10062 ; 403  |
                            10063 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                            10064 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                            10065 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                            10066 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                            10067 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                            10068 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                            10069 ; 410  |
                            10070 ; 411  |
                            10071 ; 412  |typedef union               
                            10072 ; 413  |{
                            10073 ; 414  |    struct {
                            10074 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                            10075 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                            10076 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                            10077 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                            10078 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                            10079 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                            10080 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                            10081 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                            10082 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                            10083 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                            10084 ; 425  |    } B;
                            10085 ; 426  |    unsigned int I;
                            10086 ; 427  |} speed_type;
                            10087 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement Register */
                            10088 ; 429  |
                            10089 ; 430  |
                            10090 ; 431  |
                            10091 ; 432  |
                            10092 ; 433  |
                            10093 ; 434  |
                            10094 ; 435  |
                            10095 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                            10096 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                            10097 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                            10098 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                            10099 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                            10100 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10101 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                            10102 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                            10103 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                            10104 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                            10105 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                            10106 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                            10107 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                            10108 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                            10109 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                            10110 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                            10111 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                            10112 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                            10113 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                            10114 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                            10115 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                            10116 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                            10117 ; 458  |
                            10118 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                            10119 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                            10120 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                            10121 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                            10122 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                            10123 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                            10124 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                            10125 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                            10126 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                            10127 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                            10128 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                            10129 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                            10130 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                            10131 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                            10132 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                            10133 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                            10134 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                            10135 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                            10136 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                            10137 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                            10138 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                            10139 ; 480  |
                            10140 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)
                            10141 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
                            10142 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                            10143 ; 484  |
                            10144 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                            10145 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                            10146 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                            10147 ; 488  |
                            10148 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the change should happen
                            10149 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                            10150 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                            10151 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)+((1<<HW_DCDC_TBR_DC
                                  DC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                            10152 ; 493  |
                            10153 ; 494  |typedef union               
                            10154 ; 495  |{
                            10155 ; 496  |    struct {
                            10156 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                            10157 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                            10158 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                            10159 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                            10160 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                            10161 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                            10162 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                            10163 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                            10164 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                            10165 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                            10166 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                            10167 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                            10168 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                            10169 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                            10170 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                            10171 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                            10172 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                            10173 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                            10174 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                            10175 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                            10176 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                            10177 ; 518  |    } B;
                            10178 ; 519  |    unsigned int I;
                            10179 ; 520  |} usb_dcdctbr_type;
                            10180 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))    /* Analog test bit register*/
                            10181 ; 522  |
                            10182 ; 523  |
                            10183 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                            10184 ; 525  |
                            10185 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                            10186 ; 527  |
                            10187 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                            10188 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                            10189 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                            10190 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                            10191 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                            10192 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                            10193 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                            10194 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                            10195 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                            10196 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                            10197 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                            10198 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                            10199 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                            10200 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                            10201 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                            10202 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                            10203 ; 544  |
                            10204 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                            10205 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                            10206 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                            10207 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                            10208 ; 549  |
                            10209 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                            10210 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                            10211 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                            10212 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                            10213 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                            10214 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                            10215 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                            10216 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                            10217 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                            10218 ; 559  |
                            10219 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                            10220 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWD_BITPOS)        
                            10221 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_RES_BITPOS) 
                            10222 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_NIMH_BITPOS) 
                            10223 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                            10224 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                            10225 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                            10226 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                            10227 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                            10228 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                            10229 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                            10230 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                            10231 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                            10232 ; 573  |
                            10233 ; 574  |
                            10234 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)     
                            10235 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                            10236 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                            10237 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                            10238 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                            10239 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK)     
                            10240 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK)     
                            10241 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
                            10242 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
                            10243 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
                            10244 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
                            10245 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
                            10246 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 
                            10247 ; 588  |
                            10248 ; 589  |typedef union               
                            10249 ; 590  |{
                            10250 ; 591  |    struct {
                            10251 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                            10252 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                            10253 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                            10254 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                            10255 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                            10256 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                            10257 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
                            10258 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
                            10259 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                            10260 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                            10261 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                            10262 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                            10263 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                            10264 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                            10265 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                            10266 ; 607  |    } B;
                            10267 ; 608  |    unsigned int I;
                            10268 ; 609  |} usb_pwr_charge_type;
                            10269 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /* Analog Persistent Config Register */
                            10270 ; 611  |
                            10271 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                            10272 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                            10273 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                            10274 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                            10275 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                            10276 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                            10277 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                            10278 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                            10279 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                            10280 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                            10281 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                            10282 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                            10283 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                            10284 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                            10285 ; 626  |
                            10286 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                            10287 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                            10288 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                            10289 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                            10290 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                            10291 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                            10292 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                            10293 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                            10294 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                            10295 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                            10296 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                            10297 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                            10298 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                            10299 ; 640  |
                            10300 ; 641  |typedef union               
                            10301 ; 642  |{
                            10302 ; 643  |    struct {       
                            10303 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                            10304 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                            10305 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                            10306 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                            10307 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                            10308 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                            10309 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                            10310 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                            10311 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                            10312 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                            10313 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                            10314 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                            10315 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                            10316 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                            10317 ; 658  |    } B;
                            10318 ; 659  |    int I;
                            10319 ; 660  |} usb_dcdcpersist_type;
                            10320 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15))    /* Analog test bit register*/
                            10321 ; 662  |
                            10322 ; 663  |
                            10323 ; 664  |
                            10324 ; 665  |#endif
                            10325 ; 666  |
                            10326 ; 667  |
                            10327 ; 668  |
                            10328 
                            10330 
                            10331 ; 21   |#include "regsemc.h"
                            10332 
                            10334 
                            10335 ; 1    |#if !(defined(__REGS_EMC_INC))
                            10336 ; 2    |#define __REGS_EMC_INC 1
                            10337 ; 3    |
                            10338 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            10339 ; 5    |//   Module base addresses
                            10340 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            10341 ; 7    |#define HW_EMC_BASEADDR 0xF000
                            10342 ; 8    |
                            10343 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                            10344 ; 10   |//  EMC Registers
                            10345 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                            10346 ; 12   |
                            10347 ; 13   |
                            10348 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                            10349 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                            10350 ; 16   |
                            10351 ; 17   |typedef union               /*Flash Control Register*/
                            10352 ; 18   |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10353 ; 19   |    struct
                            10354 ; 20   |    {
                            10355 ; 21   |    int KICK        :1;
                            10356 ; 22   |    int RW          :1;
                            10357 ; 23   |    int TCIE        :1;
                            10358 ; 24   |    int IRQP        :1;
                            10359 ; 25   |    unsigned MMD    :2;
                            10360 ; 26   |    unsigned NB     :11;
                            10361 ; 27   |    unsigned RSVD   :4;
                            10362 ; 28   |    int SRST        :1;
                            10363 ; 29   |    } B;
                            10364 ; 30   |    int I;
                            10365 ; 31   |} flcr_type;
                            10366 ; 32   |
                            10367 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                            10368 ; 34   |#define HW_FLCR_RW_BITPOS 1
                            10369 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                            10370 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                            10371 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                            10372 ; 38   |#define HW_FLCR_NB_BITPOS 6
                            10373 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                            10374 ; 40   |
                            10375 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                            10376 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                            10377 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                            10378 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                            10379 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                            10380 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                            10381 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                            10382 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                            10383 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                            10384 ; 50   |
                            10385 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                            10386 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                            10387 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                            10388 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                            10389 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                            10390 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                            10391 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                            10392 ; 58   |
                            10393 ; 59   |
                            10394 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            10395 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                            10396 ; 62   |
                            10397 ; 63   |typedef union           /* Flash Start Address Low*/
                            10398 ; 64   |{
                            10399 ; 65   |    struct
                            10400 ; 66   |    {
                            10401 ; 67   |    unsigned XA     : 24;
                            10402 ; 68   |    } B;
                            10403 ; 69   |    int I;
                            10404 ; 70   |} flsalr_type;
                            10405 ; 71   |
                            10406 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                            10407 ; 73   |
                            10408 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                            10409 ; 75   |
                            10410 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                            10411 ; 77   |
                            10412 ; 78   |
                            10413 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                            10414 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                            10415 ; 81   |
                            10416 ; 82   |typedef union           /* Flash Start Address High*/
                            10417 ; 83   |{
                            10418 ; 84   |    struct
                            10419 ; 85   |    {
                            10420 ; 86   |    unsigned XA     :8;
                            10421 ; 87   |    unsigned DA     :16;
                            10422 ; 88   |    } B;
                            10423 ; 89   |    int I;
                            10424 ; 90   |} flsahr_type;
                            10425 ; 91   |
                            10426 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                            10427 ; 93   |
                            10428 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                            10429 ; 95   |
                            10430 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                            10431 ; 97   |
                            10432 ; 98   |
                            10433 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                            10434 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                            10435 ; 101  |
                            10436 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                            10437 ; 103  |{
                            10438 ; 104  |    struct
                            10439 ; 105  |    {
                            10440 ; 106  |        int WP          :1;
                            10441 ; 107  |        int CDP         :1;
                            10442 ; 108  |        unsigned SM     :2;
                            10443 ; 109  |        int XATTR       :1;
                            10444 ; 110  |        int CRST        :1;
                            10445 ; 111  |        int XWT         :1;
                            10446 ; 112  |        int RI          :1;
                            10447 ; 113  |        int IFCE        :1;
                            10448 ; 114  |        int ISCE        :1;
                            10449 ; 115  |        int INCE        :1;
                            10450 ; 116  |        int IFCS        :1;
                            10451 ; 117  |        int ISCS        :1;
                            10452 ; 118  |        int INCS        :1;
                            10453 ; 119  |        unsigned CFAI   :2;
                            10454 ; 120  |        int XDDI        :1;
                            10455 ; 121  |        unsigned CS     :2;
                            10456 ; 122  |        int CRE         :1;
                            10457 ; 123  |        unsigned VS     :2;
                            10458 ; 124  |        int DASP        :1;
                            10459 ; 125  |        int MODE16      :1; 
                            10460 ; 126  |    } B;
                            10461 ; 127  |    int I;
                            10462 ; 128  |} flcfcr_type;
                            10463 ; 129  |
                            10464 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                            10465 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                            10466 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                            10467 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                            10468 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                            10469 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                            10470 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                            10471 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                            10472 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                            10473 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                            10474 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                            10475 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                            10476 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                            10477 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                            10478 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                            10479 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                            10480 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                            10481 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                            10482 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                            10483 ; 149  |
                            10484 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                            10485 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                            10486 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                            10487 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                            10488 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                            10489 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                            10490 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                            10491 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                            10492 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                            10493 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                            10494 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                            10495 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                            10496 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                            10497 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                            10498 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                            10499 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                            10500 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                            10501 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                            10502 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                            10503 ; 169  |
                            10504 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                            10505 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                            10506 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                            10507 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                            10508 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                            10509 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                            10510 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                            10511 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                            10512 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                            10513 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                            10514 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                            10515 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                            10516 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                            10517 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                            10518 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                            10519 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                            10520 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                            10521 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                            10522 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                            10523 ; 189  |
                            10524 ; 190  |
                            10525 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                            10526 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                            10527 ; 193  |
                            10528 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                            10529 ; 195  |{
                            10530 ; 196  |    struct
                            10531 ; 197  |    {
                            10532 ; 198  |        unsigned TRWSU  :5;
                            10533 ; 199  |        unsigned TRPW   :7;
                            10534 ; 200  |        unsigned TWPW   :7;
                            10535 ; 201  |        unsigned TRWH   :5;
                            10536 ; 202  |    } B;
                            10537 ; 203  |    int I;
                            10538 ; 204  |} flcftmr1r_type;
                            10539 ; 205  |
                            10540 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                            10541 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                            10542 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                            10543 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                            10544 ; 210  |
                            10545 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                            10546 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                            10547 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                            10548 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                            10549 ; 215  |
                            10550 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                            10551 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                            10552 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                            10553 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                            10554 ; 220  |
                            10555 ; 221  |
                            10556 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10557 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                            10558 ; 224  |
                            10559 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                            10560 ; 226  |{
                            10561 ; 227  |    struct
                            10562 ; 228  |    {
                            10563 ; 229  |        unsigned TWW    :4;
                            10564 ; 230  |        unsigned TWTO   :10;
                            10565 ; 231  |        unsigned THW    :5; 
                            10566 ; 232  |        unsigned TRAQ   :5;
                            10567 ; 233  |    } B;
                            10568 ; 234  |    int I;
                            10569 ; 235  |} flcftmr2r_type;
                            10570 ; 236  |
                            10571 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                            10572 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                            10573 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                            10574 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                            10575 ; 241  |
                            10576 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                            10577 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                            10578 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                            10579 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                            10580 ; 246  |
                            10581 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                            10582 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                            10583 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                            10584 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                            10585 ; 251  |
                            10586 ; 252  |
                            10587 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            10588 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                            10589 ; 255  |
                            10590 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                            10591 ; 257  |{
                            10592 ; 258  |    struct
                            10593 ; 259  |    {
                            10594 ; 260  |        unsigned CS     :2;
                            10595 ; 261  |        int SE          :1;
                            10596 ; 262  |        int WP          :1;
                            10597 ; 263  |        int SIZE        :1;
                            10598 ; 264  |        int ICMD        :8;
                            10599 ; 265  |        int TOIE        :1;
                            10600 ; 266  |        int BPIE        :1;
                            10601 ; 267  |        int TOIRQ       :1;
                            10602 ; 268  |        int BPIRQ       :1;
                            10603 ; 269  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10604 ; 270  |    int I;
                            10605 ; 271  |} flsmcr_type;
                            10606 ; 272  |
                            10607 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                            10608 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                            10609 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                            10610 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                            10611 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                            10612 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                            10613 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                            10614 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                            10615 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                            10616 ; 282  |
                            10617 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                            10618 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                            10619 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                            10620 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                            10621 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                            10622 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                            10623 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                            10624 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                            10625 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                            10626 ; 292  |
                            10627 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                            10628 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                            10629 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                            10630 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                            10631 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                            10632 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                            10633 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                            10634 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                            10635 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                            10636 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                            10637 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                            10638 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                            10639 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                            10640 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                            10641 ; 307  |
                            10642 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                            10643 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                            10644 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                            10645 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                            10646 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                            10647 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                            10648 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                            10649 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                            10650 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                            10651 ; 317  |
                            10652 ; 318  |
                            10653 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                            10654 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                            10655 ; 321  |
                            10656 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                            10657 ; 323  |{
                            10658 ; 324  |    struct
                            10659 ; 325  |    {
                            10660 ; 326  |        unsigned TRWSU  :5;
                            10661 ; 327  |        unsigned TRPW   :6;
                            10662 ; 328  |        unsigned TWPW   :6;
                            10663 ; 329  |        unsigned TRWH   :5;
                            10664 ; 330  |    } B;
                            10665 ; 331  |    int I;
                            10666 ; 332  |} flsmtmr1r_type;
                            10667 ; 333  |
                            10668 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                            10669 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                            10670 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                            10671 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                            10672 ; 338  |
                            10673 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                            10674 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                            10675 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                            10676 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                            10677 ; 343  |
                            10678 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                            10679 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                            10680 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                            10681 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                            10682 ; 348  |
                            10683 ; 349  |
                            10684 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                            10685 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                            10686 ; 352  |
                            10687 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                            10688 ; 354  |{
                            10689 ; 355  |    struct
                            10690 ; 356  |    {
                            10691 ; 357  |        unsigned TWT    :6;
                            10692 ; 358  |        unsigned TWTO   :18;
                            10693 ; 359  |    } B;
                            10694 ; 360  |    int I;
                            10695 ; 361  |} flsmtmr2r_type;
                            10696 ; 362  |
                            10697 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                            10698 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                            10699 ; 365  |
                            10700 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                            10701 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                            10702 ; 368  |
                            10703 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                            10704 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                            10705 ; 371  |
                            10706 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                            10707 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                            10708 ; 374  |typedef union 
                            10709 ; 375  |{
                            10710 ; 376  |  struct
                            10711 ; 377  |  {
                            10712 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                            10713 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers */
                            10714 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers */
                            10715 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                            10716 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                            10717 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                            10718 ; 384  |    int PAD0          :17;    
                            10719 ; 385  |  } B;
                            10720 ; 386  |  int I;
                            10721 ; 387  |} flcr2_type;
                            10722 ; 388  |
                            10723 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                            10724 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                            10725 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                            10726 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                            10727 ; 393  |
                            10728 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Control Register */
                            10729 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash Start Address Low Register */
                            10730 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash Start Address High Register */
                            10731 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                            10732 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Control Register2 */
                            10733 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash CompactFlash Control Register*/
                            10734 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Compact Flash Timer1 Register*/
                            10735 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Compact Flash Timer2 Register*/
                            10736 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash SmartMedia Control Register*/
                            10737 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash SmartMedia Timer1 Register*/
                            10738 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash SmartMedia Timer2 Register*/
                            10739 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                            10740 ; 406  |
                            10741 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            10742 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            10743 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                            10744 ; 410  |
                            10745 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                            10746 ; 412  |
                            10747 ; 413  |#endif
                            10748 ; 414  |
                            10749 
                            10751 
                            10752 ; 22   |#include "regsgpio.h"
                            10753 
                            10755 
                            10756 ; 1    |#if !(defined(__REGS_GPIO_INC))
                            10757 ; 2    |#define __REGS_GPIO_INC 1
                            10758 ; 3    |
                            10759 ; 4    |#include "types.h"
                            10760 
                            10762 
                            10763 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10764 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10765 ; 3    |//
                            10766 ; 4    |// Filename: types.h
                            10767 ; 5    |// Description: Standard data types
                            10768 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10769 ; 7    |
                            10770 ; 8    |#ifndef _TYPES_H
                            10771 ; 9    |#define _TYPES_H
                            10772 ; 10   |
                            10773 ; 11   |// TODO:  move this outta here!
                            10774 ; 12   |#if !defined(NOERROR)
                            10775 ; 13   |#define NOERROR 0
                            10776 ; 14   |#define SUCCESS 0
                            10777 ; 15   |#endif 
                            10778 ; 16   |#if !defined(SUCCESS)
                            10779 ; 17   |#define SUCCESS  0
                            10780 ; 18   |#endif
                            10781 ; 19   |#if !defined(ERROR)
                            10782 ; 20   |#define ERROR   -1
                            10783 ; 21   |#endif
                            10784 ; 22   |#if !defined(FALSE)
                            10785 ; 23   |#define FALSE 0
                            10786 ; 24   |#endif
                            10787 ; 25   |#if !defined(TRUE)
                            10788 ; 26   |#define TRUE  1
                            10789 ; 27   |#endif
                            10790 ; 28   |
                            10791 ; 29   |#if !defined(NULL)
                            10792 ; 30   |#define NULL 0
                            10793 ; 31   |#endif
                            10794 ; 32   |
                            10795 ; 33   |#define MAX_INT     0x7FFFFF
                            10796 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10797 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10798 ; 36   |#define MAX_ULONG   (-1) 
                            10799 ; 37   |
                            10800 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10801 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10802 ; 40   |
                            10803 ; 41   |
                            10804 ; 42   |#define BYTE    unsigned char       // btVarName
                            10805 ; 43   |#define CHAR    signed char         // cVarName
                            10806 ; 44   |#define USHORT  unsigned short      // usVarName
                            10807 ; 45   |#define SHORT   unsigned short      // sVarName
                            10808 ; 46   |#define WORD    unsigned int        // wVarName
                            10809 ; 47   |#define INT     signed int          // iVarName
                            10810 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10811 ; 49   |#define LONG    signed long         // lVarName
                            10812 ; 50   |#define BOOL    unsigned int        // bVarName
                            10813 ; 51   |#define FRACT   _fract              // frVarName
                            10814 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10815 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10816 ; 54   |#define FLOAT   float               // fVarName
                            10817 ; 55   |#define DBL     double              // dVarName
                            10818 ; 56   |#define ENUM    enum                // eVarName
                            10819 ; 57   |#define CMX     _complex            // cmxVarName
                            10820 ; 58   |typedef WORD UCS3;                   // 
                            10821 ; 59   |
                            10822 ; 60   |#define UINT16  unsigned short
                            10823 ; 61   |#define UINT8   unsigned char   
                            10824 ; 62   |#define UINT32  unsigned long
                            10825 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10826 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10827 ; 65   |#define WCHAR   UINT16
                            10828 ; 66   |
                            10829 ; 67   |//UINT128 is 16 bytes or 6 words
                            10830 ; 68   |typedef struct UINT128_3500 {   
                            10831 ; 69   |    int val[6];     
                            10832 ; 70   |} UINT128_3500;
                            10833 ; 71   |
                            10834 ; 72   |#define UINT128   UINT128_3500
                            10835 ; 73   |
                            10836 ; 74   |// Little endian word packed byte strings:   
                            10837 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10838 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10839 ; 77   |// Little endian word packed byte strings:   
                            10840 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10841 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10842 ; 80   |
                            10843 ; 81   |// Declare Memory Spaces To Use When Coding
                            10844 ; 82   |// A. Sector Buffers
                            10845 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10846 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10847 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10848 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10849 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10850 ; 88   |// B. Media DDI Memory
                            10851 ; 89   |#define MEDIA_DDI_MEM _Y
                            10852 ; 90   |
                            10853 ; 91   |
                            10854 ; 92   |
                            10855 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10856 ; 94   |// Examples of circular pointers:
                            10857 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10858 ; 96   |//    DWORD CIRC cpdwVarName
                            10859 ; 97   |
                            10860 ; 98   |#define RETCODE INT                 // rcVarName
                            10861 ; 99   |
                            10862 ; 100  |// generic bitfield structure
                            10863 ; 101  |struct Bitfield {
                            10864 ; 102  |    unsigned int B0  :1;
                            10865 ; 103  |    unsigned int B1  :1;
                            10866 ; 104  |    unsigned int B2  :1;
                            10867 ; 105  |    unsigned int B3  :1;
                            10868 ; 106  |    unsigned int B4  :1;
                            10869 ; 107  |    unsigned int B5  :1;
                            10870 ; 108  |    unsigned int B6  :1;
                            10871 ; 109  |    unsigned int B7  :1;
                            10872 ; 110  |    unsigned int B8  :1;
                            10873 ; 111  |    unsigned int B9  :1;
                            10874 ; 112  |    unsigned int B10 :1;
                            10875 ; 113  |    unsigned int B11 :1;
                            10876 ; 114  |    unsigned int B12 :1;
                            10877 ; 115  |    unsigned int B13 :1;
                            10878 ; 116  |    unsigned int B14 :1;
                            10879 ; 117  |    unsigned int B15 :1;
                            10880 ; 118  |    unsigned int B16 :1;
                            10881 ; 119  |    unsigned int B17 :1;
                            10882 ; 120  |    unsigned int B18 :1;
                            10883 ; 121  |    unsigned int B19 :1;
                            10884 ; 122  |    unsigned int B20 :1;
                            10885 ; 123  |    unsigned int B21 :1;
                            10886 ; 124  |    unsigned int B22 :1;
                            10887 ; 125  |    unsigned int B23 :1;
                            10888 ; 126  |};
                            10889 ; 127  |
                            10890 ; 128  |union BitInt {
                            10891 ; 129  |        struct Bitfield B;
                            10892 ; 130  |        int        I;
                            10893 ; 131  |};
                            10894 ; 132  |
                            10895 ; 133  |#define MAX_MSG_LENGTH 10
                            10896 ; 134  |struct CMessage
                            10897 ; 135  |{
                            10898 ; 136  |        unsigned int m_uLength;
                            10899 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10900 ; 138  |};
                            10901 ; 139  |
                            10902 ; 140  |typedef struct {
                            10903 ; 141  |    WORD m_wLength;
                            10904 ; 142  |    WORD m_wMessage;
                            10905 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10906 ; 144  |} Message;
                            10907 ; 145  |
                            10908 ; 146  |struct MessageQueueDescriptor
                            10909 ; 147  |{
                            10910 ; 148  |        int *m_pBase;
                            10911 ; 149  |        int m_iModulo;
                            10912 ; 150  |        int m_iSize;
                            10913 ; 151  |        int *m_pHead;
                            10914 ; 152  |        int *m_pTail;
                            10915 ; 153  |};
                            10916 ; 154  |
                            10917 ; 155  |struct ModuleEntry
                            10918 ; 156  |{
                            10919 ; 157  |    int m_iSignaledEventMask;
                            10920 ; 158  |    int m_iWaitEventMask;
                            10921 ; 159  |    int m_iResourceOfCode;
                            10922 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10923 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10924 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10925 ; 163  |    int m_uTimeOutHigh;
                            10926 ; 164  |    int m_uTimeOutLow;
                            10927 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10928 ; 166  |};
                            10929 ; 167  |
                            10930 ; 168  |union WaitMask{
                            10931 ; 169  |    struct B{
                            10932 ; 170  |        unsigned int m_bNone     :1;
                            10933 ; 171  |        unsigned int m_bMessage  :1;
                            10934 ; 172  |        unsigned int m_bTimer    :1;
                            10935 ; 173  |        unsigned int m_bButton   :1;
                            10936 ; 174  |    } B;
                            10937 ; 175  |    int I;
                            10938 ; 176  |} ;
                            10939 ; 177  |
                            10940 ; 178  |
                            10941 ; 179  |struct Button {
                            10942 ; 180  |        WORD wButtonEvent;
                            10943 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10944 ; 182  |};
                            10945 ; 183  |
                            10946 ; 184  |struct Message {
                            10947 ; 185  |        WORD wMsgLength;
                            10948 ; 186  |        WORD wMsgCommand;
                            10949 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10950 ; 188  |};
                            10951 ; 189  |
                            10952 ; 190  |union EventTypes {
                            10953 ; 191  |        struct CMessage msg;
                            10954 ; 192  |        struct Button Button ;
                            10955 ; 193  |        struct Message Message;
                            10956 ; 194  |};
                            10957 ; 195  |
                            10958 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10959 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10960 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10961 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10962 ; 200  |
                            10963 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10964 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10965 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10966 ; 204  |
                            10967 ; 205  |#if DEBUG
                            10968 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10969 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10970 ; 208  |#else 
                            10971 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10972 ; 210  |#define DebugBuildAssert(x)    
                            10973 ; 211  |#endif
                            10974 ; 212  |
                            10975 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10976 ; 214  |//  #pragma asm
                            10977 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10978 ; 216  |//  #pragma endasm
                            10979 ; 217  |
                            10980 ; 218  |
                            10981 ; 219  |#ifdef COLOR_262K
                            10982 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10983 ; 221  |#elif defined(COLOR_65K)
                            10984 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10985 ; 223  |#else
                            10986 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10987 ; 225  |#endif
                            10988 ; 226  |    
                            10989 ; 227  |#endif // #ifndef _TYPES_H
                            10990 
                            10992 
                            10993 ; 5    |
                            10994 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            10995 ; 7    |//  Interrupt Collector Registers
                            10996 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                            10997 ; 9    |
                            10998 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                            10999 ; 11   |
                            11000 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                            11001 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                            11002 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                            11003 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                            11004 ; 16   |
                            11005 ; 17   |#define HW_GPB0_BLOCKNUM 0
                            11006 ; 18   |#define HW_GPB1_BLOCKNUM 1
                            11007 ; 19   |#define HW_GPB2_BLOCKNUM 2
                            11008 ; 20   |#define HW_GPB3_BLOCKNUM 3
                            11009 ; 21   |
                            11010 ; 22   |#define HW_GPB_GPENR 0
                            11011 ; 23   |#define HW_GPB_GPDOR 1
                            11012 ; 24   |#define HW_GPB_GPDIR 2
                            11013 ; 25   |#define HW_GPB_GPDOER 3
                            11014 ; 26   |#define HW_GPB_GPIPENR 4
                            11015 ; 27   |#define HW_GPB_GPIENR 5
                            11016 ; 28   |#define HW_GPB_GPILVLR 6
                            11017 ; 29   |#define HW_GPB_GPIPOLR 7
                            11018 ; 30   |#define HW_GPB_GPISTATR 8
                            11019 ; 31   |#define HW_GPB_GPPWR 9
                            11020 ; 32   |#define HW_GPB_GP8MA 10
                            11021 ; 33   |
                            11022 ; 34   |
                            11023 ; 35   |
                            11024 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            11025 ; 37   |//  GPIO Register Bit Positions
                            11026 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                            11027 ; 39   |{
                            11028 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                            11029 ; 41   |    unsigned int I;
                            11030 ; 42   |    unsigned int U;
                            11031 ; 43   |} gpr_type;
                            11032 ; 44   |
                            11033 ; 45   |#define HW_GP_B0_BITPOS 0
                            11034 ; 46   |#define HW_GP_B1_BITPOS 1
                            11035 ; 47   |#define HW_GP_B2_BITPOS 2
                            11036 ; 48   |#define HW_GP_B3_BITPOS 3
                            11037 ; 49   |#define HW_GP_B4_BITPOS 4
                            11038 ; 50   |#define HW_GP_B5_BITPOS 5
                            11039 ; 51   |#define HW_GP_B6_BITPOS 6
                            11040 ; 52   |#define HW_GP_B7_BITPOS 7
                            11041 ; 53   |#define HW_GP_B8_BITPOS 8
                            11042 ; 54   |#define HW_GP_B9_BITPOS 9
                            11043 ; 55   |#define HW_GP_B10_BITPOS 10
                            11044 ; 56   |#define HW_GP_B11_BITPOS 11
                            11045 ; 57   |#define HW_GP_B12_BITPOS 12
                            11046 ; 58   |#define HW_GP_B13_BITPOS 13
                            11047 ; 59   |#define HW_GP_B14_BITPOS 14
                            11048 ; 60   |#define HW_GP_B15_BITPOS 15
                            11049 ; 61   |#define HW_GP_B16_BITPOS 16
                            11050 ; 62   |#define HW_GP_B17_BITPOS 17
                            11051 ; 63   |#define HW_GP_B18_BITPOS 18
                            11052 ; 64   |#define HW_GP_B19_BITPOS 19
                            11053 ; 65   |#define HW_GP_B20_BITPOS 20
                            11054 ; 66   |#define HW_GP_B21_BITPOS 21
                            11055 ; 67   |#define HW_GP_B22_BITPOS 22
                            11056 ; 68   |#define HW_GP_B23_BITPOS 23
                            11057 ; 69   |
                            11058 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                            11059 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                            11060 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                            11061 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                            11062 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                            11063 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                            11064 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                            11065 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                            11066 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                            11067 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                            11068 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                            11069 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                            11070 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                            11071 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                            11072 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                            11073 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                            11074 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                            11075 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                            11076 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                            11077 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                            11078 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                            11079 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                            11080 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                            11081 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                            11082 ; 94   |
                            11083 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                            11084 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                            11085 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                            11086 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                            11087 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                            11088 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                            11089 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                            11090 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                            11091 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                            11092 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                            11093 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                            11094 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                            11095 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                            11096 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                            11097 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                            11098 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                            11099 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                            11100 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                            11101 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                            11102 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                            11103 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                            11104 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                            11105 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                            11106 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                            11107 ; 119  |
                            11108 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                            11109 ; 121  |//  GPIO 8mA Register Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11110 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                            11111 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                            11112 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                            11113 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                            11114 ; 126  |
                            11115 ; 127  |
                            11116 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                            11117 ; 129  |//  Logical GPIO numbers
                            11118 ; 130  |#define HW_GPIO_000 0
                            11119 ; 131  |#define HW_GPIO_001 1
                            11120 ; 132  |#define HW_GPIO_002 2
                            11121 ; 133  |#define HW_GPIO_003 3
                            11122 ; 134  |#define HW_GPIO_004 4
                            11123 ; 135  |#define HW_GPIO_005 5
                            11124 ; 136  |#define HW_GPIO_006 6
                            11125 ; 137  |#define HW_GPIO_007 7
                            11126 ; 138  |#define HW_GPIO_008 8
                            11127 ; 139  |#define HW_GPIO_009 9
                            11128 ; 140  |#define HW_GPIO_010 10
                            11129 ; 141  |#define HW_GPIO_011 11
                            11130 ; 142  |#define HW_GPIO_012 12
                            11131 ; 143  |#define HW_GPIO_013 13
                            11132 ; 144  |#define HW_GPIO_014 14
                            11133 ; 145  |#define HW_GPIO_015 15
                            11134 ; 146  |#define HW_GPIO_016 16
                            11135 ; 147  |#define HW_GPIO_017 17
                            11136 ; 148  |#define HW_GPIO_018 18
                            11137 ; 149  |#define HW_GPIO_019 19
                            11138 ; 150  |#define HW_GPIO_020 20
                            11139 ; 151  |#define HW_GPIO_021 21
                            11140 ; 152  |#define HW_GPIO_022 22
                            11141 ; 153  |#define HW_GPIO_023 23
                            11142 ; 154  |#define HW_GPIO_024 24
                            11143 ; 155  |#define HW_GPIO_025 25
                            11144 ; 156  |#define HW_GPIO_026 26
                            11145 ; 157  |#define HW_GPIO_027 27
                            11146 ; 158  |#define HW_GPIO_028 28
                            11147 ; 159  |#define HW_GPIO_029 29
                            11148 ; 160  |#define HW_GPIO_030 30
                            11149 ; 161  |#define HW_GPIO_031 31
                            11150 ; 162  |#define HW_GPIO_032 32
                            11151 ; 163  |#define HW_GPIO_033 33
                            11152 ; 164  |#define HW_GPIO_034 34
                            11153 ; 165  |#define HW_GPIO_035 35
                            11154 ; 166  |#define HW_GPIO_036 36
                            11155 ; 167  |#define HW_GPIO_037 37
                            11156 ; 168  |#define HW_GPIO_038 38
                            11157 ; 169  |#define HW_GPIO_039 39
                            11158 ; 170  |#define HW_GPIO_040 40
                            11159 ; 171  |#define HW_GPIO_041 41
                            11160 ; 172  |#define HW_GPIO_042 42
                            11161 ; 173  |#define HW_GPIO_043 43
                            11162 ; 174  |#define HW_GPIO_044 44
                            11163 ; 175  |#define HW_GPIO_045 45
                            11164 ; 176  |#define HW_GPIO_046 46
                            11165 ; 177  |#define HW_GPIO_047 47
                            11166 ; 178  |#define HW_GPIO_048 48
                            11167 ; 179  |#define HW_GPIO_049 49
                            11168 ; 180  |#define HW_GPIO_050 50
                            11169 ; 181  |#define HW_GPIO_051 51
                            11170 ; 182  |#define HW_GPIO_052 52
                            11171 ; 183  |#define HW_GPIO_053 53
                            11172 ; 184  |#define HW_GPIO_054 54
                            11173 ; 185  |#define HW_GPIO_055 55
                            11174 ; 186  |#define HW_GPIO_056 56
                            11175 ; 187  |#define HW_GPIO_057 57
                            11176 ; 188  |#define HW_GPIO_058 58
                            11177 ; 189  |#define HW_GPIO_059 59
                            11178 ; 190  |#define HW_GPIO_060 60
                            11179 ; 191  |#define HW_GPIO_061 61
                            11180 ; 192  |#define HW_GPIO_062 62
                            11181 ; 193  |#define HW_GPIO_063 63
                            11182 ; 194  |#define HW_GPIO_064 64
                            11183 ; 195  |#define HW_GPIO_065 65
                            11184 ; 196  |#define HW_GPIO_066 66
                            11185 ; 197  |#define HW_GPIO_067 67
                            11186 ; 198  |#define HW_GPIO_068 68
                            11187 ; 199  |#define HW_GPIO_069 69
                            11188 ; 200  |#define HW_GPIO_070 70
                            11189 ; 201  |#define HW_GPIO_071 71
                            11190 ; 202  |#define HW_GPIO_072 72
                            11191 ; 203  |#define HW_GPIO_073 73
                            11192 ; 204  |#define HW_GPIO_074 74
                            11193 ; 205  |#define HW_GPIO_075 75
                            11194 ; 206  |#define HW_GPIO_076 76
                            11195 ; 207  |#define HW_GPIO_077 77
                            11196 ; 208  |#define HW_GPIO_078 78
                            11197 ; 209  |#define HW_GPIO_079 79
                            11198 ; 210  |#define HW_GPIO_080 80
                            11199 ; 211  |#define HW_GPIO_081 81
                            11200 ; 212  |#define HW_GPIO_082 82
                            11201 ; 213  |#define HW_GPIO_083 83
                            11202 ; 214  |#define HW_GPIO_084 84
                            11203 ; 215  |#define HW_GPIO_085 85
                            11204 ; 216  |#define HW_GPIO_086 86
                            11205 ; 217  |#define HW_GPIO_087 87
                            11206 ; 218  |#define HW_GPIO_088 88
                            11207 ; 219  |#define HW_GPIO_089 89
                            11208 ; 220  |#define HW_GPIO_090 90
                            11209 ; 221  |#define HW_GPIO_091 91
                            11210 ; 222  |#define HW_GPIO_092 92
                            11211 ; 223  |#define HW_GPIO_093 93
                            11212 ; 224  |#define HW_GPIO_094 94
                            11213 ; 225  |#define HW_GPIO_095 95
                            11214 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                            11215 ; 227  |
                            11216 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                            11217 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                            11218 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                            11219 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                            11220 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                            11221 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                            11222 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                            11223 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                            11224 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                            11225 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            11226 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                            11227 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                            11228 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
                            11229 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                            11230 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                            11231 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
                            11232 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                            11233 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                            11234 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                            11235 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                            11236 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            11237 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                            11238 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                            11239 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                            11240 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                            11241 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                            11242 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                            11243 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                            11244 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                            11245 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                            11246 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                            11247 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            11248 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                            11249 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                            11250 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                            11251 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                            11252 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                            11253 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                            11254 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                            11255 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                            11256 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                            11257 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                            11258 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                            11259 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                            11260 ; 272  |
                            11261 ; 273  |#endif
                            11262 ; 274  |
                            11263 
                            11265 
                            11266 ; 23   |#include "regsi2c.h"
                            11267 
                            11269 
                            11270 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            11271 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            11272 ; 3    |// Filename: regsI2C.inc
                            11273 ; 4    |// Description: Register definitions for GPFLASH interface
                            11274 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            11275 ; 6    |// The following naming conventions are followed in this file.
                            11276 ; 7    |// All registers are named using the format...
                            11277 ; 8    |//     HW_<module>_<regname>
                            11278 ; 9    |// where <module> is the module name which can be any of the following...
                            11279 ; 10   |//     USB20
                            11280 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            11281 ; 12   |// module name includes a number starting from 0 for the first instance of
                            11282 ; 13   |// that module)
                            11283 ; 14   |// <regname> is the specific register within that module
                            11284 ; 15   |// We also define the following...
                            11285 ; 16   |//     HW_<module>_<regname>_BITPOS
                            11286 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11287 ; 18   |//     HW_<module>_<regname>_SETMASK
                            11288 ; 19   |// which does something else, and
                            11289 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            11290 ; 21   |// which does something else.
                            11291 ; 22   |// Other rules
                            11292 ; 23   |//     All caps
                            11293 ; 24   |//     Numeric identifiers start at 0
                            11294 ; 25   |#if !(defined(regsi2cinc))
                            11295 ; 26   |#define regsi2cinc 1
                            11296 ; 27   |
                            11297 ; 28   |#include "types.h"
                            11298 
                            11300 
                            11301 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11302 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11303 ; 3    |//
                            11304 ; 4    |// Filename: types.h
                            11305 ; 5    |// Description: Standard data types
                            11306 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11307 ; 7    |
                            11308 ; 8    |#ifndef _TYPES_H
                            11309 ; 9    |#define _TYPES_H
                            11310 ; 10   |
                            11311 ; 11   |// TODO:  move this outta here!
                            11312 ; 12   |#if !defined(NOERROR)
                            11313 ; 13   |#define NOERROR 0
                            11314 ; 14   |#define SUCCESS 0
                            11315 ; 15   |#endif 
                            11316 ; 16   |#if !defined(SUCCESS)
                            11317 ; 17   |#define SUCCESS  0
                            11318 ; 18   |#endif
                            11319 ; 19   |#if !defined(ERROR)
                            11320 ; 20   |#define ERROR   -1
                            11321 ; 21   |#endif
                            11322 ; 22   |#if !defined(FALSE)
                            11323 ; 23   |#define FALSE 0
                            11324 ; 24   |#endif
                            11325 ; 25   |#if !defined(TRUE)
                            11326 ; 26   |#define TRUE  1
                            11327 ; 27   |#endif
                            11328 ; 28   |
                            11329 ; 29   |#if !defined(NULL)
                            11330 ; 30   |#define NULL 0
                            11331 ; 31   |#endif
                            11332 ; 32   |
                            11333 ; 33   |#define MAX_INT     0x7FFFFF
                            11334 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11335 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11336 ; 36   |#define MAX_ULONG   (-1) 
                            11337 ; 37   |
                            11338 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11339 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11340 ; 40   |
                            11341 ; 41   |
                            11342 ; 42   |#define BYTE    unsigned char       // btVarName
                            11343 ; 43   |#define CHAR    signed char         // cVarName
                            11344 ; 44   |#define USHORT  unsigned short      // usVarName
                            11345 ; 45   |#define SHORT   unsigned short      // sVarName
                            11346 ; 46   |#define WORD    unsigned int        // wVarName
                            11347 ; 47   |#define INT     signed int          // iVarName
                            11348 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11349 ; 49   |#define LONG    signed long         // lVarName
                            11350 ; 50   |#define BOOL    unsigned int        // bVarName
                            11351 ; 51   |#define FRACT   _fract              // frVarName
                            11352 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11353 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11354 ; 54   |#define FLOAT   float               // fVarName
                            11355 ; 55   |#define DBL     double              // dVarName
                            11356 ; 56   |#define ENUM    enum                // eVarName
                            11357 ; 57   |#define CMX     _complex            // cmxVarName
                            11358 ; 58   |typedef WORD UCS3;                   // 
                            11359 ; 59   |
                            11360 ; 60   |#define UINT16  unsigned short
                            11361 ; 61   |#define UINT8   unsigned char   
                            11362 ; 62   |#define UINT32  unsigned long
                            11363 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11364 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11365 ; 65   |#define WCHAR   UINT16
                            11366 ; 66   |
                            11367 ; 67   |//UINT128 is 16 bytes or 6 words
                            11368 ; 68   |typedef struct UINT128_3500 {   
                            11369 ; 69   |    int val[6];     
                            11370 ; 70   |} UINT128_3500;
                            11371 ; 71   |
                            11372 ; 72   |#define UINT128   UINT128_3500
                            11373 ; 73   |
                            11374 ; 74   |// Little endian word packed byte strings:   
                            11375 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11376 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11377 ; 77   |// Little endian word packed byte strings:   
                            11378 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11379 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11380 ; 80   |
                            11381 ; 81   |// Declare Memory Spaces To Use When Coding
                            11382 ; 82   |// A. Sector Buffers
                            11383 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11384 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11385 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11386 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11387 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11388 ; 88   |// B. Media DDI Memory
                            11389 ; 89   |#define MEDIA_DDI_MEM _Y
                            11390 ; 90   |
                            11391 ; 91   |
                            11392 ; 92   |
                            11393 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11394 ; 94   |// Examples of circular pointers:
                            11395 ; 95   |//    INT CIRC cpiVarName
                            11396 ; 96   |//    DWORD CIRC cpdwVarName
                            11397 ; 97   |
                            11398 ; 98   |#define RETCODE INT                 // rcVarName
                            11399 ; 99   |
                            11400 ; 100  |// generic bitfield structure
                            11401 ; 101  |struct Bitfield {
                            11402 ; 102  |    unsigned int B0  :1;
                            11403 ; 103  |    unsigned int B1  :1;
                            11404 ; 104  |    unsigned int B2  :1;
                            11405 ; 105  |    unsigned int B3  :1;
                            11406 ; 106  |    unsigned int B4  :1;
                            11407 ; 107  |    unsigned int B5  :1;
                            11408 ; 108  |    unsigned int B6  :1;
                            11409 ; 109  |    unsigned int B7  :1;
                            11410 ; 110  |    unsigned int B8  :1;
                            11411 ; 111  |    unsigned int B9  :1;
                            11412 ; 112  |    unsigned int B10 :1;
                            11413 ; 113  |    unsigned int B11 :1;
                            11414 ; 114  |    unsigned int B12 :1;
                            11415 ; 115  |    unsigned int B13 :1;
                            11416 ; 116  |    unsigned int B14 :1;
                            11417 ; 117  |    unsigned int B15 :1;
                            11418 ; 118  |    unsigned int B16 :1;
                            11419 ; 119  |    unsigned int B17 :1;
                            11420 ; 120  |    unsigned int B18 :1;
                            11421 ; 121  |    unsigned int B19 :1;
                            11422 ; 122  |    unsigned int B20 :1;
                            11423 ; 123  |    unsigned int B21 :1;
                            11424 ; 124  |    unsigned int B22 :1;
                            11425 ; 125  |    unsigned int B23 :1;
                            11426 ; 126  |};
                            11427 ; 127  |
                            11428 ; 128  |union BitInt {
                            11429 ; 129  |        struct Bitfield B;
                            11430 ; 130  |        int        I;
                            11431 ; 131  |};
                            11432 ; 132  |
                            11433 ; 133  |#define MAX_MSG_LENGTH 10
                            11434 ; 134  |struct CMessage
                            11435 ; 135  |{
                            11436 ; 136  |        unsigned int m_uLength;
                            11437 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11438 ; 138  |};
                            11439 ; 139  |
                            11440 ; 140  |typedef struct {
                            11441 ; 141  |    WORD m_wLength;
                            11442 ; 142  |    WORD m_wMessage;
                            11443 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11444 ; 144  |} Message;
                            11445 ; 145  |
                            11446 ; 146  |struct MessageQueueDescriptor
                            11447 ; 147  |{
                            11448 ; 148  |        int *m_pBase;
                            11449 ; 149  |        int m_iModulo;
                            11450 ; 150  |        int m_iSize;
                            11451 ; 151  |        int *m_pHead;
                            11452 ; 152  |        int *m_pTail;
                            11453 ; 153  |};
                            11454 ; 154  |
                            11455 ; 155  |struct ModuleEntry
                            11456 ; 156  |{
                            11457 ; 157  |    int m_iSignaledEventMask;
                            11458 ; 158  |    int m_iWaitEventMask;
                            11459 ; 159  |    int m_iResourceOfCode;
                            11460 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11461 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            11462 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11463 ; 163  |    int m_uTimeOutHigh;
                            11464 ; 164  |    int m_uTimeOutLow;
                            11465 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11466 ; 166  |};
                            11467 ; 167  |
                            11468 ; 168  |union WaitMask{
                            11469 ; 169  |    struct B{
                            11470 ; 170  |        unsigned int m_bNone     :1;
                            11471 ; 171  |        unsigned int m_bMessage  :1;
                            11472 ; 172  |        unsigned int m_bTimer    :1;
                            11473 ; 173  |        unsigned int m_bButton   :1;
                            11474 ; 174  |    } B;
                            11475 ; 175  |    int I;
                            11476 ; 176  |} ;
                            11477 ; 177  |
                            11478 ; 178  |
                            11479 ; 179  |struct Button {
                            11480 ; 180  |        WORD wButtonEvent;
                            11481 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11482 ; 182  |};
                            11483 ; 183  |
                            11484 ; 184  |struct Message {
                            11485 ; 185  |        WORD wMsgLength;
                            11486 ; 186  |        WORD wMsgCommand;
                            11487 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11488 ; 188  |};
                            11489 ; 189  |
                            11490 ; 190  |union EventTypes {
                            11491 ; 191  |        struct CMessage msg;
                            11492 ; 192  |        struct Button Button ;
                            11493 ; 193  |        struct Message Message;
                            11494 ; 194  |};
                            11495 ; 195  |
                            11496 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11497 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11498 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11499 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11500 ; 200  |
                            11501 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11502 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11503 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11504 ; 204  |
                            11505 ; 205  |#if DEBUG
                            11506 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11507 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11508 ; 208  |#else 
                            11509 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            11510 ; 210  |#define DebugBuildAssert(x)    
                            11511 ; 211  |#endif
                            11512 ; 212  |
                            11513 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11514 ; 214  |//  #pragma asm
                            11515 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11516 ; 216  |//  #pragma endasm
                            11517 ; 217  |
                            11518 ; 218  |
                            11519 ; 219  |#ifdef COLOR_262K
                            11520 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            11521 ; 221  |#elif defined(COLOR_65K)
                            11522 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            11523 ; 223  |#else
                            11524 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            11525 ; 225  |#endif
                            11526 ; 226  |    
                            11527 ; 227  |#endif // #ifndef _TYPES_H
                            11528 
                            11530 
                            11531 ; 29   |
                            11532 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                            11533 ; 31   |////   I2C STMP Registers
                            11534 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                            11535 ; 33   |
                            11536 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                            11537 ; 35   |
                            11538 ; 36   |
                            11539 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                            11540 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                            11541 ; 39   |
                            11542 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                            11543 ; 41   |
                            11544 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                            11545 ; 43   |
                            11546 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                            11547 ; 45   |
                            11548 ; 46   |typedef union               /* I2C Clock Divider Register */
                            11549 ; 47   |{
                            11550 ; 48   |    struct {
                            11551 ; 49   |        int                :1; 
                            11552 ; 50   |        unsigned FACT      :8;
                            11553 ; 51   |    } B;
                            11554 ; 52   |    int I;
                            11555 ; 53   |    unsigned U;
                            11556 ; 54   |} i2cdivr_type;
                            11557 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Registers        */
                            11558 ; 56   |
                            11559 ; 57   |
                            11560 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                            11561 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                            11562 ; 60   |
                            11563 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                            11564 ; 62   |
                            11565 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                            11566 ; 64   |
                            11567 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                            11568 ; 66   |
                            11569 ; 67   |typedef union               /* I2C Data Register */
                            11570 ; 68   |{
                            11571 ; 69   |    struct {
                            11572 ; 70   |         unsigned DATA :24; 
                            11573 ; 71   |    } B;
                            11574 ; 72   |    int I;
                            11575 ; 73   |    unsigned U;
                            11576 ; 74   |} i2cdatr_type;
                            11577 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers (I2CDAT)      */
                            11578 ; 76   |
                            11579 ; 77   |
                            11580 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                            11581 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                            11582 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                            11583 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                            11584 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                            11585 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                            11586 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                            11587 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                            11588 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                            11589 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                            11590 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                            11591 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                            11592 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                            11593 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                            11594 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                            11595 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                            11596 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                            11597 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                            11598 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                            11599 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                            11600 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                            11601 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                            11602 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                            11603 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                            11604 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                            11605 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                            11606 ; 104  |
                            11607 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                            11608 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                            11609 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                            11610 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                            11611 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                            11612 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                            11613 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                            11614 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                            11615 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11616 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                            11617 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                            11618 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                            11619 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                            11620 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                            11621 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                            11622 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                            11623 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                            11624 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                            11625 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                            11626 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                            11627 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                            11628 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                            11629 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                            11630 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                            11631 ; 129  |
                            11632 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                            11633 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                            11634 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                            11635 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                            11636 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                            11637 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                            11638 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                            11639 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                            11640 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                            11641 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                            11642 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                            11643 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                            11644 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                            11645 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                            11646 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                            11647 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                            11648 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                            11649 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                            11650 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                            11651 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                            11652 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                            11653 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                            11654 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                            11655 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                            11656 ; 154  |
                            11657 ; 155  |typedef union               /* I2C Control Register         */
                            11658 ; 156  |{
                            11659 ; 157  |    struct {
                            11660 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                            11661 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                            11662 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                            11663 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                            11664 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                            11665 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                            11666 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                            11667 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                            11668 ; 166  |       int RWN         :1; /* Read/Not Write           */
                            11669 ; 167  |       unsigned WL     :2; /* Word Length              */
                            11670 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                            11671 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                            11672 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                            11673 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                            11674 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                            11675 ; 173  |        int LWORD       :1; /* Last Word                */
                            11676 ; 174  |        int SUBA        :1; /* Sub Address              */
                            11677 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                            11678 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                            11679 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                            11680 ; 178  |    } B;
                            11681 ; 179  |    int I;
                            11682 ; 180  |    unsigned U;
                            11683 ; 181  |} i2ccsr_type;
                            11684 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status Register (I2CCSR) */
                            11685 ; 183  |
                            11686 ; 184  |#endif
                            11687 
                            11689 
                            11690 ; 24   |#include "regsi2s.h"
                            11691 
                            11693 
                            11694 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            11695 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            11696 ; 3    |// Filename: regsi2s.inc
                            11697 ; 4    |// Description: Register definitions for I2S interface
                            11698 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            11699 ; 6    |// The following naming conventions are followed in this file.
                            11700 ; 7    |// All registers are named using the format...
                            11701 ; 8    |//     HW_<module>_<regname>
                            11702 ; 9    |// where <module> is the module name which can be any of the following...
                            11703 ; 10   |//     USB20
                            11704 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            11705 ; 12   |// module name includes a number starting from 0 for the first instance of
                            11706 ; 13   |// that module)
                            11707 ; 14   |// <regname> is the specific register within that module
                            11708 ; 15   |// We also define the following...
                            11709 ; 16   |//     HW_<module>_<regname>_BITPOS
                            11710 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11711 ; 18   |//     HW_<module>_<regname>_SETMASK
                            11712 ; 19   |// which does something else, and
                            11713 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            11714 ; 21   |// which does something else.
                            11715 ; 22   |// Other rules
                            11716 ; 23   |//     All caps
                            11717 ; 24   |//     Numeric identifiers start at 0
                            11718 ; 25   |#if !(defined(regsi2sinc))
                            11719 ; 26   |#define regsi2sinc 1
                            11720 ; 27   |
                            11721 ; 28   |#include "types.h"
                            11722 
                            11724 
                            11725 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11726 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11727 ; 3    |//
                            11728 ; 4    |// Filename: types.h
                            11729 ; 5    |// Description: Standard data types
                            11730 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11731 ; 7    |
                            11732 ; 8    |#ifndef _TYPES_H
                            11733 ; 9    |#define _TYPES_H
                            11734 ; 10   |
                            11735 ; 11   |// TODO:  move this outta here!
                            11736 ; 12   |#if !defined(NOERROR)
                            11737 ; 13   |#define NOERROR 0
                            11738 ; 14   |#define SUCCESS 0
                            11739 ; 15   |#endif 
                            11740 ; 16   |#if !defined(SUCCESS)
                            11741 ; 17   |#define SUCCESS  0
                            11742 ; 18   |#endif
                            11743 ; 19   |#if !defined(ERROR)
                            11744 ; 20   |#define ERROR   -1
                            11745 ; 21   |#endif
                            11746 ; 22   |#if !defined(FALSE)
                            11747 ; 23   |#define FALSE 0
                            11748 ; 24   |#endif
                            11749 ; 25   |#if !defined(TRUE)
                            11750 ; 26   |#define TRUE  1
                            11751 ; 27   |#endif
                            11752 ; 28   |
                            11753 ; 29   |#if !defined(NULL)
                            11754 ; 30   |#define NULL 0
                            11755 ; 31   |#endif
                            11756 ; 32   |
                            11757 ; 33   |#define MAX_INT     0x7FFFFF
                            11758 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11759 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11760 ; 36   |#define MAX_ULONG   (-1) 
                            11761 ; 37   |
                            11762 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11763 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11764 ; 40   |
                            11765 ; 41   |
                            11766 ; 42   |#define BYTE    unsigned char       // btVarName
                            11767 ; 43   |#define CHAR    signed char         // cVarName
                            11768 ; 44   |#define USHORT  unsigned short      // usVarName
                            11769 ; 45   |#define SHORT   unsigned short      // sVarName
                            11770 ; 46   |#define WORD    unsigned int        // wVarName
                            11771 ; 47   |#define INT     signed int          // iVarName
                            11772 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11773 ; 49   |#define LONG    signed long         // lVarName
                            11774 ; 50   |#define BOOL    unsigned int        // bVarName
                            11775 ; 51   |#define FRACT   _fract              // frVarName
                            11776 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11777 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11778 ; 54   |#define FLOAT   float               // fVarName
                            11779 ; 55   |#define DBL     double              // dVarName
                            11780 ; 56   |#define ENUM    enum                // eVarName
                            11781 ; 57   |#define CMX     _complex            // cmxVarName
                            11782 ; 58   |typedef WORD UCS3;                   // 
                            11783 ; 59   |
                            11784 ; 60   |#define UINT16  unsigned short
                            11785 ; 61   |#define UINT8   unsigned char   
                            11786 ; 62   |#define UINT32  unsigned long
                            11787 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11788 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            11789 ; 65   |#define WCHAR   UINT16
                            11790 ; 66   |
                            11791 ; 67   |//UINT128 is 16 bytes or 6 words
                            11792 ; 68   |typedef struct UINT128_3500 {   
                            11793 ; 69   |    int val[6];     
                            11794 ; 70   |} UINT128_3500;
                            11795 ; 71   |
                            11796 ; 72   |#define UINT128   UINT128_3500
                            11797 ; 73   |
                            11798 ; 74   |// Little endian word packed byte strings:   
                            11799 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11800 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11801 ; 77   |// Little endian word packed byte strings:   
                            11802 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11803 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11804 ; 80   |
                            11805 ; 81   |// Declare Memory Spaces To Use When Coding
                            11806 ; 82   |// A. Sector Buffers
                            11807 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11808 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11809 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11810 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11811 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11812 ; 88   |// B. Media DDI Memory
                            11813 ; 89   |#define MEDIA_DDI_MEM _Y
                            11814 ; 90   |
                            11815 ; 91   |
                            11816 ; 92   |
                            11817 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11818 ; 94   |// Examples of circular pointers:
                            11819 ; 95   |//    INT CIRC cpiVarName
                            11820 ; 96   |//    DWORD CIRC cpdwVarName
                            11821 ; 97   |
                            11822 ; 98   |#define RETCODE INT                 // rcVarName
                            11823 ; 99   |
                            11824 ; 100  |// generic bitfield structure
                            11825 ; 101  |struct Bitfield {
                            11826 ; 102  |    unsigned int B0  :1;
                            11827 ; 103  |    unsigned int B1  :1;
                            11828 ; 104  |    unsigned int B2  :1;
                            11829 ; 105  |    unsigned int B3  :1;
                            11830 ; 106  |    unsigned int B4  :1;
                            11831 ; 107  |    unsigned int B5  :1;
                            11832 ; 108  |    unsigned int B6  :1;
                            11833 ; 109  |    unsigned int B7  :1;
                            11834 ; 110  |    unsigned int B8  :1;
                            11835 ; 111  |    unsigned int B9  :1;
                            11836 ; 112  |    unsigned int B10 :1;
                            11837 ; 113  |    unsigned int B11 :1;
                            11838 ; 114  |    unsigned int B12 :1;
                            11839 ; 115  |    unsigned int B13 :1;
                            11840 ; 116  |    unsigned int B14 :1;
                            11841 ; 117  |    unsigned int B15 :1;
                            11842 ; 118  |    unsigned int B16 :1;
                            11843 ; 119  |    unsigned int B17 :1;
                            11844 ; 120  |    unsigned int B18 :1;
                            11845 ; 121  |    unsigned int B19 :1;
                            11846 ; 122  |    unsigned int B20 :1;
                            11847 ; 123  |    unsigned int B21 :1;
                            11848 ; 124  |    unsigned int B22 :1;
                            11849 ; 125  |    unsigned int B23 :1;
                            11850 ; 126  |};
                            11851 ; 127  |
                            11852 ; 128  |union BitInt {
                            11853 ; 129  |        struct Bitfield B;
                            11854 ; 130  |        int        I;
                            11855 ; 131  |};
                            11856 ; 132  |
                            11857 ; 133  |#define MAX_MSG_LENGTH 10
                            11858 ; 134  |struct CMessage
                            11859 ; 135  |{
                            11860 ; 136  |        unsigned int m_uLength;
                            11861 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11862 ; 138  |};
                            11863 ; 139  |
                            11864 ; 140  |typedef struct {
                            11865 ; 141  |    WORD m_wLength;
                            11866 ; 142  |    WORD m_wMessage;
                            11867 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11868 ; 144  |} Message;
                            11869 ; 145  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11870 ; 146  |struct MessageQueueDescriptor
                            11871 ; 147  |{
                            11872 ; 148  |        int *m_pBase;
                            11873 ; 149  |        int m_iModulo;
                            11874 ; 150  |        int m_iSize;
                            11875 ; 151  |        int *m_pHead;
                            11876 ; 152  |        int *m_pTail;
                            11877 ; 153  |};
                            11878 ; 154  |
                            11879 ; 155  |struct ModuleEntry
                            11880 ; 156  |{
                            11881 ; 157  |    int m_iSignaledEventMask;
                            11882 ; 158  |    int m_iWaitEventMask;
                            11883 ; 159  |    int m_iResourceOfCode;
                            11884 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11885 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            11886 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11887 ; 163  |    int m_uTimeOutHigh;
                            11888 ; 164  |    int m_uTimeOutLow;
                            11889 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11890 ; 166  |};
                            11891 ; 167  |
                            11892 ; 168  |union WaitMask{
                            11893 ; 169  |    struct B{
                            11894 ; 170  |        unsigned int m_bNone     :1;
                            11895 ; 171  |        unsigned int m_bMessage  :1;
                            11896 ; 172  |        unsigned int m_bTimer    :1;
                            11897 ; 173  |        unsigned int m_bButton   :1;
                            11898 ; 174  |    } B;
                            11899 ; 175  |    int I;
                            11900 ; 176  |} ;
                            11901 ; 177  |
                            11902 ; 178  |
                            11903 ; 179  |struct Button {
                            11904 ; 180  |        WORD wButtonEvent;
                            11905 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11906 ; 182  |};
                            11907 ; 183  |
                            11908 ; 184  |struct Message {
                            11909 ; 185  |        WORD wMsgLength;
                            11910 ; 186  |        WORD wMsgCommand;
                            11911 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11912 ; 188  |};
                            11913 ; 189  |
                            11914 ; 190  |union EventTypes {
                            11915 ; 191  |        struct CMessage msg;
                            11916 ; 192  |        struct Button Button ;
                            11917 ; 193  |        struct Message Message;
                            11918 ; 194  |};
                            11919 ; 195  |
                            11920 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11921 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11922 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11923 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11924 ; 200  |
                            11925 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11926 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11927 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11928 ; 204  |
                            11929 ; 205  |#if DEBUG
                            11930 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11931 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11932 ; 208  |#else 
                            11933 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            11934 ; 210  |#define DebugBuildAssert(x)    
                            11935 ; 211  |#endif
                            11936 ; 212  |
                            11937 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11938 ; 214  |//  #pragma asm
                            11939 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11940 ; 216  |//  #pragma endasm
                            11941 ; 217  |
                            11942 ; 218  |
                            11943 ; 219  |#ifdef COLOR_262K
                            11944 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            11945 ; 221  |#elif defined(COLOR_65K)
                            11946 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            11947 ; 223  |#else
                            11948 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            11949 ; 225  |#endif
                            11950 ; 226  |    
                            11951 ; 227  |#endif // #ifndef _TYPES_H
                            11952 
                            11954 
                            11955 ; 29   |
                            11956 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                            11957 ; 31   |////  I2S Registers (SAI)
                            11958 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                            11959 ; 33   |
                            11960 ; 34   |
                            11961 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                            11962 ; 36   |
                            11963 ; 37   |
                            11964 ; 38   |
                            11965 ; 39   |
                            11966 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                            11967 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                            11968 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                            11969 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                            11970 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                            11971 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                            11972 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                            11973 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                            11974 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                            11975 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                            11976 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                            11977 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                            11978 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                            11979 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                            11980 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                            11981 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                            11982 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                            11983 ; 57   |
                            11984 ; 58   |
                            11985 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                            11986 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                            11987 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                            11988 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                            11989 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                            11990 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                            11991 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                            11992 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                            11993 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                            11994 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                            11995 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                            11996 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                            11997 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                            11998 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                            11999 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                            12000 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                            12001 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                            12002 ; 76   |
                            12003 ; 77   |
                            12004 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                            12005 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                            12006 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                            12007 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                            12008 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                            12009 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                            12010 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                            12011 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                            12012 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                            12013 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                            12014 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                            12015 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                            12016 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                            12017 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                            12018 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                            12019 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                            12020 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                            12021 ; 95   |
                            12022 ; 96   |
                            12023 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                            12024 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                            12025 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                            12026 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                            12027 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                            12028 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                            12029 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                            12030 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                            12031 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                            12032 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                            12033 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                            12034 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                            12035 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                            12036 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                            12037 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                            12038 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                            12039 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                            12040 ; 114  |
                            12041 ; 115  |typedef union
                            12042 ; 116  |{
                            12043 ; 117  |    struct {
                            12044 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                            12045 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                            12046 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                            12047 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                            12048 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                            12049 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                            12050 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                            12051 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                            12052 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                            12053 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                            12054 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                            12055 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                            12056 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                            12057 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                            12058 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                            12059 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                            12060 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                            12061 ; 135  |    } B;
                            12062 ; 136  |    int I;
                            12063 ; 137  |    unsigned U;
                            12064 ; 138  |} saircsr_type;
                            12065 ; 139  |
                            12066 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive CSR         */
                            12067 ; 141  |
                            12068 ; 142  |typedef union
                            12069 ; 143  |{
                            12070 ; 144  |    struct {
                            12071 ; 145  |        unsigned SAI :24;
                            12072 ; 146  |    } B;
                            12073 ; 147  |    int I;
                            12074 ; 148  |    unsigned U;
                            12075 ; 149  |} saixr_type;
                            12076 ; 150  |
                            12077 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received data reg 0 */
                            12078 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received data reg 1 */
                            12079 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received data reg 2 */
                            12080 ; 154  |
                            12081 ; 155  |
                            12082 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                            12083 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                            12084 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                            12085 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                            12086 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                            12087 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                            12088 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                            12089 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                            12090 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                            12091 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                            12092 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                            12093 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                            12094 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                            12095 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                            12096 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                            12097 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                            12098 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                            12099 ; 173  |
                            12100 ; 174  |
                            12101 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                            12102 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                            12103 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                            12104 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                            12105 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                            12106 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                            12107 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                            12108 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                            12109 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                            12110 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                            12111 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                            12112 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                            12113 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                            12114 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                            12115 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                            12116 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                            12117 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                            12118 ; 192  |
                            12119 ; 193  |
                            12120 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                            12121 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12122 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                            12123 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                            12124 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                            12125 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                            12126 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                            12127 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                            12128 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                            12129 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                            12130 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                            12131 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                            12132 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                            12133 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                            12134 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                            12135 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                            12136 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                            12137 ; 211  |
                            12138 ; 212  |
                            12139 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                            12140 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                            12141 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                            12142 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                            12143 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                            12144 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                            12145 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                            12146 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                            12147 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                            12148 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                            12149 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                            12150 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                            12151 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                            12152 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                            12153 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                            12154 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                            12155 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                            12156 ; 230  |
                            12157 ; 231  |
                            12158 ; 232  |typedef union
                            12159 ; 233  |{
                            12160 ; 234  |    struct {
                            12161 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                            12162 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                            12163 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                            12164 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                            12165 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                            12166 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                            12167 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction 
                            12168 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                            12169 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                            12170 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                            12171 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justification
                            12172 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                            12173 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                            12174 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                            12175 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                            12176 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                            12177 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                            12178 ; 252  |    } B;
                            12179 ; 253  |    int I;
                            12180 ; 254  |    unsigned U;
                            12181 ; 255  |} saitcsr_type;
                            12182 ; 256  |
                            12183 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR      */
                            12184 ; 258  |
                            12185 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit data reg 0 */
                            12186 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit data reg 1 */
                            12187 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit data reg 2 */
                            12188 ; 262  |
                            12189 ; 263  |#endif
                            12190 
                            12192 
                            12193 ; 25   |#include "regsicoll.h"
                            12194 
                            12196 
                            12197 ; 1    |#if !defined(__REGS_ICOLL_INC)
                            12198 ; 2    |#define __REGS_ICOLL_INC 1
                            12199 ; 3    |
                            12200 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            12201 ; 5    |//  Interrupt Collector Registers
                            12202 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            12203 ; 7    |
                            12204 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                            12205 ; 9    |
                            12206 ; 10   |
                            12207 ; 11   |
                            12208 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                            12209 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                            12210 ; 14   |
                            12211 ; 15   |typedef union
                            12212 ; 16   |{
                            12213 ; 17   |    struct {
                            12214 ; 18   |        int SEN0        :1;
                            12215 ; 19   |        int SEN1        :1;
                            12216 ; 20   |        int SEN2        :1;
                            12217 ; 21   |        int SEN3        :1;
                            12218 ; 22   |        int SEN4        :1;
                            12219 ; 23   |        int SEN5        :1;
                            12220 ; 24   |        int SEN6        :1;
                            12221 ; 25   |        int SEN7        :1;
                            12222 ; 26   |        int SEN8        :1;
                            12223 ; 27   |        int SEN9        :1;
                            12224 ; 28   |        int SEN10       :1;
                            12225 ; 29   |        int SEN11       :1;
                            12226 ; 30   |        int SEN12       :1;
                            12227 ; 31   |        int SEN13       :1;
                            12228 ; 32   |        int SEN14       :1;
                            12229 ; 33   |        int SEN15       :1;
                            12230 ; 34   |        int SEN16       :1;
                            12231 ; 35   |        int SEN17       :1;
                            12232 ; 36   |        int SEN18       :1;
                            12233 ; 37   |        int SEN19       :1;
                            12234 ; 38   |        int SEN20       :1;
                            12235 ; 39   |        int SEN21       :1;
                            12236 ; 40   |        int SEN22       :1;
                            12237 ; 41   |        int SEN23       :1;
                            12238 ; 42   |    } B;
                            12239 ; 43   |    int I;
                            12240 ; 44   |} iclenable0_type;
                            12241 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt Priority Register Core   */
                            12242 ; 46   |
                            12243 ; 47   |
                            12244 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                            12245 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                            12246 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                            12247 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                            12248 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                            12249 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                            12250 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                            12251 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                            12252 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                            12253 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                            12254 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                            12255 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                            12256 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                            12257 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                            12258 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                            12259 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                            12260 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                            12261 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                            12262 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                            12263 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                            12264 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                            12265 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                            12266 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                            12267 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                            12268 ; 72   |
                            12269 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                            12270 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                            12271 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                            12272 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                            12273 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                            12274 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                            12275 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                            12276 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                            12277 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                            12278 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                            12279 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                            12280 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                            12281 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                            12282 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                            12283 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                            12284 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                            12285 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                            12286 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                            12287 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                            12288 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                            12289 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                            12290 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                            12291 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                            12292 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                            12293 ; 97   |
                            12294 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                            12295 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                            12296 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                            12297 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                            12298 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                            12299 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                            12300 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                            12301 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                            12302 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                            12303 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                            12304 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                            12305 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                            12306 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                            12307 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                            12308 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                            12309 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                            12310 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                            12311 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                            12312 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                            12313 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                            12314 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                            12315 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                            12316 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                            12317 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                            12318 ; 122  |
                            12319 ; 123  |
                            12320 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                            12321 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                            12322 ; 126  |typedef union
                            12323 ; 127  |{
                            12324 ; 128  |    struct {
                            12325 ; 129  |        
                            12326 ; 130  |        int SEN24       :1;
                            12327 ; 131  |        int SEN25       :1;
                            12328 ; 132  |        int SEN26       :1;
                            12329 ; 133  |        int SEN27       :1;
                            12330 ; 134  |        int SEN28       :1;
                            12331 ; 135  |        int SEN29       :1;
                            12332 ; 136  |        int SEN30       :1;
                            12333 ; 137  |        int SEN31       :1;
                            12334 ; 138  |        int SEN32       :1;
                            12335 ; 139  |        int SEN33       :1;
                            12336 ; 140  |    } B;
                            12337 ; 141  |    int I;
                            12338 ; 142  |} iclenable1_type;
                            12339 ; 143  |
                            12340 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interrupt Priority Register Core    */
                            12341 ; 145  |
                            12342 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                            12343 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                            12344 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                            12345 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                            12346 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                            12347 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                            12348 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                            12349 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                            12350 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                            12351 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                            12352 ; 156  |
                            12353 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                            12354 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                            12355 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                            12356 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                            12357 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                            12358 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                            12359 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                            12360 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                            12361 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                            12362 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                            12363 ; 167  |
                            12364 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                            12365 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                            12366 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                            12367 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                            12368 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                            12369 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                            12370 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                            12371 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                            12372 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                            12373 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                            12374 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12375 ; 179  |
                            12376 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                            12377 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                            12378 ; 182  |typedef union
                            12379 ; 183  |{
                            12380 ; 184  |    struct {
                            12381 ; 185  |        int SST0        :1;
                            12382 ; 186  |        int SST1        :1;
                            12383 ; 187  |        int SST2        :1;
                            12384 ; 188  |        int SST3        :1;
                            12385 ; 189  |        int SST4        :1;
                            12386 ; 190  |        int SST5        :1;
                            12387 ; 191  |        int SST6        :1;
                            12388 ; 192  |        int SST7        :1;
                            12389 ; 193  |        int SST8        :1;
                            12390 ; 194  |        int SST9        :1;
                            12391 ; 195  |        int SST10       :1;
                            12392 ; 196  |        int SST11       :1;
                            12393 ; 197  |        int SST12       :1;
                            12394 ; 198  |        int SST13       :1;
                            12395 ; 199  |        int SST14       :1;
                            12396 ; 200  |        int SST15       :1;
                            12397 ; 201  |        int SST16       :1;
                            12398 ; 202  |        int SST17       :1;
                            12399 ; 203  |        int SST18       :1;
                            12400 ; 204  |        int SST19       :1;
                            12401 ; 205  |        int SST20       :1;
                            12402 ; 206  |        int SST21       :1;
                            12403 ; 207  |        int SST22       :1;
                            12404 ; 208  |        int SST23       :1;
                            12405 ; 209  |    } B;
                            12406 ; 210  |    int I;
                            12407 ; 211  |} iclstatus0_type;
                            12408 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interrupt Priority Register Core */
                            12409 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                            12410 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                            12411 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                            12412 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                            12413 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                            12414 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                            12415 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                            12416 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                            12417 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                            12418 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                            12419 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                            12420 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                            12421 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                            12422 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                            12423 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                            12424 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                            12425 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                            12426 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                            12427 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                            12428 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                            12429 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                            12430 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                            12431 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                            12432 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                            12433 ; 237  |
                            12434 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                            12435 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                            12436 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                            12437 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                            12438 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                            12439 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                            12440 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                            12441 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                            12442 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                            12443 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                            12444 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                            12445 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                            12446 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                            12447 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                            12448 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                            12449 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                            12450 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                            12451 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                            12452 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                            12453 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                            12454 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                            12455 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                            12456 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                            12457 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                            12458 ; 262  |
                            12459 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                            12460 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                            12461 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                            12462 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                            12463 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                            12464 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                            12465 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                            12466 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                            12467 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                            12468 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                            12469 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                            12470 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                            12471 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                            12472 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                            12473 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                            12474 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                            12475 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                            12476 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                            12477 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                            12478 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                            12479 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                            12480 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                            12481 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                            12482 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                            12483 ; 287  |
                            12484 ; 288  |
                            12485 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                            12486 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                            12487 ; 291  |typedef union
                            12488 ; 292  |{
                            12489 ; 293  |    struct {
                            12490 ; 294  |        int SST24       :1;
                            12491 ; 295  |        int SST25       :1;
                            12492 ; 296  |        int SST26       :1;
                            12493 ; 297  |        int SST27       :1;
                            12494 ; 298  |        int SST28       :1;
                            12495 ; 299  |        int SST29       :1;
                            12496 ; 300  |        int SST30       :1;
                            12497 ; 301  |        int SST31       :1;
                            12498 ; 302  |        int SST32       :1;
                            12499 ; 303  |        int SST33       :1;
                            12500 ; 304  |    } B;
                            12501 ; 305  |    int I;
                            12502 ; 306  |} iclstatus1_type;
                            12503 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interrupt Priority Register Core */
                            12504 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                            12505 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                            12506 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                            12507 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                            12508 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                            12509 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                            12510 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                            12511 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                            12512 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                            12513 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                            12514 ; 318  |
                            12515 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                            12516 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                            12517 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                            12518 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                            12519 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                            12520 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                            12521 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                            12522 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                            12523 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                            12524 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                            12525 ; 329  |
                            12526 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                            12527 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                            12528 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                            12529 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                            12530 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                            12531 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                            12532 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                            12533 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                            12534 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                            12535 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                            12536 ; 340  |
                            12537 ; 341  |
                            12538 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                            12539 ; 343  |//  Interrupt Collector Priority Defs
                            12540 ; 344  |typedef union
                            12541 ; 345  |{
                            12542 ; 346  |    struct {
                            12543 ; 347  |        unsigned S0P    :3;
                            12544 ; 348  |        unsigned S1P    :3;
                            12545 ; 349  |        unsigned S2P    :3;
                            12546 ; 350  |        unsigned S3P    :3;
                            12547 ; 351  |        unsigned S4P    :3;
                            12548 ; 352  |        unsigned S5P    :3;
                            12549 ; 353  |        unsigned S6P    :3;
                            12550 ; 354  |        unsigned S7P    :3;
                            12551 ; 355  |    } B;
                            12552 ; 356  |    int I;
                            12553 ; 357  |
                            12554 ; 358  |} iclprior0_type;
                            12555 ; 359  |
                            12556 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrupt Collector Register 0 Priority   */
                            12557 ; 361  |
                            12558 ; 362  |#define HW_ICLPRIORR_SP_0 0
                            12559 ; 363  |#define HW_ICLPRIORR_SP_1 1
                            12560 ; 364  |#define HW_ICLPRIORR_SP_2 2
                            12561 ; 365  |#define HW_ICLPRIORR_SP_3 3
                            12562 ; 366  |#define HW_ICLPRIORR_SP_4 4
                            12563 ; 367  |#define HW_ICLPRIORR_SP_5 5
                            12564 ; 368  |#define HW_ICLPRIORR_SP_6 6
                            12565 ; 369  |#define HW_ICLPRIORR_SP_7 7
                            12566 ; 370  |
                            12567 ; 371  |
                            12568 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                            12569 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                            12570 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                            12571 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                            12572 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                            12573 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                            12574 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                            12575 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                            12576 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                            12577 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                            12578 ; 382  |
                            12579 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                            12580 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                            12581 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                            12582 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                            12583 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                            12584 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                            12585 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                            12586 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                            12587 ; 391  |
                            12588 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                            12589 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                            12590 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                            12591 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                            12592 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                            12593 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                            12594 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                            12595 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                            12596 ; 400  |
                            12597 ; 401  |
                            12598 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                            12599 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                            12600 ; 404  |typedef union
                            12601 ; 405  |{
                            12602 ; 406  |    struct {
                            12603 ; 407  |        unsigned S8P    :3;
                            12604 ; 408  |        unsigned S9P    :3;
                            12605 ; 409  |        unsigned S10P   :3;
                            12606 ; 410  |        unsigned S11P   :3;
                            12607 ; 411  |        unsigned S12P   :3;
                            12608 ; 412  |        unsigned S13P   :3;
                            12609 ; 413  |        unsigned S14P   :3;
                            12610 ; 414  |        unsigned S15P   :3;
                            12611 ; 415  |    } B;
                            12612 ; 416  |    int I;
                            12613 ; 417  |} iclprior1_type;
                            12614 ; 418  |
                            12615 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrupt Collector Register 1 Priority   */
                            12616 ; 420  |
                            12617 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                            12618 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                            12619 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                            12620 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                            12621 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                            12622 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                            12623 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                            12624 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                            12625 ; 429  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12626 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                            12627 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                            12628 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                            12629 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                            12630 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                            12631 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                            12632 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                            12633 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                            12634 ; 438  |
                            12635 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                            12636 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                            12637 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                            12638 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                            12639 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                            12640 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                            12641 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                            12642 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                            12643 ; 447  |
                            12644 ; 448  |
                            12645 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                            12646 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                            12647 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                            12648 ; 452  |{
                            12649 ; 453  |    struct {
                            12650 ; 454  |        unsigned S16P   :3;
                            12651 ; 455  |        unsigned S17P   :3;
                            12652 ; 456  |        unsigned S18P   :3;
                            12653 ; 457  |        unsigned S19P   :3;
                            12654 ; 458  |        unsigned S20P   :3;
                            12655 ; 459  |        unsigned S21P   :3;
                            12656 ; 460  |        unsigned S22P   :3;
                            12657 ; 461  |        unsigned S23P   :3;
                            12658 ; 462  |    } B;
                            12659 ; 463  |    int I;
                            12660 ; 464  |} iclprior2_type;
                            12661 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrupt Collector Register 2 Priority   */
                            12662 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                            12663 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                            12664 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                            12665 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                            12666 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                            12667 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                            12668 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                            12669 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                            12670 ; 474  |
                            12671 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                            12672 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                            12673 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                            12674 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                            12675 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                            12676 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                            12677 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                            12678 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                            12679 ; 483  |
                            12680 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                            12681 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                            12682 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                            12683 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                            12684 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                            12685 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                            12686 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                            12687 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                            12688 ; 492  |
                            12689 ; 493  |
                            12690 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                            12691 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                            12692 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                            12693 ; 497  |{
                            12694 ; 498  |    struct {
                            12695 ; 499  |        unsigned S24P   :3;
                            12696 ; 500  |        unsigned S25P   :3;
                            12697 ; 501  |        unsigned S26P   :3;
                            12698 ; 502  |        unsigned S27P   :3;
                            12699 ; 503  |        unsigned S28P   :3;
                            12700 ; 504  |        unsigned S29P   :3;
                            12701 ; 505  |        unsigned S30P   :3;
                            12702 ; 506  |        unsigned S31P   :3;
                            12703 ; 507  |    } B;
                            12704 ; 508  |    int I;
                            12705 ; 509  |} iclprior3_type;
                            12706 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrupt Collector Register 3 Priority   */
                            12707 ; 511  |
                            12708 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                            12709 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                            12710 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                            12711 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                            12712 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                            12713 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                            12714 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                            12715 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                            12716 ; 520  |
                            12717 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                            12718 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                            12719 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                            12720 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                            12721 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                            12722 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                            12723 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                            12724 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                            12725 ; 529  |
                            12726 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                            12727 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                            12728 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                            12729 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                            12730 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                            12731 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                            12732 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                            12733 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                            12734 ; 538  |
                            12735 ; 539  |
                            12736 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            12737 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                            12738 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                            12739 ; 543  |{
                            12740 ; 544  |    struct {
                            12741 ; 545  |        unsigned S32P   :3;
                            12742 ; 546  |        unsigned S33P   :3;
                            12743 ; 547  |    } B;
                            12744 ; 548  |    int I;
                            12745 ; 549  |} iclprior4_type;
                            12746 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt Collector Register 4 Priority   */
                            12747 ; 551  |
                            12748 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                            12749 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                            12750 ; 554  |
                            12751 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                            12752 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                            12753 ; 557  |
                            12754 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                            12755 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                            12756 ; 560  |
                            12757 ; 561  |
                            12758 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                            12759 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                            12760 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                            12761 ; 565  |{
                            12762 ; 566  |    struct {
                            12763 ; 567  |        unsigned S0S    :2;
                            12764 ; 568  |        unsigned S1S    :2;
                            12765 ; 569  |        unsigned S2S    :2;
                            12766 ; 570  |        unsigned S3S    :2;
                            12767 ; 571  |        unsigned S4S    :2;
                            12768 ; 572  |        unsigned S5S    :2;
                            12769 ; 573  |        unsigned S6S    :2;
                            12770 ; 574  |        unsigned S7S    :2;
                            12771 ; 575  |        unsigned S8S    :2;
                            12772 ; 576  |        unsigned S9S    :2;
                            12773 ; 577  |        unsigned S10S   :2;
                            12774 ; 578  |        unsigned S11S   :2;
                            12775 ; 579  |    } B;
                            12776 ; 580  |    int I;
                            12777 ; 581  |} iclsteer0_type;
                            12778 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrupt Collector Steering Register 0   */
                            12779 ; 583  |
                            12780 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                            12781 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                            12782 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                            12783 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                            12784 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                            12785 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                            12786 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                            12787 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                            12788 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                            12789 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                            12790 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                            12791 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                            12792 ; 596  |
                            12793 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                            12794 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                            12795 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                            12796 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                            12797 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                            12798 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                            12799 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                            12800 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                            12801 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                            12802 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                            12803 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                            12804 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                            12805 ; 609  |
                            12806 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                            12807 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                            12808 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                            12809 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                            12810 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                            12811 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                            12812 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                            12813 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                            12814 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                            12815 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                            12816 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                            12817 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                            12818 ; 622  |
                            12819 ; 623  |
                            12820 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                            12821 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                            12822 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                            12823 ; 627  |{
                            12824 ; 628  |    struct {
                            12825 ; 629  |        unsigned S12S   :2;
                            12826 ; 630  |        unsigned S13S   :2;
                            12827 ; 631  |        unsigned S14S   :2;
                            12828 ; 632  |        unsigned S15S   :2;
                            12829 ; 633  |        unsigned S16S   :2;
                            12830 ; 634  |        unsigned S17S   :2;
                            12831 ; 635  |        unsigned S18S   :2;
                            12832 ; 636  |        unsigned S19S   :2;
                            12833 ; 637  |        unsigned S20S   :2;
                            12834 ; 638  |        unsigned S21S   :2;
                            12835 ; 639  |        unsigned S22S   :2;
                            12836 ; 640  |        unsigned S23S   :2;
                            12837 ; 641  |    } B;
                            12838 ; 642  |    int I;
                            12839 ; 643  |} iclsteer1_type;
                            12840 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrupt Collector Steering Register 1   */
                            12841 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                            12842 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                            12843 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                            12844 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                            12845 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                            12846 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                            12847 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                            12848 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                            12849 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                            12850 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                            12851 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                            12852 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                            12853 ; 657  |
                            12854 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                            12855 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                            12856 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                            12857 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                            12858 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                            12859 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                            12860 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                            12861 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                            12862 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                            12863 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                            12864 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                            12865 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                            12866 ; 670  |
                            12867 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                            12868 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                            12869 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                            12870 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                            12871 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                            12872 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                            12873 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                            12874 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                            12875 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                            12876 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12877 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                            12878 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                            12879 ; 683  |
                            12880 ; 684  |
                            12881 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                            12882 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                            12883 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                            12884 ; 688  |{
                            12885 ; 689  |    struct {
                            12886 ; 690  |        unsigned S24S   :2;
                            12887 ; 691  |        unsigned S25S   :2;
                            12888 ; 692  |        unsigned S26S   :2;
                            12889 ; 693  |        unsigned S27S   :2;
                            12890 ; 694  |        unsigned S28S   :2;
                            12891 ; 695  |        unsigned S29S   :2;
                            12892 ; 696  |        unsigned S30S   :2;
                            12893 ; 697  |        unsigned S31S   :2;
                            12894 ; 698  |        unsigned S32S   :2;
                            12895 ; 699  |        unsigned S33S   :2;
                            12896 ; 700  |    } B;
                            12897 ; 701  |    int I;
                            12898 ; 702  |} iclsteer2_type;
                            12899 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interrupt Collector Steering Register 2  */
                            12900 ; 704  |
                            12901 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                            12902 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                            12903 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                            12904 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                            12905 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                            12906 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                            12907 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                            12908 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                            12909 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                            12910 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                            12911 ; 715  |
                            12912 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                            12913 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                            12914 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                            12915 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                            12916 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                            12917 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                            12918 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                            12919 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                            12920 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                            12921 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                            12922 ; 726  |
                            12923 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                            12924 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                            12925 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                            12926 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                            12927 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                            12928 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                            12929 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                            12930 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                            12931 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                            12932 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                            12933 ; 737  |
                            12934 ; 738  |
                            12935 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                            12936 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                            12937 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                            12938 ; 742  |{
                            12939 ; 743  |    struct {
                            12940 ; 744  |        int S0FV        :1;
                            12941 ; 745  |        int S1FV        :1;
                            12942 ; 746  |        int S2FV        :1;
                            12943 ; 747  |        int S3FV        :1;
                            12944 ; 748  |        int S4FV        :1;
                            12945 ; 749  |        int S5FV        :1;
                            12946 ; 750  |        int S6FV        :1;
                            12947 ; 751  |        int S7FV        :1;
                            12948 ; 752  |        int S8FV        :1;
                            12949 ; 753  |        int S9FV        :1;
                            12950 ; 754  |        int S10FV       :1;
                            12951 ; 755  |        int S11FV       :1;
                            12952 ; 756  |        int S12FV       :1;
                            12953 ; 757  |        int S13FV       :1;
                            12954 ; 758  |        int S14FV       :1;
                            12955 ; 759  |        int S15FV       :1;
                            12956 ; 760  |        int S16FV       :1;
                            12957 ; 761  |        int S17FV       :1;
                            12958 ; 762  |        int S18FV       :1;
                            12959 ; 763  |        int S19FV       :1;
                            12960 ; 764  |        int S20FV       :1;
                            12961 ; 765  |        int S21FV       :1;
                            12962 ; 766  |        int S22FV       :1;
                            12963 ; 767  |        int S23FV       :1;
                            12964 ; 768  |    } B;
                            12965 ; 769  |    int I;
                            12966 ; 770  |} iclforce0_type;
                            12967 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interrupt Collector Debug Force Register 0   */
                            12968 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                            12969 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                            12970 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                            12971 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                            12972 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                            12973 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                            12974 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                            12975 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                            12976 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                            12977 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                            12978 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                            12979 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                            12980 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                            12981 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                            12982 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                            12983 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                            12984 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                            12985 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                            12986 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                            12987 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                            12988 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                            12989 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                            12990 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                            12991 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                            12992 ; 796  |
                            12993 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                            12994 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                            12995 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                            12996 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                            12997 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                            12998 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                            12999 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                            13000 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                            13001 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                            13002 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                            13003 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                            13004 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                            13005 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                            13006 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                            13007 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                            13008 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                            13009 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                            13010 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                            13011 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                            13012 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                            13013 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                            13014 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                            13015 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                            13016 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                            13017 ; 821  |
                            13018 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                            13019 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                            13020 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                            13021 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                            13022 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                            13023 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                            13024 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                            13025 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                            13026 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                            13027 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                            13028 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                            13029 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                            13030 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                            13031 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                            13032 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                            13033 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                            13034 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                            13035 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                            13036 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                            13037 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                            13038 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                            13039 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                            13040 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                            13041 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                            13042 ; 846  |
                            13043 ; 847  |
                            13044 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                            13045 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                            13046 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                            13047 ; 851  |{
                            13048 ; 852  |    struct {
                            13049 ; 853  |        int S24FV       :1;
                            13050 ; 854  |        int S25FV       :1;
                            13051 ; 855  |        int S26FV       :1;
                            13052 ; 856  |        int S27FV       :1;
                            13053 ; 857  |        int S28FV       :1;
                            13054 ; 858  |        int S29FV       :1;
                            13055 ; 859  |        int S30FV       :1;
                            13056 ; 860  |        int S31FV       :1;
                            13057 ; 861  |        int S32FV       :1;
                            13058 ; 862  |        int S33FV       :1;
                            13059 ; 863  |    } B;
                            13060 ; 864  |    int I;
                            13061 ; 865  |} iclforce1_type;
                            13062 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interrupt Collector Debug Force Register 1   */
                            13063 ; 867  |
                            13064 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                            13065 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                            13066 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                            13067 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                            13068 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                            13069 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                            13070 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                            13071 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                            13072 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                            13073 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                            13074 ; 878  |
                            13075 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                            13076 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                            13077 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                            13078 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                            13079 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                            13080 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                            13081 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                            13082 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                            13083 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                            13084 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                            13085 ; 889  |
                            13086 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                            13087 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                            13088 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                            13089 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                            13090 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                            13091 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                            13092 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                            13093 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                            13094 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                            13095 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                            13096 ; 900  |
                            13097 ; 901  |
                            13098 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                            13099 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                            13100 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                            13101 ; 905  |{
                            13102 ; 906  |    struct {
                            13103 ; 907  |        int S0FE        :1;
                            13104 ; 908  |        int S1FE        :1;
                            13105 ; 909  |        int S2FE        :1;
                            13106 ; 910  |        int S3FE        :1;
                            13107 ; 911  |        int S4FE        :1;
                            13108 ; 912  |        int S5FE        :1;
                            13109 ; 913  |        int S6FE        :1;
                            13110 ; 914  |        int S7FE        :1;
                            13111 ; 915  |        int S8FE        :1;
                            13112 ; 916  |        int S9FE        :1;
                            13113 ; 917  |        int S10FE       :1;
                            13114 ; 918  |        int S11FE       :1;
                            13115 ; 919  |        int S12FE       :1;
                            13116 ; 920  |        int S13FE       :1;
                            13117 ; 921  |        int S14FE       :1;
                            13118 ; 922  |        int S15FE       :1;
                            13119 ; 923  |        int S16FE       :1;
                            13120 ; 924  |        int S17FE       :1;
                            13121 ; 925  |        int S18FE       :1;
                            13122 ; 926  |        int S19FE       :1;
                            13123 ; 927  |        int S20FE       :1;
                            13124 ; 928  |        int S21FE       :1;
                            13125 ; 929  |        int S22FE       :1;
                            13126 ; 930  |        int S23FE       :1;
                            13127 ; 931  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13128 ; 932  |    int I;
                            13129 ; 933  |} iclfenable0_type;
                            13130 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Interrupt Collector Force Enable Register 0    */
                            13131 ; 935  |
                            13132 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                            13133 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                            13134 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                            13135 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                            13136 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                            13137 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                            13138 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                            13139 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                            13140 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                            13141 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                            13142 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                            13143 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                            13144 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                            13145 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                            13146 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                            13147 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                            13148 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                            13149 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                            13150 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                            13151 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                            13152 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                            13153 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                            13154 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                            13155 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                            13156 ; 960  |
                            13157 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                            13158 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                            13159 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                            13160 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                            13161 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                            13162 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                            13163 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                            13164 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                            13165 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                            13166 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                            13167 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                            13168 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                            13169 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                            13170 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                            13171 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                            13172 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                            13173 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                            13174 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                            13175 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                            13176 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                            13177 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                            13178 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                            13179 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                            13180 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                            13181 ; 985  |
                            13182 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                            13183 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                            13184 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                            13185 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                            13186 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                            13187 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                            13188 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                            13189 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                            13190 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                            13191 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                            13192 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                            13193 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                            13194 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                            13195 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                            13196 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                            13197 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                            13198 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                            13199 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                            13200 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                            13201 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                            13202 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                            13203 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                            13204 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                            13205 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                            13206 ; 1010 |
                            13207 ; 1011 |
                            13208 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                            13209 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                            13210 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                            13211 ; 1015 |{
                            13212 ; 1016 |    struct {
                            13213 ; 1017 |        int S24FE       :1;
                            13214 ; 1018 |        int S25FE       :1;
                            13215 ; 1019 |        int S26FE       :1;
                            13216 ; 1020 |        int S27FE       :1;
                            13217 ; 1021 |        int S28FE       :1;
                            13218 ; 1022 |        int S29FE       :1;
                            13219 ; 1023 |        int S30FE       :1;
                            13220 ; 1024 |        int S31FE       :1;
                            13221 ; 1025 |        int S32FE       :1;
                            13222 ; 1026 |        int S33FE       :1;
                            13223 ; 1027 |    } B;
                            13224 ; 1028 |    int I;
                            13225 ; 1029 |} iclfenable1_type;
                            13226 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Interrupt Collector Force Enable Register 1    */
                            13227 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                            13228 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                            13229 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                            13230 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                            13231 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                            13232 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                            13233 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                            13234 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                            13235 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                            13236 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                            13237 ; 1041 |
                            13238 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                            13239 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                            13240 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                            13241 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                            13242 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                            13243 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                            13244 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                            13245 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                            13246 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                            13247 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                            13248 ; 1052 |
                            13249 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                            13250 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                            13251 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                            13252 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                            13253 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                            13254 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                            13255 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                            13256 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                            13257 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                            13258 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                            13259 ; 1063 |
                            13260 ; 1064 |
                            13261 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                            13262 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                            13263 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                            13264 ; 1068 |{
                            13265 ; 1069 |    struct {
                            13266 ; 1070 |        unsigned RQ     :7;
                            13267 ; 1071 |        unsigned IVA    :7;
                            13268 ; 1072 |        unsigned IVB    :7;
                            13269 ; 1073 |    } B;
                            13270 ; 1074 |    int I;
                            13271 ; 1075 |} iclobsvz0_type;
                            13272 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interrupt Collector Observation Register 0   */
                            13273 ; 1077 |
                            13274 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                            13275 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                            13276 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                            13277 ; 1081 |
                            13278 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                            13279 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                            13280 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                            13281 ; 1085 |
                            13282 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                            13283 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                            13284 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                            13285 ; 1089 |
                            13286 ; 1090 |
                            13287 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                            13288 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                            13289 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                            13290 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                            13291 ; 1095 |
                            13292 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                            13293 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                            13294 ; 1098 |
                            13295 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                            13296 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                            13297 ; 1101 |
                            13298 ; 1102 |
                            13299 ; 1103 |
                            13300 ; 1104 |
                            13301 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                            13302 ; 1106 |//  Interrupt Vectors
                            13303 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                            13304 ; 1108 |// Reset Vector
                            13305 ; 1109 |#define HW_IVECRESET 0x0000           
                            13306 ; 1110 |// Stack Error
                            13307 ; 1111 |#define HW_IVECSTERR 0x0002           
                            13308 ; 1112 |// Trace
                            13309 ; 1113 |#define HW_IVECTRAC 0x0004           
                            13310 ; 1114 |// SWI
                            13311 ; 1115 |#define HW_IVECSWI 0x0006           
                            13312 ; 1116 |// ~IRQA
                            13313 ; 1117 |#define HW_IVECIRQA 0x0008           
                            13314 ; 1118 |// ~IRQB - BROWNOUT
                            13315 ; 1119 |#define HW_IVECIRQB 0x000A           
                            13316 ; 1120 |// Fatal Error
                            13317 ; 1121 |#define HW_IVECERROR 0x000C           
                            13318 ; 1122 |// SPI
                            13319 ; 1123 |#define HW_IVECSPI 0x000E           
                            13320 ; 1124 |// I2S TX Data Empty
                            13321 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                            13322 ; 1126 |// I2S TX Underflow
                            13323 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                            13324 ; 1128 |// I2S RX Data Full
                            13325 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                            13326 ; 1130 |// I2S RX Overflow
                            13327 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                            13328 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors here
                            13329 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors here
                            13330 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors here
                            13331 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                            13332 ; 1136 |// GPIO1
                            13333 ; 1137 |#define HW_IVECGPIO1 0x0020           
                            13334 ; 1138 |// GPIO2
                            13335 ; 1139 |#define HW_IVECGPIO2 0x0022           
                            13336 ; 1140 |// GPIO0
                            13337 ; 1141 |#define HW_IVECGPIO0 0x0024           
                            13338 ; 1142 |// TIMER0
                            13339 ; 1143 |#define HW_IVECTIMER0 0x0026           
                            13340 ; 1144 |// TIMER1
                            13341 ; 1145 |#define HW_IVECTIMER1 0x0028           
                            13342 ; 1146 |// TIMER2
                            13343 ; 1147 |#define HW_IVECTIMER2 0x002A           
                            13344 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors here
                            13345 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors here
                            13346 ; 1150 |// I2C RX Data Ready
                            13347 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                            13348 ; 1152 |// I2C RX Overflow
                            13349 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                            13350 ; 1154 |// I2C TX Data Empty
                            13351 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                            13352 ; 1156 |// I2C TX Underflow
                            13353 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                            13354 ; 1158 |// Illegal Instruction
                            13355 ; 1159 |#define HW_IVECILI 0x0038           
                            13356 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors here
                            13357 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                            13358 ; 1162 |#define HW_IVECDACE 0x003C           
                            13359 ; 1163 |// DAC Underflow ISR
                            13360 ; 1164 |#define HW_IVECDACUF 0x003E           
                            13361 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors here
                            13362 ; 1166 |// ADC Full ISR
                            13363 ; 1167 |#define HW_IVECADCF 0x0042           
                            13364 ; 1168 |// ADC Overflow ISR
                            13365 ; 1169 |#define HW_IVECADCOF 0x0044           
                            13366 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors here
                            13367 ; 1171 |// TIMER3
                            13368 ; 1172 |#define HW_IVECTIMER3 0x0048           
                            13369 ; 1173 |// GPIO3
                            13370 ; 1174 |#define HW_IVECGPIO3 0x004A           
                            13371 ; 1175 |// SDRAM
                            13372 ; 1176 |#define HW_IVECSDRAM 0x004C           
                            13373 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors here
                            13374 ; 1178 |// 5 volt power connected
                            13375 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                            13376 ; 1180 |// USB Controller
                            13377 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                            13378 ; 1182 |// USB Wakeup 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13379 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                            13380 ; 1184 |// 5 volt power disconnected
                            13381 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                            13382 ; 1186 |// enhanced SPI
                            13383 ; 1187 |#define HW_IVECESPI 0x0058           
                            13384 ; 1188 |// filter coprocessor
                            13385 ; 1189 |#define HW_IVECFILCO 0x005A           
                            13386 ; 1190 |// low res ADC #1
                            13387 ; 1191 |#define HW_IVECLRADC1 0x005C           
                            13388 ; 1192 |// real time clock alarm
                            13389 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                            13390 ; 1194 |// low res ADC #2
                            13391 ; 1195 |#define HW_IVECLRADC2 0x0060           
                            13392 ; 1196 |// flash hardware ECC
                            13393 ; 1197 |#define HW_IVECHWECC 0x0062           
                            13394 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors here
                            13395 ; 1199 |// CDSYNC Interrupt
                            13396 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                            13397 ; 1201 |// CDSYNC Exception
                            13398 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                            13399 ; 1203 |// RS
                            13400 ; 1204 |#define HW_IVECRS 0x006A           
                            13401 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors here
                            13402 ; 1206 |// Flash Done ISR
                            13403 ; 1207 |#define HW_IVECFD 0x006E           
                            13404 ; 1208 |// CompactFlash ISR
                            13405 ; 1209 |#define HW_IVECCF 0x0070           
                            13406 ; 1210 |// SmartMedia Timeout ISR
                            13407 ; 1211 |#define HW_IVECSMTO 0x0072           
                            13408 ; 1212 |// SmartMedia Invalid Programming
                            13409 ; 1213 |#define HW_IVECSMIP 0x0074           
                            13410 ; 1214 |// CompactFlash No Card ISR
                            13411 ; 1215 |#define HW_IVECCFNC 0x0076           
                            13412 ; 1216 |// CompactFlash Status Change ISR
                            13413 ; 1217 |#define HW_IVECCFSC 0x0078           
                            13414 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors here
                            13415 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors here
                            13416 ; 1220 |// CDI
                            13417 ; 1221 |#define HW_IVECCDI 0x007E           
                            13418 ; 1222 |
                            13419 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                            13420 ; 1224 |//  Interrupt Vectors
                            13421 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                            13422 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                            13423 ; 1227 |#define VECTOR(address,isr) \ 
                            13424 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                            13425 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                            13426 ; 1230 |
                            13427 ; 1231 |
                            13428 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                            13429 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                            13430 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                            13431 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                            13432 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                            13433 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                            13434 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                            13435 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                            13436 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                            13437 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                            13438 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                            13439 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                            13440 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                            13441 ; 1245 |
                            13442 ; 1246 |// Interrupt Disabled
                            13443 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                            13444 ; 1248 |// Interrupt Priority Level 0
                            13445 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                            13446 ; 1250 |// Interrupt Priority Level 1
                            13447 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                            13448 ; 1252 |// Interrupt Priority Level 2
                            13449 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                            13450 ; 1254 |
                            13451 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                            13452 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                            13453 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                            13454 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                            13455 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                            13456 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                            13457 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                            13458 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                            13459 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                            13460 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                            13461 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                            13462 ; 1266 |
                            13463 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                            13464 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                            13465 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                            13466 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                            13467 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                            13468 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                            13469 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                            13470 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                            13471 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                            13472 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                            13473 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                            13474 ; 1278 |
                            13475 ; 1279 |// Interrupt Priority register
                            13476 ; 1280 |typedef union               
                            13477 ; 1281 |{
                            13478 ; 1282 |    struct {
                            13479 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                            13480 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                            13481 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                            13482 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                            13483 ; 1287 |        int                 :4; /* Reserved */
                            13484 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                            13485 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                            13486 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                            13487 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                            13488 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                            13489 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                            13490 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                            13491 ; 1295 |    } B;
                            13492 ; 1296 |
                            13493 ; 1297 |    int I;
                            13494 ; 1298 |
                            13495 ; 1299 |} ipr_type;
                            13496 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                            13497 ; 1301 |
                            13498 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            13499 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            13500 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                            13501 ; 1305 |
                            13502 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                            13503 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                            13504 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                            13505 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                            13506 ; 1310 |
                            13507 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                            13508 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                            13509 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                            13510 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                            13511 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                            13512 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                            13513 ; 1317 |
                            13514 ; 1318 |#endif
                            13515 ; 1319 |
                            13516 
                            13518 
                            13519 ; 26   |#include "regslradc.h"
                            13520 
                            13522 
                            13523 ; 1    |#if !(defined(regslradcinc))
                            13524 ; 2    |
                            13525 ; 3    |#define regslradcinc 1
                            13526 ; 4    |
                            13527 ; 5    |#include "types.h"
                            13528 
                            13530 
                            13531 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            13532 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            13533 ; 3    |//
                            13534 ; 4    |// Filename: types.h
                            13535 ; 5    |// Description: Standard data types
                            13536 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            13537 ; 7    |
                            13538 ; 8    |#ifndef _TYPES_H
                            13539 ; 9    |#define _TYPES_H
                            13540 ; 10   |
                            13541 ; 11   |// TODO:  move this outta here!
                            13542 ; 12   |#if !defined(NOERROR)
                            13543 ; 13   |#define NOERROR 0
                            13544 ; 14   |#define SUCCESS 0
                            13545 ; 15   |#endif 
                            13546 ; 16   |#if !defined(SUCCESS)
                            13547 ; 17   |#define SUCCESS  0
                            13548 ; 18   |#endif
                            13549 ; 19   |#if !defined(ERROR)
                            13550 ; 20   |#define ERROR   -1
                            13551 ; 21   |#endif
                            13552 ; 22   |#if !defined(FALSE)
                            13553 ; 23   |#define FALSE 0
                            13554 ; 24   |#endif
                            13555 ; 25   |#if !defined(TRUE)
                            13556 ; 26   |#define TRUE  1
                            13557 ; 27   |#endif
                            13558 ; 28   |
                            13559 ; 29   |#if !defined(NULL)
                            13560 ; 30   |#define NULL 0
                            13561 ; 31   |#endif
                            13562 ; 32   |
                            13563 ; 33   |#define MAX_INT     0x7FFFFF
                            13564 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            13565 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            13566 ; 36   |#define MAX_ULONG   (-1) 
                            13567 ; 37   |
                            13568 ; 38   |#define WORD_SIZE   24              // word size in bits
                            13569 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            13570 ; 40   |
                            13571 ; 41   |
                            13572 ; 42   |#define BYTE    unsigned char       // btVarName
                            13573 ; 43   |#define CHAR    signed char         // cVarName
                            13574 ; 44   |#define USHORT  unsigned short      // usVarName
                            13575 ; 45   |#define SHORT   unsigned short      // sVarName
                            13576 ; 46   |#define WORD    unsigned int        // wVarName
                            13577 ; 47   |#define INT     signed int          // iVarName
                            13578 ; 48   |#define DWORD   unsigned long       // dwVarName
                            13579 ; 49   |#define LONG    signed long         // lVarName
                            13580 ; 50   |#define BOOL    unsigned int        // bVarName
                            13581 ; 51   |#define FRACT   _fract              // frVarName
                            13582 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            13583 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            13584 ; 54   |#define FLOAT   float               // fVarName
                            13585 ; 55   |#define DBL     double              // dVarName
                            13586 ; 56   |#define ENUM    enum                // eVarName
                            13587 ; 57   |#define CMX     _complex            // cmxVarName
                            13588 ; 58   |typedef WORD UCS3;                   // 
                            13589 ; 59   |
                            13590 ; 60   |#define UINT16  unsigned short
                            13591 ; 61   |#define UINT8   unsigned char   
                            13592 ; 62   |#define UINT32  unsigned long
                            13593 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            13594 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            13595 ; 65   |#define WCHAR   UINT16
                            13596 ; 66   |
                            13597 ; 67   |//UINT128 is 16 bytes or 6 words
                            13598 ; 68   |typedef struct UINT128_3500 {   
                            13599 ; 69   |    int val[6];     
                            13600 ; 70   |} UINT128_3500;
                            13601 ; 71   |
                            13602 ; 72   |#define UINT128   UINT128_3500
                            13603 ; 73   |
                            13604 ; 74   |// Little endian word packed byte strings:   
                            13605 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13606 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13607 ; 77   |// Little endian word packed byte strings:   
                            13608 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13609 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13610 ; 80   |
                            13611 ; 81   |// Declare Memory Spaces To Use When Coding
                            13612 ; 82   |// A. Sector Buffers
                            13613 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            13614 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            13615 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            13616 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            13617 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            13618 ; 88   |// B. Media DDI Memory
                            13619 ; 89   |#define MEDIA_DDI_MEM _Y
                            13620 ; 90   |
                            13621 ; 91   |
                            13622 ; 92   |
                            13623 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            13624 ; 94   |// Examples of circular pointers:
                            13625 ; 95   |//    INT CIRC cpiVarName
                            13626 ; 96   |//    DWORD CIRC cpdwVarName
                            13627 ; 97   |
                            13628 ; 98   |#define RETCODE INT                 // rcVarName
                            13629 ; 99   |
                            13630 ; 100  |// generic bitfield structure
                            13631 ; 101  |struct Bitfield {
                            13632 ; 102  |    unsigned int B0  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13633 ; 103  |    unsigned int B1  :1;
                            13634 ; 104  |    unsigned int B2  :1;
                            13635 ; 105  |    unsigned int B3  :1;
                            13636 ; 106  |    unsigned int B4  :1;
                            13637 ; 107  |    unsigned int B5  :1;
                            13638 ; 108  |    unsigned int B6  :1;
                            13639 ; 109  |    unsigned int B7  :1;
                            13640 ; 110  |    unsigned int B8  :1;
                            13641 ; 111  |    unsigned int B9  :1;
                            13642 ; 112  |    unsigned int B10 :1;
                            13643 ; 113  |    unsigned int B11 :1;
                            13644 ; 114  |    unsigned int B12 :1;
                            13645 ; 115  |    unsigned int B13 :1;
                            13646 ; 116  |    unsigned int B14 :1;
                            13647 ; 117  |    unsigned int B15 :1;
                            13648 ; 118  |    unsigned int B16 :1;
                            13649 ; 119  |    unsigned int B17 :1;
                            13650 ; 120  |    unsigned int B18 :1;
                            13651 ; 121  |    unsigned int B19 :1;
                            13652 ; 122  |    unsigned int B20 :1;
                            13653 ; 123  |    unsigned int B21 :1;
                            13654 ; 124  |    unsigned int B22 :1;
                            13655 ; 125  |    unsigned int B23 :1;
                            13656 ; 126  |};
                            13657 ; 127  |
                            13658 ; 128  |union BitInt {
                            13659 ; 129  |        struct Bitfield B;
                            13660 ; 130  |        int        I;
                            13661 ; 131  |};
                            13662 ; 132  |
                            13663 ; 133  |#define MAX_MSG_LENGTH 10
                            13664 ; 134  |struct CMessage
                            13665 ; 135  |{
                            13666 ; 136  |        unsigned int m_uLength;
                            13667 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            13668 ; 138  |};
                            13669 ; 139  |
                            13670 ; 140  |typedef struct {
                            13671 ; 141  |    WORD m_wLength;
                            13672 ; 142  |    WORD m_wMessage;
                            13673 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            13674 ; 144  |} Message;
                            13675 ; 145  |
                            13676 ; 146  |struct MessageQueueDescriptor
                            13677 ; 147  |{
                            13678 ; 148  |        int *m_pBase;
                            13679 ; 149  |        int m_iModulo;
                            13680 ; 150  |        int m_iSize;
                            13681 ; 151  |        int *m_pHead;
                            13682 ; 152  |        int *m_pTail;
                            13683 ; 153  |};
                            13684 ; 154  |
                            13685 ; 155  |struct ModuleEntry
                            13686 ; 156  |{
                            13687 ; 157  |    int m_iSignaledEventMask;
                            13688 ; 158  |    int m_iWaitEventMask;
                            13689 ; 159  |    int m_iResourceOfCode;
                            13690 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            13691 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            13692 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            13693 ; 163  |    int m_uTimeOutHigh;
                            13694 ; 164  |    int m_uTimeOutLow;
                            13695 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            13696 ; 166  |};
                            13697 ; 167  |
                            13698 ; 168  |union WaitMask{
                            13699 ; 169  |    struct B{
                            13700 ; 170  |        unsigned int m_bNone     :1;
                            13701 ; 171  |        unsigned int m_bMessage  :1;
                            13702 ; 172  |        unsigned int m_bTimer    :1;
                            13703 ; 173  |        unsigned int m_bButton   :1;
                            13704 ; 174  |    } B;
                            13705 ; 175  |    int I;
                            13706 ; 176  |} ;
                            13707 ; 177  |
                            13708 ; 178  |
                            13709 ; 179  |struct Button {
                            13710 ; 180  |        WORD wButtonEvent;
                            13711 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            13712 ; 182  |};
                            13713 ; 183  |
                            13714 ; 184  |struct Message {
                            13715 ; 185  |        WORD wMsgLength;
                            13716 ; 186  |        WORD wMsgCommand;
                            13717 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            13718 ; 188  |};
                            13719 ; 189  |
                            13720 ; 190  |union EventTypes {
                            13721 ; 191  |        struct CMessage msg;
                            13722 ; 192  |        struct Button Button ;
                            13723 ; 193  |        struct Message Message;
                            13724 ; 194  |};
                            13725 ; 195  |
                            13726 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            13727 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            13728 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            13729 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            13730 ; 200  |
                            13731 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            13732 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            13733 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            13734 ; 204  |
                            13735 ; 205  |#if DEBUG
                            13736 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            13737 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            13738 ; 208  |#else 
                            13739 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            13740 ; 210  |#define DebugBuildAssert(x)    
                            13741 ; 211  |#endif
                            13742 ; 212  |
                            13743 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            13744 ; 214  |//  #pragma asm
                            13745 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            13746 ; 216  |//  #pragma endasm
                            13747 ; 217  |
                            13748 ; 218  |
                            13749 ; 219  |#ifdef COLOR_262K
                            13750 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            13751 ; 221  |#elif defined(COLOR_65K)
                            13752 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            13753 ; 223  |#else
                            13754 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            13755 ; 225  |#endif
                            13756 ; 226  |    
                            13757 ; 227  |#endif // #ifndef _TYPES_H
                            13758 
                            13760 
                            13761 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13762 ; 7    |
                            13763 ; 8    |//   SYSTEM STMP Registers 
                            13764 ; 9    |//  Last Edited 6.26.2003 M. Henson
                            13765 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13766 ; 11   |
                            13767 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                            13768 ; 13   |
                            13769 ; 14   |
                            13770 ; 15   |
                            13771 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                            13772 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                            13773 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                            13774 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                            13775 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13776 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                            13777 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                            13778 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                            13779 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                            13780 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                            13781 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                            13782 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                            13783 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                            13784 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                            13785 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                            13786 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                            13787 ; 32   |
                            13788 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                            13789 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13790 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                            13791 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                            13792 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                            13793 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                            13794 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                            13795 ; 40   |
                            13796 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                            13797 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                            13798 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                            13799 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                            13800 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                            13801 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                            13802 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                            13803 ; 48   |
                            13804 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                            13805 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                            13806 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                            13807 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                            13808 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                            13809 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                            13810 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                            13811 ; 56   |
                            13812 ; 57   |typedef union               
                            13813 ; 58   |{
                            13814 ; 59   |    struct {
                            13815 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                            13816 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                            13817 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                            13818 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                            13819 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                            13820 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                            13821 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                            13822 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                            13823 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                            13824 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                            13825 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                            13826 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                            13827 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                            13828 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                            13829 ; 74   |    } B;
                            13830 ; 75   |   unsigned int I;
                            13831 ; 76   |        unsigned int U;
                            13832 ; 77   |} lradc_ctrl_type;
                            13833 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                            13834 ; 79   |
                            13835 ; 80   |
                            13836 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                            13837 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                            13838 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                            13839 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                            13840 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                            13841 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                            13842 ; 87   |
                            13843 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                            13844 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                            13845 ; 90   |
                            13846 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                            13847 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                            13848 ; 93   |
                            13849 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                            13850 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                            13851 ; 96   |
                            13852 ; 97   |
                            13853 ; 98   |typedef union               
                            13854 ; 99   |{
                            13855 ; 100  |    struct {
                            13856 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                            13857 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                            13858 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                            13859 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                            13860 ; 105  |    } B;
                            13861 ; 106  |    unsigned int I;
                            13862 ; 107  |} lradc_thrsh_type;
                            13863 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                            13864 ; 109  |
                            13865 ; 110  |
                            13866 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            13867 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                            13868 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                            13869 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                            13870 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                            13871 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                            13872 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                            13873 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                            13874 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                            13875 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                            13876 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                            13877 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                            13878 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                            13879 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                            13880 ; 125  |
                            13881 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                            13882 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                            13883 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                            13884 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13885 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                            13886 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                            13887 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                            13888 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                            13889 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                            13890 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                            13891 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                            13892 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                            13893 ; 138  |
                            13894 ; 139  |
                            13895 ; 140  |
                            13896 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                            13897 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                            13898 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                            13899 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                            13900 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                            13901 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                            13902 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                            13903 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                            13904 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                            13905 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
                            13906 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                            13907 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                            13908 ; 153  |
                            13909 ; 154  |
                            13910 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                            13911 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                            13912 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                            13913 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                            13914 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                            13915 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                            13916 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                            13917 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                            13918 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                            13919 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                            13920 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                            13921 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                            13922 ; 167  |
                            13923 ; 168  |typedef union               
                            13924 ; 169  |{
                            13925 ; 170  |    struct {
                            13926 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                            13927 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                            13928 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                            13929 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                            13930 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                            13931 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                            13932 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                            13933 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                            13934 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                            13935 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                            13936 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                            13937 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                            13938 ; 183  |    } B;
                            13939 ; 184  |    unsigned int I;
                            13940 ; 185  |} lradc_result_type;
                            13941 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                            13942 ; 187  |
                            13943 ; 188  |
                            13944 ; 189  |
                            13945 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                            13946 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                            13947 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                            13948 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                            13949 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13950 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                            13951 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                            13952 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                            13953 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                            13954 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                            13955 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                            13956 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                            13957 ; 202  |
                            13958 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                            13959 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13960 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                            13961 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                            13962 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                            13963 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                            13964 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                            13965 ; 210  |
                            13966 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                            13967 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                            13968 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                            13969 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                            13970 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                            13971 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
                            13972 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                            13973 ; 218  |
                            13974 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                            13975 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                            13976 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                            13977 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                            13978 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                            13979 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                            13980 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                            13981 ; 226  |
                            13982 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                            13983 ; 228  |
                            13984 ; 229  |
                            13985 ; 230  |
                            13986 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            13987 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                            13988 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                            13989 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                            13990 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                            13991 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                            13992 ; 237  |
                            13993 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                            13994 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                            13995 ; 240  |
                            13996 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                            13997 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                            13998 ; 243  |
                            13999 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                            14000 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
                            14001 ; 246  |
                            14002 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                            14003 ; 248  |
                            14004 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                            14005 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                            14006 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                            14007 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                            14008 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                            14009 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                            14010 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                            14011 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                            14012 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                            14013 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                            14014 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                            14015 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                            14016 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                            14017 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                            14018 ; 263  |
                            14019 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                            14020 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                            14021 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                            14022 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                            14023 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                            14024 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                            14025 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                            14026 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                            14027 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                            14028 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                            14029 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                            14030 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                            14031 ; 276  |
                            14032 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                            14033 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                            14034 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                            14035 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                            14036 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                            14037 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                            14038 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                            14039 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                            14040 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                            14041 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                            14042 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                            14043 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                            14044 ; 289  |
                            14045 ; 290  |
                            14046 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                            14047 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                            14048 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                            14049 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                            14050 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                            14051 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                            14052 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                            14053 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                            14054 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                            14055 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                            14056 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                            14057 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                            14058 ; 303  |
                            14059 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                            14060 ; 305  |
                            14061 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                            14062 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                            14063 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                            14064 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                            14065 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                            14066 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                            14067 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                            14068 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                            14069 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                            14070 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                            14071 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                            14072 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                            14073 ; 318  |
                            14074 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                            14075 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                            14076 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                            14077 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                            14078 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                            14079 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                            14080 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                            14081 ; 326  |
                            14082 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                            14083 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                            14084 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                            14085 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                            14086 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                            14087 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                            14088 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                            14089 ; 334  |
                            14090 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                            14091 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                            14092 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                            14093 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                            14094 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                            14095 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                            14096 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                            14097 ; 342  |
                            14098 ; 343  |
                            14099 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                            14100 ; 345  |
                            14101 ; 346  |
                            14102 ; 347  |
                            14103 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                            14104 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                            14105 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                            14106 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                            14107 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                            14108 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                            14109 ; 354  |
                            14110 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                            14111 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                            14112 ; 357  |
                            14113 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                            14114 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                            14115 ; 360  |
                            14116 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                            14117 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                            14118 ; 363  |
                            14119 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                            14120 ; 365  |
                            14121 ; 366  |
                            14122 ; 367  |
                            14123 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                            14124 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                            14125 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                            14126 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                            14127 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                            14128 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                            14129 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                            14130 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                            14131 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                            14132 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                            14133 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                            14134 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                            14135 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14136 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                            14137 ; 382  |
                            14138 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                            14139 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                            14140 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                            14141 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                            14142 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                            14143 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                            14144 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                            14145 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                            14146 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                            14147 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                            14148 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                            14149 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                            14150 ; 395  |
                            14151 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                            14152 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                            14153 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                            14154 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                            14155 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                            14156 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
                            14157 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                            14158 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                            14159 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                            14160 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                            14161 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                            14162 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                            14163 ; 408  |
                            14164 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                            14165 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                            14166 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                            14167 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                            14168 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                            14169 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                            14170 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                            14171 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                            14172 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                            14173 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                            14174 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                            14175 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                            14176 ; 421  |
                            14177 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                            14178 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14179 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14180 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14181 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14182 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            14183 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            14184 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            14185 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                            14186 ; 431  |#define HW_LRADC_RES_REF_0                              80
                            14187 ; 432  |#define HW_LRADC_RES_REF_1                              77
                            14188 ; 433  |#define HW_LRADC_RES_REF_2                              100
                            14189 ; 434  |#define HW_LRADC_RES_REF_3                              129
                            14190 ; 435  |#define HW_LRADC_RES_REF_4                              160
                            14191 ; 436  |#define HW_LRADC_RES_REF_5                              154
                            14192 ; 437  |#define HW_LRADC_RES_REF_6                              200
                            14193 ; 438  |#define HW_LRADC_RES_REF_7                              258
                            14194 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                            14195 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementation
                            14196 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                            14197 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                            14198 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                            14199 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                            14200 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                            14201 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                            14202 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                            14203 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                            14204 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                            14205 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                            14206 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                            14207 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                            14208 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                            14209 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                            14210 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                            14211 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                            14212 ; 457  |
                            14213 ; 458  |//Needed by button.asm
                            14214 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                            14215 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                            14216 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                            14217 ; 462  |
                            14218 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14219 ; 464  |
                            14220 ; 465  |#endif
                            14221 ; 466  |
                            14222 ; 467  |
                            14223 
                            14225 
                            14226 ; 27   |#include "regspwm.h"
                            14227 
                            14229 
                            14230 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            14231 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            14232 ; 3    |// Filename: regspwm.inc
                            14233 ; 4    |// Description: Register definitions for PWM interface
                            14234 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            14235 ; 6    |// The following naming conventions are followed in this file.
                            14236 ; 7    |// All registers are named using the format...
                            14237 ; 8    |//     HW_<module>_<regname>
                            14238 ; 9    |// where <module> is the module name which can be any of the following...
                            14239 ; 10   |//     USB20
                            14240 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            14241 ; 12   |// module name includes a number starting from 0 for the first instance of
                            14242 ; 13   |// that module)
                            14243 ; 14   |// <regname> is the specific register within that module
                            14244 ; 15   |// We also define the following...
                            14245 ; 16   |//     HW_<module>_<regname>_BITPOS
                            14246 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            14247 ; 18   |//     HW_<module>_<regname>_SETMASK
                            14248 ; 19   |// which does something else, and
                            14249 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            14250 ; 21   |// which does something else.
                            14251 ; 22   |// Other rules
                            14252 ; 23   |//     All caps
                            14253 ; 24   |//     Numeric identifiers start at 0
                            14254 ; 25   |#if !(defined(regspwminc))
                            14255 ; 26   |#define regspwminc 1
                            14256 ; 27   |
                            14257 ; 28   |#include "types.h"
                            14258 
                            14260 
                            14261 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14262 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14263 ; 3    |//
                            14264 ; 4    |// Filename: types.h
                            14265 ; 5    |// Description: Standard data types
                            14266 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14267 ; 7    |
                            14268 ; 8    |#ifndef _TYPES_H
                            14269 ; 9    |#define _TYPES_H
                            14270 ; 10   |
                            14271 ; 11   |// TODO:  move this outta here!
                            14272 ; 12   |#if !defined(NOERROR)
                            14273 ; 13   |#define NOERROR 0
                            14274 ; 14   |#define SUCCESS 0
                            14275 ; 15   |#endif 
                            14276 ; 16   |#if !defined(SUCCESS)
                            14277 ; 17   |#define SUCCESS  0
                            14278 ; 18   |#endif
                            14279 ; 19   |#if !defined(ERROR)
                            14280 ; 20   |#define ERROR   -1
                            14281 ; 21   |#endif
                            14282 ; 22   |#if !defined(FALSE)
                            14283 ; 23   |#define FALSE 0
                            14284 ; 24   |#endif
                            14285 ; 25   |#if !defined(TRUE)
                            14286 ; 26   |#define TRUE  1
                            14287 ; 27   |#endif
                            14288 ; 28   |
                            14289 ; 29   |#if !defined(NULL)
                            14290 ; 30   |#define NULL 0
                            14291 ; 31   |#endif
                            14292 ; 32   |
                            14293 ; 33   |#define MAX_INT     0x7FFFFF
                            14294 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14295 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14296 ; 36   |#define MAX_ULONG   (-1) 
                            14297 ; 37   |
                            14298 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14299 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14300 ; 40   |
                            14301 ; 41   |
                            14302 ; 42   |#define BYTE    unsigned char       // btVarName
                            14303 ; 43   |#define CHAR    signed char         // cVarName
                            14304 ; 44   |#define USHORT  unsigned short      // usVarName
                            14305 ; 45   |#define SHORT   unsigned short      // sVarName
                            14306 ; 46   |#define WORD    unsigned int        // wVarName
                            14307 ; 47   |#define INT     signed int          // iVarName
                            14308 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14309 ; 49   |#define LONG    signed long         // lVarName
                            14310 ; 50   |#define BOOL    unsigned int        // bVarName
                            14311 ; 51   |#define FRACT   _fract              // frVarName
                            14312 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14313 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14314 ; 54   |#define FLOAT   float               // fVarName
                            14315 ; 55   |#define DBL     double              // dVarName
                            14316 ; 56   |#define ENUM    enum                // eVarName
                            14317 ; 57   |#define CMX     _complex            // cmxVarName
                            14318 ; 58   |typedef WORD UCS3;                   // 
                            14319 ; 59   |
                            14320 ; 60   |#define UINT16  unsigned short
                            14321 ; 61   |#define UINT8   unsigned char   
                            14322 ; 62   |#define UINT32  unsigned long
                            14323 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14324 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14325 ; 65   |#define WCHAR   UINT16
                            14326 ; 66   |
                            14327 ; 67   |//UINT128 is 16 bytes or 6 words
                            14328 ; 68   |typedef struct UINT128_3500 {   
                            14329 ; 69   |    int val[6];     
                            14330 ; 70   |} UINT128_3500;
                            14331 ; 71   |
                            14332 ; 72   |#define UINT128   UINT128_3500
                            14333 ; 73   |
                            14334 ; 74   |// Little endian word packed byte strings:   
                            14335 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14336 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14337 ; 77   |// Little endian word packed byte strings:   
                            14338 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14339 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14340 ; 80   |
                            14341 ; 81   |// Declare Memory Spaces To Use When Coding
                            14342 ; 82   |// A. Sector Buffers
                            14343 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14344 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14345 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14346 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14347 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14348 ; 88   |// B. Media DDI Memory
                            14349 ; 89   |#define MEDIA_DDI_MEM _Y
                            14350 ; 90   |
                            14351 ; 91   |
                            14352 ; 92   |
                            14353 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14354 ; 94   |// Examples of circular pointers:
                            14355 ; 95   |//    INT CIRC cpiVarName
                            14356 ; 96   |//    DWORD CIRC cpdwVarName
                            14357 ; 97   |
                            14358 ; 98   |#define RETCODE INT                 // rcVarName
                            14359 ; 99   |
                            14360 ; 100  |// generic bitfield structure
                            14361 ; 101  |struct Bitfield {
                            14362 ; 102  |    unsigned int B0  :1;
                            14363 ; 103  |    unsigned int B1  :1;
                            14364 ; 104  |    unsigned int B2  :1;
                            14365 ; 105  |    unsigned int B3  :1;
                            14366 ; 106  |    unsigned int B4  :1;
                            14367 ; 107  |    unsigned int B5  :1;
                            14368 ; 108  |    unsigned int B6  :1;
                            14369 ; 109  |    unsigned int B7  :1;
                            14370 ; 110  |    unsigned int B8  :1;
                            14371 ; 111  |    unsigned int B9  :1;
                            14372 ; 112  |    unsigned int B10 :1;
                            14373 ; 113  |    unsigned int B11 :1;
                            14374 ; 114  |    unsigned int B12 :1;
                            14375 ; 115  |    unsigned int B13 :1;
                            14376 ; 116  |    unsigned int B14 :1;
                            14377 ; 117  |    unsigned int B15 :1;
                            14378 ; 118  |    unsigned int B16 :1;
                            14379 ; 119  |    unsigned int B17 :1;
                            14380 ; 120  |    unsigned int B18 :1;
                            14381 ; 121  |    unsigned int B19 :1;
                            14382 ; 122  |    unsigned int B20 :1;
                            14383 ; 123  |    unsigned int B21 :1;
                            14384 ; 124  |    unsigned int B22 :1;
                            14385 ; 125  |    unsigned int B23 :1;
                            14386 ; 126  |};
                            14387 ; 127  |
                            14388 ; 128  |union BitInt {
                            14389 ; 129  |        struct Bitfield B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14390 ; 130  |        int        I;
                            14391 ; 131  |};
                            14392 ; 132  |
                            14393 ; 133  |#define MAX_MSG_LENGTH 10
                            14394 ; 134  |struct CMessage
                            14395 ; 135  |{
                            14396 ; 136  |        unsigned int m_uLength;
                            14397 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14398 ; 138  |};
                            14399 ; 139  |
                            14400 ; 140  |typedef struct {
                            14401 ; 141  |    WORD m_wLength;
                            14402 ; 142  |    WORD m_wMessage;
                            14403 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14404 ; 144  |} Message;
                            14405 ; 145  |
                            14406 ; 146  |struct MessageQueueDescriptor
                            14407 ; 147  |{
                            14408 ; 148  |        int *m_pBase;
                            14409 ; 149  |        int m_iModulo;
                            14410 ; 150  |        int m_iSize;
                            14411 ; 151  |        int *m_pHead;
                            14412 ; 152  |        int *m_pTail;
                            14413 ; 153  |};
                            14414 ; 154  |
                            14415 ; 155  |struct ModuleEntry
                            14416 ; 156  |{
                            14417 ; 157  |    int m_iSignaledEventMask;
                            14418 ; 158  |    int m_iWaitEventMask;
                            14419 ; 159  |    int m_iResourceOfCode;
                            14420 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14421 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            14422 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14423 ; 163  |    int m_uTimeOutHigh;
                            14424 ; 164  |    int m_uTimeOutLow;
                            14425 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14426 ; 166  |};
                            14427 ; 167  |
                            14428 ; 168  |union WaitMask{
                            14429 ; 169  |    struct B{
                            14430 ; 170  |        unsigned int m_bNone     :1;
                            14431 ; 171  |        unsigned int m_bMessage  :1;
                            14432 ; 172  |        unsigned int m_bTimer    :1;
                            14433 ; 173  |        unsigned int m_bButton   :1;
                            14434 ; 174  |    } B;
                            14435 ; 175  |    int I;
                            14436 ; 176  |} ;
                            14437 ; 177  |
                            14438 ; 178  |
                            14439 ; 179  |struct Button {
                            14440 ; 180  |        WORD wButtonEvent;
                            14441 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14442 ; 182  |};
                            14443 ; 183  |
                            14444 ; 184  |struct Message {
                            14445 ; 185  |        WORD wMsgLength;
                            14446 ; 186  |        WORD wMsgCommand;
                            14447 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14448 ; 188  |};
                            14449 ; 189  |
                            14450 ; 190  |union EventTypes {
                            14451 ; 191  |        struct CMessage msg;
                            14452 ; 192  |        struct Button Button ;
                            14453 ; 193  |        struct Message Message;
                            14454 ; 194  |};
                            14455 ; 195  |
                            14456 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14457 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14458 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14459 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            14460 ; 200  |
                            14461 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14462 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14463 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14464 ; 204  |
                            14465 ; 205  |#if DEBUG
                            14466 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14467 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14468 ; 208  |#else 
                            14469 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            14470 ; 210  |#define DebugBuildAssert(x)    
                            14471 ; 211  |#endif
                            14472 ; 212  |
                            14473 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14474 ; 214  |//  #pragma asm
                            14475 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            14476 ; 216  |//  #pragma endasm
                            14477 ; 217  |
                            14478 ; 218  |
                            14479 ; 219  |#ifdef COLOR_262K
                            14480 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            14481 ; 221  |#elif defined(COLOR_65K)
                            14482 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            14483 ; 223  |#else
                            14484 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            14485 ; 225  |#endif
                            14486 ; 226  |    
                            14487 ; 227  |#endif // #ifndef _TYPES_H
                            14488 
                            14490 
                            14491 ; 29   |
                            14492 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14493 ; 31   |//   Pulse Width Modulator STMP Registers 
                            14494 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14495 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                            14496 ; 34   |
                            14497 ; 35   |
                            14498 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            14499 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                            14500 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                            14501 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                            14502 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                            14503 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                            14504 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                            14505 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                            14506 ; 44   |
                            14507 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                            14508 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                            14509 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                            14510 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                            14511 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                            14512 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                            14513 ; 51   |
                            14514 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_BITPOS)
                            14515 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_BITPOS)
                            14516 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_BITPOS)
                            14517 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_BITPOS)
                            14518 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                            14519 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_BITPOS)
                            14520 ; 58   |
                            14521 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                            14522 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                            14523 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                            14524 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                            14525 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                            14526 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                            14527 ; 65   |
                            14528 ; 66   |typedef union               
                            14529 ; 67   |{
                            14530 ; 68   |    struct {
                            14531 ; 69   |        int PWM0_EN                    :1;
                            14532 ; 70   |        int PWM1_EN                    :1;
                            14533 ; 71   |        int PWM2_EN                    :1;
                            14534 ; 72   |        int PWM3_EN                    :1;
                            14535 ; 73   |        int RSVD0                      :4;
                            14536 ; 74   |        int CDIV                       :2;
                            14537 ; 75   |        int RSVD1                      :13;
                            14538 ; 76   |        int MSTR_EN                    :1;
                            14539 ; 77   |    } B;
                            14540 ; 78   |    int I;
                            14541 ; 79   |} pwmcsr_type;
                            14542 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control Status Register */
                            14543 ; 81   |
                            14544 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                            14545 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                            14546 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                            14547 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                            14548 ; 86   |
                            14549 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                            14550 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                            14551 ; 89   |
                            14552 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTIVE_BITPOS)
                            14553 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_INACTIVE_BITPOS)
                            14554 ; 92   |
                            14555 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                            14556 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                            14557 ; 95   |
                            14558 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                            14559 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                            14560 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                            14561 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                            14562 ; 100  |
                            14563 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                            14564 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                            14565 ; 103  |
                            14566 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTIVE_BITPOS)
                            14567 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_INACTIVE_BITPOS)
                            14568 ; 106  |
                            14569 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                            14570 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                            14571 ; 109  |
                            14572 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                            14573 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                            14574 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                            14575 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                            14576 ; 114  |
                            14577 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                            14578 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                            14579 ; 117  |
                            14580 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTIVE_BITPOS)
                            14581 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_INACTIVE_BITPOS)
                            14582 ; 120  |
                            14583 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                            14584 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                            14585 ; 123  |
                            14586 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                            14587 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                            14588 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                            14589 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                            14590 ; 128  |
                            14591 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                            14592 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                            14593 ; 131  |
                            14594 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTIVE_BITPOS)
                            14595 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_INACTIVE_BITPOS)
                            14596 ; 134  |
                            14597 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                            14598 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                            14599 ; 137  |
                            14600 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            14601 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                            14602 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                            14603 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                            14604 ; 142  |
                            14605 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                            14606 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                            14607 ; 145  |
                            14608 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTIVE_BITPOS)
                            14609 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_INACTIVE_BITPOS)
                            14610 ; 148  |
                            14611 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                            14612 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                            14613 ; 151  |
                            14614 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            14615 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                            14616 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                            14617 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                            14618 ; 156  |
                            14619 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                            14620 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                            14621 ; 159  |
                            14622 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTIVE_BITPOS)
                            14623 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_INACTIVE_BITPOS)
                            14624 ; 162  |
                            14625 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                            14626 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                            14627 ; 165  |
                            14628 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                            14629 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                            14630 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                            14631 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                            14632 ; 170  |
                            14633 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                            14634 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                            14635 ; 173  |
                            14636 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTIVE_BITPOS)
                            14637 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_INACTIVE_BITPOS)
                            14638 ; 176  |
                            14639 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                            14640 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                            14641 ; 179  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14642 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                            14643 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                            14644 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                            14645 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                            14646 ; 184  |
                            14647 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                            14648 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                            14649 ; 187  |
                            14650 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTIVE_BITPOS)
                            14651 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_INACTIVE_BITPOS)
                            14652 ; 190  |
                            14653 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                            14654 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                            14655 ; 193  |
                            14656 ; 194  |typedef union               
                            14657 ; 195  |{
                            14658 ; 196  |    struct {
                            14659 ; 197  |       int ACTIVE                    :12;
                            14660 ; 198  |       int INACTIVE                  :12;
                            14661 ; 199  |    } B;
                            14662 ; 200  |    int I;
                            14663 ; 201  |} pwmchan_type;
                            14664 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Channel 0 A Register */
                            14665 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Channel 0 B Register */
                            14666 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Channel 1 A Register */
                            14667 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Channel 1 B Register */
                            14668 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Channel 2 A Register */
                            14669 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Channel 2 B Register */
                            14670 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Channel 3 A Register */
                            14671 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Channel 3 B Register */
                            14672 ; 210  |
                            14673 ; 211  |#endif
                            14674 ; 212  |
                            14675 ; 213  |
                            14676 ; 214  |
                            14677 ; 215  |
                            14678 
                            14680 
                            14681 ; 28   |#include "regsrevision.h"
                            14682 
                            14684 
                            14685 ; 1    |#if !(defined(__HW_REVR))
                            14686 ; 2    |#define __HW_REVR 1
                            14687 ; 3    |
                            14688 ; 4    |
                            14689 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                            14690 ; 6    |
                            14691 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                            14692 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                            14693 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                            14694 ; 10   |
                            14695 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                            14696 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                            14697 ; 13   |
                            14698 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS)
                            14699 ; 15   |
                            14700 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                            14701 ; 17   |
                            14702 ; 18   |
                            14703 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                            14704 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                            14705 ; 21   |//  June15 2004: C struct updated to be correct: 
                            14706 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits.
                            14707 ; 23   |typedef union               
                            14708 ; 24   |{
                            14709 ; 25   |    struct {
                            14710 ; 26   |        unsigned RMN    :5;     //Minor Revision
                            14711 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapping
                            14712 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                            14713 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                            14714 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                            14715 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                            14716 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                            14717 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                            14718 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                            14719 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                            14720 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                            14721 ; 37   |        unsigned RMJ    :16;    //Major Revision
                            14722 ; 38   |    } B;
                            14723 ; 39   |
                            14724 ; 40   |    int I;
                            14725 ; 41   |
                            14726 ; 42   |} revr_type;
                            14727 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                            14728 ; 44   |
                            14729 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                            14730 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                            14731 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                            14732 ; 48   |
                            14733 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                            14734 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE_B0_BITPOS)
                            14735 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                            14736 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                            14737 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                            14738 ; 54   |
                            14739 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                            14740 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                            14741 ; 57   |
                            14742 ; 58   |#endif //!@def(__HW_REVR)
                            14743 ; 59   |
                            14744 
                            14746 
                            14747 ; 29   |#include "regsrtc.h"
                            14748 
                            14750 
                            14751 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            14752 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14753 ; 3    |// Filename: regsrtc.inc
                            14754 ; 4    |// Description: Register definitions for RTC interface
                            14755 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            14756 ; 6    |// The following naming conventions are followed in this file.
                            14757 ; 7    |// All registers are named using the format...
                            14758 ; 8    |//     HW_<module>_<regname>
                            14759 ; 9    |// where <module> is the module name which can be any of the following...
                            14760 ; 10   |//     USB20
                            14761 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            14762 ; 12   |// module name includes a number starting from 0 for the first instance of
                            14763 ; 13   |// that module)
                            14764 ; 14   |// <regname> is the specific register within that module
                            14765 ; 15   |// We also define the following...
                            14766 ; 16   |//     HW_<module>_<regname>_BITPOS
                            14767 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            14768 ; 18   |//     HW_<module>_<regname>_SETMASK
                            14769 ; 19   |// which does something else, and
                            14770 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            14771 ; 21   |// which does something else.
                            14772 ; 22   |// Other rules
                            14773 ; 23   |//     All caps
                            14774 ; 24   |//     Numeric identifiers start at 0
                            14775 ; 25   |#if !(defined(regsrtcinc))
                            14776 ; 26   |#define regsrtcinc 1
                            14777 ; 27   |
                            14778 ; 28   |#include "types.h"
                            14779 
                            14781 
                            14782 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14783 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14784 ; 3    |//
                            14785 ; 4    |// Filename: types.h
                            14786 ; 5    |// Description: Standard data types
                            14787 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14788 ; 7    |
                            14789 ; 8    |#ifndef _TYPES_H
                            14790 ; 9    |#define _TYPES_H
                            14791 ; 10   |
                            14792 ; 11   |// TODO:  move this outta here!
                            14793 ; 12   |#if !defined(NOERROR)
                            14794 ; 13   |#define NOERROR 0
                            14795 ; 14   |#define SUCCESS 0
                            14796 ; 15   |#endif 
                            14797 ; 16   |#if !defined(SUCCESS)
                            14798 ; 17   |#define SUCCESS  0
                            14799 ; 18   |#endif
                            14800 ; 19   |#if !defined(ERROR)
                            14801 ; 20   |#define ERROR   -1
                            14802 ; 21   |#endif
                            14803 ; 22   |#if !defined(FALSE)
                            14804 ; 23   |#define FALSE 0
                            14805 ; 24   |#endif
                            14806 ; 25   |#if !defined(TRUE)
                            14807 ; 26   |#define TRUE  1
                            14808 ; 27   |#endif
                            14809 ; 28   |
                            14810 ; 29   |#if !defined(NULL)
                            14811 ; 30   |#define NULL 0
                            14812 ; 31   |#endif
                            14813 ; 32   |
                            14814 ; 33   |#define MAX_INT     0x7FFFFF
                            14815 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14816 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14817 ; 36   |#define MAX_ULONG   (-1) 
                            14818 ; 37   |
                            14819 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14820 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14821 ; 40   |
                            14822 ; 41   |
                            14823 ; 42   |#define BYTE    unsigned char       // btVarName
                            14824 ; 43   |#define CHAR    signed char         // cVarName
                            14825 ; 44   |#define USHORT  unsigned short      // usVarName
                            14826 ; 45   |#define SHORT   unsigned short      // sVarName
                            14827 ; 46   |#define WORD    unsigned int        // wVarName
                            14828 ; 47   |#define INT     signed int          // iVarName
                            14829 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14830 ; 49   |#define LONG    signed long         // lVarName
                            14831 ; 50   |#define BOOL    unsigned int        // bVarName
                            14832 ; 51   |#define FRACT   _fract              // frVarName
                            14833 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14834 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14835 ; 54   |#define FLOAT   float               // fVarName
                            14836 ; 55   |#define DBL     double              // dVarName
                            14837 ; 56   |#define ENUM    enum                // eVarName
                            14838 ; 57   |#define CMX     _complex            // cmxVarName
                            14839 ; 58   |typedef WORD UCS3;                   // 
                            14840 ; 59   |
                            14841 ; 60   |#define UINT16  unsigned short
                            14842 ; 61   |#define UINT8   unsigned char   
                            14843 ; 62   |#define UINT32  unsigned long
                            14844 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14845 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            14846 ; 65   |#define WCHAR   UINT16
                            14847 ; 66   |
                            14848 ; 67   |//UINT128 is 16 bytes or 6 words
                            14849 ; 68   |typedef struct UINT128_3500 {   
                            14850 ; 69   |    int val[6];     
                            14851 ; 70   |} UINT128_3500;
                            14852 ; 71   |
                            14853 ; 72   |#define UINT128   UINT128_3500
                            14854 ; 73   |
                            14855 ; 74   |// Little endian word packed byte strings:   
                            14856 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14857 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14858 ; 77   |// Little endian word packed byte strings:   
                            14859 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14860 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14861 ; 80   |
                            14862 ; 81   |// Declare Memory Spaces To Use When Coding
                            14863 ; 82   |// A. Sector Buffers
                            14864 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14865 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14866 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14867 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14868 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14869 ; 88   |// B. Media DDI Memory
                            14870 ; 89   |#define MEDIA_DDI_MEM _Y
                            14871 ; 90   |
                            14872 ; 91   |
                            14873 ; 92   |
                            14874 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14875 ; 94   |// Examples of circular pointers:
                            14876 ; 95   |//    INT CIRC cpiVarName
                            14877 ; 96   |//    DWORD CIRC cpdwVarName
                            14878 ; 97   |
                            14879 ; 98   |#define RETCODE INT                 // rcVarName
                            14880 ; 99   |
                            14881 ; 100  |// generic bitfield structure
                            14882 ; 101  |struct Bitfield {
                            14883 ; 102  |    unsigned int B0  :1;
                            14884 ; 103  |    unsigned int B1  :1;
                            14885 ; 104  |    unsigned int B2  :1;
                            14886 ; 105  |    unsigned int B3  :1;
                            14887 ; 106  |    unsigned int B4  :1;
                            14888 ; 107  |    unsigned int B5  :1;
                            14889 ; 108  |    unsigned int B6  :1;
                            14890 ; 109  |    unsigned int B7  :1;
                            14891 ; 110  |    unsigned int B8  :1;
                            14892 ; 111  |    unsigned int B9  :1;
                            14893 ; 112  |    unsigned int B10 :1;
                            14894 ; 113  |    unsigned int B11 :1;
                            14895 ; 114  |    unsigned int B12 :1;
                            14896 ; 115  |    unsigned int B13 :1;
                            14897 ; 116  |    unsigned int B14 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14898 ; 117  |    unsigned int B15 :1;
                            14899 ; 118  |    unsigned int B16 :1;
                            14900 ; 119  |    unsigned int B17 :1;
                            14901 ; 120  |    unsigned int B18 :1;
                            14902 ; 121  |    unsigned int B19 :1;
                            14903 ; 122  |    unsigned int B20 :1;
                            14904 ; 123  |    unsigned int B21 :1;
                            14905 ; 124  |    unsigned int B22 :1;
                            14906 ; 125  |    unsigned int B23 :1;
                            14907 ; 126  |};
                            14908 ; 127  |
                            14909 ; 128  |union BitInt {
                            14910 ; 129  |        struct Bitfield B;
                            14911 ; 130  |        int        I;
                            14912 ; 131  |};
                            14913 ; 132  |
                            14914 ; 133  |#define MAX_MSG_LENGTH 10
                            14915 ; 134  |struct CMessage
                            14916 ; 135  |{
                            14917 ; 136  |        unsigned int m_uLength;
                            14918 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14919 ; 138  |};
                            14920 ; 139  |
                            14921 ; 140  |typedef struct {
                            14922 ; 141  |    WORD m_wLength;
                            14923 ; 142  |    WORD m_wMessage;
                            14924 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14925 ; 144  |} Message;
                            14926 ; 145  |
                            14927 ; 146  |struct MessageQueueDescriptor
                            14928 ; 147  |{
                            14929 ; 148  |        int *m_pBase;
                            14930 ; 149  |        int m_iModulo;
                            14931 ; 150  |        int m_iSize;
                            14932 ; 151  |        int *m_pHead;
                            14933 ; 152  |        int *m_pTail;
                            14934 ; 153  |};
                            14935 ; 154  |
                            14936 ; 155  |struct ModuleEntry
                            14937 ; 156  |{
                            14938 ; 157  |    int m_iSignaledEventMask;
                            14939 ; 158  |    int m_iWaitEventMask;
                            14940 ; 159  |    int m_iResourceOfCode;
                            14941 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14942 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            14943 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14944 ; 163  |    int m_uTimeOutHigh;
                            14945 ; 164  |    int m_uTimeOutLow;
                            14946 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14947 ; 166  |};
                            14948 ; 167  |
                            14949 ; 168  |union WaitMask{
                            14950 ; 169  |    struct B{
                            14951 ; 170  |        unsigned int m_bNone     :1;
                            14952 ; 171  |        unsigned int m_bMessage  :1;
                            14953 ; 172  |        unsigned int m_bTimer    :1;
                            14954 ; 173  |        unsigned int m_bButton   :1;
                            14955 ; 174  |    } B;
                            14956 ; 175  |    int I;
                            14957 ; 176  |} ;
                            14958 ; 177  |
                            14959 ; 178  |
                            14960 ; 179  |struct Button {
                            14961 ; 180  |        WORD wButtonEvent;
                            14962 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14963 ; 182  |};
                            14964 ; 183  |
                            14965 ; 184  |struct Message {
                            14966 ; 185  |        WORD wMsgLength;
                            14967 ; 186  |        WORD wMsgCommand;
                            14968 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14969 ; 188  |};
                            14970 ; 189  |
                            14971 ; 190  |union EventTypes {
                            14972 ; 191  |        struct CMessage msg;
                            14973 ; 192  |        struct Button Button ;
                            14974 ; 193  |        struct Message Message;
                            14975 ; 194  |};
                            14976 ; 195  |
                            14977 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14978 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14979 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14980 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            14981 ; 200  |
                            14982 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14983 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14984 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14985 ; 204  |
                            14986 ; 205  |#if DEBUG
                            14987 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14988 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14989 ; 208  |#else 
                            14990 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            14991 ; 210  |#define DebugBuildAssert(x)    
                            14992 ; 211  |#endif
                            14993 ; 212  |
                            14994 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14995 ; 214  |//  #pragma asm
                            14996 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            14997 ; 216  |//  #pragma endasm
                            14998 ; 217  |
                            14999 ; 218  |
                            15000 ; 219  |#ifdef COLOR_262K
                            15001 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            15002 ; 221  |#elif defined(COLOR_65K)
                            15003 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            15004 ; 223  |#else
                            15005 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            15006 ; 225  |#endif
                            15007 ; 226  |    
                            15008 ; 227  |#endif // #ifndef _TYPES_H
                            15009 
                            15011 
                            15012 ; 29   |
                            15013 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15014 ; 31   |
                            15015 ; 32   |//   RTC STMP Registers 
                            15016 ; 33   |//   Edited 2/26/2002 J. Ferrara
                            15017 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15018 ; 35   |
                            15019 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                            15020 ; 37   |
                            15021 ; 38   |
                            15022 ; 39   |
                            15023 ; 40   |
                            15024 ; 41   |
                            15025 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                            15026 ; 43   |
                            15027 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                            15028 ; 45   |
                            15029 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                            15030 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                            15031 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                            15032 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                            15033 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                            15034 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                            15035 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                            15036 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                            15037 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                            15038 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                            15039 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                            15040 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                            15041 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                            15042 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                            15043 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                            15044 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                                           
                            15045 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                            15046 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                            15047 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                            15048 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                            15049 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                            15050 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                            15051 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                            15052 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                            15053 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                            15054 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                            15055 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                            15056 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                            15057 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                            15058 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                            15059 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                            15060 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                            15061 ; 78   |
                            15062 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                            15063 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                            15064 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                            15065 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                            15066 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                            15067 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                            15068 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                            15069 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                            15070 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                            15071 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                            15072 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                            15073 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                            15074 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                            15075 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                            15076 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                            15077 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                            15078 ; 95   |
                            15079 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                            15080 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                            15081 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                            15082 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                            15083 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                            15084 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                            15085 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                            15086 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                            15087 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                            15088 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                            15089 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                            15090 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                            15091 ; 108  |
                            15092 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                            15093 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                            15094 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                            15095 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                            15096 ; 113  |
                            15097 ; 114  |
                            15098 ; 115  |typedef union               
                            15099 ; 116  |{
                            15100 ; 117  |    struct {
                            15101 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                            15102 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                            15103 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                            15104 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                            15105 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                            15106 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                            15107 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                            15108 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                            15109 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                            15110 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                            15111 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                            15112 ; 129  |    } B;
                            15113 ; 130  |    int I;
                            15114 ; 131  |    unsigned int U;
                            15115 ; 132  |} rtc_csr_type;
                            15116 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
                            15117 ; 134  |
                            15118 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            15119 ; 136  |
                            15120 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                            15121 ; 138  |
                            15122 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                            15123 ; 140  |
                            15124 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                            15125 ; 142  |
                            15126 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                            15127 ; 144  |
                            15128 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                            15129 ; 146  |
                            15130 ; 147  |typedef union               
                            15131 ; 148  |{
                            15132 ; 149  |    struct {
                            15133 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                            15134 ; 151  |    } B;
                            15135 ; 152  |    int I;
                            15136 ; 153  |    unsigned int U;
                            15137 ; 154  |} rtc_mseconds0_type;
                            15138 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                            15139 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                            15140 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                            15141 ; 158  |
                            15142 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                            15143 ; 160  |
                            15144 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                            15145 ; 162  |
                            15146 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                            15147 ; 164  |
                            15148 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                            15149 ; 166  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15150 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                            15151 ; 168  |
                            15152 ; 169  |typedef union               
                            15153 ; 170  |{
                            15154 ; 171  |    struct {
                            15155 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                            15156 ; 173  |    } B;
                            15157 ; 174  |    int I;
                            15158 ; 175  |    unsigned int U;
                            15159 ; 176  |} rtc_mseconds1_type;
                            15160 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                            15161 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                            15162 ; 179  |
                            15163 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                            15164 ; 181  |#define HW_RTC_UP_OFFSET 2
                            15165 ; 182  |
                            15166 ; 183  |
                            15167 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                            15168 ; 185  |
                            15169 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                            15170 ; 187  |
                            15171 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                            15172 ; 189  |
                            15173 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                            15174 ; 191  |
                            15175 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                            15176 ; 193  |
                            15177 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                            15178 ; 195  |
                            15179 ; 196  |typedef union               
                            15180 ; 197  |{
                            15181 ; 198  |    struct {
                            15182 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                            15183 ; 200  |    } B;
                            15184 ; 201  |    int I;
                            15185 ; 202  |    unsigned int U;
                            15186 ; 203  |} rtc_watchdog_type;
                            15187 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                            15188 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            15189 ; 206  |
                            15190 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                            15191 ; 208  |
                            15192 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                            15193 ; 210  |
                            15194 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                            15195 ; 212  |
                            15196 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                            15197 ; 214  |
                            15198 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                            15199 ; 216  |
                            15200 ; 217  |typedef union               
                            15201 ; 218  |{
                            15202 ; 219  |    struct {
                            15203 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                            15204 ; 221  |    } B;
                            15205 ; 222  |    int I;
                            15206 ; 223  |    unsigned int U;
                            15207 ; 224  |} rtc_alarm0_type;
                            15208 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                            15209 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                            15210 ; 227  |
                            15211 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                            15212 ; 229  |
                            15213 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                            15214 ; 231  |
                            15215 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                            15216 ; 233  |
                            15217 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                            15218 ; 235  |
                            15219 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                            15220 ; 237  |
                            15221 ; 238  |typedef union               
                            15222 ; 239  |{
                            15223 ; 240  |    struct {
                            15224 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                            15225 ; 242  |    } B;
                            15226 ; 243  |    int I;
                            15227 ; 244  |    unsigned int U;
                            15228 ; 245  |} rtc_alarm1_type;
                            15229 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                            15230 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            15231 ; 248  |
                            15232 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                            15233 ; 250  |
                            15234 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                            15235 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                            15236 ; 253  |
                            15237 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                            15238 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                            15239 ; 256  |
                            15240 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                            15241 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                            15242 ; 259  |
                            15243 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                            15244 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                            15245 ; 262  |
                            15246 ; 263  |typedef union               
                            15247 ; 264  |{
                            15248 ; 265  |    struct {
                            15249 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                            15250 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                            15251 ; 268  |    } B;
                            15252 ; 269  |    int I;
                            15253 ; 270  |    unsigned int U;
                            15254 ; 271  |} rtc_xtaldivide_type;
                            15255 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                            15256 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                            15257 ; 274  |
                            15258 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                            15259 ; 276  |
                            15260 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                            15261 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                            15262 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                            15263 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                            15264 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                            15265 ; 282  |
                            15266 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                            15267 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                            15268 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                            15269 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                            15270 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                            15271 ; 288  |
                            15272 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                            15273 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                            15274 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                            15275 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                            15276 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                            15277 ; 294  |
                            15278 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                            15279 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                            15280 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                            15281 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                            15282 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                            15283 ; 300  |
                            15284 ; 301  |typedef union               
                            15285 ; 302  |{
                            15286 ; 303  |   struct {
                            15287 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                            15288 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                            15289 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                            15290 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                            15291 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                            15292 ; 309  |   } B;
                            15293 ; 310  |    int I;
                            15294 ; 311  |    unsigned int U;
                            15295 ; 312  |} rtc_PERSISTENT0_type;
                            15296 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                            15297 ; 314  |
                            15298 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                            15299 ; 316  |
                            15300 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                            15301 ; 318  |
                            15302 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                            15303 ; 320  |
                            15304 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                            15305 ; 322  |
                            15306 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                            15307 ; 324  |
                            15308 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                            15309 ; 326  |
                            15310 ; 327  |
                            15311 ; 328  |typedef union               
                            15312 ; 329  |{
                            15313 ; 330  |    struct {
                            15314 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                            15315 ; 332  |    } B;
                            15316 ; 333  |    int I;
                            15317 ; 334  |    unsigned int U;
                            15318 ; 335  |} rtc_PERSISTENT1_type;
                            15319 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                            15320 ; 337  |
                            15321 ; 338  |
                            15322 ; 339  |#endif
                            15323 ; 340  |
                            15324 ; 341  |
                            15325 ; 342  |
                            15326 ; 343  |
                            15327 ; 344  |
                            15328 ; 345  |
                            15329 ; 346  |
                            15330 ; 347  |
                            15331 ; 348  |
                            15332 ; 349  |
                            15333 ; 350  |
                            15334 ; 351  |
                            15335 ; 352  |
                            15336 ; 353  |
                            15337 
                            15339 
                            15340 ; 30   |#include "regsspare.h"
                            15341 
                            15343 
                            15344 ; 1    |#if !(defined(RESGSSPARE_INC))
                            15345 ; 2    |#define RESGSSPARE_INC 1
                            15346 ; 3    |
                            15347 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                            15348 ; 5    |
                            15349 ; 6    |
                            15350 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                            15351 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                            15352 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                            15353 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                            15354 ; 11   |
                            15355 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                            15356 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                            15357 ; 14   |
                            15358 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                            15359 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                            15360 ; 17   |
                            15361 ; 18   |
                            15362 ; 19   |
                            15363 ; 20   |typedef union               
                            15364 ; 21   |{
                            15365 ; 22   |    struct {
                            15366 ; 23   |        int      I2SS       :1;     
                            15367 ; 24   |        int      USBSELECT  :1;     
                            15368 ; 25   |        unsigned            :6;
                            15369 ; 26   |        int      USBPLUGIN  :1;     
                            15370 ; 27   |        int      PSWITCH    :1;     
                            15371 ; 28   |    } B;
                            15372 ; 29   |
                            15373 ; 30   |    int I;
                            15374 ; 31   |
                            15375 ; 32   |} spare_type;
                            15376 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                            15377 ; 34   |
                            15378 ; 35   |
                            15379 ; 36   |
                            15380 ; 37   |#endif
                            15381 
                            15383 
                            15384 ; 31   |#include "regsspi.h"
                            15385 
                            15387 
                            15388 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15389 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                            15390 ; 3    |//;; Filename    : regsspi.inc
                            15391 ; 4    |//;; Description : Register definitions for SPI interface
                            15392 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15393 ; 6    |
                            15394 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                            15395 ; 8    |// The following naming conventions are followed in this file.
                            15396 ; 9    |// All registers are named using the format...
                            15397 ; 10   |//     HW_<module>_<regname>
                            15398 ; 11   |// where <module> is the module name which can be any of the following...
                            15399 ; 12   |//     USB20
                            15400 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            15401 ; 14   |// module name includes a number starting from 0 for the first instance of
                            15402 ; 15   |// that module)
                            15403 ; 16   |// <regname> is the specific register within that module
                            15404 ; 17   |// We also define the following...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15405 ; 18   |//     HW_<module>_<regname>_BITPOS
                            15406 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            15407 ; 20   |//     HW_<module>_<regname>_SETMASK
                            15408 ; 21   |// which does something else, and
                            15409 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            15410 ; 23   |// which does something else.
                            15411 ; 24   |// Other rules
                            15412 ; 25   |//     All caps
                            15413 ; 26   |//     Numeric identifiers start at 0
                            15414 ; 27   |#if !(defined(regsspiinc))
                            15415 ; 28   |#define regsspiinc 1
                            15416 ; 29   |
                            15417 ; 30   |#include "types.h"
                            15418 
                            15420 
                            15421 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15422 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            15423 ; 3    |//
                            15424 ; 4    |// Filename: types.h
                            15425 ; 5    |// Description: Standard data types
                            15426 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15427 ; 7    |
                            15428 ; 8    |#ifndef _TYPES_H
                            15429 ; 9    |#define _TYPES_H
                            15430 ; 10   |
                            15431 ; 11   |// TODO:  move this outta here!
                            15432 ; 12   |#if !defined(NOERROR)
                            15433 ; 13   |#define NOERROR 0
                            15434 ; 14   |#define SUCCESS 0
                            15435 ; 15   |#endif 
                            15436 ; 16   |#if !defined(SUCCESS)
                            15437 ; 17   |#define SUCCESS  0
                            15438 ; 18   |#endif
                            15439 ; 19   |#if !defined(ERROR)
                            15440 ; 20   |#define ERROR   -1
                            15441 ; 21   |#endif
                            15442 ; 22   |#if !defined(FALSE)
                            15443 ; 23   |#define FALSE 0
                            15444 ; 24   |#endif
                            15445 ; 25   |#if !defined(TRUE)
                            15446 ; 26   |#define TRUE  1
                            15447 ; 27   |#endif
                            15448 ; 28   |
                            15449 ; 29   |#if !defined(NULL)
                            15450 ; 30   |#define NULL 0
                            15451 ; 31   |#endif
                            15452 ; 32   |
                            15453 ; 33   |#define MAX_INT     0x7FFFFF
                            15454 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            15455 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            15456 ; 36   |#define MAX_ULONG   (-1) 
                            15457 ; 37   |
                            15458 ; 38   |#define WORD_SIZE   24              // word size in bits
                            15459 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            15460 ; 40   |
                            15461 ; 41   |
                            15462 ; 42   |#define BYTE    unsigned char       // btVarName
                            15463 ; 43   |#define CHAR    signed char         // cVarName
                            15464 ; 44   |#define USHORT  unsigned short      // usVarName
                            15465 ; 45   |#define SHORT   unsigned short      // sVarName
                            15466 ; 46   |#define WORD    unsigned int        // wVarName
                            15467 ; 47   |#define INT     signed int          // iVarName
                            15468 ; 48   |#define DWORD   unsigned long       // dwVarName
                            15469 ; 49   |#define LONG    signed long         // lVarName
                            15470 ; 50   |#define BOOL    unsigned int        // bVarName
                            15471 ; 51   |#define FRACT   _fract              // frVarName
                            15472 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            15473 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            15474 ; 54   |#define FLOAT   float               // fVarName
                            15475 ; 55   |#define DBL     double              // dVarName
                            15476 ; 56   |#define ENUM    enum                // eVarName
                            15477 ; 57   |#define CMX     _complex            // cmxVarName
                            15478 ; 58   |typedef WORD UCS3;                   // 
                            15479 ; 59   |
                            15480 ; 60   |#define UINT16  unsigned short
                            15481 ; 61   |#define UINT8   unsigned char   
                            15482 ; 62   |#define UINT32  unsigned long
                            15483 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            15484 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            15485 ; 65   |#define WCHAR   UINT16
                            15486 ; 66   |
                            15487 ; 67   |//UINT128 is 16 bytes or 6 words
                            15488 ; 68   |typedef struct UINT128_3500 {   
                            15489 ; 69   |    int val[6];     
                            15490 ; 70   |} UINT128_3500;
                            15491 ; 71   |
                            15492 ; 72   |#define UINT128   UINT128_3500
                            15493 ; 73   |
                            15494 ; 74   |// Little endian word packed byte strings:   
                            15495 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15496 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15497 ; 77   |// Little endian word packed byte strings:   
                            15498 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15499 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15500 ; 80   |
                            15501 ; 81   |// Declare Memory Spaces To Use When Coding
                            15502 ; 82   |// A. Sector Buffers
                            15503 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            15504 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            15505 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            15506 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            15507 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            15508 ; 88   |// B. Media DDI Memory
                            15509 ; 89   |#define MEDIA_DDI_MEM _Y
                            15510 ; 90   |
                            15511 ; 91   |
                            15512 ; 92   |
                            15513 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            15514 ; 94   |// Examples of circular pointers:
                            15515 ; 95   |//    INT CIRC cpiVarName
                            15516 ; 96   |//    DWORD CIRC cpdwVarName
                            15517 ; 97   |
                            15518 ; 98   |#define RETCODE INT                 // rcVarName
                            15519 ; 99   |
                            15520 ; 100  |// generic bitfield structure
                            15521 ; 101  |struct Bitfield {
                            15522 ; 102  |    unsigned int B0  :1;
                            15523 ; 103  |    unsigned int B1  :1;
                            15524 ; 104  |    unsigned int B2  :1;
                            15525 ; 105  |    unsigned int B3  :1;
                            15526 ; 106  |    unsigned int B4  :1;
                            15527 ; 107  |    unsigned int B5  :1;
                            15528 ; 108  |    unsigned int B6  :1;
                            15529 ; 109  |    unsigned int B7  :1;
                            15530 ; 110  |    unsigned int B8  :1;
                            15531 ; 111  |    unsigned int B9  :1;
                            15532 ; 112  |    unsigned int B10 :1;
                            15533 ; 113  |    unsigned int B11 :1;
                            15534 ; 114  |    unsigned int B12 :1;
                            15535 ; 115  |    unsigned int B13 :1;
                            15536 ; 116  |    unsigned int B14 :1;
                            15537 ; 117  |    unsigned int B15 :1;
                            15538 ; 118  |    unsigned int B16 :1;
                            15539 ; 119  |    unsigned int B17 :1;
                            15540 ; 120  |    unsigned int B18 :1;
                            15541 ; 121  |    unsigned int B19 :1;
                            15542 ; 122  |    unsigned int B20 :1;
                            15543 ; 123  |    unsigned int B21 :1;
                            15544 ; 124  |    unsigned int B22 :1;
                            15545 ; 125  |    unsigned int B23 :1;
                            15546 ; 126  |};
                            15547 ; 127  |
                            15548 ; 128  |union BitInt {
                            15549 ; 129  |        struct Bitfield B;
                            15550 ; 130  |        int        I;
                            15551 ; 131  |};
                            15552 ; 132  |
                            15553 ; 133  |#define MAX_MSG_LENGTH 10
                            15554 ; 134  |struct CMessage
                            15555 ; 135  |{
                            15556 ; 136  |        unsigned int m_uLength;
                            15557 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            15558 ; 138  |};
                            15559 ; 139  |
                            15560 ; 140  |typedef struct {
                            15561 ; 141  |    WORD m_wLength;
                            15562 ; 142  |    WORD m_wMessage;
                            15563 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            15564 ; 144  |} Message;
                            15565 ; 145  |
                            15566 ; 146  |struct MessageQueueDescriptor
                            15567 ; 147  |{
                            15568 ; 148  |        int *m_pBase;
                            15569 ; 149  |        int m_iModulo;
                            15570 ; 150  |        int m_iSize;
                            15571 ; 151  |        int *m_pHead;
                            15572 ; 152  |        int *m_pTail;
                            15573 ; 153  |};
                            15574 ; 154  |
                            15575 ; 155  |struct ModuleEntry
                            15576 ; 156  |{
                            15577 ; 157  |    int m_iSignaledEventMask;
                            15578 ; 158  |    int m_iWaitEventMask;
                            15579 ; 159  |    int m_iResourceOfCode;
                            15580 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            15581 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            15582 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            15583 ; 163  |    int m_uTimeOutHigh;
                            15584 ; 164  |    int m_uTimeOutLow;
                            15585 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            15586 ; 166  |};
                            15587 ; 167  |
                            15588 ; 168  |union WaitMask{
                            15589 ; 169  |    struct B{
                            15590 ; 170  |        unsigned int m_bNone     :1;
                            15591 ; 171  |        unsigned int m_bMessage  :1;
                            15592 ; 172  |        unsigned int m_bTimer    :1;
                            15593 ; 173  |        unsigned int m_bButton   :1;
                            15594 ; 174  |    } B;
                            15595 ; 175  |    int I;
                            15596 ; 176  |} ;
                            15597 ; 177  |
                            15598 ; 178  |
                            15599 ; 179  |struct Button {
                            15600 ; 180  |        WORD wButtonEvent;
                            15601 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            15602 ; 182  |};
                            15603 ; 183  |
                            15604 ; 184  |struct Message {
                            15605 ; 185  |        WORD wMsgLength;
                            15606 ; 186  |        WORD wMsgCommand;
                            15607 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            15608 ; 188  |};
                            15609 ; 189  |
                            15610 ; 190  |union EventTypes {
                            15611 ; 191  |        struct CMessage msg;
                            15612 ; 192  |        struct Button Button ;
                            15613 ; 193  |        struct Message Message;
                            15614 ; 194  |};
                            15615 ; 195  |
                            15616 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            15617 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            15618 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            15619 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            15620 ; 200  |
                            15621 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            15622 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            15623 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            15624 ; 204  |
                            15625 ; 205  |#if DEBUG
                            15626 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            15627 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            15628 ; 208  |#else 
                            15629 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            15630 ; 210  |#define DebugBuildAssert(x)    
                            15631 ; 211  |#endif
                            15632 ; 212  |
                            15633 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            15634 ; 214  |//  #pragma asm
                            15635 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            15636 ; 216  |//  #pragma endasm
                            15637 ; 217  |
                            15638 ; 218  |
                            15639 ; 219  |#ifdef COLOR_262K
                            15640 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            15641 ; 221  |#elif defined(COLOR_65K)
                            15642 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            15643 ; 223  |#else
                            15644 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            15645 ; 225  |#endif
                            15646 ; 226  |    
                            15647 ; 227  |#endif // #ifndef _TYPES_H
                            15648 
                            15650 
                            15651 ; 31   |
                            15652 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15653 ; 33   |
                            15654 ; 34   |//   SPI STMP3500 Registers 
                            15655 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                            15656 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15657 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15658 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                            15659 ; 39   |
                            15660 ; 40   |
                            15661 ; 41   |
                            15662 ; 42   |// /////////////////////////////////////////////
                            15663 ; 43   |// //  SPI Control/Status Register Bit Definitions
                            15664 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                            15665 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                            15666 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                            15667 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                            15668 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                            15669 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                            15670 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                            15671 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                            15672 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                            15673 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                            15674 ; 54   |
                            15675 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                            15676 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                            15677 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                            15678 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                            15679 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                            15680 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                            15681 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                            15682 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                            15683 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                            15684 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                            15685 ; 65   |
                            15686 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                            15687 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                            15688 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                            15689 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                            15690 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                            15691 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                            15692 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                            15693 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                            15694 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                            15695 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                            15696 ; 76   |
                            15697 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                            15698 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                            15699 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                            15700 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                            15701 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                            15702 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                            15703 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                            15704 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                            15705 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                            15706 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                            15707 ; 87   |
                            15708 ; 88   |typedef union               
                            15709 ; 89   |{
                            15710 ; 90   |    struct {
                            15711 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                            15712 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                            15713 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                            15714 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                            15715 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                            15716 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                            15717 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                            15718 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                            15719 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                            15720 ; 100  |    } B;
                            15721 ; 101  |
                            15722 ; 102  |    int I;
                            15723 ; 103  |    unsigned int U;
                            15724 ; 104  |} spcsr_type;
                            15725 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / Status Register */
                            15726 ; 106  |
                            15727 ; 107  |// /////////////////////////////////////////////
                            15728 ; 108  |// //  SPI Data Register Bit Definitions
                            15729 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                            15730 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                            15731 ; 111  |
                            15732 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                            15733 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                            15734 ; 114  |
                            15735 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                            15736 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                            15737 ; 117  |
                            15738 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                            15739 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                            15740 ; 120  |
                            15741 ; 121  |typedef union               
                            15742 ; 122  |{
                            15743 ; 123  |    struct {
                            15744 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                            15745 ; 125  |    } B;
                            15746 ; 126  |
                            15747 ; 127  |    int I;
                            15748 ; 128  |    unsigned int U;
                            15749 ; 129  |} spdr_type;
                            15750 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Register */
                            15751 ; 131  |
                            15752 ; 132  |
                            15753 ; 133  |#endif
                            15754 ; 134  |
                            15755 ; 135  |
                            15756 
                            15758 
                            15759 ; 32   |#include "regsswizzle.h"
                            15760 
                            15762 
                            15763 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15764 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                            15765 ; 3    |//;; Filename    : regsswizzle.inc
                            15766 ; 4    |//;; Description : Register definitions for Swizzle interface
                            15767 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15768 ; 6    |
                            15769 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                            15770 ; 8    |// The following naming conventions are followed in this file.
                            15771 ; 9    |// All registers are named using the format...
                            15772 ; 10   |//     HW_<module>_<regname>
                            15773 ; 11   |// where <module> is the module name which can be any of the following...
                            15774 ; 12   |//     USB20
                            15775 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            15776 ; 14   |// module name includes a number starting from 0 for the first instance of
                            15777 ; 15   |// that module)
                            15778 ; 16   |// <regname> is the specific register within that module
                            15779 ; 17   |// We also define the following...
                            15780 ; 18   |//     HW_<module>_<regname>_BITPOS
                            15781 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            15782 ; 20   |//     HW_<module>_<regname>_SETMASK
                            15783 ; 21   |// which does something else, and
                            15784 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            15785 ; 23   |// which does something else.
                            15786 ; 24   |// Other rules
                            15787 ; 25   |//     All caps
                            15788 ; 26   |//     Numeric identifiers start at 0
                            15789 ; 27   |#if !(defined(regsswizzleinc))
                            15790 ; 28   |#define regsswizzleinc 1
                            15791 ; 29   |
                            15792 ; 30   |#include "types.h"
                            15793 
                            15795 
                            15796 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15797 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            15798 ; 3    |//
                            15799 ; 4    |// Filename: types.h
                            15800 ; 5    |// Description: Standard data types
                            15801 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15802 ; 7    |
                            15803 ; 8    |#ifndef _TYPES_H
                            15804 ; 9    |#define _TYPES_H
                            15805 ; 10   |
                            15806 ; 11   |// TODO:  move this outta here!
                            15807 ; 12   |#if !defined(NOERROR)
                            15808 ; 13   |#define NOERROR 0
                            15809 ; 14   |#define SUCCESS 0
                            15810 ; 15   |#endif 
                            15811 ; 16   |#if !defined(SUCCESS)
                            15812 ; 17   |#define SUCCESS  0
                            15813 ; 18   |#endif
                            15814 ; 19   |#if !defined(ERROR)
                            15815 ; 20   |#define ERROR   -1
                            15816 ; 21   |#endif
                            15817 ; 22   |#if !defined(FALSE)
                            15818 ; 23   |#define FALSE 0
                            15819 ; 24   |#endif
                            15820 ; 25   |#if !defined(TRUE)
                            15821 ; 26   |#define TRUE  1
                            15822 ; 27   |#endif
                            15823 ; 28   |
                            15824 ; 29   |#if !defined(NULL)
                            15825 ; 30   |#define NULL 0
                            15826 ; 31   |#endif
                            15827 ; 32   |
                            15828 ; 33   |#define MAX_INT     0x7FFFFF
                            15829 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            15830 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            15831 ; 36   |#define MAX_ULONG   (-1) 
                            15832 ; 37   |
                            15833 ; 38   |#define WORD_SIZE   24              // word size in bits
                            15834 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            15835 ; 40   |
                            15836 ; 41   |
                            15837 ; 42   |#define BYTE    unsigned char       // btVarName
                            15838 ; 43   |#define CHAR    signed char         // cVarName
                            15839 ; 44   |#define USHORT  unsigned short      // usVarName
                            15840 ; 45   |#define SHORT   unsigned short      // sVarName
                            15841 ; 46   |#define WORD    unsigned int        // wVarName
                            15842 ; 47   |#define INT     signed int          // iVarName
                            15843 ; 48   |#define DWORD   unsigned long       // dwVarName
                            15844 ; 49   |#define LONG    signed long         // lVarName
                            15845 ; 50   |#define BOOL    unsigned int        // bVarName
                            15846 ; 51   |#define FRACT   _fract              // frVarName
                            15847 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            15848 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            15849 ; 54   |#define FLOAT   float               // fVarName
                            15850 ; 55   |#define DBL     double              // dVarName
                            15851 ; 56   |#define ENUM    enum                // eVarName
                            15852 ; 57   |#define CMX     _complex            // cmxVarName
                            15853 ; 58   |typedef WORD UCS3;                   // 
                            15854 ; 59   |
                            15855 ; 60   |#define UINT16  unsigned short
                            15856 ; 61   |#define UINT8   unsigned char   
                            15857 ; 62   |#define UINT32  unsigned long
                            15858 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            15859 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            15860 ; 65   |#define WCHAR   UINT16
                            15861 ; 66   |
                            15862 ; 67   |//UINT128 is 16 bytes or 6 words
                            15863 ; 68   |typedef struct UINT128_3500 {   
                            15864 ; 69   |    int val[6];     
                            15865 ; 70   |} UINT128_3500;
                            15866 ; 71   |
                            15867 ; 72   |#define UINT128   UINT128_3500
                            15868 ; 73   |
                            15869 ; 74   |// Little endian word packed byte strings:   
                            15870 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15871 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15872 ; 77   |// Little endian word packed byte strings:   
                            15873 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15874 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15875 ; 80   |
                            15876 ; 81   |// Declare Memory Spaces To Use When Coding
                            15877 ; 82   |// A. Sector Buffers
                            15878 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            15879 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            15880 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            15881 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            15882 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            15883 ; 88   |// B. Media DDI Memory
                            15884 ; 89   |#define MEDIA_DDI_MEM _Y
                            15885 ; 90   |
                            15886 ; 91   |
                            15887 ; 92   |
                            15888 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            15889 ; 94   |// Examples of circular pointers:
                            15890 ; 95   |//    INT CIRC cpiVarName
                            15891 ; 96   |//    DWORD CIRC cpdwVarName
                            15892 ; 97   |
                            15893 ; 98   |#define RETCODE INT                 // rcVarName
                            15894 ; 99   |
                            15895 ; 100  |// generic bitfield structure
                            15896 ; 101  |struct Bitfield {
                            15897 ; 102  |    unsigned int B0  :1;
                            15898 ; 103  |    unsigned int B1  :1;
                            15899 ; 104  |    unsigned int B2  :1;
                            15900 ; 105  |    unsigned int B3  :1;
                            15901 ; 106  |    unsigned int B4  :1;
                            15902 ; 107  |    unsigned int B5  :1;
                            15903 ; 108  |    unsigned int B6  :1;
                            15904 ; 109  |    unsigned int B7  :1;
                            15905 ; 110  |    unsigned int B8  :1;
                            15906 ; 111  |    unsigned int B9  :1;
                            15907 ; 112  |    unsigned int B10 :1;
                            15908 ; 113  |    unsigned int B11 :1;
                            15909 ; 114  |    unsigned int B12 :1;
                            15910 ; 115  |    unsigned int B13 :1;
                            15911 ; 116  |    unsigned int B14 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15912 ; 117  |    unsigned int B15 :1;
                            15913 ; 118  |    unsigned int B16 :1;
                            15914 ; 119  |    unsigned int B17 :1;
                            15915 ; 120  |    unsigned int B18 :1;
                            15916 ; 121  |    unsigned int B19 :1;
                            15917 ; 122  |    unsigned int B20 :1;
                            15918 ; 123  |    unsigned int B21 :1;
                            15919 ; 124  |    unsigned int B22 :1;
                            15920 ; 125  |    unsigned int B23 :1;
                            15921 ; 126  |};
                            15922 ; 127  |
                            15923 ; 128  |union BitInt {
                            15924 ; 129  |        struct Bitfield B;
                            15925 ; 130  |        int        I;
                            15926 ; 131  |};
                            15927 ; 132  |
                            15928 ; 133  |#define MAX_MSG_LENGTH 10
                            15929 ; 134  |struct CMessage
                            15930 ; 135  |{
                            15931 ; 136  |        unsigned int m_uLength;
                            15932 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            15933 ; 138  |};
                            15934 ; 139  |
                            15935 ; 140  |typedef struct {
                            15936 ; 141  |    WORD m_wLength;
                            15937 ; 142  |    WORD m_wMessage;
                            15938 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            15939 ; 144  |} Message;
                            15940 ; 145  |
                            15941 ; 146  |struct MessageQueueDescriptor
                            15942 ; 147  |{
                            15943 ; 148  |        int *m_pBase;
                            15944 ; 149  |        int m_iModulo;
                            15945 ; 150  |        int m_iSize;
                            15946 ; 151  |        int *m_pHead;
                            15947 ; 152  |        int *m_pTail;
                            15948 ; 153  |};
                            15949 ; 154  |
                            15950 ; 155  |struct ModuleEntry
                            15951 ; 156  |{
                            15952 ; 157  |    int m_iSignaledEventMask;
                            15953 ; 158  |    int m_iWaitEventMask;
                            15954 ; 159  |    int m_iResourceOfCode;
                            15955 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            15956 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            15957 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            15958 ; 163  |    int m_uTimeOutHigh;
                            15959 ; 164  |    int m_uTimeOutLow;
                            15960 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            15961 ; 166  |};
                            15962 ; 167  |
                            15963 ; 168  |union WaitMask{
                            15964 ; 169  |    struct B{
                            15965 ; 170  |        unsigned int m_bNone     :1;
                            15966 ; 171  |        unsigned int m_bMessage  :1;
                            15967 ; 172  |        unsigned int m_bTimer    :1;
                            15968 ; 173  |        unsigned int m_bButton   :1;
                            15969 ; 174  |    } B;
                            15970 ; 175  |    int I;
                            15971 ; 176  |} ;
                            15972 ; 177  |
                            15973 ; 178  |
                            15974 ; 179  |struct Button {
                            15975 ; 180  |        WORD wButtonEvent;
                            15976 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            15977 ; 182  |};
                            15978 ; 183  |
                            15979 ; 184  |struct Message {
                            15980 ; 185  |        WORD wMsgLength;
                            15981 ; 186  |        WORD wMsgCommand;
                            15982 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            15983 ; 188  |};
                            15984 ; 189  |
                            15985 ; 190  |union EventTypes {
                            15986 ; 191  |        struct CMessage msg;
                            15987 ; 192  |        struct Button Button ;
                            15988 ; 193  |        struct Message Message;
                            15989 ; 194  |};
                            15990 ; 195  |
                            15991 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            15992 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            15993 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            15994 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            15995 ; 200  |
                            15996 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            15997 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            15998 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            15999 ; 204  |
                            16000 ; 205  |#if DEBUG
                            16001 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16002 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16003 ; 208  |#else 
                            16004 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            16005 ; 210  |#define DebugBuildAssert(x)    
                            16006 ; 211  |#endif
                            16007 ; 212  |
                            16008 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16009 ; 214  |//  #pragma asm
                            16010 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16011 ; 216  |//  #pragma endasm
                            16012 ; 217  |
                            16013 ; 218  |
                            16014 ; 219  |#ifdef COLOR_262K
                            16015 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            16016 ; 221  |#elif defined(COLOR_65K)
                            16017 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            16018 ; 223  |#else
                            16019 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            16020 ; 225  |#endif
                            16021 ; 226  |    
                            16022 ; 227  |#endif // #ifndef _TYPES_H
                            16023 
                            16025 
                            16026 ; 31   |
                            16027 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16028 ; 33   |
                            16029 ; 34   |//   SWIZZLE STMP3500 Registers 
                            16030 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                            16031 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16032 ; 37   |
                            16033 ; 38   |
                            16034 ; 39   |
                            16035 ; 40   |
                            16036 ; 41   |
                            16037 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                            16038 ; 43   |
                            16039 ; 44   |
                            16040 ; 45   |
                            16041 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                            16042 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                            16043 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                            16044 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                            16045 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                            16046 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                            16047 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                            16048 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                            16049 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                            16050 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                            16051 ; 56   |
                            16052 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                            16053 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                            16054 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                            16055 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                            16056 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                            16057 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                            16058 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                            16059 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                            16060 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                            16061 ; 66   |
                            16062 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITPOS)
                            16063 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITPOS)
                            16064 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_BITPOS)
                            16065 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIGN_BITPOS)
                            16066 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_SHIFT_BITPOS)
                            16067 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_BITPOS)
                            16068 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECSR1_CLK_OFF_BITPOS)
                            16069 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1_NEWADD_BITPOS)
                            16070 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSVD_BITPOS)
                            16071 ; 76   |
                            16072 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                            16073 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                            16074 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                            16075 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                            16076 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                            16077 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                            16078 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                            16079 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                            16080 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                            16081 ; 86   |
                            16082 ; 87   |////////////////////////////////////////////////////////////////////////////////
                            16083 ; 88   |//  Bit Manipulation Unit Registers
                            16084 ; 89   |////////////////////////////////////////////////////////////////////////////////
                            16085 ; 90   |typedef union
                            16086 ; 91   |{
                            16087 ; 92   |    struct
                            16088 ; 93   |    {
                            16089 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                            16090 ; 95   |    int LA      :1;     /* Left Align Data                          */
                            16091 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                            16092 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                            16093 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                            16094 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                            16095 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                            16096 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                            16097 ; 102  |    } B;
                            16098 ; 103  |    int I;
                            16099 ; 104  |    unsigned U;
                            16100 ; 105  |} swizzlecsr1_type;
                            16101 ; 106  |////////////////////////////////////////////////////////////////////////////////
                            16102 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* Swizzle Control & Status Register 1 */
                            16103 ; 108  |
                            16104 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                            16105 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                            16106 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                            16107 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                            16108 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                            16109 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                            16110 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                            16111 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                            16112 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                            16113 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                            16114 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                            16115 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                            16116 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                            16117 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                            16118 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                            16119 ; 124  |
                            16120 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                            16121 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                            16122 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                            16123 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                            16124 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                            16125 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                            16126 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                            16127 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                            16128 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                            16129 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                            16130 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                            16131 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                            16132 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                            16133 ; 138  |
                            16134 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KICK_BITPOS)
                            16135 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_SASEL_BITPOS)
                            16136 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECSR2_DESASEL_BITPOS)
                            16137 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIGE_BITPOS)
                            16138 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2_BITREV_BITPOS)
                            16139 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLSB_BITPOS)
                            16140 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMSB_BITPOS)
                            16141 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16L_BITPOS)
                            16142 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16I_BITPOS)
                            16143 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_BS_EN_BITPOS)
                            16144 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZLECSR2_SBYTEDEST_BITPOS)
                            16145 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2_UNKICK_BITPOS)
                            16146 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSVD_BITPOS)
                            16147 ; 152  |
                            16148 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                            16149 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                            16150 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                            16151 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                            16152 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                            16153 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                            16154 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                            16155 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                            16156 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                            16157 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                            16158 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                            16159 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                            16160 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                            16161 ; 166  |
                            16162 ; 167  |///////////////////////////////////////////////////////////////////////////////
                            16163 ; 168  |typedef union
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16164 ; 169  |{
                            16165 ; 170  |    struct
                            16166 ; 171  |    {
                            16167 ; 172  |    int KICK    :1;         /* Start transfer                      */
                            16168 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                            16169 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                            16170 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                            16171 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                            16172 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                            16173 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                            16174 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                            16175 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                            16176 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                            16177 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                            16178 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                            16179 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                            16180 ; 185  |    } B;
                            16181 ; 186  |    unsigned int I;
                            16182 ; 187  |    unsigned int U;
                            16183 ; 188  |} swizzlecsr2_type;
                            16184 ; 189  |///////////////////////////////////////////////////////////////////////////////
                            16185 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* Swizzle Control & Status Register 2 */
                            16186 ; 191  |
                            16187 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                            16188 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                            16189 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                            16190 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                            16191 ; 196  |
                            16192 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                            16193 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                            16194 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                            16195 ; 200  |
                            16196 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_SIZE_BITPOS)
                            16197 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWIZZLESIZER_NEW_SHIFT_BITPOS)
                            16198 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_RSVD_BITPOS)
                            16199 ; 204  |
                            16200 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                            16201 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                            16202 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                            16203 ; 208  |
                            16204 ; 209  |///////////////////////////////////////////////////////////////////////////////
                            16205 ; 210  |typedef union
                            16206 ; 211  |{
                            16207 ; 212  |    struct
                            16208 ; 213  |    {
                            16209 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                            16210 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                            16211 ; 216  |    } B;
                            16212 ; 217  |    int I;
                            16213 ; 218  |    unsigned U;
                            16214 ; 219  |} swizzlesizer_type;
                            16215 ; 220  |///////////////////////////////////////////////////////////////////////////////
                            16216 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))        /* Swizzle Transfer Size Register */
                            16217 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* Swizzle Source Address Register */
                            16218 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* Swizzle Data1 Register */
                            16219 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* Swizzle Data2 Register */
                            16220 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* Swizzle Destination Address Register */
                            16221 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* Swizzle Big Endian Register */
                            16222 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* Swizzle BITREV Register */
                            16223 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* Swizzle Pass Least Significant Byte Register */
                            16224 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* Swizzle Pass Intermediate Byte Register */
                            16225 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* Swizzle Pass Most Significant Byte Register */
                            16226 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* Swizzle Pass Least Significant Word Register */
                            16227 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* Swizzle Pass Intermediate Significant Word Register */
                            16228 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* Swizzle Pass Most Significant Word Register */
                            16229 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Swizzle Barrel Shift Register */
                            16230 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swizzle Divide By 3 Lower Register */
                            16231 ; 236  |
                            16232 ; 237  |
                            16233 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                            16234 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                            16235 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                            16236 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                            16237 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                            16238 ; 243  |
                            16239 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                            16240 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                            16241 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                            16242 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                            16243 ; 248  |
                            16244 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                            16245 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD0_BITPOS)
                            16246 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_REMAINDER_BITPOS)
                            16247 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD1_BITPOS)
                            16248 ; 253  |
                            16249 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                            16250 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                            16251 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                            16252 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                            16253 ; 258  |
                            16254 ; 259  |///////////////////////////////////////////////////////////////////////////////
                            16255 ; 260  |typedef union
                            16256 ; 261  |{
                            16257 ; 262  |    struct
                            16258 ; 263  |    {
                            16259 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                            16260 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                            16261 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                            16262 ; 267  |    } B;
                            16263 ; 268  |    int I;
                            16264 ; 269  |    unsigned U;
                            16265 ; 270  |} swizzlediv3ur_type;
                            16266 ; 271  |///////////////////////////////////////////////////////////////////////////////
                            16267 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    /* Swizzle Divide By 3 Upper Register */
                            16268 ; 273  |
                            16269 ; 274  |#endif
                            16270 ; 275  |
                            16271 
                            16273 
                            16274 ; 33   |#include "regssdram.h"
                            16275 
                            16277 
                            16278 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16279 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            16280 ; 3    |//;  File        : regssdram.inc
                            16281 ; 4    |//;  Description : Mixed Signal IP Register definition
                            16282 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16283 ; 6    |
                            16284 ; 7    |// The following naming conventions are followed in this file.
                            16285 ; 8    |// All registers are named using the format...
                            16286 ; 9    |//     HW_<module>_<regname>
                            16287 ; 10   |// where <module> is the module name which can be any of the following...
                            16288 ; 11   |//     SYSTEM
                            16289 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            16290 ; 13   |// module name includes a number starting from 0 for the first instance of
                            16291 ; 14   |// that module)
                            16292 ; 15   |// <regname> is the specific register within that module
                            16293 ; 16   |// We also define the following...
                            16294 ; 17   |//     HW_<module>_<regname>_BITPOS
                            16295 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            16296 ; 19   |//     HW_<module>_<regname>_SETMASK
                            16297 ; 20   |// which does something else, and
                            16298 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            16299 ; 22   |// which does something else.
                            16300 ; 23   |// Other rules
                            16301 ; 24   |//     All caps
                            16302 ; 25   |//     Numeric identifiers start at 0
                            16303 ; 26   |
                            16304 ; 27   |#if !(defined(regssdraminc))
                            16305 ; 28   |#define regssdraminc 1
                            16306 ; 29   |
                            16307 ; 30   |#include "types.h"
                            16308 
                            16310 
                            16311 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16312 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16313 ; 3    |//
                            16314 ; 4    |// Filename: types.h
                            16315 ; 5    |// Description: Standard data types
                            16316 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16317 ; 7    |
                            16318 ; 8    |#ifndef _TYPES_H
                            16319 ; 9    |#define _TYPES_H
                            16320 ; 10   |
                            16321 ; 11   |// TODO:  move this outta here!
                            16322 ; 12   |#if !defined(NOERROR)
                            16323 ; 13   |#define NOERROR 0
                            16324 ; 14   |#define SUCCESS 0
                            16325 ; 15   |#endif 
                            16326 ; 16   |#if !defined(SUCCESS)
                            16327 ; 17   |#define SUCCESS  0
                            16328 ; 18   |#endif
                            16329 ; 19   |#if !defined(ERROR)
                            16330 ; 20   |#define ERROR   -1
                            16331 ; 21   |#endif
                            16332 ; 22   |#if !defined(FALSE)
                            16333 ; 23   |#define FALSE 0
                            16334 ; 24   |#endif
                            16335 ; 25   |#if !defined(TRUE)
                            16336 ; 26   |#define TRUE  1
                            16337 ; 27   |#endif
                            16338 ; 28   |
                            16339 ; 29   |#if !defined(NULL)
                            16340 ; 30   |#define NULL 0
                            16341 ; 31   |#endif
                            16342 ; 32   |
                            16343 ; 33   |#define MAX_INT     0x7FFFFF
                            16344 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16345 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16346 ; 36   |#define MAX_ULONG   (-1) 
                            16347 ; 37   |
                            16348 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16349 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16350 ; 40   |
                            16351 ; 41   |
                            16352 ; 42   |#define BYTE    unsigned char       // btVarName
                            16353 ; 43   |#define CHAR    signed char         // cVarName
                            16354 ; 44   |#define USHORT  unsigned short      // usVarName
                            16355 ; 45   |#define SHORT   unsigned short      // sVarName
                            16356 ; 46   |#define WORD    unsigned int        // wVarName
                            16357 ; 47   |#define INT     signed int          // iVarName
                            16358 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16359 ; 49   |#define LONG    signed long         // lVarName
                            16360 ; 50   |#define BOOL    unsigned int        // bVarName
                            16361 ; 51   |#define FRACT   _fract              // frVarName
                            16362 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16363 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16364 ; 54   |#define FLOAT   float               // fVarName
                            16365 ; 55   |#define DBL     double              // dVarName
                            16366 ; 56   |#define ENUM    enum                // eVarName
                            16367 ; 57   |#define CMX     _complex            // cmxVarName
                            16368 ; 58   |typedef WORD UCS3;                   // 
                            16369 ; 59   |
                            16370 ; 60   |#define UINT16  unsigned short
                            16371 ; 61   |#define UINT8   unsigned char   
                            16372 ; 62   |#define UINT32  unsigned long
                            16373 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16374 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16375 ; 65   |#define WCHAR   UINT16
                            16376 ; 66   |
                            16377 ; 67   |//UINT128 is 16 bytes or 6 words
                            16378 ; 68   |typedef struct UINT128_3500 {   
                            16379 ; 69   |    int val[6];     
                            16380 ; 70   |} UINT128_3500;
                            16381 ; 71   |
                            16382 ; 72   |#define UINT128   UINT128_3500
                            16383 ; 73   |
                            16384 ; 74   |// Little endian word packed byte strings:   
                            16385 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16386 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16387 ; 77   |// Little endian word packed byte strings:   
                            16388 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16389 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16390 ; 80   |
                            16391 ; 81   |// Declare Memory Spaces To Use When Coding
                            16392 ; 82   |// A. Sector Buffers
                            16393 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16394 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16395 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16396 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16397 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16398 ; 88   |// B. Media DDI Memory
                            16399 ; 89   |#define MEDIA_DDI_MEM _Y
                            16400 ; 90   |
                            16401 ; 91   |
                            16402 ; 92   |
                            16403 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16404 ; 94   |// Examples of circular pointers:
                            16405 ; 95   |//    INT CIRC cpiVarName
                            16406 ; 96   |//    DWORD CIRC cpdwVarName
                            16407 ; 97   |
                            16408 ; 98   |#define RETCODE INT                 // rcVarName
                            16409 ; 99   |
                            16410 ; 100  |// generic bitfield structure
                            16411 ; 101  |struct Bitfield {
                            16412 ; 102  |    unsigned int B0  :1;
                            16413 ; 103  |    unsigned int B1  :1;
                            16414 ; 104  |    unsigned int B2  :1;
                            16415 ; 105  |    unsigned int B3  :1;
                            16416 ; 106  |    unsigned int B4  :1;
                            16417 ; 107  |    unsigned int B5  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16418 ; 108  |    unsigned int B6  :1;
                            16419 ; 109  |    unsigned int B7  :1;
                            16420 ; 110  |    unsigned int B8  :1;
                            16421 ; 111  |    unsigned int B9  :1;
                            16422 ; 112  |    unsigned int B10 :1;
                            16423 ; 113  |    unsigned int B11 :1;
                            16424 ; 114  |    unsigned int B12 :1;
                            16425 ; 115  |    unsigned int B13 :1;
                            16426 ; 116  |    unsigned int B14 :1;
                            16427 ; 117  |    unsigned int B15 :1;
                            16428 ; 118  |    unsigned int B16 :1;
                            16429 ; 119  |    unsigned int B17 :1;
                            16430 ; 120  |    unsigned int B18 :1;
                            16431 ; 121  |    unsigned int B19 :1;
                            16432 ; 122  |    unsigned int B20 :1;
                            16433 ; 123  |    unsigned int B21 :1;
                            16434 ; 124  |    unsigned int B22 :1;
                            16435 ; 125  |    unsigned int B23 :1;
                            16436 ; 126  |};
                            16437 ; 127  |
                            16438 ; 128  |union BitInt {
                            16439 ; 129  |        struct Bitfield B;
                            16440 ; 130  |        int        I;
                            16441 ; 131  |};
                            16442 ; 132  |
                            16443 ; 133  |#define MAX_MSG_LENGTH 10
                            16444 ; 134  |struct CMessage
                            16445 ; 135  |{
                            16446 ; 136  |        unsigned int m_uLength;
                            16447 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16448 ; 138  |};
                            16449 ; 139  |
                            16450 ; 140  |typedef struct {
                            16451 ; 141  |    WORD m_wLength;
                            16452 ; 142  |    WORD m_wMessage;
                            16453 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16454 ; 144  |} Message;
                            16455 ; 145  |
                            16456 ; 146  |struct MessageQueueDescriptor
                            16457 ; 147  |{
                            16458 ; 148  |        int *m_pBase;
                            16459 ; 149  |        int m_iModulo;
                            16460 ; 150  |        int m_iSize;
                            16461 ; 151  |        int *m_pHead;
                            16462 ; 152  |        int *m_pTail;
                            16463 ; 153  |};
                            16464 ; 154  |
                            16465 ; 155  |struct ModuleEntry
                            16466 ; 156  |{
                            16467 ; 157  |    int m_iSignaledEventMask;
                            16468 ; 158  |    int m_iWaitEventMask;
                            16469 ; 159  |    int m_iResourceOfCode;
                            16470 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            16471 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            16472 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            16473 ; 163  |    int m_uTimeOutHigh;
                            16474 ; 164  |    int m_uTimeOutLow;
                            16475 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            16476 ; 166  |};
                            16477 ; 167  |
                            16478 ; 168  |union WaitMask{
                            16479 ; 169  |    struct B{
                            16480 ; 170  |        unsigned int m_bNone     :1;
                            16481 ; 171  |        unsigned int m_bMessage  :1;
                            16482 ; 172  |        unsigned int m_bTimer    :1;
                            16483 ; 173  |        unsigned int m_bButton   :1;
                            16484 ; 174  |    } B;
                            16485 ; 175  |    int I;
                            16486 ; 176  |} ;
                            16487 ; 177  |
                            16488 ; 178  |
                            16489 ; 179  |struct Button {
                            16490 ; 180  |        WORD wButtonEvent;
                            16491 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            16492 ; 182  |};
                            16493 ; 183  |
                            16494 ; 184  |struct Message {
                            16495 ; 185  |        WORD wMsgLength;
                            16496 ; 186  |        WORD wMsgCommand;
                            16497 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            16498 ; 188  |};
                            16499 ; 189  |
                            16500 ; 190  |union EventTypes {
                            16501 ; 191  |        struct CMessage msg;
                            16502 ; 192  |        struct Button Button ;
                            16503 ; 193  |        struct Message Message;
                            16504 ; 194  |};
                            16505 ; 195  |
                            16506 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            16507 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            16508 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            16509 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            16510 ; 200  |
                            16511 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            16512 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            16513 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            16514 ; 204  |
                            16515 ; 205  |#if DEBUG
                            16516 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16517 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16518 ; 208  |#else 
                            16519 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            16520 ; 210  |#define DebugBuildAssert(x)    
                            16521 ; 211  |#endif
                            16522 ; 212  |
                            16523 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16524 ; 214  |//  #pragma asm
                            16525 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16526 ; 216  |//  #pragma endasm
                            16527 ; 217  |
                            16528 ; 218  |
                            16529 ; 219  |#ifdef COLOR_262K
                            16530 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            16531 ; 221  |#elif defined(COLOR_65K)
                            16532 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            16533 ; 223  |#else
                            16534 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            16535 ; 225  |#endif
                            16536 ; 226  |    
                            16537 ; 227  |#endif // #ifndef _TYPES_H
                            16538 
                            16540 
                            16541 ; 31   |
                            16542 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                            16543 ; 33   |
                            16544 ; 34   |
                            16545 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                            16546 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                            16547 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                            16548 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                            16549 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                            16550 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                            16551 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                            16552 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                            16553 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                            16554 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                            16555 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                            16556 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                            16557 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                            16558 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                            16559 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                            16560 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                            16561 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                            16562 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                            16563 ; 53   |
                            16564 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                            16565 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                            16566 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                            16567 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                            16568 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                            16569 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                            16570 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                            16571 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                            16572 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                            16573 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                            16574 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                            16575 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                            16576 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                            16577 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                            16578 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                            16579 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                            16580 ; 70   |
                            16581 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SDRAMEN_BITPOS)
                            16582 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                            16583 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS)
                            16584 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BITPOS)
                            16585 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                            16586 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_BITPOS)
                            16587 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BITPOS)
                            16588 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_BITPOS)
                            16589 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS)
                            16590 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BITPOS)
                            16591 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_BITPOS)
                            16592 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_BITPOS)
                            16593 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS)
                            16594 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_BITPOS)
                            16595 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_BITPOS)
                            16596 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BITPOS)
                            16597 ; 87   |
                            16598 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                            16599 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                            16600 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                            16601 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                            16602 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                            16603 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                            16604 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                            16605 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                            16606 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                            16607 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                            16608 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                            16609 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                            16610 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                            16611 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                            16612 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                            16613 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                            16614 ; 104  |
                            16615 ; 105  |typedef union               
                            16616 ; 106  |{
                            16617 ; 107  |    struct {
                            16618 ; 108  |        int SDRAMEN                     :1;
                            16619 ; 109  |        int IE                          :1;
                            16620 ; 110  |        int RNW                         :1;
                            16621 ; 111  |        int KICK                        :1;
                            16622 ; 112  |        int LM                          :1;
                            16623 ; 113  |        int ISTAT                       :1;
                            16624 ; 114  |        int PWDN                        :1;
                            16625 ; 115  |        int RSVD                        :1;
                            16626 ; 116  |        int SBYTE                       :2;
                            16627 ; 117  |        int MEM                         :2;
                            16628 ; 118  |        int BIGE                        :1;
                            16629 ; 119  |        int ASIZE                       :3;
                            16630 ; 120  |        int UKICK                       :1;
                            16631 ; 121  |        int DIV                         :4;
                            16632 ; 122  |        int MULTI                       :1;
                            16633 ; 123  |        int SDRAM                       :1;
                            16634 ; 124  |        int SIGN                        :1;
                            16635 ; 125  |    } B;
                            16636 ; 126  |    int I;
                            16637 ; 127  |} sdramcsr_type;
                            16638 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                            16639 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                            16640 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                            16641 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                            16642 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                            16643 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                            16644 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                            16645 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                            16646 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                            16647 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                            16648 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                            16649 ; 139  |
                            16650 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                            16651 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                            16652 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                            16653 ; 143  |
                            16654 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                            16655 ; 145  |
                            16656 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                            16657 ; 147  |
                            16658 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            16659 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                            16660 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                            16661 ; 151  |
                            16662 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                            16663 ; 153  |
                            16664 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                            16665 ; 155  |
                            16666 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                            16667 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                            16668 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                            16669 ; 159  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16670 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                            16671 ; 161  |
                            16672 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                            16673 ; 163  |
                            16674 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                            16675 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                            16676 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                            16677 ; 167  |
                            16678 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                            16679 ; 169  |
                            16680 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                            16681 ; 171  |
                            16682 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                            16683 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                            16684 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                            16685 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                            16686 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                            16687 ; 177  |
                            16688 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                            16689 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                            16690 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                            16691 ; 181  |
                            16692 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1_INIT_BITPOS)
                            16693 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_TRP_BITPOS)
                            16694 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1_TRFC_BITPOS)
                            16695 ; 185  |
                            16696 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                            16697 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                            16698 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                            16699 ; 189  |
                            16700 ; 190  |typedef union               
                            16701 ; 191  |{
                            16702 ; 192  |    struct {
                            16703 ; 193  |        int INIT                :16;
                            16704 ; 194  |        int TRP                 :4;
                            16705 ; 195  |        int TRFC                :4;
                            16706 ; 196  |    } B;
                            16707 ; 197  |    int I;
                            16708 ; 198  |} sdramtimer1_type;
                            16709 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                            16710 ; 200  |
                            16711 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                            16712 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                            16713 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                            16714 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                            16715 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                            16716 ; 206  |
                            16717 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                            16718 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                            16719 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                            16720 ; 210  |
                            16721 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2_TXSR_BITPOS)
                            16722 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2_TREF_BITPOS)
                            16723 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2_TRCD_BITPOS)
                            16724 ; 214  |
                            16725 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                            16726 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                            16727 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                            16728 ; 218  |
                            16729 ; 219  |typedef union               
                            16730 ; 220  |{
                            16731 ; 221  |    struct {
                            16732 ; 222  |        int TXSR                :4;
                            16733 ; 223  |        int TREF                :12;
                            16734 ; 224  |        int TRCD                :4;
                            16735 ; 225  |        int RSVD                :4; 
                            16736 ; 226  |    } B;
                            16737 ; 227  |    int I;
                            16738 ; 228  |} sdramtimer2_type;
                            16739 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                            16740 ; 230  |
                            16741 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            16742 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                            16743 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                            16744 ; 234  |
                            16745 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                            16746 ; 236  |
                            16747 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                            16748 ; 238  |
                            16749 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                            16750 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                            16751 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                            16752 ; 242  |
                            16753 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                            16754 ; 244  |
                            16755 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                            16756 ; 246  |
                            16757 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            16758 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                            16759 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                            16760 ; 250  |
                            16761 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                            16762 ; 252  |
                            16763 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS)
                            16764 ; 254  |
                            16765 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                            16766 ; 256  |
                            16767 ; 257  |typedef union               
                            16768 ; 258  |{
                            16769 ; 259  |    struct {
                            16770 ; 260  |        int VALUE               :14;
                            16771 ; 261  |        int RSVD                :10; 
                            16772 ; 262  |    } B;
                            16773 ; 263  |    int I;
                            16774 ; 264  |} sdrammode_type;
                            16775 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                            16776 ; 266  |
                            16777 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                            16778 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                            16779 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                            16780 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                            16781 ; 271  |
                            16782 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                            16783 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                            16784 ; 274  |
                            16785 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_COLWIDTH_BITPOS)
                            16786 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_ROWWIDTH_BITPOS)
                            16787 ; 277  |
                            16788 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                            16789 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                            16790 ; 280  |
                            16791 ; 281  |typedef union               
                            16792 ; 282  |{
                            16793 ; 283  |    struct {
                            16794 ; 284  |        int COLWIDTH               :4;
                            16795 ; 285  |        int ROWWIDTH               :4; 
                            16796 ; 286  |    } B;
                            16797 ; 287  |    int I;
                            16798 ; 288  |} sdramtype_type;
                            16799 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                            16800 ; 290  |
                            16801 ; 291  |#endif
                            16802 ; 292  |
                            16803 ; 293  |
                            16804 ; 294  |
                            16805 ; 295  |
                            16806 ; 296  |
                            16807 ; 297  |
                            16808 
                            16810 
                            16811 ; 34   |#include "regstb.h"
                            16812 
                            16814 
                            16815 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            16816 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            16817 ; 3    |// Filename: regstb.inc
                            16818 ; 4    |// Description: Register definitions for Trace Buffer
                            16819 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            16820 ; 6    |// The following naming conventions are followed in this file.
                            16821 ; 7    |// All registers are named using the format...
                            16822 ; 8    |//     HW_<module>_<regname>
                            16823 ; 9    |// where <module> is the module name which can be any of the following...
                            16824 ; 10   |//     USB20
                            16825 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            16826 ; 12   |// module name includes a number starting from 0 for the first instance of
                            16827 ; 13   |// that module)
                            16828 ; 14   |// <regname> is the specific register within that module
                            16829 ; 15   |// We also define the following...
                            16830 ; 16   |//     HW_<module>_<regname>_BITPOS
                            16831 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            16832 ; 18   |//     HW_<module>_<regname>_SETMASK
                            16833 ; 19   |// which does something else, and
                            16834 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            16835 ; 21   |// which does something else.
                            16836 ; 22   |// Other rules
                            16837 ; 23   |//     All caps
                            16838 ; 24   |//     Numeric identifiers start at 0
                            16839 ; 25   |#if !(defined(regstbinc))
                            16840 ; 26   |#define regstbinc 1
                            16841 ; 27   |
                            16842 ; 28   |#include "types.h"
                            16843 
                            16845 
                            16846 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16847 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16848 ; 3    |//
                            16849 ; 4    |// Filename: types.h
                            16850 ; 5    |// Description: Standard data types
                            16851 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16852 ; 7    |
                            16853 ; 8    |#ifndef _TYPES_H
                            16854 ; 9    |#define _TYPES_H
                            16855 ; 10   |
                            16856 ; 11   |// TODO:  move this outta here!
                            16857 ; 12   |#if !defined(NOERROR)
                            16858 ; 13   |#define NOERROR 0
                            16859 ; 14   |#define SUCCESS 0
                            16860 ; 15   |#endif 
                            16861 ; 16   |#if !defined(SUCCESS)
                            16862 ; 17   |#define SUCCESS  0
                            16863 ; 18   |#endif
                            16864 ; 19   |#if !defined(ERROR)
                            16865 ; 20   |#define ERROR   -1
                            16866 ; 21   |#endif
                            16867 ; 22   |#if !defined(FALSE)
                            16868 ; 23   |#define FALSE 0
                            16869 ; 24   |#endif
                            16870 ; 25   |#if !defined(TRUE)
                            16871 ; 26   |#define TRUE  1
                            16872 ; 27   |#endif
                            16873 ; 28   |
                            16874 ; 29   |#if !defined(NULL)
                            16875 ; 30   |#define NULL 0
                            16876 ; 31   |#endif
                            16877 ; 32   |
                            16878 ; 33   |#define MAX_INT     0x7FFFFF
                            16879 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16880 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16881 ; 36   |#define MAX_ULONG   (-1) 
                            16882 ; 37   |
                            16883 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16884 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16885 ; 40   |
                            16886 ; 41   |
                            16887 ; 42   |#define BYTE    unsigned char       // btVarName
                            16888 ; 43   |#define CHAR    signed char         // cVarName
                            16889 ; 44   |#define USHORT  unsigned short      // usVarName
                            16890 ; 45   |#define SHORT   unsigned short      // sVarName
                            16891 ; 46   |#define WORD    unsigned int        // wVarName
                            16892 ; 47   |#define INT     signed int          // iVarName
                            16893 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16894 ; 49   |#define LONG    signed long         // lVarName
                            16895 ; 50   |#define BOOL    unsigned int        // bVarName
                            16896 ; 51   |#define FRACT   _fract              // frVarName
                            16897 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16898 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16899 ; 54   |#define FLOAT   float               // fVarName
                            16900 ; 55   |#define DBL     double              // dVarName
                            16901 ; 56   |#define ENUM    enum                // eVarName
                            16902 ; 57   |#define CMX     _complex            // cmxVarName
                            16903 ; 58   |typedef WORD UCS3;                   // 
                            16904 ; 59   |
                            16905 ; 60   |#define UINT16  unsigned short
                            16906 ; 61   |#define UINT8   unsigned char   
                            16907 ; 62   |#define UINT32  unsigned long
                            16908 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16909 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16910 ; 65   |#define WCHAR   UINT16
                            16911 ; 66   |
                            16912 ; 67   |//UINT128 is 16 bytes or 6 words
                            16913 ; 68   |typedef struct UINT128_3500 {   
                            16914 ; 69   |    int val[6];     
                            16915 ; 70   |} UINT128_3500;
                            16916 ; 71   |
                            16917 ; 72   |#define UINT128   UINT128_3500
                            16918 ; 73   |
                            16919 ; 74   |// Little endian word packed byte strings:   
                            16920 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16921 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16922 ; 77   |// Little endian word packed byte strings:   
                            16923 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16924 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16925 ; 80   |
                            16926 ; 81   |// Declare Memory Spaces To Use When Coding
                            16927 ; 82   |// A. Sector Buffers
                            16928 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16929 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16930 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16931 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16932 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16933 ; 88   |// B. Media DDI Memory
                            16934 ; 89   |#define MEDIA_DDI_MEM _Y
                            16935 ; 90   |
                            16936 ; 91   |
                            16937 ; 92   |
                            16938 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16939 ; 94   |// Examples of circular pointers:
                            16940 ; 95   |//    INT CIRC cpiVarName
                            16941 ; 96   |//    DWORD CIRC cpdwVarName
                            16942 ; 97   |
                            16943 ; 98   |#define RETCODE INT                 // rcVarName
                            16944 ; 99   |
                            16945 ; 100  |// generic bitfield structure
                            16946 ; 101  |struct Bitfield {
                            16947 ; 102  |    unsigned int B0  :1;
                            16948 ; 103  |    unsigned int B1  :1;
                            16949 ; 104  |    unsigned int B2  :1;
                            16950 ; 105  |    unsigned int B3  :1;
                            16951 ; 106  |    unsigned int B4  :1;
                            16952 ; 107  |    unsigned int B5  :1;
                            16953 ; 108  |    unsigned int B6  :1;
                            16954 ; 109  |    unsigned int B7  :1;
                            16955 ; 110  |    unsigned int B8  :1;
                            16956 ; 111  |    unsigned int B9  :1;
                            16957 ; 112  |    unsigned int B10 :1;
                            16958 ; 113  |    unsigned int B11 :1;
                            16959 ; 114  |    unsigned int B12 :1;
                            16960 ; 115  |    unsigned int B13 :1;
                            16961 ; 116  |    unsigned int B14 :1;
                            16962 ; 117  |    unsigned int B15 :1;
                            16963 ; 118  |    unsigned int B16 :1;
                            16964 ; 119  |    unsigned int B17 :1;
                            16965 ; 120  |    unsigned int B18 :1;
                            16966 ; 121  |    unsigned int B19 :1;
                            16967 ; 122  |    unsigned int B20 :1;
                            16968 ; 123  |    unsigned int B21 :1;
                            16969 ; 124  |    unsigned int B22 :1;
                            16970 ; 125  |    unsigned int B23 :1;
                            16971 ; 126  |};
                            16972 ; 127  |
                            16973 ; 128  |union BitInt {
                            16974 ; 129  |        struct Bitfield B;
                            16975 ; 130  |        int        I;
                            16976 ; 131  |};
                            16977 ; 132  |
                            16978 ; 133  |#define MAX_MSG_LENGTH 10
                            16979 ; 134  |struct CMessage
                            16980 ; 135  |{
                            16981 ; 136  |        unsigned int m_uLength;
                            16982 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16983 ; 138  |};
                            16984 ; 139  |
                            16985 ; 140  |typedef struct {
                            16986 ; 141  |    WORD m_wLength;
                            16987 ; 142  |    WORD m_wMessage;
                            16988 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16989 ; 144  |} Message;
                            16990 ; 145  |
                            16991 ; 146  |struct MessageQueueDescriptor
                            16992 ; 147  |{
                            16993 ; 148  |        int *m_pBase;
                            16994 ; 149  |        int m_iModulo;
                            16995 ; 150  |        int m_iSize;
                            16996 ; 151  |        int *m_pHead;
                            16997 ; 152  |        int *m_pTail;
                            16998 ; 153  |};
                            16999 ; 154  |
                            17000 ; 155  |struct ModuleEntry
                            17001 ; 156  |{
                            17002 ; 157  |    int m_iSignaledEventMask;
                            17003 ; 158  |    int m_iWaitEventMask;
                            17004 ; 159  |    int m_iResourceOfCode;
                            17005 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17006 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            17007 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17008 ; 163  |    int m_uTimeOutHigh;
                            17009 ; 164  |    int m_uTimeOutLow;
                            17010 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17011 ; 166  |};
                            17012 ; 167  |
                            17013 ; 168  |union WaitMask{
                            17014 ; 169  |    struct B{
                            17015 ; 170  |        unsigned int m_bNone     :1;
                            17016 ; 171  |        unsigned int m_bMessage  :1;
                            17017 ; 172  |        unsigned int m_bTimer    :1;
                            17018 ; 173  |        unsigned int m_bButton   :1;
                            17019 ; 174  |    } B;
                            17020 ; 175  |    int I;
                            17021 ; 176  |} ;
                            17022 ; 177  |
                            17023 ; 178  |
                            17024 ; 179  |struct Button {
                            17025 ; 180  |        WORD wButtonEvent;
                            17026 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17027 ; 182  |};
                            17028 ; 183  |
                            17029 ; 184  |struct Message {
                            17030 ; 185  |        WORD wMsgLength;
                            17031 ; 186  |        WORD wMsgCommand;
                            17032 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17033 ; 188  |};
                            17034 ; 189  |
                            17035 ; 190  |union EventTypes {
                            17036 ; 191  |        struct CMessage msg;
                            17037 ; 192  |        struct Button Button ;
                            17038 ; 193  |        struct Message Message;
                            17039 ; 194  |};
                            17040 ; 195  |
                            17041 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17042 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17043 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17044 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17045 ; 200  |
                            17046 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17047 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17048 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17049 ; 204  |
                            17050 ; 205  |#if DEBUG
                            17051 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17052 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17053 ; 208  |#else 
                            17054 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            17055 ; 210  |#define DebugBuildAssert(x)    
                            17056 ; 211  |#endif
                            17057 ; 212  |
                            17058 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17059 ; 214  |//  #pragma asm
                            17060 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17061 ; 216  |//  #pragma endasm
                            17062 ; 217  |
                            17063 ; 218  |
                            17064 ; 219  |#ifdef COLOR_262K
                            17065 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            17066 ; 221  |#elif defined(COLOR_65K)
                            17067 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            17068 ; 223  |#else
                            17069 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            17070 ; 225  |#endif
                            17071 ; 226  |    
                            17072 ; 227  |#endif // #ifndef _TYPES_H
                            17073 
                            17075 
                            17076 ; 29   |
                            17077 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17078 ; 31   |
                            17079 ; 32   |//   Trace Buffer STMP Registers 
                            17080 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            17081 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17082 ; 35   |
                            17083 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            17084 ; 37   |
                            17085 ; 38   |
                            17086 ; 39   |
                            17087 ; 40   |
                            17088 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            17089 ; 42   |
                            17090 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            17091 ; 44   |
                            17092 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            17093 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            17094 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            17095 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            17096 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            17097 ; 50   |
                            17098 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            17099 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            17100 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            17101 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            17102 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            17103 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            17104 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            17105 ; 58   |
                            17106 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_ENABLE_BITPOS) 
                            17107 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS) 
                            17108 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            17109 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_BITPOS) 
                            17110 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_EVENT_BITPOS) 
                            17111 ; 64   |
                            17112 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            17113 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            17114 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            17115 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            17116 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            17117 ; 70   |
                            17118 ; 71   |typedef union               
                            17119 ; 72   |{
                            17120 ; 73   |    struct {
                            17121 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            17122 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            17123 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            17124 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            17125 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            17126 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            17127 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            17128 ; 81   |    } B;
                            17129 ; 82   |    int I;
                            17130 ; 83   |    unsigned int U;
                            17131 ; 84   |} tb_cfg_type;
                            17132 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer Configuration Register */
                            17133 ; 86   |
                            17134 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            17135 ; 88   |
                            17136 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            17137 ; 90   |
                            17138 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            17139 ; 92   |
                            17140 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            17141 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            17142 ; 95   |
                            17143 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BITPOS) 
                            17144 ; 97   |
                            17145 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            17146 ; 99   |
                            17147 ; 100  |typedef union               
                            17148 ; 101  |{
                            17149 ; 102  |    struct {
                            17150 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            17151 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            17152 ; 105  |    } B;
                            17153 ; 106  |    int I;
                            17154 ; 107  |    unsigned int U;
                            17155 ; 108  |} tb_bar_type;
                            17156 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer Base Address Register */
                            17157 ; 110  |
                            17158 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            17159 ; 112  |
                            17160 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            17161 ; 114  |
                            17162 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            17163 ; 116  |
                            17164 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            17165 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            17166 ; 119  |
                            17167 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BITPOS) 
                            17168 ; 121  |
                            17169 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            17170 ; 123  |
                            17171 ; 124  |typedef union               
                            17172 ; 125  |{
                            17173 ; 126  |    struct {
                            17174 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            17175 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17176 ; 129  |    } B;
                            17177 ; 130  |    int I;
                            17178 ; 131  |    unsigned int U;
                            17179 ; 132  |} tb_mod_type;
                            17180 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer Modulus Register */
                            17181 ; 134  |
                            17182 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            17183 ; 136  |
                            17184 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            17185 ; 138  |
                            17186 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            17187 ; 140  |
                            17188 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            17189 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            17190 ; 143  |
                            17191 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            17192 ; 145  |
                            17193 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            17194 ; 147  |
                            17195 ; 148  |typedef union               
                            17196 ; 149  |{
                            17197 ; 150  |    struct {
                            17198 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            17199 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            17200 ; 153  |    } B;
                            17201 ; 154  |    int I;
                            17202 ; 155  |    unsigned int U;
                            17203 ; 156  |} tb_cir_type;
                            17204 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer Current Index Register */
                            17205 ; 158  |
                            17206 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            17207 ; 160  |
                            17208 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            17209 ; 162  |
                            17210 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            17211 ; 164  |
                            17212 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            17213 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            17214 ; 167  |
                            17215 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            17216 ; 169  |
                            17217 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            17218 ; 171  |
                            17219 ; 172  |typedef union               
                            17220 ; 173  |{
                            17221 ; 174  |    struct {
                            17222 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            17223 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            17224 ; 177  |    } B;
                            17225 ; 178  |    int I;
                            17226 ; 179  |    unsigned int U;
                            17227 ; 180  |} tb_obc_type;
                            17228 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer one byte code Register */
                            17229 ; 182  |
                            17230 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            17231 ; 184  |
                            17232 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            17233 ; 186  |
                            17234 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            17235 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            17236 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            17237 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            17238 ; 191  |
                            17239 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            17240 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            17241 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            17242 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            17243 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            17244 ; 197  |
                            17245 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STYLE_BITPOS) 
                            17246 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLASS_BITPOS) 
                            17247 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLASS_BITPOS) 
                            17248 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS) 
                            17249 ; 202  |
                            17250 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            17251 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            17252 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            17253 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            17254 ; 207  |
                            17255 ; 208  |typedef union               
                            17256 ; 209  |{
                            17257 ; 210  |    struct {
                            17258 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            17259 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            17260 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            17261 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            17262 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            17263 ; 216  |    } B;
                            17264 ; 217  |    int I;
                            17265 ; 218  |    unsigned int U;
                            17266 ; 219  |} tb_tcs_type;
                            17267 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffer Trigger Command Register */
                            17268 ; 221  |
                            17269 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            17270 ; 223  |
                            17271 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            17272 ; 225  |
                            17273 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            17274 ; 227  |
                            17275 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            17276 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            17277 ; 230  |
                            17278 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH_ADDR_BITPOS) 
                            17279 ; 232  |
                            17280 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            17281 ; 234  |
                            17282 ; 235  |typedef union               
                            17283 ; 236  |{
                            17284 ; 237  |    struct {
                            17285 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            17286 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            17287 ; 240  |    } B;
                            17288 ; 241  |    int I;
                            17289 ; 242  |    unsigned int U;
                            17290 ; 243  |} tb_tvr_type;
                            17291 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffer Trigger Value Register */
                            17292 ; 245  |
                            17293 ; 246  |
                            17294 ; 247  |
                            17295 ; 248  |#endif
                            17296 ; 249  |
                            17297 ; 250  |
                            17298 ; 251  |
                            17299 ; 252  |
                            17300 ; 253  |
                            17301 ; 254  |
                            17302 ; 255  |
                            17303 ; 256  |
                            17304 ; 257  |
                            17305 ; 258  |
                            17306 ; 259  |
                            17307 ; 260  |
                            17308 ; 261  |
                            17309 ; 262  |
                            17310 ; 263  |
                            17311 ; 264  |
                            17312 ; 265  |
                            17313 
                            17315 
                            17316 ; 35   |#include "regstimer.h"
                            17317 
                            17319 
                            17320 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            17321 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            17322 ; 3    |// Filename: regstimer.inc
                            17323 ; 4    |// Description: Register definitions for  Timers interface
                            17324 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            17325 ; 6    |// The following naming conventions are followed in this file.
                            17326 ; 7    |// All registers are named using the format...
                            17327 ; 8    |//     HW_<module>_<regname>
                            17328 ; 9    |// where <module> is the module name which can be any of the following...
                            17329 ; 10   |//     USB20
                            17330 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            17331 ; 12   |// module name includes a number starting from 0 for the first instance of
                            17332 ; 13   |// that module)
                            17333 ; 14   |// <regname> is the specific register within that module
                            17334 ; 15   |// We also define the following...
                            17335 ; 16   |//     HW_<module>_<regname>_BITPOS
                            17336 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            17337 ; 18   |//     HW_<module>_<regname>_SETMASK
                            17338 ; 19   |// which does something else, and
                            17339 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            17340 ; 21   |// which does something else.
                            17341 ; 22   |// Other rules
                            17342 ; 23   |//     All caps
                            17343 ; 24   |//     Numeric identifiers start at 0
                            17344 ; 25   |#if !(defined(regstimerinc))
                            17345 ; 26   |#define regstimerinc 1
                            17346 ; 27   |
                            17347 ; 28   |#include "types.h"
                            17348 
                            17350 
                            17351 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17352 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17353 ; 3    |//
                            17354 ; 4    |// Filename: types.h
                            17355 ; 5    |// Description: Standard data types
                            17356 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17357 ; 7    |
                            17358 ; 8    |#ifndef _TYPES_H
                            17359 ; 9    |#define _TYPES_H
                            17360 ; 10   |
                            17361 ; 11   |// TODO:  move this outta here!
                            17362 ; 12   |#if !defined(NOERROR)
                            17363 ; 13   |#define NOERROR 0
                            17364 ; 14   |#define SUCCESS 0
                            17365 ; 15   |#endif 
                            17366 ; 16   |#if !defined(SUCCESS)
                            17367 ; 17   |#define SUCCESS  0
                            17368 ; 18   |#endif
                            17369 ; 19   |#if !defined(ERROR)
                            17370 ; 20   |#define ERROR   -1
                            17371 ; 21   |#endif
                            17372 ; 22   |#if !defined(FALSE)
                            17373 ; 23   |#define FALSE 0
                            17374 ; 24   |#endif
                            17375 ; 25   |#if !defined(TRUE)
                            17376 ; 26   |#define TRUE  1
                            17377 ; 27   |#endif
                            17378 ; 28   |
                            17379 ; 29   |#if !defined(NULL)
                            17380 ; 30   |#define NULL 0
                            17381 ; 31   |#endif
                            17382 ; 32   |
                            17383 ; 33   |#define MAX_INT     0x7FFFFF
                            17384 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17385 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17386 ; 36   |#define MAX_ULONG   (-1) 
                            17387 ; 37   |
                            17388 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17389 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17390 ; 40   |
                            17391 ; 41   |
                            17392 ; 42   |#define BYTE    unsigned char       // btVarName
                            17393 ; 43   |#define CHAR    signed char         // cVarName
                            17394 ; 44   |#define USHORT  unsigned short      // usVarName
                            17395 ; 45   |#define SHORT   unsigned short      // sVarName
                            17396 ; 46   |#define WORD    unsigned int        // wVarName
                            17397 ; 47   |#define INT     signed int          // iVarName
                            17398 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17399 ; 49   |#define LONG    signed long         // lVarName
                            17400 ; 50   |#define BOOL    unsigned int        // bVarName
                            17401 ; 51   |#define FRACT   _fract              // frVarName
                            17402 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17403 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17404 ; 54   |#define FLOAT   float               // fVarName
                            17405 ; 55   |#define DBL     double              // dVarName
                            17406 ; 56   |#define ENUM    enum                // eVarName
                            17407 ; 57   |#define CMX     _complex            // cmxVarName
                            17408 ; 58   |typedef WORD UCS3;                   // 
                            17409 ; 59   |
                            17410 ; 60   |#define UINT16  unsigned short
                            17411 ; 61   |#define UINT8   unsigned char   
                            17412 ; 62   |#define UINT32  unsigned long
                            17413 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            17414 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            17415 ; 65   |#define WCHAR   UINT16
                            17416 ; 66   |
                            17417 ; 67   |//UINT128 is 16 bytes or 6 words
                            17418 ; 68   |typedef struct UINT128_3500 {   
                            17419 ; 69   |    int val[6];     
                            17420 ; 70   |} UINT128_3500;
                            17421 ; 71   |
                            17422 ; 72   |#define UINT128   UINT128_3500
                            17423 ; 73   |
                            17424 ; 74   |// Little endian word packed byte strings:   
                            17425 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17426 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17427 ; 77   |// Little endian word packed byte strings:   
                            17428 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17429 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17430 ; 80   |
                            17431 ; 81   |// Declare Memory Spaces To Use When Coding
                            17432 ; 82   |// A. Sector Buffers
                            17433 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17434 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17435 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17436 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17437 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17438 ; 88   |// B. Media DDI Memory
                            17439 ; 89   |#define MEDIA_DDI_MEM _Y
                            17440 ; 90   |
                            17441 ; 91   |
                            17442 ; 92   |
                            17443 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17444 ; 94   |// Examples of circular pointers:
                            17445 ; 95   |//    INT CIRC cpiVarName
                            17446 ; 96   |//    DWORD CIRC cpdwVarName
                            17447 ; 97   |
                            17448 ; 98   |#define RETCODE INT                 // rcVarName
                            17449 ; 99   |
                            17450 ; 100  |// generic bitfield structure
                            17451 ; 101  |struct Bitfield {
                            17452 ; 102  |    unsigned int B0  :1;
                            17453 ; 103  |    unsigned int B1  :1;
                            17454 ; 104  |    unsigned int B2  :1;
                            17455 ; 105  |    unsigned int B3  :1;
                            17456 ; 106  |    unsigned int B4  :1;
                            17457 ; 107  |    unsigned int B5  :1;
                            17458 ; 108  |    unsigned int B6  :1;
                            17459 ; 109  |    unsigned int B7  :1;
                            17460 ; 110  |    unsigned int B8  :1;
                            17461 ; 111  |    unsigned int B9  :1;
                            17462 ; 112  |    unsigned int B10 :1;
                            17463 ; 113  |    unsigned int B11 :1;
                            17464 ; 114  |    unsigned int B12 :1;
                            17465 ; 115  |    unsigned int B13 :1;
                            17466 ; 116  |    unsigned int B14 :1;
                            17467 ; 117  |    unsigned int B15 :1;
                            17468 ; 118  |    unsigned int B16 :1;
                            17469 ; 119  |    unsigned int B17 :1;
                            17470 ; 120  |    unsigned int B18 :1;
                            17471 ; 121  |    unsigned int B19 :1;
                            17472 ; 122  |    unsigned int B20 :1;
                            17473 ; 123  |    unsigned int B21 :1;
                            17474 ; 124  |    unsigned int B22 :1;
                            17475 ; 125  |    unsigned int B23 :1;
                            17476 ; 126  |};
                            17477 ; 127  |
                            17478 ; 128  |union BitInt {
                            17479 ; 129  |        struct Bitfield B;
                            17480 ; 130  |        int        I;
                            17481 ; 131  |};
                            17482 ; 132  |
                            17483 ; 133  |#define MAX_MSG_LENGTH 10
                            17484 ; 134  |struct CMessage
                            17485 ; 135  |{
                            17486 ; 136  |        unsigned int m_uLength;
                            17487 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17488 ; 138  |};
                            17489 ; 139  |
                            17490 ; 140  |typedef struct {
                            17491 ; 141  |    WORD m_wLength;
                            17492 ; 142  |    WORD m_wMessage;
                            17493 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            17494 ; 144  |} Message;
                            17495 ; 145  |
                            17496 ; 146  |struct MessageQueueDescriptor
                            17497 ; 147  |{
                            17498 ; 148  |        int *m_pBase;
                            17499 ; 149  |        int m_iModulo;
                            17500 ; 150  |        int m_iSize;
                            17501 ; 151  |        int *m_pHead;
                            17502 ; 152  |        int *m_pTail;
                            17503 ; 153  |};
                            17504 ; 154  |
                            17505 ; 155  |struct ModuleEntry
                            17506 ; 156  |{
                            17507 ; 157  |    int m_iSignaledEventMask;
                            17508 ; 158  |    int m_iWaitEventMask;
                            17509 ; 159  |    int m_iResourceOfCode;
                            17510 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17511 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            17512 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17513 ; 163  |    int m_uTimeOutHigh;
                            17514 ; 164  |    int m_uTimeOutLow;
                            17515 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17516 ; 166  |};
                            17517 ; 167  |
                            17518 ; 168  |union WaitMask{
                            17519 ; 169  |    struct B{
                            17520 ; 170  |        unsigned int m_bNone     :1;
                            17521 ; 171  |        unsigned int m_bMessage  :1;
                            17522 ; 172  |        unsigned int m_bTimer    :1;
                            17523 ; 173  |        unsigned int m_bButton   :1;
                            17524 ; 174  |    } B;
                            17525 ; 175  |    int I;
                            17526 ; 176  |} ;
                            17527 ; 177  |
                            17528 ; 178  |
                            17529 ; 179  |struct Button {
                            17530 ; 180  |        WORD wButtonEvent;
                            17531 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17532 ; 182  |};
                            17533 ; 183  |
                            17534 ; 184  |struct Message {
                            17535 ; 185  |        WORD wMsgLength;
                            17536 ; 186  |        WORD wMsgCommand;
                            17537 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17538 ; 188  |};
                            17539 ; 189  |
                            17540 ; 190  |union EventTypes {
                            17541 ; 191  |        struct CMessage msg;
                            17542 ; 192  |        struct Button Button ;
                            17543 ; 193  |        struct Message Message;
                            17544 ; 194  |};
                            17545 ; 195  |
                            17546 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17547 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17548 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17549 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17550 ; 200  |
                            17551 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17552 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17553 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17554 ; 204  |
                            17555 ; 205  |#if DEBUG
                            17556 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17557 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17558 ; 208  |#else 
                            17559 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            17560 ; 210  |#define DebugBuildAssert(x)    
                            17561 ; 211  |#endif
                            17562 ; 212  |
                            17563 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17564 ; 214  |//  #pragma asm
                            17565 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17566 ; 216  |//  #pragma endasm
                            17567 ; 217  |
                            17568 ; 218  |
                            17569 ; 219  |#ifdef COLOR_262K
                            17570 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            17571 ; 221  |#elif defined(COLOR_65K)
                            17572 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            17573 ; 223  |#else
                            17574 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            17575 ; 225  |#endif
                            17576 ; 226  |    
                            17577 ; 227  |#endif // #ifndef _TYPES_H
                            17578 
                            17580 
                            17581 ; 29   |
                            17582 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17583 ; 31   |//   TIMER STMP Registers 
                            17584 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17585 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            17586 ; 34   |
                            17587 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            17588 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            17589 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            17590 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            17591 ; 39   |
                            17592 ; 40   |#define HW_TIMER_NUMBER_0 0
                            17593 ; 41   |#define HW_TIMER_NUMBER_1 1
                            17594 ; 42   |#define HW_TIMER_NUMBER_2 2
                            17595 ; 43   |#define HW_TIMER_NUMBER_3 3
                            17596 ; 44   |
                            17597 ; 45   |#define HW_TMRCSR 0
                            17598 ; 46   |#define HW_TMRCNTR 1
                            17599 ; 47   |
                            17600 ; 48   |
                            17601 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            17602 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            17603 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            17604 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            17605 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            17606 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            17607 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            17608 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            17609 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            17610 ; 58   |
                            17611 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            17612 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            17613 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            17614 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            17615 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            17616 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            17617 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            17618 ; 66   |
                            17619 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CSR_TIMER_ENABLE_BITPOS)
                            17620 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CSR_TIMER_INT_EN_BITPOS)
                            17621 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BITPOS)
                            17622 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0CSR_TIMER_CONTROL_BITPOS)
                            17623 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CSR_TIMER_STATUS_BITPOS)
                            17624 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TIMER_MODE_BITPOS)
                            17625 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS)
                            17626 ; 74   |
                            17627 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            17628 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            17629 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            17630 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            17631 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            17632 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            17633 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            17634 ; 82   |
                            17635 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            17636 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            17637 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            17638 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            17639 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            17640 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            17641 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            17642 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            17643 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            17644 ; 92   |
                            17645 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            17646 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            17647 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            17648 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            17649 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            17650 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            17651 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            17652 ; 100  |
                            17653 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CSR_TIMER_ENABLE_BITPOS)
                            17654 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CSR_TIMER_INT_EN_BITPOS)
                            17655 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BITPOS)
                            17656 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1CSR_TIMER_CONTROL_BITPOS)
                            17657 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CSR_TIMER_STATUS_BITPOS)
                            17658 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TIMER_MODE_BITPOS)
                            17659 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS)
                            17660 ; 108  |
                            17661 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            17662 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            17663 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            17664 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            17665 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            17666 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            17667 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            17668 ; 116  |
                            17669 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            17670 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            17671 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            17672 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            17673 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            17674 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            17675 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            17676 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            17677 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            17678 ; 126  |
                            17679 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            17680 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            17681 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17682 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            17683 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            17684 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            17685 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            17686 ; 134  |
                            17687 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CSR_TIMER_ENABLE_BITPOS)
                            17688 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CSR_TIMER_INT_EN_BITPOS)
                            17689 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BITPOS)
                            17690 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2CSR_TIMER_CONTROL_BITPOS)
                            17691 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CSR_TIMER_STATUS_BITPOS)
                            17692 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TIMER_MODE_BITPOS)
                            17693 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS)
                            17694 ; 142  |
                            17695 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            17696 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            17697 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            17698 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            17699 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            17700 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            17701 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            17702 ; 150  |
                            17703 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            17704 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            17705 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            17706 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            17707 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            17708 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            17709 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            17710 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            17711 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            17712 ; 160  |
                            17713 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            17714 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            17715 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            17716 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            17717 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            17718 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            17719 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            17720 ; 168  |
                            17721 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CSR_TIMER_ENABLE_BITPOS)
                            17722 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CSR_TIMER_INT_EN_BITPOS)
                            17723 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BITPOS)
                            17724 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3CSR_TIMER_CONTROL_BITPOS)
                            17725 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CSR_TIMER_STATUS_BITPOS)
                            17726 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TIMER_MODE_BITPOS)
                            17727 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS)
                            17728 ; 176  |
                            17729 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            17730 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            17731 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            17732 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            17733 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            17734 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            17735 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            17736 ; 184  |
                            17737 ; 185  |typedef union               
                            17738 ; 186  |{
                            17739 ; 187  |    struct {
                            17740 ; 188  |       int TIMER_ENABLE              :1;
                            17741 ; 189  |       int TIMER_INT_EN              :1;
                            17742 ; 190  |       int INVERT                    :1;
                            17743 ; 191  |       int TIMER_CONTROL             :3;
                            17744 ; 192  |       int RSVD0                     :1;
                            17745 ; 193  |       int TIMER_STATUS              :1;
                            17746 ; 194  |       int TIMER_MODE                :2;
                            17747 ; 195  |       int RSVD1                     :13;
                            17748 ; 196  |       int CLKGT                     :1;
                            17749 ; 197  |    } B;
                            17750 ; 198  |    int I;
                            17751 ; 199  |} timercsr_type;
                            17752 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /* Timer0 Control Status Register */
                            17753 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /* Timer1 Control Status Register */
                            17754 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /* Timer2 Control Status Register */
                            17755 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /* Timer3 Control Status Register */
                            17756 ; 204  |
                            17757 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            17758 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            17759 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            17760 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            17761 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BITPOS)
                            17762 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            17763 ; 211  |
                            17764 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            17765 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            17766 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            17767 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            17768 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BITPOS)
                            17769 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            17770 ; 218  |
                            17771 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            17772 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            17773 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            17774 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            17775 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BITPOS)
                            17776 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            17777 ; 225  |
                            17778 ; 226  |typedef union               
                            17779 ; 227  |{
                            17780 ; 228  |    struct {
                            17781 ; 229  |       int COUNT                    :24;
                            17782 ; 230  |    } B;
                            17783 ; 231  |    int I;
                            17784 ; 232  |} tmrcntr_type;
                            17785 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /* Timer0 Count Register */
                            17786 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /* Timer1 Count Register */
                            17787 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /* Timer2 Count Register */
                            17788 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /* Timer3 Count Register */
                            17789 ; 237  |
                            17790 ; 238  |
                            17791 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            17792 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            17793 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            17794 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            17795 ; 243  |
                            17796 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            17797 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            17798 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            17799 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            17800 ; 248  |
                            17801 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            17802 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            17803 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            17804 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            17805 ; 253  |
                            17806 ; 254  |// Timer enable
                            17807 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            17808 ; 256  |// Timer clock gating control
                            17809 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            17810 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            17811 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            17812 ; 260  |#endif
                            17813 ; 261  |
                            17814 ; 262  |
                            17815 ; 263  |
                            17816 ; 264  |
                            17817 
                            17819 
                            17820 ; 36   |#include "regsusb20.h"
                            17821 
                            17823 
                            17824 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17825 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            17826 ; 3    |//;  File        : regsusb20ip.inc
                            17827 ; 4    |//;  Description : USB20 IP Register definition
                            17828 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17829 ; 6    |
                            17830 ; 7    |// The following naming conventions are followed in this file.
                            17831 ; 8    |// All registers are named using the format...
                            17832 ; 9    |//     HW_<module>_<regname>
                            17833 ; 10   |// where <module> is the module name which can be any of the following...
                            17834 ; 11   |//     USB20
                            17835 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            17836 ; 13   |// module name includes a number starting from 0 for the first instance of
                            17837 ; 14   |// that module)
                            17838 ; 15   |// <regname> is the specific register within that module
                            17839 ; 16   |// We also define the following...
                            17840 ; 17   |//     HW_<module>_<regname>_BITPOS
                            17841 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            17842 ; 19   |//     HW_<module>_<regname>_SETMASK
                            17843 ; 20   |// which does something else, and
                            17844 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            17845 ; 22   |// which does something else.
                            17846 ; 23   |// Other rules
                            17847 ; 24   |//     All caps
                            17848 ; 25   |//     Numeric identifiers start at 0
                            17849 ; 26   |
                            17850 ; 27   |#if !(defined(regsusb20inc))
                            17851 ; 28   |#define regsusb20inc 1
                            17852 ; 29   |
                            17853 ; 30   |#include "types.h"
                            17854 
                            17856 
                            17857 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17858 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17859 ; 3    |//
                            17860 ; 4    |// Filename: types.h
                            17861 ; 5    |// Description: Standard data types
                            17862 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17863 ; 7    |
                            17864 ; 8    |#ifndef _TYPES_H
                            17865 ; 9    |#define _TYPES_H
                            17866 ; 10   |
                            17867 ; 11   |// TODO:  move this outta here!
                            17868 ; 12   |#if !defined(NOERROR)
                            17869 ; 13   |#define NOERROR 0
                            17870 ; 14   |#define SUCCESS 0
                            17871 ; 15   |#endif 
                            17872 ; 16   |#if !defined(SUCCESS)
                            17873 ; 17   |#define SUCCESS  0
                            17874 ; 18   |#endif
                            17875 ; 19   |#if !defined(ERROR)
                            17876 ; 20   |#define ERROR   -1
                            17877 ; 21   |#endif
                            17878 ; 22   |#if !defined(FALSE)
                            17879 ; 23   |#define FALSE 0
                            17880 ; 24   |#endif
                            17881 ; 25   |#if !defined(TRUE)
                            17882 ; 26   |#define TRUE  1
                            17883 ; 27   |#endif
                            17884 ; 28   |
                            17885 ; 29   |#if !defined(NULL)
                            17886 ; 30   |#define NULL 0
                            17887 ; 31   |#endif
                            17888 ; 32   |
                            17889 ; 33   |#define MAX_INT     0x7FFFFF
                            17890 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17891 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17892 ; 36   |#define MAX_ULONG   (-1) 
                            17893 ; 37   |
                            17894 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17895 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17896 ; 40   |
                            17897 ; 41   |
                            17898 ; 42   |#define BYTE    unsigned char       // btVarName
                            17899 ; 43   |#define CHAR    signed char         // cVarName
                            17900 ; 44   |#define USHORT  unsigned short      // usVarName
                            17901 ; 45   |#define SHORT   unsigned short      // sVarName
                            17902 ; 46   |#define WORD    unsigned int        // wVarName
                            17903 ; 47   |#define INT     signed int          // iVarName
                            17904 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17905 ; 49   |#define LONG    signed long         // lVarName
                            17906 ; 50   |#define BOOL    unsigned int        // bVarName
                            17907 ; 51   |#define FRACT   _fract              // frVarName
                            17908 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17909 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17910 ; 54   |#define FLOAT   float               // fVarName
                            17911 ; 55   |#define DBL     double              // dVarName
                            17912 ; 56   |#define ENUM    enum                // eVarName
                            17913 ; 57   |#define CMX     _complex            // cmxVarName
                            17914 ; 58   |typedef WORD UCS3;                   // 
                            17915 ; 59   |
                            17916 ; 60   |#define UINT16  unsigned short
                            17917 ; 61   |#define UINT8   unsigned char   
                            17918 ; 62   |#define UINT32  unsigned long
                            17919 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            17920 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            17921 ; 65   |#define WCHAR   UINT16
                            17922 ; 66   |
                            17923 ; 67   |//UINT128 is 16 bytes or 6 words
                            17924 ; 68   |typedef struct UINT128_3500 {   
                            17925 ; 69   |    int val[6];     
                            17926 ; 70   |} UINT128_3500;
                            17927 ; 71   |
                            17928 ; 72   |#define UINT128   UINT128_3500
                            17929 ; 73   |
                            17930 ; 74   |// Little endian word packed byte strings:   
                            17931 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17932 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17933 ; 77   |// Little endian word packed byte strings:   
                            17934 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17935 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17936 ; 80   |
                            17937 ; 81   |// Declare Memory Spaces To Use When Coding
                            17938 ; 82   |// A. Sector Buffers
                            17939 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17940 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17941 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17942 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17943 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17944 ; 88   |// B. Media DDI Memory
                            17945 ; 89   |#define MEDIA_DDI_MEM _Y
                            17946 ; 90   |
                            17947 ; 91   |
                            17948 ; 92   |
                            17949 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17950 ; 94   |// Examples of circular pointers:
                            17951 ; 95   |//    INT CIRC cpiVarName
                            17952 ; 96   |//    DWORD CIRC cpdwVarName
                            17953 ; 97   |
                            17954 ; 98   |#define RETCODE INT                 // rcVarName
                            17955 ; 99   |
                            17956 ; 100  |// generic bitfield structure
                            17957 ; 101  |struct Bitfield {
                            17958 ; 102  |    unsigned int B0  :1;
                            17959 ; 103  |    unsigned int B1  :1;
                            17960 ; 104  |    unsigned int B2  :1;
                            17961 ; 105  |    unsigned int B3  :1;
                            17962 ; 106  |    unsigned int B4  :1;
                            17963 ; 107  |    unsigned int B5  :1;
                            17964 ; 108  |    unsigned int B6  :1;
                            17965 ; 109  |    unsigned int B7  :1;
                            17966 ; 110  |    unsigned int B8  :1;
                            17967 ; 111  |    unsigned int B9  :1;
                            17968 ; 112  |    unsigned int B10 :1;
                            17969 ; 113  |    unsigned int B11 :1;
                            17970 ; 114  |    unsigned int B12 :1;
                            17971 ; 115  |    unsigned int B13 :1;
                            17972 ; 116  |    unsigned int B14 :1;
                            17973 ; 117  |    unsigned int B15 :1;
                            17974 ; 118  |    unsigned int B16 :1;
                            17975 ; 119  |    unsigned int B17 :1;
                            17976 ; 120  |    unsigned int B18 :1;
                            17977 ; 121  |    unsigned int B19 :1;
                            17978 ; 122  |    unsigned int B20 :1;
                            17979 ; 123  |    unsigned int B21 :1;
                            17980 ; 124  |    unsigned int B22 :1;
                            17981 ; 125  |    unsigned int B23 :1;
                            17982 ; 126  |};
                            17983 ; 127  |
                            17984 ; 128  |union BitInt {
                            17985 ; 129  |        struct Bitfield B;
                            17986 ; 130  |        int        I;
                            17987 ; 131  |};
                            17988 ; 132  |
                            17989 ; 133  |#define MAX_MSG_LENGTH 10
                            17990 ; 134  |struct CMessage
                            17991 ; 135  |{
                            17992 ; 136  |        unsigned int m_uLength;
                            17993 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17994 ; 138  |};
                            17995 ; 139  |
                            17996 ; 140  |typedef struct {
                            17997 ; 141  |    WORD m_wLength;
                            17998 ; 142  |    WORD m_wMessage;
                            17999 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            18000 ; 144  |} Message;
                            18001 ; 145  |
                            18002 ; 146  |struct MessageQueueDescriptor
                            18003 ; 147  |{
                            18004 ; 148  |        int *m_pBase;
                            18005 ; 149  |        int m_iModulo;
                            18006 ; 150  |        int m_iSize;
                            18007 ; 151  |        int *m_pHead;
                            18008 ; 152  |        int *m_pTail;
                            18009 ; 153  |};
                            18010 ; 154  |
                            18011 ; 155  |struct ModuleEntry
                            18012 ; 156  |{
                            18013 ; 157  |    int m_iSignaledEventMask;
                            18014 ; 158  |    int m_iWaitEventMask;
                            18015 ; 159  |    int m_iResourceOfCode;
                            18016 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            18017 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            18018 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            18019 ; 163  |    int m_uTimeOutHigh;
                            18020 ; 164  |    int m_uTimeOutLow;
                            18021 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            18022 ; 166  |};
                            18023 ; 167  |
                            18024 ; 168  |union WaitMask{
                            18025 ; 169  |    struct B{
                            18026 ; 170  |        unsigned int m_bNone     :1;
                            18027 ; 171  |        unsigned int m_bMessage  :1;
                            18028 ; 172  |        unsigned int m_bTimer    :1;
                            18029 ; 173  |        unsigned int m_bButton   :1;
                            18030 ; 174  |    } B;
                            18031 ; 175  |    int I;
                            18032 ; 176  |} ;
                            18033 ; 177  |
                            18034 ; 178  |
                            18035 ; 179  |struct Button {
                            18036 ; 180  |        WORD wButtonEvent;
                            18037 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            18038 ; 182  |};
                            18039 ; 183  |
                            18040 ; 184  |struct Message {
                            18041 ; 185  |        WORD wMsgLength;
                            18042 ; 186  |        WORD wMsgCommand;
                            18043 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            18044 ; 188  |};
                            18045 ; 189  |
                            18046 ; 190  |union EventTypes {
                            18047 ; 191  |        struct CMessage msg;
                            18048 ; 192  |        struct Button Button ;
                            18049 ; 193  |        struct Message Message;
                            18050 ; 194  |};
                            18051 ; 195  |
                            18052 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            18053 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            18054 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            18055 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            18056 ; 200  |
                            18057 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            18058 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            18059 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            18060 ; 204  |
                            18061 ; 205  |#if DEBUG
                            18062 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            18063 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            18064 ; 208  |#else 
                            18065 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            18066 ; 210  |#define DebugBuildAssert(x)    
                            18067 ; 211  |#endif
                            18068 ; 212  |
                            18069 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            18070 ; 214  |//  #pragma asm
                            18071 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            18072 ; 216  |//  #pragma endasm
                            18073 ; 217  |
                            18074 ; 218  |
                            18075 ; 219  |#ifdef COLOR_262K
                            18076 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            18077 ; 221  |#elif defined(COLOR_65K)
                            18078 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            18079 ; 223  |#else
                            18080 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            18081 ; 225  |#endif
                            18082 ; 226  |    
                            18083 ; 227  |#endif // #ifndef _TYPES_H
                            18084 
                            18086 
                            18087 ; 31   |
                            18088 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18089 ; 33   |//   USB2.0 STMP Registers 
                            18090 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18091 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            18092 ; 36   |
                            18093 ; 37   |
                            18094 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            18095 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            18096 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            18097 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            18098 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            18099 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            18100 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            18101 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            18102 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            18103 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            18104 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            18105 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            18106 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            18107 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            18108 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            18109 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            18110 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            18111 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            18112 ; 56   |
                            18113 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            18114 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            18115 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            18116 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            18117 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            18118 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            18119 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            18120 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            18121 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            18122 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            18123 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            18124 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            18125 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            18126 ; 70   |
                            18127 ; 71   |
                            18128 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            18129 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            18130 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            18131 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            18132 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            18133 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            18134 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            18135 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            18136 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            18137 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            18138 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            18139 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            18140 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            18141 ; 85   |
                            18142 ; 86   |typedef union               
                            18143 ; 87   |{
                            18144 ; 88   |    struct {
                            18145 ; 89   |        int USBEN          :1;
                            18146 ; 90   |        int WAKEUPIRQ      :1;
                            18147 ; 91   |        int WAKEUPIE       :1;
                            18148 ; 92   |        int VBUSCXIRQ      :1;
                            18149 ; 93   |        int VBUSCXIE       :1;
                            18150 ; 94   |        int VBUSDISCXIRQ   :1;
                            18151 ; 95   |        int VBUSDISCXIE    :1;
                            18152 ; 96   |        int CLKOFF         :1;
                            18153 ; 97   |        int SUSP           :1;
                            18154 ; 98   |        int SUSPF          :1;
                            18155 ; 99   |        int UTMITST        :1;
                            18156 ; 100  |        int ARCCONNECT     :1;
                            18157 ; 101  |        int PLUGGEDIN_EN   :1;
                            18158 ; 102  |        int PLUGGEDIN      :1;
                            18159 ; 103  |        int                :8;
                            18160 ; 104  |        int HOSTDISCONNECT :1;
                            18161 ; 105  |        int VBUSSENSE      :1;
                            18162 ; 106  |    } B;
                            18163 ; 107  |    int I;
                            18164 ; 108  |} usbcsr_type;
                            18165 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control / Status Register */
                            18166 ; 110  |
                            18167 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            18168 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            18169 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            18170 ; 114  |
                            18171 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            18172 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            18173 ; 117  |
                            18174 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            18175 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            18176 ; 120  |
                            18177 ; 121  |typedef union               
                            18178 ; 122  |{
                            18179 ; 123  |    struct {
                            18180 ; 124  |        int ADD            :16;
                            18181 ; 125  |        int MEM            :2;
                            18182 ; 126  |        int                :6;
                            18183 ; 127  |    } B;
                            18184 ; 128  |    int I;
                            18185 ; 129  |} usbdmaoff_type;
                            18186 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            18187 ; 131  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18188 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            18189 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            18190 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            18191 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            18192 ; 136  |
                            18193 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            18194 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            18195 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            18196 ; 140  |
                            18197 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            18198 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            18199 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            18200 ; 144  |
                            18201 ; 145  |typedef union               
                            18202 ; 146  |{
                            18203 ; 147  |    struct {
                            18204 ; 148  |        int ADD            :9;
                            18205 ; 149  |        int                :7;
                            18206 ; 150  |        int RWB            :1;
                            18207 ; 151  |        int                :14;
                            18208 ; 152  |        int KICK           :1;
                            18209 ; 153  |    } B;
                            18210 ; 154  |    int I;
                            18211 ; 155  |} usbarcaccess_type;
                            18212 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            18213 ; 157  |
                            18214 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            18215 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            18216 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            18217 ; 161  |
                            18218 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            18219 ; 163  |
                            18220 ; 164  |typedef union               
                            18221 ; 165  |{
                            18222 ; 166  |    struct {
                            18223 ; 167  |        int DATA           :16;
                            18224 ; 168  |        int                :8;
                            18225 ; 169  |    } B;
                            18226 ; 170  |    int I;
                            18227 ; 171  |} usbarcdatalow_type;
                            18228 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                            18229 ; 173  |
                            18230 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            18231 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            18232 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            18233 ; 177  |
                            18234 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            18235 ; 179  |
                            18236 ; 180  |typedef union               
                            18237 ; 181  |{
                            18238 ; 182  |    struct {
                            18239 ; 183  |        int DATA           :16;
                            18240 ; 184  |        int                :8;
                            18241 ; 185  |    } B;
                            18242 ; 186  |    int I;
                            18243 ; 187  |} usbarcdatahigh_type;
                            18244 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))    
                            18245 ; 189  |
                            18246 ; 190  |
                            18247 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18248 ; 192  |//   USB2.0 ARC Registers 
                            18249 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18250 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            18251 ; 195  |
                            18252 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            18253 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            18254 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            18255 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            18256 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            18257 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            18258 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            18259 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            18260 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            18261 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            18262 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            18263 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            18264 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            18265 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            18266 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            18267 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            18268 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            18269 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            18270 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            18271 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            18272 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            18273 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            18274 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            18275 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            18276 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            18277 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            18278 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            18279 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            18280 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            18281 ; 225  |
                            18282 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            18283 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            18284 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            18285 ; 229  |
                            18286 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            18287 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            18288 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            18289 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            18290 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            18291 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            18292 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            18293 ; 237  |
                            18294 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            18295 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            18296 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            18297 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            18298 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            18299 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            18300 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            18301 ; 245  |
                            18302 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            18303 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            18304 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            18305 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            18306 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            18307 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            18308 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            18309 ; 253  |
                            18310 ; 254  |typedef union               
                            18311 ; 255  |{
                            18312 ; 256  |    struct {
                            18313 ; 257  |        int N_PORTS         :4;
                            18314 ; 258  |        int PPC             :1;
                            18315 ; 259  |        int                 :3;
                            18316 ; 260  |        int N_PCC           :4;
                            18317 ; 261  |        int N_CC            :4;
                            18318 ; 262  |        int PI              :1;
                            18319 ; 263  |        int                 :3;
                            18320 ; 264  |        int N_PTT           :4;
                            18321 ; 265  |        int N_TT            :4;
                            18322 ; 266  |        int                 :20;
                            18323 ; 267  |    } B;
                            18324 ; 268  |    DWORD I;
                            18325 ; 269  |} hcsparams_type;
                            18326 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            18327 ; 271  |
                            18328 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            18329 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            18330 ; 274  |
                            18331 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            18332 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            18333 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            18334 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            18335 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            18336 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            18337 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            18338 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            18339 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            18340 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            18341 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            18342 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            18343 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            18344 ; 288  |
                            18345 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            18346 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            18347 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            18348 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            18349 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            18350 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            18351 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            18352 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            18353 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            18354 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            18355 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            18356 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            18357 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            18358 ; 302  |
                            18359 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            18360 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            18361 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            18362 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            18363 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            18364 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            18365 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            18366 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            18367 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            18368 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            18369 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            18370 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            18371 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            18372 ; 316  |
                            18373 ; 317  |typedef union               
                            18374 ; 318  |{
                            18375 ; 319  |    struct {
                            18376 ; 320  |        int RS              :1;
                            18377 ; 321  |        int RST             :1;
                            18378 ; 322  |        int FS0             :1;
                            18379 ; 323  |        int FS1             :1;
                            18380 ; 324  |        int PSE             :1;
                            18381 ; 325  |        int ASE             :1;
                            18382 ; 326  |        int IAA             :1;
                            18383 ; 327  |        int LR              :1;
                            18384 ; 328  |        int ASP0            :1;
                            18385 ; 329  |        int ASP1            :1;
                            18386 ; 330  |        int                 :1;
                            18387 ; 331  |        int ASPE            :1;
                            18388 ; 332  |        int                 :3;
                            18389 ; 333  |        int FS2             :1;
                            18390 ; 334  |        int ITC             :8;
                            18391 ; 335  |        int                 :24;
                            18392 ; 336  |    } B;
                            18393 ; 337  |    DWORD I;
                            18394 ; 338  |} usbcmd_type;
                            18395 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            18396 ; 340  |
                            18397 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            18398 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            18399 ; 343  |
                            18400 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            18401 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            18402 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            18403 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            18404 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            18405 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            18406 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            18407 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            18408 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            18409 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            18410 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            18411 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            18412 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            18413 ; 357  |
                            18414 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            18415 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            18416 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            18417 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            18418 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            18419 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            18420 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            18421 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            18422 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            18423 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            18424 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            18425 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            18426 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            18427 ; 371  |
                            18428 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            18429 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            18430 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            18431 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            18432 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            18433 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            18434 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            18435 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            18436 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            18437 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            18438 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18439 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            18440 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            18441 ; 385  |
                            18442 ; 386  |
                            18443 ; 387  |typedef union               
                            18444 ; 388  |{
                            18445 ; 389  |    struct {
                            18446 ; 390  |        int UI              :1;
                            18447 ; 391  |        int UEI             :1;
                            18448 ; 392  |        int PCI             :1;
                            18449 ; 393  |        int FRI             :1;
                            18450 ; 394  |        int SEI             :1;
                            18451 ; 395  |        int AAI             :1;
                            18452 ; 396  |        int URI             :1;
                            18453 ; 397  |        int STI             :1;
                            18454 ; 398  |        int SLI             :1;
                            18455 ; 399  |        int                 :3;
                            18456 ; 400  |        int HCH             :1;
                            18457 ; 401  |        int RCL             :1;
                            18458 ; 402  |        int PS              :1;
                            18459 ; 403  |        int AS              :1;
                            18460 ; 404  |        int                 :24;
                            18461 ; 405  |    } B;
                            18462 ; 406  |    DWORD I;
                            18463 ; 407  |} usbsts_type;
                            18464 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            18465 ; 409  |
                            18466 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            18467 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            18468 ; 412  |
                            18469 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            18470 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            18471 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            18472 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            18473 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            18474 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            18475 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            18476 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            18477 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            18478 ; 422  |
                            18479 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            18480 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            18481 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            18482 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            18483 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            18484 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            18485 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            18486 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            18487 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            18488 ; 432  |
                            18489 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            18490 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            18491 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            18492 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            18493 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            18494 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            18495 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            18496 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            18497 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            18498 ; 442  |
                            18499 ; 443  |
                            18500 ; 444  |typedef union               
                            18501 ; 445  |{
                            18502 ; 446  |    struct {
                            18503 ; 447  |        int UE              :1;
                            18504 ; 448  |        int UEE             :1;
                            18505 ; 449  |        int PCE             :1;
                            18506 ; 450  |        int FRE             :1;
                            18507 ; 451  |        int SEE             :1;
                            18508 ; 452  |        int AAE             :1;
                            18509 ; 453  |        int URE             :1;
                            18510 ; 454  |        int STE             :1;
                            18511 ; 455  |        int SLE             :1;
                            18512 ; 456  |        int                 :39;
                            18513 ; 457  |    } B;
                            18514 ; 458  |    DWORD I;
                            18515 ; 459  |} usbintr_type;
                            18516 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            18517 ; 461  |
                            18518 ; 462  |
                            18519 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            18520 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            18521 ; 465  |
                            18522 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            18523 ; 467  |
                            18524 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            18525 ; 469  |
                            18526 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            18527 ; 471  |
                            18528 ; 472  |typedef union               
                            18529 ; 473  |{
                            18530 ; 474  |    struct {
                            18531 ; 475  |        int                 :25;
                            18532 ; 476  |        int ADD             :7;
                            18533 ; 477  |        int                 :16;
                            18534 ; 478  |    } B;
                            18535 ; 479  |    DWORD I;
                            18536 ; 480  |} devaddr_type;
                            18537 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            18538 ; 482  |
                            18539 ; 483  |
                            18540 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            18541 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            18542 ; 486  |
                            18543 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            18544 ; 488  |
                            18545 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            18546 ; 490  |
                            18547 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            18548 ; 492  |
                            18549 ; 493  |typedef union               
                            18550 ; 494  |{
                            18551 ; 495  |    struct {
                            18552 ; 496  |        int                 :10;
                            18553 ; 497  |        int ADD             :22;
                            18554 ; 498  |        int                 :16;
                            18555 ; 499  |    } B;
                            18556 ; 500  |    DWORD I;
                            18557 ; 501  |} endptlistaddr_type;
                            18558 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158))    
                            18559 ; 503  |
                            18560 ; 504  |
                            18561 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            18562 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            18563 ; 507  |
                            18564 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            18565 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            18566 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            18567 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            18568 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            18569 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            18570 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            18571 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            18572 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            18573 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            18574 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            18575 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            18576 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            18577 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            18578 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            18579 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            18580 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            18581 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            18582 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            18583 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            18584 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            18585 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            18586 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            18587 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            18588 ; 532  |
                            18589 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            18590 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            18591 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            18592 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            18593 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            18594 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            18595 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            18596 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            18597 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            18598 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            18599 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            18600 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            18601 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            18602 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            18603 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            18604 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            18605 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            18606 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            18607 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            18608 ; 552  |
                            18609 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            18610 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            18611 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            18612 ; 556  |
                            18613 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            18614 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            18615 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            18616 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            18617 ; 561  |
                            18618 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            18619 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            18620 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            18621 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            18622 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            18623 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            18624 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            18625 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            18626 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            18627 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            18628 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            18629 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            18630 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            18631 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            18632 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            18633 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            18634 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            18635 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            18636 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            18637 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            18638 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            18639 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            18640 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            18641 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            18642 ; 586  |
                            18643 ; 587  |typedef union               
                            18644 ; 588  |{
                            18645 ; 589  |    struct {
                            18646 ; 590  |        int CCS             :1;
                            18647 ; 591  |        int CSC             :1;
                            18648 ; 592  |        int PE              :1;
                            18649 ; 593  |        int PEC             :1;
                            18650 ; 594  |        int OCA             :1;
                            18651 ; 595  |        int OCC             :1;
                            18652 ; 596  |        int FPR             :1;
                            18653 ; 597  |        int SUSP            :1;
                            18654 ; 598  |        int PR              :1;
                            18655 ; 599  |        int HSP             :1;
                            18656 ; 600  |        int LS              :2;
                            18657 ; 601  |        int PP              :1;
                            18658 ; 602  |        int PO              :1;
                            18659 ; 603  |        int PIC             :2;
                            18660 ; 604  |        int PTC             :4;
                            18661 ; 605  |        int WKCN            :1;
                            18662 ; 606  |        int WKDS            :1;
                            18663 ; 607  |        int WKOC            :1;
                            18664 ; 608  |        int PHCD            :1;
                            18665 ; 609  |        int PFSC            :1;
                            18666 ; 610  |        int                 :1;
                            18667 ; 611  |        int PSPD            :2;
                            18668 ; 612  |        int                 :1;
                            18669 ; 613  |        int PTW             :1;
                            18670 ; 614  |        int STS             :1;
                            18671 ; 615  |        int PTS             :1;
                            18672 ; 616  |        int                 :16;
                            18673 ; 617  |    } B;
                            18674 ; 618  |    DWORD I;
                            18675 ; 619  |} portsc1_type;
                            18676 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            18677 ; 621  |
                            18678 ; 622  |
                            18679 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            18680 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            18681 ; 625  |
                            18682 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            18683 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            18684 ; 628  |
                            18685 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            18686 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            18687 ; 631  |
                            18688 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            18689 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18690 ; 634  |
                            18691 ; 635  |typedef union               
                            18692 ; 636  |{
                            18693 ; 637  |    struct {
                            18694 ; 638  |        int CM              :2;
                            18695 ; 639  |        int ES              :1;
                            18696 ; 640  |        int                 :46;
                            18697 ; 641  |    } B;
                            18698 ; 642  |    DWORD I;
                            18699 ; 643  |} usbmode_type;
                            18700 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            18701 ; 645  |
                            18702 ; 646  |
                            18703 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            18704 ; 648  |//  The following endpoint equates are common for the following registers
                            18705 ; 649  |
                            18706 ; 650  |#define ENDPOINT0_BITPOS (0)
                            18707 ; 651  |#define ENDPOINT1_BITPOS (1)
                            18708 ; 652  |#define ENDPOINT2_BITPOS (2)
                            18709 ; 653  |#define ENDPOINT3_BITPOS (3)
                            18710 ; 654  |#define ENDPOINT4_BITPOS (4)
                            18711 ; 655  |#define ENDPOINT5_BITPOS (5)
                            18712 ; 656  |#define ENDPOINT6_BITPOS (6)
                            18713 ; 657  |#define ENDPOINT7_BITPOS (7)
                            18714 ; 658  |#define ENDPOINT8_BITPOS (8)
                            18715 ; 659  |#define ENDPOINT9_BITPOS (9)
                            18716 ; 660  |#define ENDPOINT10_BITPOS (10)
                            18717 ; 661  |#define ENDPOINT11_BITPOS (11)
                            18718 ; 662  |#define ENDPOINT12_BITPOS (12)
                            18719 ; 663  |#define ENDPOINT13_BITPOS (13)
                            18720 ; 664  |#define ENDPOINT14_BITPOS (14)
                            18721 ; 665  |#define ENDPOINT15_BITPOS (15)
                            18722 ; 666  |
                            18723 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            18724 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            18725 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            18726 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            18727 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            18728 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            18729 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            18730 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            18731 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            18732 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            18733 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            18734 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            18735 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            18736 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            18737 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            18738 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            18739 ; 683  |
                            18740 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            18741 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            18742 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            18743 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            18744 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            18745 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            18746 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            18747 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            18748 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            18749 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            18750 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            18751 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            18752 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            18753 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            18754 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            18755 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            18756 ; 700  |
                            18757 ; 701  |typedef union               
                            18758 ; 702  |{
                            18759 ; 703  |    struct {
                            18760 ; 704  |        int EP0              :1;
                            18761 ; 705  |        int EP1              :1;
                            18762 ; 706  |        int EP2              :1;
                            18763 ; 707  |        int EP3              :1;
                            18764 ; 708  |        int EP4              :1;
                            18765 ; 709  |        int EP5              :1;
                            18766 ; 710  |        int EP6              :1;
                            18767 ; 711  |        int EP7              :1;
                            18768 ; 712  |        int EP8              :1;
                            18769 ; 713  |        int EP9              :1;
                            18770 ; 714  |        int EP10             :1;
                            18771 ; 715  |        int EP11             :1;
                            18772 ; 716  |        int EP12             :1;
                            18773 ; 717  |        int EP13             :1;
                            18774 ; 718  |        int EP14             :1;
                            18775 ; 719  |        int EP15             :1;
                            18776 ; 720  |        int                  :32;
                            18777 ; 721  |    } B;
                            18778 ; 722  |    DWORD I;
                            18779 ; 723  |} endpsetupstat_type;
                            18780 ; 724  |
                            18781 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac))    
                            18782 ; 726  |
                            18783 ; 727  |typedef union               
                            18784 ; 728  |{
                            18785 ; 729  |    struct {
                            18786 ; 730  |        int EP0              :1;
                            18787 ; 731  |        int EP1              :1;
                            18788 ; 732  |        int EP2              :1;
                            18789 ; 733  |        int EP3              :1;
                            18790 ; 734  |        int EP4              :1;
                            18791 ; 735  |        int EP5              :1;
                            18792 ; 736  |        int EP6              :1;
                            18793 ; 737  |        int EP7              :1;
                            18794 ; 738  |        int EP8              :1;
                            18795 ; 739  |        int EP9              :1;
                            18796 ; 740  |        int EP10             :1;
                            18797 ; 741  |        int EP11             :1;
                            18798 ; 742  |        int EP12             :1;
                            18799 ; 743  |        int EP13             :1;
                            18800 ; 744  |        int EP14             :1;
                            18801 ; 745  |        int EP15             :1;
                            18802 ; 746  |        int                  :8;
                            18803 ; 747  |    } B;
                            18804 ; 748  |    WORD I;
                            18805 ; 749  |} endpt_type;
                            18806 
                            18844 
                            18845 ; 750  |
                            18846 ; 751  |typedef union
                            18847 ; 752  |{
                            18848 ; 753  |   struct {
                            18849 ; 754  |       endpt_type  RX;
                            18850 ; 755  |       endpt_type  TX;
                            18851 ; 756  |   } W;
                            18852 ; 757  |   DWORD DW;
                            18853 ; 758  |} endptrxtx_type;
                            18854 ; 759  |
                            18855 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))    
                            18856 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))    
                            18857 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))    
                            18858 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))    
                            18859 ; 764  |
                            18860 ; 765  |
                            18861 ; 766  |
                            18862 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            18863 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            18864 ; 769  |
                            18865 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            18866 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            18867 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            18868 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            18869 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            18870 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            18871 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            18872 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            18873 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            18874 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            18875 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            18876 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            18877 ; 782  |
                            18878 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            18879 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            18880 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            18881 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            18882 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            18883 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            18884 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            18885 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            18886 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            18887 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            18888 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            18889 ; 794  |
                            18890 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            18891 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            18892 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            18893 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            18894 ; 799  |
                            18895 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            18896 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            18897 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            18898 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            18899 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            18900 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            18901 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            18902 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            18903 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            18904 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            18905 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            18906 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            18907 ; 812  |
                            18908 ; 813  |
                            18909 ; 814  |typedef union               
                            18910 ; 815  |{
                            18911 ; 816  |    struct {
                            18912 ; 817  |        int RXS             :1;
                            18913 ; 818  |        int RXD             :1;
                            18914 ; 819  |        int RXT             :2;
                            18915 ; 820  |        int                 :1;
                            18916 ; 821  |        int RXI             :1;
                            18917 ; 822  |        int RXR             :1;
                            18918 ; 823  |        int RXE             :1;
                            18919 ; 824  |        int                 :8;
                            18920 ; 825  |        int TXS             :1;
                            18921 ; 826  |        int TXD             :1;
                            18922 ; 827  |        int TXT             :2;
                            18923 ; 828  |        int                 :1;
                            18924 ; 829  |        int TXI             :1;
                            18925 ; 830  |        int TXR             :1;
                            18926 ; 831  |        int TXE             :1;
                            18927 ; 832  |        int                 :24;
                            18928 ; 833  |    } B;
                            18929 ; 834  |    DWORD I;
                            18930 ; 835  |} endptctrl_type;
                            18931 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)))    
                            18932 ; 837  |
                            18933 ; 838  |#endif
                            18934 ; 839  |
                            18935 ; 840  |
                            18936 
                            18938 
                            18939 ; 37   |#include "regsusb20phy.h"
                            18940 
                            18942 
                            18943 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18944 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            18945 ; 3    |//;  File        : regsusbphy.inc
                            18946 ; 4    |//;  Description : USB20 PHY Register definition
                            18947 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            18948 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18949 ; 7    |
                            18950 ; 8    |// The following naming conventions are followed in this file.
                            18951 ; 9    |// All registers are named using the format...
                            18952 ; 10   |//     HW_<module>_<regname>
                            18953 ; 11   |// where <module> is the module name which can be any of the following...
                            18954 ; 12   |//     USB20
                            18955 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            18956 ; 14   |// module name includes a number starting from 0 for the first instance of
                            18957 ; 15   |// that module)
                            18958 ; 16   |// <regname> is the specific register within that module
                            18959 ; 17   |// We also define the following...
                            18960 ; 18   |//     HW_<module>_<regname>_BITPOS
                            18961 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            18962 ; 20   |//     HW_<module>_<regname>_SETMASK
                            18963 ; 21   |// which does something else, and
                            18964 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            18965 ; 23   |// which does something else.
                            18966 ; 24   |// Other rules
                            18967 ; 25   |//     All caps
                            18968 ; 26   |//     Numeric identifiers start at 0
                            18969 ; 27   |
                            18970 ; 28   |#if !(defined(regsusbphyinc))
                            18971 ; 29   |#define regsusbphyinc 1
                            18972 ; 30   |
                            18973 ; 31   |#include "types.h"
                            18974 
                            18976 
                            18977 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            18978 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            18979 ; 3    |//
                            18980 ; 4    |// Filename: types.h
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18981 ; 5    |// Description: Standard data types
                            18982 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            18983 ; 7    |
                            18984 ; 8    |#ifndef _TYPES_H
                            18985 ; 9    |#define _TYPES_H
                            18986 ; 10   |
                            18987 ; 11   |// TODO:  move this outta here!
                            18988 ; 12   |#if !defined(NOERROR)
                            18989 ; 13   |#define NOERROR 0
                            18990 ; 14   |#define SUCCESS 0
                            18991 ; 15   |#endif 
                            18992 ; 16   |#if !defined(SUCCESS)
                            18993 ; 17   |#define SUCCESS  0
                            18994 ; 18   |#endif
                            18995 ; 19   |#if !defined(ERROR)
                            18996 ; 20   |#define ERROR   -1
                            18997 ; 21   |#endif
                            18998 ; 22   |#if !defined(FALSE)
                            18999 ; 23   |#define FALSE 0
                            19000 ; 24   |#endif
                            19001 ; 25   |#if !defined(TRUE)
                            19002 ; 26   |#define TRUE  1
                            19003 ; 27   |#endif
                            19004 ; 28   |
                            19005 ; 29   |#if !defined(NULL)
                            19006 ; 30   |#define NULL 0
                            19007 ; 31   |#endif
                            19008 ; 32   |
                            19009 ; 33   |#define MAX_INT     0x7FFFFF
                            19010 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            19011 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            19012 ; 36   |#define MAX_ULONG   (-1) 
                            19013 ; 37   |
                            19014 ; 38   |#define WORD_SIZE   24              // word size in bits
                            19015 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            19016 ; 40   |
                            19017 ; 41   |
                            19018 ; 42   |#define BYTE    unsigned char       // btVarName
                            19019 ; 43   |#define CHAR    signed char         // cVarName
                            19020 ; 44   |#define USHORT  unsigned short      // usVarName
                            19021 ; 45   |#define SHORT   unsigned short      // sVarName
                            19022 ; 46   |#define WORD    unsigned int        // wVarName
                            19023 ; 47   |#define INT     signed int          // iVarName
                            19024 ; 48   |#define DWORD   unsigned long       // dwVarName
                            19025 ; 49   |#define LONG    signed long         // lVarName
                            19026 ; 50   |#define BOOL    unsigned int        // bVarName
                            19027 ; 51   |#define FRACT   _fract              // frVarName
                            19028 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            19029 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            19030 ; 54   |#define FLOAT   float               // fVarName
                            19031 ; 55   |#define DBL     double              // dVarName
                            19032 ; 56   |#define ENUM    enum                // eVarName
                            19033 ; 57   |#define CMX     _complex            // cmxVarName
                            19034 ; 58   |typedef WORD UCS3;                   // 
                            19035 ; 59   |
                            19036 ; 60   |#define UINT16  unsigned short
                            19037 ; 61   |#define UINT8   unsigned char   
                            19038 ; 62   |#define UINT32  unsigned long
                            19039 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            19040 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            19041 ; 65   |#define WCHAR   UINT16
                            19042 ; 66   |
                            19043 ; 67   |//UINT128 is 16 bytes or 6 words
                            19044 ; 68   |typedef struct UINT128_3500 {   
                            19045 ; 69   |    int val[6];     
                            19046 ; 70   |} UINT128_3500;
                            19047 ; 71   |
                            19048 ; 72   |#define UINT128   UINT128_3500
                            19049 ; 73   |
                            19050 ; 74   |// Little endian word packed byte strings:   
                            19051 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            19052 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            19053 ; 77   |// Little endian word packed byte strings:   
                            19054 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            19055 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            19056 ; 80   |
                            19057 ; 81   |// Declare Memory Spaces To Use When Coding
                            19058 ; 82   |// A. Sector Buffers
                            19059 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            19060 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            19061 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            19062 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            19063 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            19064 ; 88   |// B. Media DDI Memory
                            19065 ; 89   |#define MEDIA_DDI_MEM _Y
                            19066 ; 90   |
                            19067 ; 91   |
                            19068 ; 92   |
                            19069 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            19070 ; 94   |// Examples of circular pointers:
                            19071 ; 95   |//    INT CIRC cpiVarName
                            19072 ; 96   |//    DWORD CIRC cpdwVarName
                            19073 ; 97   |
                            19074 ; 98   |#define RETCODE INT                 // rcVarName
                            19075 ; 99   |
                            19076 ; 100  |// generic bitfield structure
                            19077 ; 101  |struct Bitfield {
                            19078 ; 102  |    unsigned int B0  :1;
                            19079 ; 103  |    unsigned int B1  :1;
                            19080 ; 104  |    unsigned int B2  :1;
                            19081 ; 105  |    unsigned int B3  :1;
                            19082 ; 106  |    unsigned int B4  :1;
                            19083 ; 107  |    unsigned int B5  :1;
                            19084 ; 108  |    unsigned int B6  :1;
                            19085 ; 109  |    unsigned int B7  :1;
                            19086 ; 110  |    unsigned int B8  :1;
                            19087 ; 111  |    unsigned int B9  :1;
                            19088 ; 112  |    unsigned int B10 :1;
                            19089 ; 113  |    unsigned int B11 :1;
                            19090 ; 114  |    unsigned int B12 :1;
                            19091 ; 115  |    unsigned int B13 :1;
                            19092 ; 116  |    unsigned int B14 :1;
                            19093 ; 117  |    unsigned int B15 :1;
                            19094 ; 118  |    unsigned int B16 :1;
                            19095 ; 119  |    unsigned int B17 :1;
                            19096 ; 120  |    unsigned int B18 :1;
                            19097 ; 121  |    unsigned int B19 :1;
                            19098 ; 122  |    unsigned int B20 :1;
                            19099 ; 123  |    unsigned int B21 :1;
                            19100 ; 124  |    unsigned int B22 :1;
                            19101 ; 125  |    unsigned int B23 :1;
                            19102 ; 126  |};
                            19103 ; 127  |
                            19104 ; 128  |union BitInt {
                            19105 ; 129  |        struct Bitfield B;
                            19106 ; 130  |        int        I;
                            19107 ; 131  |};
                            19108 ; 132  |
                            19109 ; 133  |#define MAX_MSG_LENGTH 10
                            19110 ; 134  |struct CMessage
                            19111 ; 135  |{
                            19112 ; 136  |        unsigned int m_uLength;
                            19113 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            19114 ; 138  |};
                            19115 ; 139  |
                            19116 ; 140  |typedef struct {
                            19117 ; 141  |    WORD m_wLength;
                            19118 ; 142  |    WORD m_wMessage;
                            19119 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            19120 ; 144  |} Message;
                            19121 ; 145  |
                            19122 ; 146  |struct MessageQueueDescriptor
                            19123 ; 147  |{
                            19124 ; 148  |        int *m_pBase;
                            19125 ; 149  |        int m_iModulo;
                            19126 ; 150  |        int m_iSize;
                            19127 ; 151  |        int *m_pHead;
                            19128 ; 152  |        int *m_pTail;
                            19129 ; 153  |};
                            19130 ; 154  |
                            19131 ; 155  |struct ModuleEntry
                            19132 ; 156  |{
                            19133 ; 157  |    int m_iSignaledEventMask;
                            19134 ; 158  |    int m_iWaitEventMask;
                            19135 ; 159  |    int m_iResourceOfCode;
                            19136 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            19137 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            19138 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            19139 ; 163  |    int m_uTimeOutHigh;
                            19140 ; 164  |    int m_uTimeOutLow;
                            19141 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            19142 ; 166  |};
                            19143 ; 167  |
                            19144 ; 168  |union WaitMask{
                            19145 ; 169  |    struct B{
                            19146 ; 170  |        unsigned int m_bNone     :1;
                            19147 ; 171  |        unsigned int m_bMessage  :1;
                            19148 ; 172  |        unsigned int m_bTimer    :1;
                            19149 ; 173  |        unsigned int m_bButton   :1;
                            19150 ; 174  |    } B;
                            19151 ; 175  |    int I;
                            19152 ; 176  |} ;
                            19153 ; 177  |
                            19154 ; 178  |
                            19155 ; 179  |struct Button {
                            19156 ; 180  |        WORD wButtonEvent;
                            19157 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            19158 ; 182  |};
                            19159 ; 183  |
                            19160 ; 184  |struct Message {
                            19161 ; 185  |        WORD wMsgLength;
                            19162 ; 186  |        WORD wMsgCommand;
                            19163 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            19164 ; 188  |};
                            19165 ; 189  |
                            19166 ; 190  |union EventTypes {
                            19167 ; 191  |        struct CMessage msg;
                            19168 ; 192  |        struct Button Button ;
                            19169 ; 193  |        struct Message Message;
                            19170 ; 194  |};
                            19171 ; 195  |
                            19172 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            19173 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            19174 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            19175 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            19176 ; 200  |
                            19177 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            19178 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            19179 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            19180 ; 204  |
                            19181 ; 205  |#if DEBUG
                            19182 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            19183 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            19184 ; 208  |#else 
                            19185 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            19186 ; 210  |#define DebugBuildAssert(x)    
                            19187 ; 211  |#endif
                            19188 ; 212  |
                            19189 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            19190 ; 214  |//  #pragma asm
                            19191 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            19192 ; 216  |//  #pragma endasm
                            19193 ; 217  |
                            19194 ; 218  |
                            19195 ; 219  |#ifdef COLOR_262K
                            19196 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            19197 ; 221  |#elif defined(COLOR_65K)
                            19198 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            19199 ; 223  |#else
                            19200 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            19201 ; 225  |#endif
                            19202 ; 226  |    
                            19203 ; 227  |#endif // #ifndef _TYPES_H
                            19204 
                            19206 
                            19207 ; 32   |
                            19208 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            19209 ; 34   |//   USB2.0 PHY STMP Registers 
                            19210 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            19211 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            19212 ; 37   |
                            19213 ; 38   |
                            19214 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            19215 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            19216 ; 41   |
                            19217 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            19218 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            19219 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            19220 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            19221 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            19222 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            19223 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            19224 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            19225 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            19226 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            19227 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            19228 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            19229 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            19230 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            19231 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            19232 ; 57   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19233 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            19234 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            19235 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            19236 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            19237 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            19238 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            19239 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            19240 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            19241 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            19242 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            19243 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            19244 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            19245 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            19246 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            19247 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            19248 ; 73   |
                            19249 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            19250 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            19251 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            19252 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            19253 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            19254 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            19255 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            19256 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            19257 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            19258 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            19259 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            19260 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            19261 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            19262 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            19263 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            19264 ; 89   |
                            19265 ; 90   |typedef union               
                            19266 ; 91   |{
                            19267 ; 92   |    struct {
                            19268 ; 93   |        int RSVD0          :5;
                            19269 ; 94   |        int TXDISCON1500   :1;
                            19270 ; 95   |        int PLLVCOPWD      :1;
                            19271 ; 96   |        int PLLVCPPWD      :1;
                            19272 ; 97   |        int RSVD1          :2;
                            19273 ; 98   |        int TXPWDFS        :1;
                            19274 ; 99   |        int TXPWDIBIAS     :1;
                            19275 ; 100  |        int TXPWDV2I       :1;
                            19276 ; 101  |        int TXPWDVBG       :1;
                            19277 ; 102  |        int TXPWDCOMP      :1;
                            19278 ; 103  |        int RSVD2          :1;
                            19279 ; 104  |        int RXPWDDISCONDET :1;
                            19280 ; 105  |        int RXPWDENV       :1;
                            19281 ; 106  |        int RXPWD1PT1      :1;
                            19282 ; 107  |        int RXPWDDIFF      :1;
                            19283 ; 108  |        int RXPWDRX        :1;
                            19284 ; 109  |        int RSVD3          :1;
                            19285 ; 110  |        int PWDIBIAS       :1;
                            19286 ; 111  |        int REGRESET       :1;
                            19287 ; 112  |    } B;
                            19288 ; 113  |    int I;
                            19289 ; 114  |} usbphypwd_type;
                            19290 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB PHY Powerdown Register */
                            19291 ; 116  |
                            19292 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            19293 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            19294 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            19295 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            19296 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            19297 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            19298 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            19299 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            19300 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            19301 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            19302 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            19303 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            19304 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            19305 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            19306 ; 131  |
                            19307 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            19308 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            19309 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            19310 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            19311 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            19312 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            19313 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            19314 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            19315 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            19316 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            19317 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            19318 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            19319 ; 144  |
                            19320 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXCAL1500_BITPOS)
                            19321 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXENCAL1500_BITPOS)
                            19322 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXHSXCVR_BITPOS)
                            19323 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHYTX_TXCALIBRATE_BITPOS)
                            19324 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DN_BITPOS)
                            19325 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DN_BITPOS)
                            19326 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXHSTERM_BITPOS)
                            19327 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_BITPOS)
                            19328 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DP_BITPOS)
                            19329 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DP_BITPOS)
                            19330 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSHIZ_BITPOS)
                            19331 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_TXCOMPOUT_BITPOS)
                            19332 ; 157  |
                            19333 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            19334 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            19335 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            19336 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            19337 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            19338 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            19339 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            19340 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            19341 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            19342 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            19343 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            19344 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            19345 ; 170  |
                            19346 ; 171  |typedef union               
                            19347 ; 172  |{
                            19348 ; 173  |    struct {
                            19349 ; 174  |        int TXCAL1500          :4;
                            19350 ; 175  |        int RSVD0              :1;
                            19351 ; 176  |        int TXENCAL1500        :1;
                            19352 ; 177  |        int TXHSXCVR           :1;
                            19353 ; 178  |        int TXCALIBRATE        :1;
                            19354 ; 179  |        int TXCAL45DN          :4;
                            19355 ; 180  |        int RSVD1              :1;
                            19356 ; 181  |        int TXENCAL45DN        :1;
                            19357 ; 182  |        int TXHSTERM           :1;
                            19358 ; 183  |        int TXSKEW             :1;
                            19359 ; 184  |        int TXCAL45DP          :4;
                            19360 ; 185  |        int RSVD2              :1;
                            19361 ; 186  |        int TXENCAL45DP        :1;
                            19362 ; 187  |        int TXFSHIZ            :1;
                            19363 ; 188  |        int TXCOMPOUT          :1;
                            19364 ; 189  |    } B;
                            19365 ; 190  |    int I;
                            19366 ; 191  |} usbphytx_type;
                            19367 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            19368 ; 193  |
                            19369 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            19370 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            19371 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            19372 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            19373 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            19374 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            19375 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            19376 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            19377 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            19378 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            19379 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            19380 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            19381 ; 206  |
                            19382 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            19383 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            19384 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            19385 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            19386 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            19387 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            19388 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            19389 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            19390 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            19391 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            19392 ; 217  |
                            19393 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPLL_PLLV2ISEL_BITPOS)
                            19394 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHYPLL_PLLCPDBLIP_BITPOS)
                            19395 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK2_BITPOS)
                            19396 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK24_BITPOS)
                            19397 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCPNSEL_BITPOS)
                            19398 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS)
                            19399 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPLL_PLLPFDRST_BITPOS)
                            19400 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            19401 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOKSTART_BITPOS)
                            19402 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            19403 ; 228  |
                            19404 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            19405 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            19406 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            19407 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            19408 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            19409 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            19410 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            19411 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            19412 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            19413 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            19414 ; 239  |
                            19415 ; 240  |typedef union               
                            19416 ; 241  |{
                            19417 ; 242  |    struct {
                            19418 ; 243  |        int PLLV2ISEL        :4;
                            19419 ; 244  |        int RSVD0            :1;
                            19420 ; 245  |        int PLLCPDBLIP       :1;
                            19421 ; 246  |        int PLLVCOCLK2       :1;
                            19422 ; 247  |        int PLLVCOCLK24      :1;
                            19423 ; 248  |        int PLLCPNSEL        :4;
                            19424 ; 249  |        int PLLCLKDIVSEL     :4;
                            19425 ; 250  |        int RSVD1            :4;
                            19426 ; 251  |        int PLLPFDRST        :1;
                            19427 ; 252  |        int PLLCPSHORTLFR    :1;
                            19428 ; 253  |        int PLLVCOKSTART     :1;
                            19429 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            19430 ; 255  |    } B;
                            19431 ; 256  |    int I;
                            19432 ; 257  |} usbphypll_type;
                            19433 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            19434 ; 259  |
                            19435 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            19436 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            19437 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            19438 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            19439 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            19440 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            19441 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            19442 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            19443 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            19444 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            19445 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            19446 ; 271  |
                            19447 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            19448 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            19449 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            19450 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            19451 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            19452 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            19453 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            19454 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            19455 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            19456 ; 281  |
                            19457 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            19458 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_BITPOS)
                            19459 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_BITPOS)
                            19460 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLLKTIMECTL_BITPOS)
                            19461 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKDIVCTL_BITPOS)
                            19462 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives actual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            19463 ; 288  |//              480Mhz/7 =68.57Mhz
                            19464 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            19465 ; 290  |
                            19466 ; 291  |//              480Mhz/8 ~60Mhz
                            19467 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            19468 ; 293  |
                            19469 ; 294  |//              480Mhz/9 =53.3Mhz
                            19470 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            19471 ; 296  |
                            19472 ; 297  |//              480Mhz/10 =48Mhz
                            19473 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            19474 ; 299  |
                            19475 ; 300  |
                            19476 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOSTMODETEST_BITPOS)
                            19477 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FSCKSOURCESEL_BITPOS)
                            19478 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGRXDBYPASS_BITPOS)
                            19479 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_BITPOS)
                            19480 ; 305  |
                            19481 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            19482 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            19483 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19484 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            19485 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            19486 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            19487 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            19488 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            19489 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            19490 ; 315  |
                            19491 ; 316  |typedef union               
                            19492 ; 317  |{
                            19493 ; 318  |    struct {
                            19494 ; 319  |     int ENVADJ               :4;
                            19495 ; 320  |     int DISCONADJ            :4;
                            19496 ; 321  |     int DEBUGMODE            :4;
                            19497 ; 322  |     int PLLLKTIMECTL         :4;
                            19498 ; 323  |     int PLLCKDIVCTL          :4;
                            19499 ; 324  |     int HOSTMODETEST         :1;
                            19500 ; 325  |     int FSCKSOURCESEL        :1;
                            19501 ; 326  |     int REGRXDBYPASS         :1;
                            19502 ; 327  |     int PLLLOCKED            :1;
                            19503 ; 328  |    } B;
                            19504 ; 329  |    int I;
                            19505 ; 330  |} usbphyrx_type;
                            19506 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            19507 ; 332  |
                            19508 ; 333  |#endif
                            19509 ; 334  |
                            19510 
                            19512 
                            19513 ; 38   |
                            19514 ; 39   |
                            19515 ; 40   |#endif // if (!@def(hwequ))
                            19516 ; 41   |
                            19517 
                            19519 
                            19520 ; 17   |
                            19521 ; 18   |// Local function prototypes
                            19522 ; 19   |void _reentrant DisplayEqBar(INT iSelected, INT bInvert);
                            19523 ; 20   |void _reentrant DisplayEqStats(INT iSelected, INT bDisplayLabels);
                            19524 ; 21   |
                            19525 ; 22   |// Global variables
                            19526 ; 23   |int g_iEqSetting = FIRST_EQ;   // user-selected EQ setting (saved in Settings.dat)
                            19527 
                            19528 
Y:0000                      19529         org     y,".ydataeqmenu",init:
                            19530 Fg_iEqSetting:
Y:0000 000000               19531         dc      $000000
                            19534 
                            19535 ; 24   |//       org     y,".ydataeqmenu",init:     ; (cluster: Y_Extra)
                            19536 ; 25   |// Fg_iEqSetting:
                            19537 ; 26   |//       dc      $000000       ; initialization data (zero) located in Y memory
                            19538 ; 27   |
                            19539 ; 28   |INT _Y g_iCustomEqBand_gain[NUM_EQ_BANDS] = { 0,0,0,0,0 };  // five EQ Bands supported
                            19540 
                            19541 Fg_iCustomEqBand_gain:
Y:0001 000000 000000        19542         dc      $000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000                     
                            19546 
                            19547 ; 29   |//       org     y,".ydataeqmenu",init:     ; (cluster: Y_Extra)
                            19548 ; 30   |// Fg_iCustomEqBand_gain:
                            19549 ; 31   |//       dc      $000000,$000000,$000000,$000000,$000000   ; initialization data (zero)
                            19550 ; 32   |
                            19551 ; 33   |
                            19552 ; 34   |#define FIRST_X_POS      5
                            19553 ; 35   |#define SLIDER_SPACING   18
                            19554 ; 36   |#define GEQ_NORMAL       FALSE
                            19555 ; 37   |#define GEQ_INVERT       TRUE
                            19556 ; 38   |
                            19557 ; 39   |
                            19558 ; 40   |/////////////////////////////////////////////////////////////////////////////////////////
                            19559 ; 41   |//
                            19560 ; 42   |//>  Name:          int _reentrant EqMenu(int a, int b, int *pPtr)
                            19561 ; 43   |//
                            19562 ; 44   |//   Type:          Function (EQ menu entry point)
                            19563 ; 45   |//
                            19564 ; 46   |//   Description:   This function is the entry point for the EQ menu manager.
                            19565 ; 47   |//
                            19566 ; 48   |//   Inputs:        None
                            19567 ; 49   |//
                            19568 ; 50   |//   Outputs:       Menu to enter upon exiting EQ menu
                            19569 ; 51   |//                      if PH_MENU: return to Music menu
                            19570 ; 52   |//                      else : return to Settings menu selection (predefined modes only)
                            19571 ; 53   |//
                            19572 ; 54   |/*   Notes:         
                            19573 ; 55   |  For custom GEQ mode where five EqBand dB gain levels are user-selectable:
                            19574 ; 56   |   =========================================
                            19575 ; 57   |   ||  <first row icons>                  || <--play state,shuffle mode,EQ mode,lock,battery level,..
                            19576 ; 58   |   ||  <second row icons>                 || <--volume level, playlist,..
                            19577 ; 59   |   ||     |      |      |      |      |   ||
                            19578 ; 60   |   ||     |      |      |      |      |   ||
                            19579 ; 61   |   ||    -+-     |      |      |     ===  || <--selected gain will appear in Inverse
                            19580 ; 62   |   ||     |     -+-     |     -+-     |   ||    (selected gain will "blink"
                            19581 ; 63   |   ||     |      |     -+-     |      |   ||     when in Band-gain-modify mode)
                            19582 ; 64   |   ||     |      |      |      |      |   ||
                            19583 ; 65   |   ||     |      |      |      |      |   ||
                            19584 ; 66   |   ||     |      |      |      |      |   ||
                            19585 ; 67   |   || dB: -nn.n                 120000 Hz || <--(-14)dB to 14dB, 80 to 120000Hz
                            19586 ; 68   |   =========================================
                            19587 ; 69   |
                            19588 ; 70   |  For predefined GEQ mode where five EqBand dB gain levels are fixed:
                            19589 ; 71   |   =========================================
                            19590 ; 72   |   ||  <first row icons>                  ||
                            19591 ; 73   |   ||  <second row icons>                 ||
                            19592 ; 74   |   ||     |      |      |      |      |   ||
                            19593 ; 75   |   ||     |      |      |      |      |   ||
                            19594 ; 76   |   ||    -+-     |      |      |     -+-  ||
                            19595 ; 77   |   ||     |     -+-     |     -+-     |   ||
                            19596 ; 78   |   ||     |      |     -+-     |      |   ||
                            19597 ; 79   |   ||     |      |      |      |      |   ||
                            19598 ; 80   |   ||     |      |      |      |      |   ||
                            19599 ; 81   |   ||     |      |      |      |      |   ||
                            19600 ; 82   |   ||                                     || <--no levels displayed
                            19601 ; 83   |   =========================================
                            19602 ; 84   |
                            19603 ; 85   |  Changes in EQ settings can be heard in real-time if a song is playing.
                            19604 ; 86   |  The Play, Stop, Volume up, and Volume down buttons are not blocked. */
                            19605 ; 87   |//<
                            19606 ; 88   |//////////////////////////////////////////////////////////////////////////////////////////
                            19607 ; 89   |int _reentrant EqMenu(int a, int b, int *pPtr)
                            19608 ; 90   |{
                            19609 
P:0000                      19610         org     p,".ptexteqmenu":
                            19617 FEqMenu:
P:0000 055F7C         2    219618         movec   ssh,y:(r7)+
P:0001 3F0900         2    419621         move    #9,n7
P:0002 000000         2    619622         nop
P:0003 204F00         2    819623         move    (r7)+n7
                            19633 
                            19634 ; 91   |        BOOL bDone = FALSE;
                            19635 
P:0004 260000         2   1019637         move    #0,y0
P:0005 77F400 FFFFF8  3   1319639         move    #-8,n7
P:0007 000000         2   1519640         nop
P:0008 4E6F00         4   1919641         move    y0,y:(r7+n7)
                            19701 
                            19702 ; 92   |        BOOL bSendToPlayerStateMachine;
                            19703 ; 93   |        union DisplayHints DisplayHint;
                            19704 ; 94   |
                            19705 ; 95   |        INT iSelectedBand = EQ_BAND_FIRST;    // (SDK2.520)
                            19706 
P:0009 270000         2   2119708         move    #0,y1
P:000A 77F400 FFFFF9  3   2419710         move    #-7,n7
P:000C 000000         2   2619711         nop
P:000D 4F6F00         4   3019712         move    y1,y:(r7+n7)
                            19717 
                            19718 ; 96   |        INT bBandGainModify_mode = FALSE;
                            19719 
P:000E 240000         2   3219721         move    #0,x0
P:000F 77F400 FFFFFA  3   3519723         move    #-6,n7
P:0011 000000         2   3719724         nop
P:0012 4C6F00         4   4119725         move    x0,y:(r7+n7)
                            19730 
                            19731 ; 97   |        INT bBlink = FALSE;
                            19732 
P:0013 250000         2   4319734         move    #0,x1
P:0014 77F400 FFFFFB  3   4619736         move    #-5,n7
P:0016 000000         2   4819737         nop
P:0017 4D6F00         4   5219738         move    x1,y:(r7+n7)
                            19743 
                            19744 ; 98   |        INT iEvent;
                            19745 ; 99   |
                            19746 ; 100  |        // This is required to get the message into the PlayerStateMachine (PSM)
                            19747 ; 101  |        // casted to avoid pointer mismatch warnings
                            19748 ; 102  |        pPtr = (int *) &gEventInfo;
                            19749 
P:0018 66F400 rrrrrr  3   5519751         move    #FgEventInfo,r6
P:001A 77F400 FFFFFC  3   5819754         move    #-4,n7
P:001C 000000         2   6019755         nop
P:001D 6E6F00         4   6419756         move    r6,y:(r7+n7)
                            19759 
                            19760 ; 103  |
                            19761 ; 104  |        b;   // avoid warnings for unused
                            19762 ; 105  |
                            19763 ; 106  |        // We need to refresh the screen since entering the menu
                            19764 ; 107  |        DisplayHint.I = EQ_MENU_DISPLAY_ALL|(1<<DISPLAY_CLEAR_DISPLAY_BITPOS);
                            19765 
P:001E 46F400 707E01  3   6719767         move    #7372289,y0
P:0020 77F400 FFFFF7  3   7019768         move    #-9,n7
P:0022 000000         2   7219769         nop
P:0023 4E6F00         4   7619770         move    y0,y:(r7+n7)
                            19771 
                            19772 ; 108  |        SysCallFunction(RSRC_DISPLAY_CODE_BANK,RefreshDisplay,DisplayHint.I,1,0);
                            19773 
P:0024 200059         2   7819775         tfr     y0,b
P:0025 200013         2   8019777         clr     a   
P:0026 44F400 000001  3   8319779         move    #>1,x0
P:0028 219400         2   8519780         move    a1,r4
P:0029 56F400 000022  3   8819781         move    #>34,a
P:002B 60F400 rrrrrr  3   9119782         move    #FRefreshDisplay,r0
P:002D 0BF080 rrrrrr  6   9719783         jsr     SysCallFunction
                            19784 
                            19785 ; 109  |        DisplayHint.I = 0;
                            19786 
P:002F 20001B         2   9919788         clr     b   
P:0030 77F400 FFFFF7  3  10219789         move    #-9,n7
P:0032 000000         2  10419790         nop
P:0033 5D6F00         4  10819791         move    b1,y:(r7+n7)
                            19792 
                            19793 ; 110  |        
                            19794 ; 111  |        SendEQ(g_iEqSetting,0,0);
                            19795 
P:0034 5EF000 rrrrrr  3  11119797         move    y:Fg_iEqSetting,a
P:0036 300000         2  11319798         move    #0,r0
P:0037 0BF080 rrrrrr  6  11919799         jsr     FSendEQ
                            19800 
                            19801 ; 112  |        
                            19802 ; 113  |        // Display all five EQ slider bars (do not invert)
                            19803 ; 114  |        for(a = (NUM_EQ_BANDS - 1); a >= 0; a--)   // testing against '0' is more efficient
                            19804 
P:0039 56F400 000004  3  12219806         move    #>4,a
                            19808 
                            19809 ; 115  |        {
                            19810 ; 116  |            DisplayEqBar(a,GEQ_NORMAL);
                            19811 
P:003B 77F400 FFFFFD  3  12519813 L102:   move    #-3,n7
P:003D 000000         2  12719814         nop
P:003E 5C6F00         4  13119815         move    a1,y:(r7+n7)
P:003F 20001B         2  13319820         clr     b   
P:0040 0BF080 rrrrrr  6  13919821         jsr     FDisplayEqBar
P:0042 77F400 FFFFFD  3  14219825         move    #-3,n7
P:0044 000000         2  14419826         nop
P:0045 5EEF00         4  14819827         move    y:(r7+n7),a
P:0046 57F400 000001  3  15119828         move    #>1,b
P:0048 200014         2  15319829         sub     b,a
P:0049 0AF0A1 rrrrrr  6  15919832         jge     L102
                            19833 
                            19834 ; 117  |        }
                            19835 ; 118  |        if(g_iEqSetting == EQ_CUSTOM)
                            19836 
P:004B 5FF000 rrrrrr  3  16219838         move    y:Fg_iEqSetting,b
P:004D 44F400 000005  3  16519839         move    #>5,x0
P:004F 20004D         2  16719840         cmp     x0,b
P:0050 0AF0A2 rrrrrr  6  17319841         jne     L103
                            19842 
                            19843 ; 119  |        {
                            19844 ; 120  |            // Display dB level for the selected EQ slider bar (invert). 
                            19845 ; 121  |            //warning: in sdk2.6 the following ln was removed so selected doesn't jump to 1st after mmc eject
                            19846 ; 122  |            iSelectedBand = EQ_BAND_FIRST;
                            19847 
P:0052 2D0000         2  17519849         move    #0,b1
P:0053 77F400 FFFFF9  3  17819852         move    #-7,n7
P:0055 000000         2  18019853         nop
P:0056 5D6F00         4  18419854         move    b1,y:(r7+n7)
P:0057 57F400 000001  3  18719857         move    #>1,b
P:0059 200013         2  18919858         clr     a   
                            19860 
                            19861 ; 123  |            DisplayEqBar(iSelectedBand,GEQ_INVERT);
                            19862 
P:005A 0BF080 rrrrrr  6  19519864         jsr     FDisplayEqBar
P:005C 57F400 000001  3  19819865         move    #>1,b
P:005E 200013         2  20019866         clr     a   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19867 
                            19868 ; 124  |            // Display bottom row info: dB level, center freq Hz (display labels)
                            19869 ; 125  |            DisplayEqStats(iSelectedBand,TRUE);
                            19870 
P:005F 0BF080 rrrrrr  6  20619872         jsr     FDisplayEqStats
                            19873 
                            19874 ; 126  |        }
                            19875 ; 127  |
                            19876 ; 128  |        while(!bDone) 
                            19877 
P:0061 0AF080 rrrrrr  6  21219879 L103:   jmp     L148
                            19880 
                            19881 ; 129  |        {
                            19882 ; 130  |                // Mask out all display hints that aren't aimed toward the EQ menu
                            19883 ; 131  |                DisplayHint.I &= (EQ_MENU_DISPLAY_ALL|(1<<DISPLAY_CLEAR_DISPLAY_BITPOS));
                            19884 
P:0063 77F400 FFFFF7  3  21519886 L104:   move    #-9,n7
P:0065 000000         2  21719887         nop
P:0066 5FEF00         4  22119888         move    y:(r7+n7),b
P:0067 44F400 707E01  3  22419889         move    #7372289,x0
P:0069 20004E         2  22619890         and     x0,b
P:006A 5D6F00         4  23019891         move    b1,y:(r7+n7)
                            19892 
                            19893 ; 132  |
                            19894 ; 133  |                // Wait until a Message or Button happens
                            19895 ; 134  |                iEvent = SysWaitOnEvent(EVENT_MESSAGE|EVENT_BUTTON,&gEventInfo.msg,DisplayHint.I ? 1 : -1);
                            19896 
P:006B 2B0000         2  23219898         move    #0,b2
P:006C 20000B         2  23419899         tst     b
P:006D 57F400 000001  3  23719900         move    #>1,b
P:006F 0AF0A2 rrrrrr  6  24319901         jne     L151
P:0071 57F400 FFFFFF  3  24619902         move    #>-1,b
P:0073 60F400 rrrrrr  3  24919903 L151:   move    #FgEventInfo,r0
P:0075 56F400 00000A  3  25219904         move    #>10,a
P:0077 0BF080 rrrrrr  6  25819905         jsr     SysWaitOnEvent
                            19907 
                            19908 ; 135  |
                            19909 ; 136  |                // Assume every message goes to the PSM
                            19910 ; 137  |                bSendToPlayerStateMachine = TRUE;
                            19911 
P:0079 47F400 000001  3  26119913         move    #>1,y1
                            19915 
                            19916 ; 138  |
                            19917 ; 139  |                // Handle the event:  EVENT_TIMER, EVENT_MESSAGE, or EVENT_BUTTON
                            19918 ; 140  |                switch(iEvent)
                            19919 
P:007B 77F400 FFFFFD  3  26419921         move    #-3,n7
P:007D 000000         2  26619922         nop
P:007E 5E6F00         4  27019923         move    a,y:(r7+n7)
P:007F 44F400 000002  3  27319924         move    #>2,x0
P:0081 44F445 000008  3  27619925         cmp     x0,a    #>8,x0
P:0083 0AF0AA rrrrrr  6  28219926         jeq     L106
P:0085 44F445 000004  3  28519927         cmp     x0,a    #>4,x0
P:0087 0AF0AA rrrrrr  6  29119928         jeq     L108
P:0089 200045         2  29319929         cmp     x0,a
P:008A 0AF0A2 rrrrrr  6  29919930         jne     L146
                            19931 
                            19932 ; 141  |                {
                            19933 ; 142  |                case EVENT_TIMER:
                            19934 ; 143  |        
                            19935 ; 144  |                        if(DisplayHint.I != 0)
                            19936 
P:008C 77F400 FFFFF7  3  30219938         move    #-9,n7
P:008E 000000         2  30419939         nop
P:008F 5FEF00         4  30819940         move    y:(r7+n7),b
P:0090 2B0000         2  31019941         move    #0,b2
P:0091 20000B         2  31219942         tst     b
P:0092 0AF0AA rrrrrr  6  31819943         jeq     L143
                            19944 
                            19945 ; 145  |                        {
                            19946 ; 146  |                                SysCallFunction(RSRC_DISPLAY_CODE_BANK,RefreshDisplay,DisplayHint.I,1,0);
                            19947 
P:0094 20E400         2  32019949         move    y1,x0
P:0095 340000         2  32219950         move    #0,r4
P:0096 56F400 000022  3  32519951         move    #>34,a
P:0098 60F400 rrrrrr  3  32819952         move    #FRefreshDisplay,r0
P:009A 21AF00         2  33019953         move    b1,b
P:009B 0BF080 rrrrrr  6  33619954         jsr     SysCallFunction
                            19956 
                            19957 ; 147  |                                DisplayHint.I = 0;
                            19958 
P:009D 20001B         2  33819960         clr     b   
P:009E 77F400 FFFFF7  3  34119961         move    #-9,n7
P:00A0 000000         2  34319962         nop
P:00A1 5D6F00         4  34719963         move    b1,y:(r7+n7)
                            19964 
                            19965 ; 148  |                        }
                            19966 ; 149  |                 // TOVERIFY2: This code is different from 2.600 in that it assumes that we will not support MMC and hence we do not need to fix
                            19967 ; 150  |                 // the MMC removal problem on eq menu.
                            19968 ; 151  |
                            19969 ; 152  |                 #if 0 // This segment is enabled in sdk2.600 and prevents an mmc bug but since we don't have mmc in sdk3.05 it is left off for now.
                            19970 ; 153  |                  for(a = (NUM_EQ_BANDS - 1); a >= 0; a--)   // testing against '0' is more efficient
                            19971 ; 154  |                  {
                            19972 ; 155  |                         DisplayEqBar(a,GEQ_NORMAL);
                            19973 ; 156  |                  }
                            19974 ; 157  |
                            19975 ; 158  |                  if(g_iEqSetting == EQ_CUSTOM)
                            19976 ; 159  |                  {
                            19977 ; 160  |                         DisplayEqBar(iSelectedBand,GEQ_INVERT);
                            19978 ; 161  |                         // Display bottom row info: dB level, center freq Hz (display labels)
                            19979 ; 162  |                         DisplayEqStats(iSelectedBand,TRUE);
                            19980 ; 163  |                  }
                            19981 ; 164  |                 #endif
                            19982 ; 165  |
                            19983 ; 166  |                        bSendToPlayerStateMachine = FALSE;
                            19984 
P:00A2 0AF080 rrrrrr  6  35319986         jmp     L143
                            19987 
                            19988 ; 167  |                        break;
                            19989 ; 168  |
                            19990 ; 169  |                case EVENT_MESSAGE:              // (SDK2.520)
                            19991 ; 170  |                        switch(gEventInfo.Message.wMsgCommand)
                            19992 
                            19994 L106:
P:00A4 5EF000 rrrrrr  3  35619996         move    y:FgEventInfo+1,a
P:00A6 57F400 060016  3  35919997         move    #393238,b
P:00A8 2A0000         2  36119998         move    #0,a2
P:00A9 200005         2  36319999         cmp     b,a
P:00AA 0AF0A2 rrrrrr  6  36920000         jne     L146
                            20001 
                            20002 ; 171  |                        {
                            20003 ; 172  |                                case MENU_MSG_ANIMATE:   // process expiration of Blink timer
                            20004 ; 173  |                                        bBlink ^= 1;         // toggle mode
                            20005 
P:00AC 77F400 FFFFFB  3  37220007         move    #-5,n7
P:00AE 000000         2  37420008         nop
P:00AF 59EF00         4  37820009         move    y:(r7+n7),b0
P:00B0 0BC940         4  38220010         bchg    #0,b0
P:00B1 212F00         2  38420013         move    b0,b
                            20016 
                            20017 ; 174  |                                        DisplayEqBar(iSelectedBand,bBlink);
                            20018 
P:00B2 77F400 FFFFF9  3  38720020         move    #-7,n7
P:00B4 000000         2  38920021         nop
P:00B5 5EEF00         4  39320022         move    y:(r7+n7),a
P:00B6 77F400 FFFFFB  3  39620025         move    #-5,n7
P:00B8 000000         2  39820026         nop
P:00B9 5F6F00         4  40220027         move    b,y:(r7+n7)
P:00BA 0BF080 rrrrrr  6  40820032         jsr     FDisplayEqBar
                            20038 
                            20039 ; 175  |                                        bSendToPlayerStateMachine = FALSE;
                            20040 
P:00BC 0AF080 rrrrrr  6  41420042         jmp     L143
                            20043 
                            20044 ; 176  |                                        break;
                            20045 ; 177  |                  #if 0 // handle mmc eject like sdk2.6. Segment not enabled currently since we don't support MMC in sdk3.05
                            20046 ; 178  |                  case MENU_MSG_MEDIA_CHANGED: 
                            20047 ; 179  |                            DisplayHint.bits.Disk ^= TRUE;      //Toggle icon screen display
                            20048 ; 180  |                      break;
                            20049 ; 181  |                  #endif
                            20050 ; 182  |                        }
                            20051 ; 183  |                        break;    // pass all other EVENT_MESSAGEs to PSM
                            20052 ; 184  |
                            20053 ; 185  |                case EVENT_BUTTON:
                            20054 
                            20056 L108:
P:00BE 77F400 FFFFFE  3  41720058         move    #-2,n7
P:00C0 000000         2  41920059         nop
P:00C1 4F6F00         4  42320060         move    y1,y:(r7+n7)
                            20063 
                            20064 ; 186  |                        // A button was pressed, so restart timers if enabled
                            20065 ; 187  |                        UpdateAutoShutdownTimer();
                            20066 
P:00C2 0BF080 rrrrrr  6  42920068         jsr     FUpdateAutoShutdownTimer
P:00C4 46F400 000001  3  43220069         move    #>1,y0
P:00C6 77F400 FFFFFE  3  43520070         move    #-2,n7
P:00C8 000000         2  43720071         nop
P:00C9 4FEF00         4  44120072         move    y:(r7+n7),y1
                            20075 
                            20076 ; 188  |#ifdef BACKLIGHT
                            20077 ; 189  |                        // Turn ON the Backlight when any button is pressed
                            20078 ; 190  |                        if(g_iBackLightState == BACKLIGHT_ON)
                            20079 
P:00CA 5EF000 rrrrrr  3  44420081         move    y:Fg_iBackLightState,a
P:00CC 200055         2  44620082         cmp     y0,a
P:00CD 0AF0A2 rrrrrr  6  45220083         jne     L109
                            20086 
                            20087 ; 191  |                        {
                            20088 ; 192  |                SysPostMessage(2,LCD_BACKLIGHT_ON);
                            20089 
P:00CF 46F400 030010  3  45520091         move    #196624,y0
P:00D1 4E5F00         2  45720092         move    y0,y:(r7)+
P:00D2 290200         2  45920094         move    #2,b0
P:00D3 595F00         2  46120095         move    b0,y:(r7)+
P:00D4 0BF080 rrrrrr  6  46720097         jsr     FSysPostMessage
P:00D6 205700         2  46920098         move    (r7)-
P:00D7 205700         2  47120100         move    (r7)-
                            20102 
                            20103 ; 193  |                    SysPostMessage(6,SOFT_TIMER_SET_TIMER,TIMER_BACKLIGHT,1,BACKLIGHT_TIME,MENU_MSG_TURN_OFF_BACKLIGHT);
                            20104 
P:00D8 280100         2  47320106         move    #1,a0
P:00D9 2C0500         2  47520107         move    #5,a1
P:00DA 51F400 06001A  3  47820108         move    #393242,b0
P:00DC 595F00         2  48020109         move    b0,y:(r7)+
P:00DD 55F400 001388  3  48320111         move    #5000,b1
P:00DF 5D5F00         2  48520112         move    b1,y:(r7)+
P:00E0 585F00         2  48720114         move    a0,y:(r7)+
P:00E1 5C5F00         2  48920116         move    a1,y:(r7)+
P:00E2 57F400 090001  3  49220118         move    #589825,b
P:00E4 5F5F00         2  49420119         move    b,y:(r7)+
P:00E5 290600         2  49620121         move    #6,b0
P:00E6 595F00         2  49820122         move    b0,y:(r7)+
P:00E7 0BF080 rrrrrr  6  50420124         jsr     FSysPostMessage
P:00E9 3F0600         2  50620125         move    #6,n7
P:00EA 000000         2  50820126         nop
P:00EB 204700         2  51020127         move    (r7)-n7
                            20129 
                            20130 ; 194  |                    SysWaitOnEvent(0,0,0);
                            20131 
P:00EC 300000         2  51220133         move    #0,r0
P:00ED 200013         2  51420134         clr     a   
P:00EE 20001B         2  51620135         clr     b   
P:00EF 0BF080 rrrrrr  6  52220136         jsr     SysWaitOnEvent
P:00F1 77F400 FFFFFE  3  52520137         move    #-2,n7
P:00F3 000000         2  52720138         nop
P:00F4 4FEF00         4  53120139         move    y:(r7+n7),y1
                            20142 
                            20143 ; 195  |                        } 
                            20144 ; 196  |#endif
                            20145 ; 197  |                        switch(gEventInfo.Button.wButtonEvent)
                            20146 
P:00F5 5FF000 rrrrrr  3  53420148 L109:   move    y:FgEventInfo,b
P:00F7 66F400 rrrrrr  3  53720149         move    #L152,r6
P:00F9 2B0000         2  53920150         move    #0,b2
P:00FA 56F400 000024  3  54220151         move    #>36,a
P:00FC 21FE0D         2  54420152         cmp     a,b     b,n6
P:00FD 0AF0A7 rrrrrr  6  55020153         jgt     L146
P:00FF 07EE96         8  55820154         movem   p:(r6+n6),r6
P:0100 000000         2  56020155         nop
P:0101 0AE680         4  56420156         jmp     (r6)
                            20157 
P:0102 rrrrrr               20158 L152:   dc      L118    ; case 0:
P:0103 rrrrrr               20159         dc      L118    ; case 1:
P:0104 rrrrrr               20160         dc      L115    ; case 2:
P:0105 rrrrrr               20161         dc      L115    ; case 3:
P:0106 rrrrrr               20162         dc      L128    ; case 4:
P:0107 rrrrrr               20163         dc      L127    ; case 5:
P:0108 rrrrrr               20164         dc      L146    ; default:
P:0109 rrrrrr               20165         dc      L146    ; default:
P:010A rrrrrr               20166         dc      L146    ; default:
P:010B rrrrrr               20167         dc      L146    ; default:
P:010C rrrrrr               20168         dc      L146    ; default:
P:010D rrrrrr               20169         dc      L146    ; default:
P:010E rrrrrr               20170         dc      L146    ; default:
P:010F rrrrrr               20171         dc      L146    ; default:
P:0110 rrrrrr               20172         dc      L146    ; default:
P:0111 rrrrrr               20173         dc      L146    ; default:
P:0112 rrrrrr               20174         dc      L146    ; default:
P:0113 rrrrrr               20175         dc      L146    ; default:
P:0114 rrrrrr               20176         dc      L146    ; default:
P:0115 rrrrrr               20177         dc      L146    ; default:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0116 rrrrrr               20178         dc      L146    ; default:
P:0117 rrrrrr               20179         dc      L146    ; default:
P:0118 rrrrrr               20180         dc      L146    ; default:
P:0119 rrrrrr               20181         dc      L146    ; default:
P:011A rrrrrr               20182         dc      L146    ; default:
P:011B rrrrrr               20183         dc      L143    ; case 25:
P:011C rrrrrr               20184         dc      L132    ; case 26:
P:011D rrrrrr               20185         dc      L146    ; default:
P:011E rrrrrr               20186         dc      L146    ; default:
P:011F rrrrrr               20187         dc      L146    ; default:
P:0120 rrrrrr               20188         dc      L146    ; default:
P:0121 rrrrrr               20189         dc      L146    ; default:
P:0122 rrrrrr               20190         dc      L146    ; default:
P:0123 rrrrrr               20191         dc      L146    ; default:
P:0124 rrrrrr               20192         dc      L146    ; default:
P:0125 rrrrrr               20193         dc      L146    ; default:
P:0126 rrrrrr               20194         dc      L110    ; case 36:
                            20195 
                            20196 
                            20197 ; 198  |                        {
                            20198 ; 199  |                                case PR_EQ:      // (SDK2.520)
                            20199 
P:0127 300000         2  56620201 L110:   move    #0,r0
                            20202 
                            20203 ; 200  |                                        // Allow the user to change the selected EQ (Rock, Pop, Custom, etc.)
                            20204 ; 201  |                                        DisplayHint.bits.EQ = TRUE;
                            20205 
P:0128 77F400 FFFFF7  3  56920207         move    #-9,n7
P:012A 000000         2  57120208         nop
P:012B 0A6F6D         6  57720209         bset    #13,y:(r7+n7)
                            20210 
                            20211 ; 202  |
                            20212 ; 203  |                                        // Make sure TIMER_ANIMATE is not running
                            20213 ; 204  |                                        if(bBandGainModify_mode)
                            20214 
P:012C 77F400 FFFFFA  3  58020216         move    #-6,n7
P:012E 000000         2  58220217         nop
P:012F 5FEF00         4  58620218         move    y:(r7+n7),b
P:0130 20000B         2  58820219         tst     b
P:0131 0AF0AA rrrrrr  6  59420220         jeq     L111
                            20221 
                            20222 ; 205  |                                        {
                            20223 ; 206  |                                                bBandGainModify_mode = FALSE;
                            20224 
P:0133 20001B         2  59620226         clr     b   
P:0134 5F6F00         4  60020229         move    b,y:(r7+n7)
                            20232 
                            20233 ; 207  |                                                SysPostMessage(3,SOFT_TIMER_KILL_TIMER,TIMER_ANIMATE);
                            20234 
P:0135 5D5F00         2  60220236         move    b1,y:(r7)+
P:0136 46F400 090002  3  60520238         move    #589826,y0
P:0138 4E5F00         2  60720239         move    y0,y:(r7)+
P:0139 290300         2  60920241         move    #3,b0
P:013A 595F00         2  61120242         move    b0,y:(r7)+
P:013B 0BF080 rrrrrr  6  61720244         jsr     FSysPostMessage
P:013D 3F0300         2  61920245         move    #3,n7
P:013E 000000         2  62120246         nop
P:013F 204700         2  62320247         move    (r7)-n7
P:0140 300000         2  62520250         move    #0,r0
                            20251 
                            20252 ; 208  |//                                              SysWaitOnEvent(0,0,0);   // let system process its timer msg
                            20253 ; 209  |                                                // ^--not needed here since called in following DisplayEqBar()
                            20254 ; 210  |                                        }
                            20255 
P:0141 56F400 000001  3  62820257 L111:   move    #>1,a
P:0143 20001B         2  63020258         clr     b   
                            20259 
                            20260 ; 211  |
                            20261 ; 212  |                                        NextEQ(INCREMENT,0,0);       // select the next EQ
                            20262 
P:0144 0BF080 rrrrrr  6  63620264         jsr     FNextEQ
                            20265 
                            20266 ; 213  |                                        for(a = (NUM_EQ_BANDS - 1); a >= 0; a--)
                            20267 
P:0146 56F400 000004  3  63920269         move    #>4,a
                            20271 
                            20272 ; 214  |                                        {
                            20273 ; 215  |                                                // Display all five EQ slider bars (do not invert)
                            20274 ; 216  |                                                DisplayEqBar(a,GEQ_NORMAL);
                            20275 
P:0148 045FA0         2  64120277 L112:   movec   m0,n7
P:0149 000000         2  64320278         nop
P:014A 5C6F00         4  64720279         move    a1,y:(r7+n7)
P:014B 20001B         2  64920284         clr     b   
P:014C 0BF080 rrrrrr  6  65520285         jsr     FDisplayEqBar
P:014E 045FA0         2  65720289         movec   m0,n7
P:014F 000000         2  65920290         nop
P:0150 5EEF00         4  66320291         move    y:(r7+n7),a
P:0151 44F400 000001  3  66620292         move    #>1,x0
P:0153 200044         2  66820293         sub     x0,a
P:0154 0AF0A1 rrrrrr  6  67420296         jge     L112
                            20297 
                            20298 ; 217  |                                        }
                            20299 ; 218  |
                            20300 ; 219  |                                        if(g_iEqSetting == EQ_CUSTOM)
                            20301 
P:0156 5FF000 rrrrrr  3  67720303         move    y:Fg_iEqSetting,b
P:0158 46F400 000005  3  68020304         move    #>5,y0
P:015A 20005D         2  68220305         cmp     y0,b
P:015B 0AF0A2 rrrrrr  6  68820306         jne     L113
                            20307 
                            20308 ; 220  |                                        {       // Prepare the display for user-definable EQ band gain mode
                            20309 ; 221  |                                                // Display dB level for the first EQ slider bar (invert)
                            20310 ; 222  |                                                iSelectedBand = EQ_BAND_FIRST;
                            20311 
P:015D 280000         2  69020313         move    #0,a0
P:015E 77F400 FFFFF9  3  69320316         move    #-7,n7
P:0160 000000         2  69520317         nop
P:0161 586F00         4  69920318         move    a0,y:(r7+n7)
P:0162 200049         2  70120321         tfr     x0,b
P:0163 200013         2  70320322         clr     a   
                            20324 
                            20325 ; 223  |                                                DisplayEqBar(iSelectedBand,GEQ_INVERT);
                            20326 
P:0164 0BF080 rrrrrr  6  70920328         jsr     FDisplayEqBar
P:0166 57F400 000001  3  71220329         move    #>1,b
P:0168 200013         2  71420330         clr     a   
                            20331 
                            20332 ; 224  |                                                // Display bottom row info: dB level, center freq Hz (display labels)
                            20333 ; 225  |                                                DisplayEqStats(iSelectedBand,TRUE);
                            20334 
P:0169 0BF080 rrrrrr  6  72020336         jsr     FDisplayEqStats
                            20337 
                            20338 ; 226  |                                        }
                            20339 
P:016B 0AF080 rrrrrr  6  72620341         jmp     L143
                            20342 
                            20343 ; 227  |                                        else
                            20344 ; 228  |                                        {       // Clear the entire bottom row
                            20345 ; 229  |                                                SysPostMessage(6,LCD_CLEAR_RANGE,0,56,LCD_SIZE_X,8);
                            20346 
P:016D 200013         2  72820348 L113:   clr     a   
P:016E 290800         2  73020349         move    #8,b0
P:016F 595F00         2  73220350         move    b0,y:(r7)+
P:0170 298000         2  73420352         move    #$80,b0
P:0171 595F00         2  73620353         move    b0,y:(r7)+
P:0172 293800         2  73820355         move    #$38,b0
P:0173 595F00         2  74020356         move    b0,y:(r7)+
P:0174 5C5F00         2  74220358         move    a1,y:(r7)+
P:0175 260300         2  74420360         move    #<3,y0
P:0176 4E5F00         2  74620361         move    y0,y:(r7)+
P:0177 290600         2  74820363         move    #6,b0
P:0178 595F00         2  75020364         move    b0,y:(r7)+
P:0179 0BF080 rrrrrr  6  75620366         jsr     FSysPostMessage
P:017B 3F0600         2  75820367         move    #6,n7
P:017C 000000         2  76020368         nop
P:017D 204700         2  76220369         move    (r7)-n7
                            20371 
                            20372 ; 230  |                                                SysWaitOnEvent(0,0,0);    // let system process its display msg
                            20373 
P:017E 300000         2  76420375         move    #0,r0
P:017F 200013         2  76620376         clr     a   
P:0180 20001B         2  76820377         clr     b   
P:0181 0BF080 rrrrrr  6  77420378         jsr     SysWaitOnEvent
                            20379 
                            20380 ; 231  |                                        }
                            20381 ; 232  |                                        bSendToPlayerStateMachine = FALSE;              
                            20382 
P:0183 0AF080 rrrrrr  6  78020384         jmp     L143
                            20385 
                            20386 ; 233  |                                        break;
                            20387 ; 234  |
                            20388 ; 235  |//                              case PH_VOL_UP:       // instead, let PSM adjust the volume
                            20389 ; 236  |//                              case PH_VOL_DOWN:
                            20390 ; 237  |//                                      break;
                            20391 ; 238  |
                            20392 ; 239  |                                case PR_FF:
                            20393 ; 240  |                                case PH_FF:
                            20394 ; 241  |                                        // If EQ mode is not Custom, then ignore requests to change dB gain levels!
                            20395 ; 242  |                                        if(g_iEqSetting == EQ_CUSTOM)
                            20396 
P:0185 5EF000 rrrrrr  3  78320398 L115:   move    y:Fg_iEqSetting,a
P:0187 57F400 000005  3  78620399         move    #>5,b
P:0189 200005         2  78820400         cmp     b,a
P:018A 0AF0A2 rrrrrr  6  79420401         jne     L143
                            20402 
                            20403 ; 243  |                                        {       // Depending on the EQ sub-mode, either increm dB gain level or select next EqBand!
                            20404 ; 244  |                                                if(bBandGainModify_mode)
                            20405 
P:018C 77F400 FFFFFA  3  79720407         move    #-6,n7
P:018E 000000         2  79920408         nop
P:018F 5FEF00         4  80320409         move    y:(r7+n7),b
P:0190 20000B         2  80520410         tst     b
P:0191 0AF0AA rrrrrr  6  81120411         jeq     L116
                            20412 
                            20413 ; 245  |                                                {
                            20414 ; 246  |//                                                      DisplayEqBar(iSelectedBand,GEQ_NORMAL);  // redraw the old level
                            20415 ; 247  |                                                        g_iCustomEqBand_gain[iSelectedBand]++;
                            20416 
P:0193 77F400 FFFFF9  3  81420418         move    #-7,n7
P:0195 000000         2  81620419         nop
P:0196 4DEF00         4  82020420         move    y:(r7+n7),x1
P:0197 20BE00         2  82220421         move    x1,n6
P:0198 66F400 rrrrrr  3  82520424         move    #Fg_iCustomEqBand_gain,r6
P:019A 000000         2  82720425         nop
P:019B 204E00         2  82920426         move    (r6)+n6
P:019C 5EE600         2  83120427         move    y:(r6),a
P:019D 44F400 000001  3  83420428         move    #>1,x0
P:019F 200040         2  83620429         add     x0,a
P:01A0 5C6600         2  83820430         move    a1,y:(r6)
                            20431 
                            20432 ; 248  |                                                        if(g_iCustomEqBand_gain[iSelectedBand] > EQ_MAX_GAIN) {
                            20433 
P:01A1 46F400 00001C  3  84120435         move    #>28,y0
P:01A3 200055         2  84320436         cmp     y0,a
P:01A4 0AF0AF rrrrrr  6  84920437         jle     L121
                            20438 
                            20439 ; 249  |                                                                g_iCustomEqBand_gain[iSelectedBand] = EQ_MAX_GAIN;
                            20440 
P:01A6 291C00         2  85120442         move    #28,b0
P:01A7 596600         2  85320443         move    b0,y:(r6)
                            20444 
                            20445 ; 250  |                                                        }
                            20446 ; 251  |                                                        SendEQ(EQ_CUSTOM,0,0);        // update EQ module in real time
                            20447 
P:01A8 0AF080 rrrrrr  6  85920449         jmp     L121
                            20450 
                            20451 ; 252  |                                                }
                            20452 ; 253  |                                                else
                            20453 ; 254  |                                                {
                            20454 ; 255  |                                                        DisplayEqBar(iSelectedBand,GEQ_NORMAL);  // redraw the old band
                            20455 
                            20457 L116:
P:01AA 77F400 FFFFF9  3  86220460         move    #-7,n7
P:01AC 000000         2  86420461         nop
P:01AD 5EEF00         4  86820462         move    y:(r7+n7),a
P:01AE 20001B         2  87020465         clr     b   
P:01AF 0BF080 rrrrrr  6  87620466         jsr     FDisplayEqBar
                            20469 
                            20470 ; 256  |                                                        iSelectedBand++;
                            20471 
P:01B1 77F400 FFFFF9  3  87920473         move    #-7,n7
P:01B3 000000         2  88120474         nop
P:01B4 5EEF00         4  88520475         move    y:(r7+n7),a
P:01B5 46F400 000001  3  88820476         move    #>1,y0
P:01B7 200050         2  89020477         add     y0,a
                            20480 
                            20481 ; 257  |                                                        if(iSelectedBand > EQ_BAND_LAST) {
                            20482 
P:01B8 57F400 000004  3  89320484         move    #>4,b
P:01BA 200005         2  89520485         cmp     b,a
P:01BB 0AF0AF rrrrrr  6  90120486         jle     L126
                            20487 
                            20488 ; 258  |                                                                iSelectedBand = EQ_BAND_FIRST;
                            20489 
P:01BD 200013         2  90320491         clr     a   
                            20492 
                            20493 ; 259  |                                                        }
                            20494 ; 260  |                                                }
                            20495 ; 261  |                                                DisplayEqBar(iSelectedBand,GEQ_INVERT);      // draw the new level/band
                            20496 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
P:01BE 0AF080 rrrrrr  6  90920498         jmp     L126
                            20499 
                            20500 ; 262  |
                            20501 ; 263  |                                                // Display bottom row info: dB level, center freq Hz
                            20502 ; 264  |                                                DisplayEqStats(iSelectedBand,FALSE);   // assume labels have already been displayed
                            20503 ; 265  |                                        }
                            20504 ; 266  |                                        bSendToPlayerStateMachine = FALSE;         // no need to send to PSM
                            20505 ; 267  |                                        break;
                            20506 ; 268  |
                            20507 ; 269  |                                case PR_RW:
                            20508 ; 270  |                                case PH_RW:
                            20509 ; 271  |                                        // If sub-mode is not Custom, then ignore requests to change dB gain levels!
                            20510 ; 272  |                                        if(g_iEqSetting == EQ_CUSTOM)
                            20511 
                            20513 L118:
P:01C0 5FF000 rrrrrr  3  91220516         move    y:Fg_iEqSetting,b
P:01C2 44F400 000005  3  91520517         move    #>5,x0
P:01C4 20004D         2  91720518         cmp     x0,b
P:01C5 0AF0A2 rrrrrr  6  92320519         jne     L143
                            20520 
                            20521 ; 273  |                                        {       // Depending on the EQ sub-mode, either decrem dB gain level or select previous EqBand!
                            20522 ; 274  |                                                if(bBandGainModify_mode)
                            20523 
P:01C7 77F400 FFFFFA  3  92620525         move    #-6,n7
P:01C9 000000         2  92820526         nop
P:01CA 5EEF00         4  93220527         move    y:(r7+n7),a
P:01CB 200003         2  93420528         tst     a
P:01CC 0AF0AA rrrrrr  6  94020529         jeq     L122
                            20530 
                            20531 ; 275  |                                                {
                            20532 ; 276  |//                                                      DisplayEqBar(iSelectedBand,GEQ_NORMAL);  // redraw the old level
                            20533 ; 277  |                                                        g_iCustomEqBand_gain[iSelectedBand]--;
                            20534 
P:01CE 77F400 FFFFF9  3  94320536         move    #-7,n7
P:01D0 000000         2  94520537         nop
P:01D1 4DEF00         4  94920538         move    y:(r7+n7),x1
P:01D2 20BE00         2  95120539         move    x1,n6
P:01D3 66F400 rrrrrr  3  95420542         move    #Fg_iCustomEqBand_gain,r6
P:01D5 000000         2  95620543         nop
P:01D6 204E00         2  95820544         move    (r6)+n6
P:01D7 5FE600         2  96020545         move    y:(r6),b
P:01D8 44F400 000001  3  96320546         move    #>1,x0
P:01DA 20004C         2  96520547         sub     x0,b
P:01DB 5D6600         2  96720548         move    b1,y:(r6)
                            20549 
                            20550 ; 278  |                                                        if(g_iCustomEqBand_gain[iSelectedBand] < EQ_MIN_GAIN) {
                            20551 
P:01DC 47F400 FFFFE4  3  97020553         move    #>-28,y1
P:01DE 20007D         2  97220554         cmp     y1,b
P:01DF 0AF0A1 rrrrrr  6  97820555         jge     L121
                            20556 
                            20557 ; 279  |                                                                g_iCustomEqBand_gain[iSelectedBand] = EQ_MIN_GAIN;
                            20558 
P:01E1 200079         2  98020560         tfr     y1,b
P:01E2 5F6600         2  98220561         move    b,y:(r6)
                            20562 
                            20563 ; 280  |                                                        }                                       
                            20564 
P:01E3 77F400 FFFFF9  3  98520566 L121:   move    #-7,n7
P:01E5 000000         2  98720567         nop
P:01E6 4D6F00         4  99120568         move    x1,y:(r7+n7)
P:01E7 20001B         2  99320571         clr     b   
P:01E8 300000         2  99520572         move    #0,r0
P:01E9 56F400 000005  3  99820573         move    #>5,a
                            20574 
                            20575 ; 281  |                                                        SendEQ(EQ_CUSTOM,0,0);        // update EQ module in real time
                            20576 
P:01EB 0BF080 rrrrrr  6 100420578         jsr     FSendEQ
P:01ED 77F400 FFFFF9  3 100720579         move    #-7,n7
P:01EF 000000         2 100920580         nop
P:01F0 5EEF00         4 101320581         move    y:(r7+n7),a
P:01F1 46F400 000001  3 101620584         move    #>1,y0
                            20585 
                            20586 ; 282  |                                                }
                            20587 
P:01F3 0AF080 rrrrrr  6 102220589         jmp     L126
                            20590 
                            20591 ; 283  |                                                else
                            20592 ; 284  |                                                {
                            20593 ; 285  |                                                        DisplayEqBar(iSelectedBand,GEQ_NORMAL);  // redraw the old band
                            20594 
                            20596 L122:
P:01F5 77F400 FFFFF9  3 102520599         move    #-7,n7
P:01F7 000000         2 102720600         nop
P:01F8 5EEF00         4 103120601         move    y:(r7+n7),a
P:01F9 20001B         2 103320604         clr     b   
P:01FA 0BF080 rrrrrr  6 103920605         jsr     FDisplayEqBar
                            20608 
                            20609 ; 286  |                                                        iSelectedBand--;
                            20610 
P:01FC 77F400 FFFFF9  3 104220612         move    #-7,n7
P:01FE 000000         2 104420613         nop
P:01FF 5EEF00         4 104820614         move    y:(r7+n7),a
P:0200 46F400 000001  3 105120615         move    #>1,y0
P:0202 200054         2 105320616         sub     y0,a
                            20619 
                            20620 ; 287  |                                                        if(iSelectedBand < EQ_BAND_FIRST){
                            20621 
P:0203 0AF0A1 rrrrrr  6 105920623         jge     L126
                            20624 
                            20625 ; 288  |                                                                iSelectedBand = EQ_BAND_LAST;
                            20626 
P:0205 56F400 000004  3 106220628         move    #>4,a
                            20629 
                            20630 ; 289  |                                                        }
                            20631 ; 290  |                                                }
                            20632 ; 291  |                                                DisplayEqBar(iSelectedBand,GEQ_INVERT);      // draw the new level/band
                            20633 
P:0207 77F400 FFFFF9  3 106520635 L126:   move    #-7,n7
P:0209 000000         2 106720636         nop
P:020A 5C6F00         4 107120637         move    a1,y:(r7+n7)
P:020B 57F400 000001  3 107420642         move    #>1,b
P:020D 0BF080 rrrrrr  6 108020643         jsr     FDisplayEqBar
                            20646 
                            20647 ; 292  |
                            20648 ; 293  |                                                // Display bottom row info: dB level, center freq Hz
                            20649 ; 294  |                                                DisplayEqStats(iSelectedBand,FALSE);   // assume labels have already been displayed
                            20650 
P:020F 0AF080 rrrrrr  6 108620652         jmp     L131
                            20653 
                            20654 ; 295  |                                        }
                            20655 ; 296  |                                        bSendToPlayerStateMachine = FALSE;         // no need to send to PSM
                            20656 ; 297  |                                        break;
                            20657 ; 298  |
                            20658 ; 299  |                                case PH_MENU:
                            20659 ; 300  |                                        // Allow user to escape to Music mode
                            20660 ; 301  |                                        // Set flag so PR_MENU in Music mode will ignore
                            20661 ; 302  |                                        g_MenuFlags.MENU_FLAG_ESCAPE_TO_MUSIC = TRUE;
                            20662 
P:0211 0A7061 rrrrrr  6 109220664 L127:   bset    #1,y:Fg_MenuFlags
                            20665 
                            20666 ; 303  |                                        bDone = TRUE;
                            20667 
P:0213 0AF080 rrrrrr  6 109820669         jmp     L134
                            20670 
                            20671 ; 304  |                                        bSendToPlayerStateMachine = FALSE;
                            20672 ; 305  |                                        break;
                            20673 ; 306  |
                            20674 ; 307  |                                case PR_MENU:
                            20675 ; 308  |                                        if(g_iEqSetting == EQ_CUSTOM)      // (SDK2.520)
                            20676 
P:0215 5FF000 rrrrrr  3 110120678 L128:   move    y:Fg_iEqSetting,b
P:0217 46F400 000005  3 110420679         move    #>5,y0
P:0219 20005D         2 110620680         cmp     y0,b
P:021A 0AF0A2 rrrrrr  6 111220681         jne     L134
                            20682 
                            20683 ; 309  |                                        {
                            20684 ; 310  |                                                // Toggle the Band-gain-modify mode
                            20685 ; 311  |                                                DisplayEqBar(iSelectedBand,GEQ_INVERT);
                            20686 
P:021C 77F400 FFFFF9  3 111520688         move    #-7,n7
P:021E 000000         2 111720689         nop
P:021F 5EEF00         4 112120690         move    y:(r7+n7),a
P:0220 57F400 000001  3 112420693         move    #>1,b
P:0222 0BF080 rrrrrr  6 113020694         jsr     FDisplayEqBar
                            20697 
                            20698 ; 312  |                                                if(bBandGainModify_mode)
                            20699 
P:0224 77F400 FFFFFA  3 113320701         move    #-6,n7
P:0226 000000         2 113520702         nop
P:0227 5FEF00         4 113920703         move    y:(r7+n7),b
P:0228 20000B         2 114120704         tst     b
P:0229 0AF0AA rrrrrr  6 114720707         jeq     L129
                            20708 
                            20709 ; 313  |                                                {       // Visually indicate the normal Band-select mode, invert the slider bar
                            20710 ; 314  |                                                        bBandGainModify_mode = FALSE;   // stop blinking  (ignore bBlink)
                            20711 
P:022B 2C0000         2 114920713         move    #0,a1
P:022C 5C6F00         4 115320716         move    a1,y:(r7+n7)
                            20719 
                            20720 ; 315  |                                                        SysPostMessage(3,SOFT_TIMER_KILL_TIMER,TIMER_ANIMATE);
                            20721 
P:022D 20001B         2 115520723         clr     b   
P:022E 5D5F00         2 115720724         move    b1,y:(r7)+
P:022F 46F400 090002  3 116020726         move    #589826,y0
P:0231 4E5F00         2 116220727         move    y0,y:(r7)+
P:0232 290300         2 116420729         move    #3,b0
P:0233 595F00         2 116620730         move    b0,y:(r7)+
P:0234 0BF080 rrrrrr  6 117220732         jsr     FSysPostMessage
P:0236 3F0300         2 117420733         move    #3,n7
                            20734 
                            20735 ; 316  |                                                }
                            20736 
P:0237 0AF080 rrrrrr  6 118020738         jmp     L130
                            20739 
                            20740 ; 317  |                                                else
                            20741 ; 318  |                                                {       // Visually indicate the Band-gain-modify mode, "blink" the slider bar!
                            20742 ; 319  |                                                        bBandGainModify_mode = TRUE;    // start blinking  (toggle bBlink)
                            20743 
P:0239 56F400 000001  3 118320745 L129:   move    #>1,a
P:023B 5E6F00         4 118720748         move    a,y:(r7+n7)
                            20751 
                            20752 ; 320  |                                                        bBlink = TRUE;
                            20753 
P:023C 21C600         2 118920755         move    a,y0
P:023D 77F400 FFFFFB  3 119220758         move    #-5,n7
P:023F 000000         2 119420759         nop
P:0240 4E6F00         4 119820760         move    y0,y:(r7+n7)
                            20763 
                            20764 ; 321  |                                                        SysPostMessage(6,SOFT_TIMER_SET_TIMER,TIMER_ANIMATE,0,500,MENU_MSG_ANIMATE);
                            20765 
P:0241 200013         2 120020767         clr     a   
P:0242 20001B         2 120220768         clr     b   
P:0243 44F400 060016  3 120520769         move    #393238,x0
P:0245 4C5F00         2 120720770         move    x0,y:(r7)+
P:0246 45F400 0001F4  3 121020772         move    #500,x1
P:0248 4D5F00         2 121220773         move    x1,y:(r7)+
P:0249 5D5F00         2 121420775         move    b1,y:(r7)+
P:024A 5C5F00         2 121620777         move    a1,y:(r7)+
P:024B 51F400 090001  3 121920779         move    #589825,b0
P:024D 595F00         2 122120780         move    b0,y:(r7)+
P:024E 290600         2 122320782         move    #6,b0
P:024F 595F00         2 122520783         move    b0,y:(r7)+
P:0250 0BF080 rrrrrr  6 123120785         jsr     FSysPostMessage
P:0252 3F0600         2 123320786         move    #6,n7
                            20787 
                            20788 ; 322  |                                                }
                            20789 
                            20791 L130:
P:0253 000000         2 123520793         nop
P:0254 204700         2 123720794         move    (r7)-n7
                            20796 
                            20797 ; 323  |                                                SysWaitOnEvent(0,0,0);    // let system process SOFT_TIMER_xxx_TIMER msg (KILL or SET)
                            20798 
P:0255 300000         2 123920800         move    #0,r0
P:0256 200013         2 124120801         clr     a   
P:0257 20001B         2 124320802         clr     b   
P:0258 0BF080 rrrrrr  6 124920803         jsr     SysWaitOnEvent
                            20804 
                            20805 ; 324  |
                            20806 ; 325  |                                                // Display bottom row info: dB level, center freq Hz
                            20807 ; 326  |                                                DisplayEqStats(iSelectedBand,FALSE);   // assume labels have already been displayed
                            20808 
P:025A 77F400 FFFFF9  3 125220810 L131:   move    #-7,n7
P:025C 000000         2 125420811         nop
P:025D 5EEF00         4 125820812         move    y:(r7+n7),a
P:025E 20001B         2 126020815         clr     b   
P:025F 0BF080 rrrrrr  6 126620816         jsr     FDisplayEqStats
                            20819 
                            20820 ; 327  |                                        }
                            20821 ; 328  |                                        else
                            20822 ; 329  |                                        {
                            20823 ; 330  |                                                bDone = TRUE;    // exit EqMenu()
                            20824 ; 331  |                                        }
                            20825 ; 332  |                                        bSendToPlayerStateMachine = FALSE;
                            20826 ; 333  |                                        break;
                            20827 ; 334  |
                            20828 ; 335  |                                case PR_STOP:
                            20829 ; 336  |                                        bSendToPlayerStateMachine = FALSE;
                            20830 
P:0261 0AF080 rrrrrr  6 127220832         jmp     L143
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20833 
                            20834 ; 337  |                                    break;
                            20835 ; 338  |
                            20836 ; 339  |                                case PH_STOP:
                            20837 ; 340  |                                        // If the STOP button is held down, let's call the Shutdown menu
                            20838 ; 341  |                                        SysCallFunction(RSRC_MAIN_MENU_CODE_BANK,ShutdownMenu,USERSHUTDOWN,0,0);
                            20839 
P:0263 20001B         2 127420841 L132:   clr     b   
P:0264 240000         2 127620842         move    #0,x0
P:0265 340000         2 127820843         move    #0,r4
P:0266 56F400 000078  3 128120844         move    #>$78,a
P:0268 60F400 rrrrrr  3 128420845         move    #FShutdownMenu,r0
P:026A 0BF080 rrrrrr  6 129020846         jsr     SysCallFunction
                            20847 
                            20848 ; 342  |                                        // If user chooses to return then update display.  If doesn't return, player was powered down.
                            20849 ; 343  |                                        DisplayHint.I |= (EQ_MENU_DISPLAY_ALL|(1<<DISPLAY_CLEAR_DISPLAY_BITPOS));
                            20850 
P:026C 77F400 FFFFF7  3 129320852         move    #-9,n7
P:026E 000000         2 129520853         nop
P:026F 5DEF00         4 129920854         move    y:(r7+n7),b1
P:0270 46F400 707E01  3 130220855         move    #7372289,y0
P:0272 20005A         2 130420856         or      y0,b
P:0273 5D6F00         4 130820857         move    b1,y:(r7+n7)
                            20858 
                            20859 ; 344  |
                            20860 ; 345  |                                        bDone = TRUE;
                            20861 
P:0274 45F400 000001  3 131120863 L134:   move    #>1,x1
P:0276 77F400 FFFFF8  3 131420866         move    #-8,n7
P:0278 000000         2 131620867         nop
P:0279 4D6F00         4 132020868         move    x1,y:(r7+n7)
                            20871 
                            20872 ; 346  |                                        bSendToPlayerStateMachine = FALSE;
                            20873 
P:027A 270000         2 132220875 L143:   move    #0,y1
                            20877 
                            20878 ; 347  |                                        break;
                            20879 ; 348  |                        } // end switch(wButtonEvent)
                            20880 ; 349  |                } // end switch(iEvent)
                            20881 ; 350  |
                            20882 ; 351  |                if(bSendToPlayerStateMachine)
                            20883 
P:027B 200079         2 132420885 L146:   tfr     y1,b
P:027C 2B0000         2 132620886         move    #0,b2
P:027D 20000B         2 132820887         tst     b
P:027E 0AF0AA rrrrrr  6 133420890         jeq     L148
                            20891 
                            20892 ; 352  |                        DisplayHint.I |= SysCallFunction(RSRC_PLAY_STATE_MACHINE_CODE_BANK,HandlePlayerStateMachine,iEvent,0,pPtr);
                            20893 
P:0280 77F400 FFFFFC  3 133720895         move    #-4,n7
P:0282 000000         2 133920896         nop
P:0283 6CEF00         4 134320897         move    y:(r7+n7),r4
P:0284 240000         2 134520900         move    #0,x0
P:0285 56F400 000011  3 134820901         move    #>17,a
P:0287 77F400 FFFFFD  3 135120902         move    #-3,n7
P:0289 000000         2 135320903         nop
P:028A 5FEF00         4 135720904         move    y:(r7+n7),b
P:028B 60F400 rrrrrr  3 136020905         move    #FHandlePlayerStateMachine,r0
P:028D 0BF080 rrrrrr  6 136620906         jsr     SysCallFunction
P:028F 77F400 FFFFF7  3 136920913         move    #-9,n7
P:0291 000000         2 137120914         nop
P:0292 5DEF00         4 137520915         move    y:(r7+n7),b1
P:0293 21C600         2 137720916         move    a,y0
P:0294 20005A         2 137920917         or      y0,b
P:0295 5D6F00         4 138320918         move    b1,y:(r7+n7)
P:0296 77F400 FFFFF8  3 138620920 L148:   move    #-8,n7
P:0298 000000         2 138820921         nop
P:0299 5FEF00         4 139220922         move    y:(r7+n7),b
P:029A 2B0000         2 139420923         move    #0,b2
P:029B 20000B         2 139620924         tst     b
P:029C 0AF0AA rrrrrr  6 140220925         jeq     L104
                            20926 
                            20927 ; 353  |        } // end while(!bDone)
                            20928 ; 354  |
                            20929 ; 355  |        if(bBandGainModify_mode)     // (SDK2.520)
                            20930 
P:029E 77F400 FFFFFA  3 140520932         move    #-6,n7
P:02A0 000000         2 140720933         nop
P:02A1 5EEF00         4 141120934         move    y:(r7+n7),a
P:02A2 200003         2 141320935         tst     a
P:02A3 0AF0AA rrrrrr  6 141920938         jeq     L149
                            20939 
                            20940 ; 356  |        {
                            20941 ; 357  |                SysPostMessage(3,SOFT_TIMER_KILL_TIMER,TIMER_ANIMATE);
                            20942 
P:02A5 20001B         2 142120944         clr     b   
P:02A6 5D5F00         2 142320945         move    b1,y:(r7)+
P:02A7 44F400 090002  3 142620947         move    #589826,x0
P:02A9 4C5F00         2 142820948         move    x0,y:(r7)+
P:02AA 290300         2 143020950         move    #3,b0
P:02AB 595F00         2 143220951         move    b0,y:(r7)+
P:02AC 0BF080 rrrrrr  6 143820953         jsr     FSysPostMessage
P:02AE 3F0300         2 144020954         move    #3,n7
P:02AF 000000         2 144220955         nop
P:02B0 204700         2 144420956         move    (r7)-n7
                            20959 
                            20960 ; 358  |                SysWaitOnEvent(0,0,0);      // let system process SOFT_TIMER_KILL_TIMER msg
                            20961 
P:02B1 300000         2 144620963         move    #0,r0
P:02B2 200013         2 144820964         clr     a   
P:02B3 20001B         2 145020965         clr     b   
P:02B4 0BF080 rrrrrr  6 145620966         jsr     SysWaitOnEvent
                            20967 
                            20968 ; 359  |        }
                            20969 ; 360  |        return MENU_EQ;
                            20970 
P:02B6 200013         2 145820972 L149:   clr     a   
P:02B7 218E00         2 146020973         move    a1,a
                            20974 
                            20975 ; 361  |} // end of EqMenu()
                            20976 
P:02B8 77F400 FFFFF6  3 146320978         move    #-10,n7
P:02BA 000000         2 146520979         nop
P:02BB 05EF7C         4 146920980         movec   y:(r7+n7),ssh
P:02BC 204F00         2 147120982         move    (r7)+n7
P:02BD 00000C         4 147520984         rts
                            20990 
                            20991 ; 362  |
                            20992 ; 363  |
                            20993 ; 364  |/////////////////////////////////////////////////////////////////////////////////////////
                            20994 ; 365  |//
                            20995 ; 366  |//>  Name:          void _reentrant SendEQ(int iCurrentEQ, int b, int *pPtr)
                            20996 ; 367  |//
                            20997 ; 368  |//   Type:          Function 
                            20998 ; 369  |//
                            20999 ; 370  |//   Description:   This sends the EQ settings to the decoder.
                            21000 ; 371  |//
                            21001 ; 372  |//   Inputs:        Which EQ setting to send.
                            21002 ; 373  |//
                            21003 ; 374  |//   Outputs:       Messages posted to the appropriate place
                            21004 ; 375  |//
                            21005 ; 376  |//   Notes:         
                            21006 ; 377  |//<
                            21007 ; 378  |//////////////////////////////////////////////////////////////////////////////////////////
                            21008 ; 379  |int _reentrant SendEQ(int iCurrentEQ, int b, int *pPtr)
                            21009 ; 380  |{
                            21010 
                            21015 FSendEQ:
P:02BE 055F7C         2 147721016         movec   ssh,y:(r7)+
P:02BF 205F00         2 147921019         move    (r7)+
P:02C0 045FA0         2 148121027         movec   m0,n7
P:02C1 000000         2 148321028         nop
P:02C2 5C6F00         4 148721029         move    a1,y:(r7+n7)
                            21032 
                            21033 ; 381  |    // check GeqModuleBase to see if eq is off, if so, turn it on.
                            21034 ; 382  |    SysPostMessage(7,GEQ_SET_EQ,1);
                            21035 
P:02C3 2D0700         2 148921037         move    #7,b1
P:02C4 260A00         2 149121039         move    #<$A,y0
P:02C5 290100         2 149321040         move    #1,b0
P:02C6 595F00         2 149521041         move    b0,y:(r7)+
P:02C7 4E5F00         2 149721043         move    y0,y:(r7)+
P:02C8 5D5F00         2 149921045         move    b1,y:(r7)+
P:02C9 0BF080 rrrrrr  6 150521047         jsr     FSysPostMessage
P:02CB 3F0300         2 150721048         move    #3,n7
P:02CC 000000         2 150921049         nop
P:02CD 204700         2 151121050         move    (r7)-n7
                            21053 
                            21054 ; 383  |
                            21055 ; 384  |        // Post the appropriate set of five band gains to the EQ module
                            21056 ; 385  |        // (use hard-coded values in order to save global data memory)
                            21057 ; 386  |        switch(iCurrentEQ)
                            21058 
P:02CE 045FA0         2 151321060         movec   m0,n7
P:02CF 000000         2 151521061         nop
P:02D0 5FEF00         4 151921062         move    y:(r7+n7),b
P:02D1 46F400 000001  3 152221063         move    #>1,y0
P:02D3 66F45C rrrrrr  3 152521064         sub     y0,b    #L164,r6
P:02D5 0AF0AB rrrrrr  6 153121065         jmi     L158
P:02D7 46F400 000004  3 153421066         move    #>4,y0
P:02D9 21FE5D         2 153621067         cmp     y0,b    b,n6
P:02DA 0AF0A7 rrrrrr  6 154221068         jgt     L158
P:02DC 07EE96         8 155021069         movem   p:(r6+n6),r6
P:02DD 000000         2 155221070         nop
P:02DE 0AE680         4 155621071         jmp     (r6)
                            21072 
P:02DF rrrrrr               21073 L164:   dc      L153    ; case 1:
P:02E0 rrrrrr               21074         dc      L154    ; case 2:
P:02E1 rrrrrr               21075         dc      L155    ; case 3:
P:02E2 rrrrrr               21076         dc      L156    ; case 4:
P:02E3 rrrrrr               21077         dc      L157    ; case 5:
                            21078 
                            21081 
                            21082 ; 387  |        {
                            21083 ; 388  |                case EQ_ROCK     ://ROCK
                            21084 ; 389  |                        SysPostMessage(7,GEQ_SET_ALL_BAND_GAINS,
                            21085 ; 390  |                                                                                EQ_ROCK_GAIN1,
                            21086 ; 391  |                                                                                EQ_ROCK_GAIN2,
                            21087 ; 392  |                                                                                EQ_ROCK_GAIN3,
                            21088 ; 393  |                                                                                EQ_ROCK_GAIN4,
                            21089 ; 394  |                                                                                EQ_ROCK_GAIN5 );
                            21090 
P:02E4 2D0E00         2 155821092 L153:   move    #14,b1
P:02E5 290E00         2 156021094         move    #14,b0
P:02E6 595F00         2 156221095         move    b0,y:(r7)+
P:02E7 5D5F00         2 156421097         move    b1,y:(r7)+
P:02E8 44F400 FFFFFE  3 156721099         move    #>-2,x0
P:02EA 4C5F00         2 156921100         move    x0,y:(r7)+
P:02EB 45F400 FFFFFC  3 157221102         move    #>-4,x1
P:02ED 4D5F00         2 157421103         move    x1,y:(r7)+
P:02EE 291200         2 157621105         move    #18,b0
P:02EF 595F00         2 157821106         move    b0,y:(r7)+
P:02F0 55F400 0A0002  3 158121108         move    #655362,b1
P:02F2 5D5F00         2 158321109         move    b1,y:(r7)+
P:02F3 290700         2 158521111         move    #7,b0
P:02F4 595F00         2 158721112         move    b0,y:(r7)+
P:02F5 0BF080 rrrrrr  6 159321114         jsr     FSysPostMessage
P:02F7 3F0700         2 159521115         move    #7,n7
P:02F8 000000         2 159721116         nop
P:02F9 204700         2 159921117         move    (r7)-n7
                            21119 
                            21120 ; 395  |                        break;
                            21121 
P:02FA 0AF080 rrrrrr  6 160521123         jmp     L163
                            21124 
                            21125 ; 396  |
                            21126 ; 397  |                case EQ_JAZZ     ://JAZZ
                            21127 ; 398  |                        SysPostMessage(7,GEQ_SET_ALL_BAND_GAINS,
                            21128 ; 399  |                                                                                EQ_JAZZ_GAIN1,
                            21129 ; 400  |                                                                                EQ_JAZZ_GAIN2,
                            21130 ; 401  |                                                                                EQ_JAZZ_GAIN3,
                            21131 ; 402  |                                                                                EQ_JAZZ_GAIN4,
                            21132 ; 403  |                                                                                EQ_JAZZ_GAIN5 );
                            21133 
P:02FC 290800         2 160721135 L154:   move    #8,b0
P:02FD 595F00         2 160921136         move    b0,y:(r7)+
P:02FE 20001B         2 161121138         clr     b   
P:02FF 5F5F00         2 161321139         move    b,y:(r7)+
P:0300 46F400 FFFFFC  3 161621141         move    #>-4,y0
P:0302 4E5F00         2 161821142         move    y0,y:(r7)+
P:0303 46F400 FFFFFE  3 162121144         move    #>-2,y0
P:0305 4E5F00         2 162321145         move    y0,y:(r7)+
P:0306 290C00         2 162521147         move    #12,b0
P:0307 595F00         2 162721148         move    b0,y:(r7)+
P:0308 44F400 0A0002  3 163021150         move    #655362,x0
P:030A 4C5F00         2 163221151         move    x0,y:(r7)+
P:030B 290700         2 163421153         move    #7,b0
P:030C 595F00         2 163621154         move    b0,y:(r7)+
P:030D 0BF080 rrrrrr  6 164221156         jsr     FSysPostMessage
P:030F 3F0700         2 164421157         move    #7,n7
P:0310 000000         2 164621158         nop
P:0311 204700         2 164821159         move    (r7)-n7
                            21161 
                            21162 ; 404  |                        break;
                            21163 
P:0312 0AF080 rrrrrr  6 165421165         jmp     L163
                            21166 
                            21167 ; 405  |
                            21168 ; 406  |                case EQ_CLASSIC  ://CLASSIC
                            21169 ; 407  |                        SysPostMessage(7,GEQ_SET_ALL_BAND_GAINS,
                            21170 ; 408  |                                                                                EQ_CLASS_GAIN1,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21171 ; 409  |                                                                                EQ_CLASS_GAIN2,
                            21172 ; 410  |                                                                                EQ_CLASS_GAIN3,
                            21173 ; 411  |                                                                                EQ_CLASS_GAIN4,
                            21174 ; 412  |                                                                                EQ_CLASS_GAIN5 );
                            21175 
P:0314 270000         2 165621177 L155:   move    #0,y1
P:0315 250000         2 165821178         move    #0,x1
P:0316 51F400 FFFFF6  3 166121179         move    #-10,b0
P:0318 595F00         2 166321180         move    b0,y:(r7)+
P:0319 50F400 FFFFF9  3 166621182         move    #-7,a0
P:031B 585F00         2 166821183         move    a0,y:(r7)+
P:031C 20001B         2 167021185         clr     b   
P:031D 5F5F00         2 167221186         move    b,y:(r7)+
P:031E 4D5F00         2 167421188         move    x1,y:(r7)+
P:031F 4F5F00         2 167621190         move    y1,y:(r7)+
P:0320 56F400 0A0002  3 167921192         move    #655362,a
P:0322 5E5F00         2 168121193         move    a,y:(r7)+
P:0323 290700         2 168321195         move    #7,b0
P:0324 595F00         2 168521196         move    b0,y:(r7)+
P:0325 0BF080 rrrrrr  6 169121198         jsr     FSysPostMessage
P:0327 3F0700         2 169321199         move    #7,n7
P:0328 000000         2 169521200         nop
P:0329 204700         2 169721201         move    (r7)-n7
                            21203 
                            21204 ; 413  |                        break;
                            21205 
P:032A 0AF080 rrrrrr  6 170321207         jmp     L163
                            21208 
                            21209 ; 414  |
                            21210 ; 415  |                case EQ_POP     ://POP
                            21211 ; 416  |                        SysPostMessage(7,GEQ_SET_ALL_BAND_GAINS,
                            21212 ; 417  |                                                                                EQ_POP_GAIN1,
                            21213 ; 418  |                                                                                EQ_POP_GAIN2,
                            21214 ; 419  |                                                                                EQ_POP_GAIN3,
                            21215 ; 420  |                                                                                EQ_POP_GAIN4,
                            21216 ; 421  |                                                                                EQ_POP_GAIN5 );
                            21217 
P:032C 280800         2 170521219 L156:   move    #8,a0
P:032D 20001B         2 170721220         clr     b   
P:032E 5F5F00         2 170921221         move    b,y:(r7)+
P:032F 46F400 FFFFFE  3 171221223         move    #>-2,y0
P:0331 4E5F00         2 171421224         move    y0,y:(r7)+
P:0332 290800         2 171621226         move    #8,b0
P:0333 595F00         2 171821227         move    b0,y:(r7)+
P:0334 585F00         2 172021229         move    a0,y:(r7)+
P:0335 47F400 FFFFFC  3 172321231         move    #>-4,y1
P:0337 4F5F00         2 172521232         move    y1,y:(r7)+
P:0338 44F400 0A0002  3 172821234         move    #655362,x0
P:033A 4C5F00         2 173021235         move    x0,y:(r7)+
P:033B 290700         2 173221237         move    #7,b0
P:033C 595F00         2 173421238         move    b0,y:(r7)+
P:033D 0BF080 rrrrrr  6 174021240         jsr     FSysPostMessage
P:033F 3F0700         2 174221241         move    #7,n7
P:0340 000000         2 174421242         nop
P:0341 204700         2 174621243         move    (r7)-n7
                            21245 
                            21246 ; 422  |                        break;
                            21247 
P:0342 0AF080 rrrrrr  6 175221249         jmp     L163
                            21250 
                            21251 ; 423  |
                            21252 ; 424  |                case EQ_CUSTOM   ://User-defined EQ setting
                            21253 ; 425  |                        SysPostMessage(7,GEQ_SET_ALL_BAND_GAINS,
                            21254 ; 426  |                                                                        g_iCustomEqBand_gain[EQ_BAND1],
                            21255 ; 427  |                                                                        g_iCustomEqBand_gain[EQ_BAND2],
                            21256 ; 428  |                                                                        g_iCustomEqBand_gain[EQ_BAND3],
                            21257 ; 429  |                                                                        g_iCustomEqBand_gain[EQ_BAND4],
                            21258 ; 430  |                                                                        g_iCustomEqBand_gain[EQ_BAND5] );
                            21259 
P:0344 59F000 rrrrrr  3 175521261 L157:   move    y:Fg_iCustomEqBand_gain,b0
P:0346 58F000 rrrrrr  3 175821262         move    y:Fg_iCustomEqBand_gain+1,a0
P:0348 4EF000 rrrrrr  3 176121263         move    y:Fg_iCustomEqBand_gain+2,y0
P:034A 4FF000 rrrrrr  3 176421264         move    y:Fg_iCustomEqBand_gain+3,y1
P:034C 4CF000 rrrrrr  3 176721265         move    y:Fg_iCustomEqBand_gain+4,x0
P:034E 4C5F00         2 176921266         move    x0,y:(r7)+
P:034F 4F5F00         2 177121268         move    y1,y:(r7)+
P:0350 4E5F00         2 177321270         move    y0,y:(r7)+
P:0351 585F00         2 177521272         move    a0,y:(r7)+
P:0352 595F00         2 177721274         move    b0,y:(r7)+
P:0353 51F400 0A0002  3 178021276         move    #655362,b0
P:0355 595F00         2 178221277         move    b0,y:(r7)+
P:0356 290700         2 178421279         move    #7,b0
P:0357 595F00         2 178621280         move    b0,y:(r7)+
P:0358 0BF080 rrrrrr  6 179221282         jsr     FSysPostMessage
P:035A 3F0700         2 179421283         move    #7,n7
P:035B 000000         2 179621284         nop
P:035C 204700         2 179821285         move    (r7)-n7
                            21287 
                            21288 ; 431  |                        break;
                            21289 
P:035D 0AF080 rrrrrr  6 180421291         jmp     L163
                            21292 
                            21293 ; 432  |
                            21294 ; 433  |//              case EQ_NORMAL   ://Normal (same as "default")  (SDK2.520)
                            21295 ; 434  |                default:
                            21296 ; 435  |                        SysPostMessage(7,GEQ_SET_ALL_BAND_GAINS,
                            21297 ; 436  |                                                                                EQ_NORM_GAIN1,
                            21298 ; 437  |                                                                                EQ_NORM_GAIN2,
                            21299 ; 438  |                                                                                EQ_NORM_GAIN3,
                            21300 ; 439  |                                                                                EQ_NORM_GAIN4,
                            21301 ; 440  |                                                                                EQ_NORM_GAIN5 );
                            21302 
P:035F 240000         2 180621304 L158:   move    #0,x0
P:0360 270000         2 180821305         move    #0,y1
P:0361 260000         2 181021306         move    #0,y0
P:0362 2C0000         2 181221307         move    #0,a1
P:0363 20001B         2 181421308         clr     b   
P:0364 280700         2 181621309         move    #7,a0
P:0365 5F5F00         2 181821310         move    b,y:(r7)+
P:0366 5C5F00         2 182021312         move    a1,y:(r7)+
P:0367 4E5F00         2 182221314         move    y0,y:(r7)+
P:0368 4F5F00         2 182421316         move    y1,y:(r7)+
P:0369 4C5F00         2 182621318         move    x0,y:(r7)+
P:036A 57F400 0A0002  3 182921320         move    #655362,b
P:036C 5F5F00         2 183121321         move    b,y:(r7)+
P:036D 585F00         2 183321323         move    a0,y:(r7)+
P:036E 0BF080 rrrrrr  6 183921325         jsr     FSysPostMessage
P:0370 3F0700         2 184121326         move    #7,n7
P:0371 000000         2 184321327         nop
P:0372 204700         2 184521328         move    (r7)-n7
                            21330 
                            21331 ; 441  |
                            21332 ; 442  |            // May23'05 addition to disable EQ when gains are 0. Gives 3-4% pwr reduction in player.
                            21333 ; 443  |            // if all gains are zero, we could also disable the equalizer processing to save 3.76 MIPS
                            21334 ; 444  |            if( (EQ_NORM_GAIN1==0)  &&
                            21335 ; 445  |                (EQ_NORM_GAIN2==0)  &&
                            21336 ; 446  |                (EQ_NORM_GAIN3==0)  &&
                            21337 ; 447  |                (EQ_NORM_GAIN4==0)  &&
                            21338 ; 448  |                (EQ_NORM_GAIN5==0)  )
                            21339 ; 449  |            {
                            21340 ; 450  |                // Allow the equalizer processing to smoothly transition to 0dB gains on all bands.
                            21341 ; 451  |                SysWaitOnEvent(0,0,100); // wait 100 msec
                            21342 
P:0373 300000         2 184721344         move    #0,r0
P:0374 200013         2 184921345         clr     a   
P:0375 57F400 000064  3 185221346         move    #>100,b
P:0377 0BF080 rrrrrr  6 185821347         jsr     SysWaitOnEvent
P:0379 20001B         2 186021348         clr     b   
P:037A 5F5F00         2 186221349         move    b,y:(r7)+
P:037B 260A00         2 186421351         move    #<$A,y0
P:037C 4E5F00         2 186621352         move    y0,y:(r7)+
P:037D 290700         2 186821354         move    #7,b0
P:037E 595F00         2 187021355         move    b0,y:(r7)+
                            21357 
                            21358 ; 452  |                // disable
                            21359 ; 453  |                SysPostMessage(7,GEQ_SET_EQ,0);
                            21360 
P:037F 0BF080 rrrrrr  6 187621362         jsr     FSysPostMessage
P:0381 3F0300         2 187821363         move    #3,n7
P:0382 000000         2 188021364         nop
P:0383 204700         2 188221365         move    (r7)-n7
                            21367 
                            21368 ; 454  |            }
                            21369 ; 455  |
                            21370 ; 456  |                        break;
                            21371 ; 457  |        }
                            21372 ; 458  |        return 0; // SUCCESS
                            21373 
P:0384 200013         2 188421375 L163:   clr     a   
                            21376 
                            21377 ; 459  |} // end of SendEQ()
                            21378 
P:0385 205700         2 188621380         move    (r7)-
P:0386 05FF7C         4 189021382         movec   y:-(r7),ssh
P:0387 000000         2 189221385         nop
P:0388 00000C         4 189621386         rts
                            21388 
                            21389 ; 460  |
                            21390 ; 461  |
                            21391 ; 462  |/////////////////////////////////////////////////////////////////////////////////////////
                            21392 ; 463  |//
                            21393 ; 464  |//>  Name:          int _reentrant NextEQ(int iDirection, int b, int *c)
                            21394 ; 465  |//
                            21395 ; 466  |//   Type:          Function (code bank callable)
                            21396 ; 467  |//
                            21397 ; 468  |//   Description:   This updates the eq setting and rolls it over if necessary
                            21398 ; 469  |//
                            21399 ; 470  |//   Inputs:        none (all parameters are ignored)
                            21400 ; 471  |//
                            21401 ; 472  |//   Outputs:       Calls SendEQ, then exits
                            21402 ; 473  |//
                            21403 ; 474  |//   Notes:         
                            21404 ; 475  |//<
                            21405 ; 476  |//////////////////////////////////////////////////////////////////////////////////////////
                            21406 ; 477  |int _reentrant NextEQ(int iDirection, int b, int *c)
                            21407 ; 478  |{
                            21408 
                            21413 FNextEQ:
P:0389 055F7C         2 189821414         movec   ssh,y:(r7)+
                            21423 
                            21424 ; 479  |        b;c;                        //prevent 'parameter not used'
                            21425 ; 480  |
                            21426 ; 481  |    if(iDirection == INCREMENT)
                            21427 
P:038A 46F400 000001  3 190121429         move    #>1,y0
P:038C 200055         2 190321430         cmp     y0,a
P:038D 0AF0A2 rrrrrr  6 190921431         jne     L165
                            21432 
                            21433 ; 482  |    {
                            21434 ; 483  |        g_iEqSetting += 1;
                            21435 
P:038F 5EF000 rrrrrr  3 191221437         move    y:Fg_iEqSetting,a
P:0391 200050         2 191421439         add     y0,a
P:0392 5C7000 rrrrrr  3 191721440         move    a1,y:Fg_iEqSetting
                            21441 
                            21442 ; 484  |        if(g_iEqSetting > LAST_EQ)   //check for roll over
                            21443 
P:0394 45F400 000005  3 192021445         move    #>5,x1
P:0396 200065         2 192221446         cmp     x1,a
P:0397 0AF0AF rrrrrr  6 192821447         jle     L168
                            21448 
                            21449 ; 485  |            g_iEqSetting = FIRST_EQ;
                            21450 
P:0399 200013         2 193021452         clr     a   
P:039A 5E7000 rrrrrr  3 193321453         move    a,y:Fg_iEqSetting
                            21454 
                            21455 ; 486  |    }
                            21456 
P:039C 0AF080 rrrrrr  6 193921458         jmp     L168
                            21459 
                            21460 ; 487  |    else
                            21461 ; 488  |    {
                            21462 ; 489  |        g_iEqSetting -= 1;
                            21463 
P:039E 5FF000 rrrrrr  3 194221465 L165:   move    y:Fg_iEqSetting,b
P:03A0 20005C         2 194421467         sub     y0,b
P:03A1 5D7000 rrrrrr  3 194721468         move    b1,y:Fg_iEqSetting
                            21469 
                            21470 ; 490  |        if(g_iEqSetting < FIRST_EQ)  //check for roll over
                            21471 
P:03A3 0AF0A1 rrrrrr  6 195321473         jge     L168
                            21474 
                            21475 ; 491  |            g_iEqSetting = LAST_EQ;
                            21476 
P:03A5 47F400 000005  3 195621478         move    #>5,y1
P:03A7 4F7000 rrrrrr  3 195921479         move    y1,y:Fg_iEqSetting
                            21480 
                            21481 ; 492  |    }  
                            21482 ; 493  |
                            21483 ; 494  |    SendEQ(g_iEqSetting,0,0);
                            21484 
P:03A9 5EF000 rrrrrr  3 196221486 L168:   move    y:Fg_iEqSetting,a
P:03AB 300000         2 196421487         move    #0,r0
P:03AC 20001B         2 196621489         clr     b   
P:03AD 0BF080 rrrrrr  6 197221490         jsr     FSendEQ
                            21491 
                            21492 ; 495  |    return g_iEqSetting;
                            21493 
P:03AF 5EF000 rrrrrr  3 197521495         move    y:Fg_iEqSetting,a
                            21496 
                            21497 ; 496  |} // end of NextEQ()
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21498 
P:03B1 05FF7C         4 197921500         movec   y:-(r7),ssh
P:03B2 000000         2 198121503         nop
P:03B3 00000C         4 198521504         rts
                            21506 
                            21507 ; 497  |
                            21508 ; 498  |
                            21509 ; 499  |/////////////////////////////////////////////////////////////////////////////////////////
                            21510 ; 500  |//
                            21511 ; 501  |//>  Name:          void _reentrant DisplayEqBar(int iSelected, int bInvert)
                            21512 ; 502  |//
                            21513 ; 503  |//   Type:          Function
                            21514 ; 504  |//
                            21515 ; 505  |//   Description:   Draws iSelected band slider bar and updates the slider position
                            21516 ; 506  |//
                            21517 ; 507  |//   Inputs:        iSelected - indicates which band slider to display
                            21518 ; 508  |//                                      bInvert - determines whether or not to invert the slider bar
                            21519 ; 509  |//
                            21520 ; 510  |//   Outputs:       Updates the display to reflect user selections
                            21521 ; 511  |//
                            21522 ; 512  |//   Notes:         
                            21523 ; 513  |//<
                            21524 ; 514  |//////////////////////////////////////////////////////////////////////////////////////////
                            21525 ; 515  |void _reentrant DisplayEqBar(INT iSelected, INT bInvert)    // (SDK2.520)
                            21526 ; 516  |{
                            21527 
                            21532 FDisplayEqBar:
P:03B4 055F7C         2 198721533         movec   ssh,y:(r7)+
P:03B5 3F0800         2 198921536         move    #8,n7
P:03B6 000000         2 199121537         nop
P:03B7 204F00         2 199321538         move    (r7)+n7
                            21549 
                            21550 ; 517  |        INT  iBand_gain[NUM_EQ_BANDS];
                            21551 ; 518  |        INT  idB_level;
                            21552 ; 519  |        WORD wSlider_rsrc;
                            21553 
P:03B8 77F400 FFFFFD  3 199621555         move    #-3,n7
P:03BA 000000         2 199821556         nop
P:03BB 5D6F00         4 200221557         move    b1,y:(r7+n7)
                            21560 
                            21561 ; 520  |
                            21562 ; 521  |        // Assign the appropriate set of five band gains
                            21563 ; 522  |        // (use hard-coded values in order to save global data memory)
                            21564 ; 523  |        switch(g_iEqSetting)
                            21565 
P:03BC 5FF000 rrrrrr  3 200521567         move    y:Fg_iEqSetting,b
P:03BE 45F400 000001  3 200821568         move    #>1,x1
P:03C0 66F46C rrrrrr  3 201121569         sub     x1,b    #L195,r6
P:03C2 0AF0AB rrrrrr  6 201721570         jmi     L187
P:03C4 45F400 000004  3 202021571         move    #>4,x1
P:03C6 21FE6D         2 202221572         cmp     x1,b    b,n6
P:03C7 0AF0A7 rrrrrr  6 202821573         jgt     L187
P:03C9 07EE96         8 203621574         movem   p:(r6+n6),r6
P:03CA 000000         2 203821575         nop
P:03CB 0AE680         4 204221576         jmp     (r6)
                            21577 
P:03CC rrrrrr               21578 L195:   dc      L182    ; case 1:
P:03CD rrrrrr               21579         dc      L183    ; case 2:
P:03CE rrrrrr               21580         dc      L184    ; case 3:
P:03CF rrrrrr               21581         dc      L185    ; case 4:
P:03D0 rrrrrr               21582         dc      L186    ; case 5:
                            21583 
                            21584 
                            21585 ; 524  |        {
                            21586 ; 525  |                case EQ_ROCK:  // ROCK
                            21587 ; 526  |                        iBand_gain[EQ_BAND1] = EQ_ROCK_GAIN1;
                            21588 
P:03D1 57F400 000012  3 204521590 L182:   move    #>18,b
P:03D3 77F400 FFFFF8  3 204821591         move    #-8,n7
P:03D5 000000         2 205021592         nop
P:03D6 5F6F00         4 205421593         move    b,y:(r7+n7)
                            21594 
                            21595 ; 527  |                        iBand_gain[EQ_BAND2] = EQ_ROCK_GAIN2;
                            21596 
P:03D7 47F400 FFFFFC  3 205721598         move    #>-4,y1
P:03D9 77F400 FFFFF9  3 206021599         move    #-7,n7
P:03DB 000000         2 206221600         nop
P:03DC 4F6F00         4 206621601         move    y1,y:(r7+n7)
                            21602 
                            21603 ; 528  |                        iBand_gain[EQ_BAND3] = EQ_ROCK_GAIN3;
                            21604 
P:03DD 51F400 FFFFFE  3 206921606         move    #-2,b0
P:03DF 77F400 FFFFFA  3 207221607         move    #-6,n7
P:03E1 000000         2 207421608         nop
P:03E2 596F00         4 207821609         move    b0,y:(r7+n7)
                            21610 
                            21611 ; 529  |                        iBand_gain[EQ_BAND4] = EQ_ROCK_GAIN4;
                            21612 
P:03E3 290E00         2 208021614         move    #14,b0
P:03E4 77F400 FFFFFB  3 208321615         move    #-5,n7
P:03E6 000000         2 208521616         nop
P:03E7 596F00         4 208921617         move    b0,y:(r7+n7)
                            21618 
                            21619 ; 530  |                        iBand_gain[EQ_BAND5] = EQ_ROCK_GAIN5;
                            21620 
P:03E8 20FF00         2 209121622         move    y1,n7
P:03E9 000000         2 209321623         nop
P:03EA 596F00         4 209721624         move    b0,y:(r7+n7)
                            21625 
                            21626 ; 531  |                        break;
                            21627 
P:03EB 0AF080 rrrrrr  6 210321629         jmp     L192
                            21630 
                            21631 ; 532  |                case EQ_JAZZ:  // JAZZ
                            21632 ; 533  |                        iBand_gain[EQ_BAND1] = EQ_JAZZ_GAIN1;
                            21633 
P:03ED 47F400 00000C  3 210621635 L183:   move    #>12,y1
P:03EF 77F400 FFFFF8  3 210921636         move    #-8,n7
P:03F1 000000         2 211121637         nop
P:03F2 4F6F00         4 211521638         move    y1,y:(r7+n7)
                            21639 
                            21640 ; 534  |                        iBand_gain[EQ_BAND2] = EQ_JAZZ_GAIN2;
                            21641 
P:03F3 51F400 FFFFFE  3 211821643         move    #-2,b0
P:03F5 77F400 FFFFF9  3 212121644         move    #-7,n7
P:03F7 000000         2 212321645         nop
P:03F8 596F00         4 212721646         move    b0,y:(r7+n7)
                            21647 
                            21648 ; 535  |                        iBand_gain[EQ_BAND3] = EQ_JAZZ_GAIN3;
                            21649 
P:03F9 46F400 FFFFFC  3 213021651         move    #>-4,y0
P:03FB 77F400 FFFFFA  3 213321652         move    #-6,n7
P:03FD 000000         2 213521653         nop
P:03FE 4E6F00         4 213921654         move    y0,y:(r7+n7)
                            21655 
                            21656 ; 536  |                        iBand_gain[EQ_BAND4] = EQ_JAZZ_GAIN4;
                            21657 
P:03FF 240000         2 214121659         move    #0,x0
P:0400 77F400 FFFFFB  3 214421660         move    #-5,n7
P:0402 000000         2 214621661         nop
P:0403 4C6F00         4 215021662         move    x0,y:(r7+n7)
                            21663 
                            21664 ; 537  |                        iBand_gain[EQ_BAND5] = EQ_JAZZ_GAIN5;
                            21665 
P:0404 2D0800         2 215221667         move    #8,b1
P:0405 20DF00         2 215421668         move    y0,n7
P:0406 000000         2 215621669         nop
P:0407 5D6F00         4 216021670         move    b1,y:(r7+n7)
                            21671 
                            21672 ; 538  |                        break;
                            21673 
P:0408 0AF080 rrrrrr  6 216621675         jmp     L192
                            21676 
                            21677 ; 539  |                case EQ_CLASSIC:  // CLASSIC
                            21678 ; 540  |                        iBand_gain[EQ_BAND1] = EQ_CLASS_GAIN1;
                            21679 
P:040A 20001B         2 216821681 L184:   clr     b   
P:040B 77F400 FFFFF8  3 217121682         move    #-8,n7
P:040D 000000         2 217321683         nop
P:040E 5F6F00         4 217721684         move    b,y:(r7+n7)
                            21685 
                            21686 ; 541  |                        iBand_gain[EQ_BAND2] = EQ_CLASS_GAIN2;
                            21687 
P:040F 77F400 FFFFF9  3 218021689         move    #-7,n7
P:0411 000000         2 218221690         nop
P:0412 5F6F00         4 218621691         move    b,y:(r7+n7)
                            21692 
                            21693 ; 542  |                        iBand_gain[EQ_BAND3] = EQ_CLASS_GAIN3;
                            21694 
P:0413 77F400 FFFFFA  3 218921696         move    #-6,n7
P:0415 000000         2 219121697         nop
P:0416 5F6F00         4 219521698         move    b,y:(r7+n7)
                            21699 
                            21700 ; 543  |                        iBand_gain[EQ_BAND4] = EQ_CLASS_GAIN4;
                            21701 
P:0417 47F400 FFFFF9  3 219821703         move    #>-7,y1
P:0419 77F400 FFFFFB  3 220121704         move    #-5,n7
P:041B 000000         2 220321705         nop
P:041C 4F6F00         4 220721706         move    y1,y:(r7+n7)
                            21707 
                            21708 ; 544  |                        iBand_gain[EQ_BAND5] = EQ_CLASS_GAIN5;
                            21709 
P:041D 51F400 FFFFF6  3 221021711         move    #-10,b0
P:041F 77F400 FFFFFC  3 221321712         move    #-4,n7
P:0421 000000         2 221521713         nop
P:0422 596F00         4 221921714         move    b0,y:(r7+n7)
                            21715 
                            21716 ; 545  |                        break;
                            21717 
P:0423 0AF080 rrrrrr  6 222521719         jmp     L192
                            21720 
                            21721 ; 546  |                case EQ_POP:  // POP
                            21722 ; 547  |                        iBand_gain[EQ_BAND1] = EQ_POP_GAIN1;
                            21723 
P:0425 46F400 FFFFFC  3 222821725 L185:   move    #>-4,y0
P:0427 77F400 FFFFF8  3 223121726         move    #-8,n7
P:0429 000000         2 223321727         nop
P:042A 4E6F00         4 223721728         move    y0,y:(r7+n7)
                            21729 
                            21730 ; 548  |                        iBand_gain[EQ_BAND2] = EQ_POP_GAIN2;
                            21731 
P:042B 290800         2 223921733         move    #8,b0
P:042C 77F400 FFFFF9  3 224221734         move    #-7,n7
P:042E 000000         2 224421735         nop
P:042F 596F00         4 224821736         move    b0,y:(r7+n7)
                            21737 
                            21738 ; 549  |                        iBand_gain[EQ_BAND3] = EQ_POP_GAIN3;
                            21739 
P:0430 77F400 FFFFFA  3 225121741         move    #-6,n7
P:0432 000000         2 225321742         nop
P:0433 596F00         4 225721743         move    b0,y:(r7+n7)
                            21744 
                            21745 ; 550  |                        iBand_gain[EQ_BAND4] = EQ_POP_GAIN4;
                            21746 
P:0434 51F400 FFFFFE  3 226021748         move    #-2,b0
P:0436 77F400 FFFFFB  3 226321749         move    #-5,n7
P:0438 000000         2 226521750         nop
P:0439 596F00         4 226921751         move    b0,y:(r7+n7)
                            21752 
                            21753 ; 551  |                        iBand_gain[EQ_BAND5] = EQ_POP_GAIN5;
                            21754 
P:043A 0AF080 rrrrrr  6 227521756         jmp     L188
                            21757 
                            21758 ; 552  |                        break;
                            21759 ; 553  |                case EQ_CUSTOM:  // User-defined EQ setting
                            21760 ; 554  |                        iBand_gain[EQ_BAND1] = g_iCustomEqBand_gain[EQ_BAND1];
                            21761 
P:043C 5DF000 rrrrrr  3 227821763 L186:   move    y:Fg_iCustomEqBand_gain,b1
P:043E 77F400 FFFFF8  3 228121764         move    #-8,n7
P:0440 000000         2 228321765         nop
P:0441 5D6F00         4 228721766         move    b1,y:(r7+n7)
                            21767 
                            21768 ; 555  |                        iBand_gain[EQ_BAND2] = g_iCustomEqBand_gain[EQ_BAND2];
                            21769 
P:0442 4EF000 rrrrrr  3 229021771         move    y:Fg_iCustomEqBand_gain+1,y0
P:0444 77F400 FFFFF9  3 229321772         move    #-7,n7
P:0446 000000         2 229521773         nop
P:0447 4E6F00         4 229921774         move    y0,y:(r7+n7)
                            21775 
                            21776 ; 556  |                        iBand_gain[EQ_BAND3] = g_iCustomEqBand_gain[EQ_BAND3];
                            21777 
P:0448 4CF000 rrrrrr  3 230221779         move    y:Fg_iCustomEqBand_gain+2,x0
P:044A 77F400 FFFFFA  3 230521780         move    #-6,n7
P:044C 000000         2 230721781         nop
P:044D 4C6F00         4 231121782         move    x0,y:(r7+n7)
                            21783 
                            21784 ; 557  |                        iBand_gain[EQ_BAND4] = g_iCustomEqBand_gain[EQ_BAND4];
                            21785 
P:044E 5DF000 rrrrrr  3 231421787         move    y:Fg_iCustomEqBand_gain+3,b1
P:0450 77F400 FFFFFB  3 231721788         move    #-5,n7
P:0452 000000         2 231921789         nop
P:0453 5D6F00         4 232321790         move    b1,y:(r7+n7)
                            21791 
                            21792 ; 558  |                        iBand_gain[EQ_BAND5] = g_iCustomEqBand_gain[EQ_BAND5];
                            21793 
P:0454 4EF000 rrrrrr  3 232621795         move    y:Fg_iCustomEqBand_gain+4,y0
P:0456 77F400 FFFFFC  3 232921796         move    #-4,n7
P:0458 000000         2 233121797         nop
P:0459 4E6F00         4 233521798         move    y0,y:(r7+n7)
                            21799 
                            21800 ; 559  |                        break;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21801 
P:045A 0AF080 rrrrrr  6 234121803         jmp     L192
                            21804 
                            21805 ; 560  |//              case EQ_NORMAL:  // Normal (same as "default")
                            21806 ; 561  |                default:
                            21807 ; 562  |                        iBand_gain[EQ_BAND1] = EQ_NORM_GAIN1;
                            21808 
P:045C 20001B         2 234321810 L187:   clr     b   
P:045D 77F400 FFFFF8  3 234621811         move    #-8,n7
P:045F 000000         2 234821812         nop
P:0460 5F6F00         4 235221813         move    b,y:(r7+n7)
                            21814 
                            21815 ; 563  |                        iBand_gain[EQ_BAND2] = EQ_NORM_GAIN2;
                            21816 
P:0461 77F400 FFFFF9  3 235521818         move    #-7,n7
P:0463 000000         2 235721819         nop
P:0464 5F6F00         4 236121820         move    b,y:(r7+n7)
                            21821 
                            21822 ; 564  |                        iBand_gain[EQ_BAND3] = EQ_NORM_GAIN3;
                            21823 
P:0465 77F400 FFFFFA  3 236421825         move    #-6,n7
P:0467 000000         2 236621826         nop
P:0468 5F6F00         4 237021827         move    b,y:(r7+n7)
                            21828 
                            21829 ; 565  |                        iBand_gain[EQ_BAND4] = EQ_NORM_GAIN4;
                            21830 
P:0469 77F400 FFFFFB  3 237321832         move    #-5,n7
P:046B 000000         2 237521833         nop
P:046C 5F6F00         4 237921834         move    b,y:(r7+n7)
                            21835 
                            21836 ; 566  |                        iBand_gain[EQ_BAND5] = EQ_NORM_GAIN5;
                            21837 
P:046D 20001B         2 238121839 L188:   clr     b   
P:046E 77F400 FFFFFC  3 238421840         move    #-4,n7
P:0470 000000         2 238621841         nop
P:0471 5F6F00         4 239021842         move    b,y:(r7+n7)
                            21843 
                            21844 ; 567  |                        break;
                            21845 ; 568  |        }
                            21846 ; 569  |
                            21847 ; 570  |        idB_level = iBand_gain[iSelected] / 2;    // perform integer math (fraction is lost)
                            21848 
P:0472 77F400 FFFFF8  3 239321850 L192:   move    #-8,n7
P:0474 000000         2 239521851         nop
P:0475 044F15         4 239921852         lua     (r7)+n7,r5
P:0476 219D00         2 240121853         move    a1,n5
P:0477 000000         2 240321854         nop
P:0478 044D16         4 240721855         lua     (r5)+n5,r6
P:0479 000000         2 240921856         nop
P:047A 5FE600         2 241121857         move    y:(r6),b
P:047B 20002A         2 241321858         asr     b
P:047C 77F400 FFFFFE  3 241621859         move    #-2,n7
P:047E 000000         2 241821860         nop
P:047F 5D6F00         4 242221861         move    b1,y:(r7+n7)
                            21863 
                            21864 ; 571  |
                            21865 ; 572  |        // Change the level of selected EqBand
                            21866 ; 573  |        // First, display the vertical slider track
                            21867 ; 574  |        SysPostMessage(5,LCD_PRINT_RANGE_RSRC,
                            21868 ; 575  |                                        (FIRST_X_POS + SLIDER_SPACING * iSelected),16,RSRC_SLIDER_TRACK);
                            21869 
P:0480 218600         2 242421871         move    a1,y0
P:0481 47F400 000012  3 242721872         move    #>18,y1
P:0483 2000B8         2 242921873         mpy     y0,y1,b
P:0484 20002A         2 243121874         asr     b
P:0485 212F00         2 243321877         move    b0,b
P:0486 045FA0         2 243521878         movec   m0,n7
P:0487 000000         2 243721879         nop
P:0488 5F6F00         4 244121880         move    b,y:(r7+n7)
P:0489 45F400 000005  3 244421881         move    #>5,x1
P:048B 200068         2 244621882         add     x1,b
P:048C 44F400 030001  3 244921883         move    #$30001,x0
P:048E 2C0500         2 245121884         move    #5,a1
P:048F 50F400 0001C8  3 245421885         move    #456,a0
P:0491 585F00         2 245621886         move    a0,y:(r7)+
P:0492 281000         2 245821888         move    #16,a0
P:0493 585F00         2 246021889         move    a0,y:(r7)+
P:0494 5D5F00         2 246221891         move    b1,y:(r7)+
P:0495 4C5F00         2 246421893         move    x0,y:(r7)+
P:0496 5C5F00         2 246621895         move    a1,y:(r7)+
P:0497 0BF080 rrrrrr  6 247221897         jsr     FSysPostMessage
P:0499 3F0500         2 247421898         move    #5,n7
P:049A 000000         2 247621899         nop
P:049B 204700         2 247821900         move    (r7)-n7
                            21903 
                            21904 ; 576  |
                            21905 ; 577  |        // Second, display the horizontal slider bar representing the gain
                            21906 ; 578  |        // (due to integer math, the slider bar will only move for whole dB levels)
                            21907 ; 579  |        if(bInvert)
                            21908 
P:049C 77F400 FFFFFD  3 248121910         move    #-3,n7
P:049E 000000         2 248321911         nop
P:049F 5FEF00         4 248721912         move    y:(r7+n7),b
P:04A0 20000B         2 248921913         tst     b
                            21916 
                            21917 ; 580  |                wSlider_rsrc = RSRC_SLIDER_BAR_INV;
                            21918 
P:04A1 47F400 0001C7  3 249221920         move    #455,y1
P:04A3 0AF0A2 rrrrrr  6 249821922         jne     L194
                            21923 
                            21924 ; 581  |        else
                            21925 ; 582  |                wSlider_rsrc = RSRC_SLIDER_BAR;
                            21926 
P:04A5 47F400 0001C6  3 250121928         move    #454,y1
                            21929 
                            21930 ; 583  |
                            21931 ; 584  |        SysPostMessage(5,LCD_PRINT_RANGE_RSRC,
                            21932 ; 585  |                                        (FIRST_X_POS + SLIDER_SPACING * iSelected + 3),
                            21933 ; 586  |                                        (32 - idB_level), wSlider_rsrc);
                            21934 
P:04A7 46F400 000008  3 250421936 L194:   move    #>8,y0
P:04A9 045FA0         2 250621937         movec   m0,n7
P:04AA 000000         2 250821938         nop
P:04AB 5FEF00         4 251221939         move    y:(r7+n7),b
P:04AC 200058         2 251421940         add     y0,b
P:04AD 56F400 000020  3 251721942         move    #>$20,a
P:04AF 77F400 FFFFFE  3 252021943         move    #-2,n7
P:04B1 000000         2 252221944         nop
P:04B2 4CEF00         4 252621945         move    y:(r7+n7),x0
P:04B3 200044         2 252821946         sub     x0,a
P:04B4 4F5F00         2 253021949         move    y1,y:(r7)+
P:04B5 5C5F00         2 253221952         move    a1,y:(r7)+
P:04B6 5D5F00         2 253421954         move    b1,y:(r7)+
P:04B7 47F400 030001  3 253721956         move    #$30001,y1
P:04B9 4F5F00         2 253921957         move    y1,y:(r7)+
P:04BA 290500         2 254121959         move    #5,b0
P:04BB 595F00         2 254321960         move    b0,y:(r7)+
P:04BC 0BF080 rrrrrr  6 254921962         jsr     FSysPostMessage
P:04BE 3F0500         2 255121963         move    #5,n7
P:04BF 000000         2 255321964         nop
P:04C0 204700         2 255521965         move    (r7)-n7
                            21968 
                            21969 ; 587  |
                            21970 ; 588  |        // Make sure the display (LCD) is updated before returning
                            21971 ; 589  |        SysWaitOnEvent(0,0,0);
                            21972 
P:04C1 300000         2 255721974         move    #0,r0
P:04C2 20001B         2 255921975         clr     b   
P:04C3 200013         2 256121976         clr     a   
P:04C4 0BF080 rrrrrr  6 256721977         jsr     SysWaitOnEvent
                            21978 
                            21979 ; 590  |} // end of DisplayEQBar()
                            21980 
P:04C6 77F400 FFFFF7  3 257021982         move    #-9,n7
P:04C8 000000         2 257221983         nop
P:04C9 05EF7C         4 257621984         movec   y:(r7+n7),ssh
P:04CA 204F00         2 257821986         move    (r7)+n7
P:04CB 00000C         4 258221988         rts
                            21990 
                            21991 ; 591  |
                            21992 ; 592  |
                            21993 ; 593  |/////////////////////////////////////////////////////////////////////////////////////////
                            21994 ; 594  |//
                            21995 ; 595  |//>  Name:          void _reentrant DisplayEqStats(int iSelected, int bDisplayLabels)
                            21996 ; 596  |//
                            21997 ; 597  |//   Type:          Function
                            21998 ; 598  |//
                            21999 ; 599  |//   Description:   Displays selected band gain value and center frequency on bottom row
                            22000 ; 600  |//
                            22001 ; 601  |//   Inputs:        iSelected - indicates which band gain to display
                            22002 ; 602  |//                                      bDisplayLabels - indicates whether or not to display dB level & Hertz text
                            22003 ; 603  |//
                            22004 ; 604  |//   Outputs:       Updates the display to reflect user selections
                            22005 ; 605  |//
                            22006 ; 606  |//   Notes:         
                            22007 ; 607  |//<
                            22008 ; 608  |//////////////////////////////////////////////////////////////////////////////////////////
                            22009 ; 609  |void _reentrant DisplayEqStats(INT iSelected, INT bDisplayLabels)    // (SDK2.520)
                            22010 ; 610  |{
                            22011 
                            22016 FDisplayEqStats:
P:04CC 055F7C         2 258422017         movec   ssh,y:(r7)+
P:04CD 3F0700         2 258622020         move    #7,n7
P:04CE 000000         2 258822021         nop
P:04CF 204F00         2 259022022         move    (r7)+n7
                            22031 
                            22032 ; 611  |        INT idB_level;
                            22033 ; 612  |        INT iCustomEqBand_freq[NUM_EQ_BANDS];   // five EQ Bands supported
                            22034 
P:04D0 77F400 FFFFFE  3 259322036         move    #-2,n7
P:04D2 000000         2 259522037         nop
P:04D3 5C6F00         4 259922038         move    a1,y:(r7+n7)
                            22041 
                            22042 ; 613  |
                            22043 ; 614  |        iCustomEqBand_freq[0] = CENTER_FREQ1;   // use hard-coded freqs
                            22044 
P:04D4 47F400 000050  3 260222046         move    #>80,y1
P:04D6 77F400 FFFFF9  3 260522047         move    #-7,n7
P:04D8 000000         2 260722048         nop
P:04D9 4F6F00         4 261122049         move    y1,y:(r7+n7)
                            22050 
                            22051 ; 615  |        iCustomEqBand_freq[1] = CENTER_FREQ2;
                            22052 
P:04DA 28FA00         2 261322054         move    #250,a0
P:04DB 77F400 FFFFFA  3 261622055         move    #-6,n7
P:04DD 000000         2 261822056         nop
P:04DE 586F00         4 262222057         move    a0,y:(r7+n7)
                            22058 
                            22059 ; 616  |        iCustomEqBand_freq[2] = CENTER_FREQ3;
                            22060 
P:04DF 46F400 0003E8  3 262522062         move    #1000,y0
P:04E1 77F400 FFFFFB  3 262822063         move    #-5,n7
P:04E3 000000         2 263022064         nop
P:04E4 4E6F00         4 263422065         move    y0,y:(r7+n7)
                            22066 
                            22067 ; 617  |        iCustomEqBand_freq[3] = CENTER_FREQ4;
                            22068 
P:04E5 44F400 000FA0  3 263722070         move    #4000,x0
P:04E7 77F400 FFFFFC  3 264022071         move    #-4,n7
P:04E9 000000         2 264222072         nop
P:04EA 4C6F00         4 264622073         move    x0,y:(r7+n7)
                            22074 
                            22075 ; 618  |        iCustomEqBand_freq[4] = CENTER_FREQ5;
                            22076 
P:04EB 54F400 002EE0  3 264922078         move    #12000,a1
P:04ED 77F400 FFFFFD  3 265222079         move    #-3,n7
P:04EF 000000         2 265422080         nop
P:04F0 5C6F00         4 265822081         move    a1,y:(r7+n7)
                            22082 
                            22083 ; 619  |
                            22084 ; 620  |        if(bDisplayLabels)   // in case user selected a different band
                            22085 
P:04F1 20000B         2 266022087         tst     b
P:04F2 0AF0AA rrrrrr  6 266622088         jeq     L196
                            22089 
                            22090 ; 621  |        {
                            22091 ; 622  |                SysPostMessage(5,LCD_PRINT_STRING_RSRC,0,56,RSRC_DB_STRING);    // "dB:" (String_db.txt)
                            22092 
P:04F4 283800         2 266822094         move    #$38,a0
P:04F5 46F400 030007  3 267122095         move    #196615,y0
P:04F7 2C0500         2 267322096         move    #5,a1
P:04F8 57F400 0001E1  3 267622097         move    #$1E1,b
P:04FA 5F5F00         2 267822099         move    b,y:(r7)+
P:04FB 585F00         2 268022101         move    a0,y:(r7)+
P:04FC 20001B         2 268222103         clr     b   
P:04FD 5F5F00         2 268422104         move    b,y:(r7)+
P:04FE 4E5F00         2 268622106         move    y0,y:(r7)+
P:04FF 5C5F00         2 268822108         move    a1,y:(r7)+
P:0500 0BF080 rrrrrr  6 269422110         jsr     FSysPostMessage
P:0502 3F0500         2 269622111         move    #5,n7
P:0503 000000         2 269822112         nop
P:0504 204700         2 270022113         move    (r7)-n7
                            22115 
                            22116 ; 623  |                SysPostMessage(5,LCD_PRINT_STRING_RSRC,85,56,RSRC_HZ2_STRING);  // "Hz"
                            22117 
P:0505 54F400 0001E2  3 270322119         move    #482,a1
P:0507 5C5F00         2 270522120         move    a1,y:(r7)+
P:0508 293800         2 270722122         move    #$38,b0
P:0509 595F00         2 270922123         move    b0,y:(r7)+
P:050A 295500         2 271122125         move    #85,b0
P:050B 595F00         2 271322126         move    b0,y:(r7)+
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
P:050C 46F400 030007  3 271622128         move    #196615,y0
P:050E 4E5F00         2 271822129         move    y0,y:(r7)+
P:050F 290500         2 272022131         move    #5,b0
P:0510 595F00         2 272222132         move    b0,y:(r7)+
P:0511 0BF080 rrrrrr  6 272822134         jsr     FSysPostMessage
P:0513 3F0500         2 273022135         move    #5,n7
P:0514 000000         2 273222136         nop
P:0515 204700         2 273422137         move    (r7)-n7
                            22139 
                            22140 ; 624  |        }
                            22141 ; 625  |
                            22142 ; 626  |        // Display center frequency of selected band
                            22143 ; 627  |        SysPostMessage(6,LCD_CLEAR_RANGE,55,56,30,8);   // clear the old CenterFreq
                            22144 
P:0516 2D3800         2 273622146 L196:   move    #$38,b1
P:0517 283700         2 273822147         move    #55,a0
P:0518 260300         2 274022148         move    #<3,y0
P:0519 2C0600         2 274222149         move    #6,a1
P:051A 290800         2 274422150         move    #8,b0
P:051B 595F00         2 274622151         move    b0,y:(r7)+
P:051C 291E00         2 274822153         move    #30,b0
P:051D 595F00         2 275022154         move    b0,y:(r7)+
P:051E 5D5F00         2 275222156         move    b1,y:(r7)+
P:051F 585F00         2 275422158         move    a0,y:(r7)+
P:0520 4E5F00         2 275622160         move    y0,y:(r7)+
P:0521 5C5F00         2 275822162         move    a1,y:(r7)+
P:0522 0BF080 rrrrrr  6 276422164         jsr     FSysPostMessage
P:0524 3F0600         2 276622165         move    #6,n7
P:0525 000000         2 276822166         nop
P:0526 204700         2 277022167         move    (r7)-n7
                            22169 
                            22170 ; 628  |        SysPostMessage(7,LCD_PRINT_NUMBER,55,56,iCustomEqBand_freq[iSelected],5,' ');
                            22171 
P:0527 77F400 FFFFF9  3 277322173         move    #-7,n7
P:0529 000000         2 277522174         nop
P:052A 044F13         4 277922175         lua     (r7)+n7,r3
P:052B 77F400 FFFFFE  3 278222176         move    #-2,n7
P:052D 000000         2 278422177         nop
P:052E 5CEF00         4 278822178         move    y:(r7+n7),a1
P:052F 219B00         2 279022179         move    a1,n3
P:0530 045FA0         2 279222182         movec   m0,n7
P:0531 000000         2 279422183         nop
P:0532 7B6F00         4 279822184         move    n3,y:(r7+n7)
P:0533 044B16         4 280222185         lua     (r3)+n3,r6
P:0534 000000         2 280422186         nop
P:0535 4FE600         2 280622187         move    y:(r6),y1
P:0536 54F400 030013  3 280922188         move    #196627,a1
P:0538 293800         2 281122190         move    #$38,b0
P:0539 2D0700         2 281322191         move    #7,b1
P:053A 280500         2 281522192         move    #5,a0
P:053B 46F400 000020  3 281822193         move    #>$20,y0
P:053D 4E5F00         2 282022194         move    y0,y:(r7)+
P:053E 585F00         2 282222196         move    a0,y:(r7)+
P:053F 4F5F00         2 282422198         move    y1,y:(r7)+
P:0540 595F00         2 282622200         move    b0,y:(r7)+
P:0541 293700         2 282822202         move    #55,b0
P:0542 595F00         2 283022203         move    b0,y:(r7)+
P:0543 5C5F00         2 283222205         move    a1,y:(r7)+
P:0544 5D5F00         2 283422207         move    b1,y:(r7)+
P:0545 0BF080 rrrrrr  6 284022209         jsr     FSysPostMessage
P:0547 3F0700         2 284222210         move    #7,n7
P:0548 000000         2 284422211         nop
P:0549 204700         2 284622212         move    (r7)-n7
                            22214 
                            22215 ; 629  |
                            22216 ; 630  |        // Display gain level of selected band
                            22217 ; 631  |        SysPostMessage(6,LCD_CLEAR_RANGE,16,56,18,8);   // clear the old GainLevel and Neg sign
                            22218 
P:054A 2D3800         2 284822220         move    #$38,b1
P:054B 281000         2 285022221         move    #16,a0
P:054C 290800         2 285222222         move    #8,b0
P:054D 595F00         2 285422223         move    b0,y:(r7)+
P:054E 291200         2 285622225         move    #18,b0
P:054F 595F00         2 285822226         move    b0,y:(r7)+
P:0550 5D5F00         2 286022228         move    b1,y:(r7)+
P:0551 585F00         2 286222230         move    a0,y:(r7)+
P:0552 260300         2 286422232         move    #<3,y0
P:0553 4E5F00         2 286622233         move    y0,y:(r7)+
P:0554 290600         2 286822235         move    #6,b0
P:0555 595F00         2 287022236         move    b0,y:(r7)+
P:0556 0BF080 rrrrrr  6 287622238         jsr     FSysPostMessage
P:0558 3F0600         2 287822239         move    #6,n7
P:0559 000000         2 288022240         nop
P:055A 204700         2 288222241         move    (r7)-n7
                            22243 
                            22244 ; 632  |//      SysWaitOnEvent(0,0,0);       // give display module time to process its msgs
                            22245 ; 633  |
                            22246 ; 634  |        idB_level = g_iCustomEqBand_gain[iSelected];     // get global var value
                            22247 
P:055B 66F400 rrrrrr  3 288522249         move    #Fg_iCustomEqBand_gain,r6
P:055D 045FA0         2 288722250         movec   m0,n7
P:055E 000000         2 288922251         nop
P:055F 7EEF00         4 289322252         move    y:(r7+n7),n6
P:0560 000000         2 289522253         nop
P:0561 204E00         2 289722254         move    (r6)+n6
P:0562 5FE600         2 289922255         move    y:(r6),b
P:0563 200001         2 290122256         tfr     b,a
                            22258 
                            22259 ; 635  |        if(idB_level < 0)
                            22260 
P:0564 77F400 FFFFFE  3 290422262         move    #-2,n7
P:0566 000000         2 290622263         nop
P:0567 5F6F00         4 291022264         move    b,y:(r7+n7)
P:0568 20000B         2 291222265         tst     b
P:0569 0AF0A1 rrrrrr  6 291822266         jge     L197
                            22267 
                            22268 ; 636  |        {       // Display the negative sign  (Negative_sign.bmp)
                            22269 ; 637  |                SysPostMessage(5,LCD_PRINT_RANGE_RSRC,16,56,RSRC_NEGATIVE_SIGN);
                            22270 
P:056B 293800         2 292022272         move    #$38,b0
P:056C 2D0500         2 292222273         move    #5,b1
P:056D 46F400 0001DE  3 292522274         move    #478,y0
P:056F 4E5F00         2 292722275         move    y0,y:(r7)+
P:0570 595F00         2 292922277         move    b0,y:(r7)+
P:0571 291000         2 293122279         move    #16,b0
P:0572 595F00         2 293322280         move    b0,y:(r7)+
P:0573 44F400 030001  3 293622282         move    #$30001,x0
P:0575 4C5F00         2 293822283         move    x0,y:(r7)+
P:0576 5D5F00         2 294022285         move    b1,y:(r7)+
P:0577 0BF080 rrrrrr  6 294622287         jsr     FSysPostMessage
P:0579 3F0500         2 294822288         move    #5,n7
P:057A 000000         2 295022289         nop
P:057B 204700         2 295222290         move    (r7)-n7
                            22293 
                            22294 ; 638  |                idB_level *= -1;     // make local var positive
                            22295 
P:057C 77F400 FFFFFE  3 295522297         move    #-2,n7
P:057E 000000         2 295722298         nop
P:057F 5EEF00         4 296122299         move    y:(r7+n7),a
P:0580 200036         2 296322300         neg     a
                            22302 
                            22303 ; 639  |        }
                            22304 ; 640  |        if((idB_level % 2) != 0)
                            22305 
P:0581 045FA0         2 296522307 L197:   movec   m0,n7
P:0582 000000         2 296722308         nop
P:0583 5C6F00         4 297122309         move    a1,y:(r7+n7)
P:0584 0ACE00 rrrrrr  6 297722310         jclr    #0,a,L198
                            22313 
                            22314 ; 641  |        {       // Display ".5" fraction string  (String_dec_pt5.txt)
                            22315 ; 642  |                SysPostMessage(5,LCD_PRINT_STRING_RSRC,32,56,RSRC_DEC_PT5_STRING);
                            22316 
P:0586 293800         2 297922318         move    #$38,b0
P:0587 2D2000         2 298122319         move    #$20,b1
P:0588 45F400 0001DF  3 298422320         move    #479,x1
P:058A 4D5F00         2 298622321         move    x1,y:(r7)+
P:058B 595F00         2 298822323         move    b0,y:(r7)+
P:058C 5D5F00         2 299022325         move    b1,y:(r7)+
P:058D 51F400 030007  3 299322327         move    #196615,b0
P:058F 595F00         2 299522328         move    b0,y:(r7)+
                            22330 
                            22331 ; 643  |        }
                            22332 
P:0590 0AF080 rrrrrr  6 300122334         jmp     L199
                            22335 
                            22336 ; 644  |        else
                            22337 ; 645  |        {       // Display ".0" fraction string  (String_dec_pt0.txt)
                            22338 ; 646  |                SysPostMessage(5,LCD_PRINT_STRING_RSRC,32,56,RSRC_DEC_PT0_STRING);
                            22339 
P:0592 283800         2 300322341 L198:   move    #$38,a0
P:0593 2C2000         2 300522342         move    #$20,a1
P:0594 57F400 0001E0  3 300822343         move    #$1E0,b
P:0596 5F5F00         2 301022344         move    b,y:(r7)+
P:0597 585F00         2 301222346         move    a0,y:(r7)+
P:0598 5C5F00         2 301422348         move    a1,y:(r7)+
P:0599 50F400 030007  3 301722350         move    #196615,a0
P:059B 585F00         2 301922351         move    a0,y:(r7)+
                            22353 
                            22354 ; 647  |        }
                            22355 
                            22357 L199:
P:059C 290500         2 302122359         move    #5,b0
P:059D 595F00         2 302322360         move    b0,y:(r7)+
P:059E 0BF080 rrrrrr  6 302922362         jsr     FSysPostMessage
P:05A0 3F0500         2 303122363         move    #5,n7
P:05A1 000000         2 303322364         nop
P:05A2 204700         2 303522365         move    (r7)-n7
                            22367 
                            22368 ; 648  |
                            22369 ; 649  |        idB_level /= 2;          // convert gain level to "dB"
                            22370 
P:05A3 045FA0         2 303722372         movec   m0,n7
P:05A4 000000         2 303922373         nop
P:05A5 5FEF00         4 304322374         move    y:(r7+n7),b
P:05A6 20002A         2 304522375         asr     b
                            22380 
                            22381 ; 650  |        SysPostMessage(7,LCD_PRINT_NUMBER,20,56,idB_level,2,' ');
                            22382 
P:05A7 292000         2 304722384         move    #$20,b0
P:05A8 595F00         2 304922385         move    b0,y:(r7)+
P:05A9 290200         2 305122387         move    #2,b0
P:05AA 595F00         2 305322388         move    b0,y:(r7)+
P:05AB 5D5F00         2 305522390         move    b1,y:(r7)+
P:05AC 293800         2 305722393         move    #$38,b0
P:05AD 595F00         2 305922394         move    b0,y:(r7)+
P:05AE 291400         2 306122396         move    #20,b0
P:05AF 595F00         2 306322397         move    b0,y:(r7)+
P:05B0 45F400 030013  3 306622399         move    #196627,x1
P:05B2 4D5F00         2 306822400         move    x1,y:(r7)+
P:05B3 290700         2 307022402         move    #7,b0
P:05B4 595F00         2 307222403         move    b0,y:(r7)+
P:05B5 0BF080 rrrrrr  6 307822405         jsr     FSysPostMessage
P:05B7 3F0700         2 308022406         move    #7,n7
P:05B8 000000         2 308222407         nop
P:05B9 204700         2 308422408         move    (r7)-n7
                            22410 
                            22411 ; 651  |
                            22412 ; 652  |        // Make sure the display (LCD) is updated before returning
                            22413 ; 653  |        SysWaitOnEvent(0,0,0);
                            22414 
P:05BA 300000         2 308622416         move    #0,r0
P:05BB 20001B         2 308822417         clr     b   
P:05BC 200013         2 309022418         clr     a   
P:05BD 0BF080 rrrrrr  6 309622419         jsr     SysWaitOnEvent
                            22420 
                            22421 ; 654  |} // end of DisplayEQStats()
                            22422 
P:05BF 77F400 FFFFF8  3 309922424         move    #-8,n7
P:05C1 000000         2 310122425         nop
P:05C2 05EF7C         4 310522426         movec   y:(r7+n7),ssh
P:05C3 204F00         2 310722428         move    (r7)+n7
P:05C4 00000C         4 311122430         rts
                            22432 
                            22433 ; 655  |
                            22434 ; 656  |
                            22435 ; 657  |// Use SaveRange macro to save a copy of global variable addresses as well as
                            22436 ; 658  |// reserve space for their values in section "Player_settings_Y".  All of which
                            22437 ; 659  |// will be used at shutdown to save user settings in the Settings.dat file.
                            22438 ; 660  |#pragma asm
Y:0000                      22443     org y,"Player_settings_Y":
                            22444     extern y:Fg_iEqSetting
                            22446     extern y:Fg_MarkerMusic
                            22447     extern y:Fg_MarkerVoice
                            22449 
                            22450     SaveRange Fg_iEqSetting,1
                            22450 
                            22450 
Y:0000 rrrrrr               22450     dc      $400000|Fg_iEqSetting
                            22450 
                            22450 
                            22450 
                            22450 
Y:0001 000003               22450     dc      1*3
                            22451     SaveRange Fg_iCustomEqBand_gain,5
                            22451 
                            22451 
Y:0002 rrrrrr               22451     dc      $400000|Fg_iCustomEqBand_gain
                            22451 
                            22451 
                            22451 
                            22451 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:0003 00000F               22451     dc      5*3
                            22453     SaveRange Fg_MarkerMusic,9
                            22453 
                            22453 
Y:0004 rrrrrr               22453     dc      $400000|Fg_MarkerMusic
                            22453 
                            22453 
                            22453 
                            22453 
Y:0005 00001B               22453     dc      9*3
                            22454     SaveRange Fg_MarkerVoice,9
                            22454 
                            22454 
Y:0006 rrrrrr               22454     dc      $400000|Fg_MarkerVoice
                            22454 
                            22454 
                            22454 
                            22454 
Y:0007 00001B               22454     dc      9*3
                            22456     
                            22457 ; 679  |#pragma endasm
                            22458 
                            22538 
                            22539         extern  SysCallFunction, SysWaitOnEvent, FHandlePlayerStateMachine
                            22540         extern  FRefreshDisplay, FShutdownMenu, FSysPostMessage
                            22541         extern  FUpdateAutoShutdownTimer, y:FgEventInfo, y:Fg_MenuFlags
                            22542         extern  y:Fg_iBackLightState
                            22543 
                            22544         global  FDisplayEqBar, FDisplayEqStats, FEqMenu, FNextEQ, FSendEQ
                            22545         global  Fg_iCustomEqBand_gain, Fg_iEqSetting
                            22546 
                            22547         local   L102, L103, L104, L106, L108, L109, L110, L111, L112, L113
                            22548         local   L115, L116, L118, L121, L122, L126, L127, L128, L129, L130
                            22549         local   L131, L132, L134, L143, L146, L148, L149, L151, L152, L153
                            22550         local   L154, L155, L156, L157, L158, L163, L164, L165, L168, L182
                            22551         local   L183, L184, L185, L186, L187, L188, L192, L194, L195, L196
                            22552         local   L197, L198, L199
                            22553 
                            22554         calls   "DisplayEqBar", "SysPostMessage", "SysWaitOnEvent"
                            22555         calls   "DisplayEqStats", "SysPostMessage", "SysWaitOnEvent"
                            22556         calls   "EqMenu", "DisplayEqBar", "DisplayEqStats", "NextEQ"
                            22557         calls   "EqMenu", "SendEQ", "SysCallFunction", "SysPostMessage"
                            22558         calls   "EqMenu", "SysWaitOnEvent", "UpdateAutoShutdownTimer"
                            22559         calls   "NextEQ", "SendEQ"
                            22560         calls   "SendEQ", "SysPostMessage", "SysWaitOnEvent"
                            22561 
