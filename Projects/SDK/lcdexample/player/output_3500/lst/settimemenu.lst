TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfcee1b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;  settimemenu.c:
                               96 ; 1    |////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// SigmaTel Inc. Copyright 2003
                               98 ; 3    |// Filename: SetTimeMenu.c (LCD version)
                               99 ; 4    |// Description: User interface to change the time and set the RTC
                              100 ; 5    |////////////////////////////////////////////////////////////////////////////////
                              101 ; 6    |
                              102 ; 7    |#include "exec.h"
                              103 
                              105 
                              106 ; 1    |#ifndef EXEC_H
                              107 ; 2    |#define EXEC_H
                              108 ; 3    |
                              109 ; 4    |
                              110 ; 5    |void _reentrant SysPostMessage(int iLength,...);
                              111 ; 6    |int _asmfunc GetMessage(struct MessageQueueDescriptor*,struct CMessage * );
                              112 ; 7    |long _asmfunc SysGetCurrentTime(void);
                              113 ; 8    |
                              114 ; 9    |
                              115 ; 10   |#endif
                              116 
                              118 
                              119 ; 8    |#include "types.h"
                              120 
                              122 
                              123 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              124 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              125 ; 3    |//
                              126 ; 4    |// Filename: types.h
                              127 ; 5    |// Description: Standard data types
                              128 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              129 ; 7    |
                              130 ; 8    |#ifndef _TYPES_H
                              131 ; 9    |#define _TYPES_H
                              132 ; 10   |
                              133 ; 11   |// TODO:  move this outta here!
                              134 ; 12   |#if !defined(NOERROR)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              135 ; 13   |#define NOERROR 0
                              136 ; 14   |#define SUCCESS 0
                              137 ; 15   |#endif 
                              138 ; 16   |#if !defined(SUCCESS)
                              139 ; 17   |#define SUCCESS  0
                              140 ; 18   |#endif
                              141 ; 19   |#if !defined(ERROR)
                              142 ; 20   |#define ERROR   -1
                              143 ; 21   |#endif
                              144 ; 22   |#if !defined(FALSE)
                              145 ; 23   |#define FALSE 0
                              146 ; 24   |#endif
                              147 ; 25   |#if !defined(TRUE)
                              148 ; 26   |#define TRUE  1
                              149 ; 27   |#endif
                              150 ; 28   |
                              151 ; 29   |#if !defined(NULL)
                              152 ; 30   |#define NULL 0
                              153 ; 31   |#endif
                              154 ; 32   |
                              155 ; 33   |#define MAX_INT     0x7FFFFF
                              156 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              157 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              158 ; 36   |#define MAX_ULONG   (-1) 
                              159 ; 37   |
                              160 ; 38   |#define WORD_SIZE   24              // word size in bits
                              161 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              162 ; 40   |
                              163 ; 41   |
                              164 ; 42   |#define BYTE    unsigned char       // btVarName
                              165 ; 43   |#define CHAR    signed char         // cVarName
                              166 ; 44   |#define USHORT  unsigned short      // usVarName
                              167 ; 45   |#define SHORT   unsigned short      // sVarName
                              168 ; 46   |#define WORD    unsigned int        // wVarName
                              169 ; 47   |#define INT     signed int          // iVarName
                              170 ; 48   |#define DWORD   unsigned long       // dwVarName
                              171 ; 49   |#define LONG    signed long         // lVarName
                              172 ; 50   |#define BOOL    unsigned int        // bVarName
                              173 ; 51   |#define FRACT   _fract              // frVarName
                              174 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              175 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              176 ; 54   |#define FLOAT   float               // fVarName
                              177 ; 55   |#define DBL     double              // dVarName
                              178 ; 56   |#define ENUM    enum                // eVarName
                              179 ; 57   |#define CMX     _complex            // cmxVarName
                              180 ; 58   |typedef WORD UCS3;                   // 
                              181 ; 59   |
                              182 ; 60   |#define UINT16  unsigned short
                              183 ; 61   |#define UINT8   unsigned char   
                              184 ; 62   |#define UINT32  unsigned long
                              185 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              186 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              187 ; 65   |#define WCHAR   UINT16
                              188 ; 66   |
                              189 ; 67   |//UINT128 is 16 bytes or 6 words
                              190 ; 68   |typedef struct UINT128_3500 {   
                              191 ; 69   |    int val[6];     
                              192 ; 70   |} UINT128_3500;
                              193 ; 71   |
                              194 ; 72   |#define UINT128   UINT128_3500
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              195 ; 73   |
                              196 ; 74   |// Little endian word packed byte strings:   
                              197 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              198 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              199 ; 77   |// Little endian word packed byte strings:   
                              200 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              201 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              202 ; 80   |
                              203 ; 81   |// Declare Memory Spaces To Use When Coding
                              204 ; 82   |// A. Sector Buffers
                              205 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              206 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              207 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              208 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              209 
                              211 
                              212 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              213 ; 88   |// B. Media DDI Memory
                              214 ; 89   |#define MEDIA_DDI_MEM _Y
                              215 ; 90   |
                              216 ; 91   |
                              217 ; 92   |
                              218 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              219 ; 94   |// Examples of circular pointers:
                              220 ; 95   |//    INT CIRC cpiVarName
                              221 ; 96   |//    DWORD CIRC cpdwVarName
                              222 ; 97   |
                              223 ; 98   |#define RETCODE INT                 // rcVarName
                              224 ; 99   |
                              225 ; 100  |// generic bitfield structure
                              226 ; 101  |struct Bitfield {
                              227 ; 102  |    unsigned int B0  :1;
                              228 ; 103  |    unsigned int B1  :1;
                              229 ; 104  |    unsigned int B2  :1;
                              230 ; 105  |    unsigned int B3  :1;
                              231 ; 106  |    unsigned int B4  :1;
                              232 ; 107  |    unsigned int B5  :1;
                              233 ; 108  |    unsigned int B6  :1;
                              234 ; 109  |    unsigned int B7  :1;
                              235 ; 110  |    unsigned int B8  :1;
                              236 ; 111  |    unsigned int B9  :1;
                              237 ; 112  |    unsigned int B10 :1;
                              238 ; 113  |    unsigned int B11 :1;
                              239 ; 114  |    unsigned int B12 :1;
                              240 ; 115  |    unsigned int B13 :1;
                              241 ; 116  |    unsigned int B14 :1;
                              242 ; 117  |    unsigned int B15 :1;
                              243 ; 118  |    unsigned int B16 :1;
                              244 ; 119  |    unsigned int B17 :1;
                              245 ; 120  |    unsigned int B18 :1;
                              246 ; 121  |    unsigned int B19 :1;
                              247 ; 122  |    unsigned int B20 :1;
                              248 ; 123  |    unsigned int B21 :1;
                              249 ; 124  |    unsigned int B22 :1;
                              250 ; 125  |    unsigned int B23 :1;
                              251 ; 126  |};
                              252 ; 127  |
                              253 ; 128  |union BitInt {
                              254 ; 129  |        struct Bitfield B;
                              255 ; 130  |        int        I;
                              256 ; 131  |};
                              257 ; 132  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              258 ; 133  |#define MAX_MSG_LENGTH 10
                              259 ; 134  |struct CMessage
                              260 ; 135  |{
                              261 ; 136  |        unsigned int m_uLength;
                              262 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              263 ; 138  |};
                              264 ; 139  |
                              265 ; 140  |typedef struct {
                              266 ; 141  |    WORD m_wLength;
                              267 ; 142  |    WORD m_wMessage;
                              268 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              269 ; 144  |} Message;
                              270 ; 145  |
                              271 ; 146  |struct MessageQueueDescriptor
                              272 ; 147  |{
                              273 ; 148  |        int *m_pBase;
                              274 ; 149  |        int m_iModulo;
                              275 ; 150  |        int m_iSize;
                              276 ; 151  |        int *m_pHead;
                              277 ; 152  |        int *m_pTail;
                              278 ; 153  |};
                              279 ; 154  |
                              280 ; 155  |struct ModuleEntry
                              281 ; 156  |{
                              282 ; 157  |    int m_iSignaledEventMask;
                              283 ; 158  |    int m_iWaitEventMask;
                              284 ; 159  |    int m_iResourceOfCode;
                              285 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              286 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              287 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              288 ; 163  |    int m_uTimeOutHigh;
                              289 ; 164  |    int m_uTimeOutLow;
                              290 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              291 ; 166  |};
                              292 ; 167  |
                              293 ; 168  |union WaitMask{
                              294 ; 169  |    struct B{
                              295 ; 170  |        unsigned int m_bNone     :1;
                              296 ; 171  |        unsigned int m_bMessage  :1;
                              297 ; 172  |        unsigned int m_bTimer    :1;
                              298 ; 173  |        unsigned int m_bButton   :1;
                              299 ; 174  |    } B;
                              300 ; 175  |    int I;
                              301 ; 176  |} ;
                              302 ; 177  |
                              303 ; 178  |
                              304 ; 179  |struct Button {
                              305 ; 180  |        WORD wButtonEvent;
                              306 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              307 ; 182  |};
                              308 ; 183  |
                              309 ; 184  |struct Message {
                              310 ; 185  |        WORD wMsgLength;
                              311 ; 186  |        WORD wMsgCommand;
                              312 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              313 ; 188  |};
                              314 ; 189  |
                              315 ; 190  |union EventTypes {
                              316 ; 191  |        struct CMessage msg;
                              317 ; 192  |        struct Button Button ;
                              318 ; 193  |        struct Message Message;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              319 ; 194  |};
                              320 ; 195  |
                              321 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              322 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              323 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              324 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              325 ; 200  |
                              326 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              327 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              328 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              329 ; 204  |
                              330 ; 205  |#if DEBUG
                              331 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              332 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              333 ; 208  |#else 
                              334 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              335 ; 210  |#define DebugBuildAssert(x)    
                              336 ; 211  |#endif
                              337 ; 212  |
                              338 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              339 ; 214  |//  #pragma asm
                              340 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              341 ; 216  |//  #pragma endasm
                              342 ; 217  |
                              343 ; 218  |
                              344 ; 219  |#ifdef COLOR_262K
                              345 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              346 ; 221  |#elif defined(COLOR_65K)
                              347 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              348 ; 223  |#else
                              349 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              350 ; 225  |#endif
                              351 ; 226  |    
                              352 ; 227  |#endif // #ifndef _TYPES_H
                              353 
                              355 
                              356 ; 9    |#include "menumanager.h"
                              357 
                              359 
                              360 ; 1    |#ifndef _EXEC_H
                              361 ; 2    |#define _EXEC_H
                              362 ; 3    |
                              363 ; 4    |#include "types.h"
                              364 
                              366 
                              367 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              368 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              369 ; 3    |//
                              370 ; 4    |// Filename: types.h
                              371 ; 5    |// Description: Standard data types
                              372 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              373 ; 7    |
                              374 ; 8    |#ifndef _TYPES_H
                              375 ; 9    |#define _TYPES_H
                              376 ; 10   |
                              377 ; 11   |// TODO:  move this outta here!
                              378 ; 12   |#if !defined(NOERROR)
                              379 ; 13   |#define NOERROR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              380 ; 14   |#define SUCCESS 0
                              381 ; 15   |#endif 
                              382 ; 16   |#if !defined(SUCCESS)
                              383 ; 17   |#define SUCCESS  0
                              384 ; 18   |#endif
                              385 ; 19   |#if !defined(ERROR)
                              386 ; 20   |#define ERROR   -1
                              387 ; 21   |#endif
                              388 ; 22   |#if !defined(FALSE)
                              389 ; 23   |#define FALSE 0
                              390 ; 24   |#endif
                              391 ; 25   |#if !defined(TRUE)
                              392 ; 26   |#define TRUE  1
                              393 ; 27   |#endif
                              394 ; 28   |
                              395 ; 29   |#if !defined(NULL)
                              396 ; 30   |#define NULL 0
                              397 ; 31   |#endif
                              398 ; 32   |
                              399 ; 33   |#define MAX_INT     0x7FFFFF
                              400 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              401 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              402 ; 36   |#define MAX_ULONG   (-1) 
                              403 ; 37   |
                              404 ; 38   |#define WORD_SIZE   24              // word size in bits
                              405 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              406 ; 40   |
                              407 ; 41   |
                              408 ; 42   |#define BYTE    unsigned char       // btVarName
                              409 ; 43   |#define CHAR    signed char         // cVarName
                              410 ; 44   |#define USHORT  unsigned short      // usVarName
                              411 ; 45   |#define SHORT   unsigned short      // sVarName
                              412 ; 46   |#define WORD    unsigned int        // wVarName
                              413 ; 47   |#define INT     signed int          // iVarName
                              414 ; 48   |#define DWORD   unsigned long       // dwVarName
                              415 ; 49   |#define LONG    signed long         // lVarName
                              416 ; 50   |#define BOOL    unsigned int        // bVarName
                              417 ; 51   |#define FRACT   _fract              // frVarName
                              418 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              419 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              420 ; 54   |#define FLOAT   float               // fVarName
                              421 ; 55   |#define DBL     double              // dVarName
                              422 ; 56   |#define ENUM    enum                // eVarName
                              423 ; 57   |#define CMX     _complex            // cmxVarName
                              424 ; 58   |typedef WORD UCS3;                   // 
                              425 ; 59   |
                              426 ; 60   |#define UINT16  unsigned short
                              427 ; 61   |#define UINT8   unsigned char   
                              428 ; 62   |#define UINT32  unsigned long
                              429 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              430 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              431 ; 65   |#define WCHAR   UINT16
                              432 ; 66   |
                              433 ; 67   |//UINT128 is 16 bytes or 6 words
                              434 ; 68   |typedef struct UINT128_3500 {   
                              435 ; 69   |    int val[6];     
                              436 ; 70   |} UINT128_3500;
                              437 ; 71   |
                              438 ; 72   |#define UINT128   UINT128_3500
                              439 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              440 ; 74   |// Little endian word packed byte strings:   
                              441 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              442 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              443 ; 77   |// Little endian word packed byte strings:   
                              444 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              445 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              446 ; 80   |
                              447 ; 81   |// Declare Memory Spaces To Use When Coding
                              448 ; 82   |// A. Sector Buffers
                              449 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              450 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              451 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              452 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              453 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              454 ; 88   |// B. Media DDI Memory
                              455 ; 89   |#define MEDIA_DDI_MEM _Y
                              456 ; 90   |
                              457 ; 91   |
                              458 ; 92   |
                              459 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              460 ; 94   |// Examples of circular pointers:
                              461 ; 95   |//    INT CIRC cpiVarName
                              462 ; 96   |//    DWORD CIRC cpdwVarName
                              463 ; 97   |
                              464 ; 98   |#define RETCODE INT                 // rcVarName
                              465 ; 99   |
                              466 ; 100  |// generic bitfield structure
                              467 ; 101  |struct Bitfield {
                              468 ; 102  |    unsigned int B0  :1;
                              469 ; 103  |    unsigned int B1  :1;
                              470 ; 104  |    unsigned int B2  :1;
                              471 ; 105  |    unsigned int B3  :1;
                              472 ; 106  |    unsigned int B4  :1;
                              473 ; 107  |    unsigned int B5  :1;
                              474 ; 108  |    unsigned int B6  :1;
                              475 ; 109  |    unsigned int B7  :1;
                              476 ; 110  |    unsigned int B8  :1;
                              477 ; 111  |    unsigned int B9  :1;
                              478 ; 112  |    unsigned int B10 :1;
                              479 ; 113  |    unsigned int B11 :1;
                              480 ; 114  |    unsigned int B12 :1;
                              481 ; 115  |    unsigned int B13 :1;
                              482 ; 116  |    unsigned int B14 :1;
                              483 ; 117  |    unsigned int B15 :1;
                              484 ; 118  |    unsigned int B16 :1;
                              485 ; 119  |    unsigned int B17 :1;
                              486 ; 120  |    unsigned int B18 :1;
                              487 ; 121  |    unsigned int B19 :1;
                              488 ; 122  |    unsigned int B20 :1;
                              489 ; 123  |    unsigned int B21 :1;
                              490 ; 124  |    unsigned int B22 :1;
                              491 ; 125  |    unsigned int B23 :1;
                              492 ; 126  |};
                              493 ; 127  |
                              494 ; 128  |union BitInt {
                              495 ; 129  |        struct Bitfield B;
                              496 ; 130  |        int        I;
                              497 ; 131  |};
                              498 ; 132  |
                              499 ; 133  |#define MAX_MSG_LENGTH 10
                              500 ; 134  |struct CMessage
                              501 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              502 ; 136  |        unsigned int m_uLength;
                              503 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              504 ; 138  |};
                              505 ; 139  |
                              506 ; 140  |typedef struct {
                              507 ; 141  |    WORD m_wLength;
                              508 ; 142  |    WORD m_wMessage;
                              509 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              510 ; 144  |} Message;
                              511 ; 145  |
                              512 ; 146  |struct MessageQueueDescriptor
                              513 ; 147  |{
                              514 ; 148  |        int *m_pBase;
                              515 ; 149  |        int m_iModulo;
                              516 ; 150  |        int m_iSize;
                              517 ; 151  |        int *m_pHead;
                              518 ; 152  |        int *m_pTail;
                              519 ; 153  |};
                              520 ; 154  |
                              521 ; 155  |struct ModuleEntry
                              522 ; 156  |{
                              523 ; 157  |    int m_iSignaledEventMask;
                              524 ; 158  |    int m_iWaitEventMask;
                              525 ; 159  |    int m_iResourceOfCode;
                              526 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              527 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              528 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              529 ; 163  |    int m_uTimeOutHigh;
                              530 ; 164  |    int m_uTimeOutLow;
                              531 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              532 ; 166  |};
                              533 ; 167  |
                              534 ; 168  |union WaitMask{
                              535 ; 169  |    struct B{
                              536 ; 170  |        unsigned int m_bNone     :1;
                              537 ; 171  |        unsigned int m_bMessage  :1;
                              538 ; 172  |        unsigned int m_bTimer    :1;
                              539 ; 173  |        unsigned int m_bButton   :1;
                              540 ; 174  |    } B;
                              541 ; 175  |    int I;
                              542 ; 176  |} ;
                              543 ; 177  |
                              544 ; 178  |
                              545 ; 179  |struct Button {
                              546 ; 180  |        WORD wButtonEvent;
                              547 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              548 ; 182  |};
                              549 ; 183  |
                              550 ; 184  |struct Message {
                              551 ; 185  |        WORD wMsgLength;
                              552 ; 186  |        WORD wMsgCommand;
                              553 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              554 ; 188  |};
                              555 ; 189  |
                              556 ; 190  |union EventTypes {
                              557 ; 191  |        struct CMessage msg;
                              558 ; 192  |        struct Button Button ;
                              559 ; 193  |        struct Message Message;
                              560 ; 194  |};
                              561 ; 195  |
                              562 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              563 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              564 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              565 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              566 ; 200  |
                              567 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              568 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              569 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              570 ; 204  |
                              571 ; 205  |#if DEBUG
                              572 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              573 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              574 ; 208  |#else 
                              575 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              576 ; 210  |#define DebugBuildAssert(x)    
                              577 ; 211  |#endif
                              578 ; 212  |
                              579 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              580 ; 214  |//  #pragma asm
                              581 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              582 ; 216  |//  #pragma endasm
                              583 ; 217  |
                              584 ; 218  |
                              585 ; 219  |#ifdef COLOR_262K
                              586 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              587 ; 221  |#elif defined(COLOR_65K)
                              588 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              589 ; 223  |#else
                              590 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              591 ; 225  |#endif
                              592 ; 226  |    
                              593 ; 227  |#endif // #ifndef _TYPES_H
                              594 
                              596 
                              597 ; 5    |
                              598 ; 6    |int _asmfunc SysWaitOnEvent(unsigned int uEvent,struct CMessage *,int uLength);
                              599 ; 7    |int _asmfunc SysCallFunction(unsigned int RESOURCE,int _reentrant (int,int,int*),  int, in
                                  t, int *);
                              600 ; 8    |
                              601 ; 9    |#if !defined(NULL)
                              602 ; 10   |#define NULL 0
                              603 ; 11   |#endif 
                              604 ; 12   |
                              605 ; 13   |#if !defined(FALSE)
                              606 ; 14   |#define FALSE 0
                              607 ; 15   |#endif
                              608 ; 16   |#if !defined(TRUE)
                              609 ; 17   |#define TRUE  !FALSE
                              610 ; 18   |#endif
                              611 ; 19   |
                              612 ; 20   |// The same memory location contains either a menu message or button event. 
                              613 ; 21   |// The button info is stored in the first word or the entire message is stored.
                              614 ; 22   |
                              615 ; 23   |// CMessage is kept for backards compatibility.
                              616 ; 24   |// The union and 2 new structures are added to aid in readability.
                              617 ; 25   |
                              618 ; 26   |
                              619 ; 27   |#include "messages.h"
                              620 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              622 
                              623 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              624 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              625 ; 3    |// Message defs
                              626 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              627 ; 5    |
                              628 ; 6    |#if (!defined(MSGEQU_INC))
                              629 ; 7    |#define MSGEQU_INC 1
                              630 ; 8    |
                              631 ; 9    |
                              632 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                              633 ; 11   |
                              634 ; 12   |
                              635 ; 13   |#define MSG_TYPE_DECODER 0x000000
                              636 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                              637 ; 15   |#define MSG_TYPE_PARSER 0x020000
                              638 ; 16   |#define MSG_TYPE_LCD 0x030000
                              639 ; 17   |#define MSG_TYPE_MIXER 0x040000
                              640 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                              641 ; 19   |#define MSG_TYPE_MENU 0x060000
                              642 ; 20   |#define MSG_TYPE_LED 0x070000
                              643 ; 21   |#define MSG_TYPE_TUNER 0x080000
                              644 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                              645 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              646 ; 24   |// Equalizer and other effects
                              647 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                              648 ; 26   |#if (defined(USE_PLAYLIST3))
                              649 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                              650 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                              651 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                              652 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                              653 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                              654 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                              655 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                              656 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                              657 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                              658 ; 36   |#if defined(USE_PLAYLIST5)
                              659 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                              660 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                              661 ; 39   |#endif // if @def('USE_PLAYLIST5')
                              662 ; 40   |
                              663 ; 41   |// Message Structure Offsets
                              664 ; 42   |#define MSG_Length 0
                              665 ; 43   |#define MSG_ID 1
                              666 ; 44   |#define MSG_Argument1 2
                              667 ; 45   |#define MSG_Argument2 3
                              668 ; 46   |#define MSG_Argument3 4
                              669 ; 47   |#define MSG_Argument4 5
                              670 ; 48   |#define MSG_Argument5 6
                              671 ; 49   |#define MSG_Argument6 7
                              672 ; 50   |
                              673 ; 51   |
                              674 ; 52   |
                              675 ; 53   |// LCD Message IDs
                              676 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              677 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              678 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              679 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              680 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              681 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              682 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                              683 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              684 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                              685 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                              686 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                              687 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                              688 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                              689 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                              690 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                              691 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                              692 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                              693 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                              694 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                              695 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                              696 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                              697 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                              698 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                              699 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                              700 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                              701 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                              702 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                              703 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                              704 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                              705 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                              706 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                              707 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                              708 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                              709 ; 87   |//send a NULL as Param1 to return to root frame buffer
                              710 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                              711 ; 89   |//Param1 = left
                              712 ; 90   |//Param2 = top
                              713 ; 91   |//Param3 = right
                              714 ; 92   |//Param4 = bottom
                              715 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                              716 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                              717 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                              718 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                              719 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                              720 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                              721 ; 99   |
                              722 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                              723 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                              724 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                              725 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                              726 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                              727 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                              728 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                              729 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                              730 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                              731 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                              732 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                              733 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                              734 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                              735 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                              736 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                              737 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                              738 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                              739 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                              740 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                              741 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                              742 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                              743 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                              744 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                              745 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              746 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                              747 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                              748 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                              749 ; 127  |
                              750 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                              751 ; 129  |
                              752 ; 130  |#if defined(CLCD_16BIT)
                              753 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                              754 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                              755 ; 133  |
                              756 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                              757 ; 135  |#else 
                              758 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                              759 ; 137  |#endif
                              760 ; 138  |
                              761 ; 139  |// If you change the LCD message ID's then you must
                              762 ; 140  |// also change the jump table in lcdapi.asm
                              763 ; 141  |
                              764 ; 142  |// Character LCD Message IDs
                              765 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              766 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              767 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              768 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              769 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              770 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              771 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              772 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              773 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                              774 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              775 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                              776 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              777 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              778 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                              779 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              780 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              781 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              782 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              783 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              784 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              785 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                              786 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                              787 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              788 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              789 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                              790 ; 168  |// also change the jump table in lcdapi.asm
                              791 ; 169  |
                              792 ; 170  |// Decoder Message IDs
                              793 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                              794 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                              795 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                              796 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                              797 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                              798 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                              799 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                              800 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                              801 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                              802 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                              803 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                              804 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                              805 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                              806 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                              807 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              808 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                              809 ; 187  |// If you change the Decoder message ID's, then you must
                              810 ; 188  |// also change the jump table in decoder_overlay.asm
                              811 ; 189  |// and in dec_adpcm_overlay.asm.
                              812 ; 190  |
                              813 ; 191  |// Encoder Message IDs
                              814 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                              815 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                              816 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                              817 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                              818 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                              819 ; 197  |// If you change the Encoder message ID's, then you must
                              820 ; 198  |// also change the jump table in all encoder overlay modules.
                              821 ; 199  |
                              822 ; 200  |// Parser Message IDs
                              823 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                              824 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                              825 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                              826 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                              827 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                              828 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                              829 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                              830 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                              831 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                              832 ; 210  |// If you change the Parser message ID's, then you must
                              833 ; 211  |// also change the jump table in parser.asm
                              834 ; 212  |
                              835 ; 213  |// Button Message IDs
                              836 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                              837 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                              838 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                              839 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                              840 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                              841 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                              842 ; 220  |
                              843 ; 221  |// Mixer Message IDs
                              844 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                              845 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                              846 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                              847 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                              848 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                              849 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                              850 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                              851 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                              852 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                              853 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                              854 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                              855 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                              856 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                              857 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                              858 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                              859 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                              860 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                              861 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                              862 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                              863 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                              864 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                              865 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                              866 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                              867 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                              868 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                              869 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              870 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                              871 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                              872 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                              873 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                              874 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                              875 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                              876 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                              877 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                              878 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                              879 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                              880 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                              881 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                              882 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                              883 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                              884 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                              885 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                              886 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                              887 ; 265  |// If you change the mixer message ID's then you must
                              888 ; 266  |// also change the jump table in mixer.asm
                              889 ; 267  |#define MIXER_ON 0
                              890 ; 268  |#define MIXER_OFF 1
                              891 ; 269  |
                              892 ; 270  |
                              893 ; 271  |// System Message IDs
                              894 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                              895 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                              896 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                              897 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                              898 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                              899 ; 277  |// If you change the system message ID's then you must
                              900 ; 278  |// also change the jump table in systemapi.asm
                              901 ; 279  |
                              902 ; 280  |// Menu IDs
                              903 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                              904 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                              905 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                              906 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                              907 ; 285  |//sub parameters for this message:
                              908 ; 286  |#define RECORDER_START 0
                              909 ; 287  |#define RECORDER_PAUSE 0x2000
                              910 ; 288  |#define RECORDER_RESUME 0x4000
                              911 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                              912 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                              913 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                              914 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                              915 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                              916 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                              917 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                              918 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                              919 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                              920 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                              921 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                              922 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                              923 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                              924 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                              925 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                              926 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                              927 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                              928 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                              929 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                              930 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                              931 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              932 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                              933 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                              934 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                              935 ; 313  |
                              936 ; 314  |// Note that other versions of this file have different msg equates.
                              937 ; 315  |// If you change the system message ID's then you must
                              938 ; 316  |// also change the jump table in all menu *.asm
                              939 ; 317  |
                              940 ; 318  |// LED Message IDs
                              941 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                              942 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                              943 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                              944 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                              945 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                              946 ; 324  |// If you change the LeD message ID's then you must
                              947 ; 325  |// also change the jump table in ledapi.asm
                              948 ; 326  |
                              949 ; 327  |#if (!defined(REMOVE_FM))
                              950 ; 328  |// FM Tuner Message IDs
                              951 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                              952 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                              953 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                              954 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                              955 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                              956 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                              957 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                              958 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                              959 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                              960 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                              961 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                              962 ; 340  |//one parameter--the sensitivity in uV
                              963 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                              964 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                              965 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                              966 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                              967 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                              968 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                              969 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                              970 ; 348  |#endif
                              971 ; 349  |
                              972 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                              973 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                              974 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                              975 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                              976 ; 354  |
                              977 ; 355  |
                              978 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                              979 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                              980 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                              981 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                              982 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                              983 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                              984 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                              985 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                              986 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                              987 ; 365  |
                              988 ; 366  |#if (defined(USE_PLAYLIST3))
                              989 ; 367  |// Music Library
                              990 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                              991 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                              992 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                              993 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              994 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                              995 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                              996 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                              997 ; 375  |
                              998 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                              999 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                             1000 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                             1001 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                             1002 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                             1003 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                             1004 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                             1005 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                             1006 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                             1007 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                             1008 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                             1009 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                             1010 ; 388  |
                             1011 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1012 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1013 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1014 ; 392  |
                             1015 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1016 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1017 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1018 ; 396  |
                             1019 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1020 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1021 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1022 ; 400  |
                             1023 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                             1024 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                             1025 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                             1026 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                             1027 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                             1028 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                             1029 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                             1030 ; 408  |
                             1031 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1032 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1033 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1034 ; 412  |
                             1035 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                             1036 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                             1037 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                             1038 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                             1039 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                             1040 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                             1041 ; 419  |
                             1042 ; 420  |#if defined(USE_PLAYLIST5)
                             1043 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                             1044 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                             1045 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                             1046 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                             1047 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                             1048 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                             1049 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                             1050 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                             1051 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                             1052 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                             1053 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                             1054 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                             1055 ; 433  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1056 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                             1057 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                             1058 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                             1059 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                             1060 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                             1061 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                             1062 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                             1063 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                             1064 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                             1065 ; 443  |#endif // if @def('USE_PLAYLIST5')
                             1066 ; 444  |// Events
                             1067 ; 445  |// No event
                             1068 ; 446  |#define EVENT_NONE 0x000001   
                             1069 ; 447  |// A message has been posted
                             1070 ; 448  |#define EVENT_MESSAGE 0x000002   
                             1071 ; 449  |// Run if wait time elapsed
                             1072 ; 450  |#define EVENT_TIMER 0x000004   
                             1073 ; 451  |// Run if a button event occured
                             1074 ; 452  |#define EVENT_BUTTON 0x000008   
                             1075 ; 453  |// Run if a background event occured
                             1076 ; 454  |#define EVENT_BACKGROUND 0x000010   
                             1077 ; 455  |// The executive should immediately repeat this module
                             1078 ; 456  |#define EVENT_REPEAT 0x000020   
                             1079 ; 457  |// Run the module's init routine
                             1080 ; 458  |#define EVENT_INIT 0x800000   
                             1081 ; 459  |
                             1082 ; 460  |#define EVENT_NONE_BITPOS 0
                             1083 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                             1084 ; 462  |#define EVENT_TIMER_BITPOS 2
                             1085 ; 463  |#define EVENT_BUTTON_BITPOS 3
                             1086 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                             1087 ; 465  |#define EVENT_REPEAT_BITPOS 5
                             1088 ; 466  |#define EVENT_INIT_BITPOS 23
                             1089 ; 467  |
                             1090 ; 468  |// Parser Message Buffers
                             1091 ; 469  |#define ParserPlayBit 0
                             1092 ; 470  |#define ButtonPressBit 1
                             1093 ; 471  |#define ParserRwndBit 1
                             1094 ; 472  |#define ParserFfwdBit 2
                             1095 ; 473  |
                             1096 ; 474  |//NextSong Message Parameters
                             1097 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                             1098 ; 476  |#define NEXT_SONG 2             
                             1099 ; 477  |// ButtonPressBit1 cleared
                             1100 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                             1101 ; 479  |// ButtonPressBit1 set
                             1102 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                             1103 ; 481  |// NextSong + Ffwd
                             1104 ; 482  |#define NEXT_SONG_FFWD 4          
                             1105 ; 483  |
                             1106 ; 484  |//PrevSong Message Parameters
                             1107 ; 485  |// PrevSong + Stopped
                             1108 ; 486  |#define PREV_SONG 0          
                             1109 ; 487  |// PrevSong + Play
                             1110 ; 488  |#define PREV_SONG_PLAY 1          
                             1111 ; 489  |// PrevSong + Rwnd
                             1112 ; 490  |#define PREV_SONG_RWND 2          
                             1113 ; 491  |
                             1114 ; 492  |
                             1115 ; 493  |
                             1116 ; 494  |
                             1117 ; 495  |#endif // IF (!@def(MSGEQU_INC))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1118 ; 496  |
                             1119 ; 497  |
                             1120 
                             1122 
                             1123 ; 28   |
                             1124 ; 29   |#endif 
                             1125 
                             1127 
                             1128 ; 10   |#include "messages.h"
                             1129 
                             1131 
                             1132 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             1133 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                             1134 ; 3    |// Message defs
                             1135 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             1136 ; 5    |
                             1137 ; 6    |#if (!defined(MSGEQU_INC))
                             1138 ; 7    |#define MSGEQU_INC 1
                             1139 ; 8    |
                             1140 ; 9    |
                             1141 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                             1142 ; 11   |
                             1143 ; 12   |
                             1144 ; 13   |#define MSG_TYPE_DECODER 0x000000
                             1145 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                             1146 ; 15   |#define MSG_TYPE_PARSER 0x020000
                             1147 ; 16   |#define MSG_TYPE_LCD 0x030000
                             1148 ; 17   |#define MSG_TYPE_MIXER 0x040000
                             1149 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                             1150 ; 19   |#define MSG_TYPE_MENU 0x060000
                             1151 ; 20   |#define MSG_TYPE_LED 0x070000
                             1152 ; 21   |#define MSG_TYPE_TUNER 0x080000
                             1153 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                             1154 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                             1155 ; 24   |// Equalizer and other effects
                             1156 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                             1157 ; 26   |#if (defined(USE_PLAYLIST3))
                             1158 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                             1159 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                             1160 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                             1161 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                             1162 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                             1163 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                             1164 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                             1165 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                             1166 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                             1167 ; 36   |#if defined(USE_PLAYLIST5)
                             1168 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                             1169 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                             1170 ; 39   |#endif // if @def('USE_PLAYLIST5')
                             1171 ; 40   |
                             1172 ; 41   |// Message Structure Offsets
                             1173 ; 42   |#define MSG_Length 0
                             1174 ; 43   |#define MSG_ID 1
                             1175 ; 44   |#define MSG_Argument1 2
                             1176 ; 45   |#define MSG_Argument2 3
                             1177 ; 46   |#define MSG_Argument3 4
                             1178 ; 47   |#define MSG_Argument4 5
                             1179 ; 48   |#define MSG_Argument5 6
                             1180 ; 49   |#define MSG_Argument6 7
                             1181 ; 50   |
                             1182 ; 51   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1183 ; 52   |
                             1184 ; 53   |// LCD Message IDs
                             1185 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                             1186 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                             1187 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                             1188 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                             1189 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                             1190 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                             1191 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                             1192 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                             1193 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                             1194 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                             1195 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                             1196 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                             1197 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                             1198 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                             1199 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                             1200 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                             1201 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                             1202 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                             1203 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                             1204 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                             1205 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                             1206 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                             1207 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                             1208 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                             1209 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                             1210 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                             1211 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                             1212 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                             1213 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                             1214 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                             1215 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                             1216 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                             1217 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                             1218 ; 87   |//send a NULL as Param1 to return to root frame buffer
                             1219 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                             1220 ; 89   |//Param1 = left
                             1221 ; 90   |//Param2 = top
                             1222 ; 91   |//Param3 = right
                             1223 ; 92   |//Param4 = bottom
                             1224 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                             1225 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                             1226 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                             1227 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                             1228 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                             1229 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                             1230 ; 99   |
                             1231 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                             1232 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                             1233 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
                             1234 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                             1235 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                             1236 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                             1237 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                             1238 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                             1239 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                             1240 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                             1241 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                             1242 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                             1243 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                             1244 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1245 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                             1246 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                             1247 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                             1248 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                             1249 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                             1250 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                             1251 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                             1252 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                             1253 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                             1254 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                             1255 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                             1256 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                             1257 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                             1258 ; 127  |
                             1259 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                             1260 ; 129  |
                             1261 ; 130  |#if defined(CLCD_16BIT)
                             1262 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                             1263 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                             1264 ; 133  |
                             1265 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                             1266 ; 135  |#else 
                             1267 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                             1268 ; 137  |#endif
                             1269 ; 138  |
                             1270 ; 139  |// If you change the LCD message ID's then you must
                             1271 ; 140  |// also change the jump table in lcdapi.asm
                             1272 ; 141  |
                             1273 ; 142  |// Character LCD Message IDs
                             1274 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                             1275 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                             1276 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                             1277 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                             1278 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                             1279 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                             1280 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                             1281 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                             1282 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                             1283 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                             1284 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                             1285 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                             1286 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                             1287 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                             1288 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                             1289 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                             1290 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                             1291 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                             1292 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                             1293 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                             1294 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                             1295 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
                             1296 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                             1297 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                             1298 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                             1299 ; 168  |// also change the jump table in lcdapi.asm
                             1300 ; 169  |
                             1301 ; 170  |// Decoder Message IDs
                             1302 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                             1303 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                             1304 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                             1305 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                             1306 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1307 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                             1308 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                             1309 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                             1310 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                             1311 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                             1312 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                             1313 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                             1314 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                             1315 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                             1316 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                             1317 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                             1318 ; 187  |// If you change the Decoder message ID's, then you must
                             1319 ; 188  |// also change the jump table in decoder_overlay.asm
                             1320 ; 189  |// and in dec_adpcm_overlay.asm.
                             1321 ; 190  |
                             1322 ; 191  |// Encoder Message IDs
                             1323 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                             1324 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                             1325 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                             1326 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                             1327 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                             1328 ; 197  |// If you change the Encoder message ID's, then you must
                             1329 ; 198  |// also change the jump table in all encoder overlay modules.
                             1330 ; 199  |
                             1331 ; 200  |// Parser Message IDs
                             1332 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                             1333 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                             1334 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                             1335 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                             1336 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                             1337 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                             1338 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                             1339 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                             1340 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                             1341 ; 210  |// If you change the Parser message ID's, then you must
                             1342 ; 211  |// also change the jump table in parser.asm
                             1343 ; 212  |
                             1344 ; 213  |// Button Message IDs
                             1345 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                             1346 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                             1347 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                             1348 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                             1349 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                             1350 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                             1351 ; 220  |
                             1352 ; 221  |// Mixer Message IDs
                             1353 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                             1354 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                             1355 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                             1356 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                             1357 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
                             1358 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                             1359 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                             1360 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                             1361 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                             1362 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                             1363 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                             1364 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                             1365 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                             1366 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                             1367 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                             1368 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1369 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                             1370 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                             1371 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                             1372 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                             1373 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                             1374 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                             1375 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                             1376 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                             1377 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                             1378 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                             1379 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                             1380 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                             1381 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                             1382 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                             1383 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                             1384 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                             1385 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                             1386 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                             1387 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                             1388 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                             1389 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                             1390 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                             1391 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                             1392 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                             1393 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                             1394 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                             1395 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                             1396 ; 265  |// If you change the mixer message ID's then you must
                             1397 ; 266  |// also change the jump table in mixer.asm
                             1398 ; 267  |#define MIXER_ON 0
                             1399 ; 268  |#define MIXER_OFF 1
                             1400 ; 269  |
                             1401 ; 270  |
                             1402 ; 271  |// System Message IDs
                             1403 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                             1404 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                             1405 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                             1406 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                             1407 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                             1408 ; 277  |// If you change the system message ID's then you must
                             1409 ; 278  |// also change the jump table in systemapi.asm
                             1410 ; 279  |
                             1411 ; 280  |// Menu IDs
                             1412 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                             1413 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                             1414 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                             1415 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                             1416 ; 285  |//sub parameters for this message:
                             1417 ; 286  |#define RECORDER_START 0
                             1418 ; 287  |#define RECORDER_PAUSE 0x2000
                             1419 ; 288  |#define RECORDER_RESUME 0x4000
                             1420 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                             1421 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                             1422 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                             1423 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                             1424 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                             1425 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                             1426 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                             1427 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                             1428 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                             1429 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                             1430 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1431 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                             1432 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                             1433 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                             1434 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                             1435 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                             1436 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                             1437 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                             1438 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                             1439 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                             1440 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                             1441 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                             1442 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                             1443 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                             1444 ; 313  |
                             1445 ; 314  |// Note that other versions of this file have different msg equates.
                             1446 ; 315  |// If you change the system message ID's then you must
                             1447 ; 316  |// also change the jump table in all menu *.asm
                             1448 ; 317  |
                             1449 ; 318  |// LED Message IDs
                             1450 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                             1451 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                             1452 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                             1453 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                             1454 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                             1455 ; 324  |// If you change the LeD message ID's then you must
                             1456 ; 325  |// also change the jump table in ledapi.asm
                             1457 ; 326  |
                             1458 ; 327  |#if (!defined(REMOVE_FM))
                             1459 ; 328  |// FM Tuner Message IDs
                             1460 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                             1461 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                             1462 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                             1463 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                             1464 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                             1465 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                             1466 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                             1467 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                             1468 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                             1469 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                             1470 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                             1471 ; 340  |//one parameter--the sensitivity in uV
                             1472 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                             1473 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                             1474 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                             1475 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                             1476 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                             1477 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                             1478 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                             1479 ; 348  |#endif
                             1480 ; 349  |
                             1481 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
                             1482 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                             1483 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                             1484 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                             1485 ; 354  |
                             1486 ; 355  |
                             1487 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                             1488 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                             1489 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                             1490 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                             1491 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                             1492 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1493 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                             1494 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                             1495 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                             1496 ; 365  |
                             1497 ; 366  |#if (defined(USE_PLAYLIST3))
                             1498 ; 367  |// Music Library
                             1499 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                             1500 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                             1501 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                             1502 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                             1503 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                             1504 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                             1505 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                             1506 ; 375  |
                             1507 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                             1508 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                             1509 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                             1510 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                             1511 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                             1512 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                             1513 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                             1514 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                             1515 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                             1516 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                             1517 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                             1518 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                             1519 ; 388  |
                             1520 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1521 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1522 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                             1523 ; 392  |
                             1524 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1525 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1526 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                             1527 ; 396  |
                             1528 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1529 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1530 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                             1531 ; 400  |
                             1532 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                             1533 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                             1534 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                             1535 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                             1536 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                             1537 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                             1538 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                             1539 ; 408  |
                             1540 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1541 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1542 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                             1543 ; 412  |
                             1544 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                             1545 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                             1546 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                             1547 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                             1548 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                             1549 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                             1550 ; 419  |
                             1551 ; 420  |#if defined(USE_PLAYLIST5)
                             1552 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                             1553 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                             1554 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1555 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                             1556 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                             1557 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                             1558 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                             1559 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                             1560 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                             1561 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                             1562 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                             1563 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                             1564 ; 433  |
                             1565 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                             1566 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                             1567 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                             1568 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                             1569 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                             1570 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                             1571 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                             1572 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                             1573 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                             1574 ; 443  |#endif // if @def('USE_PLAYLIST5')
                             1575 ; 444  |// Events
                             1576 ; 445  |// No event
                             1577 ; 446  |#define EVENT_NONE 0x000001   
                             1578 ; 447  |// A message has been posted
                             1579 ; 448  |#define EVENT_MESSAGE 0x000002   
                             1580 ; 449  |// Run if wait time elapsed
                             1581 ; 450  |#define EVENT_TIMER 0x000004   
                             1582 ; 451  |// Run if a button event occured
                             1583 ; 452  |#define EVENT_BUTTON 0x000008   
                             1584 ; 453  |// Run if a background event occured
                             1585 ; 454  |#define EVENT_BACKGROUND 0x000010   
                             1586 ; 455  |// The executive should immediately repeat this module
                             1587 ; 456  |#define EVENT_REPEAT 0x000020   
                             1588 ; 457  |// Run the module's init routine
                             1589 ; 458  |#define EVENT_INIT 0x800000   
                             1590 ; 459  |
                             1591 ; 460  |#define EVENT_NONE_BITPOS 0
                             1592 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                             1593 ; 462  |#define EVENT_TIMER_BITPOS 2
                             1594 ; 463  |#define EVENT_BUTTON_BITPOS 3
                             1595 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                             1596 ; 465  |#define EVENT_REPEAT_BITPOS 5
                             1597 ; 466  |#define EVENT_INIT_BITPOS 23
                             1598 ; 467  |
                             1599 ; 468  |// Parser Message Buffers
                             1600 ; 469  |#define ParserPlayBit 0
                             1601 ; 470  |#define ButtonPressBit 1
                             1602 ; 471  |#define ParserRwndBit 1
                             1603 ; 472  |#define ParserFfwdBit 2
                             1604 ; 473  |
                             1605 ; 474  |//NextSong Message Parameters
                             1606 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                             1607 ; 476  |#define NEXT_SONG 2             
                             1608 ; 477  |// ButtonPressBit1 cleared
                             1609 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                             1610 ; 479  |// ButtonPressBit1 set
                             1611 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                             1612 ; 481  |// NextSong + Ffwd
                             1613 ; 482  |#define NEXT_SONG_FFWD 4          
                             1614 ; 483  |
                             1615 ; 484  |//PrevSong Message Parameters
                             1616 ; 485  |// PrevSong + Stopped
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1617 ; 486  |#define PREV_SONG 0          
                             1618 ; 487  |// PrevSong + Play
                             1619 ; 488  |#define PREV_SONG_PLAY 1          
                             1620 ; 489  |// PrevSong + Rwnd
                             1621 ; 490  |#define PREV_SONG_RWND 2          
                             1622 ; 491  |
                             1623 ; 492  |
                             1624 ; 493  |
                             1625 ; 494  |
                             1626 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                             1627 ; 496  |
                             1628 ; 497  |
                             1629 
                             1631 
                             1632 ; 11   |#include "resource.h"
                             1633 
                             1635 
                             1636 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1637 ; 2    |//  Do not edit it directly.
                             1638 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                             1639 ; 4    |
                             1640 ; 5    |
                             1641 ; 6    |
                             1642 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                             1643 ; 8    |//  Do not edit it directly.
                             1644 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                             1645 ; 10   |
                             1646 ; 11   |
                             1647 ; 12   |
                             1648 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1649 ; 14   |//  Do not edit it directly.
                             1650 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                             1651 ; 16   |
                             1652 ; 17   |
                             1653 ; 18   |
                             1654 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1655 ; 20   |//  Do not edit it directly.
                             1656 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                             1657 ; 22   |
                             1658 ; 23   |
                             1659 ; 24   |
                             1660 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1661 ; 26   |//  Do not edit it directly.
                             1662 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                             1663 ; 28   |
                             1664 ; 29   |
                             1665 ; 30   |
                             1666 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1667 ; 32   |//  Do not edit it directly.
                             1668 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                             1669 ; 34   |
                             1670 ; 35   |
                             1671 ; 36   |
                             1672 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1673 ; 38   |//  Do not edit it directly.
                             1674 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                             1675 ; 40   |
                             1676 ; 41   |
                             1677 ; 42   |
                             1678 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1679 ; 44   |//  Do not edit it directly.
                             1680 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1681 ; 46   |
                             1682 ; 47   |
                             1683 ; 48   |
                             1684 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1685 ; 50   |//  Do not edit it directly.
                             1686 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                             1687 ; 52   |
                             1688 ; 53   |
                             1689 ; 54   |
                             1690 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1691 ; 56   |//  Do not edit it directly.
                             1692 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                             1693 ; 58   |
                             1694 ; 59   |
                             1695 ; 60   |
                             1696 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1697 ; 62   |//  Do not edit it directly.
                             1698 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                             1699 ; 64   |
                             1700 ; 65   |
                             1701 ; 66   |
                             1702 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1703 ; 68   |//  Do not edit it directly.
                             1704 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
                             1705 ; 70   |
                             1706 ; 71   |
                             1707 ; 72   |
                             1708 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1709 ; 74   |//  Do not edit it directly.
                             1710 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                             1711 ; 76   |
                             1712 ; 77   |
                             1713 ; 78   |
                             1714 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1715 ; 80   |//  Do not edit it directly.
                             1716 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                             1717 ; 82   |
                             1718 ; 83   |
                             1719 ; 84   |
                             1720 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1721 ; 86   |//  Do not edit it directly.
                             1722 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                             1723 ; 88   |
                             1724 ; 89   |
                             1725 ; 90   |
                             1726 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1727 ; 92   |//  Do not edit it directly.
                             1728 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                             1729 ; 94   |
                             1730 ; 95   |
                             1731 ; 96   |
                             1732 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                             1733 ; 98   |//  Do not edit it directly.
                             1734 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                             1735 ; 100  |
                             1736 ; 101  |
                             1737 ; 102  |
                             1738 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1739 ; 104  |//  Do not edit it directly.
                             1740 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                             1741 ; 106  |
                             1742 ; 107  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1743 ; 108  |
                             1744 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1745 ; 110  |//  Do not edit it directly.
                             1746 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                             1747 ; 112  |
                             1748 ; 113  |
                             1749 ; 114  |
                             1750 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1751 ; 116  |//  Do not edit it directly.
                             1752 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                             1753 ; 118  |
                             1754 ; 119  |
                             1755 ; 120  |
                             1756 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
                             1757 ; 122  |//  Do not edit it directly.
                             1758 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                             1759 ; 124  |
                             1760 ; 125  |
                             1761 ; 126  |
                             1762 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                             1763 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                             1764 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
                             1765 ; 130  |// LCD example resource listing
                             1766 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                             1767 ; 132  |
                             1768 ; 133  |#if (!defined(resources))
                             1769 ; 134  |#define resources 1
                             1770 ; 135  |
                             1771 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                             1772 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                             1773 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             1774 ; 139  |
                             1775 ; 140  |#define VERSION_MAJOR 3
                             1776 ; 141  |#define VERSION_MIDDLE 200
                             1777 ; 142  |#define VERSION_MINOR 910
                             1778 ; 143  |
                             1779 ; 144  |#define LCD_SEG_OFFSET 0x000000
                             1780 ; 145  |#define NUMBER_OF_PRESETS 10
                             1781 ; 146  |
                             1782 ; 147  |
                             1783 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             1784 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
                             1785 ; 150  |//  the resource index cache if it was added.
                             1786 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                             1787 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             1788 ; 153  |
                             1789 ; 154  |//$FILENAME searchdirectory.src
                             1790 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                             1791 ; 156  |//$FILENAME shortdirmatch.src
                             1792 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                             1793 ; 158  |//$FILENAME fopen.src
                             1794 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                             1795 ; 160  |//$FILENAME musicmenu.src
                             1796 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                             1797 ; 162  |//$FILENAME changepath.src
                             1798 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                             1799 ; 164  |//$FILENAME _openandverifyslot.src
                             1800 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                             1801 ; 166  |//$FILENAME _loadslot.src
                             1802 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                             1803 ; 168  |//$FILENAME getname.src
                             1804 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1805 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                             1806 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                             1807 ; 172  |//$FILENAME sethandleforsearch.src
                             1808 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                             1809 ; 174  |//$FILENAME wmaWrap.src
                             1810 ; 175  |#define RSRC_WMADEC_CODE 11    
                             1811 ; 176  |//$FILENAME extractfilename.src
                             1812 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                             1813 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                             1814 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                             1815 ; 180  |//$FILENAME SoftTimerMod.src
                             1816 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                             1817 ; 182  |//$FILENAME GetShortfilename.src
                             1818 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
                             1819 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
                             1820 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                             1821 ; 186  |//$FILENAME playerstatemachine.src
                             1822 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                             1823 ; 188  |//$FILENAME SysMod.src
                             1824 ; 189  |#define RSRC_SYSMOD_CODE 18    
                             1825 ; 190  |//$FILENAME drm_b64_decodew.src
                             1826 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
                             1827 ; 192  |//$FILENAME discardtrailigperiods.src
                             1828 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
                             1829 ; 194  |//$FILENAME uppercase.src
                             1830 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                             1831 ; 196  |//$FILENAME strlength.src
                             1832 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                             1833 ; 198  |//$FILENAME ConverToShortname.src
                             1834 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                             1835 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                             1836 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                             1837 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                             1838 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                             1839 ; 204  |//$FILENAME drm_sst_closekey.src
                             1840 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                             1841 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                             1842 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                             1843 ; 208  |//$FILENAME freehandle.src
                             1844 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                             1845 ; 210  |//$FILENAME searchfreehandleallocate.src
                             1846 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                             1847 ; 212  |//$FILENAME _parselicenseattributes.src
                             1848 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                             1849 ; 214  |//$FILENAME variablesecstategetorset.src
                             1850 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                             1851 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                             1852 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                             1853 ; 218  |//$FILENAME drm_mgr_initialize.src
                             1854 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                             1855 ; 220  |//$FILENAME display.src
                             1856 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                             1857 ; 222  |//$FILENAME DisplayModule.src
                             1858 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                             1859 ; 224  |//$FILENAME extractpath.src
                             1860 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                             1861 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                             1862 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                             1863 ; 228  |//$FILENAME _getprivatekey.src
                             1864 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                             1865 ; 230  |//$FILENAME drm_hds_opennamespace.src
                             1866 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1867 ; 232  |//$FILENAME drm_hds_openslot.src
                             1868 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                             1869 ; 234  |//$FILENAME fclose.src
                             1870 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                             1871 ; 236  |//$FILENAME drm_cphr_init.src
                             1872 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                             1873 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                             1874 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                             1875 ; 240  |//$FILENAME drm_mgr_bind.src
                             1876 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                             1877 ; 242  |//$FILENAME _decryptcontentkey.src
                             1878 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                             1879 ; 244  |//$FILENAME drm_mac_inv32.src
                             1880 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
                             1881 ; 246  |//$FILENAME drm_lic_getattribute.src
                             1882 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                             1883 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                             1884 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                             1885 ; 250  |//$FILENAME drm_dcp_getattribute.src
                             1886 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                             1887 ; 252  |//$FILENAME effectsmodules.src
                             1888 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
                             1889 ; 254  |//$FILENAME janusx.src
                             1890 ; 255  |#define RSRC_JANUSX_CODE 51    
                             1891 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                             1892 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                             1893 ; 258  |//$FILENAME eval.src
                             1894 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                             1895 ; 260  |//$FILENAME _verifyslothash.src
                             1896 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                             1897 ; 262  |//$FILENAME januscommon.src
                             1898 ; 263  |#define RSRC_JANUS_COMMON 55    
                             1899 ; 264  |//$FILENAME changecase.src
                             1900 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                             1901 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                             1902 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                             1903 ; 268  |//$FILENAME _loadlicenseattributes.src
                             1904 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                             1905 ; 270  |//$FILENAME drm_hds_slotseek.src
                             1906 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                             1907 ; 272  |//$FILENAME drm_hds_slotwrite.src
                             1908 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                             1909 ; 274  |//$FILENAME drm_levl_performoperations.src
                             1910 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                             1911 ; 276  |//$FILENAME drm_lic_verifysignature.src
                             1912 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                             1913 ; 278  |//$FILENAME drm_lst_getlicense.src
                             1914 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                             1915 ; 280  |//$FILENAME drm_utl_numbertostring.src
                             1916 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                             1917 ; 282  |//$FILENAME oem_writefile.src
                             1918 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                             1919 ; 284  |//$FILENAME drm_sst_getdata.src
                             1920 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                             1921 ; 286  |//$FILENAME updatehandlemode.src
                             1922 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
                             1923 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                             1924 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                             1925 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                             1926 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                             1927 ; 292  |//$FILENAME doplay_p.src
                             1928 ; 293  |#define RSRC_DOPLAY_P 70    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1929 ; 294  |//$FILENAME fatwritep.src
                             1930 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                             1931 ; 296  |//$FILENAME findfirst.src
                             1932 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                             1933 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                             1934 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                             1935 ; 300  |//$FILENAME changetorootdirectory.src
                             1936 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                             1937 ; 302  |//$FILENAME _findkeypair.src
                             1938 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                             1939 ; 304  |//$FILENAME variablemachinegetorset.src
                             1940 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                             1941 ; 306  |//$FILENAME _hdsslotenumnext.src
                             1942 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
                             1943 ; 308  |//$FILENAME getlspubkey.src
                             1944 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                             1945 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                             1946 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                             1947 ; 312  |//$FILENAME drm_utl_decodekid.src
                             1948 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                             1949 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                             1950 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
                             1951 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
                             1952 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
                             1953 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                             1954 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                             1955 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                             1956 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                             1957 ; 322  |//$FILENAME aes_enc.src
                             1958 ; 323  |#define RSRC_AES_ENC 85    
                             1959 ; 324  |//$FILENAME getprivkey.src
                             1960 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                             1961 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                             1962 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                             1963 ; 328  |//$FILENAME playlist_codebank.src
                             1964 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                             1965 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                             1966 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                             1967 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                             1968 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                             1969 ; 334  |//$FILENAME _getdevicecert.src
                             1970 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                             1971 ; 336  |//$FILENAME drm_lic_reportactions.src
                             1972 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                             1973 ; 338  |//$FILENAME drmcrt_wcsntol.src
                             1974 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                             1975 ; 340  |//$FILENAME _basicheaderchecks.src
                             1976 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                             1977 ; 342  |//$FILENAME drm_hdr_getattribute.src
                             1978 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                             1979 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                             1980 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                             1981 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                             1982 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                             1983 ; 348  |//$FILENAME drm_lst_open.src
                             1984 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                             1985 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                             1986 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                             1987 ; 352  |//$FILENAME _verifysymmerticsignature.src
                             1988 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                             1989 ; 354  |//$FILENAME oem_openfile.src
                             1990 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1991 ; 356  |//$FILENAME _getdrmfullpathname.src
                             1992 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                             1993 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                             1994 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                             1995 ; 360  |//$FILENAME _applydiffstostore.src
                             1996 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                             1997 ; 362  |//$FILENAME drm_sst_setdata.src
                             1998 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                             1999 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                             2000 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                             2001 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                             2002 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                             2003 ; 368  |//$FILENAME playerlib_extra.src
                             2004 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
                             2005 ; 370  |//$FILENAME wmaCommon.src
                             2006 ; 371  |#define RSRC_WMA_COMMON 109    
                             2007 ; 372  |//$FILENAME wmainit.src
                             2008 ; 373  |#define RSRC_WMA_INIT 110    
                             2009 ; 374  |//$FILENAME playlist2traverse_codebank.src
                             2010 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                             2011 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                             2012 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
                             2013 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                             2014 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
                             2015 ; 380  |//$FILENAME drm_hds_closestore.src
                             2016 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                             2017 ; 382  |//$FILENAME _hdsloadsrn.src
                             2018 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                             2019 ; 384  |//$FILENAME _loadproritizedlist.src
                             2020 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                             2021 ; 386  |//$FILENAME drm_lst_initenum.src
                             2022 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                             2023 ; 388  |//$FILENAME _loadattributesintocache.src
                             2024 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                             2025 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                             2026 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                             2027 ; 392  |
                             2028 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                             2029 ; 394  |//  Menu Modules (codebanks)
                             2030 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                             2031 ; 396  |//$FILENAME mainmenu.src
                             2032 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                             2033 ; 398  |//$FILENAME displaylists.src
                             2034 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                             2035 ; 400  |
                             2036 ; 401  |//$FILENAME voicemenu.src
                             2037 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                             2038 ; 403  |//$FILENAME fmtunermenu.src
                             2039 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                             2040 ; 405  |//$FILENAME recorderstatemachine.src
                             2041 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                             2042 ; 407  |
                             2043 ; 408  |//$FILENAME eqmenu.src
                             2044 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                             2045 ; 410  |//$FILENAME playmodemenu.src
                             2046 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                             2047 ; 412  |//$FILENAME contrastmenu.src
                             2048 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                             2049 ; 414  |//$FILENAME pwrsettingsmenu.src
                             2050 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                             2051 ; 416  |//$FILENAME timedatemenu.src
                             2052 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2053 ; 418  |//$FILENAME settimemenu.src
                             2054 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                             2055 ; 420  |//$FILENAME setdatemenu.src
                             2056 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                             2057 ; 422  |//$FILENAME settingsmenu.src
                             2058 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                             2059 ; 424  |//$FILENAME string_system_menu.src
                             2060 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                             2061 ; 426  |//$FILENAME deletemenu.src
                             2062 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                             2063 ; 428  |//$FILENAME aboutmenu.src
                             2064 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                             2065 ; 430  |
                             2066 ; 431  |//$FILENAME spectrogram.src
                             2067 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
                             2068 ; 433  |
                             2069 ; 434  |//$FILENAME motionvideomenu.src
                             2070 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                             2071 ; 436  |//$FILENAME motionvideomenuinitstate.src
                             2072 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                             2073 ; 438  |//$FILENAME jpegdisplaymenu.src
                             2074 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
                             2075 ; 440  |//$FILENAME jpegmanualmenu.src
                             2076 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
                             2077 ; 442  |//$FILENAME jpegthumbnailmenu.src
                             2078 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                             2079 ; 444  |//$FILENAME jpegslideshowmenu.src
                             2080 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                             2081 ; 446  |//$FILENAME albumartmenu.src
                             2082 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                             2083 ; 448  |//$FILENAME jpegfileutilextra.src
                             2084 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                             2085 ; 450  |
                             2086 ; 451  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2087 ; 452  |// General Modules
                             2088 ; 453  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2089 ; 454  |//$FILENAME MixMod.src
                             2090 ; 455  |#define RSRC_MIXMOD_CODE 145    
                             2091 ; 456  |//$FILENAME TunerModule.src
                             2092 ; 457  |#define RSRC_TUNER_MODULE 146    
                             2093 ; 458  |//$FILENAME geqoverlay.src
                             2094 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                             2095 ; 460  |
                             2096 ; 461  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2097 ; 462  |// Decoders/Encoders
                             2098 ; 463  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2099 ; 464  |//$FILENAME DecMod.src
                             2100 ; 465  |#define RSRC_DECMOD_CODE 148    
                             2101 ; 466  |//$FILENAME mp3p.src
                             2102 ; 467  |#define RSRC_MP3P_CODE 149    
                             2103 ; 468  |//$FILENAME mp3x.src
                             2104 ; 469  |#define RSRC_MP3X_CODE 150    
                             2105 ; 470  |//$FILENAME mp3y.src
                             2106 ; 471  |#define RSRC_MP3Y_CODE 151    
                             2107 ; 472  |//$FILENAME janusp.src
                             2108 ; 473  |#define RSRC_JANUSP_CODE 152    
                             2109 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                             2110 ; 475  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2111 ; 476  |//$FILENAME decadpcmimamod.src
                             2112 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                             2113 ; 478  |//$FILENAME dec_adpcmp.src
                             2114 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                             2115 ; 480  |//$FILENAME dec_adpcmx.src
                             2116 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                             2117 ; 482  |//$FILENAME dec_adpcmy.src
                             2118 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                             2119 ; 484  |
                             2120 ; 485  |//$FILENAME decadpcmsmvmod.src
                             2121 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                             2122 ; 487  |//$FILENAME dec_smvadpcmp.src
                             2123 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                             2124 ; 489  |//$FILENAME dec_smvadpcmx.src
                             2125 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
                             2126 ; 491  |//$FILENAME dec_smvadpcmy.src
                             2127 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                             2128 ; 493  |
                             2129 ; 494  |//$FILENAME encadpcmimamod.src
                             2130 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                             2131 ; 496  |//$FILENAME enc_adpcmp.src
                             2132 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
                             2133 ; 498  |//$FILENAME enc_adpcmx.src
                             2134 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
                             2135 ; 500  |//$FILENAME enc_adpcmy.src
                             2136 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                             2137 ; 502  |
                             2138 ; 503  |//$FILENAME jpeg_p.src
                             2139 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                             2140 ; 505  |//$FILENAME jpeg_x.src
                             2141 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                             2142 ; 507  |//$FILENAME jpeg_y.src
                             2143 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                             2144 ; 509  |//$FILENAME jpeg2_y.src
                             2145 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                             2146 ; 511  |//$FILENAME bmp2_y.src
                             2147 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                             2148 ; 513  |//$FILENAME bmp_p.src
                             2149 ; 514  |#define RSRC_BMP_DECODER_P 170    
                             2150 ; 515  |
                             2151 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                             2152 ; 517  |//$FILENAME smvjpeg_x.src
                             2153 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                             2154 ; 519  |//$FILENAME smvjpeg_y.src
                             2155 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                             2156 ; 521  |
                             2157 ; 522  |
                             2158 ; 523  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2159 ; 524  |// System Settings
                             2160 ; 525  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2161 ; 526  |//$FILENAME settings.src
                             2162 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                             2163 ; 528  |
                             2164 ; 529  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2165 ; 530  |// Media Device Drivers
                             2166 ; 531  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2167 ; 532  |//This resource is filled with garbage unless it is the MMC build
                             2168 ; 533  |//$FILENAME null.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2169 ; 534  |#define RSRC_MMCDD_CODE 174    
                             2170 ; 535  |//$FILENAME null.src
                             2171 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                             2172 ; 537  |
                             2173 ; 538  |/////////////////////////////////////////////////////////////////////////////////
                             2174 ; 539  |//  PlayState resources
                             2175 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             2176 ; 541  |//$FILENAME play_icon_with_border.src
                             2177 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                             2178 ; 543  |//$FILENAME pause_icon_with_border.src
                             2179 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                             2180 ; 545  |//$FILENAME stop_icon_with_border.src
                             2181 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                             2182 ; 547  |//$FILENAME record_icon_with_border.src
                             2183 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
                             2184 ; 549  |//$FILENAME paused_record_icon_with_border.src
                             2185 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                             2186 ; 551  |//$FILENAME ffwd_icon_with_border.src
                             2187 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                             2188 ; 553  |//$FILENAME rwnd_icon_with_border.src
                             2189 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                             2190 ; 555  |
                             2191 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                             2192 ; 557  |//  PlayMode resources
                             2193 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                             2194 ; 559  |//$FILENAME repeatall_icon.src
                             2195 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                             2196 ; 561  |//$FILENAME repeatsong_icon.src
                             2197 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                             2198 ; 563  |//$FILENAME shuffle_icon.src
                             2199 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                             2200 ; 565  |//$FILENAME random_icon.src
                             2201 ; 566  |#define RSRC_RANDOM_ICON 186    
                             2202 ; 567  |//$FILENAME repeatallclear_icon.src
                             2203 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                             2204 ; 569  |//$FILENAME repeatsongclear_icon.src
                             2205 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                             2206 ; 571  |//$FILENAME shuffleclear_icon.src
                             2207 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                             2208 ; 573  |
                             2209 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                             2210 ; 575  |//  Battery Status
                             2211 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                             2212 ; 577  |//$FILENAME battery_00.src
                             2213 ; 578  |#define RSRC_BATTERY_00 190    
                             2214 ; 579  |//$FILENAME battery_01.src
                             2215 ; 580  |#define RSRC_BATTERY_01 191    
                             2216 ; 581  |//$FILENAME battery_02.src
                             2217 ; 582  |#define RSRC_BATTERY_02 192    
                             2218 ; 583  |//$FILENAME battery_03.src
                             2219 ; 584  |#define RSRC_BATTERY_03 193    
                             2220 ; 585  |//$FILENAME battery_04.src
                             2221 ; 586  |#define RSRC_BATTERY_04 194    
                             2222 ; 587  |//$FILENAME battery_05.src
                             2223 ; 588  |#define RSRC_BATTERY_05 195    
                             2224 ; 589  |//$FILENAME battery_06.src
                             2225 ; 590  |#define RSRC_BATTERY_06 196    
                             2226 ; 591  |//$FILENAME battery_07.src
                             2227 ; 592  |#define RSRC_BATTERY_07 197    
                             2228 ; 593  |//$FILENAME battery_08.src
                             2229 ; 594  |#define RSRC_BATTERY_08 198    
                             2230 ; 595  |//$FILENAME battery_09.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2231 ; 596  |#define RSRC_BATTERY_09 199    
                             2232 ; 597  |//$FILENAME battery_10.src
                             2233 ; 598  |#define RSRC_BATTERY_10 200    
                             2234 ; 599  |
                             2235 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                             2236 ; 601  |//  System Icons
                             2237 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                             2238 ; 603  |//$FILENAME disk_small.src
                             2239 ; 604  |#define RSRC_DISK_ICON 201    
                             2240 ; 605  |//$FILENAME lock_small.src
                             2241 ; 606  |#define RSRC_LOCK_ICON 202    
                             2242 ; 607  |//$FILENAME icon_music_mode.src
                             2243 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                             2244 ; 609  |//$FILENAME icon_voice_mode.src
                             2245 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
                             2246 ; 611  |
                             2247 ; 612  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2248 ; 613  |// Volume Bitmaps
                             2249 ; 614  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2250 ; 615  |//$FILENAME icon_vol_00.src
                             2251 ; 616  |#define RSRC_ICON_VOL_00 205    
                             2252 ; 617  |//$FILENAME icon_vol_01.src
                             2253 ; 618  |#define RSRC_ICON_VOL_01 206    
                             2254 ; 619  |//$FILENAME icon_vol_02.src
                             2255 ; 620  |#define RSRC_ICON_VOL_02 207    
                             2256 ; 621  |//$FILENAME icon_vol_03.src
                             2257 ; 622  |#define RSRC_ICON_VOL_03 208    
                             2258 ; 623  |//$FILENAME icon_vol_04.src
                             2259 ; 624  |#define RSRC_ICON_VOL_04 209    
                             2260 ; 625  |//$FILENAME icon_vol_05.src
                             2261 ; 626  |#define RSRC_ICON_VOL_05 210    
                             2262 ; 627  |//$FILENAME icon_vol_06.src
                             2263 ; 628  |#define RSRC_ICON_VOL_06 211    
                             2264 ; 629  |//$FILENAME icon_vol_07.src
                             2265 ; 630  |#define RSRC_ICON_VOL_07 212    
                             2266 ; 631  |//$FILENAME icon_vol_08.src
                             2267 ; 632  |#define RSRC_ICON_VOL_08 213    
                             2268 ; 633  |//$FILENAME icon_vol_09.src
                             2269 ; 634  |#define RSRC_ICON_VOL_09 214    
                             2270 ; 635  |//$FILENAME icon_vol_10.src
                             2271 ; 636  |#define RSRC_ICON_VOL_10 215    
                             2272 ; 637  |//$FILENAME icon_vol_11.src
                             2273 ; 638  |#define RSRC_ICON_VOL_11 216    
                             2274 ; 639  |//$FILENAME icon_vol_12.src
                             2275 ; 640  |#define RSRC_ICON_VOL_12 217    
                             2276 ; 641  |//$FILENAME icon_vol_13.src
                             2277 ; 642  |#define RSRC_ICON_VOL_13 218    
                             2278 ; 643  |//$FILENAME icon_vol_14.src
                             2279 ; 644  |#define RSRC_ICON_VOL_14 219    
                             2280 ; 645  |//$FILENAME icon_vol_15.src
                             2281 ; 646  |#define RSRC_ICON_VOL_15 220    
                             2282 ; 647  |//$FILENAME icon_vol_16.src
                             2283 ; 648  |#define RSRC_ICON_VOL_16 221    
                             2284 ; 649  |//$FILENAME icon_vol_17.src
                             2285 ; 650  |#define RSRC_ICON_VOL_17 222    
                             2286 ; 651  |//$FILENAME icon_vol_18.src
                             2287 ; 652  |#define RSRC_ICON_VOL_18 223    
                             2288 ; 653  |//$FILENAME icon_vol_19.src
                             2289 ; 654  |#define RSRC_ICON_VOL_19 224    
                             2290 ; 655  |//$FILENAME icon_vol_20.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2291 ; 656  |#define RSRC_ICON_VOL_20 225    
                             2292 ; 657  |//$FILENAME icon_vol_21.src
                             2293 ; 658  |#define RSRC_ICON_VOL_21 226    
                             2294 ; 659  |//$FILENAME icon_vol_22.src
                             2295 ; 660  |#define RSRC_ICON_VOL_22 227    
                             2296 ; 661  |//$FILENAME icon_vol_23.src
                             2297 ; 662  |#define RSRC_ICON_VOL_23 228    
                             2298 ; 663  |//$FILENAME icon_vol_24.src
                             2299 ; 664  |#define RSRC_ICON_VOL_24 229    
                             2300 ; 665  |//$FILENAME icon_vol_25.src
                             2301 ; 666  |#define RSRC_ICON_VOL_25 230    
                             2302 ; 667  |//$FILENAME icon_vol_26.src
                             2303 ; 668  |#define RSRC_ICON_VOL_26 231    
                             2304 ; 669  |//$FILENAME icon_vol_27.src
                             2305 ; 670  |#define RSRC_ICON_VOL_27 232    
                             2306 ; 671  |//$FILENAME icon_vol_28.src
                             2307 ; 672  |#define RSRC_ICON_VOL_28 233    
                             2308 ; 673  |//$FILENAME icon_vol_29.src
                             2309 ; 674  |#define RSRC_ICON_VOL_29 234    
                             2310 ; 675  |//$FILENAME icon_vol_30.src
                             2311 ; 676  |#define RSRC_ICON_VOL_30 235    
                             2312 ; 677  |//$FILENAME icon_vol_31.src
                             2313 ; 678  |#define RSRC_ICON_VOL_31 236    
                             2314 ; 679  |
                             2315 ; 680  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             2316 ; 681  |// Splash Screen Stuff
                             2317 ; 682  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             2318 ; 683  |//$FILENAME st_bw1.src
                             2319 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                             2320 ; 685  |//$FILENAME siglogo1.src
                             2321 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                             2322 ; 687  |//$FILENAME siglogo2.src
                             2323 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                             2324 ; 689  |//$FILENAME siglogo3.src
                             2325 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                             2326 ; 691  |//$FILENAME siglogo4.src
                             2327 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                             2328 ; 693  |//$FILENAME siglogo5.src
                             2329 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                             2330 ; 695  |//$FILENAME siglogo6.src
                             2331 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                             2332 ; 697  |//$FILENAME siglogo7.src
                             2333 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                             2334 ; 699  |//$FILENAME siglogo8.src
                             2335 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                             2336 ; 701  |//$FILENAME siglogo9.src
                             2337 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                             2338 ; 703  |//$FILENAME siglogo10.src
                             2339 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                             2340 ; 705  |//$FILENAME siglogo11.src
                             2341 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                             2342 ; 707  |//$FILENAME siglogo12.src
                             2343 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                             2344 ; 709  |//$FILENAME siglogo13.src
                             2345 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                             2346 ; 711  |//$FILENAME siglogo.src
                             2347 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                             2348 ; 713  |
                             2349 ; 714  |//$FILENAME locked.src
                             2350 ; 715  |#define RSRC_LOCKED_SCREEN 252    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2351 ; 716  |
                             2352 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                             2353 ; 718  |//  Shutdown
                             2354 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                             2355 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                             2356 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                             2357 ; 722  |//$FILENAME status_16_6_steps_0.src
                             2358 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                             2359 ; 724  |//$FILENAME status_16_6_steps_1.src
                             2360 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                             2361 ; 726  |//$FILENAME status_16_6_steps_2.src
                             2362 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                             2363 ; 728  |//$FILENAME status_16_6_steps_3.src
                             2364 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
                             2365 ; 730  |//$FILENAME status_16_6_steps_4.src
                             2366 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                             2367 ; 732  |//$FILENAME status_16_6_steps_5.src
                             2368 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                             2369 ; 734  |//$FILENAME status_16_6_steps_6.src
                             2370 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                             2371 ; 736  |
                             2372 ; 737  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             2373 ; 738  |// EQ
                             2374 ; 739  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             2375 ; 740  |//$FILENAME eq_clear_icon.src
                             2376 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                             2377 ; 742  |//$FILENAME rock_icon.src
                             2378 ; 743  |#define RSRC_ROCK_ICON 262    
                             2379 ; 744  |//$FILENAME jazz_icon.src
                             2380 ; 745  |#define RSRC_JAZZ_ICON 263    
                             2381 ; 746  |//$FILENAME classic_icon.src
                             2382 ; 747  |#define RSRC_CLASSIC_ICON 264    
                             2383 ; 748  |//$FILENAME pop_icon.src
                             2384 ; 749  |#define RSRC_POP_ICON 265    
                             2385 ; 750  |//$FILENAME custom_icon.src
                             2386 ; 751  |#define RSRC_CUSTOM_ICON 266    
                             2387 ; 752  |
                             2388 ; 753  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             2389 ; 754  |// AB
                             2390 ; 755  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             2391 ; 756  |//$FILENAME ab_mark_a.src
                             2392 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                             2393 ; 758  |//$FILENAME ab_mark_b.src
                             2394 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                             2395 ; 760  |
                             2396 ; 761  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             2397 ; 762  |// Menu Display Resources
                             2398 ; 763  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             2399 ; 764  |//$FILENAME string_music_menu.src
                             2400 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                             2401 ; 766  |//$FILENAME string_mvideo_menu.src
                             2402 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                             2403 ; 768  |//$FILENAME string_jpeg_display_menu.src
                             2404 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                             2405 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                             2406 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2407 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                             2408 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                             2409 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                             2410 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                             2411 ; 776  |//$FILENAME string_voice_menu.src
                             2412 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                             2413 ; 778  |//$FILENAME string_audible_menu.src
                             2414 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                             2415 ; 780  |//$FILENAME string_fmtuner_menu.src
                             2416 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                             2417 ; 782  |//$FILENAME string_settings_menu.src
                             2418 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                             2419 ; 784  |//$FILENAME string_eq_menu.src
                             2420 ; 785  |#define RSRC_STRING_EQ_MENU 279    
                             2421 ; 786  |//$FILENAME string_playmode_menu.src
                             2422 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                             2423 ; 788  |//$FILENAME string_contrast_menu.src
                             2424 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
                             2425 ; 790  |//$FILENAME string_pwrsavings_menu.src
                             2426 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                             2427 ; 792  |//$FILENAME string_time_date_menu.src
                             2428 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                             2429 ; 794  |//$FILENAME string_set_time_menu.src
                             2430 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
                             2431 ; 796  |//$FILENAME string_set_date_menu.src
                             2432 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                             2433 ; 798  |//$FILENAME string_exit_menu.src
                             2434 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                             2435 ; 800  |//$FILENAME string_rock_menu.src
                             2436 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                             2437 ; 802  |//$FILENAME string_pop_menu.src
                             2438 ; 803  |#define RSRC_STRING_POP_MENU 288    
                             2439 ; 804  |//$FILENAME string_classic_menu.src
                             2440 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                             2441 ; 806  |//$FILENAME string_normal_menu.src
                             2442 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                             2443 ; 808  |//$FILENAME string_jazz_menu.src
                             2444 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                             2445 ; 810  |//$FILENAME string_repeat1_menu.src
                             2446 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                             2447 ; 812  |//$FILENAME string_repeatall_menu.src
                             2448 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                             2449 ; 814  |//$FILENAME string_shuffle_menu.src
                             2450 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                             2451 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                             2452 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
                             2453 ; 818  |//$FILENAME string_disable_menu.src
                             2454 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                             2455 ; 820  |//$FILENAME string_1min_menu.src
                             2456 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                             2457 ; 822  |//$FILENAME string_2min_menu.src
                             2458 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                             2459 ; 824  |//$FILENAME string_5min_menu.src
                             2460 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                             2461 ; 826  |//$FILENAME string_10min_menu.src
                             2462 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                             2463 ; 828  |//$FILENAME string_system_menu.src
                             2464 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                             2465 ; 830  |//$FILENAME string_about_menu.src
                             2466 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                             2467 ; 832  |//$FILENAME string_delete_menu.src
                             2468 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2469 ; 834  |//$FILENAME string_record_menu.src
                             2470 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                             2471 ; 836  |//$FILENAME string_spectrogram_menu.src
                             2472 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                             2473 ; 838  |
                             2474 ; 839  |//$FILENAME string_end_of_slide_show.src
                             2475 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                             2476 ; 841  |
                             2477 ; 842  |//$FILENAME string_mb.src
                             2478 ; 843  |#define RSRC_STRING_MB 307    
                             2479 ; 844  |
                             2480 ; 845  |//$FILENAME internal_media.src
                             2481 ; 846  |#define RSRC_INT_MEDIA 308    
                             2482 ; 847  |//$FILENAME external_media.src
                             2483 ; 848  |#define RSRC_EXT_MEDIA 309    
                             2484 ; 849  |
                             2485 ; 850  |//$FILENAME about_title.src
                             2486 ; 851  |#define RSRC_ABOUT_TITLE 310    
                             2487 ; 852  |//$FILENAME player_name.src
                             2488 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                             2489 ; 854  |
                             2490 ; 855  |//$FILENAME settings_title.src
                             2491 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                             2492 ; 857  |//$FILENAME jpeg_display_title.src
                             2493 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                             2494 ; 859  |//$FILENAME erase_title.src
                             2495 ; 860  |#define RSRC_ERASE_TITLE 314    
                             2496 ; 861  |
                             2497 ; 862  |//$FILENAME del_warning_no.src
                             2498 ; 863  |#define RSRC_DELETE_NO 315    
                             2499 ; 864  |//$FILENAME del_warning_yes.src
                             2500 ; 865  |#define RSRC_DELETE_YES 316    
                             2501 ; 866  |//$FILENAME del_warning_line1.src
                             2502 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                             2503 ; 868  |//$FILENAME del_warning_line2.src
                             2504 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                             2505 ; 870  |//$FILENAME lowbattery.src
                             2506 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                             2507 ; 872  |//$FILENAME vbr.src
                             2508 ; 873  |#define RSRC_VBR_BITMAP 320    
                             2509 ; 874  |
                             2510 ; 875  |//$FILENAME string_song.src
                             2511 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                             2512 ; 877  |//$FILENAME string_voice.src
                             2513 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                             2514 ; 879  |
                             2515 ; 880  |//$FILENAME time_date_title.src
                             2516 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                             2517 ; 882  |//$FILENAME set_time_title.src
                             2518 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                             2519 ; 884  |//$FILENAME set_date_title.src
                             2520 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                             2521 ; 886  |//$FILENAME string_searching.src
                             2522 ; 887  |#define RSRC_STRING_SEARCHING 326    
                             2523 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                             2524 ; 889  |//  Save Changes
                             2525 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                             2526 ; 891  |//$FILENAME save_changes_yes.src
                             2527 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                             2528 ; 893  |//$FILENAME save_changes_no.src
                             2529 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                             2530 ; 895  |//$FILENAME save_changes_cancel.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2531 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                             2532 ; 897  |//$FILENAME save_changes_clear.src
                             2533 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                             2534 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                             2535 ; 900  |//  Contrast
                             2536 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                             2537 ; 902  |//$FILENAME contrast_title.src
                             2538 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                             2539 ; 904  |//$FILENAME contrast_frame.src
                             2540 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                             2541 ; 906  |//$FILENAME contrast_level0.src
                             2542 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                             2543 ; 908  |//$FILENAME contrast_level1.src
                             2544 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
                             2545 ; 910  |//$FILENAME contrast_level2.src
                             2546 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                             2547 ; 912  |//$FILENAME contrast_level3.src
                             2548 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                             2549 ; 914  |//$FILENAME contrast_level4.src
                             2550 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                             2551 ; 916  |//$FILENAME contrast_level5.src
                             2552 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                             2553 ; 918  |//$FILENAME contrast_level6.src
                             2554 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
                             2555 ; 920  |//$FILENAME contrast_level7.src
                             2556 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                             2557 ; 922  |//$FILENAME contrast_level8.src
                             2558 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                             2559 ; 924  |//$FILENAME contrast_level9.src
                             2560 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                             2561 ; 926  |//$FILENAME contrast_level10.src
                             2562 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                             2563 ; 928  |
                             2564 ; 929  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2565 ; 930  |// Funclets
                             2566 ; 931  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2567 ; 932  |//$FILENAME Funclet_SetRTC.src
                             2568 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                             2569 ; 934  |//$FILENAME Funclet_InitRTC.src
                             2570 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                             2571 ; 936  |//$FILENAME Funclet_ReadRTC.src
                             2572 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                             2573 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                             2574 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                             2575 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                             2576 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                             2577 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                             2578 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                             2579 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                             2580 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                             2581 ; 946  |//$FILENAME Funclet_AnalogInit.src
                             2582 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                             2583 ; 948  |//$FILENAME Funclet_UsbConnected.src
                             2584 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                             2585 ; 950  |//$FILENAME Funclet_ButtonInit.src
                             2586 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                             2587 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                             2588 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                             2589 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                             2590 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2591 ; 956  |//$FILENAME Funclet_StartProject.src
                             2592 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                             2593 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                             2594 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                             2595 ; 960  |//$FILENAME null.src
                             2596 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                             2597 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                             2598 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                             2599 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                             2600 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                             2601 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                             2602 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                             2603 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                             2604 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
                             2605 ; 970  |//$FILENAME null.src
                             2606 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                             2607 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                             2608 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                             2609 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                             2610 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                             2611 ; 976  |//$FILENAME null.src
                             2612 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                             2613 ; 978  |//$FILENAME null.src
                             2614 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
                             2615 ; 980  |//$FILENAME null.src
                             2616 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                             2617 ; 982  |//$FILENAME null.src
                             2618 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                             2619 ; 984  |//$FILENAME null.src
                             2620 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                             2621 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                             2622 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                             2623 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                             2624 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                             2625 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                             2626 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                             2627 ; 992  |//$FILENAME null.src
                             2628 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                             2629 ; 994  |//$FILENAME null.src
                             2630 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                             2631 ; 996  |//$FILENAME Funclet_SaveSettings.src
                             2632 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                             2633 ; 998  |//$FILENAME Funclet_LoadSettings.src
                             2634 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                             2635 ; 1000 |///////////////////////////////////////////////////////////////
                             2636 ; 1001 |// Sanyo FM Tuner Fuclet
                             2637 ; 1002 |///////////////////////////////////////////////////////////////
                             2638 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                                  
                             2639 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations
                                  .src
                             2640 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.
                                  src
                             2641 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoSte
                                  reo.src
                             2642 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                                  
                             2643 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                             2644 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.s
                                  rc
                             2645 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2646 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.sr
                                  c
                             2647 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFiel
                                  dStrength.src
                             2648 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapO
                                  sc.src
                             2649 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmSt
                                  ation.src
                             2650 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPre
                                  set.src
                             2651 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                             2652 ; 1017 |
                             2653 ; 1018 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2654 ; 1019 |// WMA Resources
                             2655 ; 1020 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2656 ; 1021 |//$FILENAME wmaCore.src
                             2657 ; 1022 |#define RSRC_WMA_CORE 378    
                             2658 ; 1023 |//$FILENAME wmaMidLow.src
                             2659 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                             2660 ; 1025 |//$FILENAME wmaHigh.src
                             2661 ; 1026 |#define RSRC_WMA_HIGH 380    
                             2662 ; 1027 |//$FILENAME wmaHighMid.src
                             2663 ; 1028 |#define RSRC_WMA_HIGHMID 381    
                             2664 ; 1029 |//$FILENAME wmaMid.src
                             2665 ; 1030 |#define RSRC_WMA_MID 382    
                             2666 ; 1031 |//$FILENAME wmaLow.src
                             2667 ; 1032 |#define RSRC_WMA_LOW 383    
                             2668 ; 1033 |//$FILENAME wmaX1mem.src
                             2669 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                             2670 ; 1035 |//$FILENAME wmaYmem.src
                             2671 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                             2672 ; 1037 |//$FILENAME wmaLXmem.src
                             2673 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                             2674 ; 1039 |//$FILENAME wmaLYmem.src
                             2675 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
                             2676 ; 1041 |//$FILENAME wmaHuff44Qb.src
                             2677 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                             2678 ; 1043 |//$FILENAME wmaHuff44Ob.src
                             2679 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                             2680 ; 1045 |//$FILENAME wmaHuff16Ob.src
                             2681 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                             2682 ; 1047 |//$FILENAME drmpdcommon.src
                             2683 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                             2684 ; 1049 |//$FILENAME januswmasupport.src
                             2685 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                             2686 ; 1051 |//$FILENAME wmalicenseinit.src
                             2687 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                             2688 ; 1053 |//$FILENAME wma_tables.src
                             2689 ; 1054 |#define RSRC_WMA_TABLES 394    
                             2690 ; 1055 |//$FILENAME janus_tables.src
                             2691 ; 1056 |#define RSRC_JANUS_TABLES 395    
                             2692 ; 1057 |//$FILENAME wma_constants.src
                             2693 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                             2694 ; 1059 |//$FILENAME janus_constants.src
                             2695 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                             2696 ; 1061 |//$FILENAME janus_xmem.src
                             2697 ; 1062 |#define RSRC_JANUS_X 398    
                             2698 ; 1063 |//$FILENAME janusy_data.src
                             2699 ; 1064 |#define RSRC_JANUSY_DATA 399    
                             2700 ; 1065 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2701 ; 1066 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2702 ; 1067 |// Fonts -- these are last because they are very large
                             2703 ; 1068 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             2704 ; 1069 |//$FILENAME font_table.src
                             2705 ; 1070 |#define RSRC_FONT_TABLE 400    
                             2706 ; 1071 |//$FILENAME font_PGM.src
                             2707 ; 1072 |#define RSRC_PGM_8 401    
                             2708 ; 1073 |//$FILENAME font_SGMs.src
                             2709 ; 1074 |#define RSRC_SGMS_8 402    
                             2710 ; 1075 |//$FILENAME font_script_00.src
                             2711 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                             2712 ; 1077 |//$FILENAME font_scripts.src
                             2713 ; 1078 |#define RSRC_SCRIPTS_8 404    
                             2714 ; 1079 |//$FILENAME font_PDM.src
                             2715 ; 1080 |#define RSRC_PDM 405    
                             2716 ; 1081 |//$FILENAME font_SDMs.src
                             2717 ; 1082 |#define RSRC_SDMS 406    
                             2718 ; 1083 |//$FILENAME bitmap_warning.src
                             2719 ; 1084 |#define RSRC_WARNING 407    
                             2720 ; 1085 |//$FILENAME bitmap_device_full.src
                             2721 ; 1086 |#define RSRC_DEVICE_FULL 408    
                             2722 ; 1087 |
                             2723 ; 1088 |
                             2724 ; 1089 |//$FILENAME lcd_controller_init.src
                             2725 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                             2726 ; 1091 |
                             2727 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                             2728 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                             2729 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                             2730 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                             2731 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                             2732 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                             2733 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                             2734 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                             2735 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                             2736 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                             2737 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                             2738 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                             2739 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                             2740 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                             2741 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                             2742 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                             2743 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                             2744 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                             2745 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                             2746 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                             2747 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                             2748 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                             2749 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                             2750 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                             2751 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                             2752 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                             2753 ; 1118 |
                             2754 ; 1119 |
                             2755 ; 1120 |//$FILENAME sysrecord.src
                             2756 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                             2757 ; 1122 |
                             2758 ; 1123 |//$FILENAME string_record_settings.src
                             2759 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                             2760 ; 1125 |//$FILENAME string_sample_rate.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2761 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                             2762 ; 1127 |//$FILENAME string_encoder.src
                             2763 ; 1128 |#define RSRC_STRING_ENCODER 426    
                             2764 ; 1129 |//$FILENAME string_adpcm.src
                             2765 ; 1130 |#define RSRC_STRING_ADPCM 427    
                             2766 ; 1131 |//$FILENAME string_msadpcm.src
                             2767 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                             2768 ; 1133 |//$FILENAME string_imadpcm.src
                             2769 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                             2770 ; 1135 |//$FILENAME string_pcm.src
                             2771 ; 1136 |#define RSRC_STRING_PCM 430    
                             2772 ; 1137 |//$FILENAME string_internal.src
                             2773 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                             2774 ; 1139 |//$FILENAME string_external.src
                             2775 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
                             2776 ; 1141 |//$FILENAME string_device.src
                             2777 ; 1142 |#define RSRC_STRING_DEVICE 433    
                             2778 ; 1143 |//$FILENAME string_source.src
                             2779 ; 1144 |#define RSRC_STRING_SOURCE 434    
                             2780 ; 1145 |//$FILENAME string_microphone.src
                             2781 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                             2782 ; 1147 |//$FILENAME string_linein.src
                             2783 ; 1148 |#define RSRC_STRING_LINEIN 436    
                             2784 ; 1149 |//$FILENAME string_bits.src
                             2785 ; 1150 |#define RSRC_STRING_BITS 437    
                             2786 ; 1151 |//$FILENAME string_4.src
                             2787 ; 1152 |#define RSRC_STRING_4 438    
                             2788 ; 1153 |//$FILENAME string_8.src
                             2789 ; 1154 |#define RSRC_STRING_8 439    
                             2790 ; 1155 |//$FILENAME string_16.src
                             2791 ; 1156 |#define RSRC_STRING_16 440    
                             2792 ; 1157 |//$FILENAME string_24.src
                             2793 ; 1158 |#define RSRC_STRING_24 441    
                             2794 ; 1159 |//$FILENAME string_fm.src
                             2795 ; 1160 |#define RSRC_STRING_FM 442    
                             2796 ; 1161 |//$FILENAME string_mono.src
                             2797 ; 1162 |#define RSRC_STRING_MONO 443    
                             2798 ; 1163 |//$FILENAME string_stereo.src
                             2799 ; 1164 |#define RSRC_STRING_STEREO 444    
                             2800 ; 1165 |//$FILENAME string_8000hz.src
                             2801 ; 1166 |#define RSRC_STRING_8000HZ 445    
                             2802 ; 1167 |//$FILENAME string_11025hz.src
                             2803 ; 1168 |#define RSRC_STRING_11025HZ 446    
                             2804 ; 1169 |//$FILENAME string_16000hz.src
                             2805 ; 1170 |#define RSRC_STRING_16000HZ 447    
                             2806 ; 1171 |//$FILENAME string_22050hz.src
                             2807 ; 1172 |#define RSRC_STRING_22050HZ 448    
                             2808 ; 1173 |//$FILENAME string_32000hz.src
                             2809 ; 1174 |#define RSRC_STRING_32000HZ 449    
                             2810 ; 1175 |//$FILENAME string_44100hz.src
                             2811 ; 1176 |#define RSRC_STRING_44100HZ 450    
                             2812 ; 1177 |//$FILENAME string_48000hz.src
                             2813 ; 1178 |#define RSRC_STRING_48000HZ 451    
                             2814 ; 1179 |//$FILENAME string_channels.src
                             2815 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                             2816 ; 1181 |//$FILENAME string_spaces.src
                             2817 ; 1182 |#define RSRC_STRING_SPACES 453    
                             2818 ; 1183 |//$FILENAME slider_bar.src
                             2819 ; 1184 |#define RSRC_SLIDER_BAR 454    
                             2820 ; 1185 |//$FILENAME slider_bar_inv.src
                             2821 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                             2822 ; 1187 |//$FILENAME slider_track.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2823 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                             2824 ; 1189 |//$FILENAME string_no_files.src
                             2825 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                             2826 ; 1191 |
                             2827 ; 1192 |/////////////////////////////////////////////////////////////////////
                             2828 ; 1193 |//  Time and Date Resource Strings
                             2829 ; 1194 |/////////////////////////////////////////////////////////////////////
                             2830 ; 1195 |//$FILENAME string_sunday.src
                             2831 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                             2832 ; 1197 |//$FILENAME string_monday.src
                             2833 ; 1198 |#define RSRC_STRING_MONDAY 459    
                             2834 ; 1199 |//$FILENAME string_tuesday.src
                             2835 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                             2836 ; 1201 |//$FILENAME string_wednesday.src
                             2837 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
                             2838 ; 1203 |//$FILENAME string_thursday.src
                             2839 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                             2840 ; 1205 |//$FILENAME string_friday.src
                             2841 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                             2842 ; 1207 |//$FILENAME string_saturday.src
                             2843 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                             2844 ; 1209 |//$FILENAME string_am.src
                             2845 ; 1210 |#define RSRC_STRING_AM 465    
                             2846 ; 1211 |//$FILENAME string_pm.src
                             2847 ; 1212 |#define RSRC_STRING_PM 466    
                             2848 ; 1213 |//$FILENAME string_amclear.src
                             2849 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                             2850 ; 1215 |//$FILENAME string_slash.src
                             2851 ; 1216 |#define RSRC_STRING_SLASH 468    
                             2852 ; 1217 |//$FILENAME string_colon.src
                             2853 ; 1218 |#define RSRC_STRING_COLON 469    
                             2854 ; 1219 |//$FILENAME string_12hour.src
                             2855 ; 1220 |#define RSRC_STRING_12HOUR 470    
                             2856 ; 1221 |//$FILENAME string_24hour.src
                             2857 ; 1222 |#define RSRC_STRING_24HOUR 471    
                             2858 ; 1223 |//$FILENAME string_format.src
                             2859 ; 1224 |#define RSRC_STRING_FORMAT 472    
                             2860 ; 1225 |//$FILENAME string_mmddyyyy.src
                             2861 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                             2862 ; 1227 |//$FILENAME string_ddmmyyyy.src
                             2863 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                             2864 ; 1229 |//$FILENAME string_yyyymmdd.src
                             2865 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                             2866 ; 1231 |//$FILENAME string_ok.src
                             2867 ; 1232 |#define RSRC_STRING_OK 476    
                             2868 ; 1233 |//$FILENAME string_cancel.src
                             2869 ; 1234 |#define RSRC_STRING_CANCEL 477    
                             2870 ; 1235 |//$FILENAME negative_sign.src
                             2871 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                             2872 ; 1237 |//$FILENAME string_dec_pt5.src
                             2873 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                             2874 ; 1239 |//$FILENAME string_dec_pt0.src
                             2875 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                             2876 ; 1241 |//$FILENAME string_db.src
                             2877 ; 1242 |#define RSRC_DB_STRING 481    
                             2878 ; 1243 |//$FILENAME string_hz2.src
                             2879 ; 1244 |#define RSRC_HZ2_STRING 482    
                             2880 ; 1245 |
                             2881 ; 1246 |
                             2882 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                             2883 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                             2884 ; 1249 |//$FILENAME metadata_codebank.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2885 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                             2886 ; 1251 |//$FILENAME mp3metadata_codebank.src
                             2887 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                             2888 ; 1253 |//$FILENAME wmametadata_codebank.src
                             2889 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                             2890 ; 1255 |//$FILENAME wavmetadata_codebank.src
                             2891 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                             2892 ; 1257 |//$FILENAME smvmetadata_codebank.src
                             2893 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                             2894 ; 1259 |//$FILENAME playlist2init_codebank.src
                             2895 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                             2896 ; 1261 |
                             2897 ; 1262 |//$FILENAME delete_successful.src
                             2898 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                             2899 ; 1264 |//$FILENAME delete_error.src
                             2900 ; 1265 |#define RSRC_DELETE_ERROR 491    
                             2901 ; 1266 |//$FILENAME lic_expired.src
                             2902 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                             2903 ; 1268 |//$FILENAME id3v2_codebank.src
                             2904 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                             2905 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                             2906 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
                             2907 ; 1272 |//$FILENAME lyrics3_codebank.src
                             2908 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                             2909 ; 1274 |//$FILENAME lrc_codebank.src
                             2910 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                             2911 ; 1276 |//$FILENAME lyrics_api_codebank.src
                             2912 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                             2913 ; 1278 |//$FILENAME wmalyrics_codebank.src
                             2914 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                             2915 ; 1280 |//$FILENAME apicframe_codebank.src
                             2916 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                             2917 ; 1282 |
                             2918 ; 1283 |//$FILENAME exmediaerror1.src
                             2919 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                             2920 ; 1285 |//$FILENAME exmediaerror2.src
                             2921 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                             2922 ; 1287 |//$FILENAME inmediaerror1.src
                             2923 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                             2924 ; 1289 |
                             2925 ; 1290 |//$FILENAME backlight_title.src
                             2926 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
                             2927 ; 1292 |//$FILENAME backlight_state_on.src
                             2928 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                             2929 ; 1294 |//$FILENAME backlight_state_off.src
                             2930 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                             2931 ; 1296 |//$FILENAME backlightmenu.src
                             2932 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                             2933 ; 1298 |//$FILENAME string_backlight_menu.src
                             2934 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                             2935 ; 1300 |
                             2936 ; 1301 |//$FILENAME enc_mp3mod.src
                             2937 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                             2938 ; 1303 |//$FILENAME enc_mp3p.src
                             2939 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                             2940 ; 1305 |//$FILENAME enc_mp3x.src
                             2941 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                             2942 ; 1307 |//$FILENAME enc_mp3y.src
                             2943 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                             2944 ; 1309 |//$FILENAME mp3_implementation.src
                             2945 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                             2946 ; 1311 |//$FILENAME string_mp3.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2947 ; 1312 |#define RSRC_STRING_MP3 513    
                             2948 ; 1313 |//$FILENAME string_all.src
                             2949 ; 1314 |#define RSRC_STRING_ALL 514    
                             2950 ; 1315 |
                             2951 ; 1316 |//$FILENAME mediastartup.src
                             2952 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                             2953 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                             2954 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                             2955 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
                             2956 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                             2957 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                             2958 ; 1323 |
                             2959 ; 1324 |//$FILENAME nanddatadriveinit.src
                             2960 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                             2961 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
                             2962 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                             2963 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                             2964 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                             2965 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                             2966 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                             2967 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                             2968 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
                             2969 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                             2970 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                             2971 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
                             2972 ; 1337 |
                             2973 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                             2974 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                             2975 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                             2976 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                             2977 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                             2978 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                             2979 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                             2980 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                             2981 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                             2982 ; 1347 |
                             2983 ; 1348 |//$FILENAME vbr_codebank.src
                             2984 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                             2985 ; 1350 |
                             2986 ; 1351 |//$FILENAME string_recordtest_menu.src
                             2987 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                             2988 ; 1353 |//$FILENAME string_recordtest_duration.src
                             2989 ; 1354 |#define RSRC_STRING_DURATION 520    
                             2990 ; 1355 |//$FILENAME string_recordtest_time5.src
                             2991 ; 1356 |#define RSRC_STRING_TIME5 521    
                             2992 ; 1357 |//$FILENAME string_recordtest_time10.src
                             2993 ; 1358 |#define RSRC_STRING_TIME10 522    
                             2994 ; 1359 |//$FILENAME string_recordtest_time30.src
                             2995 ; 1360 |#define RSRC_STRING_TIME30 523    
                             2996 ; 1361 |//$FILENAME string_recordtest_time60.src
                             2997 ; 1362 |#define RSRC_STRING_TIME60 524    
                             2998 ; 1363 |//$FILENAME string_recordtest_time300.src
                             2999 ; 1364 |#define RSRC_STRING_TIME300 525    
                             3000 ; 1365 |//$FILENAME string_recordtest_time600.src
                             3001 ; 1366 |#define RSRC_STRING_TIME600 526    
                             3002 ; 1367 |
                             3003 ; 1368 |//$FILENAME test_title.src
                             3004 ; 1369 |#define RSRC_TEST_TITLE 527    
                             3005 ; 1370 |//$FILENAME testmenu.src
                             3006 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                             3007 ; 1372 |
                             3008 ; 1373 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3009 ; 1374 |//$FILENAME mmcmediastartup.src
                             3010 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                             3011 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                             3012 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                             3013 ; 1378 |//$FILENAME mmcinfo.src
                             3014 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                             3015 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                             3016 ; 1381 |//$FILENAME mmcerase.src
                             3017 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                             3018 ; 1383 |
                             3019 ; 1384 |
                             3020 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                             3021 ; 1386 |
                             3022 ; 1387 |//$FILENAME mmcenumerate.src
                             3023 ; 1388 |#define RSRC_MMCENUMERATE 532    
                             3024 ; 1389 |//$FILENAME mmcresetdevice.src
                             3025 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                             3026 ; 1391 |//$FILENAME mmcprocesscsd.src
                             3027 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                             3028 ; 1393 |//$FILENAME mmcprocesscid.src
                             3029 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                             3030 ; 1395 |//$FILENAME mmcprocesscid2.src
                             3031 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                             3032 ; 1397 |//$FILENAME mmcdetectpresence.src
                             3033 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
                             3034 ; 1399 |//$FILENAME mmcserialnumberinit.src
                             3035 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                             3036 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                             3037 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
                             3038 ; 1403 |
                             3039 ; 1404 |//$FILENAME mmcread.src
                             3040 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                             3041 ; 1406 |//$FILENAME mmcmediainit.src
                             3042 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                             3043 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                             3044 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                             3045 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                             3046 ; 1411 |//$FILENAME mmcdatadriveerase.src
                             3047 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                             3048 ; 1413 |
                             3049 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                             3050 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                             3051 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                             3052 ; 1417 |
                             3053 ; 1418 |
                             3054 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                             3055 ; 1420 |//  File system
                             3056 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                             3057 ; 1422 |//$FILENAME arrangefilename.src
                             3058 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                             3059 ; 1424 |//$FILENAME clearcluster.src
                             3060 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                             3061 ; 1426 |//$FILENAME createdirectory.src
                             3062 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                             3063 ; 1428 |//$FILENAME deletecontent.src
                             3064 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                             3065 ; 1430 |//$FILENAME deleterecord.src
                             3066 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                             3067 ; 1432 |//$FILENAME fastopen.src
                             3068 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                             3069 ; 1434 |//$FILENAME fcreate.src
                             3070 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3071 ; 1436 |//$FILENAME filegetattrib.src
                             3072 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                             3073 ; 1438 |//$FILENAME filegetdate.src
                             3074 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                             3075 ; 1440 |//$FILENAME filesetattrib.src
                             3076 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                             3077 ; 1442 |//$FILENAME filesetdate.src
                             3078 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                             3079 ; 1444 |//$FILENAME fsinit.src
                             3080 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                             3081 ; 1446 |//$FILENAME fsshutdown.src
                             3082 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                             3083 ; 1448 |//$FILENAME readdevicerecord.src
                             3084 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                             3085 ; 1450 |//$FILENAME checkspaceinrootdir.src
                             3086 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                             3087 ; 1452 |//$FILENAME setcwdhandle.src
                             3088 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                             3089 ; 1454 |//$FILENAME fsdriveinit.src
                             3090 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                             3091 ; 1456 |//$FILENAME fsclearBuf.src
                             3092 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
                             3093 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                             3094 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.s
                                  rc
                             3095 ; 1460 |//$FILENAME fgetfasthandle.src
                             3096 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                             3097 ; 1462 |//$FILENAME ishandlewriteallocated.src
                             3098 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                             3099 ; 1464 |//$FILENAME isfileopen.src
                             3100 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                             3101 ; 1466 |//$FILENAME iscurrworkdir.src
                             3102 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                             3103 ; 1468 |//$FILENAME chdir.src
                             3104 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                             3105 ; 1470 |//$FILENAME chdirFromOffset.src
                             3106 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                             3107 ; 1472 |//$FILENAME deletetree.src
                             3108 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                             3109 ; 1474 |//$FILENAME deleteallrecords.src
                             3110 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                             3111 ; 1476 |//$FILENAME cleardata.src
                             3112 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                             3113 ; 1478 |//$FILENAME changetolowleveldir.src
                             3114 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                             3115 ; 1480 |//$FILENAME getrecordnumber.src
                             3116 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                             3117 ; 1482 |//$FILENAME fileremove.src
                             3118 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                             3119 ; 1484 |//$FILENAME charactersearch.src
                             3120 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                             3121 ; 1486 |//$FILENAME stringcompare.src
                             3122 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                             3123 ; 1488 |//$FILENAME fopenw.src
                             3124 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                             3125 ; 1490 |//$FILENAME fremove.src
                             3126 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                             3127 ; 1492 |//$FILENAME fremovew.src
                             3128 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                             3129 ; 1494 |//$FILENAME mkdir.src
                             3130 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                             3131 ; 1496 |//$FILENAME mkdirw.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3132 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                             3133 ; 1498 |//$FILENAME rmdir.src
                             3134 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                             3135 ; 1500 |//$FILENAME rmdirw.src
                             3136 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                             3137 ; 1502 |//$FILENAME fgetc.src
                             3138 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                             3139 ; 1504 |//$FILENAME fgets.src
                             3140 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                             3141 ; 1506 |//$FILENAME fputc.src
                             3142 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                             3143 ; 1508 |//$FILENAME fputs.src
                             3144 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                             3145 ; 1510 |//$FILENAME arrangelongfilename.src
                             3146 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
                             3147 ; 1512 |//$FILENAME convert_itoa.src
                             3148 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                             3149 ; 1514 |//$FILENAME createdirrecord.src
                             3150 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                             3151 ; 1516 |//$FILENAME chksum.src
                             3152 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                             3153 ; 1518 |//$FILENAME createshortdirrecord.src
                             3154 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                             3155 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                             3156 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
                             3157 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                             3158 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                             3159 ; 1524 |//$FILENAME extractfilenamew.src
                             3160 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                             3161 ; 1526 |//$FILENAME extractpathw.src
                             3162 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                             3163 ; 1528 |//$FILENAME findfreerecord.src
                             3164 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                             3165 ; 1530 |//$FILENAME getnamew.src
                             3166 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                             3167 ; 1532 |//$FILENAME isdirectoryempty.src
                             3168 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                             3169 ; 1534 |//$FILENAME isshortnamevalid.src
                             3170 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                             3171 ; 1536 |//$FILENAME longdirmatch.src
                             3172 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                             3173 ; 1538 |//$FILENAME unicodetooem.src
                             3174 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                             3175 ; 1540 |//$FILENAME matchdirrecordw.src
                             3176 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                             3177 ; 1542 |//$FILENAME setcwd.src
                             3178 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                             3179 ; 1544 |//$FILENAME setshortfilename.src
                             3180 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                             3181 ; 1546 |//$FILENAME generatefilenametail.src
                             3182 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                             3183 ; 1548 |//$FILENAME dbcstounicode.src
                             3184 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                             3185 ; 1550 |//$FILENAME strcpy.src
                             3186 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                             3187 ; 1552 |//$FILENAME strcpyw.src
                             3188 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                             3189 ; 1554 |//$FILENAME strlengthw.src
                             3190 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                             3191 ; 1556 |//$FILENAME filesystempresent.src
                             3192 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                             3193 ; 1558 |//$FILENAME DataDriveInit.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3194 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                             3195 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                             3196 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                             3197 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                             3198 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                             3199 ; 1564 |//$FILENAME DataDriveGetSize.src
                             3200 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                             3201 ; 1566 |//$FILENAME ConstructLongFileName.src
                             3202 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                             3203 ; 1568 |//$FILENAME strcpyucs3_2.src
                             3204 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                             3205 ; 1570 |//$FILENAME getvolumelabel.src
                             3206 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
                             3207 ; 1572 |//$FILENAME setvolumelabel.src
                             3208 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
                             3209 ; 1574 |//$FILENAME disk_full.src
                             3210 ; 1575 |#define RSRC_DISK_FULL 619    
                             3211 ; 1576 |//$FILENAME chkdskstartup.src
                             3212 ; 1577 |#define RSRC_CHECKDISK 620    
                             3213 ; 1578 |//$FILENAME chkdskstartupy.src
                             3214 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                             3215 ; 1580 |//$FILENAME low_level_pwr_line1.src
                             3216 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                             3217 ; 1582 |//$FILENAME low_level_pwr_line2.src
                             3218 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
                             3219 ; 1584 |//$FILENAME string_bit_rate.src
                             3220 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                             3221 ; 1586 |//$FILENAME string_96000hz.src
                             3222 ; 1587 |#define RSRC_STRING_96KBPS 625    
                             3223 ; 1588 |//$FILENAME string_112000hz.src
                             3224 ; 1589 |#define RSRC_STRING_112KBPS 626    
                             3225 ; 1590 |//$FILENAME string_128000hz.src
                             3226 ; 1591 |#define RSRC_STRING_128KBPS 627    
                             3227 ; 1592 |//$FILENAME string_160000hz.src
                             3228 ; 1593 |#define RSRC_STRING_160KBPS 628    
                             3229 ; 1594 |//$FILENAME string_192000hz.src
                             3230 ; 1595 |#define RSRC_STRING_192KBPS 629    
                             3231 ; 1596 |//$FILENAME string_224000hz.src
                             3232 ; 1597 |#define RSRC_STRING_224KBPS 630    
                             3233 ; 1598 |//$FILENAME string_256000hz.src
                             3234 ; 1599 |#define RSRC_STRING_256KBPS 631    
                             3235 ; 1600 |//$FILENAME string_320000hz.src
                             3236 ; 1601 |#define RSRC_STRING_320KBPS 632    
                             3237 ; 1602 |//$FILENAME string_hz.src
                             3238 ; 1603 |#define RSRC_STRING_HZ 633    
                             3239 ; 1604 |//$FILENAME EncCommonp.src
                             3240 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                             3241 ; 1606 |//$FILENAME adc_adcx.src
                             3242 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                             3243 ; 1608 |//$FILENAME adc_adcy.src
                             3244 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                             3245 ; 1610 |//$FILENAME Funclet_encodercommon.src
                             3246 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                             3247 ; 1612 |//$FILENAME string_album.src
                             3248 ; 1613 |#define RSRC_STRING_ALBUM 638    
                             3249 ; 1614 |//$FILENAME string_encoder_song.src
                             3250 ; 1615 |#define RSRC_STRING_SONG 639    
                             3251 ; 1616 |//$FILENAME string_mode.src
                             3252 ; 1617 |#define RSRC_STRING_MODE 640    
                             3253 ; 1618 |
                             3254 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                             3255 ; 1620 |// display related
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3256 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                             3257 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                             3258 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                             3259 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                             3260 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                             3261 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                             3262 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                             3263 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                             3264 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                             3265 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                             3266 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                             3267 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                             3268 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                             3269 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                             3270 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
                             3271 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                             3272 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                             3273 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                             3274 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                             3275 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                             3276 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                             3277 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
                             3278 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                             3279 ; 1644 |
                             3280 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
                             3281 ; 1646 |//WMDRM Related
                             3282 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                             3283 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                             3284 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                             3285 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                             3286 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                             3287 ; 1652 |//$FILENAME drm_bbx_initialize.src
                             3288 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
                             3289 ; 1654 |//$FILENAME drm_bbx_canbind.src
                             3290 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
                             3291 ; 1656 |//$FILENAME verifychecksum.src
                             3292 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                             3293 ; 1658 |//$FILENAME drm_b64_encodew.src
                             3294 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                             3295 ; 1660 |//$FILENAME _performactions.src
                             3296 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                             3297 ; 1662 |//$FILENAME _processendofchain.src
                             3298 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                             3299 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                             3300 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                             3301 ; 1666 |//$FILENAME drmcrt_towlower.src
                             3302 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                             3303 ; 1668 |//$FILENAME drmcrt_wcslen.src
                             3304 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                             3305 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                             3306 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                             3307 ; 1672 |//$FILENAME drmcrt_memmove.src
                             3308 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                             3309 ; 1674 |//$FILENAME performoperation_part1.src
                             3310 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                             3311 ; 1676 |//$FILENAME performoperation_part2.src
                             3312 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                             3313 ; 1678 |//$FILENAME performoperation_part3.src
                             3314 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                             3315 ; 1680 |//$FILENAME performoperation_part4.src
                             3316 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                             3317 ; 1682 |//$FILENAME performoperation_part5.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3318 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                             3319 ; 1684 |//$FILENAME performoperation_part6.src
                             3320 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                             3321 ; 1686 |//$FILENAME isvalidfunction.src
                             3322 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                             3323 ; 1688 |//$FILENAME functiongetvalue.src
                             3324 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                             3325 ; 1690 |//$FILENAME globalsetvariable.src
                             3326 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                             3327 ; 1692 |//$FILENAME variabledrmkgetorset.src
                             3328 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                             3329 ; 1694 |//$FILENAME variabledrmgetorset.src
                             3330 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                             3331 ; 1696 |//$FILENAME variableappgetorset.src
                             3332 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
                             3333 ; 1698 |//$FILENAME variablelicensegetorset.src
                             3334 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                             3335 ; 1700 |//$FILENAME variablecontentgetorset.src
                             3336 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                             3337 ; 1702 |//$FILENAME variabledevicegetorset.src
                             3338 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                             3339 ; 1704 |//$FILENAME variablepmlicensegetorset.src
                             3340 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                             3341 ; 1706 |//$FILENAME drm_hds_createstore.src
                             3342 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
                             3343 ; 1708 |//$FILENAME drm_hds_init.src
                             3344 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                             3345 ; 1710 |//$FILENAME drm_hds_uninit.src
                             3346 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                             3347 ; 1712 |//$FILENAME drm_hds_openstore.src
                             3348 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                             3349 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                             3350 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                             3351 ; 1716 |//$FILENAME drm_hds_slotresize.src
                             3352 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                             3353 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                             3354 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                             3355 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                             3356 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                             3357 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                             3358 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                             3359 ; 1724 |//$FILENAME _hdscopychildpayload.src
                             3360 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                             3361 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                             3362 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                             3363 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                             3364 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                             3365 ; 1730 |//$FILENAME _hdscleanupstore.src
                             3366 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                             3367 ; 1732 |//$FILENAME drm_lst_clean.src
                             3368 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                             3369 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                             3370 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                             3371 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                             3372 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                             3373 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                             3374 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                             3375 ; 1740 |//$FILENAME _hdscreatenamespace.src
                             3376 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                             3377 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                             3378 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                             3379 ; 1744 |//$FILENAME _writesrn.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3380 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                             3381 ; 1746 |//$FILENAME _writecommonblockheader.src
                             3382 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                             3383 ; 1748 |//$FILENAME _writechildblockheader.src
                             3384 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                             3385 ; 1750 |//$FILENAME _readdatablockheader.src
                             3386 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                             3387 ; 1752 |//$FILENAME _writedatablockheader.src
                             3388 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                             3389 ; 1754 |//$FILENAME _hdsexpandstore.src
                             3390 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                             3391 ; 1756 |//$FILENAME _hdsallocblock.src
                             3392 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                             3393 ; 1758 |//$FILENAME _hdsfreeblock.src
                             3394 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
                             3395 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                             3396 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                             3397 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                             3398 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                             3399 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                             3400 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                             3401 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
                             3402 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                             3403 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                             3404 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
                             3405 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                             3406 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                             3407 ; 1772 |//$FILENAME _hdsremoveslot.src
                             3408 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                             3409 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                             3410 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                             3411 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                             3412 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                             3413 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                             3414 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                             3415 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                             3416 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                             3417 ; 1782 |//$FILENAME _hdsslotresize.src
                             3418 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                             3419 ; 1784 |//$FILENAME _isnull.src
                             3420 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                             3421 ; 1786 |//$FILENAME _hdsgensrnhash.src
                             3422 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                             3423 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                             3424 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                             3425 ; 1790 |//$FILENAME _readsrn.src
                             3426 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                             3427 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                             3428 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
                             3429 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                             3430 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                             3431 ; 1796 |//$FILENAME _hdsslotwrite.src
                             3432 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                             3433 ; 1798 |//$FILENAME _hdsinitslotenum.src
                             3434 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                             3435 ; 1800 |//$FILENAME drm_lst_close.src
                             3436 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                             3437 ; 1802 |//$FILENAME drm_lst_enumnext.src
                             3438 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                             3439 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                             3440 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                             3441 ; 1806 |//$FILENAME _processextensions.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3442 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                             3443 ; 1808 |//$FILENAME _processidlist.src
                             3444 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                             3445 ; 1810 |//$FILENAME _processexclusions.src
                             3446 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                             3447 ; 1812 |//$FILENAME _processinclusions.src
                             3448 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                             3449 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                             3450 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                             3451 ; 1816 |//$FILENAME _getopllevel.src
                             3452 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                             3453 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                             3454 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                             3455 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                             3456 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
                             3457 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
                             3458 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                             3459 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                             3460 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                             3461 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                             3462 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                             3463 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
                             3464 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                             3465 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                             3466 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
                             3467 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                             3468 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                             3469 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                             3470 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                             3471 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                             3472 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                             3473 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                             3474 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                             3475 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                             3476 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                             3477 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                             3478 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                             3479 ; 1844 |//$FILENAME overlappingdates.src
                             3480 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                             3481 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                             3482 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                             3483 ; 1848 |//$FILENAME neginfdate.src
                             3484 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                             3485 ; 1850 |//$FILENAME infdate.src
                             3486 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                             3487 ; 1852 |//$FILENAME isexpired.src
                             3488 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                             3489 ; 1854 |//$FILENAME getsecstateattr.src
                             3490 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                             3491 ; 1856 |//$FILENAME setexpirycategory.src
                             3492 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                             3493 ; 1858 |//$FILENAME getv2licenseinfo.src
                             3494 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                             3495 ; 1860 |//$FILENAME getnextlicense.src
                             3496 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                             3497 ; 1862 |//$FILENAME aggregate.src
                             3498 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                             3499 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                             3500 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                             3501 ; 1866 |//$FILENAME _scannodeforattributew.src
                             3502 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                             3503 ; 1868 |//$FILENAME _getxmlnodecdataw.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3504 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                             3505 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                             3506 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                             3507 ; 1872 |//$FILENAME _createdevicestore.src
                             3508 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                             3509 ; 1874 |//$FILENAME _mapdrmerror.src
                             3510 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                             3511 ; 1876 |//$FILENAME _comparemachineid.src
                             3512 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                             3513 ; 1878 |//$FILENAME initmgrcontext.src
                             3514 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                             3515 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                             3516 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                             3517 ; 1882 |//$FILENAME drm_mgr_commit.src
                             3518 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
                             3519 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                             3520 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                             3521 ; 1886 |//$FILENAME januscleandatastore.src
                             3522 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                             3523 ; 1888 |//$FILENAME drm_mtr_openid.src
                             3524 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                             3525 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
                             3526 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                             3527 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                             3528 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
                             3529 ; 1894 |//$FILENAME oem_setendoffile.src
                             3530 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                             3531 ; 1896 |//$FILENAME oem_genrandombytes.src
                             3532 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                             3533 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                             3534 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                             3535 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                             3536 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                             3537 ; 1902 |//$FILENAME oem_setdevicecert.src
                             3538 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                             3539 ; 1904 |//$FILENAME oem_getclockresetstate.src
                             3540 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                             3541 ; 1906 |//$FILENAME oem_setclockresetstate.src
                             3542 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                             3543 ; 1908 |//$FILENAME oem_getuniqueid.src
                             3544 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                             3545 ; 1910 |//$FILENAME oem_getdevicecert.src
                             3546 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                             3547 ; 1912 |//$FILENAME drm_snc_openstore.src
                             3548 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                             3549 ; 1914 |//$FILENAME drm_snc_closestore.src
                             3550 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                             3551 ; 1916 |//$FILENAME _setkidstoredata.src
                             3552 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                             3553 ; 1918 |//$FILENAME drm_snc_deletekid.src
                             3554 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                             3555 ; 1920 |//$FILENAME drm_snc_updatekid.src
                             3556 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                             3557 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                             3558 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                             3559 ; 1924 |//$FILENAME functiongetvalue_part1.src
                             3560 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                             3561 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                             3562 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                             3563 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                             3564 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                             3565 ; 1930 |//$FILENAME drm_hds_createstore2.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3566 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                             3567 ; 1932 |//$FILENAME drm_hds_openstore2.src
                             3568 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                             3569 ; 1934 |//$FILENAME _hdsprealloc.src
                             3570 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                             3571 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                             3572 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                             3573 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                             3574 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                             3575 ; 1940 |//$FILENAME gendevicecertificate.src
                             3576 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                             3577 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                             3578 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                             3579 ; 1944 |//$FILENAME copyhdsdtore.src
                             3580 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
                             3581 ; 1946 |//$FILENAME generatedevicecert.src
                             3582 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                             3583 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                             3584 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                             3585 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                             3586 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                             3587 ; 1952 |//$FILENAME _hdsupdatesrn.src
                             3588 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                             3589 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                             3590 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
                             3591 ; 1956 |//$FILENAME _checksecureclock.src
                             3592 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                             3593 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                             3594 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                             3595 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                             3596 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                             3597 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                             3598 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                             3599 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                             3600 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                             3601 ; 1966 |//$FILENAME strtol.src
                             3602 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                             3603 ; 1968 |//$FILENAME mktime.src
                             3604 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                             3605 ; 1970 |//$FILENAME gmtime.src
                             3606 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                             3607 ; 1972 |//$FILENAME localtime.src
                             3608 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                             3609 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                             3610 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                             3611 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                             3612 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                             3613 ; 1978 |//$FILENAME _systemtimetotime_t.src
                             3614 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                             3615 ; 1980 |//$FILENAME oem_setsystemtime.src
                             3616 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                             3617 ; 1982 |//$FILENAME const_pkcrypto.src
                             3618 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                             3619 ; 1984 |//$FILENAME const_y.src
                             3620 ; 1985 |#define RSRC_CONST_Y 820    
                             3621 ; 1986 |//$FILENAME aes_dec_table.src
                             3622 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                             3623 ; 1988 |//$FILENAME aes_key_table.src
                             3624 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                             3625 ; 1990 |//$FILENAME aes_enc_table.src
                             3626 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                             3627 ; 1992 |//$FILENAME device_cert.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3628 ; 1993 |#define RSRC_DEVCERT 824    
                             3629 ; 1994 |//$FILENAME devcert_template.src
                             3630 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                             3631 ; 1996 |//$FILENAME getbase64decodedkey.src
                             3632 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                             3633 ; 1998 |//$FILENAME _initslot.src
                             3634 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                             3635 ; 2000 |//$FILENAME hdsimplcommon.src
                             3636 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                             3637 ; 2002 |//$FILENAME hdsimpl_p.src
                             3638 ; 2003 |#define RSRC_HDSIMPL_P 829    
                             3639 ; 2004 |
                             3640 ; 2005 |
                             3641 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                             3642 ; 2007 |//pkcrypto Related
                             3643 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                             3644 ; 2009 |//$FILENAME two_adic_inverse.src
                             3645 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                             3646 ; 2011 |//$FILENAME mp_shift.src
                             3647 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                             3648 ; 2013 |//$FILENAME mp_significant_bit_count.src
                             3649 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
                             3650 ; 2015 |//$FILENAME set_immediate.src
                             3651 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                             3652 ; 2017 |//$FILENAME multiply_immediate.src
                             3653 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                             3654 ; 2019 |//$FILENAME multiply.src
                             3655 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                             3656 ; 2021 |//$FILENAME divide_precondition_1.src
                             3657 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                             3658 ; 2023 |//$FILENAME divide_immediate.src
                             3659 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                             3660 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                             3661 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                             3662 ; 2027 |//$FILENAME ecaffine_table_construction.src
                             3663 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                             3664 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                             3665 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                             3666 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                             3667 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                             3668 ; 2033 |//$FILENAME ecaffine_on_curve.src
                             3669 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                             3670 ; 2035 |//$FILENAME ecaffine_addition.src
                             3671 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                             3672 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                             3673 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                             3674 ; 2039 |//$FILENAME ecaffine_attributes2.src
                             3675 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                             3676 ; 2041 |//$FILENAME kfdesc_initialize.src
                             3677 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                             3678 ; 2043 |//$FILENAME kimmediate.src
                             3679 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
                             3680 ; 2045 |//$FILENAME kprime_immediater.src
                             3681 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                             3682 ; 2047 |//$FILENAME kprime_sqrter.src
                             3683 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                             3684 ; 2049 |//$FILENAME kinitialize_prime.src
                             3685 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                             3686 ; 2051 |//$FILENAME mod_lucasuv.src
                             3687 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                             3688 ; 2053 |//$FILENAME mod_lucas.src
                             3689 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3690 ; 2055 |//$FILENAME bucket_multiply.src
                             3691 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                             3692 ; 2057 |//$FILENAME mod_exp2000.src
                             3693 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                             3694 ; 2059 |//$FILENAME mod_exp.src
                             3695 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                             3696 ; 2061 |//$FILENAME modmul_choices1.src
                             3697 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                             3698 ; 2063 |//$FILENAME mod_sqrt.src
                             3699 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                             3700 ; 2065 |//$FILENAME create_modulus.src
                             3701 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                             3702 ; 2067 |//$FILENAME from_modular.src
                             3703 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                             3704 ; 2069 |//$FILENAME add_immediate.src
                             3705 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                             3706 ; 2071 |//$FILENAME add_diff.src
                             3707 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
                             3708 ; 2073 |//$FILENAME add_full.src
                             3709 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                             3710 ; 2075 |//$FILENAME compare_sum_same.src
                             3711 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
                             3712 ; 2077 |//$FILENAME sub_immediate.src
                             3713 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                             3714 ; 2079 |//$FILENAME mp_initialization.src
                             3715 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                             3716 ; 2081 |//$FILENAME new_random_bytes.src
                             3717 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                             3718 ; 2083 |//$FILENAME new_random_dword_interval.src
                             3719 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                             3720 ; 2085 |//$FILENAME new_random_digit_interval.src
                             3721 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                             3722 ; 2087 |//$FILENAME new_random_mod.src
                             3723 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                             3724 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                             3725 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                             3726 ; 2091 |//$FILENAME new_random_digits.src
                             3727 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                             3728 ; 2093 |//$FILENAME words_to_ecaffine.src
                             3729 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                             3730 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                             3731 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                             3732 ; 2097 |//$FILENAME _threadunsafepkinit.src
                             3733 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                             3734 ; 2099 |//$FILENAME pkinit.src
                             3735 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                             3736 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                             3737 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                             3738 ; 2103 |//$FILENAME drm_pk_encrypt.src
                             3739 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                             3740 ; 2105 |//$FILENAME drm_pk_decrypt.src
                             3741 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                             3742 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                             3743 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                             3744 ; 2109 |//$FILENAME fe2ipmod.src
                             3745 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                             3746 ; 2111 |//$FILENAME drm_pk_sign.src
                             3747 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                             3748 ; 2113 |//$FILENAME drm_pk_verify.src
                             3749 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                             3750 ; 2115 |//$FILENAME random_bytes.src
                             3751 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3752 ; 2117 |//$FILENAME mp_gcdex.src
                             3753 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                             3754 ; 2119 |//$FILENAME mp_gcdex_split1.src
                             3755 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                             3756 ; 2121 |//$FILENAME pkcrypto_p.src
                             3757 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                             3758 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                             3759 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                             3760 ; 2125 |//$FILENAME del_all_warning_line2.src
                             3761 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                             3762 ; 2127 |//$FILENAME del_all_file_star.src
                             3763 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                             3764 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                             3765 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                             3766 ; 2131 |//$FILENAME Funclet_Init5VSense.src
                             3767 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                             3768 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                             3769 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                             3770 ; 2135 |//$FILENAME Funclet_changeplayset.src
                             3771 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                             3772 ; 2137 |
                             3773 ; 2138 |//$FILENAME Funclet_mmctesterase.src
                             3774 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                             3775 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                             3776 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
                             3777 ; 2142 |
                             3778 ; 2143 |
                             3779 ; 2144 |// Added to allow rechargeable battery configurations to build
                             3780 ; 2145 |//$FILENAME battery_charging.src
                             3781 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                             3782 ; 2147 |//$FILENAME batterychargecodebank.src
                             3783 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                             3784 ; 2149 |//$FILENAME updatevolume.src
                             3785 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                             3786 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                             3787 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                             3788 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                             3789 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                             3790 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
                             3791 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                             3792 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
                             3793 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                             3794 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                             3795 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                             3796 ; 2161 |//$FILENAME _iscachedevent.src
                             3797 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                             3798 ; 2163 |//$FILENAME setcountedexpirycategory.src
                             3799 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                             3800 ; 2165 |//$FILENAME oem_data.src
                             3801 ; 2166 |#define RSRC_OEM_DATA 906    
                             3802 ; 2167 |//$FILENAME gpk_p.src
                             3803 ; 2168 |#define RSRC_GPK_P 907    
                             3804 ; 2169 |//$FILENAME key_data.src
                             3805 ; 2170 |#define RSRC_KEY_DATA 908    
                             3806 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                             3807 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                             3808 ; 2173 |//$FILENAME string_working.src
                             3809 ; 2174 |#define RSRC_STRING_WORKING 910    
                             3810 ; 2175 |//$FILENAME Funclet_loadusertime.src
                             3811 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                             3812 ; 2177 |//$FILENAME Funclet_saveusertime.src
                             3813 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3814 ; 2179 |
                             3815 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                             3816 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                             3817 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                             3818 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                             3819 ; 2184 |
                             3820 ; 2185 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             3821 ; 2186 |// Audible ACELP Resources
                             3822 ; 2187 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             3823 ; 2188 |//$FILENAME AudibleAcelpDec.src
                             3824 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                             3825 ; 2190 |//$FILENAME AudibleAcelpP.src
                             3826 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
                             3827 ; 2192 |//$FILENAME AudibleAcelpX.src
                             3828 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                             3829 ; 2194 |//$FILENAME AudibleAcelpY.src
                             3830 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                             3831 ; 2196 |
                             3832 ; 2197 |//$FILENAME AudibleDecMod.src
                             3833 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
                             3834 ; 2199 |//$FILENAME audiblemp3p.src
                             3835 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                             3836 ; 2201 |//$FILENAME audiblemp3x.src
                             3837 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                             3838 ; 2203 |//$FILENAME audiblemp3y.src
                             3839 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                             3840 ; 2205 |
                             3841 ; 2206 |//$FILENAME audiblemetadata_p.src
                             3842 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                             3843 ; 2208 |//$FILENAME audiblemetadata_y.src
                             3844 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                             3845 ; 2210 |//$FILENAME audiblesongposition_p.src
                             3846 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                             3847 ; 2212 |//$FILENAME audibletargetcheck_p.src
                             3848 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                             3849 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                             3850 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                             3851 ; 2216 |//$FILENAME audibledsa_p.src
                             3852 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                             3853 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                             3854 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                             3855 ; 2220 |//$FILENAME audiblemetastrings_p.src
                             3856 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                             3857 ; 2222 |//$FILENAME aaactivationrecords_p.src
                             3858 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                             3859 ; 2224 |
                             3860 ; 2225 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             3861 ; 2226 |// Effects and SRS Resources
                             3862 ; 2227 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             3863 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                             3864 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                             3865 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                             3866 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                             3867 ; 2232 |//$FILENAME wowctrl.src
                             3868 ; 2233 |#define RSRC_WOW_CTRL 934    
                             3869 ; 2234 |
                             3870 ; 2235 |//$FILENAME wowmenu.src
                             3871 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3872 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                             3873 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                             3874 ; 2239 |//$FILENAME string_wow_menu.src
                             3875 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                             3876 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                             3877 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                             3878 ; 2243 |//$FILENAME string_wowvolume_menu.src
                             3879 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                             3880 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                             3881 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                             3882 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                             3883 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                             3884 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                             3885 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                             3886 ; 2251 |//$FILENAME wow_icon.src
                             3887 ; 2252 |#define RSRC_WOW_ICON 943    
                             3888 ; 2253 |
                             3889 ; 2254 |//$FILENAME wow16k.src
                             3890 ; 2255 |#define RSRC_WOW16K 944    
                             3891 ; 2256 |//$FILENAME wow32k.src
                             3892 ; 2257 |#define RSRC_WOW32K 945    
                             3893 ; 2258 |//$FILENAME wow8k.src
                             3894 ; 2259 |#define RSRC_WOW8K 946    
                             3895 ; 2260 |//$FILENAME wow11k.src
                             3896 ; 2261 |#define RSRC_WOW11K 947    
                             3897 ; 2262 |//$FILENAME wow22k.src
                             3898 ; 2263 |#define RSRC_WOW22K 948    
                             3899 ; 2264 |//$FILENAME wow24k.src
                             3900 ; 2265 |#define RSRC_WOW24K 949    
                             3901 ; 2266 |//$FILENAME wow44k.src
                             3902 ; 2267 |#define RSRC_WOW44K 950    
                             3903 ; 2268 |//$FILENAME wow48k.src
                             3904 ; 2269 |#define RSRC_WOW48K 951    
                             3905 ; 2270 |
                             3906 ; 2271 |//$FILENAME wow16k_Y.src
                             3907 ; 2272 |#define RSRC_WOW16K_Y 952    
                             3908 ; 2273 |//$FILENAME wow32k_Y.src
                             3909 ; 2274 |#define RSRC_WOW32K_Y 953    
                             3910 ; 2275 |//$FILENAME wow8k_Y.src
                             3911 ; 2276 |#define RSRC_WOW8K_Y 954    
                             3912 ; 2277 |//$FILENAME wow11k_Y.src
                             3913 ; 2278 |#define RSRC_WOW11K_Y 955    
                             3914 ; 2279 |//$FILENAME wow22k_Y.src
                             3915 ; 2280 |#define RSRC_WOW22K_Y 956    
                             3916 ; 2281 |//$FILENAME wow24k_Y.src
                             3917 ; 2282 |#define RSRC_WOW24K_Y 957    
                             3918 ; 2283 |//$FILENAME wow44k_Y.src
                             3919 ; 2284 |#define RSRC_WOW44K_Y 958    
                             3920 ; 2285 |//$FILENAME wow48k_Y.src
                             3921 ; 2286 |#define RSRC_WOW48K_Y 959    
                             3922 ; 2287 |
                             3923 ; 2288 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             3924 ; 2289 |// Audible Section Navigation
                             3925 ; 2290 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                             3926 ; 2291 |//$FILENAME audible_secnav.src
                             3927 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                             3928 ; 2293 |
                             3929 ; 2294 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             3930 ; 2295 |// PLAYLIST3 and Music Library
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3931 ; 2296 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                             3932 ; 2297 |
                             3933 ; 2298 |//$FILENAME build_ml.src
                             3934 ; 2299 |#define RSRC_BUILD_ML 961    
                             3935 ; 2300 |//$FILENAME build_ml_warning.src
                             3936 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                             3937 ; 2302 |//$FILENAME build_ml_warning2.src
                             3938 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                             3939 ; 2304 |//$FILENAME build_flash1.src
                             3940 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                             3941 ; 2306 |//$FILENAME build_flash2.src
                             3942 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                             3943 ; 2308 |//$FILENAME build_flash3.src
                             3944 ; 2309 |#define RSRC_BUILD_FLASH3 966    
                             3945 ; 2310 |//$FILENAME build_sd1.src
                             3946 ; 2311 |#define RSRC_BUILD_SD1 967    
                             3947 ; 2312 |//$FILENAME build_sd2.src
                             3948 ; 2313 |#define RSRC_BUILD_SD2 968    
                             3949 ; 2314 |//$FILENAME build_sd3.src
                             3950 ; 2315 |#define RSRC_BUILD_SD3 969    
                             3951 ; 2316 |//$FILENAME build_newmusic.src
                             3952 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                             3953 ; 2318 |//$FILENAME sdmd.src
                             3954 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
                             3955 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                             3956 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                             3957 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                             3958 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
                             3959 ; 2324 |//$FILENAME MusicLibBuildModule.src
                             3960 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                             3961 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                             3962 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                             3963 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                             3964 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                             3965 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                             3966 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                             3967 ; 2332 |//$FILENAME MusicLibPlayModule.src
                             3968 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                             3969 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                             3970 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                             3971 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                             3972 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                             3973 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                             3974 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                             3975 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                             3976 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                             3977 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                             3978 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                             3979 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                             3980 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                             3981 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                             3982 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                             3983 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                             3984 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                             3985 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                             3986 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                             3987 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                             3988 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                             3989 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                             3990 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                             3991 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3992 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                             3993 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                             3994 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                             3995 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                             3996 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                             3997 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                             3998 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                             3999 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                             4000 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                             4001 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                             4002 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                             4003 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                             4004 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                             4005 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                             4006 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
                             4007 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                             4008 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                             4009 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                             4010 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                             4011 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                             4012 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                             4013 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
                             4014 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                             4015 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                             4016 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
                             4017 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                             4018 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                             4019 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                             4020 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                             4021 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                             4022 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                             4023 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                             4024 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                             4025 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                             4026 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                             4027 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                             4028 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                             4029 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                             4030 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                             4031 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                             4032 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                             4033 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                             4034 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                             4035 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                             4036 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                             4037 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                             4038 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                             4039 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                             4040 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                             4041 ; 2406 |//$FILENAME MusicLibMergeFunction.src
                             4042 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                             4043 ; 2408 |//$FILENAME MusicLibMergeModule.src
                             4044 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                             4045 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                             4046 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                             4047 ; 2412 |//$FILENAME playmusicmenu.src
                             4048 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                             4049 ; 2414 |//$FILENAME browsemenu.src
                             4050 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                             4051 ; 2416 |//$FILENAME browsemenu_extra.src
                             4052 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                             4053 ; 2418 |//$FILENAME string_play_all.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4054 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                             4055 ; 2420 |//$FILENAME string_play.src
                             4056 ; 2421 |#define RSRC_STRING_PLAY 1022    
                             4057 ; 2422 |//$FILENAME string_unknown_year.src
                             4058 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                             4059 ; 2424 |//$FILENAME string_year_width.src
                             4060 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                             4061 ; 2426 |//$FILENAME string_artist.src
                             4062 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                             4063 ; 2428 |//$FILENAME string_songs.src
                             4064 ; 2429 |#define RSRC_STRING_SONGS 1026    
                             4065 ; 2430 |//$FILENAME string_on_the_fly.src
                             4066 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                             4067 ; 2432 |//$FILENAME string_new_music.src
                             4068 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
                             4069 ; 2434 |//$FILENAME string_genre.src
                             4070 ; 2435 |#define RSRC_STRING_GENRE 1029    
                             4071 ; 2436 |//$FILENAME string_year.src
                             4072 ; 2437 |#define RSRC_STRING_YEAR 1030    
                             4073 ; 2438 |//$FILENAME string_playlist.src
                             4074 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                             4075 ; 2440 |//$FILENAME string_fm_rec.src
                             4076 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                             4077 ; 2442 |//$FILENAME string_linein_rec.src
                             4078 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
                             4079 ; 2444 |//$FILENAME string_play_music.src
                             4080 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                             4081 ; 2446 |//$FILENAME highlight_back.src
                             4082 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                             4083 ; 2448 |//$FILENAME newmusicmenu.src
                             4084 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                             4085 ; 2450 |//$FILENAME string_1_day.src
                             4086 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                             4087 ; 2452 |//$FILENAME string_1_week.src
                             4088 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                             4089 ; 2454 |//$FILENAME string_1_month.src
                             4090 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                             4091 ; 2456 |//$FILENAME on_the_fly_full.src
                             4092 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                             4093 ; 2458 |//$FILENAME on_the_fly_free1.src
                             4094 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                             4095 ; 2460 |//$FILENAME on_the_fly_free2.src
                             4096 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                             4097 ; 2462 |//$FILENAME on_the_fly_delete1.src
                             4098 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                             4099 ; 2464 |//$FILENAME on_the_fly_delete2.src
                             4100 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                             4101 ; 2466 |//$FILENAME empty_favourite.src
                             4102 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                             4103 ; 2468 |//$FILENAME sd_remove.src
                             4104 ; 2469 |#define RSRC_SD_REMOVE 1046    
                             4105 ; 2470 |//$FILENAME sd_insert.src
                             4106 ; 2471 |#define RSRC_SD_INSERT 1047    
                             4107 ; 2472 |//$FILENAME check_disk_1.src
                             4108 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                             4109 ; 2474 |//$FILENAME check_disk_2.src
                             4110 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                             4111 ; 2476 |//$FILENAME check_disk_3.src
                             4112 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                             4113 ; 2478 |//$FILENAME flash_error.src
                             4114 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                             4115 ; 2480 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4116 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4117 ; 2482 |// STFM1000 Tuner funclet
                             4118 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4119 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                             4120 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                             4121 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                             4122 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                             4123 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                             4124 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                             4125 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                             4126 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                             4127 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                             4128 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                             4129 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                             4130 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
                             4131 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                             4132 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                             4133 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                             4134 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                             4135 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                             4136 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                             4137 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
                             4138 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                             4139 ; 2504 |//$FILENAME decstfmmod.src
                             4140 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
                             4141 ; 2506 |//$FILENAME dec_stfmp.src
                             4142 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                             4143 ; 2508 |//$FILENAME dec_stfmx.src
                             4144 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                             4145 ; 2510 |//$FILENAME dec_stfmy.src
                             4146 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                             4147 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                             4148 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                             4149 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                             4150 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                             4151 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                             4152 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                             4153 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                             4154 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                             4155 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                             4156 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                             4157 ; 2522 |//$FILENAME Funclet_I2CReset.src
                             4158 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                             4159 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                             4160 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                             4161 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                             4162 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                             4163 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                             4164 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                             4165 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                             4166 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                             4167 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                             4168 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                             4169 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                             4170 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                             4171 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaB
                                  ias.src
                             4172 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookF
                                  orPilot.src
                             4173 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                             4174 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                             4175 ; 2540 |// for RestoreDriveFromBackup
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4176 ; 2541 |//$FILENAME restoresysdrive.src
                             4177 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                             4178 ; 2543 |
                             4179 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4180 ; 2545 |// Playlist5 sources
                             4181 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4182 ; 2547 |//$FILENAME playlist5_browsemenu.src
                             4183 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                             4184 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                             4185 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                             4186 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                             4187 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                             4188 ; 2553 |//$FILENAME playlist5_playback_module.src
                             4189 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                             4190 ; 2555 |//$FILENAME playlist5_browse_module.src
                             4191 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                             4192 ; 2557 |
                             4193 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                             4194 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                             4195 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                             4196 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                             4197 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
                             4198 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                             4199 ; 2564 |
                             4200 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4201 ; 2566 |// DanhNguyen added bitmaps
                             4202 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             4203 ; 2568 |//$FILENAME icon_folder.src
                             4204 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                             4205 ; 2570 |//$FILENAME icon_song.src
                             4206 ; 2571 |#define RSRC_ICON_SONG 1089    
                             4207 ; 2572 |
                             4208 ; 2573 |//$FILENAME menu_music.src
                             4209 ; 2574 |#define RSRC_MENU_MUSIC 1090    
                             4210 ; 2575 |//$FILENAME vie_menu_music.src
                             4211 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                             4212 ; 2577 |
                             4213 ; 2578 |//$FILENAME menu_voice.src
                             4214 ; 2579 |#define RSRC_MENU_VOICE 1092    
                             4215 ; 2580 |//$FILENAME vie_menu_voice.src
                             4216 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                             4217 ; 2582 |
                             4218 ; 2583 |//$FILENAME menu_fmtuner.src
                             4219 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                             4220 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                             4221 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                             4222 ; 2587 |
                             4223 ; 2588 |//$FILENAME menu_record.src
                             4224 ; 2589 |#define RSRC_MENU_RECORD 1096    
                             4225 ; 2590 |//$FILENAME vie_menu_record.src
                             4226 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                             4227 ; 2592 |
                             4228 ; 2593 |//$FILENAME menu_settings.src
                             4229 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                             4230 ; 2595 |//$FILENAME vie_menu_settings.src
                             4231 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                             4232 ; 2597 |
                             4233 ; 2598 |//$FILENAME menu_shutdown.src
                             4234 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                             4235 ; 2600 |//$FILENAME vie_menu_shutdown.src
                             4236 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                             4237 ; 2602 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4238 ; 2603 |//$FILENAME menu_clock.src
                             4239 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                             4240 ; 2605 |//$FILENAME vie_menu_clock.src
                             4241 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                             4242 ; 2607 |
                             4243 ; 2608 |//$FILENAME menu_ab.src
                             4244 ; 2609 |#define RSRC_MENU_AB 1104    
                             4245 ; 2610 |//$FILENAME vie_menu_ab.src
                             4246 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                             4247 ; 2612 |
                             4248 ; 2613 |//$FILENAME menu_delete.src
                             4249 ; 2614 |#define RSRC_MENU_DELETE 1106    
                             4250 ; 2615 |//$FILENAME vie_menu_delete.src
                             4251 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                             4252 ; 2617 |
                             4253 ; 2618 |//$FILENAME menu_about.src
                             4254 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                             4255 ; 2620 |//$FILENAME vie_menu_about.src
                             4256 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                             4257 ; 2622 |
                             4258 ; 2623 |//$FILENAME menu_exit.src
                             4259 ; 2624 |#define RSRC_MENU_EXIT 1110    
                             4260 ; 2625 |//$FILENAME vie_menu_exit.src
                             4261 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                             4262 ; 2627 |
                             4263 ; 2628 |//$FILENAME music_play_all.src
                             4264 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                             4265 ; 2630 |//$FILENAME vie_music_play_all.src
                             4266 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                             4267 ; 2632 |
                             4268 ; 2633 |//$FILENAME music_folder_internal.src
                             4269 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                             4270 ; 2635 |//$FILENAME vie_music_folder_internal.src
                             4271 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                             4272 ; 2637 |
                             4273 ; 2638 |//$FILENAME music_folder_external.src
                             4274 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                             4275 ; 2640 |//$FILENAME vie_music_folder_external.src
                             4276 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                             4277 ; 2642 |
                             4278 ; 2643 |//$FILENAME music_songs.src
                             4279 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                             4280 ; 2645 |//$FILENAME vie_music_songs.src
                             4281 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                             4282 ; 2647 |
                             4283 ; 2648 |//$FILENAME music_favorites.src
                             4284 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                             4285 ; 2650 |//$FILENAME vie_music_favorites.src
                             4286 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                             4287 ; 2652 |
                             4288 ; 2653 |//$FILENAME music_fm_record.src
                             4289 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                             4290 ; 2655 |//$FILENAME vie_music_fm_record.src
                             4291 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                             4292 ; 2657 |
                             4293 ; 2658 |//$FILENAME music_exit.src
                             4294 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
                             4295 ; 2660 |//$FILENAME vie_music_exit.src
                             4296 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                             4297 ; 2662 |
                             4298 ; 2663 |//$FILENAME browse_music_folder_internal.src
                             4299 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4300 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                             4301 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                             4302 ; 2667 |
                             4303 ; 2668 |//$FILENAME browse_music_folder_external.src
                             4304 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                             4305 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                             4306 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                             4307 ; 2672 |
                             4308 ; 2673 |//$FILENAME browse_music_list_songs.src
                             4309 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                             4310 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                             4311 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                             4312 ; 2677 |
                             4313 ; 2678 |//$FILENAME browse_music_favourites.src
                             4314 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
                             4315 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                             4316 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                             4317 ; 2682 |
                             4318 ; 2683 |//$FILENAME browse_music_fm_files.src
                             4319 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                             4320 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                             4321 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
                             4322 ; 2687 |
                             4323 ; 2688 |//$FILENAME browse_voice.src
                             4324 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
                             4325 ; 2690 |//$FILENAME vie_browse_voice.src
                             4326 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                             4327 ; 2692 |
                             4328 ; 2693 |//$FILENAME favourites_list_add.src
                             4329 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                             4330 ; 2695 |//$FILENAME vie_favourites_list_add.src
                             4331 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                             4332 ; 2697 |
                             4333 ; 2698 |//$FILENAME favourites_list_remove.src
                             4334 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                             4335 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                             4336 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                             4337 ; 2702 |
                             4338 ; 2703 |//$FILENAME favourites_list_is_full.src
                             4339 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                             4340 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                             4341 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                             4342 ; 2707 |
                             4343 ; 2708 |//$FILENAME about_screen_1.src
                             4344 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                             4345 ; 2710 |//$FILENAME vie_about_screen_1.src
                             4346 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                             4347 ; 2712 |
                             4348 ; 2713 |//$FILENAME about_screen_2.src
                             4349 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                             4350 ; 2715 |//$FILENAME vie_about_screen_2.src
                             4351 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                             4352 ; 2717 |
                             4353 ; 2718 |//$FILENAME about_screen_3.src
                             4354 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                             4355 ; 2720 |//$FILENAME vie_about_screen_3.src
                             4356 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                             4357 ; 2722 |
                             4358 ; 2723 |//$FILENAME about_screen_4.src
                             4359 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                             4360 ; 2725 |//$FILENAME vie_about_screen_4.src
                             4361 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4362 ; 2727 |
                             4363 ; 2728 |//$FILENAME time_date_exit_title.src
                             4364 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                             4365 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                             4366 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                             4367 ; 2732 |
                             4368 ; 2733 |//$FILENAME time_clean_desktop.src
                             4369 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                             4370 ; 2735 |//$FILENAME time_dash.src
                             4371 ; 2736 |#define RSRC_TIME_DASH 1155    
                             4372 ; 2737 |
                             4373 ; 2738 |//$FILENAME time_day_7.src
                             4374 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                             4375 ; 2740 |//$FILENAME vie_time_day_7.src
                             4376 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
                             4377 ; 2742 |//$FILENAME time_day_cn.src
                             4378 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                             4379 ; 2744 |//$FILENAME vie_time_day_cn.src
                             4380 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                             4381 ; 2746 |//$FILENAME time_day_2.src
                             4382 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                             4383 ; 2748 |//$FILENAME vie_time_day_2.src
                             4384 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                             4385 ; 2750 |//$FILENAME time_day_3.src
                             4386 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
                             4387 ; 2752 |//$FILENAME vie_time_day_3.src
                             4388 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                             4389 ; 2754 |//$FILENAME time_day_4.src
                             4390 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                             4391 ; 2756 |//$FILENAME vie_time_day_4.src
                             4392 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                             4393 ; 2758 |//$FILENAME time_day_5.src
                             4394 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                             4395 ; 2760 |//$FILENAME vie_time_day_5.src
                             4396 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                             4397 ; 2762 |//$FILENAME time_day_6.src
                             4398 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                             4399 ; 2764 |//$FILENAME vie_time_day_6.src
                             4400 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                             4401 ; 2766 |
                             4402 ; 2767 |//$FILENAME time_month_1.src
                             4403 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                             4404 ; 2769 |//$FILENAME vie_time_month_1.src
                             4405 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                             4406 ; 2771 |//$FILENAME time_month_2.src
                             4407 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                             4408 ; 2773 |//$FILENAME vie_time_month_2.src
                             4409 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                             4410 ; 2775 |//$FILENAME time_month_3.src
                             4411 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                             4412 ; 2777 |//$FILENAME vie_time_month_3.src
                             4413 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                             4414 ; 2779 |//$FILENAME time_month_4.src
                             4415 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                             4416 ; 2781 |//$FILENAME vie_time_month_4.src
                             4417 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                             4418 ; 2783 |//$FILENAME time_month_5.src
                             4419 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                             4420 ; 2785 |//$FILENAME vie_time_month_5.src
                             4421 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                             4422 ; 2787 |//$FILENAME time_month_6.src
                             4423 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4424 ; 2789 |//$FILENAME vie_time_month_6.src
                             4425 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                             4426 ; 2791 |//$FILENAME time_month_7.src
                             4427 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                             4428 ; 2793 |//$FILENAME vie_time_month_7.src
                             4429 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                             4430 ; 2795 |//$FILENAME time_month_8.src
                             4431 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                             4432 ; 2797 |//$FILENAME vie_time_month_8.src
                             4433 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                             4434 ; 2799 |//$FILENAME time_month_9.src
                             4435 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                             4436 ; 2801 |//$FILENAME vie_time_month_9.src
                             4437 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                             4438 ; 2803 |//$FILENAME time_month_10.src
                             4439 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                             4440 ; 2805 |//$FILENAME vie_time_month_10.src
                             4441 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                             4442 ; 2807 |//$FILENAME time_month_11.src
                             4443 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                             4444 ; 2809 |//$FILENAME vie_time_month_11.src
                             4445 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
                             4446 ; 2811 |//$FILENAME time_month_12.src
                             4447 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                             4448 ; 2813 |//$FILENAME vie_time_month_12.src
                             4449 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                             4450 ; 2815 |
                             4451 ; 2816 |//$FILENAME time_num_am.src
                             4452 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                             4453 ; 2818 |//$FILENAME time_num_am.src
                             4454 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                             4455 ; 2820 |//$FILENAME settime_format_12h.src
                             4456 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                             4457 ; 2822 |//$FILENAME settime_format_24h.src
                             4458 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                             4459 ; 2824 |//$FILENAME setdate_format_dmy.src
                             4460 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
                             4461 ; 2826 |//$FILENAME setdate_format_mdy.src
                             4462 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                             4463 ; 2828 |//$FILENAME setdate_format_ymd.src
                             4464 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                             4465 ; 2830 |
                             4466 ; 2831 |//$FILENAME time_num_large_0.src
                             4467 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                             4468 ; 2833 |//$FILENAME time_num_large_1.src
                             4469 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                             4470 ; 2835 |//$FILENAME time_num_large_2.src
                             4471 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                             4472 ; 2837 |//$FILENAME time_num_large_3.src
                             4473 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                             4474 ; 2839 |//$FILENAME time_num_large_4.src
                             4475 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                             4476 ; 2841 |//$FILENAME time_num_large_5.src
                             4477 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                             4478 ; 2843 |//$FILENAME time_num_large_6.src
                             4479 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                             4480 ; 2845 |//$FILENAME time_num_large_7.src
                             4481 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                             4482 ; 2847 |//$FILENAME time_num_large_8.src
                             4483 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                             4484 ; 2849 |//$FILENAME time_num_large_9.src
                             4485 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4486 ; 2851 |
                             4487 ; 2852 |//$FILENAME time_num_medium_0.src
                             4488 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                             4489 ; 2854 |//$FILENAME time_num_medium_1.src
                             4490 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                             4491 ; 2856 |//$FILENAME time_num_medium_2.src
                             4492 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                             4493 ; 2858 |//$FILENAME time_num_medium_3.src
                             4494 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                             4495 ; 2860 |//$FILENAME time_num_medium_4.src
                             4496 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                             4497 ; 2862 |//$FILENAME time_num_medium_5.src
                             4498 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                             4499 ; 2864 |//$FILENAME time_num_medium_6.src
                             4500 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
                             4501 ; 2866 |//$FILENAME time_num_medium_7.src
                             4502 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                             4503 ; 2868 |//$FILENAME time_num_medium_8.src
                             4504 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                             4505 ; 2870 |//$FILENAME time_num_medium_9.src
                             4506 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                             4507 ; 2872 |
                             4508 ; 2873 |//$FILENAME time_colon.src
                             4509 ; 2874 |#define RSRC_TIME_COLON 1221    
                             4510 ; 2875 |
                             4511 ; 2876 |//$FILENAME settings_backlight_title.src
                             4512 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                             4513 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                             4514 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                             4515 ; 2880 |//$FILENAME settings_playmode_title.src
                             4516 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                             4517 ; 2882 |
                             4518 ; 2883 |//$FILENAME settings_contrast_title.src
                             4519 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                             4520 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                             4521 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                             4522 ; 2887 |
                             4523 ; 2888 |//$FILENAME settings_eq_title.src
                             4524 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                             4525 ; 2890 |//$FILENAME vie_settings_eq_title.src
                             4526 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                             4527 ; 2892 |
                             4528 ; 2893 |//$FILENAME settings_exit_title.src
                             4529 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                             4530 ; 2895 |//$FILENAME vie_settings_exit_title.src
                             4531 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                             4532 ; 2897 |
                             4533 ; 2898 |//$FILENAME settings_set_date_title.src
                             4534 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                             4535 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                             4536 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                             4537 ; 2902 |
                             4538 ; 2903 |//$FILENAME settings_set_time_title.src
                             4539 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                             4540 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                             4541 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                             4542 ; 2907 |
                             4543 ; 2908 |//$FILENAME settings_playmode_normal.src
                             4544 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                             4545 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
                             4546 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                             4547 ; 2912 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4548 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                             4549 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                             4550 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                             4551 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                             4552 ; 2917 |
                             4553 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                             4554 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                             4555 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                             4556 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                             4557 ; 2922 |
                             4558 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                             4559 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                             4560 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                             4561 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                             4562 ; 2927 |
                             4563 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                             4564 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                             4565 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                             4566 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                             4567 ; 2932 |
                             4568 ; 2933 |//$FILENAME settings_backlight_on.src
                             4569 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
                             4570 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                             4571 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                             4572 ; 2937 |
                             4573 ; 2938 |//$FILENAME settings_backlight_10s.src
                             4574 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                             4575 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                             4576 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                             4577 ; 2942 |
                             4578 ; 2943 |//$FILENAME settings_backlight_20s.src
                             4579 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                             4580 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                             4581 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                             4582 ; 2947 |
                             4583 ; 2948 |//$FILENAME settings_backlight_30s.src
                             4584 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                             4585 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                             4586 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                             4587 ; 2952 |
                             4588 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                             4589 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                             4590 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                             4591 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                             4592 ; 2957 |
                             4593 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                             4594 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                             4595 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                             4596 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                             4597 ; 2962 |
                             4598 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                             4599 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                             4600 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                             4601 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                             4602 ; 2967 |
                             4603 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                             4604 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                             4605 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                             4606 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                             4607 ; 2972 |
                             4608 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                             4609 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4610 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                             4611 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                             4612 ; 2977 |
                             4613 ; 2978 |//$FILENAME settings_languages_eng.src
                             4614 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                             4615 ; 2980 |//$FILENAME settings_languages_vie.src
                             4616 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                             4617 ; 2982 |
                             4618 ; 2983 |//$FILENAME fraction_dot.src
                             4619 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                             4620 ; 2985 |
                             4621 ; 2986 |//$FILENAME fm_background.src
                             4622 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                             4623 ; 2988 |//$FILENAME vie_fm_background.src
                             4624 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
                             4625 ; 2990 |
                             4626 ; 2991 |//$FILENAME searching_please_wait.src
                             4627 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                             4628 ; 2993 |//$FILENAME vie_searching_please_wait.src
                             4629 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                             4630 ; 2995 |
                             4631 ; 2996 |//$FILENAME fm_auto_search.src
                             4632 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                             4633 ; 2998 |//$FILENAME vie_fm_auto_search.src
                             4634 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
                             4635 ; 3000 |
                             4636 ; 3001 |//$FILENAME jvj_shutdown_player.src
                             4637 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                             4638 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                             4639 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                             4640 ; 3005 |
                             4641 ; 3006 |#endif //IF (!@def(resources))
                             4642 ; 3007 |
                             4643 
                             4645 
                             4646 ; 12   |#include "buttons.h"
                             4647 
                             4649 
                             4650 ; 1    |#ifndef _BUTTONS_H
                             4651 ; 2    |#define _BUTTONS_H
                             4652 ; 3    |
                             4653 ; 4    |#include "types.h"
                             4654 
                             4656 
                             4657 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4658 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4659 ; 3    |//
                             4660 ; 4    |// Filename: types.h
                             4661 ; 5    |// Description: Standard data types
                             4662 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4663 ; 7    |
                             4664 ; 8    |#ifndef _TYPES_H
                             4665 ; 9    |#define _TYPES_H
                             4666 ; 10   |
                             4667 ; 11   |// TODO:  move this outta here!
                             4668 ; 12   |#if !defined(NOERROR)
                             4669 ; 13   |#define NOERROR 0
                             4670 ; 14   |#define SUCCESS 0
                             4671 ; 15   |#endif 
                             4672 ; 16   |#if !defined(SUCCESS)
                             4673 ; 17   |#define SUCCESS  0
                             4674 ; 18   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4675 ; 19   |#if !defined(ERROR)
                             4676 ; 20   |#define ERROR   -1
                             4677 ; 21   |#endif
                             4678 ; 22   |#if !defined(FALSE)
                             4679 ; 23   |#define FALSE 0
                             4680 ; 24   |#endif
                             4681 ; 25   |#if !defined(TRUE)
                             4682 ; 26   |#define TRUE  1
                             4683 ; 27   |#endif
                             4684 ; 28   |
                             4685 ; 29   |#if !defined(NULL)
                             4686 ; 30   |#define NULL 0
                             4687 ; 31   |#endif
                             4688 ; 32   |
                             4689 ; 33   |#define MAX_INT     0x7FFFFF
                             4690 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4691 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4692 ; 36   |#define MAX_ULONG   (-1) 
                             4693 ; 37   |
                             4694 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4695 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4696 ; 40   |
                             4697 ; 41   |
                             4698 ; 42   |#define BYTE    unsigned char       // btVarName
                             4699 ; 43   |#define CHAR    signed char         // cVarName
                             4700 ; 44   |#define USHORT  unsigned short      // usVarName
                             4701 ; 45   |#define SHORT   unsigned short      // sVarName
                             4702 ; 46   |#define WORD    unsigned int        // wVarName
                             4703 ; 47   |#define INT     signed int          // iVarName
                             4704 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4705 ; 49   |#define LONG    signed long         // lVarName
                             4706 ; 50   |#define BOOL    unsigned int        // bVarName
                             4707 ; 51   |#define FRACT   _fract              // frVarName
                             4708 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4709 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4710 ; 54   |#define FLOAT   float               // fVarName
                             4711 ; 55   |#define DBL     double              // dVarName
                             4712 ; 56   |#define ENUM    enum                // eVarName
                             4713 ; 57   |#define CMX     _complex            // cmxVarName
                             4714 ; 58   |typedef WORD UCS3;                   // 
                             4715 ; 59   |
                             4716 ; 60   |#define UINT16  unsigned short
                             4717 ; 61   |#define UINT8   unsigned char   
                             4718 ; 62   |#define UINT32  unsigned long
                             4719 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4720 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4721 ; 65   |#define WCHAR   UINT16
                             4722 ; 66   |
                             4723 ; 67   |//UINT128 is 16 bytes or 6 words
                             4724 ; 68   |typedef struct UINT128_3500 {   
                             4725 ; 69   |    int val[6];     
                             4726 ; 70   |} UINT128_3500;
                             4727 ; 71   |
                             4728 ; 72   |#define UINT128   UINT128_3500
                             4729 ; 73   |
                             4730 ; 74   |// Little endian word packed byte strings:   
                             4731 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4732 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4733 ; 77   |// Little endian word packed byte strings:   
                             4734 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4735 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4736 ; 80   |
                             4737 ; 81   |// Declare Memory Spaces To Use When Coding
                             4738 ; 82   |// A. Sector Buffers
                             4739 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4740 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4741 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4742 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4743 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4744 ; 88   |// B. Media DDI Memory
                             4745 ; 89   |#define MEDIA_DDI_MEM _Y
                             4746 ; 90   |
                             4747 ; 91   |
                             4748 ; 92   |
                             4749 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4750 ; 94   |// Examples of circular pointers:
                             4751 ; 95   |//    INT CIRC cpiVarName
                             4752 ; 96   |//    DWORD CIRC cpdwVarName
                             4753 ; 97   |
                             4754 ; 98   |#define RETCODE INT                 // rcVarName
                             4755 ; 99   |
                             4756 ; 100  |// generic bitfield structure
                             4757 ; 101  |struct Bitfield {
                             4758 ; 102  |    unsigned int B0  :1;
                             4759 ; 103  |    unsigned int B1  :1;
                             4760 ; 104  |    unsigned int B2  :1;
                             4761 ; 105  |    unsigned int B3  :1;
                             4762 ; 106  |    unsigned int B4  :1;
                             4763 ; 107  |    unsigned int B5  :1;
                             4764 ; 108  |    unsigned int B6  :1;
                             4765 ; 109  |    unsigned int B7  :1;
                             4766 ; 110  |    unsigned int B8  :1;
                             4767 ; 111  |    unsigned int B9  :1;
                             4768 ; 112  |    unsigned int B10 :1;
                             4769 ; 113  |    unsigned int B11 :1;
                             4770 ; 114  |    unsigned int B12 :1;
                             4771 ; 115  |    unsigned int B13 :1;
                             4772 ; 116  |    unsigned int B14 :1;
                             4773 ; 117  |    unsigned int B15 :1;
                             4774 ; 118  |    unsigned int B16 :1;
                             4775 ; 119  |    unsigned int B17 :1;
                             4776 ; 120  |    unsigned int B18 :1;
                             4777 ; 121  |    unsigned int B19 :1;
                             4778 ; 122  |    unsigned int B20 :1;
                             4779 ; 123  |    unsigned int B21 :1;
                             4780 ; 124  |    unsigned int B22 :1;
                             4781 ; 125  |    unsigned int B23 :1;
                             4782 ; 126  |};
                             4783 ; 127  |
                             4784 ; 128  |union BitInt {
                             4785 ; 129  |        struct Bitfield B;
                             4786 ; 130  |        int        I;
                             4787 ; 131  |};
                             4788 ; 132  |
                             4789 ; 133  |#define MAX_MSG_LENGTH 10
                             4790 ; 134  |struct CMessage
                             4791 ; 135  |{
                             4792 ; 136  |        unsigned int m_uLength;
                             4793 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4794 ; 138  |};
                             4795 ; 139  |
                             4796 ; 140  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4797 ; 141  |    WORD m_wLength;
                             4798 ; 142  |    WORD m_wMessage;
                             4799 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4800 ; 144  |} Message;
                             4801 ; 145  |
                             4802 ; 146  |struct MessageQueueDescriptor
                             4803 ; 147  |{
                             4804 ; 148  |        int *m_pBase;
                             4805 ; 149  |        int m_iModulo;
                             4806 ; 150  |        int m_iSize;
                             4807 ; 151  |        int *m_pHead;
                             4808 ; 152  |        int *m_pTail;
                             4809 ; 153  |};
                             4810 ; 154  |
                             4811 ; 155  |struct ModuleEntry
                             4812 ; 156  |{
                             4813 ; 157  |    int m_iSignaledEventMask;
                             4814 ; 158  |    int m_iWaitEventMask;
                             4815 ; 159  |    int m_iResourceOfCode;
                             4816 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4817 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4818 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4819 ; 163  |    int m_uTimeOutHigh;
                             4820 ; 164  |    int m_uTimeOutLow;
                             4821 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4822 ; 166  |};
                             4823 ; 167  |
                             4824 ; 168  |union WaitMask{
                             4825 ; 169  |    struct B{
                             4826 ; 170  |        unsigned int m_bNone     :1;
                             4827 ; 171  |        unsigned int m_bMessage  :1;
                             4828 ; 172  |        unsigned int m_bTimer    :1;
                             4829 ; 173  |        unsigned int m_bButton   :1;
                             4830 ; 174  |    } B;
                             4831 ; 175  |    int I;
                             4832 ; 176  |} ;
                             4833 ; 177  |
                             4834 ; 178  |
                             4835 ; 179  |struct Button {
                             4836 ; 180  |        WORD wButtonEvent;
                             4837 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4838 ; 182  |};
                             4839 ; 183  |
                             4840 ; 184  |struct Message {
                             4841 ; 185  |        WORD wMsgLength;
                             4842 ; 186  |        WORD wMsgCommand;
                             4843 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4844 ; 188  |};
                             4845 ; 189  |
                             4846 ; 190  |union EventTypes {
                             4847 ; 191  |        struct CMessage msg;
                             4848 ; 192  |        struct Button Button ;
                             4849 ; 193  |        struct Message Message;
                             4850 ; 194  |};
                             4851 ; 195  |
                             4852 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4853 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4854 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4855 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4856 ; 200  |
                             4857 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4858 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4859 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4860 ; 204  |
                             4861 ; 205  |#if DEBUG
                             4862 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4863 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4864 ; 208  |#else 
                             4865 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4866 ; 210  |#define DebugBuildAssert(x)    
                             4867 ; 211  |#endif
                             4868 ; 212  |
                             4869 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4870 ; 214  |//  #pragma asm
                             4871 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4872 ; 216  |//  #pragma endasm
                             4873 ; 217  |
                             4874 ; 218  |
                             4875 ; 219  |#ifdef COLOR_262K
                             4876 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4877 ; 221  |#elif defined(COLOR_65K)
                             4878 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4879 ; 223  |#else
                             4880 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4881 ; 225  |#endif
                             4882 ; 226  |    
                             4883 ; 227  |#endif // #ifndef _TYPES_H
                             4884 
                             4886 
                             4887 ; 5    |
                             4888 ; 6    |//These must match the definintions in buttondefs.inc, otherwise the button presses will t
                                  rigger
                             4889 ; 7    |//unexpected events.
                             4890 ; 8    |
                             4891 ; 9    |#define PR_RW           0
                             4892 ; 10   |#define PH_RW                   1
                             4893 ; 11   |#define PR_FF           2
                             4894 ; 12   |#define PH_FF           3
                             4895 ; 13   |#define PR_MENU         4
                             4896 ; 14   |#define PH_MENU         5
                             4897 ; 15   |#define PR_RV           6
                             4898 ; 16   |#define PH_RV           7
                             4899 ; 17   |#define PR_PLAY                 8
                             4900 ; 18   |#define PH_PLAY         9
                             4901 ; 19   |#define PR_HOLD         10
                             4902 ; 20   |#define PH_HOLD         11
                             4903 ; 21   |#define PR_VOL_DOWN     12
                             4904 ; 22   |#define PR_VOL_UP       13
                             4905 ; 23   |
                             4906 ; 24   |
                             4907 ; 25   |
                             4908 ; 26   |
                             4909 ; 27   |#define PH_VOL_DOWN     14
                             4910 ; 28   |#define PH_VOL_UP       15
                             4911 ; 29   |#define PR_MODE         24
                             4912 ; 30   |#define PR_STOP                 25
                             4913 ; 31   |#define PH_STOP         26
                             4914 ; 32   |#define PR_RECORD      27
                             4915 ; 33   |#define PH_RECORD       28
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4916 ; 34   |#define PR_AB           33
                             4917 ; 35   |#define PR_ERASE        34
                             4918 ; 36   |#define PH_ERASE        35
                             4919 ; 37   |#define PR_EQ           36
                             4920 ; 38   |#define PH_EQ       37
                             4921 ; 39   |
                             4922 ; 40   |
                             4923 ; 41   |
                             4924 ; 42   |
                             4925 ; 43   |extern WORD g_wLastButton;
                             4926 ; 44   |
                             4927 ; 45   |#endif //_BUTTONS_H
                             4928 
                             4930 
                             4931 ; 13   |#include "menus.h"
                             4932 
                             4934 
                             4935 ; 1    |#ifndef _MENU_H
                             4936 ; 2    |#define _MENU_H
                             4937 ; 3    |
                             4938 ; 4    |#include "types.h"
                             4939 
                             4941 
                             4942 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4943 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4944 ; 3    |//
                             4945 ; 4    |// Filename: types.h
                             4946 ; 5    |// Description: Standard data types
                             4947 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4948 ; 7    |
                             4949 ; 8    |#ifndef _TYPES_H
                             4950 ; 9    |#define _TYPES_H
                             4951 ; 10   |
                             4952 ; 11   |// TODO:  move this outta here!
                             4953 ; 12   |#if !defined(NOERROR)
                             4954 ; 13   |#define NOERROR 0
                             4955 ; 14   |#define SUCCESS 0
                             4956 ; 15   |#endif 
                             4957 ; 16   |#if !defined(SUCCESS)
                             4958 ; 17   |#define SUCCESS  0
                             4959 ; 18   |#endif
                             4960 ; 19   |#if !defined(ERROR)
                             4961 ; 20   |#define ERROR   -1
                             4962 ; 21   |#endif
                             4963 ; 22   |#if !defined(FALSE)
                             4964 ; 23   |#define FALSE 0
                             4965 ; 24   |#endif
                             4966 ; 25   |#if !defined(TRUE)
                             4967 ; 26   |#define TRUE  1
                             4968 ; 27   |#endif
                             4969 ; 28   |
                             4970 ; 29   |#if !defined(NULL)
                             4971 ; 30   |#define NULL 0
                             4972 ; 31   |#endif
                             4973 ; 32   |
                             4974 ; 33   |#define MAX_INT     0x7FFFFF
                             4975 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4976 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4977 ; 36   |#define MAX_ULONG   (-1) 
                             4978 ; 37   |
                             4979 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4980 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4981 ; 40   |
                             4982 ; 41   |
                             4983 ; 42   |#define BYTE    unsigned char       // btVarName
                             4984 ; 43   |#define CHAR    signed char         // cVarName
                             4985 ; 44   |#define USHORT  unsigned short      // usVarName
                             4986 ; 45   |#define SHORT   unsigned short      // sVarName
                             4987 ; 46   |#define WORD    unsigned int        // wVarName
                             4988 ; 47   |#define INT     signed int          // iVarName
                             4989 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4990 ; 49   |#define LONG    signed long         // lVarName
                             4991 ; 50   |#define BOOL    unsigned int        // bVarName
                             4992 ; 51   |#define FRACT   _fract              // frVarName
                             4993 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4994 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4995 ; 54   |#define FLOAT   float               // fVarName
                             4996 ; 55   |#define DBL     double              // dVarName
                             4997 ; 56   |#define ENUM    enum                // eVarName
                             4998 ; 57   |#define CMX     _complex            // cmxVarName
                             4999 ; 58   |typedef WORD UCS3;                   // 
                             5000 ; 59   |
                             5001 ; 60   |#define UINT16  unsigned short
                             5002 ; 61   |#define UINT8   unsigned char   
                             5003 ; 62   |#define UINT32  unsigned long
                             5004 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5005 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5006 ; 65   |#define WCHAR   UINT16
                             5007 ; 66   |
                             5008 ; 67   |//UINT128 is 16 bytes or 6 words
                             5009 ; 68   |typedef struct UINT128_3500 {   
                             5010 ; 69   |    int val[6];     
                             5011 ; 70   |} UINT128_3500;
                             5012 ; 71   |
                             5013 ; 72   |#define UINT128   UINT128_3500
                             5014 ; 73   |
                             5015 ; 74   |// Little endian word packed byte strings:   
                             5016 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5017 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5018 ; 77   |// Little endian word packed byte strings:   
                             5019 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5020 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5021 ; 80   |
                             5022 ; 81   |// Declare Memory Spaces To Use When Coding
                             5023 ; 82   |// A. Sector Buffers
                             5024 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5025 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5026 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5027 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5028 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5029 ; 88   |// B. Media DDI Memory
                             5030 ; 89   |#define MEDIA_DDI_MEM _Y
                             5031 ; 90   |
                             5032 ; 91   |
                             5033 ; 92   |
                             5034 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5035 ; 94   |// Examples of circular pointers:
                             5036 ; 95   |//    INT CIRC cpiVarName
                             5037 ; 96   |//    DWORD CIRC cpdwVarName
                             5038 ; 97   |
                             5039 ; 98   |#define RETCODE INT                 // rcVarName
                             5040 ; 99   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5041 ; 100  |// generic bitfield structure
                             5042 ; 101  |struct Bitfield {
                             5043 ; 102  |    unsigned int B0  :1;
                             5044 ; 103  |    unsigned int B1  :1;
                             5045 ; 104  |    unsigned int B2  :1;
                             5046 ; 105  |    unsigned int B3  :1;
                             5047 ; 106  |    unsigned int B4  :1;
                             5048 ; 107  |    unsigned int B5  :1;
                             5049 ; 108  |    unsigned int B6  :1;
                             5050 ; 109  |    unsigned int B7  :1;
                             5051 ; 110  |    unsigned int B8  :1;
                             5052 ; 111  |    unsigned int B9  :1;
                             5053 ; 112  |    unsigned int B10 :1;
                             5054 ; 113  |    unsigned int B11 :1;
                             5055 ; 114  |    unsigned int B12 :1;
                             5056 ; 115  |    unsigned int B13 :1;
                             5057 ; 116  |    unsigned int B14 :1;
                             5058 ; 117  |    unsigned int B15 :1;
                             5059 ; 118  |    unsigned int B16 :1;
                             5060 ; 119  |    unsigned int B17 :1;
                             5061 ; 120  |    unsigned int B18 :1;
                             5062 ; 121  |    unsigned int B19 :1;
                             5063 ; 122  |    unsigned int B20 :1;
                             5064 ; 123  |    unsigned int B21 :1;
                             5065 ; 124  |    unsigned int B22 :1;
                             5066 ; 125  |    unsigned int B23 :1;
                             5067 ; 126  |};
                             5068 ; 127  |
                             5069 ; 128  |union BitInt {
                             5070 ; 129  |        struct Bitfield B;
                             5071 ; 130  |        int        I;
                             5072 ; 131  |};
                             5073 ; 132  |
                             5074 ; 133  |#define MAX_MSG_LENGTH 10
                             5075 ; 134  |struct CMessage
                             5076 ; 135  |{
                             5077 ; 136  |        unsigned int m_uLength;
                             5078 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5079 ; 138  |};
                             5080 ; 139  |
                             5081 ; 140  |typedef struct {
                             5082 ; 141  |    WORD m_wLength;
                             5083 ; 142  |    WORD m_wMessage;
                             5084 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5085 ; 144  |} Message;
                             5086 ; 145  |
                             5087 ; 146  |struct MessageQueueDescriptor
                             5088 ; 147  |{
                             5089 ; 148  |        int *m_pBase;
                             5090 ; 149  |        int m_iModulo;
                             5091 ; 150  |        int m_iSize;
                             5092 ; 151  |        int *m_pHead;
                             5093 ; 152  |        int *m_pTail;
                             5094 ; 153  |};
                             5095 ; 154  |
                             5096 ; 155  |struct ModuleEntry
                             5097 ; 156  |{
                             5098 ; 157  |    int m_iSignaledEventMask;
                             5099 ; 158  |    int m_iWaitEventMask;
                             5100 ; 159  |    int m_iResourceOfCode;
                             5101 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5102 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5103 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5104 ; 163  |    int m_uTimeOutHigh;
                             5105 ; 164  |    int m_uTimeOutLow;
                             5106 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5107 ; 166  |};
                             5108 ; 167  |
                             5109 ; 168  |union WaitMask{
                             5110 ; 169  |    struct B{
                             5111 ; 170  |        unsigned int m_bNone     :1;
                             5112 ; 171  |        unsigned int m_bMessage  :1;
                             5113 ; 172  |        unsigned int m_bTimer    :1;
                             5114 ; 173  |        unsigned int m_bButton   :1;
                             5115 ; 174  |    } B;
                             5116 ; 175  |    int I;
                             5117 ; 176  |} ;
                             5118 ; 177  |
                             5119 ; 178  |
                             5120 ; 179  |struct Button {
                             5121 ; 180  |        WORD wButtonEvent;
                             5122 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5123 ; 182  |};
                             5124 ; 183  |
                             5125 ; 184  |struct Message {
                             5126 ; 185  |        WORD wMsgLength;
                             5127 ; 186  |        WORD wMsgCommand;
                             5128 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5129 ; 188  |};
                             5130 ; 189  |
                             5131 ; 190  |union EventTypes {
                             5132 ; 191  |        struct CMessage msg;
                             5133 ; 192  |        struct Button Button ;
                             5134 ; 193  |        struct Message Message;
                             5135 ; 194  |};
                             5136 ; 195  |
                             5137 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5138 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5139 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5140 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5141 ; 200  |
                             5142 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5143 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5144 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5145 ; 204  |
                             5146 ; 205  |#if DEBUG
                             5147 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5148 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5149 ; 208  |#else 
                             5150 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5151 ; 210  |#define DebugBuildAssert(x)    
                             5152 ; 211  |#endif
                             5153 ; 212  |
                             5154 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5155 ; 214  |//  #pragma asm
                             5156 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5157 ; 216  |//  #pragma endasm
                             5158 ; 217  |
                             5159 ; 218  |
                             5160 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5161 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5162 ; 221  |#elif defined(COLOR_65K)
                             5163 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5164 ; 223  |#else
                             5165 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5166 ; 225  |#endif
                             5167 ; 226  |    
                             5168 ; 227  |#endif // #ifndef _TYPES_H
                             5169 
                             5171 
                             5172 ; 5    |
                             5173 ; 6    |#define TIMER_ANIMATE           0
                             5174 ; 7    |#define TIMER_AUTO_SHUTDOWN     1
                             5175 ; 8    |#define TIMER_BATT_CHK          2
                             5176 ; 9    |#define TIMER_SONG_CHANGE       3
                             5177 ; 10   |#define TIMER_TUNER                             4
                             5178 ; 11   |#define TIMER_BACKLIGHT                 5
                             5179 ; 12   |#define TIMER_FFRWND                6
                             5180 ; 13   |#define TIMER_BATTERY_CHARGER   7
                             5181 ; 14   |#define TIMER_TIMEDATE                  8
                             5182 ; 15   |#define TIMER_JPEG_DECODER_CALLBACK 6 //shared with TIMER_FFRWND since they won't use toge
                                  ther
                             5183 ; 16   |#define TIMER_APIC_UPDATE               9
                             5184 ; 17   |
                             5185 ; 18   |#define MENU_MSG_ANIMATE            MENU_LAST_MSG_ID+1
                             5186 ; 19   |#define MENU_MSG_AUTOSHUTDOWN       MENU_LAST_MSG_ID+2
                             5187 ; 20   |#define MENU_SONG_CHANGE_TIMEOUT    MENU_LAST_MSG_ID+3
                             5188 ; 21   |#define MENU_TUNER_READY                        MENU_LAST_MSG_ID+4
                             5189 ; 22   |#define MENU_MSG_TURN_OFF_BACKLIGHT MENU_LAST_MSG_ID+5
                             5190 ; 23   |#define MENU_MSG_SEND_FF            MENU_LAST_MSG_ID+6
                             5191 ; 24   |#define MENU_MSG_SEND_RWND          MENU_LAST_MSG_ID+7
                             5192 ; 25   |#define MENU_BATTERY_CHARGER_TIMEOUT  MENU_LAST_MSG_ID+8
                             5193 ; 26   |#define MENU_MSG_REFRESH_TIMEDATE       MENU_LAST_MSG_ID+9
                             5194 ; 27   |#ifdef USE_PLAYLIST3
                             5195 ; 28   |#define MENU_PAGE_ITEM_COUNT    (4)
                             5196 ; 29   |#define MENU_ITEM_HEIGHT                (8)
                             5197 ; 30   |#define MENU_ITEM_X_OFFSET      (0)
                             5198 ; 31   |#define MENU_ITEM_Y_OFFSET      (16)
                             5199 ; 32   |
                             5200 ; 33   |#define PLAYLIST_ENABLE         (0)
                             5201 ; 34   |#endif
                             5202 ; 35   |#define ANIMATE_PERIOD          (100)
                             5203 ; 36   |#define MENU_MSG_JPEG_CALLBACK            MENU_LAST_MSG_ID+10
                             5204 ; 37   |#define MENU_JPEG_THUMBNAIL_CURSOR  MENU_LAST_MSG_ID+11
                             5205 ; 38   |#define MENU_JPEG_NEXT_PICTURE          MENU_LAST_MSG_ID+12
                             5206 ; 39   |#define MENU_MSG_APIC_UPDATE            MENU_LAST_MSG_ID+13
                             5207 ; 40   |#ifdef USE_PLAYLIST5
                             5208 ; 41   |#define MENU_MSG_PL5_PLAY_SONG          MENU_LAST_MSG_ID+14
                             5209 ; 42   |#endif
                             5210 ; 43   |
                             5211 ; 44   |#define MENU_BATTERY_CHARGER_TIMEOUT  MENU_LAST_MSG_ID+8
                             5212 ; 45   |#define FILE_NAME_BUFFER_SIZE  7
                             5213 ; 46   |#define TIMER_JPEG_DECODER_TIMEOUT_MS 5
                             5214 ; 47   |
                             5215 ; 48   |// used with shutdown menu
                             5216 ; 49   |// FORCESHUTDOWN does not allow abort
                             5217 ; 50   |// USERSHUTDOWN allows user abort if PH_STOP is not held long enough
                             5218 ; 51   |#define FORCESHUTDOWN                   TRUE
                             5219 ; 52   |#define USERSHUTDOWN                    FALSE
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5220 ; 53   |
                             5221 ; 54   |// if low battery display low battery message
                             5222 ; 55   |#define LOWBATT                                 TRUE
                             5223 ; 56   |#define REGBATT                                 FALSE
                             5224 ; 57   |
                             5225 ; 58   |//Backlight Define Statements
                             5226 ; 59   |#ifdef CLCD
                             5227 ; 60   |#ifdef CLCD_16BIT
                             5228 ; 61   |#define BACKLIGHT_CONTROL_REGISTER              HW_PWM_CH0AR.I
                             5229 ; 62   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9  //PWM2
                             5230 ; 63   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                             5231 ; 64   |#define BACKLIGHT_ON                            0x06C000
                             5232 ; 65   |#define BACKLIGHT_OFF                           0x024000
                             5233 ; 66   |#else
                             5234 ; 67   |#define BACKLIGHT_CONTROL_REGISTER              HW_PWM_CH2AR.I
                             5235 ; 68   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9  //PWM2
                             5236 ; 69   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                             5237 ; 70   |#define BACKLIGHT_ON                            0x006000
                             5238 ; 71   |#define BACKLIGHT_OFF                           0x002000
                             5239 ; 72   |#endif
                             5240 ; 73   |#else
                             5241 ; 74   |#define BACKLIGHT_CONTROL_REGISTER              HW_GP0DOR.B.B9
                             5242 ; 75   |#define BACKLIGHT_CONTROL_REGISTER_ENABLE       HW_GP0ENR.B.B9
                             5243 ; 76   |#define BACKLIGHT_CONTROL_REGISTER_DIRECTION    HW_GP0DOER.B.B9
                             5244 ; 77   |#define BACKLIGHT_ON                            TRUE
                             5245 ; 78   |#define BACKLIGHT_OFF                           FALSE
                             5246 ; 79   |#endif
                             5247 ; 80   |#define BACKLIGHT_TIME                                          5000            //5 second
                                  s
                             5248 ; 81   |
                             5249 ; 82   |// used with NextEQ / NextPlayMode to indicate direction
                             5250 ; 83   |#define INCREMENT 1
                             5251 ; 84   |#define DECREMENT 0
                             5252 ; 85   |
                             5253 ; 86   |//These two sit outside the boundary of MENU_FIRST and MENU_LAST simply because they're
                             5254 ; 87   |//states that aren't included in the displayed list.
                             5255 ; 88   |#define MENU_EXIT       101
                             5256 ; 89   |#define MENU_MAIN       100
                             5257 ; 90   |
                             5258 ; 91   |// menu flags
                             5259 ; 92   |#define MENU_FLAG_POWER_DOWN_ENABLED    B0      // when clear, disable tracking
                             5260 ; 93   |#define MENU_FLAG_ESCAPE_TO_MUSIC               B1      // when set, escape all menu nesti
                                  ng to music
                             5261 ; 94   |#define MENU_FLAG_SAVE_CHANGES          B2  // true if fast escape interrupted by save cha
                                  nges?
                             5262 ; 95   |#if (defined USE_PLAYLIST3) || (defined USE_PLAYLIST5)
                             5263 ; 96   |#define MENU_FLAG_ESCAPE_TO_RECORD              B2      // when set, escape all menu nesti
                                  ng to voice/fm menu and start recording
                             5264 ; 97   |#define MENU_FLAG_RETURN_TO_MUSIC               B3      // when set, escape all menu nesti
                                  ng to music
                             5265 ; 98   |#endif
                             5266 ; 99   |
                             5267 ; 100  |#define LANGUAGES_ENG   0
                             5268 ; 101  |#define LANGUAGES_VIE   1
                             5269 ; 102  |#define LANGUAGES_FIRST LANGUAGES_ENG
                             5270 ; 103  |#define LANGUAGES_LAST          LANGUAGES_VIE
                             5271 ; 104  |
                             5272 ; 105  |// 1 word menu variable -- bit flags
                             5273 ; 106  |extern struct Bitfield g_MenuFlags;
                             5274 ; 107  |
                             5275 ; 108  |// This data type is declared in mainmenu.c, but is externed here for all other menus.
                             5276 ; 109  |extern union EventTypes gEventInfo;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5277 ; 110  |
                             5278 ; 111  |//each menu should set g_iCurrentMenu to make sure the menu icon shows up correctly.
                             5279 ; 112  |extern INT g_iCurrentMenu;
                             5280 ; 113  |
                             5281 ; 114  |//Backlight State
                             5282 ; 115  |extern INT g_iBackLightState;
                             5283 ; 116  |
                             5284 ; 117  |//Language state
                             5285 ; 118  |extern INT g_iLanguage;
                             5286 ; 119  |
                             5287 ; 120  |//Export all Menu prototypes for calls allowed from other code banks
                             5288 ; 121  |void _reentrant UserTask(int a, int b, int *pPtr);
                             5289 ; 122  |_reentrant INT ShutdownMenu( INT iIgnored1, INT iIgnored2, INT *pPtr);
                             5290 ; 123  |_reentrant INT SplashScreen( INT iResource, INT iMilliseconds, INT *pPtr);
                             5291 ; 124  |int _reentrant MusicMenu(INT a, INT b, INT *c);
                             5292 ; 125  |#ifdef USE_PLAYLIST3
                             5293 ; 126  |int _reentrant PlayMusicMenu(INT a, INT b, INT *c);
                             5294 ; 127  |int _reentrant NewMusicMenu(INT a, INT b, INT *c);
                             5295 ; 128  |int _reentrant BrowseMenu(INT a, INT b, INT *c);
                             5296 ; 129  |#endif // #ifdef USE_PLAYLIST3
                             5297 ; 130  |#ifdef MOTION_VIDEO
                             5298 ; 131  |int _reentrant MotionVideoMenu(INT a, INT b, INT *c);
                             5299 ; 132  |#endif
                             5300 ; 133  |#ifdef JPEG_APP
                             5301 ; 134  |int _reentrant JpegDisplayMenu(int a, int b, int *pPtr);
                             5302 ; 135  |int _reentrant JpegManualMenu(int a, int b, int *pPtr);
                             5303 ; 136  |int _reentrant JpegSlideshowMenu(int a, int b, int *pPtr);
                             5304 ; 137  |int _reentrant JpegThumbnailMenu(int a, int b, int *pPtr);
                             5305 ; 138  |#endif
                             5306 ; 139  |int _reentrant SpectrogramMenu(INT a, INT b, INT *pPtr);
                             5307 ; 140  |int _reentrant VoiceMenu(int a, int b, int *c);
                             5308 ; 141  |int _reentrant SettingsMenu(int a, int b, int *pPtr);
                             5309 ; 142  |int _reentrant EqMenu(int a, int b, int *pPtr);
                             5310 ; 143  |int _reentrant SendEQ(int iCurrentEQ, int b, int *pPtr);
                             5311 ; 144  |
                             5312 ; 145  |int _reentrant PlayModeMenu(int a, int b, int *pPtr);
                             5313 ; 146  |int _reentrant NextPlayMode(int iDirection, int b, int *c);
                             5314 ; 147  |int _reentrant ContrastMenu(int a, int b, int *pPtr);
                             5315 ; 148  |int _reentrant AboutMenu(int a, int b, int *pPtr);
                             5316 ; 149  |#ifdef USE_PLAYLIST5
                             5317 ; 150  |int _reentrant BrowseMenu(INT a, INT b, INT *c);
                             5318 ; 151  |#endif
                             5319 ; 152  |int _reentrant DeleteMenu(int a, int b, int *pPtr);
                             5320 ; 153  |int _reentrant PwrSavingsMenu(int a, int b, int *pPtr);
                             5321 ; 154  |int _reentrant BackLightMenu(int a, int b, int *pPtr);
                             5322 ; 155  |int _reentrant RecordSettingsMenu(int a, int b, int *pPtr);
                             5323 ; 156  |int _reentrant TimeDateMenu(int a, int b, int *pPtr);
                             5324 ; 157  |int _reentrant SetTimeMenu(int a, int b, int *pPtr);
                             5325 ; 158  |int _reentrant SetDateMenu(int a, int b, int *pPtr);
                             5326 ; 159  |
                             5327 ; 160  |int _reentrant TestMenu(int a, int b, int *pPtr);
                             5328 ; 161  |void _reentrant RecordTestMenu(void);
                             5329 ; 162  |
                             5330 ; 163  |int _reentrant FMTunerMenu(int a, int b, int *c);
                             5331 ; 164  |int _reentrant InitPlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                             5332 ; 165  |int _reentrant HandlePlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                             5333 ; 166  |int _reentrant ExitPlayerStateMachine(int iEvent, int iIgnored, int *pMessagePtr);
                             5334 ; 167  |_reentrant int InitRecorderStateMachine(int EncodingType, int InputSource, int *c);
                             5335 ; 168  |_reentrant int HandleRecorderStateMachine(int a, int b, int *c);
                             5336 ; 169  |_reentrant int ExitRecorderStateMachine(int InputSource, int b, int *c);
                             5337 ; 170  |int _reentrant NextEQ(INT iDirection, INT b, INT *c);
                             5338 ; 171  |_reentrant INT RecordVoiceFile(INT a, INT b, INT *pPtr);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5339 ; 172  |_reentrant int RefreshDisplay           ( int iDisplayHint, int a, int *pPtr);
                             5340 ; 173  |_reentrant void DisplayClearDisplay      ( int iDisplayHint, int a, int *pPtr);
                             5341 ; 174  |_reentrant int DisplayEQIcon            ( int iDisplayHint, int a, int *pPtr);
                             5342 ; 175  |_reentrant int DisplayVolume            ( int iDisplayHint, int a, int *pPtr);
                             5343 ; 176  |_reentrant int DisplayShutdownProgress  ( int iDisplayHint, int a, int *pPtr);
                             5344 ; 177  |_reentrant int DisplayDefragmentstore  ( int iDisplayHint, int a, int *pPtr);
                             5345 ; 178  |_reentrant int DisplayKickOff           ( int iDisplayHint, int a, int *pPtr);
                             5346 ; 179  |_reentrant int DisplayKickOffLocked     ( int iDisplayHint, int a, int *pPtr);
                             5347 ; 180  |_reentrant void DisplayLockIcon          ( int iDisplayHint, int a, int *pPtr);
                             5348 ; 181  |_reentrant void ChangePlaySet(INT mode);
                             5349 ; 182  |void _reentrant UpdateAutoShutdownTimer (void);
                             5350 ; 183  |int _reentrant SetPwrSetting (int iCurrentPwrSetting, int b, int *pPtr);
                             5351 ; 184  |int  _reentrant SendPlayMode(int iCurrentPlayMode, int b, int *pPtr);
                             5352 ; 185  |_reentrant int DeleteFilePrompt(int a,int b, int *pPtr);
                             5353 ; 186  |#endif
                             5354 ; 187  |
                             5355 
                             5357 
                             5358 ; 14   |#include "display.h"
                             5359 
                             5361 
                             5362 ; 1    |#ifndef _DISPLAY_H
                             5363 ; 2    |#define _DISPLAY_H
                             5364 ; 3    |
                             5365 ; 4    |//Display bits
                             5366 ; 5    |#define DISPLAY_CLEAR_DISPLAY_BITPOS        0
                             5367 ; 6    |
                             5368 ; 7    |#define DISPLAY_ENCODER_TRACK_TIME_BITPOS   1
                             5369 ; 8    |#define DISPLAY_ENCODER_TRACK_NAME_BITPOS   2
                             5370 ; 9    |#define DISPLAY_RECORD_MODE_BITPOS          3
                             5371 ; 10   |
                             5372 ; 11   |//This bit (DISPLAY_MISC_BITPOS) is set to allow DisplayHints to be non zero, but does not
                                   map
                             5373 ; 12   |//to anything in UpdateDisplay();  (meant to be used to indicate that specific
                             5374 ; 13   |//things that are specific for that menu.
                             5375 ; 14   |#define DISPLAY_MISC_BITPOS                 4
                             5376 ; 15   |
                             5377 ; 16   |#define DISPLAY_FMTUNER_FREQUENCY           5
                             5378 ; 17   |#define DISPLAY_FMTUNER_PRESET              6
                             5379 ; 18   |#define DISPLAY_FMTUNER_STRENGTH            7
                             5380 ; 19   |
                             5381 ; 20   |#define DISPLAY_PLAYSTATE_BITPOS             9
                             5382 ; 21   |#define DISPLAY_AB_ICON_BITPOS              10
                             5383 ; 22   |#define DISPLAY_PLAYMODE_BITPOS             11
                             5384 ; 23   |#define DISPLAY_PLAYSET_BITPOS              12
                             5385 ; 24   |
                             5386 ; 25   |//Playback info
                             5387 ; 26   |#define DISPLAY_EQ_BITPOS                   13
                             5388 ; 27   |#define DISPLAY_VOLUME_BITPOS               14
                             5389 ; 28   |
                             5390 ; 29   |//Track Info
                             5391 ; 30   |#define DISPLAY_SONGARTISTALBUM_BITPOS      15
                             5392 ; 31   |#define DISPLAY_SONGTITLE_BITPOS            16
                             5393 ; 32   |#define DISPLAY_CURRENTTRACK_BITPOS         17
                             5394 ; 33   |#define DISPLAY_TRACKTIME_BITPOS            18
                             5395 ; 34   |#define DISPLAY_TOTALTRACKTIME_BITPOS        8
                             5396 ; 35   |#define DISPLAY_BITRATE_BITPOS              19
                             5397 ; 36   |
                             5398 ; 37   |//Device status info
                             5399 ; 38   |#define DISPLAY_LOCK_BITPOS                 20
                             5400 ; 39   |#define DISPLAY_DISK_BITPOS                 21
                             5401 ; 40   |#define DISPLAY_BATTERY_BITPOS              22
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5402 ; 41   |#define DISPLAY_ALBUMART_BITPOS              23
                             5403 ; 42   |
                             5404 ; 43   |#ifdef PLAYER_STRESS
                             5405 ; 44   |// this may not work since album art uses bit 23 so we may need a new word variable for th
                                  is player stress test bit below.
                             5406 ; 45   |#define DISPLAY_STRESSTEST_BITPOS            23
                             5407 ; 46   |#endif
                             5408 ; 47   |
                             5409 ; 48   |
                             5410 ; 49   |union DisplayHints
                             5411 ; 50   |{
                             5412 ; 51   |    struct {
                             5413 ; 52   |        int ClearDisplay        :1;//0
                             5414 ; 53   |        int EncoderTrackTime    :1;//1
                             5415 ; 54   |        int EncoderTrackName    :1;//2
                             5416 ; 55   |        int RecordMode          :1;//3
                             5417 ; 56   |        int Misc                :1;//4
                             5418 ; 57   |        int FMTunerFrequency    :1;//5
                             5419 ; 58   |        int FMTunerPreset       :1;//6
                             5420 ; 59   |        int FMTunerStrength     :1;//7
                             5421 ; 60   |        int TotalTrackTime      :1;//8
                             5422 ; 61   |        int PlayState           :1;//9
                             5423 ; 62   |        int ABIcon              :1;//10
                             5424 ; 63   |        int PlayMode            :1;//11
                             5425 ; 64   |        int PlaySet             :1;//12
                             5426 ; 65   |        int EQ                  :1;//13
                             5427 ; 66   |        int Volume              :1;//14
                             5428 ; 67   |        int SongArtistAlbum     :1;//15
                             5429 ; 68   |        int SongTitle           :1;//16
                             5430 ; 69   |        int CurrentTrack        :1;//17
                             5431 ; 70   |        int TrackTime           :1;//18
                             5432 ; 71   |        int Bitrate             :1;//19
                             5433 ; 72   |        int LockIcon            :1;//20
                             5434 ; 73   |        int Disk                :1;//21
                             5435 ; 74   |        int Battery             :1;//22
                             5436 ; 75   |#ifdef PLAYER_STRESS
                             5437 ; 76   |        int StressTest         :1;//23  // this might not work since bit 23 is already tak
                                  en by album art. 23 is last bit in word.
                             5438 ; 77   |#else
                             5439 ; 78   |        int AlbumArt            :1;//23
                             5440 ; 79   |#endif
                             5441 ; 80   |    } bits;
                             5442 ; 81   |    WORD I;
                             5443 ; 82   |};
                             5444 ; 83   |
                             5445 ; 84   |// setup default display for all menus
                             5446 ; 85   |// can be adjusted in each menus as required.
                             5447 ; 86   |#define COMMON_DISPLAY_ALL  (\ 
                             5448 ; 87   |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             5449 ; 88   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             5450 ; 89   |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5451 ; 90   |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             5452 ; 91   |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             5453 ; 92   |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             5454 ; 93   |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             5455 ; 94   |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             5456 ; 95   |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             5457 ; 96   |                                )
                             5458 ; 97   |
                             5459 ; 98   |#define SPECTROGRAM_MENU_DISPLAY_ALL  (\ 
                             5460 ; 99   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             5461 ; 100  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5462 ; 101  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             5463 ; 102  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             5464 ; 103  |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             5465 ; 104  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             5466 ; 105  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             5467 ; 106  |                                )
                             5468 ; 107  |
                             5469 ; 108  |//-----------------------------------------------
                             5470 ; 109  |#ifdef JPEG_ALBUM_ART
                             5471 ; 110  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_ALBUMART_BITPOS)
                             5472 ; 111  |#else
                             5473 ; 112  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (0)
                             5474 ; 113  |#endif
                             5475 ; 114  |
                             5476 ; 115  |#ifdef PLAYER_STRESS
                             5477 ; 116  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_STRESSTEST_BITPOS)
                             5478 ; 117  |#else
                             5479 ; 118  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (0)
                             5480 ; 119  |#endif
                             5481 ; 120  |
                             5482 ; 121  |
                             5483 ; 122  |#define MUSIC_MENU_DISPLAY_ALL  (\ 
                             5484 ; 123  |                                (COMMON_DISPLAY_ALL)|\ 
                             5485 ; 124  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5486 ; 125  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5487 ; 126  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5488 ; 127  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             5489 ; 128  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             5490 ; 129  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5491 ; 130  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             5492 ; 131  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)\ 
                             5493 ; 132  |                                )
                             5494 ; 133  |
                             5495 ; 134  |#define MUSIC_MENU_DISPLAY_NEW_TRACK (\ 
                             5496 ; 135  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5497 ; 136  |                                (PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE)|\ 
                             5498 ; 137  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             5499 ; 138  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             5500 ; 139  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5501 ; 140  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             5502 ; 141  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             5503 ; 142  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             5504 ; 143  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5505 ; 144  |                                (1<<DISPLAY_PLAYSET_BITPOS)\ 
                             5506 ; 145  |                                )
                             5507 ; 146  |//-----------------------------------------------
                             5508 ; 147  |
                             5509 ; 148  |
                             5510 ; 149  |#define MVIDEO_MENU_DISPLAY_ALL ((1<<DISPLAY_CURRENTTRACK_BITPOS)|(1<<DISPLAY_SONGTITLE_BI
                                  TPOS))
                             5511 ; 150  |
                             5512 ; 151  |
                             5513 ; 152  |#define VOICE_MENU_DISPLAY_ALL  (\ 
                             5514 ; 153  |                                COMMON_DISPLAY_ALL|\ 
                             5515 ; 154  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             5516 ; 155  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5517 ; 156  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5518 ; 157  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             5519 ; 158  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             5520 ; 159  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5521 ; 160  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             5522 ; 161  |                                (1<<DISPLAY_TRACKTIME_BITPOS)\ 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5523 ; 162  |                                )
                             5524 ; 163  |
                             5525 ; 164  |
                             5526 ; 165  |#define RECORDING_DISPLAY_ALL   (\ 
                             5527 ; 166  |                                COMMON_DISPLAY_ALL|\ 
                             5528 ; 167  |                                (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             5529 ; 168  |                                (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                             5530 ; 169  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5531 ; 170  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5532 ; 171  |                                (1<<DISPLAY_RECORD_MODE_BITPOS)\ 
                             5533 ; 172  |                                )
                             5534 ; 173  |
                             5535 ; 174  |#ifdef USE_PLAYLIST3
                             5536 ; 175  |#define BROWSE_MENU_DISPLAY_ALL  (\ 
                             5537 ; 176  |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             5538 ; 177  |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             5539 ; 178  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             5540 ; 179  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             5541 ; 180  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             5542 ; 181  |                                )
                             5543 ; 182  |#else
                             5544 ; 183  |#ifdef USE_PLAYLIST5
                             5545 ; 184  |#if 0
                             5546 ; 185  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             5547 ; 186  |                                 COMMON_DISPLAY_ALL|\ 
                             5548 ; 187  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5549 ; 188  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5550 ; 189  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5551 ; 190  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             5552 ; 191  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             5553 ; 192  |                                )
                             5554 ; 193  |#else
                             5555 ; 194  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             5556 ; 195  |                                 COMMON_DISPLAY_ALL|\ 
                             5557 ; 196  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             5558 ; 197  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             5559 ; 198  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             5560 ; 199  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             5561 ; 200  |                                )
                             5562 ; 201  |#endif
                             5563 ; 202  |#endif  // #ifdef USE_PLAYLIST5
                             5564 ; 203  |#endif  // #ifdef USE_PLAYLIST3
                             5565 ; 204  |
                             5566 ; 205  |
                             5567 ; 206  |
                             5568 ; 207  |#define MAIN_MENU_DISPLAY_ALL           (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5569 ; 208  |
                             5570 ; 209  |#define EQ_MENU_DISPLAY_ALL             (\ 
                             5571 ; 210  |                                        COMMON_DISPLAY_ALL|\ 
                             5572 ; 211  |                                        (1<<DISPLAY_EQ_BITPOS)|\ 
                             5573 ; 212  |                                        (1<<DISPLAY_VOLUME_BITPOS)\ 
                             5574 ; 213  |                                        )     // (SDK2.520)
                             5575 ; 214  |
                             5576 ; 215  |#define PM_MENU_DISPLAY_ALL             (COMMON_DISPLAY_ALL|(1<<DISPLAY_PLAYMODE_BITPOS)|(
                                  1<<DISPLAY_MISC_BITPOS))
                             5577 ; 216  |#define PWR_MENU_DISPLAY_ALL            (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5578 ; 217  |#define SETTINGS_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5579 ; 218  |#define JPEG_DISPLAY_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5580 ; 219  |#define DELETE_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5581 ; 220  |#define ABOUT_MENU_DISPLAY_ALL          (COMMON_DISPLAY_ALL)
                             5582 ; 221  |#define ERASE_MENU_DISPLAY_ALL          ((1<<DISPLAY_BATTERY_BITPOS)|(1<<DISPLAY_LOCK_BITP
                                  OS))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5583 ; 222  |
                             5584 ; 223  |#define CONTRAST_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5585 ; 224  |
                             5586 ; 225  |#define TIME_DATE_MENU_DISPLAY_ALL      0
                             5587 ; 226  |#define RECORDTEST_DISPLAY_ALL       (\ 
                             5588 ; 227  |                                        (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             5589 ; 228  |                                                                        (1<<DISPLAY_ENCODE
                                  R_TRACK_NAME_BITPOS)|\ 
                             5590 ; 229  |                                                                        (1<<DISPLAY_PLAYST
                                  ATE_BITPOS)|\ 
                             5591 ; 230  |                                        (1<<DISPLAY_RECORD_MODE_BITPOS)|\ 
                             5592 ; 231  |                                    (1<<DISPLAY_MISC_BITPOS)\ 
                             5593 ; 232  |                                                                        )
                             5594 ; 233  |
                             5595 ; 234  |#define SPLASH_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             5596 ; 235  |// used during track update to force total time update
                             5597 ; 236  |#define AUTOUPDATE              FALSE
                             5598 ; 237  |#define FORCEUPDATE             TRUE
                             5599 ; 238  |
                             5600 ; 239  |
                             5601 ; 240  |// based on font used for title/artist display
                             5602 ; 241  |#define DEFAULT_CHAR_WIDTH  5
                             5603 ; 242  |
                             5604 ; 243  |
                             5605 ; 244  |// LCD dimensions
                             5606 ; 245  |#ifdef LDS514_LCD
                             5607 ; 246  |#define   LCD_SIZE_X       96
                             5608 ; 247  |#define   LCD_SIZE_Y       64
                             5609 ; 248  |#endif
                             5610 ; 249  |
                             5611 ; 250  |#ifdef ILI814_LCD
                             5612 ; 251  |#define   LCD_SIZE_X       96
                             5613 ; 252  |#define   LCD_SIZE_Y       64
                             5614 ; 253  |#endif
                             5615 ; 254  |
                             5616 ; 255  |#ifdef ML9341_LCD
                             5617 ; 256  |#define   LCD_SIZE_X       96
                             5618 ; 257  |#define   LCD_SIZE_Y       96
                             5619 ; 258  |#endif
                             5620 ; 259  |
                             5621 ; 260  |#ifdef SSD1332_LCD
                             5622 ; 261  |#define   LCD_SIZE_X       96
                             5623 ; 262  |#define   LCD_SIZE_Y       64
                             5624 ; 263  |#endif
                             5625 ; 264  |
                             5626 ; 265  |#ifdef S6B33B0A_LCD
                             5627 ; 266  |#define   LCD_SIZE_X       128
                             5628 ; 267  |#define   LCD_SIZE_Y       159
                             5629 ; 268  |#endif
                             5630 ; 269  |
                             5631 ; 270  |#ifdef SED15XX_LCD
                             5632 ; 271  |#define LCD_SIZE_X                      128
                             5633 ; 272  |#define LCD_SIZE_Y                      64
                             5634 ; 273  |#endif
                             5635 ; 274  |
                             5636 ; 275  |#define LCD_SIZE_ROW                     8
                             5637 ; 276  |
                             5638 ; 277  |#define TOP_OF_SCREEN           0
                             5639 ; 278  |#define LEFT_OF_SCREEN          0
                             5640 ; 279  |
                             5641 ; 280  |#ifdef LDS514_LCD
                             5642 ; 281  |#define   SCREEN_WIDTH       96
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5643 ; 282  |#define   SCREEN_HEIGHT       64
                             5644 ; 283  |#endif
                             5645 ; 284  |
                             5646 ; 285  |#ifdef ILI814_LCD
                             5647 ; 286  |#define   SCREEN_WIDTH       96
                             5648 ; 287  |#define   SCREEN_HEIGHT       64
                             5649 ; 288  |#endif
                             5650 ; 289  |
                             5651 ; 290  |#ifdef ML9341_LCD
                             5652 ; 291  |#define   SCREEN_WIDTH       96
                             5653 ; 292  |#define   SCREEN_HEIGHT       96
                             5654 ; 293  |#endif
                             5655 ; 294  |
                             5656 ; 295  |#ifdef SSD1332_LCD
                             5657 ; 296  |#define   SCREEN_WIDTH       96
                             5658 ; 297  |#define   SCREEN_HEIGHT       64
                             5659 ; 298  |#endif
                             5660 ; 299  |
                             5661 ; 300  |#ifdef S6B33B0A_LCD
                             5662 ; 301  |#define   SCREEN_WIDTH       128
                             5663 ; 302  |#define   SCREEN_HEIGHT       159
                             5664 ; 303  |#endif
                             5665 ; 304  |
                             5666 ; 305  |#ifdef SED15XX_LCD
                             5667 ; 306  |#define SCREEN_WIDTH            128
                             5668 ; 307  |#define SCREEN_HEIGHT           64
                             5669 ; 308  |#endif
                             5670 ; 309  |
                             5671 ; 310  |#define CHAR_SIZE_X             6
                             5672 ; 311  |#define CHAR_SIZE_Y             8
                             5673 ; 312  |
                             5674 ; 313  |// Physical rows are numbered from 0 to LCD_SIZE_Y/LCD_SIZE_ROW
                             5675 ; 314  |#define LCD_FIRST_ROW_NUM                1
                             5676 ; 315  |#define LCD_FIRST_ROW_POS_Y=LCD_FIRST_ROW_NUM*LCD_SIZE_ROW  // skipping the first row
                             5677 ; 316  |
                             5678 ; 317  |// Top row in order from left to right
                             5679 ; 318  |#define PLAY_STATE_ICON_X_POS   LEFT_OF_SCREEN+0
                             5680 ; 319  |#define PLAY_STATE_ICON_Y_POS   TOP_OF_SCREEN+0
                             5681 ; 320  |#define PLAY_STATE_ICON_X_SIZE  12
                             5682 ; 321  |#define PLAY_STATE_ICON_Y_SIZE  8
                             5683 ; 322  |
                             5684 ; 323  |#define REPEAT_ICON_X_POS       LEFT_OF_SCREEN+13
                             5685 ; 324  |#define REPEAT_ICON_Y_POS       TOP_OF_SCREEN+0
                             5686 ; 325  |#define REPEAT_ICON_X_SIZE      12
                             5687 ; 326  |#define REPEAT_ICON_Y_SIZE      8
                             5688 ; 327  |
                             5689 ; 328  |#define SHUFFLE_ICON_X_POS      LEFT_OF_SCREEN+25
                             5690 ; 329  |#define SHUFFLE_ICON_Y_POS      TOP_OF_SCREEN+0
                             5691 ; 330  |#define SHUFFLE_ICON_X_SIZE     5     // includes white space on left side of .bmp
                             5692 ; 331  |#define SHUFFLE_ICON_Y_SIZE     8
                             5693 ; 332  |
                             5694 ; 333  |#define AB_ICON_X_POS           LEFT_OF_SCREEN+31
                             5695 ; 334  |#define AB_ICON_Y_POS           TOP_OF_SCREEN+0
                             5696 ; 335  |#define AB_ICON_X_SIZE          12
                             5697 ; 336  |#define AB_ICON_Y_SIZE          8
                             5698 ; 337  |
                             5699 ; 338  |#ifdef  AUDIBLE
                             5700 ; 339  |#define SECNAV_ICON_X_POS       LEFT_OF_SCREEN+31
                             5701 ; 340  |#define SECNAV_ICON_Y_POS       TOP_OF_SCREEN+0
                             5702 ; 341  |#define SECNAV_ICON_X_SIZE      12
                             5703 ; 342  |#define SECNAV_ICON_Y_SIZE      8
                             5704 ; 343  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5705 ; 344  |
                             5706 ; 345  |#define EQ_ICON_X_POS           LEFT_OF_SCREEN+44
                             5707 ; 346  |#define EQ_ICON_Y_POS           TOP_OF_SCREEN+0
                             5708 ; 347  |#define EQ_ICON_X_SIZE          22
                             5709 ; 348  |#define EQ_ICON_Y_SIZE          8
                             5710 ; 349  |
                             5711 ; 350  |#ifdef WOW
                             5712 ; 351  |#define WOW_X_POS               EQ_ICON_X_POS
                             5713 ; 352  |#define WOW_Y_POS               EQ_ICON_Y_POS
                             5714 ; 353  |#endif
                             5715 ; 354  |
                             5716 ; 355  |
                             5717 ; 356  |// Media icon
                             5718 ; 357  |#define DISK_X_POS              LEFT_OF_SCREEN+66
                             5719 ; 358  |#define DISK_Y_POS              TOP_OF_SCREEN
                             5720 ; 359  |#define DISK_X_SIZE             8
                             5721 ; 360  |#define DISK_Y_SIZE             8
                             5722 ; 361  |
                             5723 ; 362  |// Hold icon
                             5724 ; 363  |#define LOCK_ICON_X_POS         LEFT_OF_SCREEN+73
                             5725 ; 364  |#define LOCK_ICON_Y_POS         TOP_OF_SCREEN
                             5726 ; 365  |#define LOCK_ICON_X_SIZE        8
                             5727 ; 366  |#define LOCK_ICON_Y_SIZE        8
                             5728 ; 367  |
                             5729 ; 368  |#define BATTERY_ICON_X_POS      LEFT_OF_SCREEN+110
                             5730 ; 369  |#define BATTERY_ICON_Y_POS      TOP_OF_SCREEN+0
                             5731 ; 370  |#define BATTERY_ICON_X_SIZE     16
                             5732 ; 371  |#define BATTERY_ICON_Y_SIZE     8
                             5733 ; 372  |#define BATTERY_RESOURCE        RSRC_BATTERY_00
                             5734 ; 373  |
                             5735 ; 374  |// Second row from left to right
                             5736 ; 375  |#define VOLUME_ICON_X_POS       LEFT_OF_SCREEN+0
                             5737 ; 376  |#define VOLUME_ICON_Y_POS       TOP_OF_SCREEN+8
                             5738 ; 377  |#define VOLUME_ICON_X_SIZE      48
                             5739 ; 378  |#define VOLUME_ICON_Y_SIZE      8
                             5740 ; 379  |#define VOLUME_RESOURCE         RSRC_ICON_VOL_00
                             5741 ; 380  |#define VOLUME_NUM_ICONS        27
                             5742 ; 381  |
                             5743 ; 382  |#define PLAYSET_X_POS           SCREEN_WIDTH-8
                             5744 ; 383  |#define PLAYSET_Y_POS           TOP_OF_SCREEN+8
                             5745 ; 384  |
                             5746 ; 385  |//Lyrics Position
                             5747 ; 386  |#define LYRICS_DISPLAY_X_POS    LEFT_OF_SCREEN
                             5748 ; 387  |#define LYRICS_DISPLAY_Y_POS    TOP_OF_SCREEN+16
                             5749 ; 388  |#define LYRICS_DISPLAY_HEIGHT           10
                             5750 ; 389  |
                             5751 ; 390  |// Music menu
                             5752 ; 391  |#define SONG_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5753 ; 392  |#define SONG_TITLE_Y_POS        TOP_OF_SCREEN+16
                             5754 ; 393  |#define SONG_TITLE_X_SIZE       SCREEN_WIDTH
                             5755 ; 394  |#define SONG_TITLE_Y_SIZE       10
                             5756 ; 395  |
                             5757 ; 396  |#define SONG_ARTIST_X_POS       LEFT_OF_SCREEN
                             5758 ; 397  |#define SONG_ARTIST_Y_POS       TOP_OF_SCREEN+26
                             5759 ; 398  |#define SONG_ARTIST_X_SIZE      SCREEN_WIDTH
                             5760 ; 399  |#define SONG_ARTIST_Y_SIZE      10
                             5761 ; 400  |
                             5762 ; 401  |#define SONG_ALBUM_X_POS       LEFT_OF_SCREEN
                             5763 ; 402  |#define SONG_ALBUM_Y_POS       TOP_OF_SCREEN+36
                             5764 ; 403  |#define SONG_ALBUM_X_SIZE      SCREEN_WIDTH
                             5765 ; 404  |#define SONG_ALBUM_Y_SIZE      10
                             5766 ; 405  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5767 ; 406  |#ifdef USE_PLAYLIST5
                             5768 ; 407  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+28
                             5769 ; 408  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             5770 ; 409  |#define TRACK_NUMBER_X_SIZE     6*4
                             5771 ; 410  |#define TRACK_NUMBER_Y_SIZE     8
                             5772 ; 411  |
                             5773 ; 412  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             5774 ; 413  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             5775 ; 414  |#define TRACK_COUNT_X_SIZE      6*4
                             5776 ; 415  |#define TRACK_COUNT_Y_SIZE      8
                             5777 ; 416  |
                             5778 ; 417  |#define TRACK_DIVIDE_X TRACK_NUMBER_X_POS+TRACK_COUNT_X_SIZE + 2
                             5779 ; 418  |#else
                             5780 ; 419  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+34
                             5781 ; 420  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             5782 ; 421  |#define TRACK_NUMBER_X_SIZE     6*3
                             5783 ; 422  |#define TRACK_NUMBER_Y_SIZE     8
                             5784 ; 423  |
                             5785 ; 424  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             5786 ; 425  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             5787 ; 426  |#define TRACK_COUNT_X_SIZE      6*3
                             5788 ; 427  |#define TRACK_COUNT_Y_SIZE      8
                             5789 ; 428  |
                             5790 ; 429  |#define TRACK_DIVIDE_X  TRACK_NUMBER_X_POS+24
                             5791 ; 430  |#endif
                             5792 ; 431  |
                             5793 ; 432  |
                             5794 ; 433  |#define TRACK_CURR_TIME_X_POS       LEFT_OF_SCREEN+28
                             5795 ; 434  |#define TRACK_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             5796 ; 435  |#define TRACK_CURR_TIME_X_SIZE      25
                             5797 ; 436  |#define TRACK_CURR_TIME_Y_SIZE      8
                             5798 ; 437  |
                             5799 ; 438  |#define TRACK_SLASH_X_SIZE          5
                             5800 ; 439  |#define TRACK_SLASH_X_POS           TRACK_TOTAL_TIME_X_POS-TRACK_SLASH_X_SIZE
                             5801 ; 440  |#define TRACK_SLASH_Y_POS           TRACK_CURR_TIME_Y_POS
                             5802 ; 441  |
                             5803 ; 442  |#define TRACK_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+60
                             5804 ; 443  |#define TRACK_TOTAL_TIME_Y_POS      TRACK_CURR_TIME_Y_POS
                             5805 ; 444  |#define TRACK_TOTAL_TIME_X_SIZE     28
                             5806 ; 445  |#define TRACK_TOTAL_TIME_Y_SIZE     8
                             5807 ; 446  |
                             5808 ; 447  |#define VBR_FLAG_X_POS      LEFT_OF_SCREEN+80
                             5809 ; 448  |#define VBR_FLAG_Y_POS      8
                             5810 ; 449  |#define VBR_FLAG_X_SIZE     20
                             5811 ; 450  |#define VBR_FLAG_Y_SIZE     8
                             5812 ; 451  |#ifdef JPEG_ALBUM_ART
                             5813 ; 452  |// Album art display parameters:
                             5814 ; 453  |#define ALBUM_ART_X_POS         TOP_OF_SCREEN
                             5815 ; 454  |#define ALBUM_ART_Y_POS         80
                             5816 ; 455  |#define ALBUM_ART_X_SIZE        SCREEN_WIDTH
                             5817 ; 456  |#define ALBUM_ART_Y_SIZE        (SCREEN_HEIGHT-ALBUM_ART_Y_POS)
                             5818 ; 457  |#endif
                             5819 ; 458  |
                             5820 ; 459  |// Recording Display
                             5821 ; 460  |#define REC_CURR_TIME_X_POS       LEFT_OF_SCREEN
                             5822 ; 461  |#define REC_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             5823 ; 462  |#define REC_CURR_TIME_X_SIZE      12
                             5824 ; 463  |#define REC_CURR_TIME_Y_SIZE      8
                             5825 ; 464  |
                             5826 ; 465  |#define REC_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+45
                             5827 ; 466  |#define REC_TOTAL_TIME_Y_POS      TOP_OF_SCREEN+48
                             5828 ; 467  |#define REC_TOTAL_TIME_X_SIZE     28
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5829 ; 468  |#define REC_TOTAL_TIME_Y_SIZE     8
                             5830 ; 469  |
                             5831 ; 470  |// Playback Display with hours added.
                             5832 ; 471  |#ifdef LDS514_LCD
                             5833 ; 472  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5834 ; 473  |#endif
                             5835 ; 474  |
                             5836 ; 475  |#ifdef ILI814_LCD
                             5837 ; 476  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5838 ; 477  |#endif
                             5839 ; 478  |
                             5840 ; 479  |#ifdef ML9341_LCD
                             5841 ; 480  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5842 ; 481  |#endif
                             5843 ; 482  |
                             5844 ; 483  |#ifdef SSD1332_LCD
                             5845 ; 484  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5846 ; 485  |#endif
                             5847 ; 486  |
                             5848 ; 487  |#ifdef S6B33B0A_LCD
                             5849 ; 488  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5850 ; 489  |#endif
                             5851 ; 490  |
                             5852 ; 491  |#ifdef SED15XX_LCD
                             5853 ; 492  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             5854 ; 493  |#endif
                             5855 ; 494  |
                             5856 ; 495  |#define HR_TRACK_CURR_TIME_Y_POS        TOP_OF_SCREEN+48
                             5857 ; 496  |#define HR_TRACK_CURR_TIME_X_SIZE       28
                             5858 ; 497  |#define HR_TRACK_CURR_TIME_Y_SIZE       8
                             5859 ; 498  |
                             5860 ; 499  |#define HR_TRACK_TOTAL_TIME_X_POS       LEFT_OF_SCREEN+59
                             5861 ; 500  |#define HR_TRACK_TOTAL_TIME_Y_POS       TRACK_CURR_TIME_Y_POS
                             5862 ; 501  |#define HR_TRACK_TOTAL_TIME_X_SIZE      28
                             5863 ; 502  |#define HR_TRACK_TOTAL_TIME_Y_SIZE      8
                             5864 ; 503  |
                             5865 ; 504  |//Clear entire Track Time when song changes.
                             5866 ; 505  |#define CLR_TRACK_TIME_X_POS            LEFT_OF_SCREEN
                             5867 ; 506  |#define CLR_TRACK_TIME_Y_POS            TRACK_CURR_TIME_Y_POS
                             5868 ; 507  |#define CLR_TRACK_TIME_X_SIZE           SCREEN_WIDTH
                             5869 ; 508  |#define CLR_TRACK_TIME_Y_SIZE           8
                             5870 ; 509  |
                             5871 ; 510  |#define HR_TRACK_SLASH_X_SIZE           3
                             5872 ; 511  |#define HR_TRACK_SLASH_X_POS            HR_TRACK_TOTAL_TIME_X_POS-HR_TRACK_SLASH_X_SIZE
                             5873 ; 512  |#define HR_TRACK_SLASH_Y_POS            HR_TRACK_CURR_TIME_Y_POS
                             5874 ; 513  |
                             5875 ; 514  | //DVRWARN
                             5876 ; 515  |#define VOICE_SPACE_WARN_X_POS      LEFT_OF_SCREEN
                             5877 ; 516  |#define VOICE_SPACE_WARN_Y_POS      SONG_TITLE_Y_POS
                             5878 ; 517  |#define VOICE_SPACE_WARN_X_SIZE     93
                             5879 ; 518  |#define VOICE_SPACE_WARN_Y_SIZE     16
                             5880 ; 519  |
                             5881 ; 520  |//Shutdown
                             5882 ; 521  |#define SHUTDOWN_PROGRESS_X_POS     LEFT_OF_SCREEN+24
                             5883 ; 522  |#define SHUTDOWN_PROGRESS_Y_POS     TOP_OF_SCREEN+32
                             5884 ; 523  |#define SHUTDOWN_PROGRESS_X_SIZE    59
                             5885 ; 524  |#define SHUTDOWN_PROGRESS_Y_SIZE    16
                             5886 ; 525  |#define SHUTDOWN_PROGRESS_RESOURCE  RSRC_PDOWN_STATUS_0
                             5887 ; 526  |
                             5888 ; 527  |#define SHUTDOWN_STRING_X_POS       LEFT_OF_SCREEN+10
                             5889 ; 528  |#define SHUTDOWN_STRING_Y_POS       TOP_OF_SCREEN+16
                             5890 ; 529  |#define SHUTDOWN_STRING_X_SIZE      59
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5891 ; 530  |#define SHUTDOWN_STRING_Y_SIZE      16
                             5892 ; 531  |#define SHUTDOWN_STRING_RESOURCE    RSRC_PDOWN_HOLD_STRING
                             5893 ; 532  |
                             5894 ; 533  |#define DEFRAGMENT_STRING_X_POS       LEFT_OF_SCREEN+0
                             5895 ; 534  |#define DEFRAGMENT_STRING_Y_POS       TOP_OF_SCREEN+16
                             5896 ; 535  |#define DEFRAGMENT_STRING_X_SIZE      59
                             5897 ; 536  |#define DEFRAGMENT_STRING_Y_SIZE      16
                             5898 ; 537  |#define DEFRAGMENT_STRING_RESOURCE    RSRC_DEFRAGMENT_STORE_STRING
                             5899 ; 538  |
                             5900 ; 539  |
                             5901 ; 540  |//Contrast Display
                             5902 ; 541  |#define CONTRAST_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5903 ; 542  |#define CONTRAST_TITLE_Y_POS        TOP_OF_SCREEN+16
                             5904 ; 543  |
                             5905 ; 544  |#define CONTRAST_X_POS              LEFT_OF_SCREEN+8
                             5906 ; 545  |#define CONTRAST_Y_POS              TOP_OF_SCREEN+32
                             5907 ; 546  |#define CONTRAST_X_SIZE             96
                             5908 ; 547  |#define CONTRAST_Y_SIZE             8
                             5909 ; 548  |#define CONTRAST_RESOURCE           RSRC_CONTRAST_LEVEL_0
                             5910 ; 549  |
                             5911 ; 550  |//Backlight Display
                             5912 ; 551  |#define BACKLIGHT_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5913 ; 552  |#define BACKLIGHT_TITLE_Y_POS        TOP_OF_SCREEN+24
                             5914 ; 553  |#define BACKLIGHT_STATE_X_POS        LEFT_OF_SCREEN+0
                             5915 ; 554  |#define BACKLIGHT_STATE_Y_POS        (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             5916 ; 555  |
                             5917 ; 556  |//settings title display
                             5918 ; 557  |#define SETTINGS_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5919 ; 558  |#define SETTINGS_TITLE_Y_POS        TOP_OF_SCREEN+8
                             5920 ; 559  |//jpeg display title display
                             5921 ; 560  |#define JPEG_DISPLAY_TITLE_X_POS        LEFT_OF_SCREEN+0
                             5922 ; 561  |#define JPEG_DISPLAY_TITLE_Y_POS        TOP_OF_SCREEN+8
                             5923 ; 562  |//erase files title display
                             5924 ; 563  |#define ERASE_TITLE_X_POS           LEFT_OF_SCREEN+0
                             5925 ; 564  |#define ERASE_TITLE_Y_POS           TOP_OF_SCREEN+8
                             5926 ; 565  |
                             5927 ; 566  |// Splashscreen
                             5928 ; 567  |#ifdef LDS514_LCD
                             5929 ; 568  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5930 ; 569  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5931 ; 570  |#define SPLASH_SCREEN_X_SIZE        96
                             5932 ; 571  |#define SPLASH_SCREEN_Y_SIZE        64
                             5933 ; 572  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5934 ; 573  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5935 ; 574  |#endif
                             5936 ; 575  |
                             5937 ; 576  |#ifdef ILI814_LCD
                             5938 ; 577  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5939 ; 578  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5940 ; 579  |#define SPLASH_SCREEN_X_SIZE        96
                             5941 ; 580  |#define SPLASH_SCREEN_Y_SIZE        64
                             5942 ; 581  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5943 ; 582  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5944 ; 583  |#endif
                             5945 ; 584  |
                             5946 ; 585  |#ifdef ML9341_LCD
                             5947 ; 586  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5948 ; 587  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5949 ; 588  |#define SPLASH_SCREEN_X_SIZE        96
                             5950 ; 589  |#define SPLASH_SCREEN_Y_SIZE        96
                             5951 ; 590  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5952 ; 591  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5953 ; 592  |#endif
                             5954 ; 593  |
                             5955 ; 594  |#ifdef SSD1332_LCD
                             5956 ; 595  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5957 ; 596  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             5958 ; 597  |#define SPLASH_SCREEN_X_SIZE        96
                             5959 ; 598  |#define SPLASH_SCREEN_Y_SIZE        64
                             5960 ; 599  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5961 ; 600  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5962 ; 601  |#endif
                             5963 ; 602  |
                             5964 ; 603  |#ifdef S6B33B0A_LCD
                             5965 ; 604  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5966 ; 605  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN + 16
                             5967 ; 606  |#define SPLASH_SCREEN_X_SIZE        80
                             5968 ; 607  |#define SPLASH_SCREEN_Y_SIZE        48
                             5969 ; 608  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5970 ; 609  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5971 ; 610  |#endif
                             5972 ; 611  |
                             5973 ; 612  |#ifdef SED15XX_LCD
                             5974 ; 613  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             5975 ; 614  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN 
                             5976 ; 615  |#define SPLASH_SCREEN_X_SIZE        128
                             5977 ; 616  |#define SPLASH_SCREEN_Y_SIZE        64    
                             5978 ; 617  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             5979 ; 618  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             5980 ; 619  |#endif
                             5981 ; 620  |
                             5982 ; 621  |// FM tuner
                             5983 ; 622  |#define FM_TUNER_FREQUENCY_X_POS    LEFT_OF_SCREEN+30
                             5984 ; 623  |#define FM_TUNER_FREQUENCY_Y_POS    TOP_OF_SCREEN+24
                             5985 ; 624  |#define FM_TUNER_FREQUENCY_X_SIZE   CHAR_SIZE_X*10
                             5986 ; 625  |#define FM_TUNER_FREQUENCY_Y_SIZE   CHAR_SIZE_Y
                             5987 ; 626  |#define FM_TUNER_FREQUENCY_DOT_X_POS    FM_TUNER_FREQUENCY_X_POS+CHAR_SIZE_X*3
                             5988 ; 627  |#define FM_TUNER_FRAC_FREQUENCY_X_POS    FM_TUNER_FREQUENCY_DOT_X_POS+3
                             5989 ; 628  |
                             5990 ; 629  |#define FM_TUNER_PRESET_X_POS       LEFT_OF_SCREEN+30
                             5991 ; 630  |#define FM_TUNER_PRESET_Y_POS       TOP_OF_SCREEN+34
                             5992 ; 631  |#define FM_TUNER_PRESET_X_SIZE      CHAR_SIZE_X*5
                             5993 ; 632  |#define FM_TUNER_PRESET_Y_SIZE      CHAR_SIZE_Y
                             5994 ; 633  |
                             5995 ; 634  |#define FM_TUNER_PILOT_X_POS       LEFT_OF_SCREEN+30
                             5996 ; 635  |#define FM_TUNER_PILOT_Y_POS       TOP_OF_SCREEN+44
                             5997 ; 636  |
                             5998 ; 637  |// About menu
                             5999 ; 638  |#define ABOUT_TITLE_X_POS           LEFT_OF_SCREEN+0
                             6000 ; 639  |#define ABOUT_TITLE_Y_POS           TOP_OF_SCREEN+LCD_SIZE_ROW
                             6001 ; 640  |// starting row -- use offsets for the rest
                             6002 ; 641  |#define ABOUT_LINE_LABEL_X_POS      LEFT_OF_SCREEN+0
                             6003 ; 642  |#define ABOUT_LINE_LABEL_Y_POS      ABOUT_TITLE_Y_POS+(2*LCD_SIZE_ROW)
                             6004 ; 643  |
                             6005 ; 644  |#ifdef PLAYER_STRESS
                             6006 ; 645  |#define STRESS_TEST_X_POS       LEFT_OF_SCREEN
                             6007 ; 646  |#define STRESS_TEST_Y_POS       TOP_OF_SCREEN+40
                             6008 ; 647  |#define STRESS_TEST_X_SIZE      SCREEN_WIDTH
                             6009 ; 648  |#define STRESS_TEST_Y_SIZE      8
                             6010 ; 649  |#endif
                             6011 ; 650  |
                             6012 ; 651  |
                             6013 ; 652  |// Delete Menu
                             6014 ; 653  |#define WARNING_MSG_LINE1_X         LEFT_OF_SCREEN
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6015 ; 654  |#define WARNING_MSG_LINE1_Y         (LCD_FIRST_ROW_NUM+1)*LCD_SIZE_ROW
                             6016 ; 655  |#define WARNING_MSG_LINE2_X         LEFT_OF_SCREEN
                             6017 ; 656  |#define WARNING_MSG_LINE2_Y         (LCD_FIRST_ROW_NUM+2)*LCD_SIZE_ROW
                             6018 ; 657  |#define WARNING_MSG_FILE_X          LEFT_OF_SCREEN
                             6019 ; 658  |#define WARNING_MSG_FILE_Y          (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             6020 ; 659  |#define WARNING_MSG_YES_X           LEFT_OF_SCREEN
                             6021 ; 660  |#define WARNING_MSG_YES_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6022 ; 661  |#define DELETE_FAIL_MSG_X           LEFT_OF_SCREEN
                             6023 ; 662  |#define DELETE_FAIL_MSG_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6024 ; 663  |
                             6025 ; 664  |_reentrant void DisplayClear (void);
                             6026 ; 665  |_reentrant void DisplayLowBattery (void);
                             6027 ; 666  |
                             6028 ; 667  |_reentrant int DisplayContrast( int bDisplay, int iIgnored1, void *pPtr);
                             6029 ; 668  |
                             6030 ; 669  |_reentrant int DisplayBacklight( int bDisplay, int iIgnored1, void *pPtr);
                             6031 ; 670  |#ifdef WOW
                             6032 ; 671  |_reentrant int DisplayBar( int bDisplay, int step, void *pPtr);
                             6033 ; 672  |#endif
                             6034 ; 673  |extern _X BOOL g_bSongStringScroll;
                             6035 ; 674  |extern _X INT  g_iSongStringOffset;
                             6036 ; 675  |extern _X INT  g_iSongStringLength;
                             6037 ; 676  |
                             6038 ; 677  |extern _X BOOL g_bArtistStringScroll;
                             6039 ; 678  |extern _X INT  g_iArtistStringOffset;
                             6040 ; 679  |extern _X INT  g_iArtistStringLength;
                             6041 ; 680  |
                             6042 ; 681  |
                             6043 ; 682  |extern _X BOOL g_bAlbumStringScroll;
                             6044 ; 683  |extern _X INT  g_iAlbumStringOffset;
                             6045 ; 684  |extern _X INT  g_iAlbumStringLength;
                             6046 ; 685  |extern int g_iVolume_Control_Mode;
                             6047 ; 686  |extern int g_iAB_Control_Mode;
                             6048 ; 687  |
                             6049 ; 688  |
                             6050 ; 689  |#endif //_DISPLAY_H
                             6051 
                             6053 
                             6054 ; 15   |#include "displaylists.h"
                             6055 
                             6057 
                             6058 ; 1    |#ifndef _DISPLAY_LISTS_H
                             6059 ; 2    |#define _DISPLAY_LISTS_H
                             6060 ; 3    |
                             6061 ; 4    |#include "display.h"
                             6062 
                             6064 
                             6065 ; 1    |#ifndef _DISPLAY_H
                             6066 ; 2    |#define _DISPLAY_H
                             6067 ; 3    |
                             6068 ; 4    |//Display bits
                             6069 ; 5    |#define DISPLAY_CLEAR_DISPLAY_BITPOS        0
                             6070 ; 6    |
                             6071 ; 7    |#define DISPLAY_ENCODER_TRACK_TIME_BITPOS   1
                             6072 ; 8    |#define DISPLAY_ENCODER_TRACK_NAME_BITPOS   2
                             6073 ; 9    |#define DISPLAY_RECORD_MODE_BITPOS          3
                             6074 ; 10   |
                             6075 ; 11   |//This bit (DISPLAY_MISC_BITPOS) is set to allow DisplayHints to be non zero, but does not
                                   map
                             6076 ; 12   |//to anything in UpdateDisplay();  (meant to be used to indicate that specific
                             6077 ; 13   |//things that are specific for that menu.
                             6078 ; 14   |#define DISPLAY_MISC_BITPOS                 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6079 ; 15   |
                             6080 ; 16   |#define DISPLAY_FMTUNER_FREQUENCY           5
                             6081 ; 17   |#define DISPLAY_FMTUNER_PRESET              6
                             6082 ; 18   |#define DISPLAY_FMTUNER_STRENGTH            7
                             6083 ; 19   |
                             6084 ; 20   |#define DISPLAY_PLAYSTATE_BITPOS             9
                             6085 ; 21   |#define DISPLAY_AB_ICON_BITPOS              10
                             6086 ; 22   |#define DISPLAY_PLAYMODE_BITPOS             11
                             6087 ; 23   |#define DISPLAY_PLAYSET_BITPOS              12
                             6088 ; 24   |
                             6089 ; 25   |//Playback info
                             6090 ; 26   |#define DISPLAY_EQ_BITPOS                   13
                             6091 ; 27   |#define DISPLAY_VOLUME_BITPOS               14
                             6092 ; 28   |
                             6093 ; 29   |//Track Info
                             6094 ; 30   |#define DISPLAY_SONGARTISTALBUM_BITPOS      15
                             6095 ; 31   |#define DISPLAY_SONGTITLE_BITPOS            16
                             6096 ; 32   |#define DISPLAY_CURRENTTRACK_BITPOS         17
                             6097 ; 33   |#define DISPLAY_TRACKTIME_BITPOS            18
                             6098 ; 34   |#define DISPLAY_TOTALTRACKTIME_BITPOS        8
                             6099 ; 35   |#define DISPLAY_BITRATE_BITPOS              19
                             6100 ; 36   |
                             6101 ; 37   |//Device status info
                             6102 ; 38   |#define DISPLAY_LOCK_BITPOS                 20
                             6103 ; 39   |#define DISPLAY_DISK_BITPOS                 21
                             6104 ; 40   |#define DISPLAY_BATTERY_BITPOS              22
                             6105 ; 41   |#define DISPLAY_ALBUMART_BITPOS              23
                             6106 ; 42   |
                             6107 ; 43   |#ifdef PLAYER_STRESS
                             6108 ; 44   |// this may not work since album art uses bit 23 so we may need a new word variable for th
                                  is player stress test bit below.
                             6109 ; 45   |#define DISPLAY_STRESSTEST_BITPOS            23
                             6110 ; 46   |#endif
                             6111 ; 47   |
                             6112 ; 48   |
                             6113 ; 49   |union DisplayHints
                             6114 ; 50   |{
                             6115 ; 51   |    struct {
                             6116 ; 52   |        int ClearDisplay        :1;//0
                             6117 ; 53   |        int EncoderTrackTime    :1;//1
                             6118 ; 54   |        int EncoderTrackName    :1;//2
                             6119 ; 55   |        int RecordMode          :1;//3
                             6120 ; 56   |        int Misc                :1;//4
                             6121 ; 57   |        int FMTunerFrequency    :1;//5
                             6122 ; 58   |        int FMTunerPreset       :1;//6
                             6123 ; 59   |        int FMTunerStrength     :1;//7
                             6124 ; 60   |        int TotalTrackTime      :1;//8
                             6125 ; 61   |        int PlayState           :1;//9
                             6126 ; 62   |        int ABIcon              :1;//10
                             6127 ; 63   |        int PlayMode            :1;//11
                             6128 ; 64   |        int PlaySet             :1;//12
                             6129 ; 65   |        int EQ                  :1;//13
                             6130 ; 66   |        int Volume              :1;//14
                             6131 ; 67   |        int SongArtistAlbum     :1;//15
                             6132 ; 68   |        int SongTitle           :1;//16
                             6133 ; 69   |        int CurrentTrack        :1;//17
                             6134 ; 70   |        int TrackTime           :1;//18
                             6135 ; 71   |        int Bitrate             :1;//19
                             6136 ; 72   |        int LockIcon            :1;//20
                             6137 ; 73   |        int Disk                :1;//21
                             6138 ; 74   |        int Battery             :1;//22
                             6139 ; 75   |#ifdef PLAYER_STRESS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6140 ; 76   |        int StressTest         :1;//23  // this might not work since bit 23 is already tak
                                  en by album art. 23 is last bit in word.
                             6141 ; 77   |#else
                             6142 ; 78   |        int AlbumArt            :1;//23
                             6143 ; 79   |#endif
                             6144 ; 80   |    } bits;
                             6145 ; 81   |    WORD I;
                             6146 ; 82   |};
                             6147 ; 83   |
                             6148 ; 84   |// setup default display for all menus
                             6149 ; 85   |// can be adjusted in each menus as required.
                             6150 ; 86   |#define COMMON_DISPLAY_ALL  (\ 
                             6151 ; 87   |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             6152 ; 88   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             6153 ; 89   |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6154 ; 90   |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             6155 ; 91   |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             6156 ; 92   |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             6157 ; 93   |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             6158 ; 94   |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             6159 ; 95   |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             6160 ; 96   |                                )
                             6161 ; 97   |
                             6162 ; 98   |#define SPECTROGRAM_MENU_DISPLAY_ALL  (\ 
                             6163 ; 99   |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             6164 ; 100  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             6165 ; 101  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             6166 ; 102  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             6167 ; 103  |                                (1<<DISPLAY_EQ_BITPOS)|\ 
                             6168 ; 104  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             6169 ; 105  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)\ 
                             6170 ; 106  |                                )
                             6171 ; 107  |
                             6172 ; 108  |//-----------------------------------------------
                             6173 ; 109  |#ifdef JPEG_ALBUM_ART
                             6174 ; 110  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_ALBUMART_BITPOS)
                             6175 ; 111  |#else
                             6176 ; 112  |#define ALBUMART_SET_MASK_IF_APPROPRIATE (0)
                             6177 ; 113  |#endif
                             6178 ; 114  |
                             6179 ; 115  |#ifdef PLAYER_STRESS
                             6180 ; 116  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (1<<DISPLAY_STRESSTEST_BITPOS)
                             6181 ; 117  |#else
                             6182 ; 118  |#define PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE (0)
                             6183 ; 119  |#endif
                             6184 ; 120  |
                             6185 ; 121  |
                             6186 ; 122  |#define MUSIC_MENU_DISPLAY_ALL  (\ 
                             6187 ; 123  |                                (COMMON_DISPLAY_ALL)|\ 
                             6188 ; 124  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             6189 ; 125  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6190 ; 126  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6191 ; 127  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             6192 ; 128  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             6193 ; 129  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             6194 ; 130  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             6195 ; 131  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)\ 
                             6196 ; 132  |                                )
                             6197 ; 133  |
                             6198 ; 134  |#define MUSIC_MENU_DISPLAY_NEW_TRACK (\ 
                             6199 ; 135  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             6200 ; 136  |                                (PLAYER_STRESSTEST_SET_MASK_IF_APPROPRIATE)|\ 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6201 ; 137  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             6202 ; 138  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             6203 ; 139  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             6204 ; 140  |                                (1<<DISPLAY_TRACKTIME_BITPOS)|\ 
                             6205 ; 141  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             6206 ; 142  |                                (1<<DISPLAY_AB_ICON_BITPOS)|\ 
                             6207 ; 143  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6208 ; 144  |                                (1<<DISPLAY_PLAYSET_BITPOS)\ 
                             6209 ; 145  |                                )
                             6210 ; 146  |//-----------------------------------------------
                             6211 ; 147  |
                             6212 ; 148  |
                             6213 ; 149  |#define MVIDEO_MENU_DISPLAY_ALL ((1<<DISPLAY_CURRENTTRACK_BITPOS)|(1<<DISPLAY_SONGTITLE_BI
                                  TPOS))
                             6214 ; 150  |
                             6215 ; 151  |
                             6216 ; 152  |#define VOICE_MENU_DISPLAY_ALL  (\ 
                             6217 ; 153  |                                COMMON_DISPLAY_ALL|\ 
                             6218 ; 154  |                                (1<<DISPLAY_PLAYMODE_BITPOS)|\ 
                             6219 ; 155  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6220 ; 156  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6221 ; 157  |                                (1<<DISPLAY_SONGARTISTALBUM_BITPOS)|\ 
                             6222 ; 158  |                                (1<<DISPLAY_SONGTITLE_BITPOS)|\ 
                             6223 ; 159  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             6224 ; 160  |                                (1<<DISPLAY_TOTALTRACKTIME_BITPOS)|\ 
                             6225 ; 161  |                                (1<<DISPLAY_TRACKTIME_BITPOS)\ 
                             6226 ; 162  |                                )
                             6227 ; 163  |
                             6228 ; 164  |
                             6229 ; 165  |#define RECORDING_DISPLAY_ALL   (\ 
                             6230 ; 166  |                                COMMON_DISPLAY_ALL|\ 
                             6231 ; 167  |                                (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             6232 ; 168  |                                (1<<DISPLAY_ENCODER_TRACK_NAME_BITPOS)|\ 
                             6233 ; 169  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6234 ; 170  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6235 ; 171  |                                (1<<DISPLAY_RECORD_MODE_BITPOS)\ 
                             6236 ; 172  |                                )
                             6237 ; 173  |
                             6238 ; 174  |#ifdef USE_PLAYLIST3
                             6239 ; 175  |#define BROWSE_MENU_DISPLAY_ALL  (\ 
                             6240 ; 176  |                                (1<<DISPLAY_BATTERY_BITPOS)|\ 
                             6241 ; 177  |                                (1<<DISPLAY_LOCK_BITPOS)|\ 
                             6242 ; 178  |                                (1<<DISPLAY_DISK_BITPOS)|\ 
                             6243 ; 179  |                                (1<<DISPLAY_PLAYSET_BITPOS)|\ 
                             6244 ; 180  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             6245 ; 181  |                                )
                             6246 ; 182  |#else
                             6247 ; 183  |#ifdef USE_PLAYLIST5
                             6248 ; 184  |#if 0
                             6249 ; 185  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             6250 ; 186  |                                 COMMON_DISPLAY_ALL|\ 
                             6251 ; 187  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             6252 ; 188  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
                             6253 ; 189  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6254 ; 190  |                                (1<<DISPLAY_CURRENTTRACK_BITPOS)|\ 
                             6255 ; 191  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             6256 ; 192  |                                )
                             6257 ; 193  |#else
                             6258 ; 194  |#define BROWSE_MENU_DISPLAY_ALL (\ 
                             6259 ; 195  |                                 COMMON_DISPLAY_ALL|\ 
                             6260 ; 196  |                                (ALBUMART_SET_MASK_IF_APPROPRIATE)|\ 
                             6261 ; 197  |                                (1<<DISPLAY_PLAYSTATE_BITPOS)|\ 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6262 ; 198  |                                (1<<DISPLAY_VOLUME_BITPOS)|\ 
                             6263 ; 199  |                                (1<<DISPLAY_MISC_BITPOS)\ 
                             6264 ; 200  |                                )
                             6265 ; 201  |#endif
                             6266 ; 202  |#endif  // #ifdef USE_PLAYLIST5
                             6267 ; 203  |#endif  // #ifdef USE_PLAYLIST3
                             6268 ; 204  |
                             6269 ; 205  |
                             6270 ; 206  |
                             6271 ; 207  |#define MAIN_MENU_DISPLAY_ALL           (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6272 ; 208  |
                             6273 ; 209  |#define EQ_MENU_DISPLAY_ALL             (\ 
                             6274 ; 210  |                                        COMMON_DISPLAY_ALL|\ 
                             6275 ; 211  |                                        (1<<DISPLAY_EQ_BITPOS)|\ 
                             6276 ; 212  |                                        (1<<DISPLAY_VOLUME_BITPOS)\ 
                             6277 ; 213  |                                        )     // (SDK2.520)
                             6278 ; 214  |
                             6279 ; 215  |#define PM_MENU_DISPLAY_ALL             (COMMON_DISPLAY_ALL|(1<<DISPLAY_PLAYMODE_BITPOS)|(
                                  1<<DISPLAY_MISC_BITPOS))
                             6280 ; 216  |#define PWR_MENU_DISPLAY_ALL            (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6281 ; 217  |#define SETTINGS_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6282 ; 218  |#define JPEG_DISPLAY_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6283 ; 219  |#define DELETE_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6284 ; 220  |#define ABOUT_MENU_DISPLAY_ALL          (COMMON_DISPLAY_ALL)
                             6285 ; 221  |#define ERASE_MENU_DISPLAY_ALL          ((1<<DISPLAY_BATTERY_BITPOS)|(1<<DISPLAY_LOCK_BITP
                                  OS))
                             6286 ; 222  |
                             6287 ; 223  |#define CONTRAST_MENU_DISPLAY_ALL       (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6288 ; 224  |
                             6289 ; 225  |#define TIME_DATE_MENU_DISPLAY_ALL      0
                             6290 ; 226  |#define RECORDTEST_DISPLAY_ALL       (\ 
                             6291 ; 227  |                                        (1<<DISPLAY_ENCODER_TRACK_TIME_BITPOS)|\ 
                             6292 ; 228  |                                                                        (1<<DISPLAY_ENCODE
                                  R_TRACK_NAME_BITPOS)|\ 
                             6293 ; 229  |                                                                        (1<<DISPLAY_PLAYST
                                  ATE_BITPOS)|\ 
                             6294 ; 230  |                                        (1<<DISPLAY_RECORD_MODE_BITPOS)|\ 
                             6295 ; 231  |                                    (1<<DISPLAY_MISC_BITPOS)\ 
                             6296 ; 232  |                                                                        )
                             6297 ; 233  |
                             6298 ; 234  |#define SPLASH_MENU_DISPLAY_ALL         (COMMON_DISPLAY_ALL|(1<<DISPLAY_MISC_BITPOS))
                             6299 ; 235  |// used during track update to force total time update
                             6300 ; 236  |#define AUTOUPDATE              FALSE
                             6301 ; 237  |#define FORCEUPDATE             TRUE
                             6302 ; 238  |
                             6303 ; 239  |
                             6304 ; 240  |// based on font used for title/artist display
                             6305 ; 241  |#define DEFAULT_CHAR_WIDTH  5
                             6306 ; 242  |
                             6307 ; 243  |
                             6308 ; 244  |// LCD dimensions
                             6309 ; 245  |#ifdef LDS514_LCD
                             6310 ; 246  |#define   LCD_SIZE_X       96
                             6311 ; 247  |#define   LCD_SIZE_Y       64
                             6312 ; 248  |#endif
                             6313 ; 249  |
                             6314 ; 250  |#ifdef ILI814_LCD
                             6315 ; 251  |#define   LCD_SIZE_X       96
                             6316 ; 252  |#define   LCD_SIZE_Y       64
                             6317 ; 253  |#endif
                             6318 ; 254  |
                             6319 ; 255  |#ifdef ML9341_LCD
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6320 ; 256  |#define   LCD_SIZE_X       96
                             6321 ; 257  |#define   LCD_SIZE_Y       96
                             6322 ; 258  |#endif
                             6323 ; 259  |
                             6324 ; 260  |#ifdef SSD1332_LCD
                             6325 ; 261  |#define   LCD_SIZE_X       96
                             6326 ; 262  |#define   LCD_SIZE_Y       64
                             6327 ; 263  |#endif
                             6328 ; 264  |
                             6329 ; 265  |#ifdef S6B33B0A_LCD
                             6330 ; 266  |#define   LCD_SIZE_X       128
                             6331 ; 267  |#define   LCD_SIZE_Y       159
                             6332 ; 268  |#endif
                             6333 ; 269  |
                             6334 ; 270  |#ifdef SED15XX_LCD
                             6335 ; 271  |#define LCD_SIZE_X                      128
                             6336 ; 272  |#define LCD_SIZE_Y                      64
                             6337 ; 273  |#endif
                             6338 ; 274  |
                             6339 ; 275  |#define LCD_SIZE_ROW                     8
                             6340 ; 276  |
                             6341 ; 277  |#define TOP_OF_SCREEN           0
                             6342 ; 278  |#define LEFT_OF_SCREEN          0
                             6343 ; 279  |
                             6344 ; 280  |#ifdef LDS514_LCD
                             6345 ; 281  |#define   SCREEN_WIDTH       96
                             6346 ; 282  |#define   SCREEN_HEIGHT       64
                             6347 ; 283  |#endif
                             6348 ; 284  |
                             6349 ; 285  |#ifdef ILI814_LCD
                             6350 ; 286  |#define   SCREEN_WIDTH       96
                             6351 ; 287  |#define   SCREEN_HEIGHT       64
                             6352 ; 288  |#endif
                             6353 ; 289  |
                             6354 ; 290  |#ifdef ML9341_LCD
                             6355 ; 291  |#define   SCREEN_WIDTH       96
                             6356 ; 292  |#define   SCREEN_HEIGHT       96
                             6357 ; 293  |#endif
                             6358 ; 294  |
                             6359 ; 295  |#ifdef SSD1332_LCD
                             6360 ; 296  |#define   SCREEN_WIDTH       96
                             6361 ; 297  |#define   SCREEN_HEIGHT       64
                             6362 ; 298  |#endif
                             6363 ; 299  |
                             6364 ; 300  |#ifdef S6B33B0A_LCD
                             6365 ; 301  |#define   SCREEN_WIDTH       128
                             6366 ; 302  |#define   SCREEN_HEIGHT       159
                             6367 ; 303  |#endif
                             6368 ; 304  |
                             6369 ; 305  |#ifdef SED15XX_LCD
                             6370 ; 306  |#define SCREEN_WIDTH            128
                             6371 ; 307  |#define SCREEN_HEIGHT           64
                             6372 ; 308  |#endif
                             6373 ; 309  |
                             6374 ; 310  |#define CHAR_SIZE_X             6
                             6375 ; 311  |#define CHAR_SIZE_Y             8
                             6376 ; 312  |
                             6377 ; 313  |// Physical rows are numbered from 0 to LCD_SIZE_Y/LCD_SIZE_ROW
                             6378 ; 314  |#define LCD_FIRST_ROW_NUM                1
                             6379 ; 315  |#define LCD_FIRST_ROW_POS_Y=LCD_FIRST_ROW_NUM*LCD_SIZE_ROW  // skipping the first row
                             6380 ; 316  |
                             6381 ; 317  |// Top row in order from left to right
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6382 ; 318  |#define PLAY_STATE_ICON_X_POS   LEFT_OF_SCREEN+0
                             6383 ; 319  |#define PLAY_STATE_ICON_Y_POS   TOP_OF_SCREEN+0
                             6384 ; 320  |#define PLAY_STATE_ICON_X_SIZE  12
                             6385 ; 321  |#define PLAY_STATE_ICON_Y_SIZE  8
                             6386 ; 322  |
                             6387 ; 323  |#define REPEAT_ICON_X_POS       LEFT_OF_SCREEN+13
                             6388 ; 324  |#define REPEAT_ICON_Y_POS       TOP_OF_SCREEN+0
                             6389 ; 325  |#define REPEAT_ICON_X_SIZE      12
                             6390 ; 326  |#define REPEAT_ICON_Y_SIZE      8
                             6391 ; 327  |
                             6392 ; 328  |#define SHUFFLE_ICON_X_POS      LEFT_OF_SCREEN+25
                             6393 ; 329  |#define SHUFFLE_ICON_Y_POS      TOP_OF_SCREEN+0
                             6394 ; 330  |#define SHUFFLE_ICON_X_SIZE     5     // includes white space on left side of .bmp
                             6395 ; 331  |#define SHUFFLE_ICON_Y_SIZE     8
                             6396 ; 332  |
                             6397 ; 333  |#define AB_ICON_X_POS           LEFT_OF_SCREEN+31
                             6398 ; 334  |#define AB_ICON_Y_POS           TOP_OF_SCREEN+0
                             6399 ; 335  |#define AB_ICON_X_SIZE          12
                             6400 ; 336  |#define AB_ICON_Y_SIZE          8
                             6401 ; 337  |
                             6402 ; 338  |#ifdef  AUDIBLE
                             6403 ; 339  |#define SECNAV_ICON_X_POS       LEFT_OF_SCREEN+31
                             6404 ; 340  |#define SECNAV_ICON_Y_POS       TOP_OF_SCREEN+0
                             6405 ; 341  |#define SECNAV_ICON_X_SIZE      12
                             6406 ; 342  |#define SECNAV_ICON_Y_SIZE      8
                             6407 ; 343  |#endif
                             6408 ; 344  |
                             6409 ; 345  |#define EQ_ICON_X_POS           LEFT_OF_SCREEN+44
                             6410 ; 346  |#define EQ_ICON_Y_POS           TOP_OF_SCREEN+0
                             6411 ; 347  |#define EQ_ICON_X_SIZE          22
                             6412 ; 348  |#define EQ_ICON_Y_SIZE          8
                             6413 ; 349  |
                             6414 ; 350  |#ifdef WOW
                             6415 ; 351  |#define WOW_X_POS               EQ_ICON_X_POS
                             6416 ; 352  |#define WOW_Y_POS               EQ_ICON_Y_POS
                             6417 ; 353  |#endif
                             6418 ; 354  |
                             6419 ; 355  |
                             6420 ; 356  |// Media icon
                             6421 ; 357  |#define DISK_X_POS              LEFT_OF_SCREEN+66
                             6422 ; 358  |#define DISK_Y_POS              TOP_OF_SCREEN
                             6423 ; 359  |#define DISK_X_SIZE             8
                             6424 ; 360  |#define DISK_Y_SIZE             8
                             6425 ; 361  |
                             6426 ; 362  |// Hold icon
                             6427 ; 363  |#define LOCK_ICON_X_POS         LEFT_OF_SCREEN+73
                             6428 ; 364  |#define LOCK_ICON_Y_POS         TOP_OF_SCREEN
                             6429 ; 365  |#define LOCK_ICON_X_SIZE        8
                             6430 ; 366  |#define LOCK_ICON_Y_SIZE        8
                             6431 ; 367  |
                             6432 ; 368  |#define BATTERY_ICON_X_POS      LEFT_OF_SCREEN+110
                             6433 ; 369  |#define BATTERY_ICON_Y_POS      TOP_OF_SCREEN+0
                             6434 ; 370  |#define BATTERY_ICON_X_SIZE     16
                             6435 ; 371  |#define BATTERY_ICON_Y_SIZE     8
                             6436 ; 372  |#define BATTERY_RESOURCE        RSRC_BATTERY_00
                             6437 ; 373  |
                             6438 ; 374  |// Second row from left to right
                             6439 ; 375  |#define VOLUME_ICON_X_POS       LEFT_OF_SCREEN+0
                             6440 ; 376  |#define VOLUME_ICON_Y_POS       TOP_OF_SCREEN+8
                             6441 ; 377  |#define VOLUME_ICON_X_SIZE      48
                             6442 ; 378  |#define VOLUME_ICON_Y_SIZE      8
                             6443 ; 379  |#define VOLUME_RESOURCE         RSRC_ICON_VOL_00
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6444 ; 380  |#define VOLUME_NUM_ICONS        27
                             6445 ; 381  |
                             6446 ; 382  |#define PLAYSET_X_POS           SCREEN_WIDTH-8
                             6447 ; 383  |#define PLAYSET_Y_POS           TOP_OF_SCREEN+8
                             6448 ; 384  |
                             6449 ; 385  |//Lyrics Position
                             6450 ; 386  |#define LYRICS_DISPLAY_X_POS    LEFT_OF_SCREEN
                             6451 ; 387  |#define LYRICS_DISPLAY_Y_POS    TOP_OF_SCREEN+16
                             6452 ; 388  |#define LYRICS_DISPLAY_HEIGHT           10
                             6453 ; 389  |
                             6454 ; 390  |// Music menu
                             6455 ; 391  |#define SONG_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6456 ; 392  |#define SONG_TITLE_Y_POS        TOP_OF_SCREEN+16
                             6457 ; 393  |#define SONG_TITLE_X_SIZE       SCREEN_WIDTH
                             6458 ; 394  |#define SONG_TITLE_Y_SIZE       10
                             6459 ; 395  |
                             6460 ; 396  |#define SONG_ARTIST_X_POS       LEFT_OF_SCREEN
                             6461 ; 397  |#define SONG_ARTIST_Y_POS       TOP_OF_SCREEN+26
                             6462 ; 398  |#define SONG_ARTIST_X_SIZE      SCREEN_WIDTH
                             6463 ; 399  |#define SONG_ARTIST_Y_SIZE      10
                             6464 ; 400  |
                             6465 ; 401  |#define SONG_ALBUM_X_POS       LEFT_OF_SCREEN
                             6466 ; 402  |#define SONG_ALBUM_Y_POS       TOP_OF_SCREEN+36
                             6467 ; 403  |#define SONG_ALBUM_X_SIZE      SCREEN_WIDTH
                             6468 ; 404  |#define SONG_ALBUM_Y_SIZE      10
                             6469 ; 405  |
                             6470 ; 406  |#ifdef USE_PLAYLIST5
                             6471 ; 407  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+28
                             6472 ; 408  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             6473 ; 409  |#define TRACK_NUMBER_X_SIZE     6*4
                             6474 ; 410  |#define TRACK_NUMBER_Y_SIZE     8
                             6475 ; 411  |
                             6476 ; 412  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             6477 ; 413  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             6478 ; 414  |#define TRACK_COUNT_X_SIZE      6*4
                             6479 ; 415  |#define TRACK_COUNT_Y_SIZE      8
                             6480 ; 416  |
                             6481 ; 417  |#define TRACK_DIVIDE_X TRACK_NUMBER_X_POS+TRACK_COUNT_X_SIZE + 2
                             6482 ; 418  |#else
                             6483 ; 419  |#define TRACK_NUMBER_X_POS      LEFT_OF_SCREEN+34
                             6484 ; 420  |#define TRACK_NUMBER_Y_POS      TOP_OF_SCREEN+56
                             6485 ; 421  |#define TRACK_NUMBER_X_SIZE     6*3
                             6486 ; 422  |#define TRACK_NUMBER_Y_SIZE     8
                             6487 ; 423  |
                             6488 ; 424  |#define TRACK_COUNT_X_POS       TRACK_NUMBER_X_POS+TRACK_NUMBER_X_SIZE+10
                             6489 ; 425  |#define TRACK_COUNT_Y_POS       TOP_OF_SCREEN+56
                             6490 ; 426  |#define TRACK_COUNT_X_SIZE      6*3
                             6491 ; 427  |#define TRACK_COUNT_Y_SIZE      8
                             6492 ; 428  |
                             6493 ; 429  |#define TRACK_DIVIDE_X  TRACK_NUMBER_X_POS+24
                             6494 ; 430  |#endif
                             6495 ; 431  |
                             6496 ; 432  |
                             6497 ; 433  |#define TRACK_CURR_TIME_X_POS       LEFT_OF_SCREEN+28
                             6498 ; 434  |#define TRACK_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             6499 ; 435  |#define TRACK_CURR_TIME_X_SIZE      25
                             6500 ; 436  |#define TRACK_CURR_TIME_Y_SIZE      8
                             6501 ; 437  |
                             6502 ; 438  |#define TRACK_SLASH_X_SIZE          5
                             6503 ; 439  |#define TRACK_SLASH_X_POS           TRACK_TOTAL_TIME_X_POS-TRACK_SLASH_X_SIZE
                             6504 ; 440  |#define TRACK_SLASH_Y_POS           TRACK_CURR_TIME_Y_POS
                             6505 ; 441  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6506 ; 442  |#define TRACK_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+60
                             6507 ; 443  |#define TRACK_TOTAL_TIME_Y_POS      TRACK_CURR_TIME_Y_POS
                             6508 ; 444  |#define TRACK_TOTAL_TIME_X_SIZE     28
                             6509 ; 445  |#define TRACK_TOTAL_TIME_Y_SIZE     8
                             6510 ; 446  |
                             6511 ; 447  |#define VBR_FLAG_X_POS      LEFT_OF_SCREEN+80
                             6512 ; 448  |#define VBR_FLAG_Y_POS      8
                             6513 ; 449  |#define VBR_FLAG_X_SIZE     20
                             6514 ; 450  |#define VBR_FLAG_Y_SIZE     8
                             6515 ; 451  |#ifdef JPEG_ALBUM_ART
                             6516 ; 452  |// Album art display parameters:
                             6517 ; 453  |#define ALBUM_ART_X_POS         TOP_OF_SCREEN
                             6518 ; 454  |#define ALBUM_ART_Y_POS         80
                             6519 ; 455  |#define ALBUM_ART_X_SIZE        SCREEN_WIDTH
                             6520 ; 456  |#define ALBUM_ART_Y_SIZE        (SCREEN_HEIGHT-ALBUM_ART_Y_POS)
                             6521 ; 457  |#endif
                             6522 ; 458  |
                             6523 ; 459  |// Recording Display
                             6524 ; 460  |#define REC_CURR_TIME_X_POS       LEFT_OF_SCREEN
                             6525 ; 461  |#define REC_CURR_TIME_Y_POS       TOP_OF_SCREEN+48
                             6526 ; 462  |#define REC_CURR_TIME_X_SIZE      12
                             6527 ; 463  |#define REC_CURR_TIME_Y_SIZE      8
                             6528 ; 464  |
                             6529 ; 465  |#define REC_TOTAL_TIME_X_POS      LEFT_OF_SCREEN+45
                             6530 ; 466  |#define REC_TOTAL_TIME_Y_POS      TOP_OF_SCREEN+48
                             6531 ; 467  |#define REC_TOTAL_TIME_X_SIZE     28
                             6532 ; 468  |#define REC_TOTAL_TIME_Y_SIZE     8
                             6533 ; 469  |
                             6534 ; 470  |// Playback Display with hours added.
                             6535 ; 471  |#ifdef LDS514_LCD
                             6536 ; 472  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6537 ; 473  |#endif
                             6538 ; 474  |
                             6539 ; 475  |#ifdef ILI814_LCD
                             6540 ; 476  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6541 ; 477  |#endif
                             6542 ; 478  |
                             6543 ; 479  |#ifdef ML9341_LCD
                             6544 ; 480  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6545 ; 481  |#endif
                             6546 ; 482  |
                             6547 ; 483  |#ifdef SSD1332_LCD
                             6548 ; 484  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6549 ; 485  |#endif
                             6550 ; 486  |
                             6551 ; 487  |#ifdef S6B33B0A_LCD
                             6552 ; 488  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6553 ; 489  |#endif
                             6554 ; 490  |
                             6555 ; 491  |#ifdef SED15XX_LCD
                             6556 ; 492  |#define HR_TRACK_CURR_TIME_X_POS        LEFT_OF_SCREEN+16
                             6557 ; 493  |#endif
                             6558 ; 494  |
                             6559 ; 495  |#define HR_TRACK_CURR_TIME_Y_POS        TOP_OF_SCREEN+48
                             6560 ; 496  |#define HR_TRACK_CURR_TIME_X_SIZE       28
                             6561 ; 497  |#define HR_TRACK_CURR_TIME_Y_SIZE       8
                             6562 ; 498  |
                             6563 ; 499  |#define HR_TRACK_TOTAL_TIME_X_POS       LEFT_OF_SCREEN+59
                             6564 ; 500  |#define HR_TRACK_TOTAL_TIME_Y_POS       TRACK_CURR_TIME_Y_POS
                             6565 ; 501  |#define HR_TRACK_TOTAL_TIME_X_SIZE      28
                             6566 ; 502  |#define HR_TRACK_TOTAL_TIME_Y_SIZE      8
                             6567 ; 503  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6568 ; 504  |//Clear entire Track Time when song changes.
                             6569 ; 505  |#define CLR_TRACK_TIME_X_POS            LEFT_OF_SCREEN
                             6570 ; 506  |#define CLR_TRACK_TIME_Y_POS            TRACK_CURR_TIME_Y_POS
                             6571 ; 507  |#define CLR_TRACK_TIME_X_SIZE           SCREEN_WIDTH
                             6572 ; 508  |#define CLR_TRACK_TIME_Y_SIZE           8
                             6573 ; 509  |
                             6574 ; 510  |#define HR_TRACK_SLASH_X_SIZE           3
                             6575 ; 511  |#define HR_TRACK_SLASH_X_POS            HR_TRACK_TOTAL_TIME_X_POS-HR_TRACK_SLASH_X_SIZE
                             6576 ; 512  |#define HR_TRACK_SLASH_Y_POS            HR_TRACK_CURR_TIME_Y_POS
                             6577 ; 513  |
                             6578 ; 514  | //DVRWARN
                             6579 ; 515  |#define VOICE_SPACE_WARN_X_POS      LEFT_OF_SCREEN
                             6580 ; 516  |#define VOICE_SPACE_WARN_Y_POS      SONG_TITLE_Y_POS
                             6581 ; 517  |#define VOICE_SPACE_WARN_X_SIZE     93
                             6582 ; 518  |#define VOICE_SPACE_WARN_Y_SIZE     16
                             6583 ; 519  |
                             6584 ; 520  |//Shutdown
                             6585 ; 521  |#define SHUTDOWN_PROGRESS_X_POS     LEFT_OF_SCREEN+24
                             6586 ; 522  |#define SHUTDOWN_PROGRESS_Y_POS     TOP_OF_SCREEN+32
                             6587 ; 523  |#define SHUTDOWN_PROGRESS_X_SIZE    59
                             6588 ; 524  |#define SHUTDOWN_PROGRESS_Y_SIZE    16
                             6589 ; 525  |#define SHUTDOWN_PROGRESS_RESOURCE  RSRC_PDOWN_STATUS_0
                             6590 ; 526  |
                             6591 ; 527  |#define SHUTDOWN_STRING_X_POS       LEFT_OF_SCREEN+10
                             6592 ; 528  |#define SHUTDOWN_STRING_Y_POS       TOP_OF_SCREEN+16
                             6593 ; 529  |#define SHUTDOWN_STRING_X_SIZE      59
                             6594 ; 530  |#define SHUTDOWN_STRING_Y_SIZE      16
                             6595 ; 531  |#define SHUTDOWN_STRING_RESOURCE    RSRC_PDOWN_HOLD_STRING
                             6596 ; 532  |
                             6597 ; 533  |#define DEFRAGMENT_STRING_X_POS       LEFT_OF_SCREEN+0
                             6598 ; 534  |#define DEFRAGMENT_STRING_Y_POS       TOP_OF_SCREEN+16
                             6599 ; 535  |#define DEFRAGMENT_STRING_X_SIZE      59
                             6600 ; 536  |#define DEFRAGMENT_STRING_Y_SIZE      16
                             6601 ; 537  |#define DEFRAGMENT_STRING_RESOURCE    RSRC_DEFRAGMENT_STORE_STRING
                             6602 ; 538  |
                             6603 ; 539  |
                             6604 ; 540  |//Contrast Display
                             6605 ; 541  |#define CONTRAST_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6606 ; 542  |#define CONTRAST_TITLE_Y_POS        TOP_OF_SCREEN+16
                             6607 ; 543  |
                             6608 ; 544  |#define CONTRAST_X_POS              LEFT_OF_SCREEN+8
                             6609 ; 545  |#define CONTRAST_Y_POS              TOP_OF_SCREEN+32
                             6610 ; 546  |#define CONTRAST_X_SIZE             96
                             6611 ; 547  |#define CONTRAST_Y_SIZE             8
                             6612 ; 548  |#define CONTRAST_RESOURCE           RSRC_CONTRAST_LEVEL_0
                             6613 ; 549  |
                             6614 ; 550  |//Backlight Display
                             6615 ; 551  |#define BACKLIGHT_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6616 ; 552  |#define BACKLIGHT_TITLE_Y_POS        TOP_OF_SCREEN+24
                             6617 ; 553  |#define BACKLIGHT_STATE_X_POS        LEFT_OF_SCREEN+0
                             6618 ; 554  |#define BACKLIGHT_STATE_Y_POS        (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             6619 ; 555  |
                             6620 ; 556  |//settings title display
                             6621 ; 557  |#define SETTINGS_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6622 ; 558  |#define SETTINGS_TITLE_Y_POS        TOP_OF_SCREEN+8
                             6623 ; 559  |//jpeg display title display
                             6624 ; 560  |#define JPEG_DISPLAY_TITLE_X_POS        LEFT_OF_SCREEN+0
                             6625 ; 561  |#define JPEG_DISPLAY_TITLE_Y_POS        TOP_OF_SCREEN+8
                             6626 ; 562  |//erase files title display
                             6627 ; 563  |#define ERASE_TITLE_X_POS           LEFT_OF_SCREEN+0
                             6628 ; 564  |#define ERASE_TITLE_Y_POS           TOP_OF_SCREEN+8
                             6629 ; 565  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6630 ; 566  |// Splashscreen
                             6631 ; 567  |#ifdef LDS514_LCD
                             6632 ; 568  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6633 ; 569  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             6634 ; 570  |#define SPLASH_SCREEN_X_SIZE        96
                             6635 ; 571  |#define SPLASH_SCREEN_Y_SIZE        64
                             6636 ; 572  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6637 ; 573  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6638 ; 574  |#endif
                             6639 ; 575  |
                             6640 ; 576  |#ifdef ILI814_LCD
                             6641 ; 577  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6642 ; 578  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             6643 ; 579  |#define SPLASH_SCREEN_X_SIZE        96
                             6644 ; 580  |#define SPLASH_SCREEN_Y_SIZE        64
                             6645 ; 581  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6646 ; 582  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6647 ; 583  |#endif
                             6648 ; 584  |
                             6649 ; 585  |#ifdef ML9341_LCD
                             6650 ; 586  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6651 ; 587  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             6652 ; 588  |#define SPLASH_SCREEN_X_SIZE        96
                             6653 ; 589  |#define SPLASH_SCREEN_Y_SIZE        96
                             6654 ; 590  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6655 ; 591  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6656 ; 592  |#endif
                             6657 ; 593  |
                             6658 ; 594  |#ifdef SSD1332_LCD
                             6659 ; 595  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6660 ; 596  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN
                             6661 ; 597  |#define SPLASH_SCREEN_X_SIZE        96
                             6662 ; 598  |#define SPLASH_SCREEN_Y_SIZE        64
                             6663 ; 599  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6664 ; 600  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6665 ; 601  |#endif
                             6666 ; 602  |
                             6667 ; 603  |#ifdef S6B33B0A_LCD
                             6668 ; 604  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6669 ; 605  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN + 16
                             6670 ; 606  |#define SPLASH_SCREEN_X_SIZE        80
                             6671 ; 607  |#define SPLASH_SCREEN_Y_SIZE        48
                             6672 ; 608  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6673 ; 609  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6674 ; 610  |#endif
                             6675 ; 611  |
                             6676 ; 612  |#ifdef SED15XX_LCD
                             6677 ; 613  |#define SPLASH_SCREEN_X_POS         LEFT_OF_SCREEN
                             6678 ; 614  |#define SPLASH_SCREEN_Y_POS         TOP_OF_SCREEN 
                             6679 ; 615  |#define SPLASH_SCREEN_X_SIZE        128
                             6680 ; 616  |#define SPLASH_SCREEN_Y_SIZE        64    
                             6681 ; 617  |#define LOCKED_SCREEN_X_POS         LEFT_OF_SCREEN+8
                             6682 ; 618  |#define LOCKED_SCREEN_Y_POS         TOP_OF_SCREEN+24
                             6683 ; 619  |#endif
                             6684 ; 620  |
                             6685 ; 621  |// FM tuner
                             6686 ; 622  |#define FM_TUNER_FREQUENCY_X_POS    LEFT_OF_SCREEN+30
                             6687 ; 623  |#define FM_TUNER_FREQUENCY_Y_POS    TOP_OF_SCREEN+24
                             6688 ; 624  |#define FM_TUNER_FREQUENCY_X_SIZE   CHAR_SIZE_X*10
                             6689 ; 625  |#define FM_TUNER_FREQUENCY_Y_SIZE   CHAR_SIZE_Y
                             6690 ; 626  |#define FM_TUNER_FREQUENCY_DOT_X_POS    FM_TUNER_FREQUENCY_X_POS+CHAR_SIZE_X*3
                             6691 ; 627  |#define FM_TUNER_FRAC_FREQUENCY_X_POS    FM_TUNER_FREQUENCY_DOT_X_POS+3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6692 ; 628  |
                             6693 ; 629  |#define FM_TUNER_PRESET_X_POS       LEFT_OF_SCREEN+30
                             6694 ; 630  |#define FM_TUNER_PRESET_Y_POS       TOP_OF_SCREEN+34
                             6695 ; 631  |#define FM_TUNER_PRESET_X_SIZE      CHAR_SIZE_X*5
                             6696 ; 632  |#define FM_TUNER_PRESET_Y_SIZE      CHAR_SIZE_Y
                             6697 ; 633  |
                             6698 ; 634  |#define FM_TUNER_PILOT_X_POS       LEFT_OF_SCREEN+30
                             6699 ; 635  |#define FM_TUNER_PILOT_Y_POS       TOP_OF_SCREEN+44
                             6700 ; 636  |
                             6701 ; 637  |// About menu
                             6702 ; 638  |#define ABOUT_TITLE_X_POS           LEFT_OF_SCREEN+0
                             6703 ; 639  |#define ABOUT_TITLE_Y_POS           TOP_OF_SCREEN+LCD_SIZE_ROW
                             6704 ; 640  |// starting row -- use offsets for the rest
                             6705 ; 641  |#define ABOUT_LINE_LABEL_X_POS      LEFT_OF_SCREEN+0
                             6706 ; 642  |#define ABOUT_LINE_LABEL_Y_POS      ABOUT_TITLE_Y_POS+(2*LCD_SIZE_ROW)
                             6707 ; 643  |
                             6708 ; 644  |#ifdef PLAYER_STRESS
                             6709 ; 645  |#define STRESS_TEST_X_POS       LEFT_OF_SCREEN
                             6710 ; 646  |#define STRESS_TEST_Y_POS       TOP_OF_SCREEN+40
                             6711 ; 647  |#define STRESS_TEST_X_SIZE      SCREEN_WIDTH
                             6712 ; 648  |#define STRESS_TEST_Y_SIZE      8
                             6713 ; 649  |#endif
                             6714 ; 650  |
                             6715 ; 651  |
                             6716 ; 652  |// Delete Menu
                             6717 ; 653  |#define WARNING_MSG_LINE1_X         LEFT_OF_SCREEN
                             6718 ; 654  |#define WARNING_MSG_LINE1_Y         (LCD_FIRST_ROW_NUM+1)*LCD_SIZE_ROW
                             6719 ; 655  |#define WARNING_MSG_LINE2_X         LEFT_OF_SCREEN
                             6720 ; 656  |#define WARNING_MSG_LINE2_Y         (LCD_FIRST_ROW_NUM+2)*LCD_SIZE_ROW
                             6721 ; 657  |#define WARNING_MSG_FILE_X          LEFT_OF_SCREEN
                             6722 ; 658  |#define WARNING_MSG_FILE_Y          (LCD_FIRST_ROW_NUM+4)*LCD_SIZE_ROW
                             6723 ; 659  |#define WARNING_MSG_YES_X           LEFT_OF_SCREEN
                             6724 ; 660  |#define WARNING_MSG_YES_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6725 ; 661  |#define DELETE_FAIL_MSG_X           LEFT_OF_SCREEN
                             6726 ; 662  |#define DELETE_FAIL_MSG_Y           (LCD_FIRST_ROW_NUM+6)*LCD_SIZE_ROW
                             6727 ; 663  |
                             6728 ; 664  |_reentrant void DisplayClear (void);
                             6729 ; 665  |_reentrant void DisplayLowBattery (void);
                             6730 ; 666  |
                             6731 ; 667  |_reentrant int DisplayContrast( int bDisplay, int iIgnored1, void *pPtr);
                             6732 ; 668  |
                             6733 ; 669  |_reentrant int DisplayBacklight( int bDisplay, int iIgnored1, void *pPtr);
                             6734 ; 670  |#ifdef WOW
                             6735 ; 671  |_reentrant int DisplayBar( int bDisplay, int step, void *pPtr);
                             6736 ; 672  |#endif
                             6737 ; 673  |extern _X BOOL g_bSongStringScroll;
                             6738 ; 674  |extern _X INT  g_iSongStringOffset;
                             6739 ; 675  |extern _X INT  g_iSongStringLength;
                             6740 ; 676  |
                             6741 ; 677  |extern _X BOOL g_bArtistStringScroll;
                             6742 ; 678  |extern _X INT  g_iArtistStringOffset;
                             6743 ; 679  |extern _X INT  g_iArtistStringLength;
                             6744 ; 680  |
                             6745 ; 681  |
                             6746 ; 682  |extern _X BOOL g_bAlbumStringScroll;
                             6747 ; 683  |extern _X INT  g_iAlbumStringOffset;
                             6748 ; 684  |extern _X INT  g_iAlbumStringLength;
                             6749 ; 685  |extern int g_iVolume_Control_Mode;
                             6750 ; 686  |extern int g_iAB_Control_Mode;
                             6751 ; 687  |
                             6752 ; 688  |
                             6753 ; 689  |#endif //_DISPLAY_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6754 
                             6756 
                             6757 ; 5    |
                             6758 ; 6    |//Display lists is very LCD centric
                             6759 ; 7    |
                             6760 ; 8    |
                             6761 ; 9    |//Each menu item contains which page it belongs on, the resource required to display this,
                                   and the
                             6762 ; 10   |//X and Y position.  All Items on the same page as the selected item will be displayed usi
                                  ng the
                             6763 ; 11   |//coordinates listed below.
                             6764 ; 12   |struct MenuItem
                             6765 ; 13   |{
                             6766 ; 14   |    int m_iPage;
                             6767 ; 15   |    int m_iResource;
                             6768 ; 16   |    int m_ixPos;
                             6769 ; 17   |    int m_iyPos;
                             6770 ; 18   |};
                             6771 ; 19   |
                             6772 ; 20   |//The PagedListStructure contains the message used to display items in the list, 
                             6773 ; 21   |//the message used to display the selected item in the list, the number of items
                             6774 ; 22   |//in the list, and a pointer to an array of these items.
                             6775 ; 23   |struct PagedListStructure
                             6776 ; 24   |{
                             6777 ; 25   |    int m_iNormalDisplayMsg;
                             6778 ; 26   |    int m_iSelectedDisplayMsg;
                             6779 ; 27   |    int m_iItems;
                             6780 ; 28   |    struct MenuItem *m_pItems;
                             6781 ; 29   |};
                             6782 ; 30   |
                             6783 ; 31   |_reentrant int DisplayPagedList(int iSelectedItem, int iTitle, void*ListStructure);
                             6784 ; 32   |
                             6785 ; 33   |// iTitle values
                             6786 ; 34   |#define BITMAP_SETTINGS_TITLE_NUM 1 //sdk2.1 for displaying title bitmap SETTINGS. 
                             6787 ; 35   |#define BITMAP_ERASE_TITLE_NUM    2 //sdk2.1 for displaying title bitmap ERASE. 
                             6788 ; 36   |#define BITMAP_TEST_TITLE_NUM    3 
                             6789 ; 37   |#define BITMAP_RECORD_SETTINGS_TITLE_NUM 4
                             6790 ; 38   |
                             6791 ; 39   |#ifdef JPEG_APP
                             6792 ; 40   |#define BITMAP_JPEG_DISPLAY_TITLE_NUM 5 //sdk2.1 for displaying title bitmap JPEG DISPLAY.
                                   
                             6793 ; 41   |#endif
                             6794 ; 42   |
                             6795 ; 43   |#endif
                             6796 
                             6798 
                             6799 ; 16   |#include "eqmenu.h"
                             6800 
                             6802 
                             6803 ; 1    |#ifndef _EQ_H
                             6804 ; 2    |#define _EQ_H
                             6805 ; 3    |
                             6806 ; 4    |#include "types.h"
                             6807 
                             6809 
                             6810 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6811 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6812 ; 3    |//
                             6813 ; 4    |// Filename: types.h
                             6814 ; 5    |// Description: Standard data types
                             6815 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6816 ; 7    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6817 ; 8    |#ifndef _TYPES_H
                             6818 ; 9    |#define _TYPES_H
                             6819 ; 10   |
                             6820 ; 11   |// TODO:  move this outta here!
                             6821 ; 12   |#if !defined(NOERROR)
                             6822 ; 13   |#define NOERROR 0
                             6823 ; 14   |#define SUCCESS 0
                             6824 ; 15   |#endif 
                             6825 ; 16   |#if !defined(SUCCESS)
                             6826 ; 17   |#define SUCCESS  0
                             6827 ; 18   |#endif
                             6828 ; 19   |#if !defined(ERROR)
                             6829 ; 20   |#define ERROR   -1
                             6830 ; 21   |#endif
                             6831 ; 22   |#if !defined(FALSE)
                             6832 ; 23   |#define FALSE 0
                             6833 ; 24   |#endif
                             6834 ; 25   |#if !defined(TRUE)
                             6835 ; 26   |#define TRUE  1
                             6836 ; 27   |#endif
                             6837 ; 28   |
                             6838 ; 29   |#if !defined(NULL)
                             6839 ; 30   |#define NULL 0
                             6840 ; 31   |#endif
                             6841 ; 32   |
                             6842 ; 33   |#define MAX_INT     0x7FFFFF
                             6843 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6844 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6845 ; 36   |#define MAX_ULONG   (-1) 
                             6846 ; 37   |
                             6847 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6848 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6849 ; 40   |
                             6850 ; 41   |
                             6851 ; 42   |#define BYTE    unsigned char       // btVarName
                             6852 ; 43   |#define CHAR    signed char         // cVarName
                             6853 ; 44   |#define USHORT  unsigned short      // usVarName
                             6854 ; 45   |#define SHORT   unsigned short      // sVarName
                             6855 ; 46   |#define WORD    unsigned int        // wVarName
                             6856 ; 47   |#define INT     signed int          // iVarName
                             6857 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6858 ; 49   |#define LONG    signed long         // lVarName
                             6859 ; 50   |#define BOOL    unsigned int        // bVarName
                             6860 ; 51   |#define FRACT   _fract              // frVarName
                             6861 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6862 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6863 ; 54   |#define FLOAT   float               // fVarName
                             6864 ; 55   |#define DBL     double              // dVarName
                             6865 ; 56   |#define ENUM    enum                // eVarName
                             6866 ; 57   |#define CMX     _complex            // cmxVarName
                             6867 ; 58   |typedef WORD UCS3;                   // 
                             6868 ; 59   |
                             6869 ; 60   |#define UINT16  unsigned short
                             6870 ; 61   |#define UINT8   unsigned char   
                             6871 ; 62   |#define UINT32  unsigned long
                             6872 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6873 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6874 ; 65   |#define WCHAR   UINT16
                             6875 ; 66   |
                             6876 ; 67   |//UINT128 is 16 bytes or 6 words
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6877 ; 68   |typedef struct UINT128_3500 {   
                             6878 ; 69   |    int val[6];     
                             6879 ; 70   |} UINT128_3500;
                             6880 ; 71   |
                             6881 ; 72   |#define UINT128   UINT128_3500
                             6882 ; 73   |
                             6883 ; 74   |// Little endian word packed byte strings:   
                             6884 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6885 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6886 ; 77   |// Little endian word packed byte strings:   
                             6887 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6888 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6889 ; 80   |
                             6890 ; 81   |// Declare Memory Spaces To Use When Coding
                             6891 ; 82   |// A. Sector Buffers
                             6892 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6893 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6894 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6895 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6896 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6897 ; 88   |// B. Media DDI Memory
                             6898 ; 89   |#define MEDIA_DDI_MEM _Y
                             6899 ; 90   |
                             6900 ; 91   |
                             6901 ; 92   |
                             6902 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6903 ; 94   |// Examples of circular pointers:
                             6904 ; 95   |//    INT CIRC cpiVarName
                             6905 ; 96   |//    DWORD CIRC cpdwVarName
                             6906 ; 97   |
                             6907 ; 98   |#define RETCODE INT                 // rcVarName
                             6908 ; 99   |
                             6909 ; 100  |// generic bitfield structure
                             6910 ; 101  |struct Bitfield {
                             6911 ; 102  |    unsigned int B0  :1;
                             6912 ; 103  |    unsigned int B1  :1;
                             6913 ; 104  |    unsigned int B2  :1;
                             6914 ; 105  |    unsigned int B3  :1;
                             6915 ; 106  |    unsigned int B4  :1;
                             6916 ; 107  |    unsigned int B5  :1;
                             6917 ; 108  |    unsigned int B6  :1;
                             6918 ; 109  |    unsigned int B7  :1;
                             6919 ; 110  |    unsigned int B8  :1;
                             6920 ; 111  |    unsigned int B9  :1;
                             6921 ; 112  |    unsigned int B10 :1;
                             6922 ; 113  |    unsigned int B11 :1;
                             6923 ; 114  |    unsigned int B12 :1;
                             6924 ; 115  |    unsigned int B13 :1;
                             6925 ; 116  |    unsigned int B14 :1;
                             6926 ; 117  |    unsigned int B15 :1;
                             6927 ; 118  |    unsigned int B16 :1;
                             6928 ; 119  |    unsigned int B17 :1;
                             6929 ; 120  |    unsigned int B18 :1;
                             6930 ; 121  |    unsigned int B19 :1;
                             6931 ; 122  |    unsigned int B20 :1;
                             6932 ; 123  |    unsigned int B21 :1;
                             6933 ; 124  |    unsigned int B22 :1;
                             6934 ; 125  |    unsigned int B23 :1;
                             6935 ; 126  |};
                             6936 ; 127  |
                             6937 ; 128  |union BitInt {
                             6938 ; 129  |        struct Bitfield B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6939 ; 130  |        int        I;
                             6940 ; 131  |};
                             6941 ; 132  |
                             6942 ; 133  |#define MAX_MSG_LENGTH 10
                             6943 ; 134  |struct CMessage
                             6944 ; 135  |{
                             6945 ; 136  |        unsigned int m_uLength;
                             6946 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6947 ; 138  |};
                             6948 ; 139  |
                             6949 ; 140  |typedef struct {
                             6950 ; 141  |    WORD m_wLength;
                             6951 ; 142  |    WORD m_wMessage;
                             6952 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6953 ; 144  |} Message;
                             6954 ; 145  |
                             6955 ; 146  |struct MessageQueueDescriptor
                             6956 ; 147  |{
                             6957 ; 148  |        int *m_pBase;
                             6958 ; 149  |        int m_iModulo;
                             6959 ; 150  |        int m_iSize;
                             6960 ; 151  |        int *m_pHead;
                             6961 ; 152  |        int *m_pTail;
                             6962 ; 153  |};
                             6963 ; 154  |
                             6964 ; 155  |struct ModuleEntry
                             6965 ; 156  |{
                             6966 ; 157  |    int m_iSignaledEventMask;
                             6967 ; 158  |    int m_iWaitEventMask;
                             6968 ; 159  |    int m_iResourceOfCode;
                             6969 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6970 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             6971 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6972 ; 163  |    int m_uTimeOutHigh;
                             6973 ; 164  |    int m_uTimeOutLow;
                             6974 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6975 ; 166  |};
                             6976 ; 167  |
                             6977 ; 168  |union WaitMask{
                             6978 ; 169  |    struct B{
                             6979 ; 170  |        unsigned int m_bNone     :1;
                             6980 ; 171  |        unsigned int m_bMessage  :1;
                             6981 ; 172  |        unsigned int m_bTimer    :1;
                             6982 ; 173  |        unsigned int m_bButton   :1;
                             6983 ; 174  |    } B;
                             6984 ; 175  |    int I;
                             6985 ; 176  |} ;
                             6986 ; 177  |
                             6987 ; 178  |
                             6988 ; 179  |struct Button {
                             6989 ; 180  |        WORD wButtonEvent;
                             6990 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6991 ; 182  |};
                             6992 ; 183  |
                             6993 ; 184  |struct Message {
                             6994 ; 185  |        WORD wMsgLength;
                             6995 ; 186  |        WORD wMsgCommand;
                             6996 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6997 ; 188  |};
                             6998 ; 189  |
                             6999 ; 190  |union EventTypes {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7000 ; 191  |        struct CMessage msg;
                             7001 ; 192  |        struct Button Button ;
                             7002 ; 193  |        struct Message Message;
                             7003 ; 194  |};
                             7004 ; 195  |
                             7005 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7006 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7007 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7008 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7009 ; 200  |
                             7010 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7011 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7012 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7013 ; 204  |
                             7014 ; 205  |#if DEBUG
                             7015 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7016 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7017 ; 208  |#else 
                             7018 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7019 ; 210  |#define DebugBuildAssert(x)    
                             7020 ; 211  |#endif
                             7021 ; 212  |
                             7022 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7023 ; 214  |//  #pragma asm
                             7024 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7025 ; 216  |//  #pragma endasm
                             7026 ; 217  |
                             7027 ; 218  |
                             7028 ; 219  |#ifdef COLOR_262K
                             7029 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7030 ; 221  |#elif defined(COLOR_65K)
                             7031 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             7032 ; 223  |#else
                             7033 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7034 ; 225  |#endif
                             7035 ; 226  |    
                             7036 ; 227  |#endif // #ifndef _TYPES_H
                             7037 
                             7039 
                             7040 ; 5    |
                             7041 ; 6    |// Order of EQ selection
                             7042 ; 7    |// must match order of struct MenuItem defined in Eqmenu.c
                             7043 ; 8    |#define FIRST_EQ    0
                             7044 ; 9    |#define EQ_NORMAL   0
                             7045 ; 10   |#define EQ_ROCK     1
                             7046 ; 11   |#define EQ_JAZZ     2   
                             7047 ; 12   |#define EQ_CLASSIC  3   
                             7048 ; 13   |#define EQ_POP      4
                             7049 ; 14   |#define EQ_CUSTOM   5
                             7050 ; 15   |#define LAST_EQ     5
                             7051 ; 16   |#define EQMENU_COUNT   LAST_EQ+1
                             7052 ; 17   |
                             7053 ; 18   |// Band Pass Filter Center Frequencies  (SDK2.520)
                             7054 ; 19   |#define CENTER_FREQ1  80    // 80 Hz  (see 'CenterFreq' defined in Geqmem.asm)
                             7055 ; 20   |#define CENTER_FREQ2  250
                             7056 ; 21   |#define CENTER_FREQ3  1000
                             7057 ; 22   |#define CENTER_FREQ4  4000
                             7058 ; 23   |#define CENTER_FREQ5  12000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7059 ; 24   |
                             7060 ; 25   |#define EQ_BAND_FIRST 0
                             7061 ; 26   |#define EQ_BAND1      0
                             7062 ; 27   |#define EQ_BAND2      1
                             7063 ; 28   |#define EQ_BAND3      2
                             7064 ; 29   |#define EQ_BAND4      3
                             7065 ; 30   |#define EQ_BAND5      4
                             7066 ; 31   |#define EQ_BAND_LAST  4
                             7067 ; 32   |#define NUM_EQ_BANDS EQ_BAND_LAST + 1
                             7068 ; 33   |
                             7069 ; 34   |#define EQ_ROCK_GAIN1    18
                             7070 ; 35   |#define EQ_ROCK_GAIN2   -4
                             7071 ; 36   |#define EQ_ROCK_GAIN3   -2
                             7072 ; 37   |#define EQ_ROCK_GAIN4    14
                             7073 ; 38   |#define EQ_ROCK_GAIN5    14
                             7074 ; 39   |
                             7075 ; 40   |#define EQ_JAZZ_GAIN1    12
                             7076 ; 41   |#define EQ_JAZZ_GAIN2   -2
                             7077 ; 42   |#define EQ_JAZZ_GAIN3   -4
                             7078 ; 43   |#define EQ_JAZZ_GAIN4    0
                             7079 ; 44   |#define EQ_JAZZ_GAIN5    8
                             7080 ; 45   |
                             7081 ; 46   |#define EQ_CLASS_GAIN1   0
                             7082 ; 47   |#define EQ_CLASS_GAIN2   0
                             7083 ; 48   |#define EQ_CLASS_GAIN3   0
                             7084 ; 49   |#define EQ_CLASS_GAIN4  -7
                             7085 ; 50   |#define EQ_CLASS_GAIN5  -10
                             7086 ; 51   |
                             7087 ; 52   |#define EQ_POP_GAIN1    -4
                             7088 ; 53   |#define EQ_POP_GAIN2     8
                             7089 ; 54   |#define EQ_POP_GAIN3     8
                             7090 ; 55   |#define EQ_POP_GAIN4    -2
                             7091 ; 56   |#define EQ_POP_GAIN5     0
                             7092 ; 57   |
                             7093 ; 58   |#define EQ_NORM_GAIN1    0
                             7094 ; 59   |#define EQ_NORM_GAIN2    0
                             7095 ; 60   |#define EQ_NORM_GAIN3    0
                             7096 ; 61   |#define EQ_NORM_GAIN4    0
                             7097 ; 62   |#define EQ_NORM_GAIN5    0
                             7098 ; 63   |
                             7099 ; 64   |// dB gain level:  number of 0.5dB units
                             7100 ; 65   |#define EQ_MAX_GAIN      28    // +14dB  (see 'dBTable' defined in Geqmem.asm)
                             7101 ; 66   |#define EQ_ZERO_GAIN     0     //  0 dB  (see 'ZerodBPoint')
                             7102 ; 67   |#define EQ_MIN_GAIN     -28    // -14dB  (divide gain by 2 to get dB)
                             7103 ; 68   |
                             7104 ; 69   |extern INT g_iEqSetting;
                             7105 ; 70   |
                             7106 ; 71   |#endif
                             7107 
                             7109 
                             7110 ; 17   |#include "mainmenu.h"
                             7111 
                             7113 
                             7114 ; 1    |#ifndef _MAIN_MENU_H
                             7115 ; 2    |#define _MAIN_MENU_H
                             7116 ; 3    |
                             7117 ; 4    |// menus in mainmenu
                             7118 ; 5    |#define MAINMENU_FIRST  0
                             7119 ; 6    |
                             7120 ; 7    |enum _MENU_ID
                             7121 ; 8    |{
                             7122 ; 9    |        MENU_MUSIC = 0,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7123 ; 10   |#ifdef JPEG_APP
                             7124 ; 11   |        MENU_JPEG_DISPLAY,
                             7125 ; 12   |#endif
                             7126 ; 13   |#ifdef MOTION_VIDEO
                             7127 ; 14   |        MENU_MVIDEO,
                             7128 ; 15   |#endif
                             7129 ; 16   |        MENU_VOICE,
                             7130 ; 17   |
                             7131 ; 18   |/*This version does not use PL5
                             7132 ; 19   |#ifdef USE_PLAYLIST5
                             7133 ; 20   |#ifndef REMOVE_FM
                             7134 ; 21   |    MENU_FMREC,
                             7135 ; 22   |#endif
                             7136 ; 23   |    MENU_LINEIN,
                             7137 ; 24   |#ifdef AUDIBLE
                             7138 ; 25   |        MENU_AUDIBLE,
                             7139 ; 26   |#endif
                             7140 ; 27   |#endif  // #ifdef USE_PLAYLIST5
                             7141 ; 28   |*/
                             7142 ; 29   |
                             7143 ; 30   |#ifdef USE_PLAYLIST3
                             7144 ; 31   |#ifdef AUDIBLE
                             7145 ; 32   |        MENU_AUDIBLE,
                             7146 ; 33   |#endif
                             7147 ; 34   |#endif
                             7148 ; 35   |#ifndef REMOVE_FM
                             7149 ; 36   |        MENU_FMTUNER,
                             7150 ; 37   |#endif
                             7151 ; 38   |        MENU_RECORD,
                             7152 ; 39   |        MENU_SETTINGS,
                             7153 ; 40   |        MENU_SHUTDOWN,
                             7154 ; 41   |        MENU_TIME_DATE,
                             7155 ; 42   |        MENU_AB,
                             7156 ; 43   |        MENU_DELETE,
                             7157 ; 44   |        MENU_ABOUT,
                             7158 ; 45   |#ifdef SPECTRUM_ANAL
                             7159 ; 46   |        MENU_SPECTROGRAM,
                             7160 ; 47   |#endif
                             7161 ; 48   |        MENU_MAIN_EXIT
                             7162 ; 49   |};
                             7163 ; 50   |
                             7164 ; 51   |
                             7165 ; 52   |#define MAINMENU_LAST    MENU_MAIN_EXIT
                             7166 ; 53   |#define MAINMENU_COUNT  (MAINMENU_LAST+1)
                             7167 ; 54   |
                             7168 ; 55   |#ifdef S6B33B0A_LCD
                             7169 ; 56   |#define MAINMENU_PAGE1_COUNT    MAINMENU_COUNT
                             7170 ; 57   |#endif
                             7171 ; 58   |
                             7172 ; 59   |#ifdef SED15XX_LCD
                             7173 ; 60   |#define MAINMENU_PAGE1_COUNT    4
                             7174 ; 61   |#endif
                             7175 ; 62   |
                             7176 ; 63   |
                             7177 ; 64   |// Media error constants
                             7178 ; 65   |// Each device gets 5 bits for error codes, in the global g_FSinitErrorCode.
                             7179 ; 66   |// If there is no external device, the internal device uses bits 0-4.  If there
                             7180 ; 67   |// is an external device, the internal device is shifted up 5 bits (to bits 5-9),
                             7181 ; 68   |// and the external device uses bits 0-4.  (More than one external device is not
                             7182 ; 69   |// supported in the current code.)
                             7183 ; 70   |
                             7184 ; 71   |#define ERROR_ON_INTERNAL_MEDIA         0x0F
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7185 ; 72   |#define INTERNAL_MEDIA_NOT_SIGMATEL_FORMAT      0x010
                             7186 ; 73   |
                             7187 ; 74   |#define ERROR_ON_EXTERNAL_MEDIA                         0x0E
                             7188 ; 75   |#define EXTERNAL_MEDIA_NOT_SIGMATEL_FORMAT      0x010
                             7189 ; 76   |
                             7190 ; 77   |#define ERROR_ON_INTERNAL_MEDIA_SHIFTED         0x01E0
                             7191 ; 78   |#define INTERNAL_MEDIA_NOT_SIGMATEL_FORMAT_SHIFTED      0x020
                             7192 ; 79   |
                             7193 ; 80   |#ifdef USE_PLAYLIST3
                             7194 ; 81   |extern INT  g_current_index;
                             7195 ; 82   |extern INT  g_current_size;
                             7196 ; 83   |extern _packed BYTE g_strMusicLib_FilePath[];
                             7197 ; 84   |extern _packed BYTE g_strMusicLib_SecTable_FilePath[];
                             7198 ; 85   |extern INT  g_iFileHandle;
                             7199 ; 86   |extern INT  g_ML_save_on_exit;
                             7200 ; 87   |extern WORD g_rsrc_TimeDate_CodeBank;
                             7201 ; 88   |#endif  // USE_PLAYLIST3
                             7202 ; 89   |
                             7203 ; 90   |////////////////////////////////////////////////////////////////////////////////
                             7204 ; 91   |//  Prototypes
                             7205 ; 92   |////////////////////////////////////////////////////////////////////////////////
                             7206 ; 93   |#ifdef USE_PLAYLIST3
                             7207 ; 94   |void _reentrant ML_building_engine_init(void);
                             7208 ; 95   |#endif  // USE_PLAYLIST3
                             7209 ; 96   |
                             7210 ; 97   |#endif
                             7211 
                             7213 
                             7214 ; 18   |#include "settingsmenu.h"
                             7215 
                             7217 
                             7218 ; 1    |#ifndef _SETTINGS_MENU_H
                             7219 ; 2    |#define _SETTINGS_MENU_H
                             7220 ; 3    |
                             7221 ; 4    |// menus in settings menu
                             7222 ; 5    |// defines order of selection
                             7223 ; 6    |#define SETTINGSMENU_FIRST  0
                             7224 ; 7    |
                             7225 ; 8    |enum _MENUSETTING_ID
                             7226 ; 9    |{
                             7227 ; 10   |MENU_EQ = 0,
                             7228 ; 11   |MENU_PLAYMODE,
                             7229 ; 12   |MENU_CONTRAST,
                             7230 ; 13   |MENU_PWRSAVINGS,
                             7231 ; 14   |#ifdef BACKLIGHT
                             7232 ; 15   |MENU_BACKLIGHT,
                             7233 ; 16   |#endif
                             7234 ; 17   |MENU_RECORD_SETTINGS,
                             7235 ; 18   |MENU_SET_TIME,
                             7236 ; 19   |MENU_SET_DATE,
                             7237 ; 20   | #ifdef WOW
                             7238 ; 21   |MENU_WOW,
                             7239 ; 22   | #endif
                             7240 ; 23   |MENU_SETTINGS_EXIT
                             7241 ; 24   |#ifndef BACKLIGHT
                             7242 ; 25   |,MENU_BACKLIGHT
                             7243 ; 26   |#endif
                             7244 ; 27   |};
                             7245 ; 28   |
                             7246 ; 29   |#define SETTINGSMENU_LAST   MENU_SETTINGS_EXIT
                             7247 ; 30   |#define SETTINGSMENU_COUNT  (SETTINGSMENU_LAST+1)
                             7248 ; 31   |        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7249 ; 32   |#ifdef S6B33B0A_LCD
                             7250 ; 33   |#define SETTINGSMENU_PAGE1_COUNT        SETTINGSMENU_COUNT
                             7251 ; 34   |#endif
                             7252 ; 35   |
                             7253 ; 36   |#ifdef SED15XX_LCD
                             7254 ; 37   |#define SETTINGSMENU_PAGE1_COUNT        4
                             7255 ; 38   |#endif
                             7256 ; 39   |
                             7257 ; 40   |#endif
                             7258 
                             7260 
                             7261 ; 19   |#include "const.h"
                             7262 
                             7264 
                             7265 ; 1    |//******************************************************************************
                             7266 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                             7267 ; 3    |//
                             7268 ; 4    |//  Use these values to reduce memory
                             7269 ; 5    |//;******************************************************************************
                             7270 ; 6    |
                             7271 ; 7    |#ifndef _CONST_H
                             7272 ; 8    |#define _CONST_H
                             7273 ; 9    |
                             7274 ; 10   |
                             7275 ; 11   |extern unsigned int _Y const_zero;    
                             7276 ; 12   |extern unsigned int _Y const_one;     
                             7277 ; 13   |extern unsigned int _Y const_two;     
                             7278 ; 14   |extern unsigned int _Y const_three;   
                             7279 ; 15   |extern unsigned int _Y const_four;    
                             7280 ; 16   |extern unsigned int _Y const_eight;   
                             7281 ; 17   |extern unsigned int _Y const_12;   
                             7282 ; 18   |extern unsigned int _Y const_16;   
                             7283 ; 19   |extern unsigned int _Y const_24;      
                             7284 ; 20   |extern unsigned int _Y const_32;     
                             7285 ; 21   |extern unsigned int _Y const_minus_1; 
                             7286 ; 22   |extern unsigned int _Y fract_one;     
                             7287 ; 23   |
                             7288 ; 24   |#endif
                             7289 
                             7291 
                             7292 ; 20   |#include "hwequ.h"
                             7293 
                             7295 
                             7296 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7297 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                             7298 ; 3    |//  File        : hwequ.inc
                             7299 ; 4    |//  Description : STMP Hardware Constants
                             7300 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7301 ; 6    |
                             7302 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                             7303 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                             7304 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                             7305 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                             7306 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                             7307 ; 12   |
                             7308 ; 13   |#if (!defined(HWEQU_INC))
                             7309 ; 14   |#define HWEQU_INC 1
                             7310 ; 15   |
                             7311 ; 16   |#include "types.h"
                             7312 
                             7314 
                             7315 ; 1    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7316 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7317 ; 3    |//
                             7318 ; 4    |// Filename: types.h
                             7319 ; 5    |// Description: Standard data types
                             7320 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7321 ; 7    |
                             7322 ; 8    |#ifndef _TYPES_H
                             7323 ; 9    |#define _TYPES_H
                             7324 ; 10   |
                             7325 ; 11   |// TODO:  move this outta here!
                             7326 ; 12   |#if !defined(NOERROR)
                             7327 ; 13   |#define NOERROR 0
                             7328 ; 14   |#define SUCCESS 0
                             7329 ; 15   |#endif 
                             7330 ; 16   |#if !defined(SUCCESS)
                             7331 ; 17   |#define SUCCESS  0
                             7332 ; 18   |#endif
                             7333 ; 19   |#if !defined(ERROR)
                             7334 ; 20   |#define ERROR   -1
                             7335 ; 21   |#endif
                             7336 ; 22   |#if !defined(FALSE)
                             7337 ; 23   |#define FALSE 0
                             7338 ; 24   |#endif
                             7339 ; 25   |#if !defined(TRUE)
                             7340 ; 26   |#define TRUE  1
                             7341 ; 27   |#endif
                             7342 ; 28   |
                             7343 ; 29   |#if !defined(NULL)
                             7344 ; 30   |#define NULL 0
                             7345 ; 31   |#endif
                             7346 ; 32   |
                             7347 ; 33   |#define MAX_INT     0x7FFFFF
                             7348 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7349 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7350 ; 36   |#define MAX_ULONG   (-1) 
                             7351 ; 37   |
                             7352 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7353 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7354 ; 40   |
                             7355 ; 41   |
                             7356 ; 42   |#define BYTE    unsigned char       // btVarName
                             7357 ; 43   |#define CHAR    signed char         // cVarName
                             7358 ; 44   |#define USHORT  unsigned short      // usVarName
                             7359 ; 45   |#define SHORT   unsigned short      // sVarName
                             7360 ; 46   |#define WORD    unsigned int        // wVarName
                             7361 ; 47   |#define INT     signed int          // iVarName
                             7362 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7363 ; 49   |#define LONG    signed long         // lVarName
                             7364 ; 50   |#define BOOL    unsigned int        // bVarName
                             7365 ; 51   |#define FRACT   _fract              // frVarName
                             7366 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7367 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7368 ; 54   |#define FLOAT   float               // fVarName
                             7369 ; 55   |#define DBL     double              // dVarName
                             7370 ; 56   |#define ENUM    enum                // eVarName
                             7371 ; 57   |#define CMX     _complex            // cmxVarName
                             7372 ; 58   |typedef WORD UCS3;                   // 
                             7373 ; 59   |
                             7374 ; 60   |#define UINT16  unsigned short
                             7375 ; 61   |#define UINT8   unsigned char   
                             7376 ; 62   |#define UINT32  unsigned long
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7377 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7378 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7379 ; 65   |#define WCHAR   UINT16
                             7380 ; 66   |
                             7381 ; 67   |//UINT128 is 16 bytes or 6 words
                             7382 ; 68   |typedef struct UINT128_3500 {   
                             7383 ; 69   |    int val[6];     
                             7384 ; 70   |} UINT128_3500;
                             7385 ; 71   |
                             7386 ; 72   |#define UINT128   UINT128_3500
                             7387 ; 73   |
                             7388 ; 74   |// Little endian word packed byte strings:   
                             7389 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7390 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7391 ; 77   |// Little endian word packed byte strings:   
                             7392 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7393 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7394 ; 80   |
                             7395 ; 81   |// Declare Memory Spaces To Use When Coding
                             7396 ; 82   |// A. Sector Buffers
                             7397 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7398 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7399 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7400 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7401 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7402 ; 88   |// B. Media DDI Memory
                             7403 ; 89   |#define MEDIA_DDI_MEM _Y
                             7404 ; 90   |
                             7405 ; 91   |
                             7406 ; 92   |
                             7407 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7408 ; 94   |// Examples of circular pointers:
                             7409 ; 95   |//    INT CIRC cpiVarName
                             7410 ; 96   |//    DWORD CIRC cpdwVarName
                             7411 ; 97   |
                             7412 ; 98   |#define RETCODE INT                 // rcVarName
                             7413 ; 99   |
                             7414 ; 100  |// generic bitfield structure
                             7415 ; 101  |struct Bitfield {
                             7416 ; 102  |    unsigned int B0  :1;
                             7417 ; 103  |    unsigned int B1  :1;
                             7418 ; 104  |    unsigned int B2  :1;
                             7419 ; 105  |    unsigned int B3  :1;
                             7420 ; 106  |    unsigned int B4  :1;
                             7421 ; 107  |    unsigned int B5  :1;
                             7422 ; 108  |    unsigned int B6  :1;
                             7423 ; 109  |    unsigned int B7  :1;
                             7424 ; 110  |    unsigned int B8  :1;
                             7425 ; 111  |    unsigned int B9  :1;
                             7426 ; 112  |    unsigned int B10 :1;
                             7427 ; 113  |    unsigned int B11 :1;
                             7428 ; 114  |    unsigned int B12 :1;
                             7429 ; 115  |    unsigned int B13 :1;
                             7430 ; 116  |    unsigned int B14 :1;
                             7431 ; 117  |    unsigned int B15 :1;
                             7432 ; 118  |    unsigned int B16 :1;
                             7433 ; 119  |    unsigned int B17 :1;
                             7434 ; 120  |    unsigned int B18 :1;
                             7435 ; 121  |    unsigned int B19 :1;
                             7436 ; 122  |    unsigned int B20 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7437 ; 123  |    unsigned int B21 :1;
                             7438 ; 124  |    unsigned int B22 :1;
                             7439 ; 125  |    unsigned int B23 :1;
                             7440 ; 126  |};
                             7441 ; 127  |
                             7442 ; 128  |union BitInt {
                             7443 ; 129  |        struct Bitfield B;
                             7444 ; 130  |        int        I;
                             7445 ; 131  |};
                             7446 ; 132  |
                             7447 ; 133  |#define MAX_MSG_LENGTH 10
                             7448 ; 134  |struct CMessage
                             7449 ; 135  |{
                             7450 ; 136  |        unsigned int m_uLength;
                             7451 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7452 ; 138  |};
                             7453 ; 139  |
                             7454 ; 140  |typedef struct {
                             7455 ; 141  |    WORD m_wLength;
                             7456 ; 142  |    WORD m_wMessage;
                             7457 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7458 ; 144  |} Message;
                             7459 ; 145  |
                             7460 ; 146  |struct MessageQueueDescriptor
                             7461 ; 147  |{
                             7462 ; 148  |        int *m_pBase;
                             7463 ; 149  |        int m_iModulo;
                             7464 ; 150  |        int m_iSize;
                             7465 ; 151  |        int *m_pHead;
                             7466 ; 152  |        int *m_pTail;
                             7467 ; 153  |};
                             7468 ; 154  |
                             7469 ; 155  |struct ModuleEntry
                             7470 ; 156  |{
                             7471 ; 157  |    int m_iSignaledEventMask;
                             7472 ; 158  |    int m_iWaitEventMask;
                             7473 ; 159  |    int m_iResourceOfCode;
                             7474 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7475 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7476 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7477 ; 163  |    int m_uTimeOutHigh;
                             7478 ; 164  |    int m_uTimeOutLow;
                             7479 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7480 ; 166  |};
                             7481 ; 167  |
                             7482 ; 168  |union WaitMask{
                             7483 ; 169  |    struct B{
                             7484 ; 170  |        unsigned int m_bNone     :1;
                             7485 ; 171  |        unsigned int m_bMessage  :1;
                             7486 ; 172  |        unsigned int m_bTimer    :1;
                             7487 ; 173  |        unsigned int m_bButton   :1;
                             7488 ; 174  |    } B;
                             7489 ; 175  |    int I;
                             7490 ; 176  |} ;
                             7491 ; 177  |
                             7492 ; 178  |
                             7493 ; 179  |struct Button {
                             7494 ; 180  |        WORD wButtonEvent;
                             7495 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7496 ; 182  |};
                             7497 ; 183  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7498 ; 184  |struct Message {
                             7499 ; 185  |        WORD wMsgLength;
                             7500 ; 186  |        WORD wMsgCommand;
                             7501 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7502 ; 188  |};
                             7503 ; 189  |
                             7504 ; 190  |union EventTypes {
                             7505 ; 191  |        struct CMessage msg;
                             7506 ; 192  |        struct Button Button ;
                             7507 ; 193  |        struct Message Message;
                             7508 ; 194  |};
                             7509 ; 195  |
                             7510 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7511 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7512 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7513 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7514 ; 200  |
                             7515 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7516 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7517 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7518 ; 204  |
                             7519 ; 205  |#if DEBUG
                             7520 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7521 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7522 ; 208  |#else 
                             7523 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7524 ; 210  |#define DebugBuildAssert(x)    
                             7525 ; 211  |#endif
                             7526 ; 212  |
                             7527 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7528 ; 214  |//  #pragma asm
                             7529 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7530 ; 216  |//  #pragma endasm
                             7531 ; 217  |
                             7532 ; 218  |
                             7533 ; 219  |#ifdef COLOR_262K
                             7534 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7535 ; 221  |#elif defined(COLOR_65K)
                             7536 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             7537 ; 223  |#else
                             7538 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7539 ; 225  |#endif
                             7540 ; 226  |    
                             7541 ; 227  |#endif // #ifndef _TYPES_H
                             7542 
                             7544 
                             7545 ; 17   |#include "regsclkctrl.h"
                             7546 
                             7548 
                             7549 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                             7550 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                             7551 ; 3    |
                             7552 ; 4    |
                             7553 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7554 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                             7555 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                             7556 ; 8    |#define HW_CCR_LTC_BITPOS 1
                             7557 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7558 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                             7559 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                             7560 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                             7561 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                             7562 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                             7563 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                             7564 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                             7565 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                             7566 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                             7567 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                             7568 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                             7569 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                             7570 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                             7571 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                             7572 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                             7573 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                             7574 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                             7575 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                             7576 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                             7577 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                             7578 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                             7579 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                             7580 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                             7581 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                             7582 ; 34   |
                             7583 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                             7584 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                             7585 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                             7586 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                             7587 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                             7588 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                             7589 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                             7590 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                             7591 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                             7592 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                             7593 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                             7594 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                             7595 ; 47   |
                             7596 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                             7597 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                             7598 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                             7599 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                             7600 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                             7601 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                             7602 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                             7603 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                             7604 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                             7605 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                             7606 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                             7607 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                             7608 ; 60   |
                             7609 ; 61   |typedef union               
                             7610 ; 62   |{
                             7611 ; 63   |    struct
                             7612 ; 64   |    {
                             7613 ; 65   |        int CKRST       :1; // Clock Reset
                             7614 ; 66   |        int LTC         :1;
                             7615 ; 67   |        int PLLEN       :1;
                             7616 ; 68   |        int XTLEN       :1;
                             7617 ; 69   |        int FLB         :1;
                             7618 ; 70   |        unsigned ADIV   :3;
                             7619 ; 71   |        int CKSRC       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7620 ; 72   |        unsigned DDIV   :3;
                             7621 ; 73   |        unsigned PDIV   :5;
                             7622 ; 74   |        int PWDN        :1;
                             7623 ; 75   |        int ACKEN       :1;
                             7624 ; 76   |        int LOCK        :1;
                             7625 ; 77   |        unsigned ADIV1  :3;
                             7626 ; 78   |        unsigned DDIV_MSB:1;
                             7627 ; 79   |    } B;
                             7628 ; 80   |
                             7629 ; 81   |    int I;
                             7630 ; 82   |    unsigned int U;
                             7631 ; 83   |
                             7632 ; 84   |} ccr_type;
                             7633 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                             7634 ; 86   |
                             7635 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             7636 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                             7637 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                             7638 ; 90   |#define HW_RCR_SRST_BITPOS 4
                             7639 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                             7640 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                             7641 ; 93   |#define HW_RCR_NMI_BITPOS 10
                             7642 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                             7643 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                             7644 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                             7645 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                             7646 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                             7647 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                             7648 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                             7649 ; 101  |
                             7650 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                             7651 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                             7652 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                             7653 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                             7654 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                             7655 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                             7656 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                             7657 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                             7658 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                             7659 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                             7660 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                             7661 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                             7662 ; 114  |
                             7663 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                             7664 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                             7665 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                             7666 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                             7667 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                             7668 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                             7669 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                             7670 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                             7671 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                             7672 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                             7673 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                             7674 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                             7675 ; 127  |
                             7676 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                             7677 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                             7678 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                             7679 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                             7680 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                             7681 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7682 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                             7683 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                             7684 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                             7685 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                             7686 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                             7687 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                             7688 ; 140  |
                             7689 ; 141  |typedef union               
                             7690 ; 142  |{
                             7691 ; 143  |    struct
                             7692 ; 144  |   {
                             7693 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                             7694 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                             7695 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                             7696 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                             7697 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                             7698 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                             7699 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                             7700 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                             7701 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                             7702 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                             7703 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                             7704 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                             7705 ; 157  |    } B;
                             7706 ; 158  |
                             7707 ; 159  |    int I;
                             7708 ; 160  |    unsigned int U;
                             7709 ; 161  |
                             7710 ; 162  |} rcr_type;
                             7711 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                             7712 ; 164  |
                             7713 ; 165  |
                             7714 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             7715 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                             7716 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                             7717 ; 169  |
                             7718 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                             7719 ; 171  |
                             7720 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                             7721 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                             7722 ; 174  |typedef union               
                             7723 ; 175  |{
                             7724 ; 176  |    struct
                             7725 ; 177  |   {
                             7726 ; 178  |        int LOW;
                             7727 ; 179  |    } B;
                             7728 ; 180  |
                             7729 ; 181  |    int I;
                             7730 ; 182  |    unsigned int U;
                             7731 ; 183  |
                             7732 ; 184  |} dclkcntl_type;
                             7733 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                             7734 ; 186  |
                             7735 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             7736 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                             7737 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                             7738 ; 190  |
                             7739 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                             7740 ; 192  |
                             7741 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                             7742 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7743 ; 195  |typedef union               
                             7744 ; 196  |{
                             7745 ; 197  |    struct
                             7746 ; 198  |   {
                             7747 ; 199  |        int HIGH;
                             7748 ; 200  |    } B;
                             7749 ; 201  |
                             7750 ; 202  |    int I;
                             7751 ; 203  |    unsigned int U;
                             7752 ; 204  |
                             7753 ; 205  |} dclkcntu_type;
                             7754 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                             7755 ; 207  |
                             7756 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             7757 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             7758 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                             7759 ; 211  |
                             7760 ; 212  |// Clock count register (lower)
                             7761 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                             7762 ; 214  |// Clock count register (upper)
                             7763 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                             7764 ; 216  |// Cycle steal count register
                             7765 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                             7766 ; 218  |
                             7767 ; 219  |#endif
                             7768 ; 220  |
                             7769 ; 221  |
                             7770 
                             7772 
                             7773 ; 18   |#include "regscore.h"
                             7774 
                             7776 
                             7777 ; 1    |#if !(defined(__REGS_STATUS_INC))
                             7778 ; 2    |#define __REGS_STATUS_INC 1
                             7779 ; 3    |
                             7780 ; 4    |
                             7781 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7782 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                             7783 ; 7    |#define HW_OMR_MA_BITPOS 0
                             7784 ; 8    |#define HW_OMR_MB_BITPOS 1
                             7785 ; 9    |#define HW_OMR_DE_BITPOS 2
                             7786 ; 10   |#define HW_OMR_YE_BITPOS 3
                             7787 ; 11   |#define HW_OMR_MC_BITPOS 4
                             7788 ; 12   |#define HW_OMR_SD_BITPOS 6
                             7789 ; 13   |
                             7790 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                             7791 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                             7792 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                             7793 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                             7794 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                             7795 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                             7796 ; 20   |
                             7797 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                             7798 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                             7799 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                             7800 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                             7801 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                             7802 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                             7803 ; 27   |
                             7804 ; 28   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7805 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                             7806 ; 30   |//  Status Register (HW_SR) Bit Positions
                             7807 ; 31   |#define HW_SR_C_BITPOS 0
                             7808 ; 32   |#define HW_SR_O_BITPOS 1
                             7809 ; 33   |#define HW_SR_Z_BITPOS 2
                             7810 ; 34   |#define HW_SR_N_BITPOS 3
                             7811 ; 35   |#define HW_SR_U_BITPOS 4
                             7812 ; 36   |#define HW_SR_E_BITPOS 5
                             7813 ; 37   |#define HW_SR_L_BITPOS 6
                             7814 ; 38   |#define HW_SR_IM_BITPOS 8
                             7815 ; 39   |#define HW_SR_IM0_BITPOS 8
                             7816 ; 40   |#define HW_SR_IM1_BITPOS 9
                             7817 ; 41   |#define HW_SR_SM_BITPOS 10
                             7818 ; 42   |#define HW_SR_SM0_BITPOS 10
                             7819 ; 43   |#define HW_SR_SM1_BITPOS 11
                             7820 ; 44   |#define HW_SR_TM_BITPOS 13
                             7821 ; 45   |#define HW_SR_DP_BITPOS 14
                             7822 ; 46   |#define HW_SR_LOOP_BITPOS 15
                             7823 ; 47   |
                             7824 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                             7825 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                             7826 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                             7827 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                             7828 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                             7829 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                             7830 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                             7831 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                             7832 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                             7833 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                             7834 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                             7835 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                             7836 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                             7837 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                             7838 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                             7839 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                             7840 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                             7841 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                             7842 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                             7843 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                             7844 ; 68   |
                             7845 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                             7846 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                             7847 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                             7848 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                             7849 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                             7850 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                             7851 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                             7852 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                             7853 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                             7854 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                             7855 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                             7856 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                             7857 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                             7858 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                             7859 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                             7860 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                             7861 ; 85   |
                             7862 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                             7863 ; 87   |//  RAM/ROM Config Register Bit Positions
                             7864 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                             7865 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                             7866 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7867 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                             7868 ; 92   |#endif
                             7869 ; 93   |
                             7870 ; 94   |
                             7871 
                             7873 
                             7874 ; 19   |#include "regscodec.h"
                             7875 
                             7877 
                             7878 ; 1    |#if !(defined(regscodecinc))
                             7879 ; 2    |#define regscodecinc 1
                             7880 ; 3    |
                             7881 ; 4    |
                             7882 ; 5    |
                             7883 ; 6    |#include "types.h"
                             7884 
                             7886 
                             7887 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7888 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7889 ; 3    |//
                             7890 ; 4    |// Filename: types.h
                             7891 ; 5    |// Description: Standard data types
                             7892 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7893 ; 7    |
                             7894 ; 8    |#ifndef _TYPES_H
                             7895 ; 9    |#define _TYPES_H
                             7896 ; 10   |
                             7897 ; 11   |// TODO:  move this outta here!
                             7898 ; 12   |#if !defined(NOERROR)
                             7899 ; 13   |#define NOERROR 0
                             7900 ; 14   |#define SUCCESS 0
                             7901 ; 15   |#endif 
                             7902 ; 16   |#if !defined(SUCCESS)
                             7903 ; 17   |#define SUCCESS  0
                             7904 ; 18   |#endif
                             7905 ; 19   |#if !defined(ERROR)
                             7906 ; 20   |#define ERROR   -1
                             7907 ; 21   |#endif
                             7908 ; 22   |#if !defined(FALSE)
                             7909 ; 23   |#define FALSE 0
                             7910 ; 24   |#endif
                             7911 ; 25   |#if !defined(TRUE)
                             7912 ; 26   |#define TRUE  1
                             7913 ; 27   |#endif
                             7914 ; 28   |
                             7915 ; 29   |#if !defined(NULL)
                             7916 ; 30   |#define NULL 0
                             7917 ; 31   |#endif
                             7918 ; 32   |
                             7919 ; 33   |#define MAX_INT     0x7FFFFF
                             7920 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7921 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7922 ; 36   |#define MAX_ULONG   (-1) 
                             7923 ; 37   |
                             7924 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7925 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7926 ; 40   |
                             7927 ; 41   |
                             7928 ; 42   |#define BYTE    unsigned char       // btVarName
                             7929 ; 43   |#define CHAR    signed char         // cVarName
                             7930 ; 44   |#define USHORT  unsigned short      // usVarName
                             7931 ; 45   |#define SHORT   unsigned short      // sVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7932 ; 46   |#define WORD    unsigned int        // wVarName
                             7933 ; 47   |#define INT     signed int          // iVarName
                             7934 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7935 ; 49   |#define LONG    signed long         // lVarName
                             7936 ; 50   |#define BOOL    unsigned int        // bVarName
                             7937 ; 51   |#define FRACT   _fract              // frVarName
                             7938 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7939 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7940 ; 54   |#define FLOAT   float               // fVarName
                             7941 ; 55   |#define DBL     double              // dVarName
                             7942 ; 56   |#define ENUM    enum                // eVarName
                             7943 ; 57   |#define CMX     _complex            // cmxVarName
                             7944 ; 58   |typedef WORD UCS3;                   // 
                             7945 ; 59   |
                             7946 ; 60   |#define UINT16  unsigned short
                             7947 ; 61   |#define UINT8   unsigned char   
                             7948 ; 62   |#define UINT32  unsigned long
                             7949 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7950 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7951 ; 65   |#define WCHAR   UINT16
                             7952 ; 66   |
                             7953 ; 67   |//UINT128 is 16 bytes or 6 words
                             7954 ; 68   |typedef struct UINT128_3500 {   
                             7955 ; 69   |    int val[6];     
                             7956 ; 70   |} UINT128_3500;
                             7957 ; 71   |
                             7958 ; 72   |#define UINT128   UINT128_3500
                             7959 ; 73   |
                             7960 ; 74   |// Little endian word packed byte strings:   
                             7961 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7962 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7963 ; 77   |// Little endian word packed byte strings:   
                             7964 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7965 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7966 ; 80   |
                             7967 ; 81   |// Declare Memory Spaces To Use When Coding
                             7968 ; 82   |// A. Sector Buffers
                             7969 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7970 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7971 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7972 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7973 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7974 ; 88   |// B. Media DDI Memory
                             7975 ; 89   |#define MEDIA_DDI_MEM _Y
                             7976 ; 90   |
                             7977 ; 91   |
                             7978 ; 92   |
                             7979 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7980 ; 94   |// Examples of circular pointers:
                             7981 ; 95   |//    INT CIRC cpiVarName
                             7982 ; 96   |//    DWORD CIRC cpdwVarName
                             7983 ; 97   |
                             7984 ; 98   |#define RETCODE INT                 // rcVarName
                             7985 ; 99   |
                             7986 ; 100  |// generic bitfield structure
                             7987 ; 101  |struct Bitfield {
                             7988 ; 102  |    unsigned int B0  :1;
                             7989 ; 103  |    unsigned int B1  :1;
                             7990 ; 104  |    unsigned int B2  :1;
                             7991 ; 105  |    unsigned int B3  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7992 ; 106  |    unsigned int B4  :1;
                             7993 ; 107  |    unsigned int B5  :1;
                             7994 ; 108  |    unsigned int B6  :1;
                             7995 ; 109  |    unsigned int B7  :1;
                             7996 ; 110  |    unsigned int B8  :1;
                             7997 ; 111  |    unsigned int B9  :1;
                             7998 ; 112  |    unsigned int B10 :1;
                             7999 ; 113  |    unsigned int B11 :1;
                             8000 ; 114  |    unsigned int B12 :1;
                             8001 ; 115  |    unsigned int B13 :1;
                             8002 ; 116  |    unsigned int B14 :1;
                             8003 ; 117  |    unsigned int B15 :1;
                             8004 ; 118  |    unsigned int B16 :1;
                             8005 ; 119  |    unsigned int B17 :1;
                             8006 ; 120  |    unsigned int B18 :1;
                             8007 ; 121  |    unsigned int B19 :1;
                             8008 ; 122  |    unsigned int B20 :1;
                             8009 ; 123  |    unsigned int B21 :1;
                             8010 ; 124  |    unsigned int B22 :1;
                             8011 ; 125  |    unsigned int B23 :1;
                             8012 ; 126  |};
                             8013 ; 127  |
                             8014 ; 128  |union BitInt {
                             8015 ; 129  |        struct Bitfield B;
                             8016 ; 130  |        int        I;
                             8017 ; 131  |};
                             8018 ; 132  |
                             8019 ; 133  |#define MAX_MSG_LENGTH 10
                             8020 ; 134  |struct CMessage
                             8021 ; 135  |{
                             8022 ; 136  |        unsigned int m_uLength;
                             8023 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8024 ; 138  |};
                             8025 ; 139  |
                             8026 ; 140  |typedef struct {
                             8027 ; 141  |    WORD m_wLength;
                             8028 ; 142  |    WORD m_wMessage;
                             8029 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8030 ; 144  |} Message;
                             8031 ; 145  |
                             8032 ; 146  |struct MessageQueueDescriptor
                             8033 ; 147  |{
                             8034 ; 148  |        int *m_pBase;
                             8035 ; 149  |        int m_iModulo;
                             8036 ; 150  |        int m_iSize;
                             8037 ; 151  |        int *m_pHead;
                             8038 ; 152  |        int *m_pTail;
                             8039 ; 153  |};
                             8040 ; 154  |
                             8041 ; 155  |struct ModuleEntry
                             8042 ; 156  |{
                             8043 ; 157  |    int m_iSignaledEventMask;
                             8044 ; 158  |    int m_iWaitEventMask;
                             8045 ; 159  |    int m_iResourceOfCode;
                             8046 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8047 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8048 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8049 ; 163  |    int m_uTimeOutHigh;
                             8050 ; 164  |    int m_uTimeOutLow;
                             8051 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8052 ; 166  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8053 ; 167  |
                             8054 ; 168  |union WaitMask{
                             8055 ; 169  |    struct B{
                             8056 ; 170  |        unsigned int m_bNone     :1;
                             8057 ; 171  |        unsigned int m_bMessage  :1;
                             8058 ; 172  |        unsigned int m_bTimer    :1;
                             8059 ; 173  |        unsigned int m_bButton   :1;
                             8060 ; 174  |    } B;
                             8061 ; 175  |    int I;
                             8062 ; 176  |} ;
                             8063 ; 177  |
                             8064 ; 178  |
                             8065 ; 179  |struct Button {
                             8066 ; 180  |        WORD wButtonEvent;
                             8067 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8068 ; 182  |};
                             8069 ; 183  |
                             8070 ; 184  |struct Message {
                             8071 ; 185  |        WORD wMsgLength;
                             8072 ; 186  |        WORD wMsgCommand;
                             8073 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8074 ; 188  |};
                             8075 ; 189  |
                             8076 ; 190  |union EventTypes {
                             8077 ; 191  |        struct CMessage msg;
                             8078 ; 192  |        struct Button Button ;
                             8079 ; 193  |        struct Message Message;
                             8080 ; 194  |};
                             8081 ; 195  |
                             8082 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8083 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8084 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8085 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8086 ; 200  |
                             8087 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8088 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8089 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8090 ; 204  |
                             8091 ; 205  |#if DEBUG
                             8092 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8093 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8094 ; 208  |#else 
                             8095 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8096 ; 210  |#define DebugBuildAssert(x)    
                             8097 ; 211  |#endif
                             8098 ; 212  |
                             8099 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8100 ; 214  |//  #pragma asm
                             8101 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8102 ; 216  |//  #pragma endasm
                             8103 ; 217  |
                             8104 ; 218  |
                             8105 ; 219  |#ifdef COLOR_262K
                             8106 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8107 ; 221  |#elif defined(COLOR_65K)
                             8108 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8109 ; 223  |#else
                             8110 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8111 ; 225  |#endif
                             8112 ; 226  |    
                             8113 ; 227  |#endif // #ifndef _TYPES_H
                             8114 
                             8116 
                             8117 ; 7    |
                             8118 ; 8    |
                             8119 ; 9    |
                             8120 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8121 ; 11   |
                             8122 ; 12   |//   SYSTEM STMP Registers 
                             8123 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             8124 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8125 ; 15   |
                             8126 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             8127 ; 17   |
                             8128 ; 18   |
                             8129 ; 19   |
                             8130 ; 20   |
                             8131 ; 21   |
                             8132 ; 22   |
                             8133 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             8134 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             8135 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             8136 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             8137 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             8138 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             8139 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             8140 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             8141 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             8142 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             8143 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             8144 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             8145 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             8146 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             8147 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             8148 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             8149 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             8150 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             8151 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             8152 ; 42   |
                             8153 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             8154 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             8155 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             8156 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             8157 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             8158 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             8159 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             8160 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             8161 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             8162 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             8163 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             8164 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             8165 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             8166 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             8167 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             8168 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             8169 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             8170 ; 60   |
                             8171 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             8172 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             8173 ; 63   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8174 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8175 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8176 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8177 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8178 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8179 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8180 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8181 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             8182 ; 72   |
                             8183 ; 73   |#if defined(CAPLESS_HP)
                             8184 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             8185 ; 75   |#else 
                             8186 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             8187 ; 77   |#endif
                             8188 ; 78   |
                             8189 ; 79   |// Headphone control register
                             8190 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             8191 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             8192 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             8193 ; 83   |typedef union               
                             8194 ; 84   |{
                             8195 ; 85   |    struct {
                             8196 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             8197 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             8198 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             8199 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             8200 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             8201 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             8202 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             8203 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             8204 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             8205 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             8206 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             8207 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             8208 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             8209 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             8210 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             8211 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             8212 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             8213 ; 103  |    } B;
                             8214 ; 104  |    int I;
                             8215 ; 105  |    unsigned int U;
                             8216 ; 106  |} hpctrl_type;
                             8217 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             8218 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             8219 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             8220 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             8221 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             8222 ; 112  |
                             8223 ; 113  |
                             8224 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             8225 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             8226 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             8227 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             8228 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             8229 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             8230 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             8231 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             8232 ; 122  |
                             8233 ; 123  |
                             8234 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             8235 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8236 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             8237 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             8238 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             8239 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             8240 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             8241 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             8242 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             8243 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             8244 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             8245 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             8246 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             8247 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             8248 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             8249 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             8250 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             8251 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             8252 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             8253 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             8254 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             8255 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             8256 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             8257 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             8258 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             8259 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             8260 ; 150  |
                             8261 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             8262 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             8263 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             8264 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             8265 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             8266 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             8267 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             8268 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             8269 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             8270 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             8271 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             8272 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             8273 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             8274 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             8275 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             8276 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             8277 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             8278 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             8279 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             8280 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             8281 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             8282 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             8283 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             8284 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             8285 ; 175  |
                             8286 ; 176  |
                             8287 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             8288 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             8289 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             8290 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             8291 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             8292 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             8293 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             8294 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             8295 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             8296 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             8297 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8298 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             8299 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             8300 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             8301 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             8302 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             8303 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             8304 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             8305 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             8306 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             8307 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             8308 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             8309 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             8310 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             8311 ; 201  |
                             8312 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             8313 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             8314 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             8315 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             8316 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             8317 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             8318 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             8319 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             8320 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             8321 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             8322 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             8323 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             8324 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             8325 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             8326 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             8327 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             8328 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             8329 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             8330 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             8331 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             8332 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             8333 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             8334 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             8335 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             8336 ; 226  |
                             8337 ; 227  |typedef union               
                             8338 ; 228  |{
                             8339 ; 229  |    struct {
                             8340 ; 230  |        int INV_USB_CLK            : 1;
                             8341 ; 231  |        int USB_DFF_BYPASS         : 1;
                             8342 ; 232  |        int HOLD_GND               : 1;
                             8343 ; 233  |        int ACKI                   : 1;
                             8344 ; 234  |        int ASD2X                  : 1;
                             8345 ; 235  |        int PCPCU                  : 1;
                             8346 ; 236  |        int PCPCD                  : 1;
                             8347 ; 237  |        int DCKI                   : 1;
                             8348 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             8349 ; 239  |        int PSRN                   : 1;
                             8350 ; 240  |        int FX2                    : 1;
                             8351 ; 241  |        int VCOS                   : 1;
                             8352 ; 242  |        int XBCO                   : 1;
                             8353 ; 243  |        int XBGC                   : 1;
                             8354 ; 244  |        int ADTHD                  : 1;
                             8355 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             8356 ; 246  |        int PWDADC                 : 1;
                             8357 ; 247  |        int MICBIAS1               : 1;
                             8358 ; 248  |        int EZD                    : 1;
                             8359 ; 249  |        int DZCDA                  : 1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8360 ; 250  |        int DZCFM                  : 1;
                             8361 ; 251  |        int DZCLI                  : 1;
                             8362 ; 252  |        int DZCMI                  : 1;
                             8363 ; 253  |        int DZCMA                  : 1;
                             8364 ; 254  |    } B;
                             8365 ; 255  |    int I;
                             8366 ; 256  |    unsigned int U;
                             8367 ; 257  |} mix_tbr_type;
                             8368 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             8369 ; 259  |
                             8370 ; 260  |
                             8371 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             8372 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             8373 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             8374 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             8375 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             8376 ; 266  |
                             8377 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             8378 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             8379 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             8380 ; 270  |
                             8381 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             8382 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             8383 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             8384 ; 274  |
                             8385 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             8386 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             8387 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             8388 ; 278  |
                             8389 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             8390 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             8391 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             8392 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             8393 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             8394 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             8395 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             8396 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             8397 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             8398 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             8399 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             8400 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             8401 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             8402 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             8403 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             8404 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             8405 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             8406 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             8407 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             8408 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             8409 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             8410 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             8411 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             8412 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             8413 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             8414 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             8415 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             8416 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             8417 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             8418 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             8419 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             8420 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             8421 ; 311  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8422 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             8423 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             8424 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             8425 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             8426 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             8427 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             8428 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             8429 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             8430 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             8431 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             8432 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             8433 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             8434 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             8435 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             8436 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             8437 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             8438 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             8439 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             8440 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             8441 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             8442 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             8443 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             8444 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             8445 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             8446 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             8447 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             8448 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             8449 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             8450 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             8451 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             8452 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             8453 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             8454 ; 344  |
                             8455 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             8456 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             8457 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             8458 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             8459 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             8460 ; 350  |
                             8461 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             8462 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             8463 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             8464 ; 354  |
                             8465 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             8466 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             8467 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             8468 ; 358  |
                             8469 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             8470 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             8471 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             8472 ; 362  |
                             8473 ; 363  |
                             8474 ; 364  |typedef union               
                             8475 ; 365  |{
                             8476 ; 366  |    struct
                             8477 ; 367  |    {
                             8478 ; 368  |        unsigned MR :5;
                             8479 ; 369  |        int         :3;
                             8480 ; 370  |        unsigned ML :5;
                             8481 ; 371  |        int         :2;
                             8482 ; 372  |        int MUTE    :1;
                             8483 ; 373  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8484 ; 374  |    int I;
                             8485 ; 375  |    unsigned int U;
                             8486 ; 376  |} mix_mastervr_type;
                             8487 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             8488 ; 378  |
                             8489 ; 379  |
                             8490 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             8491 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             8492 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             8493 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             8494 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             8495 ; 385  |
                             8496 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             8497 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             8498 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             8499 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             8500 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             8501 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             8502 ; 392  |
                             8503 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             8504 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             8505 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             8506 ; 396  |
                             8507 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             8508 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             8509 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             8510 ; 400  |
                             8511 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             8512 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             8513 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             8514 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             8515 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             8516 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             8517 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             8518 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             8519 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             8520 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             8521 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             8522 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             8523 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             8524 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             8525 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             8526 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             8527 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             8528 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             8529 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             8530 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             8531 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             8532 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             8533 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             8534 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             8535 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             8536 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             8537 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             8538 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             8539 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             8540 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             8541 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             8542 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             8543 ; 433  |
                             8544 ; 434  |typedef union               
                             8545 ; 435  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8546 ; 436  |    struct {
                             8547 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             8548 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             8549 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             8550 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             8551 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             8552 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             8553 ; 443  |    } B;
                             8554 ; 444  |    int I;
                             8555 ; 445  |    unsigned int U;
                             8556 ; 446  |} mix_micinvr_type;
                             8557 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             8558 ; 448  |
                             8559 ; 449  |
                             8560 ; 450  |
                             8561 ; 451  |
                             8562 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             8563 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             8564 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             8565 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             8566 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             8567 ; 457  |
                             8568 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             8569 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             8570 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             8571 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             8572 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             8573 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             8574 ; 464  |
                             8575 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             8576 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             8577 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             8578 ; 468  |
                             8579 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             8580 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             8581 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             8582 ; 472  |
                             8583 ; 473  |typedef union               
                             8584 ; 474  |{
                             8585 ; 475  |    struct {
                             8586 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             8587 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             8588 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             8589 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             8590 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             8591 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             8592 ; 482  |    } B;
                             8593 ; 483  |    int I;
                             8594 ; 484  |    unsigned int U;
                             8595 ; 485  |} mix_line1invr_type;
                             8596 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             8597 ; 487  |
                             8598 ; 488  |
                             8599 ; 489  |
                             8600 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             8601 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             8602 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             8603 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             8604 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             8605 ; 495  |
                             8606 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             8607 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8608 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             8609 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             8610 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             8611 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             8612 ; 502  |
                             8613 ; 503  |
                             8614 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             8615 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             8616 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             8617 ; 507  |
                             8618 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             8619 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             8620 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             8621 ; 511  |
                             8622 ; 512  |typedef union               
                             8623 ; 513  |{
                             8624 ; 514  |    struct {
                             8625 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             8626 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             8627 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             8628 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             8629 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             8630 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             8631 ; 521  |    } B;
                             8632 ; 522  |    int I;
                             8633 ; 523  |    unsigned int U;
                             8634 ; 524  |} mix_line2invr_type;
                             8635 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             8636 ; 526  |
                             8637 ; 527  |
                             8638 ; 528  |
                             8639 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             8640 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             8641 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             8642 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             8643 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             8644 ; 534  |
                             8645 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             8646 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             8647 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             8648 ; 538  |
                             8649 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             8650 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             8651 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             8652 ; 542  |
                             8653 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             8654 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             8655 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             8656 ; 546  |
                             8657 ; 547  |typedef union               
                             8658 ; 548  |{
                             8659 ; 549  |    struct {
                             8660 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             8661 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             8662 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             8663 ; 553  |    } B;
                             8664 ; 554  |    int I;
                             8665 ; 555  |    unsigned int U;
                             8666 ; 556  |} mix_dacinvr_type;
                             8667 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             8668 ; 558  |
                             8669 ; 559  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8670 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             8671 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             8672 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             8673 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             8674 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             8675 ; 565  |
                             8676 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             8677 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             8678 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             8679 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             8680 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             8681 ; 571  |
                             8682 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             8683 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             8684 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             8685 ; 575  |
                             8686 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             8687 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             8688 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             8689 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             8690 ; 580  |
                             8691 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             8692 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             8693 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             8694 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             8695 ; 585  |
                             8696 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             8697 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             8698 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             8699 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             8700 ; 590  |
                             8701 ; 591  |typedef union               
                             8702 ; 592  |{
                             8703 ; 593  |    struct {
                             8704 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             8705 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             8706 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             8707 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             8708 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             8709 ; 599  |    } B;
                             8710 ; 600  |    int I;
                             8711 ; 601  |    unsigned int U;
                             8712 ; 602  |} mix_recselr_type;
                             8713 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             8714 ; 604  |
                             8715 ; 605  |
                             8716 ; 606  |
                             8717 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             8718 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             8719 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             8720 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             8721 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             8722 ; 612  |
                             8723 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             8724 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             8725 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             8726 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             8727 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             8728 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             8729 ; 619  |
                             8730 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8731 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             8732 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             8733 ; 623  |
                             8734 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             8735 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             8736 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             8737 ; 627  |
                             8738 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             8739 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             8740 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             8741 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             8742 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             8743 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             8744 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             8745 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             8746 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             8747 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             8748 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             8749 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             8750 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             8751 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             8752 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             8753 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             8754 ; 644  |
                             8755 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             8756 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             8757 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             8758 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             8759 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             8760 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             8761 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             8762 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             8763 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             8764 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             8765 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             8766 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             8767 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             8768 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             8769 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             8770 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             8771 ; 661  |
                             8772 ; 662  |typedef union               
                             8773 ; 663  |{
                             8774 ; 664  |    struct {
                             8775 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             8776 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             8777 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             8778 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             8779 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             8780 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             8781 ; 671  |    } B;
                             8782 ; 672  |    int I;
                             8783 ; 673  |    unsigned int U;
                             8784 ; 674  |} mix_adcgainr_type;
                             8785 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             8786 ; 676  |
                             8787 ; 677  |
                             8788 ; 678  |
                             8789 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             8790 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             8791 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             8792 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8793 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             8794 ; 684  |
                             8795 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             8796 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             8797 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             8798 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             8799 ; 689  |
                             8800 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             8801 ; 691  |
                             8802 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             8803 ; 693  |
                             8804 ; 694  |typedef union               
                             8805 ; 695  |{
                             8806 ; 696  |    struct {
                             8807 ; 697  |                int                     : 9;
                             8808 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             8809 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             8810 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             8811 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             8812 ; 702  |    } B;
                             8813 ; 703  |    int I;
                             8814 ; 704  |    unsigned int U;
                             8815 ; 705  |} mix_pwrdnr_type;
                             8816 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             8817 ; 707  |
                             8818 ; 708  |
                             8819 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             8820 ; 710  |
                             8821 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             8822 ; 712  |
                             8823 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             8824 ; 714  |
                             8825 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             8826 ; 716  |
                             8827 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             8828 ; 718  |
                             8829 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             8830 ; 720  |
                             8831 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             8832 ; 722  |
                             8833 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             8834 ; 724  |
                             8835 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             8836 ; 726  |
                             8837 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             8838 ; 728  |
                             8839 ; 729  |
                             8840 ; 730  |
                             8841 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             8842 ; 732  |
                             8843 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             8844 ; 734  |
                             8845 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             8846 ; 736  |
                             8847 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             8848 ; 738  |
                             8849 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             8850 ; 740  |
                             8851 ; 741  |
                             8852 ; 742  |
                             8853 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8854 ; 744  |
                             8855 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             8856 ; 746  |
                             8857 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             8858 ; 748  |
                             8859 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             8860 ; 750  |
                             8861 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             8862 ; 752  |
                             8863 ; 753  |
                             8864 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             8865 ; 755  |
                             8866 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             8867 ; 757  |
                             8868 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             8869 ; 759  |
                             8870 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             8871 ; 761  |
                             8872 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             8873 ; 763  |
                             8874 ; 764  |
                             8875 ; 765  |typedef union               
                             8876 ; 766  |{
                             8877 ; 767  |    struct {
                             8878 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             8879 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             8880 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             8881 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             8882 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             8883 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             8884 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             8885 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             8886 ; 776  |    } B;
                             8887 ; 777  |    int I;
                             8888 ; 778  |    unsigned int U;
                             8889 ; 779  |} mix_test_type;
                             8890 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             8891 ; 781  |
                             8892 ; 782  |
                             8893 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             8894 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             8895 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             8896 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             8897 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             8898 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             8899 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             8900 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             8901 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             8902 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             8903 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             8904 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             8905 ; 795  |
                             8906 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             8907 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             8908 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             8909 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8910 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             8911 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             8912 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             8913 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             8914 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             8915 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             8916 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             8917 ; 807  |
                             8918 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             8919 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             8920 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             8921 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             8922 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
                             8923 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             8924 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
                             8925 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             8926 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             8927 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             8928 ; 818  |
                             8929 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             8930 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             8931 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             8932 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             8933 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             8934 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             8935 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             8936 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             8937 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             8938 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             8939 ; 829  |
                             8940 ; 830  |typedef union               
                             8941 ; 831  |{
                             8942 ; 832  |    struct {
                             8943 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             8944 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             8945 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             8946 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             8947 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             8948 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             8949 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             8950 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             8951 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             8952 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             8953 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             8954 ; 844  |    } B;
                             8955 ; 845  |    int I;
                             8956 ; 846  |    unsigned int U;
                             8957 ; 847  |} ref_ctrl_type;
                             8958 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             8959 ; 849  |
                             8960 ; 850  |
                             8961 ; 851  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8962 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             8963 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             8964 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             8965 ; 855  |//////  DAC Registers
                             8966 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             8967 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             8968 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             8969 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             8970 ; 860  |
                             8971 ; 861  |
                             8972 ; 862  |
                             8973 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             8974 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             8975 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             8976 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             8977 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             8978 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             8979 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             8980 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             8981 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             8982 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             8983 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             8984 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             8985 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             8986 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             8987 ; 877  |
                             8988 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             8989 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             8990 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             8991 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             8992 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             8993 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             8994 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             8995 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             8996 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             8997 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             8998 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             8999 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             9000 ; 890  |
                             9001 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             9002 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             9003 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             9004 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             9005 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             9006 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             9007 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             9008 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             9009 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             9010 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             9011 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             9012 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             9013 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             9014 ; 904  |
                             9015 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             9016 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             9017 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             9018 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             9019 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             9020 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             9021 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             9022 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             9023 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9024 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             9025 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             9026 ; 916  |
                             9027 ; 917  |
                             9028 ; 918  |typedef union               
                             9029 ; 919  |{
                             9030 ; 920  |    struct {
                             9031 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             9032 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             9033 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             9034 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             9035 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             9036 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             9037 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             9038 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             9039 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             9040 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             9041 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             9042 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             9043 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             9044 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             9045 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             9046 ; 936  |    } B;
                             9047 ; 937  |    int I;
                             9048 ; 938  |    unsigned int U;
                             9049 ; 939  |} dac_csr_type;
                             9050 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             9051 ; 941  |
                             9052 ; 942  |
                             9053 ; 943  |
                             9054 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             9055 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             9056 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             9057 ; 947  |
                             9058 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             9059 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             9060 ; 950  |
                             9061 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             9062 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             9063 ; 953  |
                             9064 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             9065 ; 955  |
                             9066 ; 956  |typedef union               
                             9067 ; 957  |{
                             9068 ; 958  |    struct {
                             9069 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             9070 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             9071 ; 961  |    } B;
                             9072 ; 962  |    int I;
                             9073 ; 963  |    unsigned int U;
                             9074 ; 964  |} dac_srr_type;
                             9075 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             9076 ; 966  |
                             9077 ; 967  |
                             9078 ; 968  |
                             9079 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             9080 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             9081 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             9082 ; 972  |
                             9083 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             9084 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             9085 ; 975  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9086 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             9087 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             9088 ; 978  |
                             9089 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             9090 ; 980  |
                             9091 ; 981  |typedef union               
                             9092 ; 982  |{
                             9093 ; 983  |    struct {
                             9094 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             9095 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             9096 ; 986  |    } B;
                             9097 ; 987  |    int I;
                             9098 ; 988  |    unsigned int U;
                             9099 ; 989  |} dac_wcr_type;
                             9100 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             9101 ; 991  |
                             9102 ; 992  |
                             9103 ; 993  |
                             9104 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             9105 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             9106 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             9107 ; 997  |
                             9108 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             9109 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             9110 ; 1000 |
                             9111 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             9112 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             9113 ; 1003 |
                             9114 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             9115 ; 1005 |
                             9116 ; 1006 |typedef union               
                             9117 ; 1007 |{
                             9118 ; 1008 |    struct {
                             9119 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             9120 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             9121 ; 1011 |    } B;
                             9122 ; 1012 |    int I;
                             9123 ; 1013 |    unsigned int U;
                             9124 ; 1014 |} dac_cpr_type;
                             9125 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             9126 ; 1016 |
                             9127 ; 1017 |
                             9128 ; 1018 |
                             9129 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             9130 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             9131 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             9132 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             9133 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             9134 ; 1024 |
                             9135 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             9136 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             9137 ; 1027 |
                             9138 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             9139 ; 1029 |
                             9140 ; 1030 |typedef union               
                             9141 ; 1031 |{
                             9142 ; 1032 |    struct {
                             9143 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             9144 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             9145 ; 1035 |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9146 ; 1036 |    int I;
                             9147 ; 1037 |    unsigned int U;
                             9148 ; 1038 |} dac_mr_type;
                             9149 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             9150 ; 1040 |
                             9151 ; 1041 |
                             9152 ; 1042 |
                             9153 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             9154 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             9155 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             9156 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             9157 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             9158 ; 1048 |
                             9159 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             9160 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             9161 ; 1051 |
                             9162 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             9163 ; 1053 |
                             9164 ; 1054 |typedef union               
                             9165 ; 1055 |{
                             9166 ; 1056 |    struct {
                             9167 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             9168 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             9169 ; 1059 |    } B;
                             9170 ; 1060 |    int I;
                             9171 ; 1061 |    unsigned int U;
                             9172 ; 1062 |} dac_bar_type;
                             9173 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             9174 ; 1064 |
                             9175 ; 1065 |
                             9176 ; 1066 |
                             9177 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             9178 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             9179 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             9180 ; 1070 |
                             9181 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             9182 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             9183 ; 1073 |
                             9184 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             9185 ; 1075 |
                             9186 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             9187 ; 1077 |
                             9188 ; 1078 |typedef union               
                             9189 ; 1079 |{
                             9190 ; 1080 |    struct {
                             9191 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             9192 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             9193 ; 1083 |    } B;
                             9194 ; 1084 |    int I;
                             9195 ; 1085 |    unsigned int U;
                             9196 ; 1086 |} dac_icr_type;
                             9197 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             9198 ; 1088 |
                             9199 ; 1089 |
                             9200 ; 1090 |
                             9201 ; 1091 |
                             9202 ; 1092 |
                             9203 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             9204 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             9205 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9206 ; 1096 |//////  ADC Registers
                             9207 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             9208 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             9209 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             9210 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             9211 ; 1101 |
                             9212 ; 1102 |
                             9213 ; 1103 |
                             9214 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             9215 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             9216 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             9217 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             9218 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             9219 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             9220 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             9221 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             9222 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             9223 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             9224 ; 1114 |
                             9225 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             9226 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             9227 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             9228 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             9229 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             9230 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             9231 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             9232 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             9233 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             9234 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             9235 ; 1125 |
                             9236 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             9237 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             9238 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             9239 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             9240 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             9241 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             9242 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
                             9243 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             9244 ; 1134 |
                             9245 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             9246 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             9247 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             9248 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             9249 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             9250 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             9251 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             9252 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             9253 ; 1143 |
                             9254 ; 1144 |typedef union               
                             9255 ; 1145 |{
                             9256 ; 1146 |    struct {
                             9257 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             9258 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             9259 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             9260 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             9261 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             9262 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             9263 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             9264 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             9265 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9266 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             9267 ; 1157 |    } B;
                             9268 ; 1158 |    int I;
                             9269 ; 1159 |    unsigned int U;
                             9270 ; 1160 |} adc_csr_type;
                             9271 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             9272 ; 1162 |
                             9273 ; 1163 |
                             9274 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             9275 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             9276 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             9277 ; 1167 |
                             9278 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             9279 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             9280 ; 1170 |
                             9281 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             9282 ; 1172 |
                             9283 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             9284 ; 1174 |
                             9285 ; 1175 |typedef union               
                             9286 ; 1176 |{
                             9287 ; 1177 |    struct {
                             9288 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             9289 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             9290 ; 1180 |    } B;
                             9291 ; 1181 |    int I;
                             9292 ; 1182 |    unsigned int U;
                             9293 ; 1183 |} adc_wcr_type;
                             9294 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             9295 ; 1185 |
                             9296 ; 1186 |
                             9297 ; 1187 |
                             9298 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             9299 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             9300 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             9301 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             9302 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             9303 ; 1193 |
                             9304 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             9305 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             9306 ; 1196 |
                             9307 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             9308 ; 1198 |
                             9309 ; 1199 |typedef union               
                             9310 ; 1200 |{
                             9311 ; 1201 |    struct {
                             9312 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             9313 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             9314 ; 1204 |    } B;
                             9315 ; 1205 |    int I;
                             9316 ; 1206 |    unsigned int U;
                             9317 ; 1207 |} adc_bar_type;
                             9318 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             9319 ; 1209 |
                             9320 ; 1210 |
                             9321 ; 1211 |
                             9322 ; 1212 |
                             9323 ; 1213 |
                             9324 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             9325 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9326 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             9327 ; 1217 |
                             9328 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             9329 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             9330 ; 1220 |
                             9331 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             9332 ; 1222 |
                             9333 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             9334 ; 1224 |
                             9335 ; 1225 |typedef union               
                             9336 ; 1226 |{
                             9337 ; 1227 |    struct {
                             9338 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             9339 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             9340 ; 1230 |    } B;
                             9341 ; 1231 |    int I;
                             9342 ; 1232 |    unsigned int U;
                             9343 ; 1233 |} adc_cpr_type;
                             9344 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             9345 ; 1235 |
                             9346 ; 1236 |
                             9347 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             9348 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             9349 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             9350 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             9351 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             9352 ; 1242 |
                             9353 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             9354 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             9355 ; 1245 |
                             9356 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             9357 ; 1247 |
                             9358 ; 1248 |typedef union               
                             9359 ; 1249 |{
                             9360 ; 1250 |    struct {
                             9361 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             9362 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             9363 ; 1253 |    } B;
                             9364 ; 1254 |    int I;
                             9365 ; 1255 |    unsigned int U;
                             9366 ; 1256 |} adc_mr_type;
                             9367 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             9368 ; 1258 |
                             9369 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             9370 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             9371 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             9372 ; 1262 |
                             9373 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             9374 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             9375 ; 1265 |
                             9376 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             9377 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             9378 ; 1268 |
                             9379 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             9380 ; 1270 |
                             9381 ; 1271 |typedef union               
                             9382 ; 1272 |{
                             9383 ; 1273 |    struct {
                             9384 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             9385 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             9386 ; 1276 |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9387 ; 1277 |    int I;
                             9388 ; 1278 |    unsigned int U;
                             9389 ; 1279 |} adc_srr_type;
                             9390 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             9391 ; 1281 |
                             9392 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             9393 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             9394 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             9395 ; 1285 |
                             9396 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             9397 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             9398 ; 1288 |
                             9399 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             9400 ; 1290 |
                             9401 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             9402 ; 1292 |
                             9403 ; 1293 |typedef union               
                             9404 ; 1294 |{
                             9405 ; 1295 |    struct {
                             9406 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             9407 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             9408 ; 1298 |    } B;
                             9409 ; 1299 |    int I;
                             9410 ; 1300 |    unsigned int U;
                             9411 ; 1301 |} adc_icr_type;
                             9412 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             9413 ; 1303 |
                             9414 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             9415 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             9416 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             9417 ; 1307 |
                             9418 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             9419 ; 1309 |
                             9420 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             9421 ; 1311 |
                             9422 ; 1312 |#endif
                             9423 ; 1313 |
                             9424 
                             9426 
                             9427 ; 20   |#include "regsdcdc.h"
                             9428 
                             9430 
                             9431 ; 1    |#if !(defined(regsdcdcinc))
                             9432 ; 2    |
                             9433 ; 3    |#define regssysteminc 1
                             9434 ; 4    |
                             9435 ; 5    |
                             9436 ; 6    |
                             9437 ; 7    |#include "types.h"
                             9438 
                             9440 
                             9441 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9442 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9443 ; 3    |//
                             9444 ; 4    |// Filename: types.h
                             9445 ; 5    |// Description: Standard data types
                             9446 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9447 ; 7    |
                             9448 ; 8    |#ifndef _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9449 ; 9    |#define _TYPES_H
                             9450 ; 10   |
                             9451 ; 11   |// TODO:  move this outta here!
                             9452 ; 12   |#if !defined(NOERROR)
                             9453 ; 13   |#define NOERROR 0
                             9454 ; 14   |#define SUCCESS 0
                             9455 ; 15   |#endif 
                             9456 ; 16   |#if !defined(SUCCESS)
                             9457 ; 17   |#define SUCCESS  0
                             9458 ; 18   |#endif
                             9459 ; 19   |#if !defined(ERROR)
                             9460 ; 20   |#define ERROR   -1
                             9461 ; 21   |#endif
                             9462 ; 22   |#if !defined(FALSE)
                             9463 ; 23   |#define FALSE 0
                             9464 ; 24   |#endif
                             9465 ; 25   |#if !defined(TRUE)
                             9466 ; 26   |#define TRUE  1
                             9467 ; 27   |#endif
                             9468 ; 28   |
                             9469 ; 29   |#if !defined(NULL)
                             9470 ; 30   |#define NULL 0
                             9471 ; 31   |#endif
                             9472 ; 32   |
                             9473 ; 33   |#define MAX_INT     0x7FFFFF
                             9474 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9475 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9476 ; 36   |#define MAX_ULONG   (-1) 
                             9477 ; 37   |
                             9478 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9479 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9480 ; 40   |
                             9481 ; 41   |
                             9482 ; 42   |#define BYTE    unsigned char       // btVarName
                             9483 ; 43   |#define CHAR    signed char         // cVarName
                             9484 ; 44   |#define USHORT  unsigned short      // usVarName
                             9485 ; 45   |#define SHORT   unsigned short      // sVarName
                             9486 ; 46   |#define WORD    unsigned int        // wVarName
                             9487 ; 47   |#define INT     signed int          // iVarName
                             9488 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9489 ; 49   |#define LONG    signed long         // lVarName
                             9490 ; 50   |#define BOOL    unsigned int        // bVarName
                             9491 ; 51   |#define FRACT   _fract              // frVarName
                             9492 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9493 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9494 ; 54   |#define FLOAT   float               // fVarName
                             9495 ; 55   |#define DBL     double              // dVarName
                             9496 ; 56   |#define ENUM    enum                // eVarName
                             9497 ; 57   |#define CMX     _complex            // cmxVarName
                             9498 ; 58   |typedef WORD UCS3;                   // 
                             9499 ; 59   |
                             9500 ; 60   |#define UINT16  unsigned short
                             9501 ; 61   |#define UINT8   unsigned char   
                             9502 ; 62   |#define UINT32  unsigned long
                             9503 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9504 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9505 ; 65   |#define WCHAR   UINT16
                             9506 ; 66   |
                             9507 ; 67   |//UINT128 is 16 bytes or 6 words
                             9508 ; 68   |typedef struct UINT128_3500 {   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9509 ; 69   |    int val[6];     
                             9510 ; 70   |} UINT128_3500;
                             9511 ; 71   |
                             9512 ; 72   |#define UINT128   UINT128_3500
                             9513 ; 73   |
                             9514 ; 74   |// Little endian word packed byte strings:   
                             9515 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9516 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9517 ; 77   |// Little endian word packed byte strings:   
                             9518 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9519 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9520 ; 80   |
                             9521 ; 81   |// Declare Memory Spaces To Use When Coding
                             9522 ; 82   |// A. Sector Buffers
                             9523 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9524 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9525 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9526 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9527 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9528 ; 88   |// B. Media DDI Memory
                             9529 ; 89   |#define MEDIA_DDI_MEM _Y
                             9530 ; 90   |
                             9531 ; 91   |
                             9532 ; 92   |
                             9533 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9534 ; 94   |// Examples of circular pointers:
                             9535 ; 95   |//    INT CIRC cpiVarName
                             9536 ; 96   |//    DWORD CIRC cpdwVarName
                             9537 ; 97   |
                             9538 ; 98   |#define RETCODE INT                 // rcVarName
                             9539 ; 99   |
                             9540 ; 100  |// generic bitfield structure
                             9541 ; 101  |struct Bitfield {
                             9542 ; 102  |    unsigned int B0  :1;
                             9543 ; 103  |    unsigned int B1  :1;
                             9544 ; 104  |    unsigned int B2  :1;
                             9545 ; 105  |    unsigned int B3  :1;
                             9546 ; 106  |    unsigned int B4  :1;
                             9547 ; 107  |    unsigned int B5  :1;
                             9548 ; 108  |    unsigned int B6  :1;
                             9549 ; 109  |    unsigned int B7  :1;
                             9550 ; 110  |    unsigned int B8  :1;
                             9551 ; 111  |    unsigned int B9  :1;
                             9552 ; 112  |    unsigned int B10 :1;
                             9553 ; 113  |    unsigned int B11 :1;
                             9554 ; 114  |    unsigned int B12 :1;
                             9555 ; 115  |    unsigned int B13 :1;
                             9556 ; 116  |    unsigned int B14 :1;
                             9557 ; 117  |    unsigned int B15 :1;
                             9558 ; 118  |    unsigned int B16 :1;
                             9559 ; 119  |    unsigned int B17 :1;
                             9560 ; 120  |    unsigned int B18 :1;
                             9561 ; 121  |    unsigned int B19 :1;
                             9562 ; 122  |    unsigned int B20 :1;
                             9563 ; 123  |    unsigned int B21 :1;
                             9564 ; 124  |    unsigned int B22 :1;
                             9565 ; 125  |    unsigned int B23 :1;
                             9566 ; 126  |};
                             9567 ; 127  |
                             9568 ; 128  |union BitInt {
                             9569 ; 129  |        struct Bitfield B;
                             9570 ; 130  |        int        I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9571 ; 131  |};
                             9572 ; 132  |
                             9573 ; 133  |#define MAX_MSG_LENGTH 10
                             9574 ; 134  |struct CMessage
                             9575 ; 135  |{
                             9576 ; 136  |        unsigned int m_uLength;
                             9577 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9578 ; 138  |};
                             9579 ; 139  |
                             9580 ; 140  |typedef struct {
                             9581 ; 141  |    WORD m_wLength;
                             9582 ; 142  |    WORD m_wMessage;
                             9583 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9584 ; 144  |} Message;
                             9585 ; 145  |
                             9586 ; 146  |struct MessageQueueDescriptor
                             9587 ; 147  |{
                             9588 ; 148  |        int *m_pBase;
                             9589 ; 149  |        int m_iModulo;
                             9590 ; 150  |        int m_iSize;
                             9591 ; 151  |        int *m_pHead;
                             9592 ; 152  |        int *m_pTail;
                             9593 ; 153  |};
                             9594 ; 154  |
                             9595 ; 155  |struct ModuleEntry
                             9596 ; 156  |{
                             9597 ; 157  |    int m_iSignaledEventMask;
                             9598 ; 158  |    int m_iWaitEventMask;
                             9599 ; 159  |    int m_iResourceOfCode;
                             9600 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9601 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9602 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9603 ; 163  |    int m_uTimeOutHigh;
                             9604 ; 164  |    int m_uTimeOutLow;
                             9605 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9606 ; 166  |};
                             9607 ; 167  |
                             9608 ; 168  |union WaitMask{
                             9609 ; 169  |    struct B{
                             9610 ; 170  |        unsigned int m_bNone     :1;
                             9611 ; 171  |        unsigned int m_bMessage  :1;
                             9612 ; 172  |        unsigned int m_bTimer    :1;
                             9613 ; 173  |        unsigned int m_bButton   :1;
                             9614 ; 174  |    } B;
                             9615 ; 175  |    int I;
                             9616 ; 176  |} ;
                             9617 ; 177  |
                             9618 ; 178  |
                             9619 ; 179  |struct Button {
                             9620 ; 180  |        WORD wButtonEvent;
                             9621 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9622 ; 182  |};
                             9623 ; 183  |
                             9624 ; 184  |struct Message {
                             9625 ; 185  |        WORD wMsgLength;
                             9626 ; 186  |        WORD wMsgCommand;
                             9627 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9628 ; 188  |};
                             9629 ; 189  |
                             9630 ; 190  |union EventTypes {
                             9631 ; 191  |        struct CMessage msg;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9632 ; 192  |        struct Button Button ;
                             9633 ; 193  |        struct Message Message;
                             9634 ; 194  |};
                             9635 ; 195  |
                             9636 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9637 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9638 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9639 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9640 ; 200  |
                             9641 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9642 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9643 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9644 ; 204  |
                             9645 ; 205  |#if DEBUG
                             9646 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9647 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9648 ; 208  |#else 
                             9649 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9650 ; 210  |#define DebugBuildAssert(x)    
                             9651 ; 211  |#endif
                             9652 ; 212  |
                             9653 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9654 ; 214  |//  #pragma asm
                             9655 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9656 ; 216  |//  #pragma endasm
                             9657 ; 217  |
                             9658 ; 218  |
                             9659 ; 219  |#ifdef COLOR_262K
                             9660 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9661 ; 221  |#elif defined(COLOR_65K)
                             9662 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9663 ; 223  |#else
                             9664 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9665 ; 225  |#endif
                             9666 ; 226  |    
                             9667 ; 227  |#endif // #ifndef _TYPES_H
                             9668 
                             9670 
                             9671 ; 8    |
                             9672 ; 9    |
                             9673 ; 10   |
                             9674 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9675 ; 12   |
                             9676 ; 13   |//   SYSTEM STMP Registers 
                             9677 ; 14   |//      Last Edited 2.19.2003 M. May
                             9678 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9679 ; 16   |
                             9680 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             9681 ; 18   |
                             9682 ; 19   |
                             9683 ; 20   |
                             9684 ; 21   |
                             9685 ; 22   |
                             9686 ; 23   |
                             9687 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             9688 ; 25   |
                             9689 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             9690 ; 27   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9691 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             9692 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             9693 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             9694 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             9695 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             9696 ; 33   |
                             9697 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             9698 ; 35   |
                             9699 ; 36   |
                             9700 ; 37   |
                             9701 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             9702 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             9703 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             9704 ; 41   |
                             9705 ; 42   |
                             9706 ; 43   |
                             9707 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             9708 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             9709 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                             9710 ; 47   |
                             9711 ; 48   |
                             9712 ; 49   |
                             9713 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             9714 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             9715 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             9716 ; 53   |
                             9717 ; 54   |
                             9718 ; 55   |
                             9719 ; 56   |
                             9720 ; 57   |
                             9721 ; 58   |typedef union               
                             9722 ; 59   |{
                             9723 ; 60   |    struct {
                             9724 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             9725 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             9726 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             9727 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             9728 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             9729 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             9730 ; 67   |    } B;
                             9731 ; 68   |    unsigned int I;
                             9732 ; 69   |} dcdc1_ctrl0_type;
                             9733 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             9734 ; 71   |
                             9735 ; 72   |
                             9736 ; 73   |
                             9737 ; 74   |
                             9738 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             9739 ; 76   |
                             9740 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             9741 ; 78   |
                             9742 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             9743 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             9744 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             9745 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             9746 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             9747 ; 84   |
                             9748 ; 85   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9749 ; 86   |
                             9750 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             9751 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             9752 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             9753 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             9754 ; 91   |
                             9755 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             9756 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             9757 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             9758 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             9759 ; 96   |
                             9760 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             9761 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             9762 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             9763 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             9764 ; 101  |
                             9765 ; 102  |
                             9766 ; 103  |typedef union               
                             9767 ; 104  |{
                             9768 ; 105  |    struct {
                             9769 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             9770 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             9771 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             9772 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             9773 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             9774 ; 111  |    } B;
                             9775 ; 112  |    unsigned int I;
                             9776 ; 113  |} dcdc1_ctrl1_type;
                             9777 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             9778 ; 115  |
                             9779 ; 116  |
                             9780 ; 117  |
                             9781 ; 118  |
                             9782 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             9783 ; 120  |
                             9784 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             9785 ; 122  |
                             9786 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             9787 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             9788 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             9789 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             9790 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             9791 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             9792 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             9793 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             9794 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             9795 ; 132  |
                             9796 ; 133  |
                             9797 ; 134  |
                             9798 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             9799 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             9800 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             9801 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             9802 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             9803 ; 140  |
                             9804 ; 141  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9805 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             9806 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             9807 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             9808 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             9809 ; 146  |
                             9810 ; 147  |
                             9811 ; 148  |
                             9812 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             9813 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             9814 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                             9815 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             9816 ; 153  |
                             9817 ; 154  |
                             9818 ; 155  |typedef union               
                             9819 ; 156  |{
                             9820 ; 157  |    struct {
                             9821 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             9822 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             9823 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             9824 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             9825 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             9826 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             9827 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             9828 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             9829 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             9830 ; 167  |    } B;
                             9831 ; 168  |    unsigned int I;
                             9832 ; 169  |} dcdc_vddio_type;
                             9833 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             9834 ; 171  |
                             9835 ; 172  |
                             9836 ; 173  |
                             9837 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             9838 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             9839 ; 176  |
                             9840 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             9841 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             9842 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             9843 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             9844 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             9845 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             9846 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             9847 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             9848 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             9849 ; 186  |
                             9850 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             9851 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             9852 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             9853 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             9854 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             9855 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9856 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             9857 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             9858 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             9859 ; 196  |
                             9860 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             9861 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             9862 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             9863 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             9864 ; 201  |
                             9865 ; 202  |typedef union               
                             9866 ; 203  |{
                             9867 ; 204  |    struct {
                             9868 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             9869 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             9870 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             9871 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             9872 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             9873 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             9874 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             9875 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             9876 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             9877 ; 214  |    } B;
                             9878 ; 215  |   unsigned int I;
                             9879 ; 216  |        unsigned U;
                             9880 ; 217  |} dcdc_vddd_type;
                             9881 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             9882 ; 219  |
                             9883 ; 220  |
                             9884 ; 221  |
                             9885 ; 222  |
                             9886 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             9887 ; 224  |
                             9888 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             9889 ; 226  |
                             9890 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             9891 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             9892 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             9893 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             9894 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             9895 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             9896 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             9897 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             9898 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             9899 ; 236  |
                             9900 ; 237  |
                             9901 ; 238  |
                             9902 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             9903 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             9904 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             9905 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             9906 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             9907 ; 244  |
                             9908 ; 245  |
                             9909 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9910 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             9911 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             9912 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             9913 ; 250  |
                             9914 ; 251  |
                             9915 ; 252  |
                             9916 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             9917 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             9918 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             9919 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             9920 ; 257  |
                             9921 ; 258  |
                             9922 ; 259  |typedef union               
                             9923 ; 260  |{
                             9924 ; 261  |    struct {
                             9925 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             9926 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             9927 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             9928 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             9929 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             9930 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             9931 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             9932 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             9933 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             9934 ; 271  |    } B;
                             9935 ; 272  |    unsigned int I;
                             9936 ; 273  |} dcdc_vdda_type;
                             9937 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             9938 ; 275  |
                             9939 ; 276  |
                             9940 ; 277  |
                             9941 ; 278  |
                             9942 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             9943 ; 280  |
                             9944 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             9945 ; 282  |
                             9946 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             9947 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             9948 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             9949 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             9950 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             9951 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             9952 ; 289  |
                             9953 ; 290  |
                             9954 ; 291  |
                             9955 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             9956 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             9957 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             9958 ; 295  |
                             9959 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             9960 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                             9961 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9962 ; 299  |
                             9963 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             9964 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             9965 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             9966 ; 303  |
                             9967 ; 304  |
                             9968 ; 305  |typedef union               
                             9969 ; 306  |{
                             9970 ; 307  |    struct {
                             9971 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             9972 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             9973 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             9974 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             9975 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             9976 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             9977 ; 314  |    } B;
                             9978 ; 315  |    unsigned int I;
                             9979 ; 316  |} dcdc2_ctrl0_type; 
                             9980 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             9981 ; 318  |
                             9982 ; 319  |
                             9983 ; 320  |
                             9984 ; 321  |
                             9985 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             9986 ; 323  |
                             9987 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             9988 ; 325  |
                             9989 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             9990 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             9991 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             9992 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             9993 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             9994 ; 331  |
                             9995 ; 332  |
                             9996 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             9997 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             9998 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             9999 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                            10000 ; 337  |
                            10001 ; 338  |
                            10002 ; 339  |
                            10003 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                            10004 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                            10005 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                            10006 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                            10007 ; 344  |
                            10008 ; 345  |
                            10009 ; 346  |
                            10010 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                            10011 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                            10012 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                            10013 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                            10014 ; 351  |
                            10015 ; 352  |
                            10016 ; 353  |typedef union               
                            10017 ; 354  |{
                            10018 ; 355  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10019 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                            10020 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                            10021 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                            10022 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                            10023 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                            10024 ; 361  |    } B;
                            10025 ; 362  |    unsigned int I;
                            10026 ; 363  |} dcdc2_ctrl1_type;
                            10027 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                            10028 ; 365  |
                            10029 ; 366  |
                            10030 ; 367  |
                            10031 ; 368  |
                            10032 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                            10033 ; 370  |
                            10034 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                            10035 ; 372  |
                            10036 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                            10037 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                            10038 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                            10039 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                            10040 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                            10041 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                            10042 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                            10043 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                            10044 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                            10045 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                            10046 ; 383  |
                            10047 ; 384  |
                            10048 ; 385  |
                            10049 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                            10050 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                            10051 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                            10052 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                            10053 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                            10054 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                            10055 ; 392  |
                            10056 ; 393  |
                            10057 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                            10058 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                            10059 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                            10060 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                            10061 ; 398  |
                            10062 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                            10063 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                            10064 ; 401  |
                            10065 ; 402  |
                            10066 ; 403  |
                            10067 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                            10068 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                            10069 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                            10070 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                            10071 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                            10072 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                            10073 ; 410  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10074 ; 411  |
                            10075 ; 412  |typedef union               
                            10076 ; 413  |{
                            10077 ; 414  |    struct {
                            10078 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                            10079 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                            10080 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                            10081 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                            10082 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                            10083 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                            10084 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                            10085 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                            10086 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                            10087 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                            10088 ; 425  |    } B;
                            10089 ; 426  |    unsigned int I;
                            10090 ; 427  |} speed_type;
                            10091 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                            10092 ; 429  |
                            10093 ; 430  |
                            10094 ; 431  |
                            10095 ; 432  |
                            10096 ; 433  |
                            10097 ; 434  |
                            10098 ; 435  |
                            10099 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                            10100 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                            10101 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                            10102 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                            10103 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                            10104 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                            10105 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                            10106 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                            10107 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                            10108 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                            10109 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                            10110 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                            10111 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                            10112 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                            10113 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                            10114 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                            10115 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                            10116 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                            10117 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                            10118 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                            10119 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                            10120 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                            10121 ; 458  |
                            10122 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                            10123 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                            10124 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                            10125 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                            10126 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                            10127 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                            10128 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                            10129 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                            10130 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                            10131 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                            10132 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                            10133 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                            10134 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10135 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                            10136 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                            10137 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                            10138 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                            10139 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                            10140 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                            10141 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                            10142 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                            10143 ; 480  |
                            10144 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                            10145 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                            10146 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                            10147 ; 484  |
                            10148 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                            10149 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                            10150 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                            10151 ; 488  |
                            10152 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                            10153 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                            10154 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                            10155 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                            10156 ; 493  |
                            10157 ; 494  |typedef union               
                            10158 ; 495  |{
                            10159 ; 496  |    struct {
                            10160 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                            10161 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                            10162 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                            10163 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                            10164 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                            10165 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                            10166 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                            10167 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                            10168 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                            10169 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                            10170 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                            10171 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                            10172 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                            10173 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                            10174 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                            10175 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                            10176 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                            10177 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                            10178 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                            10179 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                            10180 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                            10181 ; 518  |    } B;
                            10182 ; 519  |    unsigned int I;
                            10183 ; 520  |} usb_dcdctbr_type;
                            10184 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                            10185 ; 522  |
                            10186 ; 523  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10187 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                            10188 ; 525  |
                            10189 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                            10190 ; 527  |
                            10191 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                            10192 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                            10193 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                            10194 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                            10195 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                            10196 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                            10197 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                            10198 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                            10199 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                            10200 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                            10201 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                            10202 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                            10203 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                            10204 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                            10205 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                            10206 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                            10207 ; 544  |
                            10208 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                            10209 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                            10210 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                            10211 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                            10212 ; 549  |
                            10213 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                            10214 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                            10215 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                            10216 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                            10217 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                            10218 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                            10219 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                            10220 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                            10221 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                            10222 ; 559  |
                            10223 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                            10224 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                            10225 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                            10226 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                            10227 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                            10228 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                            10229 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                            10230 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                            10231 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                            10232 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                            10233 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                            10234 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                            10235 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10236 ; 573  |
                            10237 ; 574  |
                            10238 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                            10239 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                            10240 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                            10241 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                            10242 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                            10243 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                            10244 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                            10245 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                            10246 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                            10247 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                            10248 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                            10249 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                            10250 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                            10251 ; 588  |
                            10252 ; 589  |typedef union               
                            10253 ; 590  |{
                            10254 ; 591  |    struct {
                            10255 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                            10256 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                            10257 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                            10258 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                            10259 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                            10260 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                            10261 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                            10262 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                            10263 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                            10264 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                            10265 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                            10266 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                            10267 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                            10268 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                            10269 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                            10270 ; 607  |    } B;
                            10271 ; 608  |    unsigned int I;
                            10272 ; 609  |} usb_pwr_charge_type;
                            10273 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                            10274 ; 611  |
                            10275 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                            10276 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                            10277 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                            10278 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                            10279 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                            10280 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                            10281 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                            10282 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                            10283 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                            10284 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10285 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                            10286 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                            10287 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                            10288 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                            10289 ; 626  |
                            10290 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                            10291 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                            10292 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                            10293 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                            10294 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                            10295 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                            10296 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                            10297 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                            10298 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                            10299 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                            10300 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                            10301 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                            10302 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                            10303 ; 640  |
                            10304 ; 641  |typedef union               
                            10305 ; 642  |{
                            10306 ; 643  |    struct {       
                            10307 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                            10308 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                            10309 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                            10310 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                            10311 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                            10312 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                            10313 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                            10314 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                            10315 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                            10316 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                            10317 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                            10318 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                            10319 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                            10320 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                            10321 ; 658  |    } B;
                            10322 ; 659  |    int I;
                            10323 ; 660  |} usb_dcdcpersist_type;
                            10324 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                            10325 ; 662  |
                            10326 ; 663  |
                            10327 ; 664  |
                            10328 ; 665  |#endif
                            10329 ; 666  |
                            10330 ; 667  |
                            10331 ; 668  |
                            10332 
                            10334 
                            10335 ; 21   |#include "regsemc.h"
                            10336 
                            10338 
                            10339 ; 1    |#if !(defined(__REGS_EMC_INC))
                            10340 ; 2    |#define __REGS_EMC_INC 1
                            10341 ; 3    |
                            10342 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            10343 ; 5    |//   Module base addresses
                            10344 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            10345 ; 7    |#define HW_EMC_BASEADDR 0xF000
                            10346 ; 8    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10347 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                            10348 ; 10   |//  EMC Registers
                            10349 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                            10350 ; 12   |
                            10351 ; 13   |
                            10352 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                            10353 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                            10354 ; 16   |
                            10355 ; 17   |typedef union               /*Flash Control Register*/
                            10356 ; 18   |{
                            10357 ; 19   |    struct
                            10358 ; 20   |    {
                            10359 ; 21   |    int KICK        :1;
                            10360 ; 22   |    int RW          :1;
                            10361 ; 23   |    int TCIE        :1;
                            10362 ; 24   |    int IRQP        :1;
                            10363 ; 25   |    unsigned MMD    :2;
                            10364 ; 26   |    unsigned NB     :11;
                            10365 ; 27   |    unsigned RSVD   :4;
                            10366 ; 28   |    int SRST        :1;
                            10367 ; 29   |    } B;
                            10368 ; 30   |    int I;
                            10369 ; 31   |} flcr_type;
                            10370 ; 32   |
                            10371 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                            10372 ; 34   |#define HW_FLCR_RW_BITPOS 1
                            10373 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                            10374 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                            10375 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                            10376 ; 38   |#define HW_FLCR_NB_BITPOS 6
                            10377 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                            10378 ; 40   |
                            10379 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                            10380 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                            10381 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                            10382 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                            10383 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                            10384 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                            10385 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                            10386 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                            10387 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                            10388 ; 50   |
                            10389 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                            10390 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                            10391 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                            10392 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                            10393 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                            10394 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                            10395 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                            10396 ; 58   |
                            10397 ; 59   |
                            10398 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            10399 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                            10400 ; 62   |
                            10401 ; 63   |typedef union           /* Flash Start Address Low*/
                            10402 ; 64   |{
                            10403 ; 65   |    struct
                            10404 ; 66   |    {
                            10405 ; 67   |    unsigned XA     : 24;
                            10406 ; 68   |    } B;
                            10407 ; 69   |    int I;
                            10408 ; 70   |} flsalr_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 172

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10409 ; 71   |
                            10410 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                            10411 ; 73   |
                            10412 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                            10413 ; 75   |
                            10414 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                            10415 ; 77   |
                            10416 ; 78   |
                            10417 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                            10418 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                            10419 ; 81   |
                            10420 ; 82   |typedef union           /* Flash Start Address High*/
                            10421 ; 83   |{
                            10422 ; 84   |    struct
                            10423 ; 85   |    {
                            10424 ; 86   |    unsigned XA     :8;
                            10425 ; 87   |    unsigned DA     :16;
                            10426 ; 88   |    } B;
                            10427 ; 89   |    int I;
                            10428 ; 90   |} flsahr_type;
                            10429 ; 91   |
                            10430 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                            10431 ; 93   |
                            10432 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                            10433 ; 95   |
                            10434 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                            10435 ; 97   |
                            10436 ; 98   |
                            10437 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                            10438 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                            10439 ; 101  |
                            10440 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                            10441 ; 103  |{
                            10442 ; 104  |    struct
                            10443 ; 105  |    {
                            10444 ; 106  |        int WP          :1;
                            10445 ; 107  |        int CDP         :1;
                            10446 ; 108  |        unsigned SM     :2;
                            10447 ; 109  |        int XATTR       :1;
                            10448 ; 110  |        int CRST        :1;
                            10449 ; 111  |        int XWT         :1;
                            10450 ; 112  |        int RI          :1;
                            10451 ; 113  |        int IFCE        :1;
                            10452 ; 114  |        int ISCE        :1;
                            10453 ; 115  |        int INCE        :1;
                            10454 ; 116  |        int IFCS        :1;
                            10455 ; 117  |        int ISCS        :1;
                            10456 ; 118  |        int INCS        :1;
                            10457 ; 119  |        unsigned CFAI   :2;
                            10458 ; 120  |        int XDDI        :1;
                            10459 ; 121  |        unsigned CS     :2;
                            10460 ; 122  |        int CRE         :1;
                            10461 ; 123  |        unsigned VS     :2;
                            10462 ; 124  |        int DASP        :1;
                            10463 ; 125  |        int MODE16      :1; 
                            10464 ; 126  |    } B;
                            10465 ; 127  |    int I;
                            10466 ; 128  |} flcfcr_type;
                            10467 ; 129  |
                            10468 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                            10469 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                            10470 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 173

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10471 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                            10472 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                            10473 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                            10474 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                            10475 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                            10476 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                            10477 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                            10478 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                            10479 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                            10480 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                            10481 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                            10482 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                            10483 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                            10484 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                            10485 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                            10486 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                            10487 ; 149  |
                            10488 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                            10489 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                            10490 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                            10491 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                            10492 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                            10493 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                            10494 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                            10495 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                            10496 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                            10497 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                            10498 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                            10499 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                            10500 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                            10501 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                            10502 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                            10503 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                            10504 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                            10505 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                            10506 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                            10507 ; 169  |
                            10508 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                            10509 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                            10510 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                            10511 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                            10512 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                            10513 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                            10514 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                            10515 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                            10516 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                            10517 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                            10518 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                            10519 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                            10520 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                            10521 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                            10522 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                            10523 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                            10524 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                            10525 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                            10526 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                            10527 ; 189  |
                            10528 ; 190  |
                            10529 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                            10530 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                            10531 ; 193  |
                            10532 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 174

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10533 ; 195  |{
                            10534 ; 196  |    struct
                            10535 ; 197  |    {
                            10536 ; 198  |        unsigned TRWSU  :5;
                            10537 ; 199  |        unsigned TRPW   :7;
                            10538 ; 200  |        unsigned TWPW   :7;
                            10539 ; 201  |        unsigned TRWH   :5;
                            10540 ; 202  |    } B;
                            10541 ; 203  |    int I;
                            10542 ; 204  |} flcftmr1r_type;
                            10543 ; 205  |
                            10544 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                            10545 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                            10546 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                            10547 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                            10548 ; 210  |
                            10549 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                            10550 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                            10551 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                            10552 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                            10553 ; 215  |
                            10554 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                            10555 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                            10556 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                            10557 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                            10558 ; 220  |
                            10559 ; 221  |
                            10560 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10561 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                            10562 ; 224  |
                            10563 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                            10564 ; 226  |{
                            10565 ; 227  |    struct
                            10566 ; 228  |    {
                            10567 ; 229  |        unsigned TWW    :4;
                            10568 ; 230  |        unsigned TWTO   :10;
                            10569 ; 231  |        unsigned THW    :5; 
                            10570 ; 232  |        unsigned TRAQ   :5;
                            10571 ; 233  |    } B;
                            10572 ; 234  |    int I;
                            10573 ; 235  |} flcftmr2r_type;
                            10574 ; 236  |
                            10575 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                            10576 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                            10577 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                            10578 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                            10579 ; 241  |
                            10580 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                            10581 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                            10582 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                            10583 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                            10584 ; 246  |
                            10585 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                            10586 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                            10587 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                            10588 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                            10589 ; 251  |
                            10590 ; 252  |
                            10591 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            10592 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                            10593 ; 255  |
                            10594 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 175

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10595 ; 257  |{
                            10596 ; 258  |    struct
                            10597 ; 259  |    {
                            10598 ; 260  |        unsigned CS     :2;
                            10599 ; 261  |        int SE          :1;
                            10600 ; 262  |        int WP          :1;
                            10601 ; 263  |        int SIZE        :1;
                            10602 ; 264  |        int ICMD        :8;
                            10603 ; 265  |        int TOIE        :1;
                            10604 ; 266  |        int BPIE        :1;
                            10605 ; 267  |        int TOIRQ       :1;
                            10606 ; 268  |        int BPIRQ       :1;
                            10607 ; 269  |    } B;
                            10608 ; 270  |    int I;
                            10609 ; 271  |} flsmcr_type;
                            10610 ; 272  |
                            10611 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                            10612 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                            10613 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                            10614 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                            10615 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                            10616 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                            10617 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                            10618 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                            10619 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                            10620 ; 282  |
                            10621 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                            10622 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                            10623 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                            10624 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                            10625 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                            10626 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                            10627 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                            10628 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                            10629 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                            10630 ; 292  |
                            10631 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                            10632 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                            10633 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                            10634 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                            10635 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                            10636 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                            10637 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                            10638 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                            10639 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                            10640 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                            10641 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                            10642 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                            10643 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                            10644 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                            10645 ; 307  |
                            10646 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                            10647 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                            10648 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                            10649 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                            10650 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                            10651 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                            10652 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                            10653 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                            10654 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                            10655 ; 317  |
                            10656 ; 318  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 176

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10657 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                            10658 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                            10659 ; 321  |
                            10660 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                            10661 ; 323  |{
                            10662 ; 324  |    struct
                            10663 ; 325  |    {
                            10664 ; 326  |        unsigned TRWSU  :5;
                            10665 ; 327  |        unsigned TRPW   :6;
                            10666 ; 328  |        unsigned TWPW   :6;
                            10667 ; 329  |        unsigned TRWH   :5;
                            10668 ; 330  |    } B;
                            10669 ; 331  |    int I;
                            10670 ; 332  |} flsmtmr1r_type;
                            10671 ; 333  |
                            10672 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                            10673 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                            10674 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                            10675 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                            10676 ; 338  |
                            10677 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                            10678 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                            10679 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                            10680 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                            10681 ; 343  |
                            10682 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                            10683 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                            10684 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                            10685 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                            10686 ; 348  |
                            10687 ; 349  |
                            10688 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                            10689 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                            10690 ; 352  |
                            10691 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                            10692 ; 354  |{
                            10693 ; 355  |    struct
                            10694 ; 356  |    {
                            10695 ; 357  |        unsigned TWT    :6;
                            10696 ; 358  |        unsigned TWTO   :18;
                            10697 ; 359  |    } B;
                            10698 ; 360  |    int I;
                            10699 ; 361  |} flsmtmr2r_type;
                            10700 ; 362  |
                            10701 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                            10702 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                            10703 ; 365  |
                            10704 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                            10705 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                            10706 ; 368  |
                            10707 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                            10708 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                            10709 ; 371  |
                            10710 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                            10711 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                            10712 ; 374  |typedef union 
                            10713 ; 375  |{
                            10714 ; 376  |  struct
                            10715 ; 377  |  {
                            10716 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                            10717 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers
                                   */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 177

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10718 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers
                                   */
                            10719 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                            10720 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                            10721 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                            10722 ; 384  |    int PAD0          :17;    
                            10723 ; 385  |  } B;
                            10724 ; 386  |  int I;
                            10725 ; 387  |} flcr2_type;
                            10726 ; 388  |
                            10727 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                            10728 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                            10729 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                            10730 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                            10731 ; 393  |
                            10732 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Co
                                  ntrol Register */
                            10733 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash St
                                  art Address Low Register */
                            10734 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash St
                                  art Address High Register */
                            10735 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                            10736 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Co
                                  ntrol Register2 */
                            10737 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash Co
                                  mpactFlash Control Register*/
                            10738 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Co
                                  mpact Flash Timer1 Register*/
                            10739 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Co
                                  mpact Flash Timer2 Register*/
                            10740 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash Sm
                                  artMedia Control Register*/
                            10741 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash Sm
                                  artMedia Timer1 Register*/
                            10742 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash Sm
                                  artMedia Timer2 Register*/
                            10743 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                            10744 ; 406  |
                            10745 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            10746 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            10747 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                            10748 ; 410  |
                            10749 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                            10750 ; 412  |
                            10751 ; 413  |#endif
                            10752 ; 414  |
                            10753 
                            10755 
                            10756 ; 22   |#include "regsgpio.h"
                            10757 
                            10759 
                            10760 ; 1    |#if !(defined(__REGS_GPIO_INC))
                            10761 ; 2    |#define __REGS_GPIO_INC 1
                            10762 ; 3    |
                            10763 ; 4    |#include "types.h"
                            10764 
                            10766 
                            10767 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10768 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10769 ; 3    |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 178

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10770 ; 4    |// Filename: types.h
                            10771 ; 5    |// Description: Standard data types
                            10772 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10773 ; 7    |
                            10774 ; 8    |#ifndef _TYPES_H
                            10775 ; 9    |#define _TYPES_H
                            10776 ; 10   |
                            10777 ; 11   |// TODO:  move this outta here!
                            10778 ; 12   |#if !defined(NOERROR)
                            10779 ; 13   |#define NOERROR 0
                            10780 ; 14   |#define SUCCESS 0
                            10781 ; 15   |#endif 
                            10782 ; 16   |#if !defined(SUCCESS)
                            10783 ; 17   |#define SUCCESS  0
                            10784 ; 18   |#endif
                            10785 ; 19   |#if !defined(ERROR)
                            10786 ; 20   |#define ERROR   -1
                            10787 ; 21   |#endif
                            10788 ; 22   |#if !defined(FALSE)
                            10789 ; 23   |#define FALSE 0
                            10790 ; 24   |#endif
                            10791 ; 25   |#if !defined(TRUE)
                            10792 ; 26   |#define TRUE  1
                            10793 ; 27   |#endif
                            10794 ; 28   |
                            10795 ; 29   |#if !defined(NULL)
                            10796 ; 30   |#define NULL 0
                            10797 ; 31   |#endif
                            10798 ; 32   |
                            10799 ; 33   |#define MAX_INT     0x7FFFFF
                            10800 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10801 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10802 ; 36   |#define MAX_ULONG   (-1) 
                            10803 ; 37   |
                            10804 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10805 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10806 ; 40   |
                            10807 ; 41   |
                            10808 ; 42   |#define BYTE    unsigned char       // btVarName
                            10809 ; 43   |#define CHAR    signed char         // cVarName
                            10810 ; 44   |#define USHORT  unsigned short      // usVarName
                            10811 ; 45   |#define SHORT   unsigned short      // sVarName
                            10812 ; 46   |#define WORD    unsigned int        // wVarName
                            10813 ; 47   |#define INT     signed int          // iVarName
                            10814 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10815 ; 49   |#define LONG    signed long         // lVarName
                            10816 ; 50   |#define BOOL    unsigned int        // bVarName
                            10817 ; 51   |#define FRACT   _fract              // frVarName
                            10818 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10819 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10820 ; 54   |#define FLOAT   float               // fVarName
                            10821 ; 55   |#define DBL     double              // dVarName
                            10822 ; 56   |#define ENUM    enum                // eVarName
                            10823 ; 57   |#define CMX     _complex            // cmxVarName
                            10824 ; 58   |typedef WORD UCS3;                   // 
                            10825 ; 59   |
                            10826 ; 60   |#define UINT16  unsigned short
                            10827 ; 61   |#define UINT8   unsigned char   
                            10828 ; 62   |#define UINT32  unsigned long
                            10829 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 179

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10830 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10831 ; 65   |#define WCHAR   UINT16
                            10832 ; 66   |
                            10833 ; 67   |//UINT128 is 16 bytes or 6 words
                            10834 ; 68   |typedef struct UINT128_3500 {   
                            10835 ; 69   |    int val[6];     
                            10836 ; 70   |} UINT128_3500;
                            10837 ; 71   |
                            10838 ; 72   |#define UINT128   UINT128_3500
                            10839 ; 73   |
                            10840 ; 74   |// Little endian word packed byte strings:   
                            10841 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10842 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10843 ; 77   |// Little endian word packed byte strings:   
                            10844 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10845 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10846 ; 80   |
                            10847 ; 81   |// Declare Memory Spaces To Use When Coding
                            10848 ; 82   |// A. Sector Buffers
                            10849 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10850 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10851 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10852 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10853 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10854 ; 88   |// B. Media DDI Memory
                            10855 ; 89   |#define MEDIA_DDI_MEM _Y
                            10856 ; 90   |
                            10857 ; 91   |
                            10858 ; 92   |
                            10859 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10860 ; 94   |// Examples of circular pointers:
                            10861 ; 95   |//    INT CIRC cpiVarName
                            10862 ; 96   |//    DWORD CIRC cpdwVarName
                            10863 ; 97   |
                            10864 ; 98   |#define RETCODE INT                 // rcVarName
                            10865 ; 99   |
                            10866 ; 100  |// generic bitfield structure
                            10867 ; 101  |struct Bitfield {
                            10868 ; 102  |    unsigned int B0  :1;
                            10869 ; 103  |    unsigned int B1  :1;
                            10870 ; 104  |    unsigned int B2  :1;
                            10871 ; 105  |    unsigned int B3  :1;
                            10872 ; 106  |    unsigned int B4  :1;
                            10873 ; 107  |    unsigned int B5  :1;
                            10874 ; 108  |    unsigned int B6  :1;
                            10875 ; 109  |    unsigned int B7  :1;
                            10876 ; 110  |    unsigned int B8  :1;
                            10877 ; 111  |    unsigned int B9  :1;
                            10878 ; 112  |    unsigned int B10 :1;
                            10879 ; 113  |    unsigned int B11 :1;
                            10880 ; 114  |    unsigned int B12 :1;
                            10881 ; 115  |    unsigned int B13 :1;
                            10882 ; 116  |    unsigned int B14 :1;
                            10883 ; 117  |    unsigned int B15 :1;
                            10884 ; 118  |    unsigned int B16 :1;
                            10885 ; 119  |    unsigned int B17 :1;
                            10886 ; 120  |    unsigned int B18 :1;
                            10887 ; 121  |    unsigned int B19 :1;
                            10888 ; 122  |    unsigned int B20 :1;
                            10889 ; 123  |    unsigned int B21 :1;
                            10890 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 180

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10891 ; 125  |    unsigned int B23 :1;
                            10892 ; 126  |};
                            10893 ; 127  |
                            10894 ; 128  |union BitInt {
                            10895 ; 129  |        struct Bitfield B;
                            10896 ; 130  |        int        I;
                            10897 ; 131  |};
                            10898 ; 132  |
                            10899 ; 133  |#define MAX_MSG_LENGTH 10
                            10900 ; 134  |struct CMessage
                            10901 ; 135  |{
                            10902 ; 136  |        unsigned int m_uLength;
                            10903 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10904 ; 138  |};
                            10905 ; 139  |
                            10906 ; 140  |typedef struct {
                            10907 ; 141  |    WORD m_wLength;
                            10908 ; 142  |    WORD m_wMessage;
                            10909 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10910 ; 144  |} Message;
                            10911 ; 145  |
                            10912 ; 146  |struct MessageQueueDescriptor
                            10913 ; 147  |{
                            10914 ; 148  |        int *m_pBase;
                            10915 ; 149  |        int m_iModulo;
                            10916 ; 150  |        int m_iSize;
                            10917 ; 151  |        int *m_pHead;
                            10918 ; 152  |        int *m_pTail;
                            10919 ; 153  |};
                            10920 ; 154  |
                            10921 ; 155  |struct ModuleEntry
                            10922 ; 156  |{
                            10923 ; 157  |    int m_iSignaledEventMask;
                            10924 ; 158  |    int m_iWaitEventMask;
                            10925 ; 159  |    int m_iResourceOfCode;
                            10926 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10927 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10928 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10929 ; 163  |    int m_uTimeOutHigh;
                            10930 ; 164  |    int m_uTimeOutLow;
                            10931 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10932 ; 166  |};
                            10933 ; 167  |
                            10934 ; 168  |union WaitMask{
                            10935 ; 169  |    struct B{
                            10936 ; 170  |        unsigned int m_bNone     :1;
                            10937 ; 171  |        unsigned int m_bMessage  :1;
                            10938 ; 172  |        unsigned int m_bTimer    :1;
                            10939 ; 173  |        unsigned int m_bButton   :1;
                            10940 ; 174  |    } B;
                            10941 ; 175  |    int I;
                            10942 ; 176  |} ;
                            10943 ; 177  |
                            10944 ; 178  |
                            10945 ; 179  |struct Button {
                            10946 ; 180  |        WORD wButtonEvent;
                            10947 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10948 ; 182  |};
                            10949 ; 183  |
                            10950 ; 184  |struct Message {
                            10951 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 181

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10952 ; 186  |        WORD wMsgCommand;
                            10953 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10954 ; 188  |};
                            10955 ; 189  |
                            10956 ; 190  |union EventTypes {
                            10957 ; 191  |        struct CMessage msg;
                            10958 ; 192  |        struct Button Button ;
                            10959 ; 193  |        struct Message Message;
                            10960 ; 194  |};
                            10961 ; 195  |
                            10962 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10963 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10964 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10965 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10966 ; 200  |
                            10967 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10968 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10969 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10970 ; 204  |
                            10971 ; 205  |#if DEBUG
                            10972 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10973 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10974 ; 208  |#else 
                            10975 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10976 ; 210  |#define DebugBuildAssert(x)    
                            10977 ; 211  |#endif
                            10978 ; 212  |
                            10979 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10980 ; 214  |//  #pragma asm
                            10981 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10982 ; 216  |//  #pragma endasm
                            10983 ; 217  |
                            10984 ; 218  |
                            10985 ; 219  |#ifdef COLOR_262K
                            10986 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10987 ; 221  |#elif defined(COLOR_65K)
                            10988 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10989 ; 223  |#else
                            10990 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10991 ; 225  |#endif
                            10992 ; 226  |    
                            10993 ; 227  |#endif // #ifndef _TYPES_H
                            10994 
                            10996 
                            10997 ; 5    |
                            10998 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            10999 ; 7    |//  Interrupt Collector Registers
                            11000 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                            11001 ; 9    |
                            11002 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                            11003 ; 11   |
                            11004 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                            11005 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                            11006 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                            11007 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                            11008 ; 16   |
                            11009 ; 17   |#define HW_GPB0_BLOCKNUM 0
                            11010 ; 18   |#define HW_GPB1_BLOCKNUM 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 182

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11011 ; 19   |#define HW_GPB2_BLOCKNUM 2
                            11012 ; 20   |#define HW_GPB3_BLOCKNUM 3
                            11013 ; 21   |
                            11014 ; 22   |#define HW_GPB_GPENR 0
                            11015 ; 23   |#define HW_GPB_GPDOR 1
                            11016 ; 24   |#define HW_GPB_GPDIR 2
                            11017 ; 25   |#define HW_GPB_GPDOER 3
                            11018 ; 26   |#define HW_GPB_GPIPENR 4
                            11019 ; 27   |#define HW_GPB_GPIENR 5
                            11020 ; 28   |#define HW_GPB_GPILVLR 6
                            11021 ; 29   |#define HW_GPB_GPIPOLR 7
                            11022 ; 30   |#define HW_GPB_GPISTATR 8
                            11023 ; 31   |#define HW_GPB_GPPWR 9
                            11024 ; 32   |#define HW_GPB_GP8MA 10
                            11025 ; 33   |
                            11026 ; 34   |
                            11027 ; 35   |
                            11028 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            11029 ; 37   |//  GPIO Register Bit Positions
                            11030 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                            11031 ; 39   |{
                            11032 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                            11033 ; 41   |    unsigned int I;
                            11034 ; 42   |    unsigned int U;
                            11035 ; 43   |} gpr_type;
                            11036 ; 44   |
                            11037 ; 45   |#define HW_GP_B0_BITPOS 0
                            11038 ; 46   |#define HW_GP_B1_BITPOS 1
                            11039 ; 47   |#define HW_GP_B2_BITPOS 2
                            11040 ; 48   |#define HW_GP_B3_BITPOS 3
                            11041 ; 49   |#define HW_GP_B4_BITPOS 4
                            11042 ; 50   |#define HW_GP_B5_BITPOS 5
                            11043 ; 51   |#define HW_GP_B6_BITPOS 6
                            11044 ; 52   |#define HW_GP_B7_BITPOS 7
                            11045 ; 53   |#define HW_GP_B8_BITPOS 8
                            11046 ; 54   |#define HW_GP_B9_BITPOS 9
                            11047 ; 55   |#define HW_GP_B10_BITPOS 10
                            11048 ; 56   |#define HW_GP_B11_BITPOS 11
                            11049 ; 57   |#define HW_GP_B12_BITPOS 12
                            11050 ; 58   |#define HW_GP_B13_BITPOS 13
                            11051 ; 59   |#define HW_GP_B14_BITPOS 14
                            11052 ; 60   |#define HW_GP_B15_BITPOS 15
                            11053 ; 61   |#define HW_GP_B16_BITPOS 16
                            11054 ; 62   |#define HW_GP_B17_BITPOS 17
                            11055 ; 63   |#define HW_GP_B18_BITPOS 18
                            11056 ; 64   |#define HW_GP_B19_BITPOS 19
                            11057 ; 65   |#define HW_GP_B20_BITPOS 20
                            11058 ; 66   |#define HW_GP_B21_BITPOS 21
                            11059 ; 67   |#define HW_GP_B22_BITPOS 22
                            11060 ; 68   |#define HW_GP_B23_BITPOS 23
                            11061 ; 69   |
                            11062 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                            11063 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                            11064 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                            11065 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                            11066 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                            11067 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                            11068 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                            11069 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                            11070 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                            11071 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                            11072 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 183

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11073 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                            11074 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                            11075 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                            11076 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                            11077 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                            11078 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                            11079 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                            11080 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                            11081 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                            11082 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                            11083 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                            11084 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                            11085 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                            11086 ; 94   |
                            11087 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                            11088 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                            11089 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                            11090 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                            11091 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                            11092 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                            11093 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                            11094 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                            11095 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                            11096 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                            11097 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                            11098 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                            11099 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                            11100 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                            11101 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                            11102 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                            11103 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                            11104 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                            11105 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                            11106 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                            11107 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                            11108 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                            11109 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                            11110 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                            11111 ; 119  |
                            11112 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                            11113 ; 121  |//  GPIO 8mA Register Bit Positions
                            11114 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                            11115 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                            11116 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                            11117 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                            11118 ; 126  |
                            11119 ; 127  |
                            11120 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                            11121 ; 129  |//  Logical GPIO numbers
                            11122 ; 130  |#define HW_GPIO_000 0
                            11123 ; 131  |#define HW_GPIO_001 1
                            11124 ; 132  |#define HW_GPIO_002 2
                            11125 ; 133  |#define HW_GPIO_003 3
                            11126 ; 134  |#define HW_GPIO_004 4
                            11127 ; 135  |#define HW_GPIO_005 5
                            11128 ; 136  |#define HW_GPIO_006 6
                            11129 ; 137  |#define HW_GPIO_007 7
                            11130 ; 138  |#define HW_GPIO_008 8
                            11131 ; 139  |#define HW_GPIO_009 9
                            11132 ; 140  |#define HW_GPIO_010 10
                            11133 ; 141  |#define HW_GPIO_011 11
                            11134 ; 142  |#define HW_GPIO_012 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 184

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11135 ; 143  |#define HW_GPIO_013 13
                            11136 ; 144  |#define HW_GPIO_014 14
                            11137 ; 145  |#define HW_GPIO_015 15
                            11138 ; 146  |#define HW_GPIO_016 16
                            11139 ; 147  |#define HW_GPIO_017 17
                            11140 ; 148  |#define HW_GPIO_018 18
                            11141 ; 149  |#define HW_GPIO_019 19
                            11142 ; 150  |#define HW_GPIO_020 20
                            11143 ; 151  |#define HW_GPIO_021 21
                            11144 ; 152  |#define HW_GPIO_022 22
                            11145 ; 153  |#define HW_GPIO_023 23
                            11146 ; 154  |#define HW_GPIO_024 24
                            11147 ; 155  |#define HW_GPIO_025 25
                            11148 ; 156  |#define HW_GPIO_026 26
                            11149 ; 157  |#define HW_GPIO_027 27
                            11150 ; 158  |#define HW_GPIO_028 28
                            11151 ; 159  |#define HW_GPIO_029 29
                            11152 ; 160  |#define HW_GPIO_030 30
                            11153 ; 161  |#define HW_GPIO_031 31
                            11154 ; 162  |#define HW_GPIO_032 32
                            11155 ; 163  |#define HW_GPIO_033 33
                            11156 ; 164  |#define HW_GPIO_034 34
                            11157 ; 165  |#define HW_GPIO_035 35
                            11158 ; 166  |#define HW_GPIO_036 36
                            11159 ; 167  |#define HW_GPIO_037 37
                            11160 ; 168  |#define HW_GPIO_038 38
                            11161 ; 169  |#define HW_GPIO_039 39
                            11162 ; 170  |#define HW_GPIO_040 40
                            11163 ; 171  |#define HW_GPIO_041 41
                            11164 ; 172  |#define HW_GPIO_042 42
                            11165 ; 173  |#define HW_GPIO_043 43
                            11166 ; 174  |#define HW_GPIO_044 44
                            11167 ; 175  |#define HW_GPIO_045 45
                            11168 ; 176  |#define HW_GPIO_046 46
                            11169 ; 177  |#define HW_GPIO_047 47
                            11170 ; 178  |#define HW_GPIO_048 48
                            11171 ; 179  |#define HW_GPIO_049 49
                            11172 ; 180  |#define HW_GPIO_050 50
                            11173 ; 181  |#define HW_GPIO_051 51
                            11174 ; 182  |#define HW_GPIO_052 52
                            11175 ; 183  |#define HW_GPIO_053 53
                            11176 ; 184  |#define HW_GPIO_054 54
                            11177 ; 185  |#define HW_GPIO_055 55
                            11178 ; 186  |#define HW_GPIO_056 56
                            11179 ; 187  |#define HW_GPIO_057 57
                            11180 ; 188  |#define HW_GPIO_058 58
                            11181 ; 189  |#define HW_GPIO_059 59
                            11182 ; 190  |#define HW_GPIO_060 60
                            11183 ; 191  |#define HW_GPIO_061 61
                            11184 ; 192  |#define HW_GPIO_062 62
                            11185 ; 193  |#define HW_GPIO_063 63
                            11186 ; 194  |#define HW_GPIO_064 64
                            11187 ; 195  |#define HW_GPIO_065 65
                            11188 ; 196  |#define HW_GPIO_066 66
                            11189 ; 197  |#define HW_GPIO_067 67
                            11190 ; 198  |#define HW_GPIO_068 68
                            11191 ; 199  |#define HW_GPIO_069 69
                            11192 ; 200  |#define HW_GPIO_070 70
                            11193 ; 201  |#define HW_GPIO_071 71
                            11194 ; 202  |#define HW_GPIO_072 72
                            11195 ; 203  |#define HW_GPIO_073 73
                            11196 ; 204  |#define HW_GPIO_074 74
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 185

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11197 ; 205  |#define HW_GPIO_075 75
                            11198 ; 206  |#define HW_GPIO_076 76
                            11199 ; 207  |#define HW_GPIO_077 77
                            11200 ; 208  |#define HW_GPIO_078 78
                            11201 ; 209  |#define HW_GPIO_079 79
                            11202 ; 210  |#define HW_GPIO_080 80
                            11203 ; 211  |#define HW_GPIO_081 81
                            11204 ; 212  |#define HW_GPIO_082 82
                            11205 ; 213  |#define HW_GPIO_083 83
                            11206 ; 214  |#define HW_GPIO_084 84
                            11207 ; 215  |#define HW_GPIO_085 85
                            11208 ; 216  |#define HW_GPIO_086 86
                            11209 ; 217  |#define HW_GPIO_087 87
                            11210 ; 218  |#define HW_GPIO_088 88
                            11211 ; 219  |#define HW_GPIO_089 89
                            11212 ; 220  |#define HW_GPIO_090 90
                            11213 ; 221  |#define HW_GPIO_091 91
                            11214 ; 222  |#define HW_GPIO_092 92
                            11215 ; 223  |#define HW_GPIO_093 93
                            11216 ; 224  |#define HW_GPIO_094 94
                            11217 ; 225  |#define HW_GPIO_095 95
                            11218 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                            11219 ; 227  |
                            11220 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                            11221 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                            11222 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                            11223 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                            11224 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                            11225 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                            11226 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                            11227 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                            11228 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                            11229 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                            11230 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                            11231 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                            11232 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                            11233 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                            11234 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                            11235 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                            11236 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                            11237 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                            11238 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                            11239 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 186

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11240 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                            11241 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                            11242 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                            11243 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                            11244 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                            11245 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                            11246 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                            11247 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                            11248 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                            11249 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                            11250 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                            11251 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                            11252 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                            11253 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                            11254 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                            11255 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                            11256 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                            11257 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                            11258 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                            11259 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                            11260 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                            11261 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                            11262 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                            11263 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                            11264 ; 272  |
                            11265 ; 273  |#endif
                            11266 ; 274  |
                            11267 
                            11269 
                            11270 ; 23   |#include "regsi2c.h"
                            11271 
                            11273 
                            11274 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            11275 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            11276 ; 3    |// Filename: regsI2C.inc
                            11277 ; 4    |// Description: Register definitions for GPFLASH interface
                            11278 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            11279 ; 6    |// The following naming conventions are followed in this file.
                            11280 ; 7    |// All registers are named using the format...
                            11281 ; 8    |//     HW_<module>_<regname>
                            11282 ; 9    |// where <module> is the module name which can be any of the following...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 187

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11283 ; 10   |//     USB20
                            11284 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            11285 ; 12   |// module name includes a number starting from 0 for the first instance of
                            11286 ; 13   |// that module)
                            11287 ; 14   |// <regname> is the specific register within that module
                            11288 ; 15   |// We also define the following...
                            11289 ; 16   |//     HW_<module>_<regname>_BITPOS
                            11290 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11291 ; 18   |//     HW_<module>_<regname>_SETMASK
                            11292 ; 19   |// which does something else, and
                            11293 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            11294 ; 21   |// which does something else.
                            11295 ; 22   |// Other rules
                            11296 ; 23   |//     All caps
                            11297 ; 24   |//     Numeric identifiers start at 0
                            11298 ; 25   |#if !(defined(regsi2cinc))
                            11299 ; 26   |#define regsi2cinc 1
                            11300 ; 27   |
                            11301 ; 28   |#include "types.h"
                            11302 
                            11304 
                            11305 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11306 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11307 ; 3    |//
                            11308 ; 4    |// Filename: types.h
                            11309 ; 5    |// Description: Standard data types
                            11310 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11311 ; 7    |
                            11312 ; 8    |#ifndef _TYPES_H
                            11313 ; 9    |#define _TYPES_H
                            11314 ; 10   |
                            11315 ; 11   |// TODO:  move this outta here!
                            11316 ; 12   |#if !defined(NOERROR)
                            11317 ; 13   |#define NOERROR 0
                            11318 ; 14   |#define SUCCESS 0
                            11319 ; 15   |#endif 
                            11320 ; 16   |#if !defined(SUCCESS)
                            11321 ; 17   |#define SUCCESS  0
                            11322 ; 18   |#endif
                            11323 ; 19   |#if !defined(ERROR)
                            11324 ; 20   |#define ERROR   -1
                            11325 ; 21   |#endif
                            11326 ; 22   |#if !defined(FALSE)
                            11327 ; 23   |#define FALSE 0
                            11328 ; 24   |#endif
                            11329 ; 25   |#if !defined(TRUE)
                            11330 ; 26   |#define TRUE  1
                            11331 ; 27   |#endif
                            11332 ; 28   |
                            11333 ; 29   |#if !defined(NULL)
                            11334 ; 30   |#define NULL 0
                            11335 ; 31   |#endif
                            11336 ; 32   |
                            11337 ; 33   |#define MAX_INT     0x7FFFFF
                            11338 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11339 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11340 ; 36   |#define MAX_ULONG   (-1) 
                            11341 ; 37   |
                            11342 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11343 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11344 ; 40   |
                            11345 ; 41   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 188

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11346 ; 42   |#define BYTE    unsigned char       // btVarName
                            11347 ; 43   |#define CHAR    signed char         // cVarName
                            11348 ; 44   |#define USHORT  unsigned short      // usVarName
                            11349 ; 45   |#define SHORT   unsigned short      // sVarName
                            11350 ; 46   |#define WORD    unsigned int        // wVarName
                            11351 ; 47   |#define INT     signed int          // iVarName
                            11352 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11353 ; 49   |#define LONG    signed long         // lVarName
                            11354 ; 50   |#define BOOL    unsigned int        // bVarName
                            11355 ; 51   |#define FRACT   _fract              // frVarName
                            11356 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11357 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11358 ; 54   |#define FLOAT   float               // fVarName
                            11359 ; 55   |#define DBL     double              // dVarName
                            11360 ; 56   |#define ENUM    enum                // eVarName
                            11361 ; 57   |#define CMX     _complex            // cmxVarName
                            11362 ; 58   |typedef WORD UCS3;                   // 
                            11363 ; 59   |
                            11364 ; 60   |#define UINT16  unsigned short
                            11365 ; 61   |#define UINT8   unsigned char   
                            11366 ; 62   |#define UINT32  unsigned long
                            11367 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11368 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11369 ; 65   |#define WCHAR   UINT16
                            11370 ; 66   |
                            11371 ; 67   |//UINT128 is 16 bytes or 6 words
                            11372 ; 68   |typedef struct UINT128_3500 {   
                            11373 ; 69   |    int val[6];     
                            11374 ; 70   |} UINT128_3500;
                            11375 ; 71   |
                            11376 ; 72   |#define UINT128   UINT128_3500
                            11377 ; 73   |
                            11378 ; 74   |// Little endian word packed byte strings:   
                            11379 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11380 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11381 ; 77   |// Little endian word packed byte strings:   
                            11382 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11383 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11384 ; 80   |
                            11385 ; 81   |// Declare Memory Spaces To Use When Coding
                            11386 ; 82   |// A. Sector Buffers
                            11387 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11388 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11389 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11390 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11391 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11392 ; 88   |// B. Media DDI Memory
                            11393 ; 89   |#define MEDIA_DDI_MEM _Y
                            11394 ; 90   |
                            11395 ; 91   |
                            11396 ; 92   |
                            11397 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11398 ; 94   |// Examples of circular pointers:
                            11399 ; 95   |//    INT CIRC cpiVarName
                            11400 ; 96   |//    DWORD CIRC cpdwVarName
                            11401 ; 97   |
                            11402 ; 98   |#define RETCODE INT                 // rcVarName
                            11403 ; 99   |
                            11404 ; 100  |// generic bitfield structure
                            11405 ; 101  |struct Bitfield {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 189

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11406 ; 102  |    unsigned int B0  :1;
                            11407 ; 103  |    unsigned int B1  :1;
                            11408 ; 104  |    unsigned int B2  :1;
                            11409 ; 105  |    unsigned int B3  :1;
                            11410 ; 106  |    unsigned int B4  :1;
                            11411 ; 107  |    unsigned int B5  :1;
                            11412 ; 108  |    unsigned int B6  :1;
                            11413 ; 109  |    unsigned int B7  :1;
                            11414 ; 110  |    unsigned int B8  :1;
                            11415 ; 111  |    unsigned int B9  :1;
                            11416 ; 112  |    unsigned int B10 :1;
                            11417 ; 113  |    unsigned int B11 :1;
                            11418 ; 114  |    unsigned int B12 :1;
                            11419 ; 115  |    unsigned int B13 :1;
                            11420 ; 116  |    unsigned int B14 :1;
                            11421 ; 117  |    unsigned int B15 :1;
                            11422 ; 118  |    unsigned int B16 :1;
                            11423 ; 119  |    unsigned int B17 :1;
                            11424 ; 120  |    unsigned int B18 :1;
                            11425 ; 121  |    unsigned int B19 :1;
                            11426 ; 122  |    unsigned int B20 :1;
                            11427 ; 123  |    unsigned int B21 :1;
                            11428 ; 124  |    unsigned int B22 :1;
                            11429 ; 125  |    unsigned int B23 :1;
                            11430 ; 126  |};
                            11431 ; 127  |
                            11432 ; 128  |union BitInt {
                            11433 ; 129  |        struct Bitfield B;
                            11434 ; 130  |        int        I;
                            11435 ; 131  |};
                            11436 ; 132  |
                            11437 ; 133  |#define MAX_MSG_LENGTH 10
                            11438 ; 134  |struct CMessage
                            11439 ; 135  |{
                            11440 ; 136  |        unsigned int m_uLength;
                            11441 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11442 ; 138  |};
                            11443 ; 139  |
                            11444 ; 140  |typedef struct {
                            11445 ; 141  |    WORD m_wLength;
                            11446 ; 142  |    WORD m_wMessage;
                            11447 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11448 ; 144  |} Message;
                            11449 ; 145  |
                            11450 ; 146  |struct MessageQueueDescriptor
                            11451 ; 147  |{
                            11452 ; 148  |        int *m_pBase;
                            11453 ; 149  |        int m_iModulo;
                            11454 ; 150  |        int m_iSize;
                            11455 ; 151  |        int *m_pHead;
                            11456 ; 152  |        int *m_pTail;
                            11457 ; 153  |};
                            11458 ; 154  |
                            11459 ; 155  |struct ModuleEntry
                            11460 ; 156  |{
                            11461 ; 157  |    int m_iSignaledEventMask;
                            11462 ; 158  |    int m_iWaitEventMask;
                            11463 ; 159  |    int m_iResourceOfCode;
                            11464 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11465 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11466 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 190

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11467 ; 163  |    int m_uTimeOutHigh;
                            11468 ; 164  |    int m_uTimeOutLow;
                            11469 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11470 ; 166  |};
                            11471 ; 167  |
                            11472 ; 168  |union WaitMask{
                            11473 ; 169  |    struct B{
                            11474 ; 170  |        unsigned int m_bNone     :1;
                            11475 ; 171  |        unsigned int m_bMessage  :1;
                            11476 ; 172  |        unsigned int m_bTimer    :1;
                            11477 ; 173  |        unsigned int m_bButton   :1;
                            11478 ; 174  |    } B;
                            11479 ; 175  |    int I;
                            11480 ; 176  |} ;
                            11481 ; 177  |
                            11482 ; 178  |
                            11483 ; 179  |struct Button {
                            11484 ; 180  |        WORD wButtonEvent;
                            11485 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11486 ; 182  |};
                            11487 ; 183  |
                            11488 ; 184  |struct Message {
                            11489 ; 185  |        WORD wMsgLength;
                            11490 ; 186  |        WORD wMsgCommand;
                            11491 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11492 ; 188  |};
                            11493 ; 189  |
                            11494 ; 190  |union EventTypes {
                            11495 ; 191  |        struct CMessage msg;
                            11496 ; 192  |        struct Button Button ;
                            11497 ; 193  |        struct Message Message;
                            11498 ; 194  |};
                            11499 ; 195  |
                            11500 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11501 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11502 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11503 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11504 ; 200  |
                            11505 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11506 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11507 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11508 ; 204  |
                            11509 ; 205  |#if DEBUG
                            11510 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11511 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11512 ; 208  |#else 
                            11513 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11514 ; 210  |#define DebugBuildAssert(x)    
                            11515 ; 211  |#endif
                            11516 ; 212  |
                            11517 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11518 ; 214  |//  #pragma asm
                            11519 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11520 ; 216  |//  #pragma endasm
                            11521 ; 217  |
                            11522 ; 218  |
                            11523 ; 219  |#ifdef COLOR_262K
                            11524 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11525 ; 221  |#elif defined(COLOR_65K)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 191

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11526 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11527 ; 223  |#else
                            11528 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11529 ; 225  |#endif
                            11530 ; 226  |    
                            11531 ; 227  |#endif // #ifndef _TYPES_H
                            11532 
                            11534 
                            11535 ; 29   |
                            11536 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                            11537 ; 31   |////   I2C STMP Registers
                            11538 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                            11539 ; 33   |
                            11540 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                            11541 ; 35   |
                            11542 ; 36   |
                            11543 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                            11544 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                            11545 ; 39   |
                            11546 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                            11547 ; 41   |
                            11548 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                            11549 ; 43   |
                            11550 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                            11551 ; 45   |
                            11552 ; 46   |typedef union               /* I2C Clock Divider Register */
                            11553 ; 47   |{
                            11554 ; 48   |    struct {
                            11555 ; 49   |        int                :1; 
                            11556 ; 50   |        unsigned FACT      :8;
                            11557 ; 51   |    } B;
                            11558 ; 52   |    int I;
                            11559 ; 53   |    unsigned U;
                            11560 ; 54   |} i2cdivr_type;
                            11561 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Re
                                  gisters        */
                            11562 ; 56   |
                            11563 ; 57   |
                            11564 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                            11565 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                            11566 ; 60   |
                            11567 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                            11568 ; 62   |
                            11569 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                            11570 ; 64   |
                            11571 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                            11572 ; 66   |
                            11573 ; 67   |typedef union               /* I2C Data Register */
                            11574 ; 68   |{
                            11575 ; 69   |    struct {
                            11576 ; 70   |         unsigned DATA :24; 
                            11577 ; 71   |    } B;
                            11578 ; 72   |    int I;
                            11579 ; 73   |    unsigned U;
                            11580 ; 74   |} i2cdatr_type;
                            11581 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers
                                   (I2CDAT)      */
                            11582 ; 76   |
                            11583 ; 77   |
                            11584 ; 78   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 192

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11585 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                            11586 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                            11587 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                            11588 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                            11589 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                            11590 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                            11591 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                            11592 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                            11593 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                            11594 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                            11595 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                            11596 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                            11597 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                            11598 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                            11599 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                            11600 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                            11601 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                            11602 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                            11603 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                            11604 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                            11605 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                            11606 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                            11607 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                            11608 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                            11609 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                            11610 ; 104  |
                            11611 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                            11612 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                            11613 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                            11614 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                            11615 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                            11616 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                            11617 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                            11618 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                            11619 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                            11620 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                            11621 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                            11622 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                            11623 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                            11624 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                            11625 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                            11626 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                            11627 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                            11628 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                            11629 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                            11630 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                            11631 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                            11632 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                            11633 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                            11634 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                            11635 ; 129  |
                            11636 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                            11637 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                            11638 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                            11639 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                            11640 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                            11641 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                            11642 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                            11643 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                            11644 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                            11645 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                            11646 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 193

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11647 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                            11648 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                            11649 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                            11650 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                            11651 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                            11652 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                            11653 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                            11654 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                            11655 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                            11656 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                            11657 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                            11658 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                            11659 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                            11660 ; 154  |
                            11661 ; 155  |typedef union               /* I2C Control Register         */
                            11662 ; 156  |{
                            11663 ; 157  |    struct {
                            11664 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                            11665 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                            11666 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                            11667 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                            11668 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                            11669 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                            11670 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                            11671 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                            11672 ; 166  |       int RWN         :1; /* Read/Not Write           */
                            11673 ; 167  |       unsigned WL     :2; /* Word Length              */
                            11674 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                            11675 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                            11676 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                            11677 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                            11678 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                            11679 ; 173  |        int LWORD       :1; /* Last Word                */
                            11680 ; 174  |        int SUBA        :1; /* Sub Address              */
                            11681 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                            11682 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                            11683 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                            11684 ; 178  |    } B;
                            11685 ; 179  |    int I;
                            11686 ; 180  |    unsigned U;
                            11687 ; 181  |} i2ccsr_type;
                            11688 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status 
                                  Register (I2CCSR) */
                            11689 ; 183  |
                            11690 ; 184  |#endif
                            11691 
                            11693 
                            11694 ; 24   |#include "regsi2s.h"
                            11695 
                            11697 
                            11698 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            11699 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            11700 ; 3    |// Filename: regsi2s.inc
                            11701 ; 4    |// Description: Register definitions for I2S interface
                            11702 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            11703 ; 6    |// The following naming conventions are followed in this file.
                            11704 ; 7    |// All registers are named using the format...
                            11705 ; 8    |//     HW_<module>_<regname>
                            11706 ; 9    |// where <module> is the module name which can be any of the following...
                            11707 ; 10   |//     USB20
                            11708 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            11709 ; 12   |// module name includes a number starting from 0 for the first instance of
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 194

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11710 ; 13   |// that module)
                            11711 ; 14   |// <regname> is the specific register within that module
                            11712 ; 15   |// We also define the following...
                            11713 ; 16   |//     HW_<module>_<regname>_BITPOS
                            11714 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11715 ; 18   |//     HW_<module>_<regname>_SETMASK
                            11716 ; 19   |// which does something else, and
                            11717 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            11718 ; 21   |// which does something else.
                            11719 ; 22   |// Other rules
                            11720 ; 23   |//     All caps
                            11721 ; 24   |//     Numeric identifiers start at 0
                            11722 ; 25   |#if !(defined(regsi2sinc))
                            11723 ; 26   |#define regsi2sinc 1
                            11724 ; 27   |
                            11725 ; 28   |#include "types.h"
                            11726 
                            11728 
                            11729 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11730 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11731 ; 3    |//
                            11732 ; 4    |// Filename: types.h
                            11733 ; 5    |// Description: Standard data types
                            11734 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11735 ; 7    |
                            11736 ; 8    |#ifndef _TYPES_H
                            11737 ; 9    |#define _TYPES_H
                            11738 ; 10   |
                            11739 ; 11   |// TODO:  move this outta here!
                            11740 ; 12   |#if !defined(NOERROR)
                            11741 ; 13   |#define NOERROR 0
                            11742 ; 14   |#define SUCCESS 0
                            11743 ; 15   |#endif 
                            11744 ; 16   |#if !defined(SUCCESS)
                            11745 ; 17   |#define SUCCESS  0
                            11746 ; 18   |#endif
                            11747 ; 19   |#if !defined(ERROR)
                            11748 ; 20   |#define ERROR   -1
                            11749 ; 21   |#endif
                            11750 ; 22   |#if !defined(FALSE)
                            11751 ; 23   |#define FALSE 0
                            11752 ; 24   |#endif
                            11753 ; 25   |#if !defined(TRUE)
                            11754 ; 26   |#define TRUE  1
                            11755 ; 27   |#endif
                            11756 ; 28   |
                            11757 ; 29   |#if !defined(NULL)
                            11758 ; 30   |#define NULL 0
                            11759 ; 31   |#endif
                            11760 ; 32   |
                            11761 ; 33   |#define MAX_INT     0x7FFFFF
                            11762 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11763 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11764 ; 36   |#define MAX_ULONG   (-1) 
                            11765 ; 37   |
                            11766 ; 38   |#define WORD_SIZE   24              // word size in bits
                            11767 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11768 ; 40   |
                            11769 ; 41   |
                            11770 ; 42   |#define BYTE    unsigned char       // btVarName
                            11771 ; 43   |#define CHAR    signed char         // cVarName
                            11772 ; 44   |#define USHORT  unsigned short      // usVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 195

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11773 ; 45   |#define SHORT   unsigned short      // sVarName
                            11774 ; 46   |#define WORD    unsigned int        // wVarName
                            11775 ; 47   |#define INT     signed int          // iVarName
                            11776 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11777 ; 49   |#define LONG    signed long         // lVarName
                            11778 ; 50   |#define BOOL    unsigned int        // bVarName
                            11779 ; 51   |#define FRACT   _fract              // frVarName
                            11780 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11781 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11782 ; 54   |#define FLOAT   float               // fVarName
                            11783 ; 55   |#define DBL     double              // dVarName
                            11784 ; 56   |#define ENUM    enum                // eVarName
                            11785 ; 57   |#define CMX     _complex            // cmxVarName
                            11786 ; 58   |typedef WORD UCS3;                   // 
                            11787 ; 59   |
                            11788 ; 60   |#define UINT16  unsigned short
                            11789 ; 61   |#define UINT8   unsigned char   
                            11790 ; 62   |#define UINT32  unsigned long
                            11791 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11792 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11793 ; 65   |#define WCHAR   UINT16
                            11794 ; 66   |
                            11795 ; 67   |//UINT128 is 16 bytes or 6 words
                            11796 ; 68   |typedef struct UINT128_3500 {   
                            11797 ; 69   |    int val[6];     
                            11798 ; 70   |} UINT128_3500;
                            11799 ; 71   |
                            11800 ; 72   |#define UINT128   UINT128_3500
                            11801 ; 73   |
                            11802 ; 74   |// Little endian word packed byte strings:   
                            11803 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11804 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11805 ; 77   |// Little endian word packed byte strings:   
                            11806 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11807 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11808 ; 80   |
                            11809 ; 81   |// Declare Memory Spaces To Use When Coding
                            11810 ; 82   |// A. Sector Buffers
                            11811 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11812 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11813 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11814 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11815 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11816 ; 88   |// B. Media DDI Memory
                            11817 ; 89   |#define MEDIA_DDI_MEM _Y
                            11818 ; 90   |
                            11819 ; 91   |
                            11820 ; 92   |
                            11821 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11822 ; 94   |// Examples of circular pointers:
                            11823 ; 95   |//    INT CIRC cpiVarName
                            11824 ; 96   |//    DWORD CIRC cpdwVarName
                            11825 ; 97   |
                            11826 ; 98   |#define RETCODE INT                 // rcVarName
                            11827 ; 99   |
                            11828 ; 100  |// generic bitfield structure
                            11829 ; 101  |struct Bitfield {
                            11830 ; 102  |    unsigned int B0  :1;
                            11831 ; 103  |    unsigned int B1  :1;
                            11832 ; 104  |    unsigned int B2  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 196

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11833 ; 105  |    unsigned int B3  :1;
                            11834 ; 106  |    unsigned int B4  :1;
                            11835 ; 107  |    unsigned int B5  :1;
                            11836 ; 108  |    unsigned int B6  :1;
                            11837 ; 109  |    unsigned int B7  :1;
                            11838 ; 110  |    unsigned int B8  :1;
                            11839 ; 111  |    unsigned int B9  :1;
                            11840 ; 112  |    unsigned int B10 :1;
                            11841 ; 113  |    unsigned int B11 :1;
                            11842 ; 114  |    unsigned int B12 :1;
                            11843 ; 115  |    unsigned int B13 :1;
                            11844 ; 116  |    unsigned int B14 :1;
                            11845 ; 117  |    unsigned int B15 :1;
                            11846 ; 118  |    unsigned int B16 :1;
                            11847 ; 119  |    unsigned int B17 :1;
                            11848 ; 120  |    unsigned int B18 :1;
                            11849 ; 121  |    unsigned int B19 :1;
                            11850 ; 122  |    unsigned int B20 :1;
                            11851 ; 123  |    unsigned int B21 :1;
                            11852 ; 124  |    unsigned int B22 :1;
                            11853 ; 125  |    unsigned int B23 :1;
                            11854 ; 126  |};
                            11855 ; 127  |
                            11856 ; 128  |union BitInt {
                            11857 ; 129  |        struct Bitfield B;
                            11858 ; 130  |        int        I;
                            11859 ; 131  |};
                            11860 ; 132  |
                            11861 ; 133  |#define MAX_MSG_LENGTH 10
                            11862 ; 134  |struct CMessage
                            11863 ; 135  |{
                            11864 ; 136  |        unsigned int m_uLength;
                            11865 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11866 ; 138  |};
                            11867 ; 139  |
                            11868 ; 140  |typedef struct {
                            11869 ; 141  |    WORD m_wLength;
                            11870 ; 142  |    WORD m_wMessage;
                            11871 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11872 ; 144  |} Message;
                            11873 ; 145  |
                            11874 ; 146  |struct MessageQueueDescriptor
                            11875 ; 147  |{
                            11876 ; 148  |        int *m_pBase;
                            11877 ; 149  |        int m_iModulo;
                            11878 ; 150  |        int m_iSize;
                            11879 ; 151  |        int *m_pHead;
                            11880 ; 152  |        int *m_pTail;
                            11881 ; 153  |};
                            11882 ; 154  |
                            11883 ; 155  |struct ModuleEntry
                            11884 ; 156  |{
                            11885 ; 157  |    int m_iSignaledEventMask;
                            11886 ; 158  |    int m_iWaitEventMask;
                            11887 ; 159  |    int m_iResourceOfCode;
                            11888 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11889 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11890 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11891 ; 163  |    int m_uTimeOutHigh;
                            11892 ; 164  |    int m_uTimeOutLow;
                            11893 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 197

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11894 ; 166  |};
                            11895 ; 167  |
                            11896 ; 168  |union WaitMask{
                            11897 ; 169  |    struct B{
                            11898 ; 170  |        unsigned int m_bNone     :1;
                            11899 ; 171  |        unsigned int m_bMessage  :1;
                            11900 ; 172  |        unsigned int m_bTimer    :1;
                            11901 ; 173  |        unsigned int m_bButton   :1;
                            11902 ; 174  |    } B;
                            11903 ; 175  |    int I;
                            11904 ; 176  |} ;
                            11905 ; 177  |
                            11906 ; 178  |
                            11907 ; 179  |struct Button {
                            11908 ; 180  |        WORD wButtonEvent;
                            11909 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11910 ; 182  |};
                            11911 ; 183  |
                            11912 ; 184  |struct Message {
                            11913 ; 185  |        WORD wMsgLength;
                            11914 ; 186  |        WORD wMsgCommand;
                            11915 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11916 ; 188  |};
                            11917 ; 189  |
                            11918 ; 190  |union EventTypes {
                            11919 ; 191  |        struct CMessage msg;
                            11920 ; 192  |        struct Button Button ;
                            11921 ; 193  |        struct Message Message;
                            11922 ; 194  |};
                            11923 ; 195  |
                            11924 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11925 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11926 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11927 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11928 ; 200  |
                            11929 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11930 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11931 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11932 ; 204  |
                            11933 ; 205  |#if DEBUG
                            11934 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11935 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11936 ; 208  |#else 
                            11937 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11938 ; 210  |#define DebugBuildAssert(x)    
                            11939 ; 211  |#endif
                            11940 ; 212  |
                            11941 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11942 ; 214  |//  #pragma asm
                            11943 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11944 ; 216  |//  #pragma endasm
                            11945 ; 217  |
                            11946 ; 218  |
                            11947 ; 219  |#ifdef COLOR_262K
                            11948 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11949 ; 221  |#elif defined(COLOR_65K)
                            11950 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11951 ; 223  |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 198

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11952 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11953 ; 225  |#endif
                            11954 ; 226  |    
                            11955 ; 227  |#endif // #ifndef _TYPES_H
                            11956 
                            11958 
                            11959 ; 29   |
                            11960 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                            11961 ; 31   |////  I2S Registers (SAI)
                            11962 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                            11963 ; 33   |
                            11964 ; 34   |
                            11965 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                            11966 ; 36   |
                            11967 ; 37   |
                            11968 ; 38   |
                            11969 ; 39   |
                            11970 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                            11971 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                            11972 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                            11973 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                            11974 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                            11975 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                            11976 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                            11977 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                            11978 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                            11979 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                            11980 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                            11981 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                            11982 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                            11983 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                            11984 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                            11985 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                            11986 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                            11987 ; 57   |
                            11988 ; 58   |
                            11989 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                            11990 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                            11991 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                            11992 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                            11993 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                            11994 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                            11995 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                            11996 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                            11997 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                            11998 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                            11999 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                            12000 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                            12001 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                            12002 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                            12003 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                            12004 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                            12005 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                            12006 ; 76   |
                            12007 ; 77   |
                            12008 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                            12009 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                            12010 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                            12011 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                            12012 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                                  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 199

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12013 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                            12014 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                            12015 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                            12016 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                            12017 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                            12018 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                            12019 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                            12020 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                                  
                            12021 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                            12022 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                            12023 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                                  
                            12024 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                                  
                            12025 ; 95   |
                            12026 ; 96   |
                            12027 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                            12028 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                            12029 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                            12030 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                            12031 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                            12032 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                            12033 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                            12034 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                            12035 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                            12036 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                            12037 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                            12038 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                            12039 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                            12040 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                            12041 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                            12042 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                            12043 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                            12044 ; 114  |
                            12045 ; 115  |typedef union
                            12046 ; 116  |{
                            12047 ; 117  |    struct {
                            12048 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                            12049 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                            12050 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                            12051 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                            12052 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                            12053 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                            12054 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                            12055 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                            12056 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                            12057 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                            12058 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                                  
                            12059 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                            12060 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                            12061 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                            12062 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                            12063 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                            12064 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                            12065 ; 135  |    } B;
                            12066 ; 136  |    int I;
                            12067 ; 137  |    unsigned U;
                            12068 ; 138  |} saircsr_type;
                            12069 ; 139  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 200

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12070 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive C
                                  SR         */
                            12071 ; 141  |
                            12072 ; 142  |typedef union
                            12073 ; 143  |{
                            12074 ; 144  |    struct {
                            12075 ; 145  |        unsigned SAI :24;
                            12076 ; 146  |    } B;
                            12077 ; 147  |    int I;
                            12078 ; 148  |    unsigned U;
                            12079 ; 149  |} saixr_type;
                            12080 ; 150  |
                            12081 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received
                                   data reg 0 */
                            12082 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received
                                   data reg 1 */
                            12083 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received
                                   data reg 2 */
                            12084 ; 154  |
                            12085 ; 155  |
                            12086 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                            12087 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                            12088 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                            12089 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                            12090 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                            12091 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                            12092 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                            12093 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                            12094 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                            12095 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                            12096 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                            12097 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                            12098 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                            12099 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                            12100 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                            12101 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                            12102 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                            12103 ; 173  |
                            12104 ; 174  |
                            12105 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                            12106 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                            12107 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                            12108 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                            12109 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                            12110 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                            12111 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                            12112 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                            12113 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                            12114 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                            12115 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                            12116 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                            12117 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                            12118 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                            12119 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                            12120 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                            12121 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                            12122 ; 192  |
                            12123 ; 193  |
                            12124 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                            12125 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                            12126 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                            12127 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 201

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12128 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                                  
                            12129 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                            12130 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                            12131 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                            12132 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                            12133 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                            12134 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                            12135 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                            12136 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                                  
                            12137 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                            12138 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                            12139 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                                  
                            12140 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                                  
                            12141 ; 211  |
                            12142 ; 212  |
                            12143 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                            12144 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                            12145 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                            12146 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                            12147 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                            12148 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                            12149 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                            12150 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                            12151 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                            12152 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                            12153 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                            12154 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                            12155 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                            12156 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                            12157 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                            12158 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                            12159 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                            12160 ; 230  |
                            12161 ; 231  |
                            12162 ; 232  |typedef union
                            12163 ; 233  |{
                            12164 ; 234  |    struct {
                            12165 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                            12166 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                            12167 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                            12168 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                            12169 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                            12170 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                            12171 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction
                                   
                            12172 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                            12173 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                            12174 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                            12175 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justificat
                                  ion
                            12176 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                            12177 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                            12178 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                            12179 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                            12180 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                            12181 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                            12182 ; 252  |    } B;
                            12183 ; 253  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 202

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12184 ; 254  |    unsigned U;
                            12185 ; 255  |} saitcsr_type;
                            12186 ; 256  |
                            12187 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR 
                                       */
                            12188 ; 258  |
                            12189 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit
                                   data reg 0 */
                            12190 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit
                                   data reg 1 */
                            12191 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit
                                   data reg 2 */
                            12192 ; 262  |
                            12193 ; 263  |#endif
                            12194 
                            12196 
                            12197 ; 25   |#include "regsicoll.h"
                            12198 
                            12200 
                            12201 ; 1    |#if !defined(__REGS_ICOLL_INC)
                            12202 ; 2    |#define __REGS_ICOLL_INC 1
                            12203 ; 3    |
                            12204 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            12205 ; 5    |//  Interrupt Collector Registers
                            12206 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            12207 ; 7    |
                            12208 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                            12209 ; 9    |
                            12210 ; 10   |
                            12211 ; 11   |
                            12212 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                            12213 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                            12214 ; 14   |
                            12215 ; 15   |typedef union
                            12216 ; 16   |{
                            12217 ; 17   |    struct {
                            12218 ; 18   |        int SEN0        :1;
                            12219 ; 19   |        int SEN1        :1;
                            12220 ; 20   |        int SEN2        :1;
                            12221 ; 21   |        int SEN3        :1;
                            12222 ; 22   |        int SEN4        :1;
                            12223 ; 23   |        int SEN5        :1;
                            12224 ; 24   |        int SEN6        :1;
                            12225 ; 25   |        int SEN7        :1;
                            12226 ; 26   |        int SEN8        :1;
                            12227 ; 27   |        int SEN9        :1;
                            12228 ; 28   |        int SEN10       :1;
                            12229 ; 29   |        int SEN11       :1;
                            12230 ; 30   |        int SEN12       :1;
                            12231 ; 31   |        int SEN13       :1;
                            12232 ; 32   |        int SEN14       :1;
                            12233 ; 33   |        int SEN15       :1;
                            12234 ; 34   |        int SEN16       :1;
                            12235 ; 35   |        int SEN17       :1;
                            12236 ; 36   |        int SEN18       :1;
                            12237 ; 37   |        int SEN19       :1;
                            12238 ; 38   |        int SEN20       :1;
                            12239 ; 39   |        int SEN21       :1;
                            12240 ; 40   |        int SEN22       :1;
                            12241 ; 41   |        int SEN23       :1;
                            12242 ; 42   |    } B;
                            12243 ; 43   |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 203

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12244 ; 44   |} iclenable0_type;
                            12245 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                            12246 ; 46   |
                            12247 ; 47   |
                            12248 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                            12249 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                            12250 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                            12251 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                            12252 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                            12253 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                            12254 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                            12255 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                            12256 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                            12257 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                            12258 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                            12259 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                            12260 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                            12261 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                            12262 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                            12263 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                            12264 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                            12265 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                            12266 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                            12267 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                            12268 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                            12269 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                            12270 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                            12271 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                            12272 ; 72   |
                            12273 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                            12274 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                            12275 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                            12276 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                            12277 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                            12278 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                            12279 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                            12280 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                            12281 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                            12282 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                            12283 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                            12284 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                            12285 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                            12286 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                            12287 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                            12288 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                            12289 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                            12290 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                            12291 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                            12292 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                            12293 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                            12294 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                            12295 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                            12296 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                            12297 ; 97   |
                            12298 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                            12299 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                            12300 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                            12301 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                            12302 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                            12303 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                            12304 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 204

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12305 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                            12306 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                            12307 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                            12308 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                            12309 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                            12310 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                            12311 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                            12312 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                            12313 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                            12314 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                            12315 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                            12316 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                            12317 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                            12318 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                            12319 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                            12320 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                            12321 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                            12322 ; 122  |
                            12323 ; 123  |
                            12324 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                            12325 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                            12326 ; 126  |typedef union
                            12327 ; 127  |{
                            12328 ; 128  |    struct {
                            12329 ; 129  |        
                            12330 ; 130  |        int SEN24       :1;
                            12331 ; 131  |        int SEN25       :1;
                            12332 ; 132  |        int SEN26       :1;
                            12333 ; 133  |        int SEN27       :1;
                            12334 ; 134  |        int SEN28       :1;
                            12335 ; 135  |        int SEN29       :1;
                            12336 ; 136  |        int SEN30       :1;
                            12337 ; 137  |        int SEN31       :1;
                            12338 ; 138  |        int SEN32       :1;
                            12339 ; 139  |        int SEN33       :1;
                            12340 ; 140  |    } B;
                            12341 ; 141  |    int I;
                            12342 ; 142  |} iclenable1_type;
                            12343 ; 143  |
                            12344 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                            12345 ; 145  |
                            12346 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                            12347 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                            12348 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                            12349 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                            12350 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                            12351 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                            12352 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                            12353 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                            12354 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                            12355 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                            12356 ; 156  |
                            12357 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                            12358 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                            12359 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                            12360 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                            12361 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                            12362 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                            12363 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                            12364 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                            12365 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 205

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12366 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                            12367 ; 167  |
                            12368 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                            12369 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                            12370 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                            12371 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                            12372 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                            12373 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                            12374 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                            12375 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                            12376 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                            12377 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                            12378 ; 178  |
                            12379 ; 179  |
                            12380 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                            12381 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                            12382 ; 182  |typedef union
                            12383 ; 183  |{
                            12384 ; 184  |    struct {
                            12385 ; 185  |        int SST0        :1;
                            12386 ; 186  |        int SST1        :1;
                            12387 ; 187  |        int SST2        :1;
                            12388 ; 188  |        int SST3        :1;
                            12389 ; 189  |        int SST4        :1;
                            12390 ; 190  |        int SST5        :1;
                            12391 ; 191  |        int SST6        :1;
                            12392 ; 192  |        int SST7        :1;
                            12393 ; 193  |        int SST8        :1;
                            12394 ; 194  |        int SST9        :1;
                            12395 ; 195  |        int SST10       :1;
                            12396 ; 196  |        int SST11       :1;
                            12397 ; 197  |        int SST12       :1;
                            12398 ; 198  |        int SST13       :1;
                            12399 ; 199  |        int SST14       :1;
                            12400 ; 200  |        int SST15       :1;
                            12401 ; 201  |        int SST16       :1;
                            12402 ; 202  |        int SST17       :1;
                            12403 ; 203  |        int SST18       :1;
                            12404 ; 204  |        int SST19       :1;
                            12405 ; 205  |        int SST20       :1;
                            12406 ; 206  |        int SST21       :1;
                            12407 ; 207  |        int SST22       :1;
                            12408 ; 208  |        int SST23       :1;
                            12409 ; 209  |    } B;
                            12410 ; 210  |    int I;
                            12411 ; 211  |} iclstatus0_type;
                            12412 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                            12413 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                            12414 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                            12415 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                            12416 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                            12417 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                            12418 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                            12419 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                            12420 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                            12421 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                            12422 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                            12423 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                            12424 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                            12425 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                            12426 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 206

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12427 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                            12428 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                            12429 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                            12430 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                            12431 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                            12432 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                            12433 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                            12434 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                            12435 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                            12436 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                            12437 ; 237  |
                            12438 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                            12439 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                            12440 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                            12441 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                            12442 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                            12443 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                            12444 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                            12445 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                            12446 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                            12447 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                            12448 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                            12449 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                            12450 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                            12451 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                            12452 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                            12453 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                            12454 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                            12455 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                            12456 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                            12457 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                            12458 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                            12459 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                            12460 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                            12461 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                            12462 ; 262  |
                            12463 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                            12464 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                            12465 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                            12466 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                            12467 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                            12468 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                            12469 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                            12470 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                            12471 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                            12472 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                            12473 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                            12474 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                            12475 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                            12476 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                            12477 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                            12478 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                            12479 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                            12480 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                            12481 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                            12482 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                            12483 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                            12484 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                            12485 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                            12486 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                            12487 ; 287  |
                            12488 ; 288  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 207

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12489 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                            12490 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                            12491 ; 291  |typedef union
                            12492 ; 292  |{
                            12493 ; 293  |    struct {
                            12494 ; 294  |        int SST24       :1;
                            12495 ; 295  |        int SST25       :1;
                            12496 ; 296  |        int SST26       :1;
                            12497 ; 297  |        int SST27       :1;
                            12498 ; 298  |        int SST28       :1;
                            12499 ; 299  |        int SST29       :1;
                            12500 ; 300  |        int SST30       :1;
                            12501 ; 301  |        int SST31       :1;
                            12502 ; 302  |        int SST32       :1;
                            12503 ; 303  |        int SST33       :1;
                            12504 ; 304  |    } B;
                            12505 ; 305  |    int I;
                            12506 ; 306  |} iclstatus1_type;
                            12507 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                            12508 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                            12509 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                            12510 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                            12511 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                            12512 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                            12513 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                            12514 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                            12515 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                            12516 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                            12517 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                            12518 ; 318  |
                            12519 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                            12520 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                            12521 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                            12522 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                            12523 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                            12524 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                            12525 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                            12526 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                            12527 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                            12528 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                            12529 ; 329  |
                            12530 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                            12531 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                            12532 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                            12533 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                            12534 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                            12535 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                            12536 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                            12537 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                            12538 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                            12539 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                            12540 ; 340  |
                            12541 ; 341  |
                            12542 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                            12543 ; 343  |//  Interrupt Collector Priority Defs
                            12544 ; 344  |typedef union
                            12545 ; 345  |{
                            12546 ; 346  |    struct {
                            12547 ; 347  |        unsigned S0P    :3;
                            12548 ; 348  |        unsigned S1P    :3;
                            12549 ; 349  |        unsigned S2P    :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 208

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12550 ; 350  |        unsigned S3P    :3;
                            12551 ; 351  |        unsigned S4P    :3;
                            12552 ; 352  |        unsigned S5P    :3;
                            12553 ; 353  |        unsigned S6P    :3;
                            12554 ; 354  |        unsigned S7P    :3;
                            12555 ; 355  |    } B;
                            12556 ; 356  |    int I;
                            12557 ; 357  |
                            12558 ; 358  |} iclprior0_type;
                            12559 ; 359  |
                            12560 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                            12561 ; 361  |
                            12562 ; 362  |#define HW_ICLPRIORR_SP_0 0
                            12563 ; 363  |#define HW_ICLPRIORR_SP_1 1
                            12564 ; 364  |#define HW_ICLPRIORR_SP_2 2
                            12565 ; 365  |#define HW_ICLPRIORR_SP_3 3
                            12566 ; 366  |#define HW_ICLPRIORR_SP_4 4
                            12567 ; 367  |#define HW_ICLPRIORR_SP_5 5
                            12568 ; 368  |#define HW_ICLPRIORR_SP_6 6
                            12569 ; 369  |#define HW_ICLPRIORR_SP_7 7
                            12570 ; 370  |
                            12571 ; 371  |
                            12572 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                            12573 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                            12574 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                            12575 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                            12576 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                            12577 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                            12578 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                            12579 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                            12580 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                            12581 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                            12582 ; 382  |
                            12583 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                            12584 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                            12585 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                            12586 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                            12587 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                            12588 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                            12589 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                            12590 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                            12591 ; 391  |
                            12592 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                            12593 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                            12594 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                            12595 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                            12596 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                            12597 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                            12598 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                            12599 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                            12600 ; 400  |
                            12601 ; 401  |
                            12602 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                            12603 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                            12604 ; 404  |typedef union
                            12605 ; 405  |{
                            12606 ; 406  |    struct {
                            12607 ; 407  |        unsigned S8P    :3;
                            12608 ; 408  |        unsigned S9P    :3;
                            12609 ; 409  |        unsigned S10P   :3;
                            12610 ; 410  |        unsigned S11P   :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 209

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12611 ; 411  |        unsigned S12P   :3;
                            12612 ; 412  |        unsigned S13P   :3;
                            12613 ; 413  |        unsigned S14P   :3;
                            12614 ; 414  |        unsigned S15P   :3;
                            12615 ; 415  |    } B;
                            12616 ; 416  |    int I;
                            12617 ; 417  |} iclprior1_type;
                            12618 ; 418  |
                            12619 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                            12620 ; 420  |
                            12621 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                            12622 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                            12623 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                            12624 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                            12625 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                            12626 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                            12627 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                            12628 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                            12629 ; 429  |
                            12630 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                            12631 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                            12632 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                            12633 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                            12634 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                            12635 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                            12636 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                            12637 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                            12638 ; 438  |
                            12639 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                            12640 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                            12641 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                            12642 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                            12643 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                            12644 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                            12645 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                            12646 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                            12647 ; 447  |
                            12648 ; 448  |
                            12649 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                            12650 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                            12651 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                            12652 ; 452  |{
                            12653 ; 453  |    struct {
                            12654 ; 454  |        unsigned S16P   :3;
                            12655 ; 455  |        unsigned S17P   :3;
                            12656 ; 456  |        unsigned S18P   :3;
                            12657 ; 457  |        unsigned S19P   :3;
                            12658 ; 458  |        unsigned S20P   :3;
                            12659 ; 459  |        unsigned S21P   :3;
                            12660 ; 460  |        unsigned S22P   :3;
                            12661 ; 461  |        unsigned S23P   :3;
                            12662 ; 462  |    } B;
                            12663 ; 463  |    int I;
                            12664 ; 464  |} iclprior2_type;
                            12665 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
                            12666 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                            12667 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                            12668 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                            12669 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                            12670 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 210

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12671 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                            12672 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                            12673 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                            12674 ; 474  |
                            12675 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                            12676 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                            12677 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                            12678 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                            12679 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                            12680 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                            12681 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                            12682 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                            12683 ; 483  |
                            12684 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                            12685 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                            12686 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                            12687 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                            12688 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                            12689 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                            12690 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                            12691 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                            12692 ; 492  |
                            12693 ; 493  |
                            12694 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                            12695 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                            12696 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                            12697 ; 497  |{
                            12698 ; 498  |    struct {
                            12699 ; 499  |        unsigned S24P   :3;
                            12700 ; 500  |        unsigned S25P   :3;
                            12701 ; 501  |        unsigned S26P   :3;
                            12702 ; 502  |        unsigned S27P   :3;
                            12703 ; 503  |        unsigned S28P   :3;
                            12704 ; 504  |        unsigned S29P   :3;
                            12705 ; 505  |        unsigned S30P   :3;
                            12706 ; 506  |        unsigned S31P   :3;
                            12707 ; 507  |    } B;
                            12708 ; 508  |    int I;
                            12709 ; 509  |} iclprior3_type;
                            12710 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                            12711 ; 511  |
                            12712 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                            12713 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                            12714 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                            12715 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                            12716 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                            12717 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                            12718 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                            12719 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                            12720 ; 520  |
                            12721 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                            12722 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                            12723 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                            12724 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                            12725 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                            12726 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                            12727 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                            12728 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                            12729 ; 529  |
                            12730 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                            12731 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 211

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12732 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                            12733 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                            12734 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                            12735 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                            12736 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                            12737 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                            12738 ; 538  |
                            12739 ; 539  |
                            12740 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            12741 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                            12742 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                            12743 ; 543  |{
                            12744 ; 544  |    struct {
                            12745 ; 545  |        unsigned S32P   :3;
                            12746 ; 546  |        unsigned S33P   :3;
                            12747 ; 547  |    } B;
                            12748 ; 548  |    int I;
                            12749 ; 549  |} iclprior4_type;
                            12750 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                            12751 ; 551  |
                            12752 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                            12753 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                            12754 ; 554  |
                            12755 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                            12756 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                            12757 ; 557  |
                            12758 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                            12759 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                            12760 ; 560  |
                            12761 ; 561  |
                            12762 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                            12763 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                            12764 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                            12765 ; 565  |{
                            12766 ; 566  |    struct {
                            12767 ; 567  |        unsigned S0S    :2;
                            12768 ; 568  |        unsigned S1S    :2;
                            12769 ; 569  |        unsigned S2S    :2;
                            12770 ; 570  |        unsigned S3S    :2;
                            12771 ; 571  |        unsigned S4S    :2;
                            12772 ; 572  |        unsigned S5S    :2;
                            12773 ; 573  |        unsigned S6S    :2;
                            12774 ; 574  |        unsigned S7S    :2;
                            12775 ; 575  |        unsigned S8S    :2;
                            12776 ; 576  |        unsigned S9S    :2;
                            12777 ; 577  |        unsigned S10S   :2;
                            12778 ; 578  |        unsigned S11S   :2;
                            12779 ; 579  |    } B;
                            12780 ; 580  |    int I;
                            12781 ; 581  |} iclsteer0_type;
                            12782 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                            12783 ; 583  |
                            12784 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                            12785 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                            12786 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                            12787 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                            12788 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                            12789 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                            12790 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                            12791 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 212

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12792 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                            12793 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                            12794 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                            12795 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                            12796 ; 596  |
                            12797 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                            12798 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                            12799 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                            12800 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                            12801 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                            12802 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                            12803 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                            12804 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                            12805 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                            12806 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                            12807 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                            12808 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                            12809 ; 609  |
                            12810 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                            12811 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                            12812 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                            12813 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                            12814 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                            12815 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                            12816 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                            12817 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                            12818 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                            12819 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                            12820 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                            12821 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                            12822 ; 622  |
                            12823 ; 623  |
                            12824 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                            12825 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                            12826 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                            12827 ; 627  |{
                            12828 ; 628  |    struct {
                            12829 ; 629  |        unsigned S12S   :2;
                            12830 ; 630  |        unsigned S13S   :2;
                            12831 ; 631  |        unsigned S14S   :2;
                            12832 ; 632  |        unsigned S15S   :2;
                            12833 ; 633  |        unsigned S16S   :2;
                            12834 ; 634  |        unsigned S17S   :2;
                            12835 ; 635  |        unsigned S18S   :2;
                            12836 ; 636  |        unsigned S19S   :2;
                            12837 ; 637  |        unsigned S20S   :2;
                            12838 ; 638  |        unsigned S21S   :2;
                            12839 ; 639  |        unsigned S22S   :2;
                            12840 ; 640  |        unsigned S23S   :2;
                            12841 ; 641  |    } B;
                            12842 ; 642  |    int I;
                            12843 ; 643  |} iclsteer1_type;
                            12844 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                            12845 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                            12846 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                            12847 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                            12848 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                            12849 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                            12850 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                            12851 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                            12852 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 213

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12853 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                            12854 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                            12855 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                            12856 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                            12857 ; 657  |
                            12858 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                            12859 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                            12860 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                            12861 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                            12862 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                            12863 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                            12864 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                            12865 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                            12866 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                            12867 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                            12868 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                            12869 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                            12870 ; 670  |
                            12871 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                            12872 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                            12873 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                            12874 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                            12875 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                            12876 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                            12877 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                            12878 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                            12879 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                            12880 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                            12881 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                            12882 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                            12883 ; 683  |
                            12884 ; 684  |
                            12885 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                            12886 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                            12887 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                            12888 ; 688  |{
                            12889 ; 689  |    struct {
                            12890 ; 690  |        unsigned S24S   :2;
                            12891 ; 691  |        unsigned S25S   :2;
                            12892 ; 692  |        unsigned S26S   :2;
                            12893 ; 693  |        unsigned S27S   :2;
                            12894 ; 694  |        unsigned S28S   :2;
                            12895 ; 695  |        unsigned S29S   :2;
                            12896 ; 696  |        unsigned S30S   :2;
                            12897 ; 697  |        unsigned S31S   :2;
                            12898 ; 698  |        unsigned S32S   :2;
                            12899 ; 699  |        unsigned S33S   :2;
                            12900 ; 700  |    } B;
                            12901 ; 701  |    int I;
                            12902 ; 702  |} iclsteer2_type;
                            12903 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                            12904 ; 704  |
                            12905 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                            12906 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                            12907 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                            12908 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                            12909 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                            12910 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                            12911 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                            12912 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                            12913 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 214

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12914 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                            12915 ; 715  |
                            12916 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                            12917 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                            12918 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                            12919 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                            12920 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                            12921 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                            12922 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                            12923 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                            12924 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                            12925 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                            12926 ; 726  |
                            12927 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                            12928 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                            12929 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                            12930 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                            12931 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                            12932 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                            12933 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                            12934 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                            12935 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                            12936 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                            12937 ; 737  |
                            12938 ; 738  |
                            12939 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                            12940 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                            12941 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                            12942 ; 742  |{
                            12943 ; 743  |    struct {
                            12944 ; 744  |        int S0FV        :1;
                            12945 ; 745  |        int S1FV        :1;
                            12946 ; 746  |        int S2FV        :1;
                            12947 ; 747  |        int S3FV        :1;
                            12948 ; 748  |        int S4FV        :1;
                            12949 ; 749  |        int S5FV        :1;
                            12950 ; 750  |        int S6FV        :1;
                            12951 ; 751  |        int S7FV        :1;
                            12952 ; 752  |        int S8FV        :1;
                            12953 ; 753  |        int S9FV        :1;
                            12954 ; 754  |        int S10FV       :1;
                            12955 ; 755  |        int S11FV       :1;
                            12956 ; 756  |        int S12FV       :1;
                            12957 ; 757  |        int S13FV       :1;
                            12958 ; 758  |        int S14FV       :1;
                            12959 ; 759  |        int S15FV       :1;
                            12960 ; 760  |        int S16FV       :1;
                            12961 ; 761  |        int S17FV       :1;
                            12962 ; 762  |        int S18FV       :1;
                            12963 ; 763  |        int S19FV       :1;
                            12964 ; 764  |        int S20FV       :1;
                            12965 ; 765  |        int S21FV       :1;
                            12966 ; 766  |        int S22FV       :1;
                            12967 ; 767  |        int S23FV       :1;
                            12968 ; 768  |    } B;
                            12969 ; 769  |    int I;
                            12970 ; 770  |} iclforce0_type;
                            12971 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                            12972 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                            12973 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                            12974 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 215

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12975 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                            12976 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                            12977 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                            12978 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                            12979 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                            12980 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                            12981 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                            12982 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                            12983 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                            12984 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                            12985 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                            12986 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                            12987 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                            12988 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                            12989 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                            12990 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                            12991 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                            12992 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                            12993 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                            12994 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                            12995 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                            12996 ; 796  |
                            12997 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                            12998 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                            12999 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                            13000 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                            13001 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                            13002 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                            13003 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                            13004 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                            13005 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                            13006 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                            13007 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                            13008 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                            13009 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                            13010 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                            13011 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                            13012 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                            13013 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                            13014 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                            13015 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                            13016 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                            13017 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                            13018 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                            13019 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                            13020 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                            13021 ; 821  |
                            13022 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                            13023 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                            13024 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                            13025 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                            13026 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                            13027 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                            13028 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                            13029 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                            13030 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                            13031 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                            13032 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                            13033 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                            13034 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                            13035 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                            13036 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 216

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13037 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                            13038 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                            13039 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                            13040 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                            13041 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                            13042 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                            13043 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                            13044 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                            13045 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                            13046 ; 846  |
                            13047 ; 847  |
                            13048 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                            13049 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                            13050 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                            13051 ; 851  |{
                            13052 ; 852  |    struct {
                            13053 ; 853  |        int S24FV       :1;
                            13054 ; 854  |        int S25FV       :1;
                            13055 ; 855  |        int S26FV       :1;
                            13056 ; 856  |        int S27FV       :1;
                            13057 ; 857  |        int S28FV       :1;
                            13058 ; 858  |        int S29FV       :1;
                            13059 ; 859  |        int S30FV       :1;
                            13060 ; 860  |        int S31FV       :1;
                            13061 ; 861  |        int S32FV       :1;
                            13062 ; 862  |        int S33FV       :1;
                            13063 ; 863  |    } B;
                            13064 ; 864  |    int I;
                            13065 ; 865  |} iclforce1_type;
                            13066 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                            13067 ; 867  |
                            13068 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                            13069 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                            13070 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                            13071 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                            13072 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                            13073 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                            13074 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                            13075 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                            13076 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                            13077 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                            13078 ; 878  |
                            13079 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                            13080 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                            13081 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                            13082 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                            13083 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                            13084 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                            13085 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                            13086 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                            13087 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                            13088 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                            13089 ; 889  |
                            13090 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                            13091 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                            13092 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                            13093 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                            13094 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                            13095 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                            13096 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                            13097 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 217

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13098 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                            13099 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                            13100 ; 900  |
                            13101 ; 901  |
                            13102 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                            13103 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                            13104 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                            13105 ; 905  |{
                            13106 ; 906  |    struct {
                            13107 ; 907  |        int S0FE        :1;
                            13108 ; 908  |        int S1FE        :1;
                            13109 ; 909  |        int S2FE        :1;
                            13110 ; 910  |        int S3FE        :1;
                            13111 ; 911  |        int S4FE        :1;
                            13112 ; 912  |        int S5FE        :1;
                            13113 ; 913  |        int S6FE        :1;
                            13114 ; 914  |        int S7FE        :1;
                            13115 ; 915  |        int S8FE        :1;
                            13116 ; 916  |        int S9FE        :1;
                            13117 ; 917  |        int S10FE       :1;
                            13118 ; 918  |        int S11FE       :1;
                            13119 ; 919  |        int S12FE       :1;
                            13120 ; 920  |        int S13FE       :1;
                            13121 ; 921  |        int S14FE       :1;
                            13122 ; 922  |        int S15FE       :1;
                            13123 ; 923  |        int S16FE       :1;
                            13124 ; 924  |        int S17FE       :1;
                            13125 ; 925  |        int S18FE       :1;
                            13126 ; 926  |        int S19FE       :1;
                            13127 ; 927  |        int S20FE       :1;
                            13128 ; 928  |        int S21FE       :1;
                            13129 ; 929  |        int S22FE       :1;
                            13130 ; 930  |        int S23FE       :1;
                            13131 ; 931  |    } B;
                            13132 ; 932  |    int I;
                            13133 ; 933  |} iclfenable0_type;
                            13134 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                            13135 ; 935  |
                            13136 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                            13137 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                            13138 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                            13139 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                            13140 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                            13141 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                            13142 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                            13143 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                            13144 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                            13145 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                            13146 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                            13147 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                            13148 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                            13149 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                            13150 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                            13151 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                            13152 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                            13153 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                            13154 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                            13155 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                            13156 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                            13157 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                            13158 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 218

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13159 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                            13160 ; 960  |
                            13161 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                            13162 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                            13163 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                            13164 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                            13165 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                            13166 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                            13167 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                            13168 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                            13169 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                            13170 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                            13171 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                            13172 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                            13173 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                            13174 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                            13175 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                            13176 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                            13177 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                            13178 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                            13179 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                            13180 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                            13181 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                            13182 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                            13183 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                            13184 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                            13185 ; 985  |
                            13186 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                            13187 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                            13188 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                            13189 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                            13190 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                            13191 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                            13192 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                            13193 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                            13194 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                            13195 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                            13196 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                            13197 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                            13198 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                            13199 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                            13200 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                            13201 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                            13202 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                            13203 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                            13204 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                            13205 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                            13206 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                            13207 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                            13208 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                            13209 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                            13210 ; 1010 |
                            13211 ; 1011 |
                            13212 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                            13213 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                            13214 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                            13215 ; 1015 |{
                            13216 ; 1016 |    struct {
                            13217 ; 1017 |        int S24FE       :1;
                            13218 ; 1018 |        int S25FE       :1;
                            13219 ; 1019 |        int S26FE       :1;
                            13220 ; 1020 |        int S27FE       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 219

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13221 ; 1021 |        int S28FE       :1;
                            13222 ; 1022 |        int S29FE       :1;
                            13223 ; 1023 |        int S30FE       :1;
                            13224 ; 1024 |        int S31FE       :1;
                            13225 ; 1025 |        int S32FE       :1;
                            13226 ; 1026 |        int S33FE       :1;
                            13227 ; 1027 |    } B;
                            13228 ; 1028 |    int I;
                            13229 ; 1029 |} iclfenable1_type;
                            13230 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                            13231 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                            13232 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                            13233 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                            13234 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                            13235 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                            13236 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                            13237 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                            13238 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                            13239 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                            13240 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                            13241 ; 1041 |
                            13242 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                            13243 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                            13244 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                            13245 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                            13246 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                            13247 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                            13248 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                            13249 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                            13250 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                            13251 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                            13252 ; 1052 |
                            13253 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                            13254 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                            13255 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                            13256 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                            13257 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                            13258 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                            13259 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                            13260 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                            13261 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                            13262 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                            13263 ; 1063 |
                            13264 ; 1064 |
                            13265 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                            13266 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                            13267 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                            13268 ; 1068 |{
                            13269 ; 1069 |    struct {
                            13270 ; 1070 |        unsigned RQ     :7;
                            13271 ; 1071 |        unsigned IVA    :7;
                            13272 ; 1072 |        unsigned IVB    :7;
                            13273 ; 1073 |    } B;
                            13274 ; 1074 |    int I;
                            13275 ; 1075 |} iclobsvz0_type;
                            13276 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                            13277 ; 1077 |
                            13278 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                            13279 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                            13280 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 220

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13281 ; 1081 |
                            13282 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                            13283 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                            13284 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                            13285 ; 1085 |
                            13286 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                            13287 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                            13288 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                            13289 ; 1089 |
                            13290 ; 1090 |
                            13291 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                            13292 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                            13293 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                            13294 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                            13295 ; 1095 |
                            13296 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                            13297 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                            13298 ; 1098 |
                            13299 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                            13300 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                            13301 ; 1101 |
                            13302 ; 1102 |
                            13303 ; 1103 |
                            13304 ; 1104 |
                            13305 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                            13306 ; 1106 |//  Interrupt Vectors
                            13307 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                            13308 ; 1108 |// Reset Vector
                            13309 ; 1109 |#define HW_IVECRESET 0x0000           
                            13310 ; 1110 |// Stack Error
                            13311 ; 1111 |#define HW_IVECSTERR 0x0002           
                            13312 ; 1112 |// Trace
                            13313 ; 1113 |#define HW_IVECTRAC 0x0004           
                            13314 ; 1114 |// SWI
                            13315 ; 1115 |#define HW_IVECSWI 0x0006           
                            13316 ; 1116 |// ~IRQA
                            13317 ; 1117 |#define HW_IVECIRQA 0x0008           
                            13318 ; 1118 |// ~IRQB - BROWNOUT
                            13319 ; 1119 |#define HW_IVECIRQB 0x000A           
                            13320 ; 1120 |// Fatal Error
                            13321 ; 1121 |#define HW_IVECERROR 0x000C           
                            13322 ; 1122 |// SPI
                            13323 ; 1123 |#define HW_IVECSPI 0x000E           
                            13324 ; 1124 |// I2S TX Data Empty
                            13325 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                            13326 ; 1126 |// I2S TX Underflow
                            13327 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                            13328 ; 1128 |// I2S RX Data Full
                            13329 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                            13330 ; 1130 |// I2S RX Overflow
                            13331 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                            13332 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                            13333 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
                            13334 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                            13335 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                            13336 ; 1136 |// GPIO1
                            13337 ; 1137 |#define HW_IVECGPIO1 0x0020           
                            13338 ; 1138 |// GPIO2
                            13339 ; 1139 |#define HW_IVECGPIO2 0x0022           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 221

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13340 ; 1140 |// GPIO0
                            13341 ; 1141 |#define HW_IVECGPIO0 0x0024           
                            13342 ; 1142 |// TIMER0
                            13343 ; 1143 |#define HW_IVECTIMER0 0x0026           
                            13344 ; 1144 |// TIMER1
                            13345 ; 1145 |#define HW_IVECTIMER1 0x0028           
                            13346 ; 1146 |// TIMER2
                            13347 ; 1147 |#define HW_IVECTIMER2 0x002A           
                            13348 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                            13349 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                            13350 ; 1150 |// I2C RX Data Ready
                            13351 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                            13352 ; 1152 |// I2C RX Overflow
                            13353 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                            13354 ; 1154 |// I2C TX Data Empty
                            13355 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                            13356 ; 1156 |// I2C TX Underflow
                            13357 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                            13358 ; 1158 |// Illegal Instruction
                            13359 ; 1159 |#define HW_IVECILI 0x0038           
                            13360 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                            13361 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                            13362 ; 1162 |#define HW_IVECDACE 0x003C           
                            13363 ; 1163 |// DAC Underflow ISR
                            13364 ; 1164 |#define HW_IVECDACUF 0x003E           
                            13365 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                            13366 ; 1166 |// ADC Full ISR
                            13367 ; 1167 |#define HW_IVECADCF 0x0042           
                            13368 ; 1168 |// ADC Overflow ISR
                            13369 ; 1169 |#define HW_IVECADCOF 0x0044           
                            13370 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                            13371 ; 1171 |// TIMER3
                            13372 ; 1172 |#define HW_IVECTIMER3 0x0048           
                            13373 ; 1173 |// GPIO3
                            13374 ; 1174 |#define HW_IVECGPIO3 0x004A           
                            13375 ; 1175 |// SDRAM
                            13376 ; 1176 |#define HW_IVECSDRAM 0x004C           
                            13377 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                            13378 ; 1178 |// 5 volt power connected
                            13379 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                            13380 ; 1180 |// USB Controller
                            13381 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                            13382 ; 1182 |// USB Wakeup 
                            13383 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                            13384 ; 1184 |// 5 volt power disconnected
                            13385 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                            13386 ; 1186 |// enhanced SPI
                            13387 ; 1187 |#define HW_IVECESPI 0x0058           
                            13388 ; 1188 |// filter coprocessor
                            13389 ; 1189 |#define HW_IVECFILCO 0x005A           
                            13390 ; 1190 |// low res ADC #1
                            13391 ; 1191 |#define HW_IVECLRADC1 0x005C           
                            13392 ; 1192 |// real time clock alarm
                            13393 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                            13394 ; 1194 |// low res ADC #2
                            13395 ; 1195 |#define HW_IVECLRADC2 0x0060           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 222

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13396 ; 1196 |// flash hardware ECC
                            13397 ; 1197 |#define HW_IVECHWECC 0x0062           
                            13398 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                            13399 ; 1199 |// CDSYNC Interrupt
                            13400 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                            13401 ; 1201 |// CDSYNC Exception
                            13402 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                            13403 ; 1203 |// RS
                            13404 ; 1204 |#define HW_IVECRS 0x006A           
                            13405 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                            13406 ; 1206 |// Flash Done ISR
                            13407 ; 1207 |#define HW_IVECFD 0x006E           
                            13408 ; 1208 |// CompactFlash ISR
                            13409 ; 1209 |#define HW_IVECCF 0x0070           
                            13410 ; 1210 |// SmartMedia Timeout ISR
                            13411 ; 1211 |#define HW_IVECSMTO 0x0072           
                            13412 ; 1212 |// SmartMedia Invalid Programming
                            13413 ; 1213 |#define HW_IVECSMIP 0x0074           
                            13414 ; 1214 |// CompactFlash No Card ISR
                            13415 ; 1215 |#define HW_IVECCFNC 0x0076           
                            13416 ; 1216 |// CompactFlash Status Change ISR
                            13417 ; 1217 |#define HW_IVECCFSC 0x0078           
                            13418 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
                            13419 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                            13420 ; 1220 |// CDI
                            13421 ; 1221 |#define HW_IVECCDI 0x007E           
                            13422 ; 1222 |
                            13423 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                            13424 ; 1224 |//  Interrupt Vectors
                            13425 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                            13426 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                            13427 ; 1227 |#define VECTOR(address,isr) \ 
                            13428 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                            13429 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                            13430 ; 1230 |
                            13431 ; 1231 |
                            13432 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                            13433 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                            13434 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                            13435 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                            13436 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                            13437 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                            13438 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                            13439 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                            13440 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                            13441 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                            13442 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                            13443 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                            13444 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                            13445 ; 1245 |
                            13446 ; 1246 |// Interrupt Disabled
                            13447 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                            13448 ; 1248 |// Interrupt Priority Level 0
                            13449 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                            13450 ; 1250 |// Interrupt Priority Level 1
                            13451 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                            13452 ; 1252 |// Interrupt Priority Level 2
                            13453 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 223

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13454 ; 1254 |
                            13455 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                            13456 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                            13457 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                            13458 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                            13459 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                            13460 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                            13461 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                            13462 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                            13463 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                            13464 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                            13465 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                            13466 ; 1266 |
                            13467 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                            13468 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                            13469 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                            13470 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                            13471 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                            13472 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                            13473 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                            13474 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                            13475 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                            13476 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                            13477 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                            13478 ; 1278 |
                            13479 ; 1279 |// Interrupt Priority register
                            13480 ; 1280 |typedef union               
                            13481 ; 1281 |{
                            13482 ; 1282 |    struct {
                            13483 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                            13484 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                            13485 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                            13486 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                            13487 ; 1287 |        int                 :4; /* Reserved */
                            13488 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                            13489 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                            13490 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                            13491 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                            13492 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                            13493 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                            13494 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                            13495 ; 1295 |    } B;
                            13496 ; 1296 |
                            13497 ; 1297 |    int I;
                            13498 ; 1298 |
                            13499 ; 1299 |} ipr_type;
                            13500 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                            13501 ; 1301 |
                            13502 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            13503 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            13504 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                            13505 ; 1305 |
                            13506 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                            13507 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                            13508 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                            13509 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                            13510 ; 1310 |
                            13511 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                            13512 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                            13513 ; 1313 |#define HW_ICLSTEERR_SS_1 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 224

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13514 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                            13515 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                            13516 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                            13517 ; 1317 |
                            13518 ; 1318 |#endif
                            13519 ; 1319 |
                            13520 
                            13522 
                            13523 ; 26   |#include "regslradc.h"
                            13524 
                            13526 
                            13527 ; 1    |#if !(defined(regslradcinc))
                            13528 ; 2    |
                            13529 ; 3    |#define regslradcinc 1
                            13530 ; 4    |
                            13531 ; 5    |#include "types.h"
                            13532 
                            13534 
                            13535 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            13536 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            13537 ; 3    |//
                            13538 ; 4    |// Filename: types.h
                            13539 ; 5    |// Description: Standard data types
                            13540 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            13541 ; 7    |
                            13542 ; 8    |#ifndef _TYPES_H
                            13543 ; 9    |#define _TYPES_H
                            13544 ; 10   |
                            13545 ; 11   |// TODO:  move this outta here!
                            13546 ; 12   |#if !defined(NOERROR)
                            13547 ; 13   |#define NOERROR 0
                            13548 ; 14   |#define SUCCESS 0
                            13549 ; 15   |#endif 
                            13550 ; 16   |#if !defined(SUCCESS)
                            13551 ; 17   |#define SUCCESS  0
                            13552 ; 18   |#endif
                            13553 ; 19   |#if !defined(ERROR)
                            13554 ; 20   |#define ERROR   -1
                            13555 ; 21   |#endif
                            13556 ; 22   |#if !defined(FALSE)
                            13557 ; 23   |#define FALSE 0
                            13558 ; 24   |#endif
                            13559 ; 25   |#if !defined(TRUE)
                            13560 ; 26   |#define TRUE  1
                            13561 ; 27   |#endif
                            13562 ; 28   |
                            13563 ; 29   |#if !defined(NULL)
                            13564 ; 30   |#define NULL 0
                            13565 ; 31   |#endif
                            13566 ; 32   |
                            13567 ; 33   |#define MAX_INT     0x7FFFFF
                            13568 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            13569 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            13570 ; 36   |#define MAX_ULONG   (-1) 
                            13571 ; 37   |
                            13572 ; 38   |#define WORD_SIZE   24              // word size in bits
                            13573 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            13574 ; 40   |
                            13575 ; 41   |
                            13576 ; 42   |#define BYTE    unsigned char       // btVarName
                            13577 ; 43   |#define CHAR    signed char         // cVarName
                            13578 ; 44   |#define USHORT  unsigned short      // usVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 225

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13579 ; 45   |#define SHORT   unsigned short      // sVarName
                            13580 ; 46   |#define WORD    unsigned int        // wVarName
                            13581 ; 47   |#define INT     signed int          // iVarName
                            13582 ; 48   |#define DWORD   unsigned long       // dwVarName
                            13583 ; 49   |#define LONG    signed long         // lVarName
                            13584 ; 50   |#define BOOL    unsigned int        // bVarName
                            13585 ; 51   |#define FRACT   _fract              // frVarName
                            13586 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            13587 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            13588 ; 54   |#define FLOAT   float               // fVarName
                            13589 ; 55   |#define DBL     double              // dVarName
                            13590 ; 56   |#define ENUM    enum                // eVarName
                            13591 ; 57   |#define CMX     _complex            // cmxVarName
                            13592 ; 58   |typedef WORD UCS3;                   // 
                            13593 ; 59   |
                            13594 ; 60   |#define UINT16  unsigned short
                            13595 ; 61   |#define UINT8   unsigned char   
                            13596 ; 62   |#define UINT32  unsigned long
                            13597 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            13598 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            13599 ; 65   |#define WCHAR   UINT16
                            13600 ; 66   |
                            13601 ; 67   |//UINT128 is 16 bytes or 6 words
                            13602 ; 68   |typedef struct UINT128_3500 {   
                            13603 ; 69   |    int val[6];     
                            13604 ; 70   |} UINT128_3500;
                            13605 ; 71   |
                            13606 ; 72   |#define UINT128   UINT128_3500
                            13607 ; 73   |
                            13608 ; 74   |// Little endian word packed byte strings:   
                            13609 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13610 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13611 ; 77   |// Little endian word packed byte strings:   
                            13612 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            13613 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            13614 ; 80   |
                            13615 ; 81   |// Declare Memory Spaces To Use When Coding
                            13616 ; 82   |// A. Sector Buffers
                            13617 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            13618 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            13619 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            13620 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            13621 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            13622 ; 88   |// B. Media DDI Memory
                            13623 ; 89   |#define MEDIA_DDI_MEM _Y
                            13624 ; 90   |
                            13625 ; 91   |
                            13626 ; 92   |
                            13627 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            13628 ; 94   |// Examples of circular pointers:
                            13629 ; 95   |//    INT CIRC cpiVarName
                            13630 ; 96   |//    DWORD CIRC cpdwVarName
                            13631 ; 97   |
                            13632 ; 98   |#define RETCODE INT                 // rcVarName
                            13633 ; 99   |
                            13634 ; 100  |// generic bitfield structure
                            13635 ; 101  |struct Bitfield {
                            13636 ; 102  |    unsigned int B0  :1;
                            13637 ; 103  |    unsigned int B1  :1;
                            13638 ; 104  |    unsigned int B2  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 226

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13639 ; 105  |    unsigned int B3  :1;
                            13640 ; 106  |    unsigned int B4  :1;
                            13641 ; 107  |    unsigned int B5  :1;
                            13642 ; 108  |    unsigned int B6  :1;
                            13643 ; 109  |    unsigned int B7  :1;
                            13644 ; 110  |    unsigned int B8  :1;
                            13645 ; 111  |    unsigned int B9  :1;
                            13646 ; 112  |    unsigned int B10 :1;
                            13647 ; 113  |    unsigned int B11 :1;
                            13648 ; 114  |    unsigned int B12 :1;
                            13649 ; 115  |    unsigned int B13 :1;
                            13650 ; 116  |    unsigned int B14 :1;
                            13651 ; 117  |    unsigned int B15 :1;
                            13652 ; 118  |    unsigned int B16 :1;
                            13653 ; 119  |    unsigned int B17 :1;
                            13654 ; 120  |    unsigned int B18 :1;
                            13655 ; 121  |    unsigned int B19 :1;
                            13656 ; 122  |    unsigned int B20 :1;
                            13657 ; 123  |    unsigned int B21 :1;
                            13658 ; 124  |    unsigned int B22 :1;
                            13659 ; 125  |    unsigned int B23 :1;
                            13660 ; 126  |};
                            13661 ; 127  |
                            13662 ; 128  |union BitInt {
                            13663 ; 129  |        struct Bitfield B;
                            13664 ; 130  |        int        I;
                            13665 ; 131  |};
                            13666 ; 132  |
                            13667 ; 133  |#define MAX_MSG_LENGTH 10
                            13668 ; 134  |struct CMessage
                            13669 ; 135  |{
                            13670 ; 136  |        unsigned int m_uLength;
                            13671 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            13672 ; 138  |};
                            13673 ; 139  |
                            13674 ; 140  |typedef struct {
                            13675 ; 141  |    WORD m_wLength;
                            13676 ; 142  |    WORD m_wMessage;
                            13677 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            13678 ; 144  |} Message;
                            13679 ; 145  |
                            13680 ; 146  |struct MessageQueueDescriptor
                            13681 ; 147  |{
                            13682 ; 148  |        int *m_pBase;
                            13683 ; 149  |        int m_iModulo;
                            13684 ; 150  |        int m_iSize;
                            13685 ; 151  |        int *m_pHead;
                            13686 ; 152  |        int *m_pTail;
                            13687 ; 153  |};
                            13688 ; 154  |
                            13689 ; 155  |struct ModuleEntry
                            13690 ; 156  |{
                            13691 ; 157  |    int m_iSignaledEventMask;
                            13692 ; 158  |    int m_iWaitEventMask;
                            13693 ; 159  |    int m_iResourceOfCode;
                            13694 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            13695 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            13696 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            13697 ; 163  |    int m_uTimeOutHigh;
                            13698 ; 164  |    int m_uTimeOutLow;
                            13699 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 227

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13700 ; 166  |};
                            13701 ; 167  |
                            13702 ; 168  |union WaitMask{
                            13703 ; 169  |    struct B{
                            13704 ; 170  |        unsigned int m_bNone     :1;
                            13705 ; 171  |        unsigned int m_bMessage  :1;
                            13706 ; 172  |        unsigned int m_bTimer    :1;
                            13707 ; 173  |        unsigned int m_bButton   :1;
                            13708 ; 174  |    } B;
                            13709 ; 175  |    int I;
                            13710 ; 176  |} ;
                            13711 ; 177  |
                            13712 ; 178  |
                            13713 ; 179  |struct Button {
                            13714 ; 180  |        WORD wButtonEvent;
                            13715 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            13716 ; 182  |};
                            13717 ; 183  |
                            13718 ; 184  |struct Message {
                            13719 ; 185  |        WORD wMsgLength;
                            13720 ; 186  |        WORD wMsgCommand;
                            13721 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            13722 ; 188  |};
                            13723 ; 189  |
                            13724 ; 190  |union EventTypes {
                            13725 ; 191  |        struct CMessage msg;
                            13726 ; 192  |        struct Button Button ;
                            13727 ; 193  |        struct Message Message;
                            13728 ; 194  |};
                            13729 ; 195  |
                            13730 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            13731 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            13732 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            13733 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            13734 ; 200  |
                            13735 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            13736 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            13737 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            13738 ; 204  |
                            13739 ; 205  |#if DEBUG
                            13740 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            13741 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            13742 ; 208  |#else 
                            13743 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            13744 ; 210  |#define DebugBuildAssert(x)    
                            13745 ; 211  |#endif
                            13746 ; 212  |
                            13747 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            13748 ; 214  |//  #pragma asm
                            13749 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            13750 ; 216  |//  #pragma endasm
                            13751 ; 217  |
                            13752 ; 218  |
                            13753 ; 219  |#ifdef COLOR_262K
                            13754 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            13755 ; 221  |#elif defined(COLOR_65K)
                            13756 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            13757 ; 223  |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 228

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13758 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            13759 ; 225  |#endif
                            13760 ; 226  |    
                            13761 ; 227  |#endif // #ifndef _TYPES_H
                            13762 
                            13764 
                            13765 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13766 ; 7    |
                            13767 ; 8    |//   SYSTEM STMP Registers 
                            13768 ; 9    |//  Last Edited 6.26.2003 M. Henson
                            13769 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            13770 ; 11   |
                            13771 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                            13772 ; 13   |
                            13773 ; 14   |
                            13774 ; 15   |
                            13775 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                            13776 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                            13777 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                            13778 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                            13779 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13780 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                            13781 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                            13782 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                            13783 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                            13784 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                            13785 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                            13786 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                            13787 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                            13788 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                            13789 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                            13790 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                            13791 ; 32   |
                            13792 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                            13793 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13794 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                            13795 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                            13796 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                            13797 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                            13798 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                            13799 ; 40   |
                            13800 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                            13801 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                            13802 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                            13803 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                            13804 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                            13805 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                            13806 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                            13807 ; 48   |
                            13808 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                            13809 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                            13810 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                            13811 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                            13812 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 229

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13813 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                            13814 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                            13815 ; 56   |
                            13816 ; 57   |typedef union               
                            13817 ; 58   |{
                            13818 ; 59   |    struct {
                            13819 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                            13820 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                            13821 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                            13822 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                            13823 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                            13824 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                            13825 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                            13826 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                            13827 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                            13828 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                            13829 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                            13830 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                            13831 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                            13832 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                            13833 ; 74   |    } B;
                            13834 ; 75   |   unsigned int I;
                            13835 ; 76   |        unsigned int U;
                            13836 ; 77   |} lradc_ctrl_type;
                            13837 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                            13838 ; 79   |
                            13839 ; 80   |
                            13840 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                            13841 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                            13842 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                            13843 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                            13844 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                            13845 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                            13846 ; 87   |
                            13847 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                            13848 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                            13849 ; 90   |
                            13850 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                            13851 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                            13852 ; 93   |
                            13853 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                            13854 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                            13855 ; 96   |
                            13856 ; 97   |
                            13857 ; 98   |typedef union               
                            13858 ; 99   |{
                            13859 ; 100  |    struct {
                            13860 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                            13861 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                            13862 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                            13863 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                            13864 ; 105  |    } B;
                            13865 ; 106  |    unsigned int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 230

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13866 ; 107  |} lradc_thrsh_type;
                            13867 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                            13868 ; 109  |
                            13869 ; 110  |
                            13870 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            13871 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                            13872 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                            13873 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                            13874 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                            13875 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                            13876 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                            13877 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                            13878 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                            13879 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                            13880 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                            13881 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                            13882 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                            13883 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                            13884 ; 125  |
                            13885 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                            13886 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                            13887 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                            13888 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                            13889 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                            13890 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                            13891 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                            13892 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                            13893 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                            13894 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                            13895 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                            13896 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                            13897 ; 138  |
                            13898 ; 139  |
                            13899 ; 140  |
                            13900 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                            13901 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                            13902 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                            13903 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                            13904 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                            13905 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                            13906 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                            13907 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                            13908 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                            13909 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                            13910 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                            13911 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                            13912 ; 153  |
                            13913 ; 154  |
                            13914 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 231

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13915 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                            13916 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                            13917 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                            13918 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                            13919 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                            13920 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                            13921 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                            13922 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                            13923 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                            13924 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                            13925 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                            13926 ; 167  |
                            13927 ; 168  |typedef union               
                            13928 ; 169  |{
                            13929 ; 170  |    struct {
                            13930 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                            13931 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                            13932 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                            13933 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                            13934 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                            13935 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                            13936 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                            13937 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                            13938 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                            13939 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                            13940 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                            13941 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                            13942 ; 183  |    } B;
                            13943 ; 184  |    unsigned int I;
                            13944 ; 185  |} lradc_result_type;
                            13945 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                            13946 ; 187  |
                            13947 ; 188  |
                            13948 ; 189  |
                            13949 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                            13950 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                            13951 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                            13952 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                            13953 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                            13954 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                            13955 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                            13956 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                            13957 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                            13958 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                            13959 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                            13960 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                            13961 ; 202  |
                            13962 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                            13963 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                            13964 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                            13965 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                            13966 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                            13967 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                            13968 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                            13969 ; 210  |
                            13970 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 232

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13971 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                            13972 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                            13973 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                            13974 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                            13975 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                            13976 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                            13977 ; 218  |
                            13978 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                            13979 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                            13980 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                            13981 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                            13982 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                            13983 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                            13984 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                            13985 ; 226  |
                            13986 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                            13987 ; 228  |
                            13988 ; 229  |
                            13989 ; 230  |
                            13990 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            13991 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                            13992 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                            13993 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                            13994 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                            13995 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                            13996 ; 237  |
                            13997 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                            13998 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                            13999 ; 240  |
                            14000 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                            14001 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                            14002 ; 243  |
                            14003 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                            14004 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                            14005 ; 246  |
                            14006 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                            14007 ; 248  |
                            14008 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                            14009 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                            14010 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                            14011 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                            14012 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                            14013 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                            14014 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                            14015 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                            14016 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                            14017 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                            14018 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 233

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14019 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                            14020 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                            14021 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                            14022 ; 263  |
                            14023 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                            14024 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                            14025 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                            14026 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                            14027 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                            14028 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                            14029 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                            14030 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                            14031 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                            14032 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                            14033 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                            14034 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                            14035 ; 276  |
                            14036 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                            14037 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                            14038 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                            14039 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                            14040 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                            14041 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                            14042 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                            14043 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                            14044 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                            14045 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                            14046 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                            14047 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                            14048 ; 289  |
                            14049 ; 290  |
                            14050 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                            14051 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                            14052 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                            14053 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                            14054 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                            14055 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                            14056 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                            14057 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                            14058 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                            14059 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                            14060 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                            14061 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                            14062 ; 303  |
                            14063 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                            14064 ; 305  |
                            14065 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                            14066 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                            14067 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 234

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14068 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                            14069 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                            14070 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                            14071 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                            14072 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                            14073 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                            14074 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                            14075 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                            14076 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                            14077 ; 318  |
                            14078 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                            14079 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                            14080 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                            14081 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                            14082 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                            14083 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                            14084 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                            14085 ; 326  |
                            14086 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                            14087 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                            14088 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                            14089 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                            14090 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                            14091 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                            14092 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                            14093 ; 334  |
                            14094 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                            14095 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                            14096 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                            14097 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                            14098 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                            14099 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                            14100 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                            14101 ; 342  |
                            14102 ; 343  |
                            14103 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                            14104 ; 345  |
                            14105 ; 346  |
                            14106 ; 347  |
                            14107 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                            14108 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                            14109 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                            14110 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                            14111 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                            14112 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                            14113 ; 354  |
                            14114 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                            14115 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                            14116 ; 357  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 235

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14117 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                            14118 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                            14119 ; 360  |
                            14120 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                            14121 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                            14122 ; 363  |
                            14123 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                            14124 ; 365  |
                            14125 ; 366  |
                            14126 ; 367  |
                            14127 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                            14128 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                            14129 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                            14130 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                            14131 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                            14132 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                            14133 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                            14134 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                            14135 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                            14136 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                            14137 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                            14138 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                            14139 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                            14140 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                            14141 ; 382  |
                            14142 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                            14143 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                            14144 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                            14145 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                            14146 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                            14147 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                            14148 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                            14149 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                            14150 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                            14151 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                            14152 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                            14153 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                            14154 ; 395  |
                            14155 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                            14156 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                            14157 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                            14158 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                            14159 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                            14160 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                            14161 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                            14162 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                            14163 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 236

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14164 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                            14165 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                            14166 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                            14167 ; 408  |
                            14168 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                            14169 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                            14170 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                            14171 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                            14172 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                            14173 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                            14174 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                            14175 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                            14176 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                            14177 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                            14178 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                            14179 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                            14180 ; 421  |
                            14181 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                            14182 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14183 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14184 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14185 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14186 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            14187 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            14188 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            14189 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                            14190 ; 431  |#define HW_LRADC_RES_REF_0                              80
                            14191 ; 432  |#define HW_LRADC_RES_REF_1                              77
                            14192 ; 433  |#define HW_LRADC_RES_REF_2                              100
                            14193 ; 434  |#define HW_LRADC_RES_REF_3                              129
                            14194 ; 435  |#define HW_LRADC_RES_REF_4                              160
                            14195 ; 436  |#define HW_LRADC_RES_REF_5                              154
                            14196 ; 437  |#define HW_LRADC_RES_REF_6                              200
                            14197 ; 438  |#define HW_LRADC_RES_REF_7                              258
                            14198 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                            14199 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                            14200 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                            14201 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                            14202 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                            14203 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                            14204 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                            14205 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                            14206 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                            14207 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                            14208 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                            14209 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                            14210 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                            14211 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                            14212 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                            14213 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                            14214 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                            14215 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 237

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14216 ; 457  |
                            14217 ; 458  |//Needed by button.asm
                            14218 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                            14219 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                            14220 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                            14221 ; 462  |
                            14222 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                            14223 ; 464  |
                            14224 ; 465  |#endif
                            14225 ; 466  |
                            14226 ; 467  |
                            14227 
                            14229 
                            14230 ; 27   |#include "regspwm.h"
                            14231 
                            14233 
                            14234 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            14235 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            14236 ; 3    |// Filename: regspwm.inc
                            14237 ; 4    |// Description: Register definitions for PWM interface
                            14238 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            14239 ; 6    |// The following naming conventions are followed in this file.
                            14240 ; 7    |// All registers are named using the format...
                            14241 ; 8    |//     HW_<module>_<regname>
                            14242 ; 9    |// where <module> is the module name which can be any of the following...
                            14243 ; 10   |//     USB20
                            14244 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            14245 ; 12   |// module name includes a number starting from 0 for the first instance of
                            14246 ; 13   |// that module)
                            14247 ; 14   |// <regname> is the specific register within that module
                            14248 ; 15   |// We also define the following...
                            14249 ; 16   |//     HW_<module>_<regname>_BITPOS
                            14250 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            14251 ; 18   |//     HW_<module>_<regname>_SETMASK
                            14252 ; 19   |// which does something else, and
                            14253 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            14254 ; 21   |// which does something else.
                            14255 ; 22   |// Other rules
                            14256 ; 23   |//     All caps
                            14257 ; 24   |//     Numeric identifiers start at 0
                            14258 ; 25   |#if !(defined(regspwminc))
                            14259 ; 26   |#define regspwminc 1
                            14260 ; 27   |
                            14261 ; 28   |#include "types.h"
                            14262 
                            14264 
                            14265 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14266 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14267 ; 3    |//
                            14268 ; 4    |// Filename: types.h
                            14269 ; 5    |// Description: Standard data types
                            14270 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14271 ; 7    |
                            14272 ; 8    |#ifndef _TYPES_H
                            14273 ; 9    |#define _TYPES_H
                            14274 ; 10   |
                            14275 ; 11   |// TODO:  move this outta here!
                            14276 ; 12   |#if !defined(NOERROR)
                            14277 ; 13   |#define NOERROR 0
                            14278 ; 14   |#define SUCCESS 0
                            14279 ; 15   |#endif 
                            14280 ; 16   |#if !defined(SUCCESS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 238

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14281 ; 17   |#define SUCCESS  0
                            14282 ; 18   |#endif
                            14283 ; 19   |#if !defined(ERROR)
                            14284 ; 20   |#define ERROR   -1
                            14285 ; 21   |#endif
                            14286 ; 22   |#if !defined(FALSE)
                            14287 ; 23   |#define FALSE 0
                            14288 ; 24   |#endif
                            14289 ; 25   |#if !defined(TRUE)
                            14290 ; 26   |#define TRUE  1
                            14291 ; 27   |#endif
                            14292 ; 28   |
                            14293 ; 29   |#if !defined(NULL)
                            14294 ; 30   |#define NULL 0
                            14295 ; 31   |#endif
                            14296 ; 32   |
                            14297 ; 33   |#define MAX_INT     0x7FFFFF
                            14298 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14299 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14300 ; 36   |#define MAX_ULONG   (-1) 
                            14301 ; 37   |
                            14302 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14303 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14304 ; 40   |
                            14305 ; 41   |
                            14306 ; 42   |#define BYTE    unsigned char       // btVarName
                            14307 ; 43   |#define CHAR    signed char         // cVarName
                            14308 ; 44   |#define USHORT  unsigned short      // usVarName
                            14309 ; 45   |#define SHORT   unsigned short      // sVarName
                            14310 ; 46   |#define WORD    unsigned int        // wVarName
                            14311 ; 47   |#define INT     signed int          // iVarName
                            14312 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14313 ; 49   |#define LONG    signed long         // lVarName
                            14314 ; 50   |#define BOOL    unsigned int        // bVarName
                            14315 ; 51   |#define FRACT   _fract              // frVarName
                            14316 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14317 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14318 ; 54   |#define FLOAT   float               // fVarName
                            14319 ; 55   |#define DBL     double              // dVarName
                            14320 ; 56   |#define ENUM    enum                // eVarName
                            14321 ; 57   |#define CMX     _complex            // cmxVarName
                            14322 ; 58   |typedef WORD UCS3;                   // 
                            14323 ; 59   |
                            14324 ; 60   |#define UINT16  unsigned short
                            14325 ; 61   |#define UINT8   unsigned char   
                            14326 ; 62   |#define UINT32  unsigned long
                            14327 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            14328 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            14329 ; 65   |#define WCHAR   UINT16
                            14330 ; 66   |
                            14331 ; 67   |//UINT128 is 16 bytes or 6 words
                            14332 ; 68   |typedef struct UINT128_3500 {   
                            14333 ; 69   |    int val[6];     
                            14334 ; 70   |} UINT128_3500;
                            14335 ; 71   |
                            14336 ; 72   |#define UINT128   UINT128_3500
                            14337 ; 73   |
                            14338 ; 74   |// Little endian word packed byte strings:   
                            14339 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14340 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 239

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14341 ; 77   |// Little endian word packed byte strings:   
                            14342 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14343 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14344 ; 80   |
                            14345 ; 81   |// Declare Memory Spaces To Use When Coding
                            14346 ; 82   |// A. Sector Buffers
                            14347 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14348 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14349 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14350 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14351 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14352 ; 88   |// B. Media DDI Memory
                            14353 ; 89   |#define MEDIA_DDI_MEM _Y
                            14354 ; 90   |
                            14355 ; 91   |
                            14356 ; 92   |
                            14357 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14358 ; 94   |// Examples of circular pointers:
                            14359 ; 95   |//    INT CIRC cpiVarName
                            14360 ; 96   |//    DWORD CIRC cpdwVarName
                            14361 ; 97   |
                            14362 ; 98   |#define RETCODE INT                 // rcVarName
                            14363 ; 99   |
                            14364 ; 100  |// generic bitfield structure
                            14365 ; 101  |struct Bitfield {
                            14366 ; 102  |    unsigned int B0  :1;
                            14367 ; 103  |    unsigned int B1  :1;
                            14368 ; 104  |    unsigned int B2  :1;
                            14369 ; 105  |    unsigned int B3  :1;
                            14370 ; 106  |    unsigned int B4  :1;
                            14371 ; 107  |    unsigned int B5  :1;
                            14372 ; 108  |    unsigned int B6  :1;
                            14373 ; 109  |    unsigned int B7  :1;
                            14374 ; 110  |    unsigned int B8  :1;
                            14375 ; 111  |    unsigned int B9  :1;
                            14376 ; 112  |    unsigned int B10 :1;
                            14377 ; 113  |    unsigned int B11 :1;
                            14378 ; 114  |    unsigned int B12 :1;
                            14379 ; 115  |    unsigned int B13 :1;
                            14380 ; 116  |    unsigned int B14 :1;
                            14381 ; 117  |    unsigned int B15 :1;
                            14382 ; 118  |    unsigned int B16 :1;
                            14383 ; 119  |    unsigned int B17 :1;
                            14384 ; 120  |    unsigned int B18 :1;
                            14385 ; 121  |    unsigned int B19 :1;
                            14386 ; 122  |    unsigned int B20 :1;
                            14387 ; 123  |    unsigned int B21 :1;
                            14388 ; 124  |    unsigned int B22 :1;
                            14389 ; 125  |    unsigned int B23 :1;
                            14390 ; 126  |};
                            14391 ; 127  |
                            14392 ; 128  |union BitInt {
                            14393 ; 129  |        struct Bitfield B;
                            14394 ; 130  |        int        I;
                            14395 ; 131  |};
                            14396 ; 132  |
                            14397 ; 133  |#define MAX_MSG_LENGTH 10
                            14398 ; 134  |struct CMessage
                            14399 ; 135  |{
                            14400 ; 136  |        unsigned int m_uLength;
                            14401 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14402 ; 138  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 240

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14403 ; 139  |
                            14404 ; 140  |typedef struct {
                            14405 ; 141  |    WORD m_wLength;
                            14406 ; 142  |    WORD m_wMessage;
                            14407 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14408 ; 144  |} Message;
                            14409 ; 145  |
                            14410 ; 146  |struct MessageQueueDescriptor
                            14411 ; 147  |{
                            14412 ; 148  |        int *m_pBase;
                            14413 ; 149  |        int m_iModulo;
                            14414 ; 150  |        int m_iSize;
                            14415 ; 151  |        int *m_pHead;
                            14416 ; 152  |        int *m_pTail;
                            14417 ; 153  |};
                            14418 ; 154  |
                            14419 ; 155  |struct ModuleEntry
                            14420 ; 156  |{
                            14421 ; 157  |    int m_iSignaledEventMask;
                            14422 ; 158  |    int m_iWaitEventMask;
                            14423 ; 159  |    int m_iResourceOfCode;
                            14424 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14425 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            14426 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14427 ; 163  |    int m_uTimeOutHigh;
                            14428 ; 164  |    int m_uTimeOutLow;
                            14429 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14430 ; 166  |};
                            14431 ; 167  |
                            14432 ; 168  |union WaitMask{
                            14433 ; 169  |    struct B{
                            14434 ; 170  |        unsigned int m_bNone     :1;
                            14435 ; 171  |        unsigned int m_bMessage  :1;
                            14436 ; 172  |        unsigned int m_bTimer    :1;
                            14437 ; 173  |        unsigned int m_bButton   :1;
                            14438 ; 174  |    } B;
                            14439 ; 175  |    int I;
                            14440 ; 176  |} ;
                            14441 ; 177  |
                            14442 ; 178  |
                            14443 ; 179  |struct Button {
                            14444 ; 180  |        WORD wButtonEvent;
                            14445 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14446 ; 182  |};
                            14447 ; 183  |
                            14448 ; 184  |struct Message {
                            14449 ; 185  |        WORD wMsgLength;
                            14450 ; 186  |        WORD wMsgCommand;
                            14451 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14452 ; 188  |};
                            14453 ; 189  |
                            14454 ; 190  |union EventTypes {
                            14455 ; 191  |        struct CMessage msg;
                            14456 ; 192  |        struct Button Button ;
                            14457 ; 193  |        struct Message Message;
                            14458 ; 194  |};
                            14459 ; 195  |
                            14460 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14461 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14462 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14463 ; 199  |#define BUILD_TYPE_PLAYER   0x102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 241

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14464 ; 200  |
                            14465 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14466 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14467 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14468 ; 204  |
                            14469 ; 205  |#if DEBUG
                            14470 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14471 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14472 ; 208  |#else 
                            14473 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            14474 ; 210  |#define DebugBuildAssert(x)    
                            14475 ; 211  |#endif
                            14476 ; 212  |
                            14477 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14478 ; 214  |//  #pragma asm
                            14479 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            14480 ; 216  |//  #pragma endasm
                            14481 ; 217  |
                            14482 ; 218  |
                            14483 ; 219  |#ifdef COLOR_262K
                            14484 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            14485 ; 221  |#elif defined(COLOR_65K)
                            14486 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            14487 ; 223  |#else
                            14488 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            14489 ; 225  |#endif
                            14490 ; 226  |    
                            14491 ; 227  |#endif // #ifndef _TYPES_H
                            14492 
                            14494 
                            14495 ; 29   |
                            14496 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14497 ; 31   |//   Pulse Width Modulator STMP Registers 
                            14498 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            14499 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                            14500 ; 34   |
                            14501 ; 35   |
                            14502 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            14503 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                            14504 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                            14505 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                            14506 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                            14507 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                            14508 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                            14509 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                            14510 ; 44   |
                            14511 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                            14512 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                            14513 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                            14514 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                            14515 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                            14516 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                            14517 ; 51   |
                            14518 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_
                                  BITPOS)
                            14519 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_
                                  BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 242

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14520 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_
                                  BITPOS)
                            14521 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_
                                  BITPOS)
                            14522 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                            14523 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_
                                  BITPOS)
                            14524 ; 58   |
                            14525 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                            14526 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                            14527 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                            14528 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                            14529 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                            14530 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                            14531 ; 65   |
                            14532 ; 66   |typedef union               
                            14533 ; 67   |{
                            14534 ; 68   |    struct {
                            14535 ; 69   |        int PWM0_EN                    :1;
                            14536 ; 70   |        int PWM1_EN                    :1;
                            14537 ; 71   |        int PWM2_EN                    :1;
                            14538 ; 72   |        int PWM3_EN                    :1;
                            14539 ; 73   |        int RSVD0                      :4;
                            14540 ; 74   |        int CDIV                       :2;
                            14541 ; 75   |        int RSVD1                      :13;
                            14542 ; 76   |        int MSTR_EN                    :1;
                            14543 ; 77   |    } B;
                            14544 ; 78   |    int I;
                            14545 ; 79   |} pwmcsr_type;
                            14546 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control 
                                  Status Register */
                            14547 ; 81   |
                            14548 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                            14549 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                            14550 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                            14551 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                            14552 ; 86   |
                            14553 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                            14554 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                            14555 ; 89   |
                            14556 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTI
                                  VE_BITPOS)
                            14557 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_
                                  INACTIVE_BITPOS)
                            14558 ; 92   |
                            14559 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                            14560 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                            14561 ; 95   |
                            14562 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                            14563 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                            14564 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                            14565 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                            14566 ; 100  |
                            14567 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                            14568 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                            14569 ; 103  |
                            14570 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTI
                                  VE_BITPOS)
                            14571 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_
                                  INACTIVE_BITPOS)
                            14572 ; 106  |
                            14573 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 243

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14574 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                            14575 ; 109  |
                            14576 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                            14577 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                            14578 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                            14579 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                            14580 ; 114  |
                            14581 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                            14582 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                            14583 ; 117  |
                            14584 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTI
                                  VE_BITPOS)
                            14585 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_
                                  INACTIVE_BITPOS)
                            14586 ; 120  |
                            14587 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                            14588 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                            14589 ; 123  |
                            14590 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                            14591 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                            14592 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                            14593 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                            14594 ; 128  |
                            14595 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                            14596 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                            14597 ; 131  |
                            14598 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTI
                                  VE_BITPOS)
                            14599 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_
                                  INACTIVE_BITPOS)
                            14600 ; 134  |
                            14601 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                            14602 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                            14603 ; 137  |
                            14604 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            14605 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                            14606 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                            14607 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                            14608 ; 142  |
                            14609 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                            14610 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                            14611 ; 145  |
                            14612 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTI
                                  VE_BITPOS)
                            14613 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_
                                  INACTIVE_BITPOS)
                            14614 ; 148  |
                            14615 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                            14616 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                            14617 ; 151  |
                            14618 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            14619 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                            14620 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                            14621 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                            14622 ; 156  |
                            14623 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                            14624 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                            14625 ; 159  |
                            14626 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTI
                                  VE_BITPOS)
                            14627 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_
                                  INACTIVE_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 244

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14628 ; 162  |
                            14629 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                            14630 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                            14631 ; 165  |
                            14632 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                            14633 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                            14634 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                            14635 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                            14636 ; 170  |
                            14637 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                            14638 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                            14639 ; 173  |
                            14640 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTI
                                  VE_BITPOS)
                            14641 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_
                                  INACTIVE_BITPOS)
                            14642 ; 176  |
                            14643 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                            14644 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                            14645 ; 179  |
                            14646 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                            14647 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                            14648 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                            14649 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                            14650 ; 184  |
                            14651 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                            14652 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                            14653 ; 187  |
                            14654 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTI
                                  VE_BITPOS)
                            14655 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_
                                  INACTIVE_BITPOS)
                            14656 ; 190  |
                            14657 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                            14658 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                            14659 ; 193  |
                            14660 ; 194  |typedef union               
                            14661 ; 195  |{
                            14662 ; 196  |    struct {
                            14663 ; 197  |       int ACTIVE                    :12;
                            14664 ; 198  |       int INACTIVE                  :12;
                            14665 ; 199  |    } B;
                            14666 ; 200  |    int I;
                            14667 ; 201  |} pwmchan_type;
                            14668 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Cha
                                  nnel 0 A Register */
                            14669 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Cha
                                  nnel 0 B Register */
                            14670 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Cha
                                  nnel 1 A Register */
                            14671 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Cha
                                  nnel 1 B Register */
                            14672 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Cha
                                  nnel 2 A Register */
                            14673 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Cha
                                  nnel 2 B Register */
                            14674 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Cha
                                  nnel 3 A Register */
                            14675 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Cha
                                  nnel 3 B Register */
                            14676 ; 210  |
                            14677 ; 211  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 245

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14678 ; 212  |
                            14679 ; 213  |
                            14680 ; 214  |
                            14681 ; 215  |
                            14682 
                            14684 
                            14685 ; 28   |#include "regsrevision.h"
                            14686 
                            14688 
                            14689 ; 1    |#if !(defined(__HW_REVR))
                            14690 ; 2    |#define __HW_REVR 1
                            14691 ; 3    |
                            14692 ; 4    |
                            14693 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                            14694 ; 6    |
                            14695 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                            14696 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                            14697 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                            14698 ; 10   |
                            14699 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                            14700 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                            14701 ; 13   |
                            14702 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                            14703 ; 15   |
                            14704 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                            14705 ; 17   |
                            14706 ; 18   |
                            14707 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                            14708 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                            14709 ; 21   |//  June15 2004: C struct updated to be correct: 
                            14710 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                            14711 ; 23   |typedef union               
                            14712 ; 24   |{
                            14713 ; 25   |    struct {
                            14714 ; 26   |        unsigned RMN    :5;     //Minor Revision
                            14715 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                            14716 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                            14717 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                            14718 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                            14719 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                            14720 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                            14721 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                            14722 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                            14723 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                            14724 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                            14725 ; 37   |        unsigned RMJ    :16;    //Major Revision
                            14726 ; 38   |    } B;
                            14727 ; 39   |
                            14728 ; 40   |    int I;
                            14729 ; 41   |
                            14730 ; 42   |} revr_type;
                            14731 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                            14732 ; 44   |
                            14733 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                            14734 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                            14735 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                            14736 ; 48   |
                            14737 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 246

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14738 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                            14739 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                            14740 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                            14741 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                            14742 ; 54   |
                            14743 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                            14744 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                            14745 ; 57   |
                            14746 ; 58   |#endif //!@def(__HW_REVR)
                            14747 ; 59   |
                            14748 
                            14750 
                            14751 ; 29   |#include "regsrtc.h"
                            14752 
                            14754 
                            14755 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            14756 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14757 ; 3    |// Filename: regsrtc.inc
                            14758 ; 4    |// Description: Register definitions for RTC interface
                            14759 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            14760 ; 6    |// The following naming conventions are followed in this file.
                            14761 ; 7    |// All registers are named using the format...
                            14762 ; 8    |//     HW_<module>_<regname>
                            14763 ; 9    |// where <module> is the module name which can be any of the following...
                            14764 ; 10   |//     USB20
                            14765 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            14766 ; 12   |// module name includes a number starting from 0 for the first instance of
                            14767 ; 13   |// that module)
                            14768 ; 14   |// <regname> is the specific register within that module
                            14769 ; 15   |// We also define the following...
                            14770 ; 16   |//     HW_<module>_<regname>_BITPOS
                            14771 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            14772 ; 18   |//     HW_<module>_<regname>_SETMASK
                            14773 ; 19   |// which does something else, and
                            14774 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            14775 ; 21   |// which does something else.
                            14776 ; 22   |// Other rules
                            14777 ; 23   |//     All caps
                            14778 ; 24   |//     Numeric identifiers start at 0
                            14779 ; 25   |#if !(defined(regsrtcinc))
                            14780 ; 26   |#define regsrtcinc 1
                            14781 ; 27   |
                            14782 ; 28   |#include "types.h"
                            14783 
                            14785 
                            14786 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            14787 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            14788 ; 3    |//
                            14789 ; 4    |// Filename: types.h
                            14790 ; 5    |// Description: Standard data types
                            14791 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            14792 ; 7    |
                            14793 ; 8    |#ifndef _TYPES_H
                            14794 ; 9    |#define _TYPES_H
                            14795 ; 10   |
                            14796 ; 11   |// TODO:  move this outta here!
                            14797 ; 12   |#if !defined(NOERROR)
                            14798 ; 13   |#define NOERROR 0
                            14799 ; 14   |#define SUCCESS 0
                            14800 ; 15   |#endif 
                            14801 ; 16   |#if !defined(SUCCESS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 247

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14802 ; 17   |#define SUCCESS  0
                            14803 ; 18   |#endif
                            14804 ; 19   |#if !defined(ERROR)
                            14805 ; 20   |#define ERROR   -1
                            14806 ; 21   |#endif
                            14807 ; 22   |#if !defined(FALSE)
                            14808 ; 23   |#define FALSE 0
                            14809 ; 24   |#endif
                            14810 ; 25   |#if !defined(TRUE)
                            14811 ; 26   |#define TRUE  1
                            14812 ; 27   |#endif
                            14813 ; 28   |
                            14814 ; 29   |#if !defined(NULL)
                            14815 ; 30   |#define NULL 0
                            14816 ; 31   |#endif
                            14817 ; 32   |
                            14818 ; 33   |#define MAX_INT     0x7FFFFF
                            14819 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            14820 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            14821 ; 36   |#define MAX_ULONG   (-1) 
                            14822 ; 37   |
                            14823 ; 38   |#define WORD_SIZE   24              // word size in bits
                            14824 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            14825 ; 40   |
                            14826 ; 41   |
                            14827 ; 42   |#define BYTE    unsigned char       // btVarName
                            14828 ; 43   |#define CHAR    signed char         // cVarName
                            14829 ; 44   |#define USHORT  unsigned short      // usVarName
                            14830 ; 45   |#define SHORT   unsigned short      // sVarName
                            14831 ; 46   |#define WORD    unsigned int        // wVarName
                            14832 ; 47   |#define INT     signed int          // iVarName
                            14833 ; 48   |#define DWORD   unsigned long       // dwVarName
                            14834 ; 49   |#define LONG    signed long         // lVarName
                            14835 ; 50   |#define BOOL    unsigned int        // bVarName
                            14836 ; 51   |#define FRACT   _fract              // frVarName
                            14837 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            14838 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            14839 ; 54   |#define FLOAT   float               // fVarName
                            14840 ; 55   |#define DBL     double              // dVarName
                            14841 ; 56   |#define ENUM    enum                // eVarName
                            14842 ; 57   |#define CMX     _complex            // cmxVarName
                            14843 ; 58   |typedef WORD UCS3;                   // 
                            14844 ; 59   |
                            14845 ; 60   |#define UINT16  unsigned short
                            14846 ; 61   |#define UINT8   unsigned char   
                            14847 ; 62   |#define UINT32  unsigned long
                            14848 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            14849 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            14850 ; 65   |#define WCHAR   UINT16
                            14851 ; 66   |
                            14852 ; 67   |//UINT128 is 16 bytes or 6 words
                            14853 ; 68   |typedef struct UINT128_3500 {   
                            14854 ; 69   |    int val[6];     
                            14855 ; 70   |} UINT128_3500;
                            14856 ; 71   |
                            14857 ; 72   |#define UINT128   UINT128_3500
                            14858 ; 73   |
                            14859 ; 74   |// Little endian word packed byte strings:   
                            14860 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14861 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 248

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14862 ; 77   |// Little endian word packed byte strings:   
                            14863 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            14864 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            14865 ; 80   |
                            14866 ; 81   |// Declare Memory Spaces To Use When Coding
                            14867 ; 82   |// A. Sector Buffers
                            14868 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            14869 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            14870 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            14871 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            14872 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            14873 ; 88   |// B. Media DDI Memory
                            14874 ; 89   |#define MEDIA_DDI_MEM _Y
                            14875 ; 90   |
                            14876 ; 91   |
                            14877 ; 92   |
                            14878 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            14879 ; 94   |// Examples of circular pointers:
                            14880 ; 95   |//    INT CIRC cpiVarName
                            14881 ; 96   |//    DWORD CIRC cpdwVarName
                            14882 ; 97   |
                            14883 ; 98   |#define RETCODE INT                 // rcVarName
                            14884 ; 99   |
                            14885 ; 100  |// generic bitfield structure
                            14886 ; 101  |struct Bitfield {
                            14887 ; 102  |    unsigned int B0  :1;
                            14888 ; 103  |    unsigned int B1  :1;
                            14889 ; 104  |    unsigned int B2  :1;
                            14890 ; 105  |    unsigned int B3  :1;
                            14891 ; 106  |    unsigned int B4  :1;
                            14892 ; 107  |    unsigned int B5  :1;
                            14893 ; 108  |    unsigned int B6  :1;
                            14894 ; 109  |    unsigned int B7  :1;
                            14895 ; 110  |    unsigned int B8  :1;
                            14896 ; 111  |    unsigned int B9  :1;
                            14897 ; 112  |    unsigned int B10 :1;
                            14898 ; 113  |    unsigned int B11 :1;
                            14899 ; 114  |    unsigned int B12 :1;
                            14900 ; 115  |    unsigned int B13 :1;
                            14901 ; 116  |    unsigned int B14 :1;
                            14902 ; 117  |    unsigned int B15 :1;
                            14903 ; 118  |    unsigned int B16 :1;
                            14904 ; 119  |    unsigned int B17 :1;
                            14905 ; 120  |    unsigned int B18 :1;
                            14906 ; 121  |    unsigned int B19 :1;
                            14907 ; 122  |    unsigned int B20 :1;
                            14908 ; 123  |    unsigned int B21 :1;
                            14909 ; 124  |    unsigned int B22 :1;
                            14910 ; 125  |    unsigned int B23 :1;
                            14911 ; 126  |};
                            14912 ; 127  |
                            14913 ; 128  |union BitInt {
                            14914 ; 129  |        struct Bitfield B;
                            14915 ; 130  |        int        I;
                            14916 ; 131  |};
                            14917 ; 132  |
                            14918 ; 133  |#define MAX_MSG_LENGTH 10
                            14919 ; 134  |struct CMessage
                            14920 ; 135  |{
                            14921 ; 136  |        unsigned int m_uLength;
                            14922 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            14923 ; 138  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 249

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14924 ; 139  |
                            14925 ; 140  |typedef struct {
                            14926 ; 141  |    WORD m_wLength;
                            14927 ; 142  |    WORD m_wMessage;
                            14928 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            14929 ; 144  |} Message;
                            14930 ; 145  |
                            14931 ; 146  |struct MessageQueueDescriptor
                            14932 ; 147  |{
                            14933 ; 148  |        int *m_pBase;
                            14934 ; 149  |        int m_iModulo;
                            14935 ; 150  |        int m_iSize;
                            14936 ; 151  |        int *m_pHead;
                            14937 ; 152  |        int *m_pTail;
                            14938 ; 153  |};
                            14939 ; 154  |
                            14940 ; 155  |struct ModuleEntry
                            14941 ; 156  |{
                            14942 ; 157  |    int m_iSignaledEventMask;
                            14943 ; 158  |    int m_iWaitEventMask;
                            14944 ; 159  |    int m_iResourceOfCode;
                            14945 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            14946 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            14947 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            14948 ; 163  |    int m_uTimeOutHigh;
                            14949 ; 164  |    int m_uTimeOutLow;
                            14950 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            14951 ; 166  |};
                            14952 ; 167  |
                            14953 ; 168  |union WaitMask{
                            14954 ; 169  |    struct B{
                            14955 ; 170  |        unsigned int m_bNone     :1;
                            14956 ; 171  |        unsigned int m_bMessage  :1;
                            14957 ; 172  |        unsigned int m_bTimer    :1;
                            14958 ; 173  |        unsigned int m_bButton   :1;
                            14959 ; 174  |    } B;
                            14960 ; 175  |    int I;
                            14961 ; 176  |} ;
                            14962 ; 177  |
                            14963 ; 178  |
                            14964 ; 179  |struct Button {
                            14965 ; 180  |        WORD wButtonEvent;
                            14966 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            14967 ; 182  |};
                            14968 ; 183  |
                            14969 ; 184  |struct Message {
                            14970 ; 185  |        WORD wMsgLength;
                            14971 ; 186  |        WORD wMsgCommand;
                            14972 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            14973 ; 188  |};
                            14974 ; 189  |
                            14975 ; 190  |union EventTypes {
                            14976 ; 191  |        struct CMessage msg;
                            14977 ; 192  |        struct Button Button ;
                            14978 ; 193  |        struct Message Message;
                            14979 ; 194  |};
                            14980 ; 195  |
                            14981 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            14982 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            14983 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            14984 ; 199  |#define BUILD_TYPE_PLAYER   0x102
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 250

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14985 ; 200  |
                            14986 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            14987 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            14988 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            14989 ; 204  |
                            14990 ; 205  |#if DEBUG
                            14991 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            14992 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            14993 ; 208  |#else 
                            14994 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            14995 ; 210  |#define DebugBuildAssert(x)    
                            14996 ; 211  |#endif
                            14997 ; 212  |
                            14998 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            14999 ; 214  |//  #pragma asm
                            15000 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            15001 ; 216  |//  #pragma endasm
                            15002 ; 217  |
                            15003 ; 218  |
                            15004 ; 219  |#ifdef COLOR_262K
                            15005 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            15006 ; 221  |#elif defined(COLOR_65K)
                            15007 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            15008 ; 223  |#else
                            15009 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            15010 ; 225  |#endif
                            15011 ; 226  |    
                            15012 ; 227  |#endif // #ifndef _TYPES_H
                            15013 
                            15015 
                            15016 ; 29   |
                            15017 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15018 ; 31   |
                            15019 ; 32   |//   RTC STMP Registers 
                            15020 ; 33   |//   Edited 2/26/2002 J. Ferrara
                            15021 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15022 ; 35   |
                            15023 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                            15024 ; 37   |
                            15025 ; 38   |
                            15026 ; 39   |
                            15027 ; 40   |
                            15028 ; 41   |
                            15029 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                            15030 ; 43   |
                            15031 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                            15032 ; 45   |
                            15033 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                            15034 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                            15035 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                            15036 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                            15037 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                            15038 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                            15039 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                            15040 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                            15041 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                            15042 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                            15043 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 251

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15044 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                            15045 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                            15046 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                            15047 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                            15048 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                            15049 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                            15050 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                            15051 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                            15052 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                            15053 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                            15054 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                            15055 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                            15056 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                            15057 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                            15058 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                            15059 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                            15060 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                            15061 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                            15062 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                            15063 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                            15064 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                            15065 ; 78   |
                            15066 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                            15067 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                            15068 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                            15069 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                            15070 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                            15071 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                            15072 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                            15073 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                            15074 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                            15075 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                            15076 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                            15077 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                            15078 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                            15079 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                            15080 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                            15081 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                            15082 ; 95   |
                            15083 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                            15084 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                            15085 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                            15086 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                            15087 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                            15088 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 252

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15089 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                            15090 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                            15091 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                            15092 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                            15093 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                            15094 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                            15095 ; 108  |
                            15096 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                            15097 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                            15098 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                            15099 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                            15100 ; 113  |
                            15101 ; 114  |
                            15102 ; 115  |typedef union               
                            15103 ; 116  |{
                            15104 ; 117  |    struct {
                            15105 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                            15106 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                            15107 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                            15108 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                            15109 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                            15110 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                            15111 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                            15112 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                            15113 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                            15114 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                            15115 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                            15116 ; 129  |    } B;
                            15117 ; 130  |    int I;
                            15118 ; 131  |    unsigned int U;
                            15119 ; 132  |} rtc_csr_type;
                            15120 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                            15121 ; 134  |
                            15122 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            15123 ; 136  |
                            15124 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                            15125 ; 138  |
                            15126 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                            15127 ; 140  |
                            15128 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                            15129 ; 142  |
                            15130 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                            15131 ; 144  |
                            15132 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                            15133 ; 146  |
                            15134 ; 147  |typedef union               
                            15135 ; 148  |{
                            15136 ; 149  |    struct {
                            15137 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                            15138 ; 151  |    } B;
                            15139 ; 152  |    int I;
                            15140 ; 153  |    unsigned int U;
                            15141 ; 154  |} rtc_mseconds0_type;
                            15142 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                            15143 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                            15144 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                            15145 ; 158  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 253

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15146 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                            15147 ; 160  |
                            15148 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                            15149 ; 162  |
                            15150 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                            15151 ; 164  |
                            15152 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                            15153 ; 166  |
                            15154 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                            15155 ; 168  |
                            15156 ; 169  |typedef union               
                            15157 ; 170  |{
                            15158 ; 171  |    struct {
                            15159 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                            15160 ; 173  |    } B;
                            15161 ; 174  |    int I;
                            15162 ; 175  |    unsigned int U;
                            15163 ; 176  |} rtc_mseconds1_type;
                            15164 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                            15165 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                            15166 ; 179  |
                            15167 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                            15168 ; 181  |#define HW_RTC_UP_OFFSET 2
                            15169 ; 182  |
                            15170 ; 183  |
                            15171 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                            15172 ; 185  |
                            15173 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                            15174 ; 187  |
                            15175 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                            15176 ; 189  |
                            15177 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                            15178 ; 191  |
                            15179 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                            15180 ; 193  |
                            15181 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                            15182 ; 195  |
                            15183 ; 196  |typedef union               
                            15184 ; 197  |{
                            15185 ; 198  |    struct {
                            15186 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                            15187 ; 200  |    } B;
                            15188 ; 201  |    int I;
                            15189 ; 202  |    unsigned int U;
                            15190 ; 203  |} rtc_watchdog_type;
                            15191 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                            15192 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            15193 ; 206  |
                            15194 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                            15195 ; 208  |
                            15196 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                            15197 ; 210  |
                            15198 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                            15199 ; 212  |
                            15200 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                            15201 ; 214  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 254

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15202 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                            15203 ; 216  |
                            15204 ; 217  |typedef union               
                            15205 ; 218  |{
                            15206 ; 219  |    struct {
                            15207 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                            15208 ; 221  |    } B;
                            15209 ; 222  |    int I;
                            15210 ; 223  |    unsigned int U;
                            15211 ; 224  |} rtc_alarm0_type;
                            15212 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                            15213 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                            15214 ; 227  |
                            15215 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                            15216 ; 229  |
                            15217 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                            15218 ; 231  |
                            15219 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                            15220 ; 233  |
                            15221 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                            15222 ; 235  |
                            15223 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                            15224 ; 237  |
                            15225 ; 238  |typedef union               
                            15226 ; 239  |{
                            15227 ; 240  |    struct {
                            15228 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                            15229 ; 242  |    } B;
                            15230 ; 243  |    int I;
                            15231 ; 244  |    unsigned int U;
                            15232 ; 245  |} rtc_alarm1_type;
                            15233 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                            15234 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            15235 ; 248  |
                            15236 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                            15237 ; 250  |
                            15238 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                            15239 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                            15240 ; 253  |
                            15241 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                            15242 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                            15243 ; 256  |
                            15244 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                            15245 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                            15246 ; 259  |
                            15247 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                            15248 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                            15249 ; 262  |
                            15250 ; 263  |typedef union               
                            15251 ; 264  |{
                            15252 ; 265  |    struct {
                            15253 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                            15254 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                            15255 ; 268  |    } B;
                            15256 ; 269  |    int I;
                            15257 ; 270  |    unsigned int U;
                            15258 ; 271  |} rtc_xtaldivide_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 255

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15259 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                            15260 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                            15261 ; 274  |
                            15262 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                            15263 ; 276  |
                            15264 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                            15265 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                            15266 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                            15267 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                            15268 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                            15269 ; 282  |
                            15270 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                            15271 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                            15272 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                            15273 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                            15274 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                            15275 ; 288  |
                            15276 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                            15277 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                            15278 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                            15279 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                            15280 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                            15281 ; 294  |
                            15282 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                            15283 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                            15284 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                            15285 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                            15286 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                            15287 ; 300  |
                            15288 ; 301  |typedef union               
                            15289 ; 302  |{
                            15290 ; 303  |   struct {
                            15291 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                            15292 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                            15293 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                            15294 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                            15295 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                            15296 ; 309  |   } B;
                            15297 ; 310  |    int I;
                            15298 ; 311  |    unsigned int U;
                            15299 ; 312  |} rtc_PERSISTENT0_type;
                            15300 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                            15301 ; 314  |
                            15302 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                            15303 ; 316  |
                            15304 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                            15305 ; 318  |
                            15306 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                            15307 ; 320  |
                            15308 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                            15309 ; 322  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 256

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15310 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                            15311 ; 324  |
                            15312 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                            15313 ; 326  |
                            15314 ; 327  |
                            15315 ; 328  |typedef union               
                            15316 ; 329  |{
                            15317 ; 330  |    struct {
                            15318 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                            15319 ; 332  |    } B;
                            15320 ; 333  |    int I;
                            15321 ; 334  |    unsigned int U;
                            15322 ; 335  |} rtc_PERSISTENT1_type;
                            15323 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                            15324 ; 337  |
                            15325 ; 338  |
                            15326 ; 339  |#endif
                            15327 ; 340  |
                            15328 ; 341  |
                            15329 ; 342  |
                            15330 ; 343  |
                            15331 ; 344  |
                            15332 ; 345  |
                            15333 ; 346  |
                            15334 ; 347  |
                            15335 ; 348  |
                            15336 ; 349  |
                            15337 ; 350  |
                            15338 ; 351  |
                            15339 ; 352  |
                            15340 ; 353  |
                            15341 
                            15343 
                            15344 ; 30   |#include "regsspare.h"
                            15345 
                            15347 
                            15348 ; 1    |#if !(defined(RESGSSPARE_INC))
                            15349 ; 2    |#define RESGSSPARE_INC 1
                            15350 ; 3    |
                            15351 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                            15352 ; 5    |
                            15353 ; 6    |
                            15354 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                            15355 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                            15356 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                            15357 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                            15358 ; 11   |
                            15359 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                            15360 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                            15361 ; 14   |
                            15362 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                            15363 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                            15364 ; 17   |
                            15365 ; 18   |
                            15366 ; 19   |
                            15367 ; 20   |typedef union               
                            15368 ; 21   |{
                            15369 ; 22   |    struct {
                            15370 ; 23   |        int      I2SS       :1;     
                            15371 ; 24   |        int      USBSELECT  :1;     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 257

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15372 ; 25   |        unsigned            :6;
                            15373 ; 26   |        int      USBPLUGIN  :1;     
                            15374 ; 27   |        int      PSWITCH    :1;     
                            15375 ; 28   |    } B;
                            15376 ; 29   |
                            15377 ; 30   |    int I;
                            15378 ; 31   |
                            15379 ; 32   |} spare_type;
                            15380 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                            15381 ; 34   |
                            15382 ; 35   |
                            15383 ; 36   |
                            15384 ; 37   |#endif
                            15385 
                            15387 
                            15388 ; 31   |#include "regsspi.h"
                            15389 
                            15391 
                            15392 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15393 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                            15394 ; 3    |//;; Filename    : regsspi.inc
                            15395 ; 4    |//;; Description : Register definitions for SPI interface
                            15396 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15397 ; 6    |
                            15398 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                            15399 ; 8    |// The following naming conventions are followed in this file.
                            15400 ; 9    |// All registers are named using the format...
                            15401 ; 10   |//     HW_<module>_<regname>
                            15402 ; 11   |// where <module> is the module name which can be any of the following...
                            15403 ; 12   |//     USB20
                            15404 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            15405 ; 14   |// module name includes a number starting from 0 for the first instance of
                            15406 ; 15   |// that module)
                            15407 ; 16   |// <regname> is the specific register within that module
                            15408 ; 17   |// We also define the following...
                            15409 ; 18   |//     HW_<module>_<regname>_BITPOS
                            15410 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            15411 ; 20   |//     HW_<module>_<regname>_SETMASK
                            15412 ; 21   |// which does something else, and
                            15413 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            15414 ; 23   |// which does something else.
                            15415 ; 24   |// Other rules
                            15416 ; 25   |//     All caps
                            15417 ; 26   |//     Numeric identifiers start at 0
                            15418 ; 27   |#if !(defined(regsspiinc))
                            15419 ; 28   |#define regsspiinc 1
                            15420 ; 29   |
                            15421 ; 30   |#include "types.h"
                            15422 
                            15424 
                            15425 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15426 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            15427 ; 3    |//
                            15428 ; 4    |// Filename: types.h
                            15429 ; 5    |// Description: Standard data types
                            15430 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15431 ; 7    |
                            15432 ; 8    |#ifndef _TYPES_H
                            15433 ; 9    |#define _TYPES_H
                            15434 ; 10   |
                            15435 ; 11   |// TODO:  move this outta here!
                            15436 ; 12   |#if !defined(NOERROR)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 258

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15437 ; 13   |#define NOERROR 0
                            15438 ; 14   |#define SUCCESS 0
                            15439 ; 15   |#endif 
                            15440 ; 16   |#if !defined(SUCCESS)
                            15441 ; 17   |#define SUCCESS  0
                            15442 ; 18   |#endif
                            15443 ; 19   |#if !defined(ERROR)
                            15444 ; 20   |#define ERROR   -1
                            15445 ; 21   |#endif
                            15446 ; 22   |#if !defined(FALSE)
                            15447 ; 23   |#define FALSE 0
                            15448 ; 24   |#endif
                            15449 ; 25   |#if !defined(TRUE)
                            15450 ; 26   |#define TRUE  1
                            15451 ; 27   |#endif
                            15452 ; 28   |
                            15453 ; 29   |#if !defined(NULL)
                            15454 ; 30   |#define NULL 0
                            15455 ; 31   |#endif
                            15456 ; 32   |
                            15457 ; 33   |#define MAX_INT     0x7FFFFF
                            15458 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            15459 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            15460 ; 36   |#define MAX_ULONG   (-1) 
                            15461 ; 37   |
                            15462 ; 38   |#define WORD_SIZE   24              // word size in bits
                            15463 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            15464 ; 40   |
                            15465 ; 41   |
                            15466 ; 42   |#define BYTE    unsigned char       // btVarName
                            15467 ; 43   |#define CHAR    signed char         // cVarName
                            15468 ; 44   |#define USHORT  unsigned short      // usVarName
                            15469 ; 45   |#define SHORT   unsigned short      // sVarName
                            15470 ; 46   |#define WORD    unsigned int        // wVarName
                            15471 ; 47   |#define INT     signed int          // iVarName
                            15472 ; 48   |#define DWORD   unsigned long       // dwVarName
                            15473 ; 49   |#define LONG    signed long         // lVarName
                            15474 ; 50   |#define BOOL    unsigned int        // bVarName
                            15475 ; 51   |#define FRACT   _fract              // frVarName
                            15476 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            15477 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            15478 ; 54   |#define FLOAT   float               // fVarName
                            15479 ; 55   |#define DBL     double              // dVarName
                            15480 ; 56   |#define ENUM    enum                // eVarName
                            15481 ; 57   |#define CMX     _complex            // cmxVarName
                            15482 ; 58   |typedef WORD UCS3;                   // 
                            15483 ; 59   |
                            15484 ; 60   |#define UINT16  unsigned short
                            15485 ; 61   |#define UINT8   unsigned char   
                            15486 ; 62   |#define UINT32  unsigned long
                            15487 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            15488 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            15489 ; 65   |#define WCHAR   UINT16
                            15490 ; 66   |
                            15491 ; 67   |//UINT128 is 16 bytes or 6 words
                            15492 ; 68   |typedef struct UINT128_3500 {   
                            15493 ; 69   |    int val[6];     
                            15494 ; 70   |} UINT128_3500;
                            15495 ; 71   |
                            15496 ; 72   |#define UINT128   UINT128_3500
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 259

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15497 ; 73   |
                            15498 ; 74   |// Little endian word packed byte strings:   
                            15499 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15500 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15501 ; 77   |// Little endian word packed byte strings:   
                            15502 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15503 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15504 ; 80   |
                            15505 ; 81   |// Declare Memory Spaces To Use When Coding
                            15506 ; 82   |// A. Sector Buffers
                            15507 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            15508 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            15509 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            15510 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            15511 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            15512 ; 88   |// B. Media DDI Memory
                            15513 ; 89   |#define MEDIA_DDI_MEM _Y
                            15514 ; 90   |
                            15515 ; 91   |
                            15516 ; 92   |
                            15517 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            15518 ; 94   |// Examples of circular pointers:
                            15519 ; 95   |//    INT CIRC cpiVarName
                            15520 ; 96   |//    DWORD CIRC cpdwVarName
                            15521 ; 97   |
                            15522 ; 98   |#define RETCODE INT                 // rcVarName
                            15523 ; 99   |
                            15524 ; 100  |// generic bitfield structure
                            15525 ; 101  |struct Bitfield {
                            15526 ; 102  |    unsigned int B0  :1;
                            15527 ; 103  |    unsigned int B1  :1;
                            15528 ; 104  |    unsigned int B2  :1;
                            15529 ; 105  |    unsigned int B3  :1;
                            15530 ; 106  |    unsigned int B4  :1;
                            15531 ; 107  |    unsigned int B5  :1;
                            15532 ; 108  |    unsigned int B6  :1;
                            15533 ; 109  |    unsigned int B7  :1;
                            15534 ; 110  |    unsigned int B8  :1;
                            15535 ; 111  |    unsigned int B9  :1;
                            15536 ; 112  |    unsigned int B10 :1;
                            15537 ; 113  |    unsigned int B11 :1;
                            15538 ; 114  |    unsigned int B12 :1;
                            15539 ; 115  |    unsigned int B13 :1;
                            15540 ; 116  |    unsigned int B14 :1;
                            15541 ; 117  |    unsigned int B15 :1;
                            15542 ; 118  |    unsigned int B16 :1;
                            15543 ; 119  |    unsigned int B17 :1;
                            15544 ; 120  |    unsigned int B18 :1;
                            15545 ; 121  |    unsigned int B19 :1;
                            15546 ; 122  |    unsigned int B20 :1;
                            15547 ; 123  |    unsigned int B21 :1;
                            15548 ; 124  |    unsigned int B22 :1;
                            15549 ; 125  |    unsigned int B23 :1;
                            15550 ; 126  |};
                            15551 ; 127  |
                            15552 ; 128  |union BitInt {
                            15553 ; 129  |        struct Bitfield B;
                            15554 ; 130  |        int        I;
                            15555 ; 131  |};
                            15556 ; 132  |
                            15557 ; 133  |#define MAX_MSG_LENGTH 10
                            15558 ; 134  |struct CMessage
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 260

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15559 ; 135  |{
                            15560 ; 136  |        unsigned int m_uLength;
                            15561 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            15562 ; 138  |};
                            15563 ; 139  |
                            15564 ; 140  |typedef struct {
                            15565 ; 141  |    WORD m_wLength;
                            15566 ; 142  |    WORD m_wMessage;
                            15567 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            15568 ; 144  |} Message;
                            15569 ; 145  |
                            15570 ; 146  |struct MessageQueueDescriptor
                            15571 ; 147  |{
                            15572 ; 148  |        int *m_pBase;
                            15573 ; 149  |        int m_iModulo;
                            15574 ; 150  |        int m_iSize;
                            15575 ; 151  |        int *m_pHead;
                            15576 ; 152  |        int *m_pTail;
                            15577 ; 153  |};
                            15578 ; 154  |
                            15579 ; 155  |struct ModuleEntry
                            15580 ; 156  |{
                            15581 ; 157  |    int m_iSignaledEventMask;
                            15582 ; 158  |    int m_iWaitEventMask;
                            15583 ; 159  |    int m_iResourceOfCode;
                            15584 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            15585 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            15586 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            15587 ; 163  |    int m_uTimeOutHigh;
                            15588 ; 164  |    int m_uTimeOutLow;
                            15589 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            15590 ; 166  |};
                            15591 ; 167  |
                            15592 ; 168  |union WaitMask{
                            15593 ; 169  |    struct B{
                            15594 ; 170  |        unsigned int m_bNone     :1;
                            15595 ; 171  |        unsigned int m_bMessage  :1;
                            15596 ; 172  |        unsigned int m_bTimer    :1;
                            15597 ; 173  |        unsigned int m_bButton   :1;
                            15598 ; 174  |    } B;
                            15599 ; 175  |    int I;
                            15600 ; 176  |} ;
                            15601 ; 177  |
                            15602 ; 178  |
                            15603 ; 179  |struct Button {
                            15604 ; 180  |        WORD wButtonEvent;
                            15605 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            15606 ; 182  |};
                            15607 ; 183  |
                            15608 ; 184  |struct Message {
                            15609 ; 185  |        WORD wMsgLength;
                            15610 ; 186  |        WORD wMsgCommand;
                            15611 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            15612 ; 188  |};
                            15613 ; 189  |
                            15614 ; 190  |union EventTypes {
                            15615 ; 191  |        struct CMessage msg;
                            15616 ; 192  |        struct Button Button ;
                            15617 ; 193  |        struct Message Message;
                            15618 ; 194  |};
                            15619 ; 195  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 261

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15620 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            15621 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            15622 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            15623 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            15624 ; 200  |
                            15625 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            15626 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            15627 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            15628 ; 204  |
                            15629 ; 205  |#if DEBUG
                            15630 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            15631 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            15632 ; 208  |#else 
                            15633 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            15634 ; 210  |#define DebugBuildAssert(x)    
                            15635 ; 211  |#endif
                            15636 ; 212  |
                            15637 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            15638 ; 214  |//  #pragma asm
                            15639 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            15640 ; 216  |//  #pragma endasm
                            15641 ; 217  |
                            15642 ; 218  |
                            15643 ; 219  |#ifdef COLOR_262K
                            15644 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            15645 ; 221  |#elif defined(COLOR_65K)
                            15646 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            15647 ; 223  |#else
                            15648 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            15649 ; 225  |#endif
                            15650 ; 226  |    
                            15651 ; 227  |#endif // #ifndef _TYPES_H
                            15652 
                            15654 
                            15655 ; 31   |
                            15656 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15657 ; 33   |
                            15658 ; 34   |//   SPI STMP3500 Registers 
                            15659 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                            15660 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15661 ; 37   |
                            15662 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                            15663 ; 39   |
                            15664 ; 40   |
                            15665 ; 41   |
                            15666 ; 42   |// /////////////////////////////////////////////
                            15667 ; 43   |// //  SPI Control/Status Register Bit Definitions
                            15668 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                            15669 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                            15670 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                            15671 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                            15672 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                            15673 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                            15674 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                            15675 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                            15676 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                            15677 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                            15678 ; 54   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 262

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15679 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                            15680 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                            15681 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                            15682 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                            15683 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                            15684 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                            15685 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                            15686 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                            15687 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                            15688 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                            15689 ; 65   |
                            15690 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                            15691 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                            15692 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                            15693 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                            15694 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                            15695 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                            15696 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                            15697 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                            15698 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                            15699 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                            15700 ; 76   |
                            15701 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                            15702 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                            15703 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                            15704 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                            15705 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                            15706 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                            15707 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                            15708 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                            15709 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                            15710 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                            15711 ; 87   |
                            15712 ; 88   |typedef union               
                            15713 ; 89   |{
                            15714 ; 90   |    struct {
                            15715 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                            15716 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                            15717 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                            15718 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                            15719 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                            15720 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                            15721 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                            15722 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                            15723 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                            15724 ; 100  |    } B;
                            15725 ; 101  |
                            15726 ; 102  |    int I;
                            15727 ; 103  |    unsigned int U;
                            15728 ; 104  |} spcsr_type;
                            15729 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / S
                                  tatus Register */
                            15730 ; 106  |
                            15731 ; 107  |// /////////////////////////////////////////////
                            15732 ; 108  |// //  SPI Data Register Bit Definitions
                            15733 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                            15734 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                            15735 ; 111  |
                            15736 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                            15737 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                            15738 ; 114  |
                            15739 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 263

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15740 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                            15741 ; 117  |
                            15742 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                            15743 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                            15744 ; 120  |
                            15745 ; 121  |typedef union               
                            15746 ; 122  |{
                            15747 ; 123  |    struct {
                            15748 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                            15749 ; 125  |    } B;
                            15750 ; 126  |
                            15751 ; 127  |    int I;
                            15752 ; 128  |    unsigned int U;
                            15753 ; 129  |} spdr_type;
                            15754 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Regist
                                  er */
                            15755 ; 131  |
                            15756 ; 132  |
                            15757 ; 133  |#endif
                            15758 ; 134  |
                            15759 ; 135  |
                            15760 
                            15762 
                            15763 ; 32   |#include "regsswizzle.h"
                            15764 
                            15766 
                            15767 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15768 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                            15769 ; 3    |//;; Filename    : regsswizzle.inc
                            15770 ; 4    |//;; Description : Register definitions for Swizzle interface
                            15771 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15772 ; 6    |
                            15773 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                            15774 ; 8    |// The following naming conventions are followed in this file.
                            15775 ; 9    |// All registers are named using the format...
                            15776 ; 10   |//     HW_<module>_<regname>
                            15777 ; 11   |// where <module> is the module name which can be any of the following...
                            15778 ; 12   |//     USB20
                            15779 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            15780 ; 14   |// module name includes a number starting from 0 for the first instance of
                            15781 ; 15   |// that module)
                            15782 ; 16   |// <regname> is the specific register within that module
                            15783 ; 17   |// We also define the following...
                            15784 ; 18   |//     HW_<module>_<regname>_BITPOS
                            15785 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            15786 ; 20   |//     HW_<module>_<regname>_SETMASK
                            15787 ; 21   |// which does something else, and
                            15788 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            15789 ; 23   |// which does something else.
                            15790 ; 24   |// Other rules
                            15791 ; 25   |//     All caps
                            15792 ; 26   |//     Numeric identifiers start at 0
                            15793 ; 27   |#if !(defined(regsswizzleinc))
                            15794 ; 28   |#define regsswizzleinc 1
                            15795 ; 29   |
                            15796 ; 30   |#include "types.h"
                            15797 
                            15799 
                            15800 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            15801 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            15802 ; 3    |//
                            15803 ; 4    |// Filename: types.h
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 264

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15804 ; 5    |// Description: Standard data types
                            15805 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            15806 ; 7    |
                            15807 ; 8    |#ifndef _TYPES_H
                            15808 ; 9    |#define _TYPES_H
                            15809 ; 10   |
                            15810 ; 11   |// TODO:  move this outta here!
                            15811 ; 12   |#if !defined(NOERROR)
                            15812 ; 13   |#define NOERROR 0
                            15813 ; 14   |#define SUCCESS 0
                            15814 ; 15   |#endif 
                            15815 ; 16   |#if !defined(SUCCESS)
                            15816 ; 17   |#define SUCCESS  0
                            15817 ; 18   |#endif
                            15818 ; 19   |#if !defined(ERROR)
                            15819 ; 20   |#define ERROR   -1
                            15820 ; 21   |#endif
                            15821 ; 22   |#if !defined(FALSE)
                            15822 ; 23   |#define FALSE 0
                            15823 ; 24   |#endif
                            15824 ; 25   |#if !defined(TRUE)
                            15825 ; 26   |#define TRUE  1
                            15826 ; 27   |#endif
                            15827 ; 28   |
                            15828 ; 29   |#if !defined(NULL)
                            15829 ; 30   |#define NULL 0
                            15830 ; 31   |#endif
                            15831 ; 32   |
                            15832 ; 33   |#define MAX_INT     0x7FFFFF
                            15833 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            15834 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            15835 ; 36   |#define MAX_ULONG   (-1) 
                            15836 ; 37   |
                            15837 ; 38   |#define WORD_SIZE   24              // word size in bits
                            15838 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            15839 ; 40   |
                            15840 ; 41   |
                            15841 ; 42   |#define BYTE    unsigned char       // btVarName
                            15842 ; 43   |#define CHAR    signed char         // cVarName
                            15843 ; 44   |#define USHORT  unsigned short      // usVarName
                            15844 ; 45   |#define SHORT   unsigned short      // sVarName
                            15845 ; 46   |#define WORD    unsigned int        // wVarName
                            15846 ; 47   |#define INT     signed int          // iVarName
                            15847 ; 48   |#define DWORD   unsigned long       // dwVarName
                            15848 ; 49   |#define LONG    signed long         // lVarName
                            15849 ; 50   |#define BOOL    unsigned int        // bVarName
                            15850 ; 51   |#define FRACT   _fract              // frVarName
                            15851 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            15852 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            15853 ; 54   |#define FLOAT   float               // fVarName
                            15854 ; 55   |#define DBL     double              // dVarName
                            15855 ; 56   |#define ENUM    enum                // eVarName
                            15856 ; 57   |#define CMX     _complex            // cmxVarName
                            15857 ; 58   |typedef WORD UCS3;                   // 
                            15858 ; 59   |
                            15859 ; 60   |#define UINT16  unsigned short
                            15860 ; 61   |#define UINT8   unsigned char   
                            15861 ; 62   |#define UINT32  unsigned long
                            15862 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            15863 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 265

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15864 ; 65   |#define WCHAR   UINT16
                            15865 ; 66   |
                            15866 ; 67   |//UINT128 is 16 bytes or 6 words
                            15867 ; 68   |typedef struct UINT128_3500 {   
                            15868 ; 69   |    int val[6];     
                            15869 ; 70   |} UINT128_3500;
                            15870 ; 71   |
                            15871 ; 72   |#define UINT128   UINT128_3500
                            15872 ; 73   |
                            15873 ; 74   |// Little endian word packed byte strings:   
                            15874 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15875 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15876 ; 77   |// Little endian word packed byte strings:   
                            15877 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            15878 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            15879 ; 80   |
                            15880 ; 81   |// Declare Memory Spaces To Use When Coding
                            15881 ; 82   |// A. Sector Buffers
                            15882 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            15883 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            15884 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            15885 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            15886 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            15887 ; 88   |// B. Media DDI Memory
                            15888 ; 89   |#define MEDIA_DDI_MEM _Y
                            15889 ; 90   |
                            15890 ; 91   |
                            15891 ; 92   |
                            15892 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            15893 ; 94   |// Examples of circular pointers:
                            15894 ; 95   |//    INT CIRC cpiVarName
                            15895 ; 96   |//    DWORD CIRC cpdwVarName
                            15896 ; 97   |
                            15897 ; 98   |#define RETCODE INT                 // rcVarName
                            15898 ; 99   |
                            15899 ; 100  |// generic bitfield structure
                            15900 ; 101  |struct Bitfield {
                            15901 ; 102  |    unsigned int B0  :1;
                            15902 ; 103  |    unsigned int B1  :1;
                            15903 ; 104  |    unsigned int B2  :1;
                            15904 ; 105  |    unsigned int B3  :1;
                            15905 ; 106  |    unsigned int B4  :1;
                            15906 ; 107  |    unsigned int B5  :1;
                            15907 ; 108  |    unsigned int B6  :1;
                            15908 ; 109  |    unsigned int B7  :1;
                            15909 ; 110  |    unsigned int B8  :1;
                            15910 ; 111  |    unsigned int B9  :1;
                            15911 ; 112  |    unsigned int B10 :1;
                            15912 ; 113  |    unsigned int B11 :1;
                            15913 ; 114  |    unsigned int B12 :1;
                            15914 ; 115  |    unsigned int B13 :1;
                            15915 ; 116  |    unsigned int B14 :1;
                            15916 ; 117  |    unsigned int B15 :1;
                            15917 ; 118  |    unsigned int B16 :1;
                            15918 ; 119  |    unsigned int B17 :1;
                            15919 ; 120  |    unsigned int B18 :1;
                            15920 ; 121  |    unsigned int B19 :1;
                            15921 ; 122  |    unsigned int B20 :1;
                            15922 ; 123  |    unsigned int B21 :1;
                            15923 ; 124  |    unsigned int B22 :1;
                            15924 ; 125  |    unsigned int B23 :1;
                            15925 ; 126  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 266

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15926 ; 127  |
                            15927 ; 128  |union BitInt {
                            15928 ; 129  |        struct Bitfield B;
                            15929 ; 130  |        int        I;
                            15930 ; 131  |};
                            15931 ; 132  |
                            15932 ; 133  |#define MAX_MSG_LENGTH 10
                            15933 ; 134  |struct CMessage
                            15934 ; 135  |{
                            15935 ; 136  |        unsigned int m_uLength;
                            15936 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            15937 ; 138  |};
                            15938 ; 139  |
                            15939 ; 140  |typedef struct {
                            15940 ; 141  |    WORD m_wLength;
                            15941 ; 142  |    WORD m_wMessage;
                            15942 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            15943 ; 144  |} Message;
                            15944 ; 145  |
                            15945 ; 146  |struct MessageQueueDescriptor
                            15946 ; 147  |{
                            15947 ; 148  |        int *m_pBase;
                            15948 ; 149  |        int m_iModulo;
                            15949 ; 150  |        int m_iSize;
                            15950 ; 151  |        int *m_pHead;
                            15951 ; 152  |        int *m_pTail;
                            15952 ; 153  |};
                            15953 ; 154  |
                            15954 ; 155  |struct ModuleEntry
                            15955 ; 156  |{
                            15956 ; 157  |    int m_iSignaledEventMask;
                            15957 ; 158  |    int m_iWaitEventMask;
                            15958 ; 159  |    int m_iResourceOfCode;
                            15959 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            15960 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            15961 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            15962 ; 163  |    int m_uTimeOutHigh;
                            15963 ; 164  |    int m_uTimeOutLow;
                            15964 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            15965 ; 166  |};
                            15966 ; 167  |
                            15967 ; 168  |union WaitMask{
                            15968 ; 169  |    struct B{
                            15969 ; 170  |        unsigned int m_bNone     :1;
                            15970 ; 171  |        unsigned int m_bMessage  :1;
                            15971 ; 172  |        unsigned int m_bTimer    :1;
                            15972 ; 173  |        unsigned int m_bButton   :1;
                            15973 ; 174  |    } B;
                            15974 ; 175  |    int I;
                            15975 ; 176  |} ;
                            15976 ; 177  |
                            15977 ; 178  |
                            15978 ; 179  |struct Button {
                            15979 ; 180  |        WORD wButtonEvent;
                            15980 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            15981 ; 182  |};
                            15982 ; 183  |
                            15983 ; 184  |struct Message {
                            15984 ; 185  |        WORD wMsgLength;
                            15985 ; 186  |        WORD wMsgCommand;
                            15986 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 267

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15987 ; 188  |};
                            15988 ; 189  |
                            15989 ; 190  |union EventTypes {
                            15990 ; 191  |        struct CMessage msg;
                            15991 ; 192  |        struct Button Button ;
                            15992 ; 193  |        struct Message Message;
                            15993 ; 194  |};
                            15994 ; 195  |
                            15995 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            15996 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            15997 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            15998 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            15999 ; 200  |
                            16000 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            16001 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            16002 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            16003 ; 204  |
                            16004 ; 205  |#if DEBUG
                            16005 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16006 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16007 ; 208  |#else 
                            16008 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            16009 ; 210  |#define DebugBuildAssert(x)    
                            16010 ; 211  |#endif
                            16011 ; 212  |
                            16012 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16013 ; 214  |//  #pragma asm
                            16014 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16015 ; 216  |//  #pragma endasm
                            16016 ; 217  |
                            16017 ; 218  |
                            16018 ; 219  |#ifdef COLOR_262K
                            16019 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            16020 ; 221  |#elif defined(COLOR_65K)
                            16021 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            16022 ; 223  |#else
                            16023 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            16024 ; 225  |#endif
                            16025 ; 226  |    
                            16026 ; 227  |#endif // #ifndef _TYPES_H
                            16027 
                            16029 
                            16030 ; 31   |
                            16031 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16032 ; 33   |
                            16033 ; 34   |//   SWIZZLE STMP3500 Registers 
                            16034 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                            16035 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16036 ; 37   |
                            16037 ; 38   |
                            16038 ; 39   |
                            16039 ; 40   |
                            16040 ; 41   |
                            16041 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                            16042 ; 43   |
                            16043 ; 44   |
                            16044 ; 45   |
                            16045 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 268

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16046 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                            16047 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                            16048 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                            16049 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                            16050 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                            16051 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                            16052 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                            16053 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                            16054 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                            16055 ; 56   |
                            16056 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                            16057 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                            16058 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                            16059 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                            16060 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                            16061 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                            16062 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                            16063 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                            16064 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                            16065 ; 66   |
                            16066 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITP
                                  OS)
                            16067 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITP
                                  OS)
                            16068 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_B
                                  ITPOS)
                            16069 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIG
                                  N_BITPOS)
                            16070 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_S
                                  HIFT_BITPOS)
                            16071 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_B
                                  ITPOS)
                            16072 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECS
                                  R1_CLK_OFF_BITPOS)
                            16073 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1
                                  _NEWADD_BITPOS)
                            16074 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSV
                                  D_BITPOS)
                            16075 ; 76   |
                            16076 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                            16077 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                            16078 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                            16079 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                            16080 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                            16081 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                            16082 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                            16083 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                            16084 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                            16085 ; 86   |
                            16086 ; 87   |////////////////////////////////////////////////////////////////////////////////
                            16087 ; 88   |//  Bit Manipulation Unit Registers
                            16088 ; 89   |////////////////////////////////////////////////////////////////////////////////
                            16089 ; 90   |typedef union
                            16090 ; 91   |{
                            16091 ; 92   |    struct
                            16092 ; 93   |    {
                            16093 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                            16094 ; 95   |    int LA      :1;     /* Left Align Data                          */
                            16095 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                            16096 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                            16097 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                            16098 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 269

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16099 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                            16100 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                            16101 ; 102  |    } B;
                            16102 ; 103  |    int I;
                            16103 ; 104  |    unsigned U;
                            16104 ; 105  |} swizzlecsr1_type;
                            16105 ; 106  |////////////////////////////////////////////////////////////////////////////////
                            16106 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* S
                                  wizzle Control & Status Register 1 */
                            16107 ; 108  |
                            16108 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                            16109 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                            16110 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                            16111 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                            16112 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                            16113 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                            16114 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                            16115 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                            16116 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                            16117 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                            16118 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                            16119 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                            16120 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                            16121 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                            16122 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                            16123 ; 124  |
                            16124 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                            16125 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                            16126 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                            16127 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                            16128 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                            16129 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                            16130 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                            16131 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                            16132 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                            16133 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                            16134 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                            16135 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                            16136 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                            16137 ; 138  |
                            16138 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KIC
                                  K_BITPOS)
                            16139 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_S
                                  ASEL_BITPOS)
                            16140 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECS
                                  R2_DESASEL_BITPOS)
                            16141 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIG
                                  E_BITPOS)
                            16142 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _BITREV_BITPOS)
                            16143 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLS
                                  B_BITPOS)
                            16144 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMS
                                  B_BITPOS)
                            16145 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  L_BITPOS)
                            16146 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  I_BITPOS)
                            16147 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_B
                                  S_EN_BITPOS)
                            16148 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZ
                                  LECSR2_SBYTEDEST_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 270

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16149 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _UNKICK_BITPOS)
                            16150 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSV
                                  D_BITPOS)
                            16151 ; 152  |
                            16152 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                            16153 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                            16154 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                            16155 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                            16156 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                            16157 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                            16158 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                            16159 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                            16160 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                            16161 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                            16162 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                            16163 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                            16164 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                            16165 ; 166  |
                            16166 ; 167  |///////////////////////////////////////////////////////////////////////////////
                            16167 ; 168  |typedef union
                            16168 ; 169  |{
                            16169 ; 170  |    struct
                            16170 ; 171  |    {
                            16171 ; 172  |    int KICK    :1;         /* Start transfer                      */
                            16172 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                            16173 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                            16174 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                            16175 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                            16176 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                            16177 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                            16178 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                            16179 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                            16180 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                            16181 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                            16182 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                            16183 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                            16184 ; 185  |    } B;
                            16185 ; 186  |    unsigned int I;
                            16186 ; 187  |    unsigned int U;
                            16187 ; 188  |} swizzlecsr2_type;
                            16188 ; 189  |///////////////////////////////////////////////////////////////////////////////
                            16189 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* S
                                  wizzle Control & Status Register 2 */
                            16190 ; 191  |
                            16191 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                            16192 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                            16193 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                            16194 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                            16195 ; 196  |
                            16196 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                            16197 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                            16198 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                            16199 ; 200  |
                            16200 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  SIZE_BITPOS)
                            16201 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWI
                                  ZZLESIZER_NEW_SHIFT_BITPOS)
                            16202 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  RSVD_BITPOS)
                            16203 ; 204  |
                            16204 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 271

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16205 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                            16206 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                            16207 ; 208  |
                            16208 ; 209  |///////////////////////////////////////////////////////////////////////////////
                            16209 ; 210  |typedef union
                            16210 ; 211  |{
                            16211 ; 212  |    struct
                            16212 ; 213  |    {
                            16213 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                            16214 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                            16215 ; 216  |    } B;
                            16216 ; 217  |    int I;
                            16217 ; 218  |    unsigned U;
                            16218 ; 219  |} swizzlesizer_type;
                            16219 ; 220  |///////////////////////////////////////////////////////////////////////////////
                            16220 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))       
                                   /* Swizzle Transfer Size Register */
                            16221 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* S
                                  wizzle Source Address Register */
                            16222 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* S
                                  wizzle Data1 Register */
                            16223 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* S
                                  wizzle Data2 Register */
                            16224 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* S
                                  wizzle Destination Address Register */
                            16225 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* S
                                  wizzle Big Endian Register */
                            16226 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* S
                                  wizzle BITREV Register */
                            16227 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* S
                                  wizzle Pass Least Significant Byte Register */
                            16228 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* S
                                  wizzle Pass Intermediate Byte Register */
                            16229 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* S
                                  wizzle Pass Most Significant Byte Register */
                            16230 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* S
                                  wizzle Pass Least Significant Word Register */
                            16231 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* S
                                  wizzle Pass Intermediate Significant Word Register */
                            16232 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* S
                                  wizzle Pass Most Significant Word Register */
                            16233 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Sw
                                  izzle Barrel Shift Register */
                            16234 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swi
                                  zzle Divide By 3 Lower Register */
                            16235 ; 236  |
                            16236 ; 237  |
                            16237 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                            16238 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                            16239 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                            16240 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                            16241 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                            16242 ; 243  |
                            16243 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                            16244 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                            16245 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                            16246 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                            16247 ; 248  |
                            16248 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW
                                  _SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                            16249 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD0_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 272

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16250 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_S
                                  WIZZLEDIV3UR_REMAINDER_BITPOS)
                            16251 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD1_BITPOS)
                            16252 ; 253  |
                            16253 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                            16254 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                            16255 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                            16256 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                            16257 ; 258  |
                            16258 ; 259  |///////////////////////////////////////////////////////////////////////////////
                            16259 ; 260  |typedef union
                            16260 ; 261  |{
                            16261 ; 262  |    struct
                            16262 ; 263  |    {
                            16263 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                            16264 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                            16265 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                            16266 ; 267  |    } B;
                            16267 ; 268  |    int I;
                            16268 ; 269  |    unsigned U;
                            16269 ; 270  |} swizzlediv3ur_type;
                            16270 ; 271  |///////////////////////////////////////////////////////////////////////////////
                            16271 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    
                                  /* Swizzle Divide By 3 Upper Register */
                            16272 ; 273  |
                            16273 ; 274  |#endif
                            16274 ; 275  |
                            16275 
                            16277 
                            16278 ; 33   |#include "regssdram.h"
                            16279 
                            16281 
                            16282 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16283 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            16284 ; 3    |//;  File        : regssdram.inc
                            16285 ; 4    |//;  Description : Mixed Signal IP Register definition
                            16286 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16287 ; 6    |
                            16288 ; 7    |// The following naming conventions are followed in this file.
                            16289 ; 8    |// All registers are named using the format...
                            16290 ; 9    |//     HW_<module>_<regname>
                            16291 ; 10   |// where <module> is the module name which can be any of the following...
                            16292 ; 11   |//     SYSTEM
                            16293 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            16294 ; 13   |// module name includes a number starting from 0 for the first instance of
                            16295 ; 14   |// that module)
                            16296 ; 15   |// <regname> is the specific register within that module
                            16297 ; 16   |// We also define the following...
                            16298 ; 17   |//     HW_<module>_<regname>_BITPOS
                            16299 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            16300 ; 19   |//     HW_<module>_<regname>_SETMASK
                            16301 ; 20   |// which does something else, and
                            16302 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            16303 ; 22   |// which does something else.
                            16304 ; 23   |// Other rules
                            16305 ; 24   |//     All caps
                            16306 ; 25   |//     Numeric identifiers start at 0
                            16307 ; 26   |
                            16308 ; 27   |#if !(defined(regssdraminc))
                            16309 ; 28   |#define regssdraminc 1
                            16310 ; 29   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 273

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16311 ; 30   |#include "types.h"
                            16312 
                            16314 
                            16315 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16316 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16317 ; 3    |//
                            16318 ; 4    |// Filename: types.h
                            16319 ; 5    |// Description: Standard data types
                            16320 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16321 ; 7    |
                            16322 ; 8    |#ifndef _TYPES_H
                            16323 ; 9    |#define _TYPES_H
                            16324 ; 10   |
                            16325 ; 11   |// TODO:  move this outta here!
                            16326 ; 12   |#if !defined(NOERROR)
                            16327 ; 13   |#define NOERROR 0
                            16328 ; 14   |#define SUCCESS 0
                            16329 ; 15   |#endif 
                            16330 ; 16   |#if !defined(SUCCESS)
                            16331 ; 17   |#define SUCCESS  0
                            16332 ; 18   |#endif
                            16333 ; 19   |#if !defined(ERROR)
                            16334 ; 20   |#define ERROR   -1
                            16335 ; 21   |#endif
                            16336 ; 22   |#if !defined(FALSE)
                            16337 ; 23   |#define FALSE 0
                            16338 ; 24   |#endif
                            16339 ; 25   |#if !defined(TRUE)
                            16340 ; 26   |#define TRUE  1
                            16341 ; 27   |#endif
                            16342 ; 28   |
                            16343 ; 29   |#if !defined(NULL)
                            16344 ; 30   |#define NULL 0
                            16345 ; 31   |#endif
                            16346 ; 32   |
                            16347 ; 33   |#define MAX_INT     0x7FFFFF
                            16348 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16349 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16350 ; 36   |#define MAX_ULONG   (-1) 
                            16351 ; 37   |
                            16352 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16353 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16354 ; 40   |
                            16355 ; 41   |
                            16356 ; 42   |#define BYTE    unsigned char       // btVarName
                            16357 ; 43   |#define CHAR    signed char         // cVarName
                            16358 ; 44   |#define USHORT  unsigned short      // usVarName
                            16359 ; 45   |#define SHORT   unsigned short      // sVarName
                            16360 ; 46   |#define WORD    unsigned int        // wVarName
                            16361 ; 47   |#define INT     signed int          // iVarName
                            16362 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16363 ; 49   |#define LONG    signed long         // lVarName
                            16364 ; 50   |#define BOOL    unsigned int        // bVarName
                            16365 ; 51   |#define FRACT   _fract              // frVarName
                            16366 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16367 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16368 ; 54   |#define FLOAT   float               // fVarName
                            16369 ; 55   |#define DBL     double              // dVarName
                            16370 ; 56   |#define ENUM    enum                // eVarName
                            16371 ; 57   |#define CMX     _complex            // cmxVarName
                            16372 ; 58   |typedef WORD UCS3;                   // 
                            16373 ; 59   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 274

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16374 ; 60   |#define UINT16  unsigned short
                            16375 ; 61   |#define UINT8   unsigned char   
                            16376 ; 62   |#define UINT32  unsigned long
                            16377 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            16378 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            16379 ; 65   |#define WCHAR   UINT16
                            16380 ; 66   |
                            16381 ; 67   |//UINT128 is 16 bytes or 6 words
                            16382 ; 68   |typedef struct UINT128_3500 {   
                            16383 ; 69   |    int val[6];     
                            16384 ; 70   |} UINT128_3500;
                            16385 ; 71   |
                            16386 ; 72   |#define UINT128   UINT128_3500
                            16387 ; 73   |
                            16388 ; 74   |// Little endian word packed byte strings:   
                            16389 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16390 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16391 ; 77   |// Little endian word packed byte strings:   
                            16392 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16393 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16394 ; 80   |
                            16395 ; 81   |// Declare Memory Spaces To Use When Coding
                            16396 ; 82   |// A. Sector Buffers
                            16397 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16398 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16399 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16400 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16401 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16402 ; 88   |// B. Media DDI Memory
                            16403 ; 89   |#define MEDIA_DDI_MEM _Y
                            16404 ; 90   |
                            16405 ; 91   |
                            16406 ; 92   |
                            16407 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16408 ; 94   |// Examples of circular pointers:
                            16409 ; 95   |//    INT CIRC cpiVarName
                            16410 ; 96   |//    DWORD CIRC cpdwVarName
                            16411 ; 97   |
                            16412 ; 98   |#define RETCODE INT                 // rcVarName
                            16413 ; 99   |
                            16414 ; 100  |// generic bitfield structure
                            16415 ; 101  |struct Bitfield {
                            16416 ; 102  |    unsigned int B0  :1;
                            16417 ; 103  |    unsigned int B1  :1;
                            16418 ; 104  |    unsigned int B2  :1;
                            16419 ; 105  |    unsigned int B3  :1;
                            16420 ; 106  |    unsigned int B4  :1;
                            16421 ; 107  |    unsigned int B5  :1;
                            16422 ; 108  |    unsigned int B6  :1;
                            16423 ; 109  |    unsigned int B7  :1;
                            16424 ; 110  |    unsigned int B8  :1;
                            16425 ; 111  |    unsigned int B9  :1;
                            16426 ; 112  |    unsigned int B10 :1;
                            16427 ; 113  |    unsigned int B11 :1;
                            16428 ; 114  |    unsigned int B12 :1;
                            16429 ; 115  |    unsigned int B13 :1;
                            16430 ; 116  |    unsigned int B14 :1;
                            16431 ; 117  |    unsigned int B15 :1;
                            16432 ; 118  |    unsigned int B16 :1;
                            16433 ; 119  |    unsigned int B17 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 275

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16434 ; 120  |    unsigned int B18 :1;
                            16435 ; 121  |    unsigned int B19 :1;
                            16436 ; 122  |    unsigned int B20 :1;
                            16437 ; 123  |    unsigned int B21 :1;
                            16438 ; 124  |    unsigned int B22 :1;
                            16439 ; 125  |    unsigned int B23 :1;
                            16440 ; 126  |};
                            16441 ; 127  |
                            16442 ; 128  |union BitInt {
                            16443 ; 129  |        struct Bitfield B;
                            16444 ; 130  |        int        I;
                            16445 ; 131  |};
                            16446 ; 132  |
                            16447 ; 133  |#define MAX_MSG_LENGTH 10
                            16448 ; 134  |struct CMessage
                            16449 ; 135  |{
                            16450 ; 136  |        unsigned int m_uLength;
                            16451 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16452 ; 138  |};
                            16453 ; 139  |
                            16454 ; 140  |typedef struct {
                            16455 ; 141  |    WORD m_wLength;
                            16456 ; 142  |    WORD m_wMessage;
                            16457 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16458 ; 144  |} Message;
                            16459 ; 145  |
                            16460 ; 146  |struct MessageQueueDescriptor
                            16461 ; 147  |{
                            16462 ; 148  |        int *m_pBase;
                            16463 ; 149  |        int m_iModulo;
                            16464 ; 150  |        int m_iSize;
                            16465 ; 151  |        int *m_pHead;
                            16466 ; 152  |        int *m_pTail;
                            16467 ; 153  |};
                            16468 ; 154  |
                            16469 ; 155  |struct ModuleEntry
                            16470 ; 156  |{
                            16471 ; 157  |    int m_iSignaledEventMask;
                            16472 ; 158  |    int m_iWaitEventMask;
                            16473 ; 159  |    int m_iResourceOfCode;
                            16474 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            16475 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            16476 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            16477 ; 163  |    int m_uTimeOutHigh;
                            16478 ; 164  |    int m_uTimeOutLow;
                            16479 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            16480 ; 166  |};
                            16481 ; 167  |
                            16482 ; 168  |union WaitMask{
                            16483 ; 169  |    struct B{
                            16484 ; 170  |        unsigned int m_bNone     :1;
                            16485 ; 171  |        unsigned int m_bMessage  :1;
                            16486 ; 172  |        unsigned int m_bTimer    :1;
                            16487 ; 173  |        unsigned int m_bButton   :1;
                            16488 ; 174  |    } B;
                            16489 ; 175  |    int I;
                            16490 ; 176  |} ;
                            16491 ; 177  |
                            16492 ; 178  |
                            16493 ; 179  |struct Button {
                            16494 ; 180  |        WORD wButtonEvent;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 276

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16495 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            16496 ; 182  |};
                            16497 ; 183  |
                            16498 ; 184  |struct Message {
                            16499 ; 185  |        WORD wMsgLength;
                            16500 ; 186  |        WORD wMsgCommand;
                            16501 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            16502 ; 188  |};
                            16503 ; 189  |
                            16504 ; 190  |union EventTypes {
                            16505 ; 191  |        struct CMessage msg;
                            16506 ; 192  |        struct Button Button ;
                            16507 ; 193  |        struct Message Message;
                            16508 ; 194  |};
                            16509 ; 195  |
                            16510 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            16511 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            16512 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            16513 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            16514 ; 200  |
                            16515 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            16516 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            16517 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            16518 ; 204  |
                            16519 ; 205  |#if DEBUG
                            16520 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16521 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16522 ; 208  |#else 
                            16523 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            16524 ; 210  |#define DebugBuildAssert(x)    
                            16525 ; 211  |#endif
                            16526 ; 212  |
                            16527 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16528 ; 214  |//  #pragma asm
                            16529 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16530 ; 216  |//  #pragma endasm
                            16531 ; 217  |
                            16532 ; 218  |
                            16533 ; 219  |#ifdef COLOR_262K
                            16534 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            16535 ; 221  |#elif defined(COLOR_65K)
                            16536 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            16537 ; 223  |#else
                            16538 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            16539 ; 225  |#endif
                            16540 ; 226  |    
                            16541 ; 227  |#endif // #ifndef _TYPES_H
                            16542 
                            16544 
                            16545 ; 31   |
                            16546 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                            16547 ; 33   |
                            16548 ; 34   |
                            16549 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                            16550 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                            16551 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                            16552 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                            16553 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 277

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16554 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                            16555 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                            16556 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                            16557 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                            16558 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                            16559 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                            16560 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                            16561 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                            16562 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                            16563 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                            16564 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                            16565 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                            16566 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                            16567 ; 53   |
                            16568 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                            16569 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                            16570 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                            16571 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                            16572 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                            16573 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                            16574 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                            16575 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                            16576 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                            16577 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                            16578 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                            16579 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                            16580 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                            16581 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                            16582 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                            16583 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                            16584 ; 70   |
                            16585 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SD
                                  RAMEN_BITPOS)
                            16586 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                            16587 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS
                                  )
                            16588 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BIT
                                  POS)
                            16589 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                            16590 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_
                                  BITPOS)
                            16591 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BIT
                                  POS)
                            16592 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_
                                  BITPOS)
                            16593 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS
                                  )
                            16594 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BIT
                                  POS)
                            16595 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_
                                  BITPOS)
                            16596 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_
                                  BITPOS)
                            16597 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS
                                  )
                            16598 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_
                                  BITPOS)
                            16599 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_
                                  BITPOS)
                            16600 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BIT
                                  POS)
                            16601 ; 87   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 278

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16602 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                            16603 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                            16604 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                            16605 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                            16606 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                            16607 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                            16608 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                            16609 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                            16610 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                            16611 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                            16612 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                            16613 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                            16614 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                            16615 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                            16616 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                            16617 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                            16618 ; 104  |
                            16619 ; 105  |typedef union               
                            16620 ; 106  |{
                            16621 ; 107  |    struct {
                            16622 ; 108  |        int SDRAMEN                     :1;
                            16623 ; 109  |        int IE                          :1;
                            16624 ; 110  |        int RNW                         :1;
                            16625 ; 111  |        int KICK                        :1;
                            16626 ; 112  |        int LM                          :1;
                            16627 ; 113  |        int ISTAT                       :1;
                            16628 ; 114  |        int PWDN                        :1;
                            16629 ; 115  |        int RSVD                        :1;
                            16630 ; 116  |        int SBYTE                       :2;
                            16631 ; 117  |        int MEM                         :2;
                            16632 ; 118  |        int BIGE                        :1;
                            16633 ; 119  |        int ASIZE                       :3;
                            16634 ; 120  |        int UKICK                       :1;
                            16635 ; 121  |        int DIV                         :4;
                            16636 ; 122  |        int MULTI                       :1;
                            16637 ; 123  |        int SDRAM                       :1;
                            16638 ; 124  |        int SIGN                        :1;
                            16639 ; 125  |    } B;
                            16640 ; 126  |    int I;
                            16641 ; 127  |} sdramcsr_type;
                            16642 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                            16643 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                            16644 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                            16645 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                            16646 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                            16647 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                            16648 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                            16649 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                            16650 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                            16651 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                            16652 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                            16653 ; 139  |
                            16654 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                            16655 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                            16656 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                            16657 ; 143  |
                            16658 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                            16659 ; 145  |
                            16660 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                            16661 ; 147  |
                            16662 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            16663 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 279

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16664 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                            16665 ; 151  |
                            16666 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                            16667 ; 153  |
                            16668 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                            16669 ; 155  |
                            16670 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                            16671 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                            16672 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                            16673 ; 159  |
                            16674 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                            16675 ; 161  |
                            16676 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                            16677 ; 163  |
                            16678 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                            16679 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                            16680 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                            16681 ; 167  |
                            16682 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                            16683 ; 169  |
                            16684 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                            16685 ; 171  |
                            16686 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                            16687 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                            16688 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                            16689 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                            16690 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                            16691 ; 177  |
                            16692 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                            16693 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                            16694 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                            16695 ; 181  |
                            16696 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _INIT_BITPOS)
                            16697 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_T
                                  RP_BITPOS)
                            16698 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _TRFC_BITPOS)
                            16699 ; 185  |
                            16700 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                            16701 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                            16702 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                            16703 ; 189  |
                            16704 ; 190  |typedef union               
                            16705 ; 191  |{
                            16706 ; 192  |    struct {
                            16707 ; 193  |        int INIT                :16;
                            16708 ; 194  |        int TRP                 :4;
                            16709 ; 195  |        int TRFC                :4;
                            16710 ; 196  |    } B;
                            16711 ; 197  |    int I;
                            16712 ; 198  |} sdramtimer1_type;
                            16713 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                            16714 ; 200  |
                            16715 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                            16716 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                            16717 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                            16718 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                            16719 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                            16720 ; 206  |
                            16721 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                            16722 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 280

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16723 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                            16724 ; 210  |
                            16725 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TXSR_BITPOS)
                            16726 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TREF_BITPOS)
                            16727 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TRCD_BITPOS)
                            16728 ; 214  |
                            16729 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                            16730 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                            16731 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                            16732 ; 218  |
                            16733 ; 219  |typedef union               
                            16734 ; 220  |{
                            16735 ; 221  |    struct {
                            16736 ; 222  |        int TXSR                :4;
                            16737 ; 223  |        int TREF                :12;
                            16738 ; 224  |        int TRCD                :4;
                            16739 ; 225  |        int RSVD                :4; 
                            16740 ; 226  |    } B;
                            16741 ; 227  |    int I;
                            16742 ; 228  |} sdramtimer2_type;
                            16743 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                            16744 ; 230  |
                            16745 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            16746 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                            16747 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                            16748 ; 234  |
                            16749 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                            16750 ; 236  |
                            16751 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                            16752 ; 238  |
                            16753 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                            16754 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                            16755 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                            16756 ; 242  |
                            16757 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                            16758 ; 244  |
                            16759 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                            16760 ; 246  |
                            16761 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            16762 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                            16763 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                            16764 ; 250  |
                            16765 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                            16766 ; 252  |
                            16767 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS
                                  )
                            16768 ; 254  |
                            16769 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                            16770 ; 256  |
                            16771 ; 257  |typedef union               
                            16772 ; 258  |{
                            16773 ; 259  |    struct {
                            16774 ; 260  |        int VALUE               :14;
                            16775 ; 261  |        int RSVD                :10; 
                            16776 ; 262  |    } B;
                            16777 ; 263  |    int I;
                            16778 ; 264  |} sdrammode_type;
                            16779 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                            16780 ; 266  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 281

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16781 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                            16782 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                            16783 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                            16784 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                            16785 ; 271  |
                            16786 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                            16787 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                            16788 ; 274  |
                            16789 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_COLWIDTH_BITPOS)
                            16790 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_ROWWIDTH_BITPOS)
                            16791 ; 277  |
                            16792 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                            16793 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                            16794 ; 280  |
                            16795 ; 281  |typedef union               
                            16796 ; 282  |{
                            16797 ; 283  |    struct {
                            16798 ; 284  |        int COLWIDTH               :4;
                            16799 ; 285  |        int ROWWIDTH               :4; 
                            16800 ; 286  |    } B;
                            16801 ; 287  |    int I;
                            16802 ; 288  |} sdramtype_type;
                            16803 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                            16804 ; 290  |
                            16805 ; 291  |#endif
                            16806 ; 292  |
                            16807 ; 293  |
                            16808 ; 294  |
                            16809 ; 295  |
                            16810 ; 296  |
                            16811 ; 297  |
                            16812 
                            16814 
                            16815 ; 34   |#include "regstb.h"
                            16816 
                            16818 
                            16819 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            16820 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            16821 ; 3    |// Filename: regstb.inc
                            16822 ; 4    |// Description: Register definitions for Trace Buffer
                            16823 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            16824 ; 6    |// The following naming conventions are followed in this file.
                            16825 ; 7    |// All registers are named using the format...
                            16826 ; 8    |//     HW_<module>_<regname>
                            16827 ; 9    |// where <module> is the module name which can be any of the following...
                            16828 ; 10   |//     USB20
                            16829 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            16830 ; 12   |// module name includes a number starting from 0 for the first instance of
                            16831 ; 13   |// that module)
                            16832 ; 14   |// <regname> is the specific register within that module
                            16833 ; 15   |// We also define the following...
                            16834 ; 16   |//     HW_<module>_<regname>_BITPOS
                            16835 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            16836 ; 18   |//     HW_<module>_<regname>_SETMASK
                            16837 ; 19   |// which does something else, and
                            16838 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            16839 ; 21   |// which does something else.
                            16840 ; 22   |// Other rules
                            16841 ; 23   |//     All caps
                            16842 ; 24   |//     Numeric identifiers start at 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 282

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16843 ; 25   |#if !(defined(regstbinc))
                            16844 ; 26   |#define regstbinc 1
                            16845 ; 27   |
                            16846 ; 28   |#include "types.h"
                            16847 
                            16849 
                            16850 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16851 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16852 ; 3    |//
                            16853 ; 4    |// Filename: types.h
                            16854 ; 5    |// Description: Standard data types
                            16855 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16856 ; 7    |
                            16857 ; 8    |#ifndef _TYPES_H
                            16858 ; 9    |#define _TYPES_H
                            16859 ; 10   |
                            16860 ; 11   |// TODO:  move this outta here!
                            16861 ; 12   |#if !defined(NOERROR)
                            16862 ; 13   |#define NOERROR 0
                            16863 ; 14   |#define SUCCESS 0
                            16864 ; 15   |#endif 
                            16865 ; 16   |#if !defined(SUCCESS)
                            16866 ; 17   |#define SUCCESS  0
                            16867 ; 18   |#endif
                            16868 ; 19   |#if !defined(ERROR)
                            16869 ; 20   |#define ERROR   -1
                            16870 ; 21   |#endif
                            16871 ; 22   |#if !defined(FALSE)
                            16872 ; 23   |#define FALSE 0
                            16873 ; 24   |#endif
                            16874 ; 25   |#if !defined(TRUE)
                            16875 ; 26   |#define TRUE  1
                            16876 ; 27   |#endif
                            16877 ; 28   |
                            16878 ; 29   |#if !defined(NULL)
                            16879 ; 30   |#define NULL 0
                            16880 ; 31   |#endif
                            16881 ; 32   |
                            16882 ; 33   |#define MAX_INT     0x7FFFFF
                            16883 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16884 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16885 ; 36   |#define MAX_ULONG   (-1) 
                            16886 ; 37   |
                            16887 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16888 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16889 ; 40   |
                            16890 ; 41   |
                            16891 ; 42   |#define BYTE    unsigned char       // btVarName
                            16892 ; 43   |#define CHAR    signed char         // cVarName
                            16893 ; 44   |#define USHORT  unsigned short      // usVarName
                            16894 ; 45   |#define SHORT   unsigned short      // sVarName
                            16895 ; 46   |#define WORD    unsigned int        // wVarName
                            16896 ; 47   |#define INT     signed int          // iVarName
                            16897 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16898 ; 49   |#define LONG    signed long         // lVarName
                            16899 ; 50   |#define BOOL    unsigned int        // bVarName
                            16900 ; 51   |#define FRACT   _fract              // frVarName
                            16901 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16902 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16903 ; 54   |#define FLOAT   float               // fVarName
                            16904 ; 55   |#define DBL     double              // dVarName
                            16905 ; 56   |#define ENUM    enum                // eVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 283

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16906 ; 57   |#define CMX     _complex            // cmxVarName
                            16907 ; 58   |typedef WORD UCS3;                   // 
                            16908 ; 59   |
                            16909 ; 60   |#define UINT16  unsigned short
                            16910 ; 61   |#define UINT8   unsigned char   
                            16911 ; 62   |#define UINT32  unsigned long
                            16912 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            16913 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            16914 ; 65   |#define WCHAR   UINT16
                            16915 ; 66   |
                            16916 ; 67   |//UINT128 is 16 bytes or 6 words
                            16917 ; 68   |typedef struct UINT128_3500 {   
                            16918 ; 69   |    int val[6];     
                            16919 ; 70   |} UINT128_3500;
                            16920 ; 71   |
                            16921 ; 72   |#define UINT128   UINT128_3500
                            16922 ; 73   |
                            16923 ; 74   |// Little endian word packed byte strings:   
                            16924 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16925 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16926 ; 77   |// Little endian word packed byte strings:   
                            16927 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16928 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16929 ; 80   |
                            16930 ; 81   |// Declare Memory Spaces To Use When Coding
                            16931 ; 82   |// A. Sector Buffers
                            16932 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16933 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16934 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16935 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16936 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16937 ; 88   |// B. Media DDI Memory
                            16938 ; 89   |#define MEDIA_DDI_MEM _Y
                            16939 ; 90   |
                            16940 ; 91   |
                            16941 ; 92   |
                            16942 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16943 ; 94   |// Examples of circular pointers:
                            16944 ; 95   |//    INT CIRC cpiVarName
                            16945 ; 96   |//    DWORD CIRC cpdwVarName
                            16946 ; 97   |
                            16947 ; 98   |#define RETCODE INT                 // rcVarName
                            16948 ; 99   |
                            16949 ; 100  |// generic bitfield structure
                            16950 ; 101  |struct Bitfield {
                            16951 ; 102  |    unsigned int B0  :1;
                            16952 ; 103  |    unsigned int B1  :1;
                            16953 ; 104  |    unsigned int B2  :1;
                            16954 ; 105  |    unsigned int B3  :1;
                            16955 ; 106  |    unsigned int B4  :1;
                            16956 ; 107  |    unsigned int B5  :1;
                            16957 ; 108  |    unsigned int B6  :1;
                            16958 ; 109  |    unsigned int B7  :1;
                            16959 ; 110  |    unsigned int B8  :1;
                            16960 ; 111  |    unsigned int B9  :1;
                            16961 ; 112  |    unsigned int B10 :1;
                            16962 ; 113  |    unsigned int B11 :1;
                            16963 ; 114  |    unsigned int B12 :1;
                            16964 ; 115  |    unsigned int B13 :1;
                            16965 ; 116  |    unsigned int B14 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 284

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16966 ; 117  |    unsigned int B15 :1;
                            16967 ; 118  |    unsigned int B16 :1;
                            16968 ; 119  |    unsigned int B17 :1;
                            16969 ; 120  |    unsigned int B18 :1;
                            16970 ; 121  |    unsigned int B19 :1;
                            16971 ; 122  |    unsigned int B20 :1;
                            16972 ; 123  |    unsigned int B21 :1;
                            16973 ; 124  |    unsigned int B22 :1;
                            16974 ; 125  |    unsigned int B23 :1;
                            16975 ; 126  |};
                            16976 ; 127  |
                            16977 ; 128  |union BitInt {
                            16978 ; 129  |        struct Bitfield B;
                            16979 ; 130  |        int        I;
                            16980 ; 131  |};
                            16981 ; 132  |
                            16982 ; 133  |#define MAX_MSG_LENGTH 10
                            16983 ; 134  |struct CMessage
                            16984 ; 135  |{
                            16985 ; 136  |        unsigned int m_uLength;
                            16986 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16987 ; 138  |};
                            16988 ; 139  |
                            16989 ; 140  |typedef struct {
                            16990 ; 141  |    WORD m_wLength;
                            16991 ; 142  |    WORD m_wMessage;
                            16992 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16993 ; 144  |} Message;
                            16994 ; 145  |
                            16995 ; 146  |struct MessageQueueDescriptor
                            16996 ; 147  |{
                            16997 ; 148  |        int *m_pBase;
                            16998 ; 149  |        int m_iModulo;
                            16999 ; 150  |        int m_iSize;
                            17000 ; 151  |        int *m_pHead;
                            17001 ; 152  |        int *m_pTail;
                            17002 ; 153  |};
                            17003 ; 154  |
                            17004 ; 155  |struct ModuleEntry
                            17005 ; 156  |{
                            17006 ; 157  |    int m_iSignaledEventMask;
                            17007 ; 158  |    int m_iWaitEventMask;
                            17008 ; 159  |    int m_iResourceOfCode;
                            17009 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17010 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            17011 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17012 ; 163  |    int m_uTimeOutHigh;
                            17013 ; 164  |    int m_uTimeOutLow;
                            17014 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17015 ; 166  |};
                            17016 ; 167  |
                            17017 ; 168  |union WaitMask{
                            17018 ; 169  |    struct B{
                            17019 ; 170  |        unsigned int m_bNone     :1;
                            17020 ; 171  |        unsigned int m_bMessage  :1;
                            17021 ; 172  |        unsigned int m_bTimer    :1;
                            17022 ; 173  |        unsigned int m_bButton   :1;
                            17023 ; 174  |    } B;
                            17024 ; 175  |    int I;
                            17025 ; 176  |} ;
                            17026 ; 177  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 285

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17027 ; 178  |
                            17028 ; 179  |struct Button {
                            17029 ; 180  |        WORD wButtonEvent;
                            17030 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17031 ; 182  |};
                            17032 ; 183  |
                            17033 ; 184  |struct Message {
                            17034 ; 185  |        WORD wMsgLength;
                            17035 ; 186  |        WORD wMsgCommand;
                            17036 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17037 ; 188  |};
                            17038 ; 189  |
                            17039 ; 190  |union EventTypes {
                            17040 ; 191  |        struct CMessage msg;
                            17041 ; 192  |        struct Button Button ;
                            17042 ; 193  |        struct Message Message;
                            17043 ; 194  |};
                            17044 ; 195  |
                            17045 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17046 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17047 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17048 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17049 ; 200  |
                            17050 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17051 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17052 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17053 ; 204  |
                            17054 ; 205  |#if DEBUG
                            17055 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17056 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17057 ; 208  |#else 
                            17058 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            17059 ; 210  |#define DebugBuildAssert(x)    
                            17060 ; 211  |#endif
                            17061 ; 212  |
                            17062 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17063 ; 214  |//  #pragma asm
                            17064 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17065 ; 216  |//  #pragma endasm
                            17066 ; 217  |
                            17067 ; 218  |
                            17068 ; 219  |#ifdef COLOR_262K
                            17069 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            17070 ; 221  |#elif defined(COLOR_65K)
                            17071 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            17072 ; 223  |#else
                            17073 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            17074 ; 225  |#endif
                            17075 ; 226  |    
                            17076 ; 227  |#endif // #ifndef _TYPES_H
                            17077 
                            17079 
                            17080 ; 29   |
                            17081 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17082 ; 31   |
                            17083 ; 32   |//   Trace Buffer STMP Registers 
                            17084 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            17085 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 286

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17086 ; 35   |
                            17087 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            17088 ; 37   |
                            17089 ; 38   |
                            17090 ; 39   |
                            17091 ; 40   |
                            17092 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            17093 ; 42   |
                            17094 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            17095 ; 44   |
                            17096 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            17097 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            17098 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            17099 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            17100 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            17101 ; 50   |
                            17102 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            17103 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            17104 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            17105 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            17106 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            17107 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            17108 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            17109 ; 58   |
                            17110 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_E
                                  NABLE_BITPOS) 
                            17111 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS
                                  ) 
                            17112 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            17113 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_
                                  BITPOS) 
                            17114 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_
                                  EVENT_BITPOS) 
                            17115 ; 64   |
                            17116 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            17117 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            17118 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            17119 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            17120 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            17121 ; 70   |
                            17122 ; 71   |typedef union               
                            17123 ; 72   |{
                            17124 ; 73   |    struct {
                            17125 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            17126 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            17127 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            17128 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            17129 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            17130 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            17131 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            17132 ; 81   |    } B;
                            17133 ; 82   |    int I;
                            17134 ; 83   |    unsigned int U;
                            17135 ; 84   |} tb_cfg_type;
                            17136 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer
                                   Configuration Register */
                            17137 ; 86   |
                            17138 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            17139 ; 88   |
                            17140 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            17141 ; 90   |
                            17142 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 287

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17143 ; 92   |
                            17144 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            17145 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            17146 ; 95   |
                            17147 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BIT
                                  POS) 
                            17148 ; 97   |
                            17149 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            17150 ; 99   |
                            17151 ; 100  |typedef union               
                            17152 ; 101  |{
                            17153 ; 102  |    struct {
                            17154 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            17155 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            17156 ; 105  |    } B;
                            17157 ; 106  |    int I;
                            17158 ; 107  |    unsigned int U;
                            17159 ; 108  |} tb_bar_type;
                            17160 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer
                                   Base Address Register */
                            17161 ; 110  |
                            17162 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            17163 ; 112  |
                            17164 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            17165 ; 114  |
                            17166 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            17167 ; 116  |
                            17168 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            17169 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            17170 ; 119  |
                            17171 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BIT
                                  POS) 
                            17172 ; 121  |
                            17173 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            17174 ; 123  |
                            17175 ; 124  |typedef union               
                            17176 ; 125  |{
                            17177 ; 126  |    struct {
                            17178 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            17179 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            17180 ; 129  |    } B;
                            17181 ; 130  |    int I;
                            17182 ; 131  |    unsigned int U;
                            17183 ; 132  |} tb_mod_type;
                            17184 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer
                                   Modulus Register */
                            17185 ; 134  |
                            17186 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            17187 ; 136  |
                            17188 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            17189 ; 138  |
                            17190 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            17191 ; 140  |
                            17192 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            17193 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            17194 ; 143  |
                            17195 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            17196 ; 145  |
                            17197 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            17198 ; 147  |
                            17199 ; 148  |typedef union               
                            17200 ; 149  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 288

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17201 ; 150  |    struct {
                            17202 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            17203 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            17204 ; 153  |    } B;
                            17205 ; 154  |    int I;
                            17206 ; 155  |    unsigned int U;
                            17207 ; 156  |} tb_cir_type;
                            17208 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer
                                   Current Index Register */
                            17209 ; 158  |
                            17210 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            17211 ; 160  |
                            17212 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            17213 ; 162  |
                            17214 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            17215 ; 164  |
                            17216 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            17217 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            17218 ; 167  |
                            17219 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            17220 ; 169  |
                            17221 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            17222 ; 171  |
                            17223 ; 172  |typedef union               
                            17224 ; 173  |{
                            17225 ; 174  |    struct {
                            17226 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            17227 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            17228 ; 177  |    } B;
                            17229 ; 178  |    int I;
                            17230 ; 179  |    unsigned int U;
                            17231 ; 180  |} tb_obc_type;
                            17232 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer
                                   one byte code Register */
                            17233 ; 182  |
                            17234 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            17235 ; 184  |
                            17236 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            17237 ; 186  |
                            17238 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            17239 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            17240 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            17241 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            17242 ; 191  |
                            17243 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            17244 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            17245 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            17246 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            17247 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            17248 ; 197  |
                            17249 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STY
                                  LE_BITPOS) 
                            17250 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLA
                                  SS_BITPOS) 
                            17251 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLA
                                  SS_BITPOS) 
                            17252 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS
                                  ) 
                            17253 ; 202  |
                            17254 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            17255 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            17256 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 289

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17257 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            17258 ; 207  |
                            17259 ; 208  |typedef union               
                            17260 ; 209  |{
                            17261 ; 210  |    struct {
                            17262 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            17263 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            17264 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            17265 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            17266 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            17267 ; 216  |    } B;
                            17268 ; 217  |    int I;
                            17269 ; 218  |    unsigned int U;
                            17270 ; 219  |} tb_tcs_type;
                            17271 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffe
                                  r Trigger Command Register */
                            17272 ; 221  |
                            17273 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            17274 ; 223  |
                            17275 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            17276 ; 225  |
                            17277 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            17278 ; 227  |
                            17279 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            17280 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            17281 ; 230  |
                            17282 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH
                                  _ADDR_BITPOS) 
                            17283 ; 232  |
                            17284 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            17285 ; 234  |
                            17286 ; 235  |typedef union               
                            17287 ; 236  |{
                            17288 ; 237  |    struct {
                            17289 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            17290 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            17291 ; 240  |    } B;
                            17292 ; 241  |    int I;
                            17293 ; 242  |    unsigned int U;
                            17294 ; 243  |} tb_tvr_type;
                            17295 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffe
                                  r Trigger Value Register */
                            17296 ; 245  |
                            17297 ; 246  |
                            17298 ; 247  |
                            17299 ; 248  |#endif
                            17300 ; 249  |
                            17301 ; 250  |
                            17302 ; 251  |
                            17303 ; 252  |
                            17304 ; 253  |
                            17305 ; 254  |
                            17306 ; 255  |
                            17307 ; 256  |
                            17308 ; 257  |
                            17309 ; 258  |
                            17310 ; 259  |
                            17311 ; 260  |
                            17312 ; 261  |
                            17313 ; 262  |
                            17314 ; 263  |
                            17315 ; 264  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 290

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17316 ; 265  |
                            17317 
                            17319 
                            17320 ; 35   |#include "regstimer.h"
                            17321 
                            17323 
                            17324 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            17325 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            17326 ; 3    |// Filename: regstimer.inc
                            17327 ; 4    |// Description: Register definitions for  Timers interface
                            17328 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            17329 ; 6    |// The following naming conventions are followed in this file.
                            17330 ; 7    |// All registers are named using the format...
                            17331 ; 8    |//     HW_<module>_<regname>
                            17332 ; 9    |// where <module> is the module name which can be any of the following...
                            17333 ; 10   |//     USB20
                            17334 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            17335 ; 12   |// module name includes a number starting from 0 for the first instance of
                            17336 ; 13   |// that module)
                            17337 ; 14   |// <regname> is the specific register within that module
                            17338 ; 15   |// We also define the following...
                            17339 ; 16   |//     HW_<module>_<regname>_BITPOS
                            17340 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            17341 ; 18   |//     HW_<module>_<regname>_SETMASK
                            17342 ; 19   |// which does something else, and
                            17343 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            17344 ; 21   |// which does something else.
                            17345 ; 22   |// Other rules
                            17346 ; 23   |//     All caps
                            17347 ; 24   |//     Numeric identifiers start at 0
                            17348 ; 25   |#if !(defined(regstimerinc))
                            17349 ; 26   |#define regstimerinc 1
                            17350 ; 27   |
                            17351 ; 28   |#include "types.h"
                            17352 
                            17354 
                            17355 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17356 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17357 ; 3    |//
                            17358 ; 4    |// Filename: types.h
                            17359 ; 5    |// Description: Standard data types
                            17360 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17361 ; 7    |
                            17362 ; 8    |#ifndef _TYPES_H
                            17363 ; 9    |#define _TYPES_H
                            17364 ; 10   |
                            17365 ; 11   |// TODO:  move this outta here!
                            17366 ; 12   |#if !defined(NOERROR)
                            17367 ; 13   |#define NOERROR 0
                            17368 ; 14   |#define SUCCESS 0
                            17369 ; 15   |#endif 
                            17370 ; 16   |#if !defined(SUCCESS)
                            17371 ; 17   |#define SUCCESS  0
                            17372 ; 18   |#endif
                            17373 ; 19   |#if !defined(ERROR)
                            17374 ; 20   |#define ERROR   -1
                            17375 ; 21   |#endif
                            17376 ; 22   |#if !defined(FALSE)
                            17377 ; 23   |#define FALSE 0
                            17378 ; 24   |#endif
                            17379 ; 25   |#if !defined(TRUE)
                            17380 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 291

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17381 ; 27   |#endif
                            17382 ; 28   |
                            17383 ; 29   |#if !defined(NULL)
                            17384 ; 30   |#define NULL 0
                            17385 ; 31   |#endif
                            17386 ; 32   |
                            17387 ; 33   |#define MAX_INT     0x7FFFFF
                            17388 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17389 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17390 ; 36   |#define MAX_ULONG   (-1) 
                            17391 ; 37   |
                            17392 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17393 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17394 ; 40   |
                            17395 ; 41   |
                            17396 ; 42   |#define BYTE    unsigned char       // btVarName
                            17397 ; 43   |#define CHAR    signed char         // cVarName
                            17398 ; 44   |#define USHORT  unsigned short      // usVarName
                            17399 ; 45   |#define SHORT   unsigned short      // sVarName
                            17400 ; 46   |#define WORD    unsigned int        // wVarName
                            17401 ; 47   |#define INT     signed int          // iVarName
                            17402 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17403 ; 49   |#define LONG    signed long         // lVarName
                            17404 ; 50   |#define BOOL    unsigned int        // bVarName
                            17405 ; 51   |#define FRACT   _fract              // frVarName
                            17406 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17407 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17408 ; 54   |#define FLOAT   float               // fVarName
                            17409 ; 55   |#define DBL     double              // dVarName
                            17410 ; 56   |#define ENUM    enum                // eVarName
                            17411 ; 57   |#define CMX     _complex            // cmxVarName
                            17412 ; 58   |typedef WORD UCS3;                   // 
                            17413 ; 59   |
                            17414 ; 60   |#define UINT16  unsigned short
                            17415 ; 61   |#define UINT8   unsigned char   
                            17416 ; 62   |#define UINT32  unsigned long
                            17417 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17418 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17419 ; 65   |#define WCHAR   UINT16
                            17420 ; 66   |
                            17421 ; 67   |//UINT128 is 16 bytes or 6 words
                            17422 ; 68   |typedef struct UINT128_3500 {   
                            17423 ; 69   |    int val[6];     
                            17424 ; 70   |} UINT128_3500;
                            17425 ; 71   |
                            17426 ; 72   |#define UINT128   UINT128_3500
                            17427 ; 73   |
                            17428 ; 74   |// Little endian word packed byte strings:   
                            17429 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17430 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17431 ; 77   |// Little endian word packed byte strings:   
                            17432 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17433 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17434 ; 80   |
                            17435 ; 81   |// Declare Memory Spaces To Use When Coding
                            17436 ; 82   |// A. Sector Buffers
                            17437 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17438 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17439 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17440 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 292

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17441 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17442 ; 88   |// B. Media DDI Memory
                            17443 ; 89   |#define MEDIA_DDI_MEM _Y
                            17444 ; 90   |
                            17445 ; 91   |
                            17446 ; 92   |
                            17447 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17448 ; 94   |// Examples of circular pointers:
                            17449 ; 95   |//    INT CIRC cpiVarName
                            17450 ; 96   |//    DWORD CIRC cpdwVarName
                            17451 ; 97   |
                            17452 ; 98   |#define RETCODE INT                 // rcVarName
                            17453 ; 99   |
                            17454 ; 100  |// generic bitfield structure
                            17455 ; 101  |struct Bitfield {
                            17456 ; 102  |    unsigned int B0  :1;
                            17457 ; 103  |    unsigned int B1  :1;
                            17458 ; 104  |    unsigned int B2  :1;
                            17459 ; 105  |    unsigned int B3  :1;
                            17460 ; 106  |    unsigned int B4  :1;
                            17461 ; 107  |    unsigned int B5  :1;
                            17462 ; 108  |    unsigned int B6  :1;
                            17463 ; 109  |    unsigned int B7  :1;
                            17464 ; 110  |    unsigned int B8  :1;
                            17465 ; 111  |    unsigned int B9  :1;
                            17466 ; 112  |    unsigned int B10 :1;
                            17467 ; 113  |    unsigned int B11 :1;
                            17468 ; 114  |    unsigned int B12 :1;
                            17469 ; 115  |    unsigned int B13 :1;
                            17470 ; 116  |    unsigned int B14 :1;
                            17471 ; 117  |    unsigned int B15 :1;
                            17472 ; 118  |    unsigned int B16 :1;
                            17473 ; 119  |    unsigned int B17 :1;
                            17474 ; 120  |    unsigned int B18 :1;
                            17475 ; 121  |    unsigned int B19 :1;
                            17476 ; 122  |    unsigned int B20 :1;
                            17477 ; 123  |    unsigned int B21 :1;
                            17478 ; 124  |    unsigned int B22 :1;
                            17479 ; 125  |    unsigned int B23 :1;
                            17480 ; 126  |};
                            17481 ; 127  |
                            17482 ; 128  |union BitInt {
                            17483 ; 129  |        struct Bitfield B;
                            17484 ; 130  |        int        I;
                            17485 ; 131  |};
                            17486 ; 132  |
                            17487 ; 133  |#define MAX_MSG_LENGTH 10
                            17488 ; 134  |struct CMessage
                            17489 ; 135  |{
                            17490 ; 136  |        unsigned int m_uLength;
                            17491 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17492 ; 138  |};
                            17493 ; 139  |
                            17494 ; 140  |typedef struct {
                            17495 ; 141  |    WORD m_wLength;
                            17496 ; 142  |    WORD m_wMessage;
                            17497 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            17498 ; 144  |} Message;
                            17499 ; 145  |
                            17500 ; 146  |struct MessageQueueDescriptor
                            17501 ; 147  |{
                            17502 ; 148  |        int *m_pBase;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 293

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17503 ; 149  |        int m_iModulo;
                            17504 ; 150  |        int m_iSize;
                            17505 ; 151  |        int *m_pHead;
                            17506 ; 152  |        int *m_pTail;
                            17507 ; 153  |};
                            17508 ; 154  |
                            17509 ; 155  |struct ModuleEntry
                            17510 ; 156  |{
                            17511 ; 157  |    int m_iSignaledEventMask;
                            17512 ; 158  |    int m_iWaitEventMask;
                            17513 ; 159  |    int m_iResourceOfCode;
                            17514 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17515 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            17516 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17517 ; 163  |    int m_uTimeOutHigh;
                            17518 ; 164  |    int m_uTimeOutLow;
                            17519 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17520 ; 166  |};
                            17521 ; 167  |
                            17522 ; 168  |union WaitMask{
                            17523 ; 169  |    struct B{
                            17524 ; 170  |        unsigned int m_bNone     :1;
                            17525 ; 171  |        unsigned int m_bMessage  :1;
                            17526 ; 172  |        unsigned int m_bTimer    :1;
                            17527 ; 173  |        unsigned int m_bButton   :1;
                            17528 ; 174  |    } B;
                            17529 ; 175  |    int I;
                            17530 ; 176  |} ;
                            17531 ; 177  |
                            17532 ; 178  |
                            17533 ; 179  |struct Button {
                            17534 ; 180  |        WORD wButtonEvent;
                            17535 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17536 ; 182  |};
                            17537 ; 183  |
                            17538 ; 184  |struct Message {
                            17539 ; 185  |        WORD wMsgLength;
                            17540 ; 186  |        WORD wMsgCommand;
                            17541 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17542 ; 188  |};
                            17543 ; 189  |
                            17544 ; 190  |union EventTypes {
                            17545 ; 191  |        struct CMessage msg;
                            17546 ; 192  |        struct Button Button ;
                            17547 ; 193  |        struct Message Message;
                            17548 ; 194  |};
                            17549 ; 195  |
                            17550 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17551 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17552 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17553 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17554 ; 200  |
                            17555 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17556 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17557 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17558 ; 204  |
                            17559 ; 205  |#if DEBUG
                            17560 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17561 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17562 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 294

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17563 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            17564 ; 210  |#define DebugBuildAssert(x)    
                            17565 ; 211  |#endif
                            17566 ; 212  |
                            17567 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17568 ; 214  |//  #pragma asm
                            17569 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17570 ; 216  |//  #pragma endasm
                            17571 ; 217  |
                            17572 ; 218  |
                            17573 ; 219  |#ifdef COLOR_262K
                            17574 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            17575 ; 221  |#elif defined(COLOR_65K)
                            17576 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            17577 ; 223  |#else
                            17578 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            17579 ; 225  |#endif
                            17580 ; 226  |    
                            17581 ; 227  |#endif // #ifndef _TYPES_H
                            17582 
                            17584 
                            17585 ; 29   |
                            17586 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17587 ; 31   |//   TIMER STMP Registers 
                            17588 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17589 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            17590 ; 34   |
                            17591 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            17592 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            17593 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            17594 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            17595 ; 39   |
                            17596 ; 40   |#define HW_TIMER_NUMBER_0 0
                            17597 ; 41   |#define HW_TIMER_NUMBER_1 1
                            17598 ; 42   |#define HW_TIMER_NUMBER_2 2
                            17599 ; 43   |#define HW_TIMER_NUMBER_3 3
                            17600 ; 44   |
                            17601 ; 45   |#define HW_TMRCSR 0
                            17602 ; 46   |#define HW_TMRCNTR 1
                            17603 ; 47   |
                            17604 ; 48   |
                            17605 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            17606 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            17607 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            17608 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            17609 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            17610 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            17611 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            17612 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            17613 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            17614 ; 58   |
                            17615 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            17616 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            17617 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            17618 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            17619 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            17620 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            17621 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 295

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17622 ; 66   |
                            17623 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_ENABLE_BITPOS)
                            17624 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_INT_EN_BITPOS)
                            17625 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BIT
                                  POS)
                            17626 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0
                                  CSR_TIMER_CONTROL_BITPOS)
                            17627 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_STATUS_BITPOS)
                            17628 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TI
                                  MER_MODE_BITPOS)
                            17629 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS
                                  )
                            17630 ; 74   |
                            17631 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            17632 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            17633 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            17634 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            17635 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            17636 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            17637 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            17638 ; 82   |
                            17639 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            17640 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            17641 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            17642 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            17643 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            17644 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            17645 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            17646 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            17647 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            17648 ; 92   |
                            17649 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            17650 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            17651 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            17652 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            17653 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            17654 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            17655 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            17656 ; 100  |
                            17657 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_ENABLE_BITPOS)
                            17658 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_INT_EN_BITPOS)
                            17659 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BIT
                                  POS)
                            17660 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1
                                  CSR_TIMER_CONTROL_BITPOS)
                            17661 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_STATUS_BITPOS)
                            17662 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TI
                                  MER_MODE_BITPOS)
                            17663 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS
                                  )
                            17664 ; 108  |
                            17665 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            17666 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            17667 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            17668 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            17669 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 296

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17670 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            17671 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            17672 ; 116  |
                            17673 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            17674 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            17675 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            17676 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            17677 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            17678 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            17679 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            17680 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            17681 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            17682 ; 126  |
                            17683 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            17684 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            17685 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            17686 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            17687 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            17688 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            17689 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            17690 ; 134  |
                            17691 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_ENABLE_BITPOS)
                            17692 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_INT_EN_BITPOS)
                            17693 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BIT
                                  POS)
                            17694 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2
                                  CSR_TIMER_CONTROL_BITPOS)
                            17695 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_STATUS_BITPOS)
                            17696 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TI
                                  MER_MODE_BITPOS)
                            17697 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS
                                  )
                            17698 ; 142  |
                            17699 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            17700 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            17701 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            17702 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            17703 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            17704 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            17705 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            17706 ; 150  |
                            17707 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            17708 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            17709 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            17710 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            17711 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            17712 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            17713 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            17714 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            17715 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            17716 ; 160  |
                            17717 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            17718 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            17719 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            17720 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            17721 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            17722 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            17723 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            17724 ; 168  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 297

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17725 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_ENABLE_BITPOS)
                            17726 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_INT_EN_BITPOS)
                            17727 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BIT
                                  POS)
                            17728 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3
                                  CSR_TIMER_CONTROL_BITPOS)
                            17729 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_STATUS_BITPOS)
                            17730 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TI
                                  MER_MODE_BITPOS)
                            17731 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS
                                  )
                            17732 ; 176  |
                            17733 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            17734 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            17735 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            17736 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            17737 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            17738 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            17739 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            17740 ; 184  |
                            17741 ; 185  |typedef union               
                            17742 ; 186  |{
                            17743 ; 187  |    struct {
                            17744 ; 188  |       int TIMER_ENABLE              :1;
                            17745 ; 189  |       int TIMER_INT_EN              :1;
                            17746 ; 190  |       int INVERT                    :1;
                            17747 ; 191  |       int TIMER_CONTROL             :3;
                            17748 ; 192  |       int RSVD0                     :1;
                            17749 ; 193  |       int TIMER_STATUS              :1;
                            17750 ; 194  |       int TIMER_MODE                :2;
                            17751 ; 195  |       int RSVD1                     :13;
                            17752 ; 196  |       int CLKGT                     :1;
                            17753 ; 197  |    } B;
                            17754 ; 198  |    int I;
                            17755 ; 199  |} timercsr_type;
                            17756 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /*
                                   Timer0 Control Status Register */
                            17757 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /*
                                   Timer1 Control Status Register */
                            17758 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /*
                                   Timer2 Control Status Register */
                            17759 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /*
                                   Timer3 Control Status Register */
                            17760 ; 204  |
                            17761 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            17762 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            17763 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            17764 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            17765 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BIT
                                  POS)
                            17766 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            17767 ; 211  |
                            17768 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            17769 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            17770 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            17771 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            17772 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BIT
                                  POS)
                            17773 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 298

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17774 ; 218  |
                            17775 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            17776 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            17777 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            17778 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            17779 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BIT
                                  POS)
                            17780 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            17781 ; 225  |
                            17782 ; 226  |typedef union               
                            17783 ; 227  |{
                            17784 ; 228  |    struct {
                            17785 ; 229  |       int COUNT                    :24;
                            17786 ; 230  |    } B;
                            17787 ; 231  |    int I;
                            17788 ; 232  |} tmrcntr_type;
                            17789 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /
                                  * Timer0 Count Register */
                            17790 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /
                                  * Timer1 Count Register */
                            17791 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /
                                  * Timer2 Count Register */
                            17792 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /
                                  * Timer3 Count Register */
                            17793 ; 237  |
                            17794 ; 238  |
                            17795 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            17796 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            17797 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            17798 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            17799 ; 243  |
                            17800 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            17801 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            17802 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            17803 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            17804 ; 248  |
                            17805 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            17806 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            17807 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            17808 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            17809 ; 253  |
                            17810 ; 254  |// Timer enable
                            17811 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            17812 ; 256  |// Timer clock gating control
                            17813 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            17814 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            17815 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            17816 ; 260  |#endif
                            17817 ; 261  |
                            17818 ; 262  |
                            17819 ; 263  |
                            17820 ; 264  |
                            17821 
                            17823 
                            17824 ; 36   |#include "regsusb20.h"
                            17825 
                            17827 
                            17828 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17829 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            17830 ; 3    |//;  File        : regsusb20ip.inc
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 299

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17831 ; 4    |//;  Description : USB20 IP Register definition
                            17832 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            17833 ; 6    |
                            17834 ; 7    |// The following naming conventions are followed in this file.
                            17835 ; 8    |// All registers are named using the format...
                            17836 ; 9    |//     HW_<module>_<regname>
                            17837 ; 10   |// where <module> is the module name which can be any of the following...
                            17838 ; 11   |//     USB20
                            17839 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            17840 ; 13   |// module name includes a number starting from 0 for the first instance of
                            17841 ; 14   |// that module)
                            17842 ; 15   |// <regname> is the specific register within that module
                            17843 ; 16   |// We also define the following...
                            17844 ; 17   |//     HW_<module>_<regname>_BITPOS
                            17845 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            17846 ; 19   |//     HW_<module>_<regname>_SETMASK
                            17847 ; 20   |// which does something else, and
                            17848 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            17849 ; 22   |// which does something else.
                            17850 ; 23   |// Other rules
                            17851 ; 24   |//     All caps
                            17852 ; 25   |//     Numeric identifiers start at 0
                            17853 ; 26   |
                            17854 ; 27   |#if !(defined(regsusb20inc))
                            17855 ; 28   |#define regsusb20inc 1
                            17856 ; 29   |
                            17857 ; 30   |#include "types.h"
                            17858 
                            17860 
                            17861 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17862 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17863 ; 3    |//
                            17864 ; 4    |// Filename: types.h
                            17865 ; 5    |// Description: Standard data types
                            17866 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17867 ; 7    |
                            17868 ; 8    |#ifndef _TYPES_H
                            17869 ; 9    |#define _TYPES_H
                            17870 ; 10   |
                            17871 ; 11   |// TODO:  move this outta here!
                            17872 ; 12   |#if !defined(NOERROR)
                            17873 ; 13   |#define NOERROR 0
                            17874 ; 14   |#define SUCCESS 0
                            17875 ; 15   |#endif 
                            17876 ; 16   |#if !defined(SUCCESS)
                            17877 ; 17   |#define SUCCESS  0
                            17878 ; 18   |#endif
                            17879 ; 19   |#if !defined(ERROR)
                            17880 ; 20   |#define ERROR   -1
                            17881 ; 21   |#endif
                            17882 ; 22   |#if !defined(FALSE)
                            17883 ; 23   |#define FALSE 0
                            17884 ; 24   |#endif
                            17885 ; 25   |#if !defined(TRUE)
                            17886 ; 26   |#define TRUE  1
                            17887 ; 27   |#endif
                            17888 ; 28   |
                            17889 ; 29   |#if !defined(NULL)
                            17890 ; 30   |#define NULL 0
                            17891 ; 31   |#endif
                            17892 ; 32   |
                            17893 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 300

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17894 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17895 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17896 ; 36   |#define MAX_ULONG   (-1) 
                            17897 ; 37   |
                            17898 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17899 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17900 ; 40   |
                            17901 ; 41   |
                            17902 ; 42   |#define BYTE    unsigned char       // btVarName
                            17903 ; 43   |#define CHAR    signed char         // cVarName
                            17904 ; 44   |#define USHORT  unsigned short      // usVarName
                            17905 ; 45   |#define SHORT   unsigned short      // sVarName
                            17906 ; 46   |#define WORD    unsigned int        // wVarName
                            17907 ; 47   |#define INT     signed int          // iVarName
                            17908 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17909 ; 49   |#define LONG    signed long         // lVarName
                            17910 ; 50   |#define BOOL    unsigned int        // bVarName
                            17911 ; 51   |#define FRACT   _fract              // frVarName
                            17912 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17913 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17914 ; 54   |#define FLOAT   float               // fVarName
                            17915 ; 55   |#define DBL     double              // dVarName
                            17916 ; 56   |#define ENUM    enum                // eVarName
                            17917 ; 57   |#define CMX     _complex            // cmxVarName
                            17918 ; 58   |typedef WORD UCS3;                   // 
                            17919 ; 59   |
                            17920 ; 60   |#define UINT16  unsigned short
                            17921 ; 61   |#define UINT8   unsigned char   
                            17922 ; 62   |#define UINT32  unsigned long
                            17923 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17924 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17925 ; 65   |#define WCHAR   UINT16
                            17926 ; 66   |
                            17927 ; 67   |//UINT128 is 16 bytes or 6 words
                            17928 ; 68   |typedef struct UINT128_3500 {   
                            17929 ; 69   |    int val[6];     
                            17930 ; 70   |} UINT128_3500;
                            17931 ; 71   |
                            17932 ; 72   |#define UINT128   UINT128_3500
                            17933 ; 73   |
                            17934 ; 74   |// Little endian word packed byte strings:   
                            17935 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17936 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17937 ; 77   |// Little endian word packed byte strings:   
                            17938 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17939 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17940 ; 80   |
                            17941 ; 81   |// Declare Memory Spaces To Use When Coding
                            17942 ; 82   |// A. Sector Buffers
                            17943 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17944 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17945 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17946 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17947 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17948 ; 88   |// B. Media DDI Memory
                            17949 ; 89   |#define MEDIA_DDI_MEM _Y
                            17950 ; 90   |
                            17951 ; 91   |
                            17952 ; 92   |
                            17953 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 301

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17954 ; 94   |// Examples of circular pointers:
                            17955 ; 95   |//    INT CIRC cpiVarName
                            17956 ; 96   |//    DWORD CIRC cpdwVarName
                            17957 ; 97   |
                            17958 ; 98   |#define RETCODE INT                 // rcVarName
                            17959 ; 99   |
                            17960 ; 100  |// generic bitfield structure
                            17961 ; 101  |struct Bitfield {
                            17962 ; 102  |    unsigned int B0  :1;
                            17963 ; 103  |    unsigned int B1  :1;
                            17964 ; 104  |    unsigned int B2  :1;
                            17965 ; 105  |    unsigned int B3  :1;
                            17966 ; 106  |    unsigned int B4  :1;
                            17967 ; 107  |    unsigned int B5  :1;
                            17968 ; 108  |    unsigned int B6  :1;
                            17969 ; 109  |    unsigned int B7  :1;
                            17970 ; 110  |    unsigned int B8  :1;
                            17971 ; 111  |    unsigned int B9  :1;
                            17972 ; 112  |    unsigned int B10 :1;
                            17973 ; 113  |    unsigned int B11 :1;
                            17974 ; 114  |    unsigned int B12 :1;
                            17975 ; 115  |    unsigned int B13 :1;
                            17976 ; 116  |    unsigned int B14 :1;
                            17977 ; 117  |    unsigned int B15 :1;
                            17978 ; 118  |    unsigned int B16 :1;
                            17979 ; 119  |    unsigned int B17 :1;
                            17980 ; 120  |    unsigned int B18 :1;
                            17981 ; 121  |    unsigned int B19 :1;
                            17982 ; 122  |    unsigned int B20 :1;
                            17983 ; 123  |    unsigned int B21 :1;
                            17984 ; 124  |    unsigned int B22 :1;
                            17985 ; 125  |    unsigned int B23 :1;
                            17986 ; 126  |};
                            17987 ; 127  |
                            17988 ; 128  |union BitInt {
                            17989 ; 129  |        struct Bitfield B;
                            17990 ; 130  |        int        I;
                            17991 ; 131  |};
                            17992 ; 132  |
                            17993 ; 133  |#define MAX_MSG_LENGTH 10
                            17994 ; 134  |struct CMessage
                            17995 ; 135  |{
                            17996 ; 136  |        unsigned int m_uLength;
                            17997 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17998 ; 138  |};
                            17999 ; 139  |
                            18000 ; 140  |typedef struct {
                            18001 ; 141  |    WORD m_wLength;
                            18002 ; 142  |    WORD m_wMessage;
                            18003 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            18004 ; 144  |} Message;
                            18005 ; 145  |
                            18006 ; 146  |struct MessageQueueDescriptor
                            18007 ; 147  |{
                            18008 ; 148  |        int *m_pBase;
                            18009 ; 149  |        int m_iModulo;
                            18010 ; 150  |        int m_iSize;
                            18011 ; 151  |        int *m_pHead;
                            18012 ; 152  |        int *m_pTail;
                            18013 ; 153  |};
                            18014 ; 154  |
                            18015 ; 155  |struct ModuleEntry
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 302

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18016 ; 156  |{
                            18017 ; 157  |    int m_iSignaledEventMask;
                            18018 ; 158  |    int m_iWaitEventMask;
                            18019 ; 159  |    int m_iResourceOfCode;
                            18020 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            18021 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            18022 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            18023 ; 163  |    int m_uTimeOutHigh;
                            18024 ; 164  |    int m_uTimeOutLow;
                            18025 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            18026 ; 166  |};
                            18027 ; 167  |
                            18028 ; 168  |union WaitMask{
                            18029 ; 169  |    struct B{
                            18030 ; 170  |        unsigned int m_bNone     :1;
                            18031 ; 171  |        unsigned int m_bMessage  :1;
                            18032 ; 172  |        unsigned int m_bTimer    :1;
                            18033 ; 173  |        unsigned int m_bButton   :1;
                            18034 ; 174  |    } B;
                            18035 ; 175  |    int I;
                            18036 ; 176  |} ;
                            18037 ; 177  |
                            18038 ; 178  |
                            18039 ; 179  |struct Button {
                            18040 ; 180  |        WORD wButtonEvent;
                            18041 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            18042 ; 182  |};
                            18043 ; 183  |
                            18044 ; 184  |struct Message {
                            18045 ; 185  |        WORD wMsgLength;
                            18046 ; 186  |        WORD wMsgCommand;
                            18047 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            18048 ; 188  |};
                            18049 ; 189  |
                            18050 ; 190  |union EventTypes {
                            18051 ; 191  |        struct CMessage msg;
                            18052 ; 192  |        struct Button Button ;
                            18053 ; 193  |        struct Message Message;
                            18054 ; 194  |};
                            18055 ; 195  |
                            18056 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            18057 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            18058 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            18059 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            18060 ; 200  |
                            18061 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            18062 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            18063 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            18064 ; 204  |
                            18065 ; 205  |#if DEBUG
                            18066 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            18067 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            18068 ; 208  |#else 
                            18069 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            18070 ; 210  |#define DebugBuildAssert(x)    
                            18071 ; 211  |#endif
                            18072 ; 212  |
                            18073 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            18074 ; 214  |//  #pragma asm
                            18075 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 303

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18076 ; 216  |//  #pragma endasm
                            18077 ; 217  |
                            18078 ; 218  |
                            18079 ; 219  |#ifdef COLOR_262K
                            18080 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            18081 ; 221  |#elif defined(COLOR_65K)
                            18082 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            18083 ; 223  |#else
                            18084 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            18085 ; 225  |#endif
                            18086 ; 226  |    
                            18087 ; 227  |#endif // #ifndef _TYPES_H
                            18088 
                            18090 
                            18091 ; 31   |
                            18092 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18093 ; 33   |//   USB2.0 STMP Registers 
                            18094 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18095 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            18096 ; 36   |
                            18097 ; 37   |
                            18098 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            18099 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            18100 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            18101 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            18102 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            18103 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            18104 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            18105 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            18106 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            18107 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            18108 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            18109 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            18110 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            18111 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            18112 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            18113 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            18114 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            18115 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            18116 ; 56   |
                            18117 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            18118 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            18119 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            18120 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            18121 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            18122 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            18123 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            18124 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            18125 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            18126 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            18127 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            18128 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            18129 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            18130 ; 70   |
                            18131 ; 71   |
                            18132 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            18133 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            18134 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            18135 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 304

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18136 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            18137 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            18138 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            18139 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            18140 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            18141 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            18142 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            18143 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            18144 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            18145 ; 85   |
                            18146 ; 86   |typedef union               
                            18147 ; 87   |{
                            18148 ; 88   |    struct {
                            18149 ; 89   |        int USBEN          :1;
                            18150 ; 90   |        int WAKEUPIRQ      :1;
                            18151 ; 91   |        int WAKEUPIE       :1;
                            18152 ; 92   |        int VBUSCXIRQ      :1;
                            18153 ; 93   |        int VBUSCXIE       :1;
                            18154 ; 94   |        int VBUSDISCXIRQ   :1;
                            18155 ; 95   |        int VBUSDISCXIE    :1;
                            18156 ; 96   |        int CLKOFF         :1;
                            18157 ; 97   |        int SUSP           :1;
                            18158 ; 98   |        int SUSPF          :1;
                            18159 ; 99   |        int UTMITST        :1;
                            18160 ; 100  |        int ARCCONNECT     :1;
                            18161 ; 101  |        int PLUGGEDIN_EN   :1;
                            18162 ; 102  |        int PLUGGEDIN      :1;
                            18163 ; 103  |        int                :8;
                            18164 ; 104  |        int HOSTDISCONNECT :1;
                            18165 ; 105  |        int VBUSSENSE      :1;
                            18166 ; 106  |    } B;
                            18167 ; 107  |    int I;
                            18168 ; 108  |} usbcsr_type;
                            18169 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                            18170 ; 110  |
                            18171 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            18172 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            18173 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            18174 ; 114  |
                            18175 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            18176 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            18177 ; 117  |
                            18178 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            18179 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            18180 ; 120  |
                            18181 ; 121  |typedef union               
                            18182 ; 122  |{
                            18183 ; 123  |    struct {
                            18184 ; 124  |        int ADD            :16;
                            18185 ; 125  |        int MEM            :2;
                            18186 ; 126  |        int                :6;
                            18187 ; 127  |    } B;
                            18188 ; 128  |    int I;
                            18189 ; 129  |} usbdmaoff_type;
                            18190 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            18191 ; 131  |
                            18192 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            18193 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            18194 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            18195 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            18196 ; 136  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 305

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18197 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            18198 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            18199 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            18200 ; 140  |
                            18201 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            18202 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            18203 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            18204 ; 144  |
                            18205 ; 145  |typedef union               
                            18206 ; 146  |{
                            18207 ; 147  |    struct {
                            18208 ; 148  |        int ADD            :9;
                            18209 ; 149  |        int                :7;
                            18210 ; 150  |        int RWB            :1;
                            18211 ; 151  |        int                :14;
                            18212 ; 152  |        int KICK           :1;
                            18213 ; 153  |    } B;
                            18214 ; 154  |    int I;
                            18215 ; 155  |} usbarcaccess_type;
                            18216 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            18217 ; 157  |
                            18218 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            18219 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            18220 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            18221 ; 161  |
                            18222 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            18223 ; 163  |
                            18224 ; 164  |typedef union               
                            18225 ; 165  |{
                            18226 ; 166  |    struct {
                            18227 ; 167  |        int DATA           :16;
                            18228 ; 168  |        int                :8;
                            18229 ; 169  |    } B;
                            18230 ; 170  |    int I;
                            18231 ; 171  |} usbarcdatalow_type;
                            18232 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                            18233 ; 173  |
                            18234 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            18235 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            18236 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            18237 ; 177  |
                            18238 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            18239 ; 179  |
                            18240 ; 180  |typedef union               
                            18241 ; 181  |{
                            18242 ; 182  |    struct {
                            18243 ; 183  |        int DATA           :16;
                            18244 ; 184  |        int                :8;
                            18245 ; 185  |    } B;
                            18246 ; 186  |    int I;
                            18247 ; 187  |} usbarcdatahigh_type;
                            18248 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                            18249 ; 189  |
                            18250 ; 190  |
                            18251 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18252 ; 192  |//   USB2.0 ARC Registers 
                            18253 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18254 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            18255 ; 195  |
                            18256 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 306

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18257 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            18258 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            18259 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            18260 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            18261 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            18262 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            18263 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            18264 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            18265 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            18266 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            18267 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            18268 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            18269 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            18270 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            18271 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            18272 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            18273 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            18274 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            18275 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            18276 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            18277 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            18278 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            18279 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            18280 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            18281 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            18282 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            18283 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            18284 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            18285 ; 225  |
                            18286 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            18287 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            18288 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            18289 ; 229  |
                            18290 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            18291 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            18292 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            18293 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            18294 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            18295 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            18296 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            18297 ; 237  |
                            18298 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            18299 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            18300 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            18301 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            18302 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            18303 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            18304 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            18305 ; 245  |
                            18306 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            18307 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            18308 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            18309 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            18310 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            18311 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            18312 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            18313 ; 253  |
                            18314 ; 254  |typedef union               
                            18315 ; 255  |{
                            18316 ; 256  |    struct {
                            18317 ; 257  |        int N_PORTS         :4;
                            18318 ; 258  |        int PPC             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 307

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18319 ; 259  |        int                 :3;
                            18320 ; 260  |        int N_PCC           :4;
                            18321 ; 261  |        int N_CC            :4;
                            18322 ; 262  |        int PI              :1;
                            18323 ; 263  |        int                 :3;
                            18324 ; 264  |        int N_PTT           :4;
                            18325 ; 265  |        int N_TT            :4;
                            18326 ; 266  |        int                 :20;
                            18327 ; 267  |    } B;
                            18328 ; 268  |    DWORD I;
                            18329 ; 269  |} hcsparams_type;
                            18330 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            18331 ; 271  |
                            18332 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            18333 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            18334 ; 274  |
                            18335 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            18336 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            18337 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            18338 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            18339 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            18340 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            18341 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            18342 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            18343 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            18344 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            18345 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            18346 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            18347 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            18348 ; 288  |
                            18349 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            18350 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            18351 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            18352 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            18353 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            18354 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            18355 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            18356 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            18357 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            18358 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            18359 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            18360 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            18361 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            18362 ; 302  |
                            18363 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            18364 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            18365 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            18366 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            18367 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            18368 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            18369 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            18370 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            18371 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            18372 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            18373 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            18374 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            18375 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            18376 ; 316  |
                            18377 ; 317  |typedef union               
                            18378 ; 318  |{
                            18379 ; 319  |    struct {
                            18380 ; 320  |        int RS              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 308

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18381 ; 321  |        int RST             :1;
                            18382 ; 322  |        int FS0             :1;
                            18383 ; 323  |        int FS1             :1;
                            18384 ; 324  |        int PSE             :1;
                            18385 ; 325  |        int ASE             :1;
                            18386 ; 326  |        int IAA             :1;
                            18387 ; 327  |        int LR              :1;
                            18388 ; 328  |        int ASP0            :1;
                            18389 ; 329  |        int ASP1            :1;
                            18390 ; 330  |        int                 :1;
                            18391 ; 331  |        int ASPE            :1;
                            18392 ; 332  |        int                 :3;
                            18393 ; 333  |        int FS2             :1;
                            18394 ; 334  |        int ITC             :8;
                            18395 ; 335  |        int                 :24;
                            18396 ; 336  |    } B;
                            18397 ; 337  |    DWORD I;
                            18398 ; 338  |} usbcmd_type;
                            18399 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            18400 ; 340  |
                            18401 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            18402 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            18403 ; 343  |
                            18404 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            18405 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            18406 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            18407 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            18408 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            18409 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            18410 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            18411 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            18412 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            18413 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            18414 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            18415 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            18416 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            18417 ; 357  |
                            18418 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            18419 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            18420 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            18421 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            18422 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            18423 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            18424 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            18425 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            18426 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            18427 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            18428 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            18429 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            18430 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            18431 ; 371  |
                            18432 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            18433 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            18434 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            18435 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            18436 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            18437 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            18438 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            18439 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            18440 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            18441 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            18442 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 309

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18443 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            18444 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            18445 ; 385  |
                            18446 ; 386  |
                            18447 ; 387  |typedef union               
                            18448 ; 388  |{
                            18449 ; 389  |    struct {
                            18450 ; 390  |        int UI              :1;
                            18451 ; 391  |        int UEI             :1;
                            18452 ; 392  |        int PCI             :1;
                            18453 ; 393  |        int FRI             :1;
                            18454 ; 394  |        int SEI             :1;
                            18455 ; 395  |        int AAI             :1;
                            18456 ; 396  |        int URI             :1;
                            18457 ; 397  |        int STI             :1;
                            18458 ; 398  |        int SLI             :1;
                            18459 ; 399  |        int                 :3;
                            18460 ; 400  |        int HCH             :1;
                            18461 ; 401  |        int RCL             :1;
                            18462 ; 402  |        int PS              :1;
                            18463 ; 403  |        int AS              :1;
                            18464 ; 404  |        int                 :24;
                            18465 ; 405  |    } B;
                            18466 ; 406  |    DWORD I;
                            18467 ; 407  |} usbsts_type;
                            18468 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            18469 ; 409  |
                            18470 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            18471 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            18472 ; 412  |
                            18473 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            18474 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            18475 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            18476 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            18477 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            18478 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            18479 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            18480 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            18481 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            18482 ; 422  |
                            18483 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            18484 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            18485 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            18486 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            18487 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            18488 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            18489 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            18490 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            18491 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            18492 ; 432  |
                            18493 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            18494 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            18495 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            18496 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            18497 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            18498 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            18499 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            18500 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            18501 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            18502 ; 442  |
                            18503 ; 443  |
                            18504 ; 444  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 310

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18505 ; 445  |{
                            18506 ; 446  |    struct {
                            18507 ; 447  |        int UE              :1;
                            18508 ; 448  |        int UEE             :1;
                            18509 ; 449  |        int PCE             :1;
                            18510 ; 450  |        int FRE             :1;
                            18511 ; 451  |        int SEE             :1;
                            18512 ; 452  |        int AAE             :1;
                            18513 ; 453  |        int URE             :1;
                            18514 ; 454  |        int STE             :1;
                            18515 ; 455  |        int SLE             :1;
                            18516 ; 456  |        int                 :39;
                            18517 ; 457  |    } B;
                            18518 ; 458  |    DWORD I;
                            18519 ; 459  |} usbintr_type;
                            18520 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            18521 ; 461  |
                            18522 ; 462  |
                            18523 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            18524 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            18525 ; 465  |
                            18526 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            18527 ; 467  |
                            18528 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            18529 ; 469  |
                            18530 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            18531 ; 471  |
                            18532 ; 472  |typedef union               
                            18533 ; 473  |{
                            18534 ; 474  |    struct {
                            18535 ; 475  |        int                 :25;
                            18536 ; 476  |        int ADD             :7;
                            18537 ; 477  |        int                 :16;
                            18538 ; 478  |    } B;
                            18539 ; 479  |    DWORD I;
                            18540 ; 480  |} devaddr_type;
                            18541 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            18542 ; 482  |
                            18543 ; 483  |
                            18544 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            18545 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            18546 ; 486  |
                            18547 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            18548 ; 488  |
                            18549 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            18550 ; 490  |
                            18551 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            18552 ; 492  |
                            18553 ; 493  |typedef union               
                            18554 ; 494  |{
                            18555 ; 495  |    struct {
                            18556 ; 496  |        int                 :10;
                            18557 ; 497  |        int ADD             :22;
                            18558 ; 498  |        int                 :16;
                            18559 ; 499  |    } B;
                            18560 ; 500  |    DWORD I;
                            18561 ; 501  |} endptlistaddr_type;
                            18562 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                            18563 ; 503  |
                            18564 ; 504  |
                            18565 ; 505  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 311

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18566 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            18567 ; 507  |
                            18568 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            18569 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            18570 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            18571 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            18572 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            18573 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            18574 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            18575 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            18576 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            18577 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            18578 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            18579 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            18580 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            18581 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            18582 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            18583 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            18584 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            18585 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            18586 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            18587 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            18588 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            18589 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            18590 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            18591 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            18592 ; 532  |
                            18593 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            18594 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            18595 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            18596 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            18597 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            18598 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            18599 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            18600 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            18601 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            18602 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            18603 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            18604 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            18605 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            18606 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            18607 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            18608 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            18609 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            18610 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            18611 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            18612 ; 552  |
                            18613 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            18614 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            18615 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            18616 ; 556  |
                            18617 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            18618 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            18619 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            18620 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            18621 ; 561  |
                            18622 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            18623 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            18624 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            18625 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            18626 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            18627 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 312

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18628 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            18629 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            18630 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            18631 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            18632 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            18633 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            18634 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            18635 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            18636 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            18637 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            18638 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            18639 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            18640 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            18641 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            18642 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            18643 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            18644 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            18645 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            18646 ; 586  |
                            18647 ; 587  |typedef union               
                            18648 ; 588  |{
                            18649 ; 589  |    struct {
                            18650 ; 590  |        int CCS             :1;
                            18651 ; 591  |        int CSC             :1;
                            18652 ; 592  |        int PE              :1;
                            18653 ; 593  |        int PEC             :1;
                            18654 ; 594  |        int OCA             :1;
                            18655 ; 595  |        int OCC             :1;
                            18656 ; 596  |        int FPR             :1;
                            18657 ; 597  |        int SUSP            :1;
                            18658 ; 598  |        int PR              :1;
                            18659 ; 599  |        int HSP             :1;
                            18660 ; 600  |        int LS              :2;
                            18661 ; 601  |        int PP              :1;
                            18662 ; 602  |        int PO              :1;
                            18663 ; 603  |        int PIC             :2;
                            18664 ; 604  |        int PTC             :4;
                            18665 ; 605  |        int WKCN            :1;
                            18666 ; 606  |        int WKDS            :1;
                            18667 ; 607  |        int WKOC            :1;
                            18668 ; 608  |        int PHCD            :1;
                            18669 ; 609  |        int PFSC            :1;
                            18670 ; 610  |        int                 :1;
                            18671 ; 611  |        int PSPD            :2;
                            18672 ; 612  |        int                 :1;
                            18673 ; 613  |        int PTW             :1;
                            18674 ; 614  |        int STS             :1;
                            18675 ; 615  |        int PTS             :1;
                            18676 ; 616  |        int                 :16;
                            18677 ; 617  |    } B;
                            18678 ; 618  |    DWORD I;
                            18679 ; 619  |} portsc1_type;
                            18680 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            18681 ; 621  |
                            18682 ; 622  |
                            18683 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            18684 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            18685 ; 625  |
                            18686 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            18687 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            18688 ; 628  |
                            18689 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 313

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18690 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            18691 ; 631  |
                            18692 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            18693 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            18694 ; 634  |
                            18695 ; 635  |typedef union               
                            18696 ; 636  |{
                            18697 ; 637  |    struct {
                            18698 ; 638  |        int CM              :2;
                            18699 ; 639  |        int ES              :1;
                            18700 ; 640  |        int                 :46;
                            18701 ; 641  |    } B;
                            18702 ; 642  |    DWORD I;
                            18703 ; 643  |} usbmode_type;
                            18704 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            18705 ; 645  |
                            18706 ; 646  |
                            18707 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            18708 ; 648  |//  The following endpoint equates are common for the following registers
                            18709 ; 649  |
                            18710 ; 650  |#define ENDPOINT0_BITPOS (0)
                            18711 ; 651  |#define ENDPOINT1_BITPOS (1)
                            18712 ; 652  |#define ENDPOINT2_BITPOS (2)
                            18713 ; 653  |#define ENDPOINT3_BITPOS (3)
                            18714 ; 654  |#define ENDPOINT4_BITPOS (4)
                            18715 ; 655  |#define ENDPOINT5_BITPOS (5)
                            18716 ; 656  |#define ENDPOINT6_BITPOS (6)
                            18717 ; 657  |#define ENDPOINT7_BITPOS (7)
                            18718 ; 658  |#define ENDPOINT8_BITPOS (8)
                            18719 ; 659  |#define ENDPOINT9_BITPOS (9)
                            18720 ; 660  |#define ENDPOINT10_BITPOS (10)
                            18721 ; 661  |#define ENDPOINT11_BITPOS (11)
                            18722 ; 662  |#define ENDPOINT12_BITPOS (12)
                            18723 ; 663  |#define ENDPOINT13_BITPOS (13)
                            18724 ; 664  |#define ENDPOINT14_BITPOS (14)
                            18725 ; 665  |#define ENDPOINT15_BITPOS (15)
                            18726 ; 666  |
                            18727 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            18728 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            18729 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            18730 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            18731 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            18732 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            18733 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            18734 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            18735 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            18736 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            18737 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            18738 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            18739 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            18740 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            18741 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            18742 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            18743 ; 683  |
                            18744 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            18745 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            18746 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            18747 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            18748 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            18749 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            18750 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            18751 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 314

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18752 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            18753 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            18754 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            18755 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            18756 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            18757 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            18758 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            18759 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            18760 ; 700  |
                            18761 ; 701  |typedef union               
                            18762 ; 702  |{
                            18763 ; 703  |    struct {
                            18764 ; 704  |        int EP0              :1;
                            18765 ; 705  |        int EP1              :1;
                            18766 ; 706  |        int EP2              :1;
                            18767 ; 707  |        int EP3              :1;
                            18768 ; 708  |        int EP4              :1;
                            18769 ; 709  |        int EP5              :1;
                            18770 ; 710  |        int EP6              :1;
                            18771 ; 711  |        int EP7              :1;
                            18772 ; 712  |        int EP8              :1;
                            18773 ; 713  |        int EP9              :1;
                            18774 ; 714  |        int EP10             :1;
                            18775 ; 715  |        int EP11             :1;
                            18776 ; 716  |        int EP12             :1;
                            18777 ; 717  |        int EP13             :1;
                            18778 ; 718  |        int EP14             :1;
                            18779 ; 719  |        int EP15             :1;
                            18780 ; 720  |        int                  :32;
                            18781 ; 721  |    } B;
                            18782 ; 722  |    DWORD I;
                            18783 ; 723  |} endpsetupstat_type;
                            18784 ; 724  |
                            18785 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                            18786 ; 726  |
                            18787 ; 727  |typedef union               
                            18788 ; 728  |{
                            18789 ; 729  |    struct {
                            18790 ; 730  |        int EP0              :1;
                            18791 ; 731  |        int EP1              :1;
                            18792 ; 732  |        int EP2              :1;
                            18793 ; 733  |        int EP3              :1;
                            18794 ; 734  |        int EP4              :1;
                            18795 ; 735  |        int EP5              :1;
                            18796 ; 736  |        int EP6              :1;
                            18797 ; 737  |        int EP7              :1;
                            18798 ; 738  |        int EP8              :1;
                            18799 ; 739  |        int EP9              :1;
                            18800 ; 740  |        int EP10             :1;
                            18801 ; 741  |        int EP11             :1;
                            18802 ; 742  |        int EP12             :1;
                            18803 ; 743  |        int EP13             :1;
                            18804 ; 744  |        int EP14             :1;
                            18805 ; 745  |        int EP15             :1;
                            18806 ; 746  |        int                  :8;
                            18807 ; 747  |    } B;
                            18808 ; 748  |    WORD I;
                            18809 ; 749  |} endpt_type;
                            18810 
                            18848 
                            18849 ; 750  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 315

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18850 ; 751  |typedef union
                            18851 ; 752  |{
                            18852 ; 753  |   struct {
                            18853 ; 754  |       endpt_type  RX;
                            18854 ; 755  |       endpt_type  TX;
                            18855 ; 756  |   } W;
                            18856 ; 757  |   DWORD DW;
                            18857 ; 758  |} endptrxtx_type;
                            18858 ; 759  |
                            18859 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
                            18860 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                            18861 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                            18862 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                            18863 ; 764  |
                            18864 ; 765  |
                            18865 ; 766  |
                            18866 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            18867 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            18868 ; 769  |
                            18869 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            18870 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            18871 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            18872 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            18873 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            18874 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            18875 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            18876 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            18877 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            18878 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            18879 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            18880 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            18881 ; 782  |
                            18882 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            18883 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            18884 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            18885 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            18886 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            18887 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            18888 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            18889 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            18890 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            18891 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            18892 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            18893 ; 794  |
                            18894 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            18895 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            18896 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            18897 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            18898 ; 799  |
                            18899 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            18900 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            18901 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            18902 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            18903 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            18904 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            18905 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            18906 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            18907 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 316

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18908 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            18909 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            18910 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            18911 ; 812  |
                            18912 ; 813  |
                            18913 ; 814  |typedef union               
                            18914 ; 815  |{
                            18915 ; 816  |    struct {
                            18916 ; 817  |        int RXS             :1;
                            18917 ; 818  |        int RXD             :1;
                            18918 ; 819  |        int RXT             :2;
                            18919 ; 820  |        int                 :1;
                            18920 ; 821  |        int RXI             :1;
                            18921 ; 822  |        int RXR             :1;
                            18922 ; 823  |        int RXE             :1;
                            18923 ; 824  |        int                 :8;
                            18924 ; 825  |        int TXS             :1;
                            18925 ; 826  |        int TXD             :1;
                            18926 ; 827  |        int TXT             :2;
                            18927 ; 828  |        int                 :1;
                            18928 ; 829  |        int TXI             :1;
                            18929 ; 830  |        int TXR             :1;
                            18930 ; 831  |        int TXE             :1;
                            18931 ; 832  |        int                 :24;
                            18932 ; 833  |    } B;
                            18933 ; 834  |    DWORD I;
                            18934 ; 835  |} endptctrl_type;
                            18935 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                            18936 ; 837  |
                            18937 ; 838  |#endif
                            18938 ; 839  |
                            18939 ; 840  |
                            18940 
                            18942 
                            18943 ; 37   |#include "regsusb20phy.h"
                            18944 
                            18946 
                            18947 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18948 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            18949 ; 3    |//;  File        : regsusbphy.inc
                            18950 ; 4    |//;  Description : USB20 PHY Register definition
                            18951 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            18952 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            18953 ; 7    |
                            18954 ; 8    |// The following naming conventions are followed in this file.
                            18955 ; 9    |// All registers are named using the format...
                            18956 ; 10   |//     HW_<module>_<regname>
                            18957 ; 11   |// where <module> is the module name which can be any of the following...
                            18958 ; 12   |//     USB20
                            18959 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            18960 ; 14   |// module name includes a number starting from 0 for the first instance of
                            18961 ; 15   |// that module)
                            18962 ; 16   |// <regname> is the specific register within that module
                            18963 ; 17   |// We also define the following...
                            18964 ; 18   |//     HW_<module>_<regname>_BITPOS
                            18965 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            18966 ; 20   |//     HW_<module>_<regname>_SETMASK
                            18967 ; 21   |// which does something else, and
                            18968 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            18969 ; 23   |// which does something else.
                            18970 ; 24   |// Other rules
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 317

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18971 ; 25   |//     All caps
                            18972 ; 26   |//     Numeric identifiers start at 0
                            18973 ; 27   |
                            18974 ; 28   |#if !(defined(regsusbphyinc))
                            18975 ; 29   |#define regsusbphyinc 1
                            18976 ; 30   |
                            18977 ; 31   |#include "types.h"
                            18978 
                            18980 
                            18981 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            18982 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            18983 ; 3    |//
                            18984 ; 4    |// Filename: types.h
                            18985 ; 5    |// Description: Standard data types
                            18986 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            18987 ; 7    |
                            18988 ; 8    |#ifndef _TYPES_H
                            18989 ; 9    |#define _TYPES_H
                            18990 ; 10   |
                            18991 ; 11   |// TODO:  move this outta here!
                            18992 ; 12   |#if !defined(NOERROR)
                            18993 ; 13   |#define NOERROR 0
                            18994 ; 14   |#define SUCCESS 0
                            18995 ; 15   |#endif 
                            18996 ; 16   |#if !defined(SUCCESS)
                            18997 ; 17   |#define SUCCESS  0
                            18998 ; 18   |#endif
                            18999 ; 19   |#if !defined(ERROR)
                            19000 ; 20   |#define ERROR   -1
                            19001 ; 21   |#endif
                            19002 ; 22   |#if !defined(FALSE)
                            19003 ; 23   |#define FALSE 0
                            19004 ; 24   |#endif
                            19005 ; 25   |#if !defined(TRUE)
                            19006 ; 26   |#define TRUE  1
                            19007 ; 27   |#endif
                            19008 ; 28   |
                            19009 ; 29   |#if !defined(NULL)
                            19010 ; 30   |#define NULL 0
                            19011 ; 31   |#endif
                            19012 ; 32   |
                            19013 ; 33   |#define MAX_INT     0x7FFFFF
                            19014 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            19015 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            19016 ; 36   |#define MAX_ULONG   (-1) 
                            19017 ; 37   |
                            19018 ; 38   |#define WORD_SIZE   24              // word size in bits
                            19019 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            19020 ; 40   |
                            19021 ; 41   |
                            19022 ; 42   |#define BYTE    unsigned char       // btVarName
                            19023 ; 43   |#define CHAR    signed char         // cVarName
                            19024 ; 44   |#define USHORT  unsigned short      // usVarName
                            19025 ; 45   |#define SHORT   unsigned short      // sVarName
                            19026 ; 46   |#define WORD    unsigned int        // wVarName
                            19027 ; 47   |#define INT     signed int          // iVarName
                            19028 ; 48   |#define DWORD   unsigned long       // dwVarName
                            19029 ; 49   |#define LONG    signed long         // lVarName
                            19030 ; 50   |#define BOOL    unsigned int        // bVarName
                            19031 ; 51   |#define FRACT   _fract              // frVarName
                            19032 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            19033 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 318

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19034 ; 54   |#define FLOAT   float               // fVarName
                            19035 ; 55   |#define DBL     double              // dVarName
                            19036 ; 56   |#define ENUM    enum                // eVarName
                            19037 ; 57   |#define CMX     _complex            // cmxVarName
                            19038 ; 58   |typedef WORD UCS3;                   // 
                            19039 ; 59   |
                            19040 ; 60   |#define UINT16  unsigned short
                            19041 ; 61   |#define UINT8   unsigned char   
                            19042 ; 62   |#define UINT32  unsigned long
                            19043 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            19044 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            19045 ; 65   |#define WCHAR   UINT16
                            19046 ; 66   |
                            19047 ; 67   |//UINT128 is 16 bytes or 6 words
                            19048 ; 68   |typedef struct UINT128_3500 {   
                            19049 ; 69   |    int val[6];     
                            19050 ; 70   |} UINT128_3500;
                            19051 ; 71   |
                            19052 ; 72   |#define UINT128   UINT128_3500
                            19053 ; 73   |
                            19054 ; 74   |// Little endian word packed byte strings:   
                            19055 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            19056 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            19057 ; 77   |// Little endian word packed byte strings:   
                            19058 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            19059 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            19060 ; 80   |
                            19061 ; 81   |// Declare Memory Spaces To Use When Coding
                            19062 ; 82   |// A. Sector Buffers
                            19063 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            19064 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            19065 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            19066 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            19067 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            19068 ; 88   |// B. Media DDI Memory
                            19069 ; 89   |#define MEDIA_DDI_MEM _Y
                            19070 ; 90   |
                            19071 ; 91   |
                            19072 ; 92   |
                            19073 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            19074 ; 94   |// Examples of circular pointers:
                            19075 ; 95   |//    INT CIRC cpiVarName
                            19076 ; 96   |//    DWORD CIRC cpdwVarName
                            19077 ; 97   |
                            19078 ; 98   |#define RETCODE INT                 // rcVarName
                            19079 ; 99   |
                            19080 ; 100  |// generic bitfield structure
                            19081 ; 101  |struct Bitfield {
                            19082 ; 102  |    unsigned int B0  :1;
                            19083 ; 103  |    unsigned int B1  :1;
                            19084 ; 104  |    unsigned int B2  :1;
                            19085 ; 105  |    unsigned int B3  :1;
                            19086 ; 106  |    unsigned int B4  :1;
                            19087 ; 107  |    unsigned int B5  :1;
                            19088 ; 108  |    unsigned int B6  :1;
                            19089 ; 109  |    unsigned int B7  :1;
                            19090 ; 110  |    unsigned int B8  :1;
                            19091 ; 111  |    unsigned int B9  :1;
                            19092 ; 112  |    unsigned int B10 :1;
                            19093 ; 113  |    unsigned int B11 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 319

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19094 ; 114  |    unsigned int B12 :1;
                            19095 ; 115  |    unsigned int B13 :1;
                            19096 ; 116  |    unsigned int B14 :1;
                            19097 ; 117  |    unsigned int B15 :1;
                            19098 ; 118  |    unsigned int B16 :1;
                            19099 ; 119  |    unsigned int B17 :1;
                            19100 ; 120  |    unsigned int B18 :1;
                            19101 ; 121  |    unsigned int B19 :1;
                            19102 ; 122  |    unsigned int B20 :1;
                            19103 ; 123  |    unsigned int B21 :1;
                            19104 ; 124  |    unsigned int B22 :1;
                            19105 ; 125  |    unsigned int B23 :1;
                            19106 ; 126  |};
                            19107 ; 127  |
                            19108 ; 128  |union BitInt {
                            19109 ; 129  |        struct Bitfield B;
                            19110 ; 130  |        int        I;
                            19111 ; 131  |};
                            19112 ; 132  |
                            19113 ; 133  |#define MAX_MSG_LENGTH 10
                            19114 ; 134  |struct CMessage
                            19115 ; 135  |{
                            19116 ; 136  |        unsigned int m_uLength;
                            19117 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            19118 ; 138  |};
                            19119 ; 139  |
                            19120 ; 140  |typedef struct {
                            19121 ; 141  |    WORD m_wLength;
                            19122 ; 142  |    WORD m_wMessage;
                            19123 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            19124 ; 144  |} Message;
                            19125 ; 145  |
                            19126 ; 146  |struct MessageQueueDescriptor
                            19127 ; 147  |{
                            19128 ; 148  |        int *m_pBase;
                            19129 ; 149  |        int m_iModulo;
                            19130 ; 150  |        int m_iSize;
                            19131 ; 151  |        int *m_pHead;
                            19132 ; 152  |        int *m_pTail;
                            19133 ; 153  |};
                            19134 ; 154  |
                            19135 ; 155  |struct ModuleEntry
                            19136 ; 156  |{
                            19137 ; 157  |    int m_iSignaledEventMask;
                            19138 ; 158  |    int m_iWaitEventMask;
                            19139 ; 159  |    int m_iResourceOfCode;
                            19140 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            19141 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            19142 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            19143 ; 163  |    int m_uTimeOutHigh;
                            19144 ; 164  |    int m_uTimeOutLow;
                            19145 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            19146 ; 166  |};
                            19147 ; 167  |
                            19148 ; 168  |union WaitMask{
                            19149 ; 169  |    struct B{
                            19150 ; 170  |        unsigned int m_bNone     :1;
                            19151 ; 171  |        unsigned int m_bMessage  :1;
                            19152 ; 172  |        unsigned int m_bTimer    :1;
                            19153 ; 173  |        unsigned int m_bButton   :1;
                            19154 ; 174  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 320

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19155 ; 175  |    int I;
                            19156 ; 176  |} ;
                            19157 ; 177  |
                            19158 ; 178  |
                            19159 ; 179  |struct Button {
                            19160 ; 180  |        WORD wButtonEvent;
                            19161 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            19162 ; 182  |};
                            19163 ; 183  |
                            19164 ; 184  |struct Message {
                            19165 ; 185  |        WORD wMsgLength;
                            19166 ; 186  |        WORD wMsgCommand;
                            19167 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            19168 ; 188  |};
                            19169 ; 189  |
                            19170 ; 190  |union EventTypes {
                            19171 ; 191  |        struct CMessage msg;
                            19172 ; 192  |        struct Button Button ;
                            19173 ; 193  |        struct Message Message;
                            19174 ; 194  |};
                            19175 ; 195  |
                            19176 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            19177 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            19178 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            19179 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            19180 ; 200  |
                            19181 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            19182 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            19183 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            19184 ; 204  |
                            19185 ; 205  |#if DEBUG
                            19186 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            19187 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            19188 ; 208  |#else 
                            19189 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            19190 ; 210  |#define DebugBuildAssert(x)    
                            19191 ; 211  |#endif
                            19192 ; 212  |
                            19193 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            19194 ; 214  |//  #pragma asm
                            19195 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            19196 ; 216  |//  #pragma endasm
                            19197 ; 217  |
                            19198 ; 218  |
                            19199 ; 219  |#ifdef COLOR_262K
                            19200 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            19201 ; 221  |#elif defined(COLOR_65K)
                            19202 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            19203 ; 223  |#else
                            19204 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            19205 ; 225  |#endif
                            19206 ; 226  |    
                            19207 ; 227  |#endif // #ifndef _TYPES_H
                            19208 
                            19210 
                            19211 ; 32   |
                            19212 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            19213 ; 34   |//   USB2.0 PHY STMP Registers 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 321

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19214 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            19215 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            19216 ; 37   |
                            19217 ; 38   |
                            19218 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            19219 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            19220 ; 41   |
                            19221 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            19222 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            19223 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            19224 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            19225 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            19226 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            19227 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            19228 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            19229 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            19230 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            19231 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            19232 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            19233 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            19234 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            19235 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            19236 ; 57   |
                            19237 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            19238 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            19239 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            19240 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            19241 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            19242 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            19243 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            19244 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            19245 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            19246 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            19247 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            19248 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            19249 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            19250 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            19251 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            19252 ; 73   |
                            19253 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            19254 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            19255 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            19256 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            19257 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            19258 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            19259 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            19260 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            19261 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            19262 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            19263 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            19264 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            19265 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            19266 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            19267 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            19268 ; 89   |
                            19269 ; 90   |typedef union               
                            19270 ; 91   |{
                            19271 ; 92   |    struct {
                            19272 ; 93   |        int RSVD0          :5;
                            19273 ; 94   |        int TXDISCON1500   :1;
                            19274 ; 95   |        int PLLVCOPWD      :1;
                            19275 ; 96   |        int PLLVCPPWD      :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 322

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19276 ; 97   |        int RSVD1          :2;
                            19277 ; 98   |        int TXPWDFS        :1;
                            19278 ; 99   |        int TXPWDIBIAS     :1;
                            19279 ; 100  |        int TXPWDV2I       :1;
                            19280 ; 101  |        int TXPWDVBG       :1;
                            19281 ; 102  |        int TXPWDCOMP      :1;
                            19282 ; 103  |        int RSVD2          :1;
                            19283 ; 104  |        int RXPWDDISCONDET :1;
                            19284 ; 105  |        int RXPWDENV       :1;
                            19285 ; 106  |        int RXPWD1PT1      :1;
                            19286 ; 107  |        int RXPWDDIFF      :1;
                            19287 ; 108  |        int RXPWDRX        :1;
                            19288 ; 109  |        int RSVD3          :1;
                            19289 ; 110  |        int PWDIBIAS       :1;
                            19290 ; 111  |        int REGRESET       :1;
                            19291 ; 112  |    } B;
                            19292 ; 113  |    int I;
                            19293 ; 114  |} usbphypwd_type;
                            19294 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                            19295 ; 116  |
                            19296 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            19297 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            19298 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            19299 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            19300 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            19301 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            19302 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            19303 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            19304 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            19305 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            19306 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            19307 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            19308 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            19309 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            19310 ; 131  |
                            19311 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            19312 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            19313 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            19314 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            19315 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            19316 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            19317 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            19318 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            19319 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            19320 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            19321 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            19322 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            19323 ; 144  |
                            19324 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                            19325 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                            19326 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                            19327 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                            19328 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                            19329 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 323

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19330 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                            19331 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
                            19332 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                            19333 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                            19334 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                            19335 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                            19336 ; 157  |
                            19337 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            19338 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            19339 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            19340 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            19341 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            19342 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            19343 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            19344 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            19345 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            19346 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            19347 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            19348 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            19349 ; 170  |
                            19350 ; 171  |typedef union               
                            19351 ; 172  |{
                            19352 ; 173  |    struct {
                            19353 ; 174  |        int TXCAL1500          :4;
                            19354 ; 175  |        int RSVD0              :1;
                            19355 ; 176  |        int TXENCAL1500        :1;
                            19356 ; 177  |        int TXHSXCVR           :1;
                            19357 ; 178  |        int TXCALIBRATE        :1;
                            19358 ; 179  |        int TXCAL45DN          :4;
                            19359 ; 180  |        int RSVD1              :1;
                            19360 ; 181  |        int TXENCAL45DN        :1;
                            19361 ; 182  |        int TXHSTERM           :1;
                            19362 ; 183  |        int TXSKEW             :1;
                            19363 ; 184  |        int TXCAL45DP          :4;
                            19364 ; 185  |        int RSVD2              :1;
                            19365 ; 186  |        int TXENCAL45DP        :1;
                            19366 ; 187  |        int TXFSHIZ            :1;
                            19367 ; 188  |        int TXCOMPOUT          :1;
                            19368 ; 189  |    } B;
                            19369 ; 190  |    int I;
                            19370 ; 191  |} usbphytx_type;
                            19371 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            19372 ; 193  |
                            19373 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            19374 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            19375 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            19376 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            19377 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            19378 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            19379 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            19380 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            19381 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            19382 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            19383 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            19384 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            19385 ; 206  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 324

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19386 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            19387 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            19388 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            19389 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            19390 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            19391 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            19392 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            19393 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            19394 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            19395 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            19396 ; 217  |
                            19397 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                            19398 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                            19399 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                            19400 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                            19401 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                            19402 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                            19403 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                            19404 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            19405 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                            19406 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            19407 ; 228  |
                            19408 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            19409 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            19410 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            19411 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            19412 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            19413 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            19414 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            19415 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            19416 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            19417 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            19418 ; 239  |
                            19419 ; 240  |typedef union               
                            19420 ; 241  |{
                            19421 ; 242  |    struct {
                            19422 ; 243  |        int PLLV2ISEL        :4;
                            19423 ; 244  |        int RSVD0            :1;
                            19424 ; 245  |        int PLLCPDBLIP       :1;
                            19425 ; 246  |        int PLLVCOCLK2       :1;
                            19426 ; 247  |        int PLLVCOCLK24      :1;
                            19427 ; 248  |        int PLLCPNSEL        :4;
                            19428 ; 249  |        int PLLCLKDIVSEL     :4;
                            19429 ; 250  |        int RSVD1            :4;
                            19430 ; 251  |        int PLLPFDRST        :1;
                            19431 ; 252  |        int PLLCPSHORTLFR    :1;
                            19432 ; 253  |        int PLLVCOKSTART     :1;
                            19433 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            19434 ; 255  |    } B;
                            19435 ; 256  |    int I;
                            19436 ; 257  |} usbphypll_type;
                            19437 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 325

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19438 ; 259  |
                            19439 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            19440 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            19441 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            19442 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            19443 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            19444 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            19445 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            19446 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            19447 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            19448 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            19449 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            19450 ; 271  |
                            19451 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            19452 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            19453 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            19454 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            19455 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            19456 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            19457 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            19458 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            19459 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            19460 ; 281  |
                            19461 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            19462 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                            19463 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                            19464 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                            19465 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                            19466 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            19467 ; 288  |//              480Mhz/7 =68.57Mhz
                            19468 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            19469 ; 290  |
                            19470 ; 291  |//              480Mhz/8 ~60Mhz
                            19471 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            19472 ; 293  |
                            19473 ; 294  |//              480Mhz/9 =53.3Mhz
                            19474 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            19475 ; 296  |
                            19476 ; 297  |//              480Mhz/10 =48Mhz
                            19477 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            19478 ; 299  |
                            19479 ; 300  |
                            19480 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                            19481 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                            19482 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                            19483 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                            19484 ; 305  |
                            19485 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            19486 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            19487 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            19488 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            19489 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            19490 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 326

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19491 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            19492 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            19493 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            19494 ; 315  |
                            19495 ; 316  |typedef union               
                            19496 ; 317  |{
                            19497 ; 318  |    struct {
                            19498 ; 319  |     int ENVADJ               :4;
                            19499 ; 320  |     int DISCONADJ            :4;
                            19500 ; 321  |     int DEBUGMODE            :4;
                            19501 ; 322  |     int PLLLKTIMECTL         :4;
                            19502 ; 323  |     int PLLCKDIVCTL          :4;
                            19503 ; 324  |     int HOSTMODETEST         :1;
                            19504 ; 325  |     int FSCKSOURCESEL        :1;
                            19505 ; 326  |     int REGRXDBYPASS         :1;
                            19506 ; 327  |     int PLLLOCKED            :1;
                            19507 ; 328  |    } B;
                            19508 ; 329  |    int I;
                            19509 ; 330  |} usbphyrx_type;
                            19510 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            19511 ; 332  |
                            19512 ; 333  |#endif
                            19513 ; 334  |
                            19514 
                            19516 
                            19517 ; 38   |
                            19518 ; 39   |
                            19519 ; 40   |#endif // if (!@def(hwequ))
                            19520 ; 41   |
                            19521 
                            19523 
                            19524 ; 21   |#include "settimemenu.h"
                            19525 
                            19527 
                            19528 ; 1    |#ifndef _SETTIME_H
                            19529 ; 2    |#define _SETTIME_H
                            19530 ; 3    |
                            19531 ; 4    |#include "types.h"
                            19532 
                            19534 
                            19535 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            19536 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            19537 ; 3    |//
                            19538 ; 4    |// Filename: types.h
                            19539 ; 5    |// Description: Standard data types
                            19540 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            19541 ; 7    |
                            19542 ; 8    |#ifndef _TYPES_H
                            19543 ; 9    |#define _TYPES_H
                            19544 ; 10   |
                            19545 ; 11   |// TODO:  move this outta here!
                            19546 ; 12   |#if !defined(NOERROR)
                            19547 ; 13   |#define NOERROR 0
                            19548 ; 14   |#define SUCCESS 0
                            19549 ; 15   |#endif 
                            19550 ; 16   |#if !defined(SUCCESS)
                            19551 ; 17   |#define SUCCESS  0
                            19552 ; 18   |#endif
                            19553 ; 19   |#if !defined(ERROR)
                            19554 ; 20   |#define ERROR   -1
                            19555 ; 21   |#endif
                            19556 ; 22   |#if !defined(FALSE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 327

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19557 ; 23   |#define FALSE 0
                            19558 ; 24   |#endif
                            19559 ; 25   |#if !defined(TRUE)
                            19560 ; 26   |#define TRUE  1
                            19561 ; 27   |#endif
                            19562 ; 28   |
                            19563 ; 29   |#if !defined(NULL)
                            19564 ; 30   |#define NULL 0
                            19565 ; 31   |#endif
                            19566 ; 32   |
                            19567 ; 33   |#define MAX_INT     0x7FFFFF
                            19568 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            19569 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            19570 ; 36   |#define MAX_ULONG   (-1) 
                            19571 ; 37   |
                            19572 ; 38   |#define WORD_SIZE   24              // word size in bits
                            19573 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            19574 ; 40   |
                            19575 ; 41   |
                            19576 ; 42   |#define BYTE    unsigned char       // btVarName
                            19577 ; 43   |#define CHAR    signed char         // cVarName
                            19578 ; 44   |#define USHORT  unsigned short      // usVarName
                            19579 ; 45   |#define SHORT   unsigned short      // sVarName
                            19580 ; 46   |#define WORD    unsigned int        // wVarName
                            19581 ; 47   |#define INT     signed int          // iVarName
                            19582 ; 48   |#define DWORD   unsigned long       // dwVarName
                            19583 ; 49   |#define LONG    signed long         // lVarName
                            19584 ; 50   |#define BOOL    unsigned int        // bVarName
                            19585 ; 51   |#define FRACT   _fract              // frVarName
                            19586 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            19587 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            19588 ; 54   |#define FLOAT   float               // fVarName
                            19589 ; 55   |#define DBL     double              // dVarName
                            19590 ; 56   |#define ENUM    enum                // eVarName
                            19591 ; 57   |#define CMX     _complex            // cmxVarName
                            19592 ; 58   |typedef WORD UCS3;                   // 
                            19593 ; 59   |
                            19594 ; 60   |#define UINT16  unsigned short
                            19595 ; 61   |#define UINT8   unsigned char   
                            19596 ; 62   |#define UINT32  unsigned long
                            19597 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            19598 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            19599 ; 65   |#define WCHAR   UINT16
                            19600 ; 66   |
                            19601 ; 67   |//UINT128 is 16 bytes or 6 words
                            19602 ; 68   |typedef struct UINT128_3500 {   
                            19603 ; 69   |    int val[6];     
                            19604 ; 70   |} UINT128_3500;
                            19605 ; 71   |
                            19606 ; 72   |#define UINT128   UINT128_3500
                            19607 ; 73   |
                            19608 ; 74   |// Little endian word packed byte strings:   
                            19609 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            19610 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            19611 ; 77   |// Little endian word packed byte strings:   
                            19612 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            19613 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            19614 ; 80   |
                            19615 ; 81   |// Declare Memory Spaces To Use When Coding
                            19616 ; 82   |// A. Sector Buffers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 328

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19617 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            19618 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            19619 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            19620 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            19621 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            19622 ; 88   |// B. Media DDI Memory
                            19623 ; 89   |#define MEDIA_DDI_MEM _Y
                            19624 ; 90   |
                            19625 ; 91   |
                            19626 ; 92   |
                            19627 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            19628 ; 94   |// Examples of circular pointers:
                            19629 ; 95   |//    INT CIRC cpiVarName
                            19630 ; 96   |//    DWORD CIRC cpdwVarName
                            19631 ; 97   |
                            19632 ; 98   |#define RETCODE INT                 // rcVarName
                            19633 ; 99   |
                            19634 ; 100  |// generic bitfield structure
                            19635 ; 101  |struct Bitfield {
                            19636 ; 102  |    unsigned int B0  :1;
                            19637 ; 103  |    unsigned int B1  :1;
                            19638 ; 104  |    unsigned int B2  :1;
                            19639 ; 105  |    unsigned int B3  :1;
                            19640 ; 106  |    unsigned int B4  :1;
                            19641 ; 107  |    unsigned int B5  :1;
                            19642 ; 108  |    unsigned int B6  :1;
                            19643 ; 109  |    unsigned int B7  :1;
                            19644 ; 110  |    unsigned int B8  :1;
                            19645 ; 111  |    unsigned int B9  :1;
                            19646 ; 112  |    unsigned int B10 :1;
                            19647 ; 113  |    unsigned int B11 :1;
                            19648 ; 114  |    unsigned int B12 :1;
                            19649 ; 115  |    unsigned int B13 :1;
                            19650 ; 116  |    unsigned int B14 :1;
                            19651 ; 117  |    unsigned int B15 :1;
                            19652 ; 118  |    unsigned int B16 :1;
                            19653 ; 119  |    unsigned int B17 :1;
                            19654 ; 120  |    unsigned int B18 :1;
                            19655 ; 121  |    unsigned int B19 :1;
                            19656 ; 122  |    unsigned int B20 :1;
                            19657 ; 123  |    unsigned int B21 :1;
                            19658 ; 124  |    unsigned int B22 :1;
                            19659 ; 125  |    unsigned int B23 :1;
                            19660 ; 126  |};
                            19661 ; 127  |
                            19662 ; 128  |union BitInt {
                            19663 ; 129  |        struct Bitfield B;
                            19664 ; 130  |        int        I;
                            19665 ; 131  |};
                            19666 ; 132  |
                            19667 ; 133  |#define MAX_MSG_LENGTH 10
                            19668 ; 134  |struct CMessage
                            19669 ; 135  |{
                            19670 ; 136  |        unsigned int m_uLength;
                            19671 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            19672 ; 138  |};
                            19673 ; 139  |
                            19674 ; 140  |typedef struct {
                            19675 ; 141  |    WORD m_wLength;
                            19676 ; 142  |    WORD m_wMessage;
                            19677 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            19678 ; 144  |} Message;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 329

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19679 ; 145  |
                            19680 ; 146  |struct MessageQueueDescriptor
                            19681 ; 147  |{
                            19682 ; 148  |        int *m_pBase;
                            19683 ; 149  |        int m_iModulo;
                            19684 ; 150  |        int m_iSize;
                            19685 ; 151  |        int *m_pHead;
                            19686 ; 152  |        int *m_pTail;
                            19687 ; 153  |};
                            19688 ; 154  |
                            19689 ; 155  |struct ModuleEntry
                            19690 ; 156  |{
                            19691 ; 157  |    int m_iSignaledEventMask;
                            19692 ; 158  |    int m_iWaitEventMask;
                            19693 ; 159  |    int m_iResourceOfCode;
                            19694 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            19695 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            19696 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            19697 ; 163  |    int m_uTimeOutHigh;
                            19698 ; 164  |    int m_uTimeOutLow;
                            19699 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            19700 ; 166  |};
                            19701 ; 167  |
                            19702 ; 168  |union WaitMask{
                            19703 ; 169  |    struct B{
                            19704 ; 170  |        unsigned int m_bNone     :1;
                            19705 ; 171  |        unsigned int m_bMessage  :1;
                            19706 ; 172  |        unsigned int m_bTimer    :1;
                            19707 ; 173  |        unsigned int m_bButton   :1;
                            19708 ; 174  |    } B;
                            19709 ; 175  |    int I;
                            19710 ; 176  |} ;
                            19711 ; 177  |
                            19712 ; 178  |
                            19713 ; 179  |struct Button {
                            19714 ; 180  |        WORD wButtonEvent;
                            19715 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            19716 ; 182  |};
                            19717 ; 183  |
                            19718 ; 184  |struct Message {
                            19719 ; 185  |        WORD wMsgLength;
                            19720 ; 186  |        WORD wMsgCommand;
                            19721 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            19722 ; 188  |};
                            19723 ; 189  |
                            19724 ; 190  |union EventTypes {
                            19725 ; 191  |        struct CMessage msg;
                            19726 ; 192  |        struct Button Button ;
                            19727 ; 193  |        struct Message Message;
                            19728 ; 194  |};
                            19729 ; 195  |
                            19730 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            19731 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            19732 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            19733 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            19734 ; 200  |
                            19735 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            19736 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            19737 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            19738 ; 204  |
                            19739 ; 205  |#if DEBUG
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 330

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19740 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            19741 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            19742 ; 208  |#else 
                            19743 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            19744 ; 210  |#define DebugBuildAssert(x)    
                            19745 ; 211  |#endif
                            19746 ; 212  |
                            19747 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            19748 ; 214  |//  #pragma asm
                            19749 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            19750 ; 216  |//  #pragma endasm
                            19751 ; 217  |
                            19752 ; 218  |
                            19753 ; 219  |#ifdef COLOR_262K
                            19754 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            19755 ; 221  |#elif defined(COLOR_65K)
                            19756 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            19757 ; 223  |#else
                            19758 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            19759 ; 225  |#endif
                            19760 ; 226  |    
                            19761 ; 227  |#endif // #ifndef _TYPES_H
                            19762 
                            19764 
                            19765 ; 5    |#include "timedatemenu.h"
                            19766 
                            19768 
                            19769 ; 1    |#ifndef _TIMEDATE_H
                            19770 ; 2    |#define _TIMEDATE_H
                            19771 ; 3    |
                            19772 ; 4    |#include "types.h"
                            19773 
                            19775 
                            19776 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            19777 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            19778 ; 3    |//
                            19779 ; 4    |// Filename: types.h
                            19780 ; 5    |// Description: Standard data types
                            19781 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            19782 ; 7    |
                            19783 ; 8    |#ifndef _TYPES_H
                            19784 ; 9    |#define _TYPES_H
                            19785 ; 10   |
                            19786 ; 11   |// TODO:  move this outta here!
                            19787 ; 12   |#if !defined(NOERROR)
                            19788 ; 13   |#define NOERROR 0
                            19789 ; 14   |#define SUCCESS 0
                            19790 ; 15   |#endif 
                            19791 ; 16   |#if !defined(SUCCESS)
                            19792 ; 17   |#define SUCCESS  0
                            19793 ; 18   |#endif
                            19794 ; 19   |#if !defined(ERROR)
                            19795 ; 20   |#define ERROR   -1
                            19796 ; 21   |#endif
                            19797 ; 22   |#if !defined(FALSE)
                            19798 ; 23   |#define FALSE 0
                            19799 ; 24   |#endif
                            19800 ; 25   |#if !defined(TRUE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 331

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19801 ; 26   |#define TRUE  1
                            19802 ; 27   |#endif
                            19803 ; 28   |
                            19804 ; 29   |#if !defined(NULL)
                            19805 ; 30   |#define NULL 0
                            19806 ; 31   |#endif
                            19807 ; 32   |
                            19808 ; 33   |#define MAX_INT     0x7FFFFF
                            19809 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            19810 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            19811 ; 36   |#define MAX_ULONG   (-1) 
                            19812 ; 37   |
                            19813 ; 38   |#define WORD_SIZE   24              // word size in bits
                            19814 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            19815 ; 40   |
                            19816 ; 41   |
                            19817 ; 42   |#define BYTE    unsigned char       // btVarName
                            19818 ; 43   |#define CHAR    signed char         // cVarName
                            19819 ; 44   |#define USHORT  unsigned short      // usVarName
                            19820 ; 45   |#define SHORT   unsigned short      // sVarName
                            19821 ; 46   |#define WORD    unsigned int        // wVarName
                            19822 ; 47   |#define INT     signed int          // iVarName
                            19823 ; 48   |#define DWORD   unsigned long       // dwVarName
                            19824 ; 49   |#define LONG    signed long         // lVarName
                            19825 ; 50   |#define BOOL    unsigned int        // bVarName
                            19826 ; 51   |#define FRACT   _fract              // frVarName
                            19827 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            19828 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            19829 ; 54   |#define FLOAT   float               // fVarName
                            19830 ; 55   |#define DBL     double              // dVarName
                            19831 ; 56   |#define ENUM    enum                // eVarName
                            19832 ; 57   |#define CMX     _complex            // cmxVarName
                            19833 ; 58   |typedef WORD UCS3;                   // 
                            19834 ; 59   |
                            19835 ; 60   |#define UINT16  unsigned short
                            19836 ; 61   |#define UINT8   unsigned char   
                            19837 ; 62   |#define UINT32  unsigned long
                            19838 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            19839 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            19840 ; 65   |#define WCHAR   UINT16
                            19841 ; 66   |
                            19842 ; 67   |//UINT128 is 16 bytes or 6 words
                            19843 ; 68   |typedef struct UINT128_3500 {   
                            19844 ; 69   |    int val[6];     
                            19845 ; 70   |} UINT128_3500;
                            19846 ; 71   |
                            19847 ; 72   |#define UINT128   UINT128_3500
                            19848 ; 73   |
                            19849 ; 74   |// Little endian word packed byte strings:   
                            19850 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            19851 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            19852 ; 77   |// Little endian word packed byte strings:   
                            19853 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            19854 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            19855 ; 80   |
                            19856 ; 81   |// Declare Memory Spaces To Use When Coding
                            19857 ; 82   |// A. Sector Buffers
                            19858 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            19859 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            19860 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 332

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19861 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            19862 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            19863 ; 88   |// B. Media DDI Memory
                            19864 ; 89   |#define MEDIA_DDI_MEM _Y
                            19865 ; 90   |
                            19866 ; 91   |
                            19867 ; 92   |
                            19868 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            19869 ; 94   |// Examples of circular pointers:
                            19870 ; 95   |//    INT CIRC cpiVarName
                            19871 ; 96   |//    DWORD CIRC cpdwVarName
                            19872 ; 97   |
                            19873 ; 98   |#define RETCODE INT                 // rcVarName
                            19874 ; 99   |
                            19875 ; 100  |// generic bitfield structure
                            19876 ; 101  |struct Bitfield {
                            19877 ; 102  |    unsigned int B0  :1;
                            19878 ; 103  |    unsigned int B1  :1;
                            19879 ; 104  |    unsigned int B2  :1;
                            19880 ; 105  |    unsigned int B3  :1;
                            19881 ; 106  |    unsigned int B4  :1;
                            19882 ; 107  |    unsigned int B5  :1;
                            19883 ; 108  |    unsigned int B6  :1;
                            19884 ; 109  |    unsigned int B7  :1;
                            19885 ; 110  |    unsigned int B8  :1;
                            19886 ; 111  |    unsigned int B9  :1;
                            19887 ; 112  |    unsigned int B10 :1;
                            19888 ; 113  |    unsigned int B11 :1;
                            19889 ; 114  |    unsigned int B12 :1;
                            19890 ; 115  |    unsigned int B13 :1;
                            19891 ; 116  |    unsigned int B14 :1;
                            19892 ; 117  |    unsigned int B15 :1;
                            19893 ; 118  |    unsigned int B16 :1;
                            19894 ; 119  |    unsigned int B17 :1;
                            19895 ; 120  |    unsigned int B18 :1;
                            19896 ; 121  |    unsigned int B19 :1;
                            19897 ; 122  |    unsigned int B20 :1;
                            19898 ; 123  |    unsigned int B21 :1;
                            19899 ; 124  |    unsigned int B22 :1;
                            19900 ; 125  |    unsigned int B23 :1;
                            19901 ; 126  |};
                            19902 ; 127  |
                            19903 ; 128  |union BitInt {
                            19904 ; 129  |        struct Bitfield B;
                            19905 ; 130  |        int        I;
                            19906 ; 131  |};
                            19907 ; 132  |
                            19908 ; 133  |#define MAX_MSG_LENGTH 10
                            19909 ; 134  |struct CMessage
                            19910 ; 135  |{
                            19911 ; 136  |        unsigned int m_uLength;
                            19912 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            19913 ; 138  |};
                            19914 ; 139  |
                            19915 ; 140  |typedef struct {
                            19916 ; 141  |    WORD m_wLength;
                            19917 ; 142  |    WORD m_wMessage;
                            19918 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            19919 ; 144  |} Message;
                            19920 ; 145  |
                            19921 ; 146  |struct MessageQueueDescriptor
                            19922 ; 147  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 333

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19923 ; 148  |        int *m_pBase;
                            19924 ; 149  |        int m_iModulo;
                            19925 ; 150  |        int m_iSize;
                            19926 ; 151  |        int *m_pHead;
                            19927 ; 152  |        int *m_pTail;
                            19928 ; 153  |};
                            19929 ; 154  |
                            19930 ; 155  |struct ModuleEntry
                            19931 ; 156  |{
                            19932 ; 157  |    int m_iSignaledEventMask;
                            19933 ; 158  |    int m_iWaitEventMask;
                            19934 ; 159  |    int m_iResourceOfCode;
                            19935 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            19936 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            19937 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            19938 ; 163  |    int m_uTimeOutHigh;
                            19939 ; 164  |    int m_uTimeOutLow;
                            19940 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            19941 ; 166  |};
                            19942 ; 167  |
                            19943 ; 168  |union WaitMask{
                            19944 ; 169  |    struct B{
                            19945 ; 170  |        unsigned int m_bNone     :1;
                            19946 ; 171  |        unsigned int m_bMessage  :1;
                            19947 ; 172  |        unsigned int m_bTimer    :1;
                            19948 ; 173  |        unsigned int m_bButton   :1;
                            19949 ; 174  |    } B;
                            19950 ; 175  |    int I;
                            19951 ; 176  |} ;
                            19952 ; 177  |
                            19953 ; 178  |
                            19954 ; 179  |struct Button {
                            19955 ; 180  |        WORD wButtonEvent;
                            19956 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            19957 ; 182  |};
                            19958 ; 183  |
                            19959 ; 184  |struct Message {
                            19960 ; 185  |        WORD wMsgLength;
                            19961 ; 186  |        WORD wMsgCommand;
                            19962 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            19963 ; 188  |};
                            19964 ; 189  |
                            19965 ; 190  |union EventTypes {
                            19966 ; 191  |        struct CMessage msg;
                            19967 ; 192  |        struct Button Button ;
                            19968 ; 193  |        struct Message Message;
                            19969 ; 194  |};
                            19970 ; 195  |
                            19971 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            19972 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            19973 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            19974 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            19975 ; 200  |
                            19976 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            19977 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            19978 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            19979 ; 204  |
                            19980 ; 205  |#if DEBUG
                            19981 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            19982 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            19983 ; 208  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 334

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19984 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            19985 ; 210  |#define DebugBuildAssert(x)    
                            19986 ; 211  |#endif
                            19987 ; 212  |
                            19988 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            19989 ; 214  |//  #pragma asm
                            19990 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            19991 ; 216  |//  #pragma endasm
                            19992 ; 217  |
                            19993 ; 218  |
                            19994 ; 219  |#ifdef COLOR_262K
                            19995 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            19996 ; 221  |#elif defined(COLOR_65K)
                            19997 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            19998 ; 223  |#else
                            19999 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            20000 ; 225  |#endif
                            20001 ; 226  |    
                            20002 ; 227  |#endif // #ifndef _TYPES_H
                            20003 
                            20005 
                            20006 ; 5    |
                            20007 ; 6    |#define TIMEDATE_REFRESH_TIME  100  // 15 seconds
                            20008 ; 7    |
                            20009 ; 8    |enum _TIMEDATEMENU_ID
                            20010 ; 9    |{
                            20011 ; 10   |TIME_DATE_MENU_CLOCK = 0,
                            20012 ; 11   |TIME_DATE_MENU_SET_TIME,
                            20013 ; 12   |TIME_DATE_MENU_SET_DATE,
                            20014 ; 13   |TIME_DATE_MENU_EXIT
                            20015 ; 14   |};
                            20016 ; 15   |
                            20017 ; 16   |#define TIME_DATE_MENU_FIRST    TIME_DATE_MENU_CLOCK
                            20018 ; 17   |#define TIME_DATE_MENU_LAST     TIME_DATE_MENU_EXIT
                            20019 ; 18   |#define TIME_DATE_MENU_COUNT    (TIME_DATE_MENU_LAST-1)
                            20020 ; 19   |
                            20021 ; 20   |#define TIME_DATE_TITLE_X_POS   2
                            20022 ; 21   |#define TIME_DATE_TITLE_Y_POS   8
                            20023 ; 22   |
                            20024 ; 23   |#define TIMEFORMAT_12HOUR 0
                            20025 ; 24   |#define TIMEFORMAT_24HOUR 1
                            20026 ; 25   |
                            20027 ; 26   |#define DATEFORMAT_FIRST                0
                            20028 ; 27   |#define DATEFORMAT_MMDDYYYY 0
                            20029 ; 28   |#define DATEFORMAT_DDMMYYYY 1
                            20030 ; 29   |#define DATEFORMAT_YYYYMMDD 2
                            20031 ; 30   |#define DATEFORMAT_LAST         2
                            20032 ; 31   |
                            20033 ; 32   |//Place the Date in the title of TimeDateMenu
                            20034 ; 33   |#define DAYNAME_X_POS   0                       
                            20035 ; 34   |#define DAYNAME_Y_POS   48
                            20036 ; 35   |#define DATE_X_POS              50
                            20037 ; 36   |#define DATE_Y_POS              48
                            20038 ; 37   |#define TIME_X_POS              0
                            20039 ; 38   |#define TIME_Y_POS              32
                            20040 ; 39   |
                            20041 ; 40   |#define DAYS_OF_WEEK_X_POS      0
                            20042 ; 41   |#define DAYS_OF_WEEK_Y_POS      2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 335

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20043 ; 42   |#define DATE_BEGIN_XPOS         35
                            20044 ; 43   |#define DATE_BEGIN_YPOS         2
                            20045 ; 44   |#define TIME_NUM_MEDIUM_WIDTH   8
                            20046 ; 45   |#define TIME_DASH_WIDTH         8
                            20047 ; 46   |#define TIME_MONTH_WIDTH                29
                            20048 ; 47   |
                            20049 ; 48   |//Place the real time
                            20050 ; 49   |#define TIME_BEGIN_X_POS        6
                            20051 ; 50   |#define TIME_BEGIN_Y_POS        32
                            20052 ; 51   |#define TIME_NUM_LARGE_WIDTH    13
                            20053 ; 52   |#define TIME_COLON_WIDTH                5
                            20054 ; 53   |
                            20055 ; 54   |// Defines for Days of the Week
                            20056 ; 55   |#define DAYOFWEEK_FIRST 0
                            20057 ; 56   |#define SATURDAY                0
                            20058 ; 57   |#define SUNDAY                  1
                            20059 ; 58   |#define MONDAY                  2
                            20060 ; 59   |#define TUESDAY                 3
                            20061 ; 60   |#define WEDNESDAY               4
                            20062 ; 61   |#define THURSDAY                5
                            20063 ; 62   |#define FRIDAY                  6
                            20064 ; 63   |#define DAYOFWEEK_LAST  6
                            20065 ; 64   |        
                            20066 ; 65   |
                            20067 ; 66   |#define JAN             1
                            20068 ; 67   |#define FEB             2
                            20069 ; 68   |#define MAR             3
                            20070 ; 69   |#define APR             4
                            20071 ; 70   |#define MAY             5
                            20072 ; 71   |#define JUN             6
                            20073 ; 72   |#define JUL             7
                            20074 ; 73   |#define AUG             8
                            20075 ; 74   |#define SEP             9
                            20076 ; 75   |#define OCT             10
                            20077 ; 76   |#define NOV             11
                            20078 ; 77   |#define DEC             12
                            20079 ; 78   |                                        
                            20080 ; 79   |extern void SetRTC(unsigned long);
                            20081 ; 80   |extern unsigned long ReadRTC(void);
                            20082 ; 81   |
                            20083 ; 82   |typedef union   
                            20084 ; 83   |{
                            20085 ; 84   |    struct
                            20086 ; 85   |    {
                            20087 ; 86   |        unsigned int m_iMinutes: 6;
                            20088 ; 87   |        unsigned int m_iHours : 5;
                            20089 ; 88   |        unsigned int m_iDays: 5;
                            20090 ; 89   |        unsigned int m_iMonths: 4;
                            20091 ; 90   |        unsigned int m_iYears: 7;
                            20092 ; 91   |
                            20093 ; 92   |        unsigned int m_iSeconds: 6;
                            20094 ; 93   |        unsigned int m_iDayOfWeek: 3;
                            20095 ; 94   |        }B;
                            20096 ; 95   |        long L;
                            20097 ; 96   |}TimeDateValues_type;
                            20098 ; 97   |
                            20099 ; 98   |#endif
                            20100 
                            20102 
                            20103 ; 6    |
                            20104 ; 7    |#define SET_TIME_TITLE_X_POS    15
                            20105 ; 8    |#define SET_TIME_TITLE_Y_POS    10
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 336

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20106 ; 9    |
                            20107 ; 10   |#define FIRST_TIME_SELECT 0
                            20108 ; 11   |#define HOUR_SELECT 0
                            20109 ; 12   |#define MINUTE_SELECT 1
                            20110 ; 13   |#define TIMEFORMAT_SELECT 2
                            20111 ; 14   |#define TIMEOK_SELECT 3
                            20112 ; 15   |#define TIMECANCEL_SELECT 4
                            20113 ; 16   |#define LAST_TIME_SELECT 4
                            20114 ; 17   |#define TIME_SELECT_ALL 5
                            20115 ; 18   |
                            20116 ; 19   |#define HOUR_X_POS      16
                            20117 ; 20   |#define HOUR_Y_POS      32
                            20118 ; 21   |#define FORMAT_X_POS 16
                            20119 ; 22   |#define FORMAT_Y_POS 40
                            20120 ; 23   |#define OK_TIME_X_POS 16
                            20121 ; 24   |#define OK_TIME_Y_POS  48 
                            20122 ; 25   |#define SAVE_CHANGES_TIME_X_POS 4
                            20123 ; 26   |#define SAVE_CHANGES_TIME_Y_POS 24
                            20124 ; 27   |
                            20125 ; 28   |#define SETTIME_FIRST_SAVE_CHANGES 0
                            20126 ; 29   |#define SETTIME_YES              0
                            20127 ; 30   |#define SETTIME_NO               1
                            20128 ; 31   |#define SETTIME_CANCEL   2
                            20129 ; 32   |#define SETTIME_LAST_SAVE_CHANGES 2
                            20130 ; 33   |
                            20131 ; 34   |#define SETTIME_CLEAR   3 // out of range because it should not be included in options
                            20132 ; 35   |
                            20133 ; 36   |// Not Used
                            20134 ; 37   |//#define MINUTE_X_POS 41
                            20135 ; 38   |//#define MINUTE_Y_POS 56
                            20136 ; 39   |//#define SECOND_X_POS 57
                            20137 ; 40   |//#define SECOND_Y_POS 56
                            20138 ; 41   |//#define MERIDIEM_X_POS 72
                            20139 ; 42   |//#define MERIDIEM_Y_POS 56
                            20140 ; 43   |
                            20141 ; 44   |// External functions
                            20142 ; 45   |extern void SetRTC(unsigned long);
                            20143 ; 46   |extern unsigned long ReadRTC(void);
                            20144 ; 47   |extern _reentrant void UpdateDate(int a, int b, int *Unused);
                            20145 ; 48   |extern _reentrant void UpdateTime(int a, int b, int *Unused);
                            20146 ; 49   |
                            20147 ; 50   |#endif
                            20148 ; 51   |
                            20149 
                            20151 
                            20152 ; 22   |//Stmp00008949
                            20153 ; 23   |#include "FileSystem.h"
                            20154 
                            20156 
                            20157 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            20158 ; 2    |//  Copyright(C) SigmaTel, Inc. 2001
                            20159 ; 3    |//
                            20160 ; 4    |//  File        : FileSystem.h
                            20161 ; 5    |//  Description : Header File for File System
                            20162 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            20163 ; 7    |
                            20164 ; 8    |#ifndef _FILESYSTEM_H
                            20165 ; 9    |#define _FILESYSTEM_H
                            20166 ; 10   |
                            20167 ; 11   |#include "types.h"
                            20168 
                            20170 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 337

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20171 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            20172 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            20173 ; 3    |//
                            20174 ; 4    |// Filename: types.h
                            20175 ; 5    |// Description: Standard data types
                            20176 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            20177 ; 7    |
                            20178 ; 8    |#ifndef _TYPES_H
                            20179 ; 9    |#define _TYPES_H
                            20180 ; 10   |
                            20181 ; 11   |// TODO:  move this outta here!
                            20182 ; 12   |#if !defined(NOERROR)
                            20183 ; 13   |#define NOERROR 0
                            20184 ; 14   |#define SUCCESS 0
                            20185 ; 15   |#endif 
                            20186 ; 16   |#if !defined(SUCCESS)
                            20187 ; 17   |#define SUCCESS  0
                            20188 ; 18   |#endif
                            20189 ; 19   |#if !defined(ERROR)
                            20190 ; 20   |#define ERROR   -1
                            20191 ; 21   |#endif
                            20192 ; 22   |#if !defined(FALSE)
                            20193 ; 23   |#define FALSE 0
                            20194 ; 24   |#endif
                            20195 ; 25   |#if !defined(TRUE)
                            20196 ; 26   |#define TRUE  1
                            20197 ; 27   |#endif
                            20198 ; 28   |
                            20199 ; 29   |#if !defined(NULL)
                            20200 ; 30   |#define NULL 0
                            20201 ; 31   |#endif
                            20202 ; 32   |
                            20203 ; 33   |#define MAX_INT     0x7FFFFF
                            20204 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            20205 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            20206 ; 36   |#define MAX_ULONG   (-1) 
                            20207 ; 37   |
                            20208 ; 38   |#define WORD_SIZE   24              // word size in bits
                            20209 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            20210 ; 40   |
                            20211 ; 41   |
                            20212 ; 42   |#define BYTE    unsigned char       // btVarName
                            20213 ; 43   |#define CHAR    signed char         // cVarName
                            20214 ; 44   |#define USHORT  unsigned short      // usVarName
                            20215 ; 45   |#define SHORT   unsigned short      // sVarName
                            20216 ; 46   |#define WORD    unsigned int        // wVarName
                            20217 ; 47   |#define INT     signed int          // iVarName
                            20218 ; 48   |#define DWORD   unsigned long       // dwVarName
                            20219 ; 49   |#define LONG    signed long         // lVarName
                            20220 ; 50   |#define BOOL    unsigned int        // bVarName
                            20221 ; 51   |#define FRACT   _fract              // frVarName
                            20222 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            20223 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            20224 ; 54   |#define FLOAT   float               // fVarName
                            20225 ; 55   |#define DBL     double              // dVarName
                            20226 ; 56   |#define ENUM    enum                // eVarName
                            20227 ; 57   |#define CMX     _complex            // cmxVarName
                            20228 ; 58   |typedef WORD UCS3;                   // 
                            20229 ; 59   |
                            20230 ; 60   |#define UINT16  unsigned short
                            20231 ; 61   |#define UINT8   unsigned char   
                            20232 ; 62   |#define UINT32  unsigned long
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 338

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20233 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            20234 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            20235 ; 65   |#define WCHAR   UINT16
                            20236 ; 66   |
                            20237 ; 67   |//UINT128 is 16 bytes or 6 words
                            20238 ; 68   |typedef struct UINT128_3500 {   
                            20239 ; 69   |    int val[6];     
                            20240 ; 70   |} UINT128_3500;
                            20241 ; 71   |
                            20242 ; 72   |#define UINT128   UINT128_3500
                            20243 ; 73   |
                            20244 ; 74   |// Little endian word packed byte strings:   
                            20245 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            20246 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            20247 ; 77   |// Little endian word packed byte strings:   
                            20248 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            20249 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            20250 ; 80   |
                            20251 ; 81   |// Declare Memory Spaces To Use When Coding
                            20252 ; 82   |// A. Sector Buffers
                            20253 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            20254 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            20255 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            20256 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            20257 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            20258 ; 88   |// B. Media DDI Memory
                            20259 ; 89   |#define MEDIA_DDI_MEM _Y
                            20260 ; 90   |
                            20261 ; 91   |
                            20262 ; 92   |
                            20263 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            20264 ; 94   |// Examples of circular pointers:
                            20265 ; 95   |//    INT CIRC cpiVarName
                            20266 ; 96   |//    DWORD CIRC cpdwVarName
                            20267 ; 97   |
                            20268 ; 98   |#define RETCODE INT                 // rcVarName
                            20269 ; 99   |
                            20270 ; 100  |// generic bitfield structure
                            20271 ; 101  |struct Bitfield {
                            20272 ; 102  |    unsigned int B0  :1;
                            20273 ; 103  |    unsigned int B1  :1;
                            20274 ; 104  |    unsigned int B2  :1;
                            20275 ; 105  |    unsigned int B3  :1;
                            20276 ; 106  |    unsigned int B4  :1;
                            20277 ; 107  |    unsigned int B5  :1;
                            20278 ; 108  |    unsigned int B6  :1;
                            20279 ; 109  |    unsigned int B7  :1;
                            20280 ; 110  |    unsigned int B8  :1;
                            20281 ; 111  |    unsigned int B9  :1;
                            20282 ; 112  |    unsigned int B10 :1;
                            20283 ; 113  |    unsigned int B11 :1;
                            20284 ; 114  |    unsigned int B12 :1;
                            20285 ; 115  |    unsigned int B13 :1;
                            20286 ; 116  |    unsigned int B14 :1;
                            20287 ; 117  |    unsigned int B15 :1;
                            20288 ; 118  |    unsigned int B16 :1;
                            20289 ; 119  |    unsigned int B17 :1;
                            20290 ; 120  |    unsigned int B18 :1;
                            20291 ; 121  |    unsigned int B19 :1;
                            20292 ; 122  |    unsigned int B20 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 339

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20293 ; 123  |    unsigned int B21 :1;
                            20294 ; 124  |    unsigned int B22 :1;
                            20295 ; 125  |    unsigned int B23 :1;
                            20296 ; 126  |};
                            20297 ; 127  |
                            20298 ; 128  |union BitInt {
                            20299 ; 129  |        struct Bitfield B;
                            20300 ; 130  |        int        I;
                            20301 ; 131  |};
                            20302 ; 132  |
                            20303 ; 133  |#define MAX_MSG_LENGTH 10
                            20304 ; 134  |struct CMessage
                            20305 ; 135  |{
                            20306 ; 136  |        unsigned int m_uLength;
                            20307 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            20308 ; 138  |};
                            20309 ; 139  |
                            20310 ; 140  |typedef struct {
                            20311 ; 141  |    WORD m_wLength;
                            20312 ; 142  |    WORD m_wMessage;
                            20313 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            20314 ; 144  |} Message;
                            20315 ; 145  |
                            20316 ; 146  |struct MessageQueueDescriptor
                            20317 ; 147  |{
                            20318 ; 148  |        int *m_pBase;
                            20319 ; 149  |        int m_iModulo;
                            20320 ; 150  |        int m_iSize;
                            20321 ; 151  |        int *m_pHead;
                            20322 ; 152  |        int *m_pTail;
                            20323 ; 153  |};
                            20324 ; 154  |
                            20325 ; 155  |struct ModuleEntry
                            20326 ; 156  |{
                            20327 ; 157  |    int m_iSignaledEventMask;
                            20328 ; 158  |    int m_iWaitEventMask;
                            20329 ; 159  |    int m_iResourceOfCode;
                            20330 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            20331 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            20332 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            20333 ; 163  |    int m_uTimeOutHigh;
                            20334 ; 164  |    int m_uTimeOutLow;
                            20335 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            20336 ; 166  |};
                            20337 ; 167  |
                            20338 ; 168  |union WaitMask{
                            20339 ; 169  |    struct B{
                            20340 ; 170  |        unsigned int m_bNone     :1;
                            20341 ; 171  |        unsigned int m_bMessage  :1;
                            20342 ; 172  |        unsigned int m_bTimer    :1;
                            20343 ; 173  |        unsigned int m_bButton   :1;
                            20344 ; 174  |    } B;
                            20345 ; 175  |    int I;
                            20346 ; 176  |} ;
                            20347 ; 177  |
                            20348 ; 178  |
                            20349 ; 179  |struct Button {
                            20350 ; 180  |        WORD wButtonEvent;
                            20351 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            20352 ; 182  |};
                            20353 ; 183  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 340

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20354 ; 184  |struct Message {
                            20355 ; 185  |        WORD wMsgLength;
                            20356 ; 186  |        WORD wMsgCommand;
                            20357 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            20358 ; 188  |};
                            20359 ; 189  |
                            20360 ; 190  |union EventTypes {
                            20361 ; 191  |        struct CMessage msg;
                            20362 ; 192  |        struct Button Button ;
                            20363 ; 193  |        struct Message Message;
                            20364 ; 194  |};
                            20365 ; 195  |
                            20366 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            20367 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            20368 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            20369 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            20370 ; 200  |
                            20371 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            20372 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            20373 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            20374 ; 204  |
                            20375 ; 205  |#if DEBUG
                            20376 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            20377 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            20378 ; 208  |#else 
                            20379 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            20380 ; 210  |#define DebugBuildAssert(x)    
                            20381 ; 211  |#endif
                            20382 ; 212  |
                            20383 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            20384 ; 214  |//  #pragma asm
                            20385 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            20386 ; 216  |//  #pragma endasm
                            20387 ; 217  |
                            20388 ; 218  |
                            20389 ; 219  |#ifdef COLOR_262K
                            20390 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            20391 ; 221  |#elif defined(COLOR_65K)
                            20392 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            20393 ; 223  |#else
                            20394 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            20395 ; 225  |#endif
                            20396 ; 226  |    
                            20397 ; 227  |#endif // #ifndef _TYPES_H
                            20398 
                            20400 
                            20401 ; 12   |
                            20402 ; 13   |
                            20403 ; 14   |// File attributes
                            20404 ; 15   |#ifndef _FS_ATTRIBUTES
                            20405 ; 16   |#define _FS_ATTRIBUTES
                            20406 ; 17   |#define READ        1
                            20407 ; 18   |#define WRITE       2
                            20408 ; 19   |#define WRITE_PLUS  3
                            20409 ; 20   |#define APPEND      4
                            20410 ; 21   |#define TRUNCATE    8
                            20411 ; 22   |#define CREATE      16
                            20412 ; 23   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 341

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20413 ; 24   |
                            20414 ; 25   |//#ifndef FAT12
                            20415 ; 26   |//#define FAT12   1
                            20416 ; 27   |//#endif
                            20417 ; 28   |//
                            20418 ; 29   |#ifndef FAT16
                            20419 ; 30   |#define FAT16   2
                            20420 ; 31   |#endif
                            20421 ; 32   |
                            20422 ; 33   |#define MEM_SPACE_P 0x100000
                            20423 ; 34   |#define MEM_SPACE_Y 0x400000
                            20424 ; 35   |#define MEM_SPACE_X 0x800000
                            20425 ; 36   |
                            20426 ; 37   |#define FILE_SYS_MODE_READ  0
                            20427 ; 38   |#define FILE_SYS_MODE_WRITE 1
                            20428 ; 39   | 
                            20429 ; 40   |#define ATTR_READ_ONLY      0x01
                            20430 ; 41   |#define ATTR_HIDDEN         0x02
                            20431 ; 42   |#define ATTR_SYSTEM         0x04
                            20432 ; 43   |#define ATTR_VOLUME_ID      0x08
                            20433 ; 44   |#define ATTR_DIRECTORY      0x10
                            20434 ; 45   |#define ATTR_ARCHIVE        0x20
                            20435 ; 46   |#define ATTR_LONG_NAME      ATTR_READ_ONLY|ATTR_HIDDEN|ATTR_SYSTEM|ATTR_VOLUME_ID
                            20436 ; 47   |
                            20437 ; 48   |#define SEEK_SET           -1
                            20438 ; 49   |#define SEEK_CUR            0
                            20439 ; 50   |#define SEEK_END            1
                            20440 ; 51   |
                            20441 ; 52   |#define DEVICE_INSTALLED              (WORD)(0)
                            20442 ; 53   |#define DEVICE_NOT_FOUND              (WORD)(2)
                            20443 ; 54   |#define INVALID_FILESYSTEM                        (WORD)(3)
                            20444 ; 55   |#define DEVICE_INVALID                (WORD)(-1)
                            20445 ; 56   |#define DEVICE_ERROR_WRITE_PROTECTED  (WORD)(-2)
                            20446 ; 57   |
                            20447 ; 58   |#define MEDIA_SIZE_TOTAL_SECTORS    0
                            20448 ; 59   |#define MEDIA_SIZE_TOTAL_BYTES      1
                            20449 ; 60   |#define MEDIA_SIZE_BYTES_PER_SECTOR 2
                            20450 ; 61   |#define MEDIA_SIZE_IN_MEGABYTES     3     
                            20451 ; 62   |
                            20452 ; 63   |#define READ_TYPE_NORMAL            0
                            20453 ; 64   |#define READ_TYPE_FAT               1
                            20454 ; 65   |#define READ_TYPE_RAW               2
                            20455 ; 66   |
                            20456 ; 67   |
                            20457 ; 68   |#ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                            20458 ; 69   |    #define WRITE_TYPE_RANDOM                   0
                            20459 ; 70   |    #define WRITE_TYPE_SEQ_FIRST                1
                            20460 ; 71   |    #define WRITE_TYPE_SEQ_NEXT                 2
                            20461 ; 72   |    #define WRITE_TYPE_RESET_CLEAN_UP           3
                            20462 ; 73   |    #define WRITE_TYPE_PARTIAL_SEQ_FIRST        4
                            20463 ; 74   |    #define WRITE_TYPE_PARTIAL_SEQ_NEXT         5
                            20464 ; 75   |    #define WRITE_TYPE_PARTIAL_SEQ_LAST         6
                            20465 ; 76   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                            20466 ; 77   |        #define WRITE_TYPE_RANDOM_RAW               7
                            20467 ; 78   |        #define WRITE_TYPE_SEQ_FIRST_RAW            8
                            20468 ; 79   |        #define WRITE_TYPE_SEQ_NEXT_RAW             9
                            20469 ; 80   |        #define WRITE_TYPE_PARTIAL_SEQ_FIRST_RAW    10
                            20470 ; 81   |        #define WRITE_TYPE_PARTIAL_SEQ_NEXT_RAW     11
                            20471 ; 82   |        #define WRITE_TYPE_PARTIAL_SEQ_LAST_RAW     12
                            20472 ; 83   |    #endif
                            20473 ; 84   |#else
                            20474 ; 85   |    #define WRITE_TYPE_RANDOM                   0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 342

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20475 ; 86   |    #define WRITE_TYPE_SEQ_FIRST                1
                            20476 ; 87   |    #define WRITE_TYPE_SEQ_NEXT                 2
                            20477 ; 88   |    #ifdef MEDIA_DDI_RAW_SECTOR_SERVER_ENABLE
                            20478 ; 89   |        #define WRITE_TYPE_RANDOM_RAW               3
                            20479 ; 90   |        #define WRITE_TYPE_SEQ_FIRST_RAW            4
                            20480 ; 91   |        #define WRITE_TYPE_SEQ_NEXT_RAW             5
                            20481 ; 92   |    #endif
                            20482 ; 93   |#endif
                            20483 ; 94   |    #define WRITE_TYPE_UNDEFINED 0xFFFFFF
                            20484 ; 95   |
                            20485 ; 96   |
                            20486 ; 97   |#ifndef MAX_FILENAME_LENGTH
                            20487 ; 98   |#define MAX_FILENAME_LENGTH 256
                            20488 ; 99   |#endif
                            20489 ; 100  |
                            20490 ; 101  |typedef struct {
                            20491 ; 102  |    WORD wNumberOfZones;
                            20492 ; 103  |    WORD wSizeInMegaBytes;
                            20493 ; 104  |} SMARTMEDIA_CHIP_INFO;
                            20494 ; 105  |
                            20495 ; 106  |typedef struct {
                            20496 ; 107  |    WORD wBootIdentification;
                            20497 ; 108  |    WORD wStartHeadNumber;
                            20498 ; 109  |    WORD wStartSectorNumber;
                            20499 ; 110  |    WORD wStartCylinderNumber;
                            20500 ; 111  |    WORD wSystemIdentification;
                            20501 ; 112  |    WORD wEndHeadNumber;
                            20502 ; 113  |    WORD wEndSectorNumber;
                            20503 ; 114  |    WORD wEndCylinderNumber;
                            20504 ; 115  |    WORD wStartLogicalSectorNumberHigh;
                            20505 ; 116  |    WORD wStartLogicalSectorNumberLow;
                            20506 ; 117  |    WORD wPartitionSizeHigh;
                            20507 ; 118  |    WORD wPartitionSizeLow;
                            20508 ; 119  |} SMARTMEDIA_PARTITION_TABLE;
                            20509 ; 120  |
                            20510 ; 121  |typedef struct {
                            20511 ; 122  |    WORD wWord0;
                            20512 ; 123  |    WORD wWord1;
                            20513 ; 124  |    WORD wWord2;
                            20514 ; 125  |} SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME;
                            20515 ; 126  |
                            20516 ; 127  |typedef struct {
                            20517 ; 128  |    WORD wWord0;
                            20518 ; 129  |    WORD wWord1;
                            20519 ; 130  |} SMARTMEDIA_CIS_IDI_PRODUCT_NAME;
                            20520 ; 131  |
                            20521 ; 132  |typedef struct {
                            20522 ; 133  |    WORD wWord0;
                            20523 ; 134  |    WORD wWord1;
                            20524 ; 135  |} SMARTMEDIA_CIS_IDI_PRODUCT_VERSION;
                            20525 ; 136  |
                            20526 ; 137  |typedef struct {
                            20527 ; 138  |    WORD wWord0;
                            20528 ; 139  |    WORD wWord1;
                            20529 ; 140  |    WORD wWord2;
                            20530 ; 141  |    WORD wWord3;
                            20531 ; 142  |} SMARTMEDIA_CIS_IDI_SERIAL_NUMBER;
                            20532 ; 143  |
                            20533 ; 144  |typedef struct {
                            20534 ; 145  |    WORD wWord0;
                            20535 ; 146  |} SMARTMEDIA_CIS_IDI_MODEL_NUMBER;
                            20536 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 343

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20559 
                            20560 ; 147  |
                            20561 ; 148  |typedef struct {
                            20562 ; 149  |    SMARTMEDIA_CIS_IDI_MANUFACTURER_NAME ManufacturerName;
                            20563 ; 150  |    SMARTMEDIA_CIS_IDI_PRODUCT_NAME ProductName;
                            20564 ; 151  |    SMARTMEDIA_CIS_IDI_PRODUCT_VERSION ProductVersion;
                            20565 ; 152  |    SMARTMEDIA_CIS_IDI_SERIAL_NUMBER SerialNumber;
                            20566 ; 153  |    SMARTMEDIA_CIS_IDI_MODEL_NUMBER ModelNumber;
                            20567 ; 154  |} SMARTMEDIA_CIS_IDI_TABLE;
                            20568 
                            20590 
                            20591 ; 155  |   
                            20592 ; 156  |typedef struct {
                            20593 ; 157  |    WORD wPageSizeInBytes;
                            20594 ; 158  |    WORD wRedundantAreaSizeInBytes;
                            20595 ; 159  |    WORD wNumberOfPagesPerBlock;
                            20596 ; 160  |    WORD wNumberOfBlocksPerZone;
                            20597 ; 161  |    WORD wNumberOfZonesInMedia;
                            20598 ; 162  |    WORD wMediaSizeInMBytes;
                            20599 ; 163  |    SMARTMEDIA_PARTITION_TABLE * pPartitionTable;
                            20600 ; 164  |    SMARTMEDIA_CIS_IDI_TABLE * pCisIdiTable;
                            20601 ; 165  |    WORD wMediaFlagStatus;
                            20602 ; 166  |    WORD wNumberOfBlocksToTheCisIdiBlock;
                            20603 ; 167  |    WORD wTotalNumberOfPhysicalBlocks;
                            20604 ; 168  |    WORD wNumberOfSystemBlocks;
                            20605 ; 169  |} SMARTMEDIA_ENTRY_TABLE;
                            20606 ; 170  |
                            20607 ; 171  |typedef struct {
                            20608 ; 172  |    WORD wDevice;        
                            20609 ; 173  |    WORD wDirtyBlockFlag;
                            20610 ; 174  |    WORD wCleanTailFlag; 
                            20611 ; 175  |    WORD wLogDOSPage;    
                            20612 ; 176  |    WORD wSrcLogBlock;   
                            20613 ; 177  |    WORD wSrcPhyBlock;   
                            20614 ; 178  |    WORD wDestPhyBlock;  
                            20615 ; 179  |    WORD wStartSrcPage;  
                            20616 ; 180  |    WORD wStartDestPage; 
                            20617 ; 181  |    WORD wPagesToCopy;   
                            20618 ; 182  |    WORD wReplaceBuff;   
                            20619 ; 183  |    WORD wReplaceRdnt;
                            20620 ; 184  |    #ifdef MEDIA_DDI_PARTIAL_SEQ_ENABLE
                            20621 ; 185  |        WORD wFirstCount;
                            20622 ; 186  |        WORD wNextCount;
                            20623 ; 187  |        WORD wLastCount;
                            20624 ; 188  |    #endif
                            20625 ; 189  |} SMARTMEDIA_FWPPS_TABLE;
                            20626 ; 190  |
                            20627 ; 191  |typedef struct {
                            20628 ; 192  |    WORD wWord0;
                            20629 ; 193  |    WORD wWord1;
                            20630 ; 194  |    WORD wWord2;
                            20631 ; 195  |    WORD wWord3;
                            20632 ; 196  |} DIRECTORY_NAME;
                            20633 ; 197  |
                            20634 ; 198  |typedef struct {
                            20635 ; 199  |    WORD wWord0;
                            20636 ; 200  |    WORD wWord1;
                            20637 ; 201  |} DIRECTORY_EXTENSION;
                            20638 ; 202  |
                            20639 ; 203  |typedef struct {
                            20640 ; 204  |    WORD wWord0;
                            20641 ; 205  |    WORD wWord1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 344

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20642 ; 206  |} DIRECTORY_SIZE;
                            20643 
                            20658 
                            20659 ; 207  |
                            20660 ; 208  |typedef struct {
                            20661 ; 209  |    DIRECTORY_NAME Name;
                            20662 ; 210  |    DIRECTORY_EXTENSION Extension;
                            20663 ; 211  |    WORD wAttribute;
                            20664 ; 212  |    WORD wReserved[4];
                            20665 ; 213  |    WORD wCreationTime;
                            20666 ; 214  |    WORD wCreationData;
                            20667 ; 215  |    WORD wFirstCluster;
                            20668 ; 216  |    DIRECTORY_SIZE Size;
                            20669 ; 217  |    WORD wCurrentCluster;
                            20670 ; 218  |    WORD wPointer;
                            20671 ; 219  |    WORD wRecord;
                            20672 ; 220  |    WORD wRd;
                            20673 ; 221  |} DIRECTORY_FILE_CONTROL_BLOCK;
                            20674 ; 222  |
                            20675 ; 223  |// TODO:  clean this up.  There are two versions.
                            20676 ; 224  |struct FCB
                            20677 ; 225  |{
                            20678 ; 226  |    _packed BYTE m_szFileName[9];       //0-2
                            20679 ; 227  |    int     m_wReserved;                //3
                            20680 ; 228  |    _packed BYTE m_szExt[4];            //4-5
                            20681 ; 229  |    int     m_wAttributes;              //6
                            20682 ; 230  |    int     m_wReserved2[4];            //7,8,9,a
                            20683 ; 231  |    int     m_wTimeofCreation;          //b
                            20684 ; 232  |    int     m_wDateofCreation;          //c
                            20685 ; 233  |    int     m_wFirstCluster;            //d
                            20686 ; 234  |    int     m_wFileSizeHigh;            //e
                            20687 ; 235  |    int     m_wFileSizeLow;             //f
                            20688 ; 236  |};
                            20689 
                            20705 
                            20706 ; 237  |
                            20707 ; 238  |
                            20708 ; 239  |typedef struct {
                            20709 ; 240  |    WORD wFirstClusterCurrentDirectory;
                            20710 ; 241  |    WORD wFirstClusterParentDirectory;
                            20711 ; 242  |    WORD wAbsSectorCurrentlyCached;
                            20712 ; 243  |    WORD wCurrentRelativeSector;
                            20713 ; 244  |    WORD wNumberOfSectors;
                            20714 ; 245  |    WORD wCurrentRecordLoadedInDcb;
                            20715 ; 246  |    WORD wBufferedRecord;
                            20716 ; 247  |    WORD wMaxNumberRecordsCurrentDirectory;
                            20717 ; 248  |    WORD * pwPointerToBuffer;
                            20718 ; 249  |    WORD * pwPointerToPath;
                            20719 ; 250  |    DIRECTORY_FILE_CONTROL_BLOCK * pDirFcb;
                            20720 ; 251  |} DIRECTORY_CONTROL_BLOCK;
                            20721 ; 252  |
                            20722 ; 253  |typedef struct {
                            20723 ; 254  |    WORD wWord0;
                            20724 ; 255  |    WORD wWord1;
                            20725 ; 256  |    WORD wWord2;
                            20726 ; 257  |    WORD wWord3;
                            20727 ; 258  |} FILE_NAME;
                            20728 ; 259  |
                            20729 ; 260  |typedef struct {
                            20730 ; 261  |    WORD wWord0;
                            20731 ; 262  |    WORD wWord1;
                            20732 ; 263  |} FILE_EXTENSION;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 345

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20733 ; 264  |
                            20734 ; 265  |typedef struct {
                            20735 ; 266  |    WORD wWord0;
                            20736 ; 267  |    WORD wWord1;
                            20737 ; 268  |} FILE_SIZE;
                            20738 ; 269  |
                            20739 ; 270  |typedef union {
                            20740 ; 271  |    struct {
                            20741 ; 272  |        int Read        :1;
                            20742 ; 273  |        int Write       :1;
                            20743 ; 274  |        int Append      :1;
                            20744 ; 275  |        int Truncate    :1;
                            20745 ; 276  |        int Create      :1;
                            20746 ; 277  |        int Rsrv        :3;
                            20747 ; 278  |        int Mode        :8;
                            20748 ; 279  |        int Device      :8;
                            20749 ; 280  |    } B;
                            20750 ; 281  |    int I;
                            20751 ; 282  |} FILE_FLAGS;
                            20752 ; 283  |
                            20753 ; 284  |typedef struct {
                            20754 ; 285  |    WORD wWord0;
                            20755 ; 286  |    WORD wWord1;
                            20756 ; 287  |} FILE_BYTE_CURRENT;
                            20757 
                            20797 
                            20798 ; 288  |
                            20799 ; 289  |typedef struct {
                            20800 ; 290  |    FILE_NAME Name;
                            20801 ; 291  |    FILE_EXTENSION Extension;
                            20802 ; 292  |    WORD wAttributes;
                            20803 ; 293  |    WORD wReserved[4];
                            20804 ; 294  |    WORD wCreationTime;
                            20805 ; 295  |    WORD wCreationData;
                            20806 ; 296  |    WORD wFirstCluster;
                            20807 ; 297  |    FILE_SIZE Size;
                            20808 ; 298  |    WORD wCurrentCluster;
                            20809 ; 299  |    WORD wPointer;
                            20810 ; 300  |    WORD wRecord;
                            20811 ; 301  |    WORD wRd;
                            20812 ; 302  |    FILE_FLAGS Flags;
                            20813 ; 303  |    FILE_BYTE_CURRENT FcbByteCurrent;
                            20814 ; 304  |    WORD wFcbFlagEndOfCx;
                            20815 ; 305  |} FILE_CONTROL_BLOCK;    
                            20816 ; 306  |
                            20817 ; 307  |typedef struct {
                            20818 ; 308  |    WORD wWord0;
                            20819 ; 309  |    WORD wWord1;
                            20820 ; 310  |    WORD wWord2;
                            20821 ; 311  |    WORD wWord3;
                            20822 ; 312  |} VOLUME_LABEL;
                            20823 ; 313  |
                            20824 ; 314  |typedef struct {
                            20825 ; 315  |    WORD wFATPhysicalBlock1;
                            20826 ; 316  |    WORD wFATPhysicalBlock2;
                            20827 ; 317  |    WORD wFATPhysicalBlock3;
                            20828 ; 318  |    WORD wFATPhysicalBlock4;
                            20829 ; 319  |} FAT_PHYSICAL_BLOCK_LIST;
                            20830 
                            20837 
                            20838 ; 320  |
                            20839 ; 321  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 346

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20840 ; 322  |    WORD wFATSectorInCache;
                            20841 ; 323  |    WORD wLastClusterFree;
                            20842 ; 324  |    WORD wNumberOfUsedClusters;
                            20843 ; 325  |    WORD wNumberOfFreeClusters;
                            20844 ; 326  |    WORD wNumberOfBadClusters;
                            20845 ; 327  |    WORD wNumberOfReservedClusters;
                            20846 ; 328  |    WORD wControl;
                            20847 ; 329  |    WORD * pwSectorCache;
                            20848 ; 330  |    FAT_PHYSICAL_BLOCK_LIST FATPhysicalLocationList;
                            20849 ; 331  |} FAT_TABLE;
                            20850 
                            20857 
                            20858 ; 332  |
                            20859 ; 333  |typedef struct {
                            20860 ; 334  |    WORD wStateMediaTable;
                            20861 ; 335  |    WORD wTypeFs;
                            20862 ; 336  |    WORD wBytesPerSector;
                            20863 ; 337  |    WORD wSectorsPerCluster;
                            20864 ; 338  |    WORD wNumberOfReservedSectors;
                            20865 ; 339  |    WORD wMaximumNumberOfFATs;
                            20866 ; 340  |    WORD wMaxRootDirectoryEntries;
                            20867 ; 341  |    WORD wTotalSectors;
                            20868 ; 342  |    WORD wNumberOfFATSectors;
                            20869 ; 343  |    WORD wNumberOfSectorsPerTrack;
                            20870 ; 344  |    WORD wNumberOfHeads;
                            20871 ; 345  |    WORD wNumberOfHiddenSectorsMSB;
                            20872 ; 346  |    WORD wNumberOfHiddenSectorsLSB;
                            20873 ; 347  |    WORD wTotalSectors32MSB;
                            20874 ; 348  |    WORD wTotalSectors32LSB;
                            20875 ; 349  |    WORD wDriverNumber;
                            20876 ; 350  |    WORD wExtendedBootSignature;
                            20877 ; 351  |    WORD wVolumeIDMSB;
                            20878 ; 352  |    WORD wVolumeIDLSB;
                            20879 ; 353  |    VOLUME_LABEL VolumeLabel;
                            20880 ; 354  |    WORD * pwWriteBuffer;
                            20881 ; 355  |    WORD wPrimaryFATRelativeSector;
                            20882 ; 356  |    WORD wSecondaryFATRelativeSector;
                            20883 ; 357  |    WORD wRootDirectoryRelativeSector;
                            20884 ; 358  |    WORD wFirstSectorNumberDataZone;
                            20885 ; 359  |    WORD wMaxNumberOfFATEntries;
                            20886 ; 360  |    WORD wRootDirectorySizeInSectors;
                            20887 ; 361  |    WORD wDataAreaSizeInSectors;
                            20888 ; 362  |} MEDIA_TABLE;
                            20889 
                            20948 
                            20949 ; 363  |
                            20950 ; 364  |typedef struct {
                            20951 ; 365  |    MEDIA_TABLE * pMediaTable;
                            20952 ; 366  |    DIRECTORY_CONTROL_BLOCK * pDirectoryControlBlock;
                            20953 ; 367  |    FAT_TABLE * pFATTable;
                            20954 ; 368  |} DEVICE_CONTROL_TABLE;
                            20955 ; 369  |    
                            20956 ; 370  |typedef struct {
                            20957 ; 371  |    WORD dwTotalSizeInMegaBytes;        // dwTotalSizeInMegaBytes is limited
                            20958 ; 372  |                                        //  to 2-bytes for compatibility with
                            20959 ; 373  |                                        //  older host drivers.
                            20960 ; 374  |    DWORD dwTotalNumberOfSectors;
                            20961 ; 375  |    DWORD dwTotalNumberOfBytes;
                            20962 ; 376  |    WORD wSectorSizeInBytes;
                            20963 ; 377  |} MEDIA_SIZE;
                            20964 ; 378  |
                            20965 ; 379  |typedef struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 347

M:ADDR CODE           CYCLES LINE SOURCELINE
                            20966 ; 380  |    BOOL    bInstalled;
                            20967 ; 381  |    INT     iPbsSectorOffset;   // from the beginning of the data drive 
                            20968 ; 382  |    DWORD   dwSize;
                            20969 ; 383  |} DATA_DRIVE_PBS_LOC;
                            20970 ; 384  |extern  INT _reentrant FSFileOpen(_packed BYTE *fname,INT attribute, INT DeviceNumber);
                            20971 ; 385  |extern  INT _reentrant FSFastOpen(DWORD Key, INT attribute);
                            20972 ; 386  |extern  INT FSFileDelete(_packed BYTE *fname,INT DeviceNumber);
                            20973 ; 387  |extern  INT FSFileCreate(_packed BYTE *fname,INT DeviceNumber);
                            20974 ; 388  |extern  INT _reentrant FSChangeDir(_packed BYTE *dirname,INT DeviceNumber);
                            20975 ; 389  |extern  INT _reentrant FSCreateDir(_packed BYTE *dirname,INT DeviceNumber);
                            20976 ; 390  |extern  INT _reentrant FSDeleteDir(_packed BYTE *dirname,INT DeviceNumber);
                            20977 ; 391  |extern  INT _reentrant FSFileAppend(_packed BYTE *fname,INT DeviceNumber);
                            20978 ; 392  |extern  INT _reentrant FSFileRead(INT BytestoRead, INT Handle, INT memory_type, INT modulo
                                  , WORD *buffer);
                            20979 ; 393  |extern  INT _reentrant FSFileWrite(INT wNumberBytes, INT Handle, INT memory_type, INT iMod
                                  ulo, WORD *buffer);
                            20980 ; 394  |extern  INT _reentrant FSFileClose(INT Handle);
                            20981 ; 395  |extern  LONG _reentrant FSFileSize(INT HandleNumber);
                            20982 ; 396  |extern  LONG  FSSize(INT DeviceNum, INT TYPE);   
                            20983 ; 397  |extern  INT FSFreeClusters(INT Device);
                            20984 ; 398  |extern  INT BytesPerCluster(INT Device);
                            20985 ; 399  |
                            20986 ; 400  |
                            20987 ; 401  |
                            20988 ; 402  |//extern  INT FSFileCreate(_packed BYTE *pbFileName, BYTE bDevice);
                            20989 ; 403  |//extern  INT FSFileDelete(_packed BYTE *pbFileName, BYTE bDevice);
                            20990 ; 404  |extern  INT FSFileRename(_packed BYTE *pbCurFilename, _packed BYTE *pbNewFilename, BYTE bD
                                  evice);
                            20991 ; 405  |//extern  INT _reentrant FSFileAttribute(_packed BYTE *pbFilename, WORD wAttributes, BYTE 
                                  bDevice);
                            20992 ; 406  |//extern  INT FSFileAppend(_packed BYTE *pbFileName, BYTE bDevice);
                            20993 ; 407  |//extern  INT FSFileOpen(_packed BYTE *pbFileName, WORD wAttributes, BYTE bDevice);
                            20994 ; 408  |//extern  INT FSFileClose(INT bHandle);
                            20995 ; 409  |//extern  INT FSFileRead(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WOR
                                  D *pwBuffer);
                            20996 ; 410  |//extern  INT FSFileWrite(WORD wNumberBytes, BYTE bHandle, WORD wMemSpace, INT iModulo, WO
                                  RD *pwBuffer);
                            20997 ; 411  |extern  INT _reentrant fseek( INT handle , LONG offset, INT iOrigin );
                            20998 ; 412  |extern  INT _reentrant FSFileEof(INT Handle);
                            20999 ; 413  |extern INT _reentrant FSFileAttribute(INT Attributes, _packed BYTE *fname, INT DeviceNumbe
                                  r);
                            21000 ; 414  |extern INT _reentrant FSFileAttributeClear(INT Attributes, _packed BYTE *fname, INT Device
                                  Number);
                            21001 ; 415  |//extern  LONG FSFileSize(INT bHandle);
                            21002 ; 416  |extern _asmfunc INT FSPresent(BYTE bDevice);
                            21003 ; 417  |extern _asmfunc INT FSType(BYTE bDevice);
                            21004 ; 418  |//extern LONG FSSize(WORD wDevice, WORD wReturnType);
                            21005 ; 419  |//extern INT FSChangeDir(_packed BYTE *pbDirName, BYTE bDevice);
                            21006 ; 420  |//extern INT FSCreateDir(_packed BYTE *pbDirName, BYTE bDevice);
                            21007 ; 421  |//extern INT FSDeleteDir(_packed BYTE *pbDirName, BYTE bDevice);
                            21008 ; 422  |extern _asmfunc void SysLoadFATWrite(void);
                            21009 ; 423  |extern _asmfunc INT SysUnLoadFATWrite(void);
                            21010 ; 424  |extern LONG _reentrant ftell(INT iHandle);
                            21011 ; 425  |extern _asmfunc struct FCB * ReadDirectory(int iDevice, int iEntry);
                            21012 ; 426  |
                            21013 ; 427  |#endif
                            21014 
                            21016 
                            21017 ; 24   |#include "playerlib.h"
                            21018 
                            21020 
                            21021 ; 1    |#ifndef _PLAYERLIB_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 348

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21022 ; 2    |#define _PLAYERLIB_H
                            21023 ; 3    |
                            21024 ; 4    |#include "types.h"
                            21025 
                            21027 
                            21028 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            21029 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            21030 ; 3    |//
                            21031 ; 4    |// Filename: types.h
                            21032 ; 5    |// Description: Standard data types
                            21033 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            21034 ; 7    |
                            21035 ; 8    |#ifndef _TYPES_H
                            21036 ; 9    |#define _TYPES_H
                            21037 ; 10   |
                            21038 ; 11   |// TODO:  move this outta here!
                            21039 ; 12   |#if !defined(NOERROR)
                            21040 ; 13   |#define NOERROR 0
                            21041 ; 14   |#define SUCCESS 0
                            21042 ; 15   |#endif 
                            21043 ; 16   |#if !defined(SUCCESS)
                            21044 ; 17   |#define SUCCESS  0
                            21045 ; 18   |#endif
                            21046 ; 19   |#if !defined(ERROR)
                            21047 ; 20   |#define ERROR   -1
                            21048 ; 21   |#endif
                            21049 ; 22   |#if !defined(FALSE)
                            21050 ; 23   |#define FALSE 0
                            21051 ; 24   |#endif
                            21052 ; 25   |#if !defined(TRUE)
                            21053 ; 26   |#define TRUE  1
                            21054 ; 27   |#endif
                            21055 ; 28   |
                            21056 ; 29   |#if !defined(NULL)
                            21057 ; 30   |#define NULL 0
                            21058 ; 31   |#endif
                            21059 ; 32   |
                            21060 ; 33   |#define MAX_INT     0x7FFFFF
                            21061 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            21062 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            21063 ; 36   |#define MAX_ULONG   (-1) 
                            21064 ; 37   |
                            21065 ; 38   |#define WORD_SIZE   24              // word size in bits
                            21066 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            21067 ; 40   |
                            21068 ; 41   |
                            21069 ; 42   |#define BYTE    unsigned char       // btVarName
                            21070 ; 43   |#define CHAR    signed char         // cVarName
                            21071 ; 44   |#define USHORT  unsigned short      // usVarName
                            21072 ; 45   |#define SHORT   unsigned short      // sVarName
                            21073 ; 46   |#define WORD    unsigned int        // wVarName
                            21074 ; 47   |#define INT     signed int          // iVarName
                            21075 ; 48   |#define DWORD   unsigned long       // dwVarName
                            21076 ; 49   |#define LONG    signed long         // lVarName
                            21077 ; 50   |#define BOOL    unsigned int        // bVarName
                            21078 ; 51   |#define FRACT   _fract              // frVarName
                            21079 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            21080 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            21081 ; 54   |#define FLOAT   float               // fVarName
                            21082 ; 55   |#define DBL     double              // dVarName
                            21083 ; 56   |#define ENUM    enum                // eVarName
                            21084 ; 57   |#define CMX     _complex            // cmxVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 349

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21085 ; 58   |typedef WORD UCS3;                   // 
                            21086 ; 59   |
                            21087 ; 60   |#define UINT16  unsigned short
                            21088 ; 61   |#define UINT8   unsigned char   
                            21089 ; 62   |#define UINT32  unsigned long
                            21090 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            21091 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            21092 ; 65   |#define WCHAR   UINT16
                            21093 ; 66   |
                            21094 ; 67   |//UINT128 is 16 bytes or 6 words
                            21095 ; 68   |typedef struct UINT128_3500 {   
                            21096 ; 69   |    int val[6];     
                            21097 ; 70   |} UINT128_3500;
                            21098 ; 71   |
                            21099 ; 72   |#define UINT128   UINT128_3500
                            21100 ; 73   |
                            21101 ; 74   |// Little endian word packed byte strings:   
                            21102 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            21103 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            21104 ; 77   |// Little endian word packed byte strings:   
                            21105 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            21106 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            21107 ; 80   |
                            21108 ; 81   |// Declare Memory Spaces To Use When Coding
                            21109 ; 82   |// A. Sector Buffers
                            21110 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            21111 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            21112 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            21113 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            21114 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            21115 ; 88   |// B. Media DDI Memory
                            21116 ; 89   |#define MEDIA_DDI_MEM _Y
                            21117 ; 90   |
                            21118 ; 91   |
                            21119 ; 92   |
                            21120 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            21121 ; 94   |// Examples of circular pointers:
                            21122 ; 95   |//    INT CIRC cpiVarName
                            21123 ; 96   |//    DWORD CIRC cpdwVarName
                            21124 ; 97   |
                            21125 ; 98   |#define RETCODE INT                 // rcVarName
                            21126 ; 99   |
                            21127 ; 100  |// generic bitfield structure
                            21128 ; 101  |struct Bitfield {
                            21129 ; 102  |    unsigned int B0  :1;
                            21130 ; 103  |    unsigned int B1  :1;
                            21131 ; 104  |    unsigned int B2  :1;
                            21132 ; 105  |    unsigned int B3  :1;
                            21133 ; 106  |    unsigned int B4  :1;
                            21134 ; 107  |    unsigned int B5  :1;
                            21135 ; 108  |    unsigned int B6  :1;
                            21136 ; 109  |    unsigned int B7  :1;
                            21137 ; 110  |    unsigned int B8  :1;
                            21138 ; 111  |    unsigned int B9  :1;
                            21139 ; 112  |    unsigned int B10 :1;
                            21140 ; 113  |    unsigned int B11 :1;
                            21141 ; 114  |    unsigned int B12 :1;
                            21142 ; 115  |    unsigned int B13 :1;
                            21143 ; 116  |    unsigned int B14 :1;
                            21144 ; 117  |    unsigned int B15 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 350

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21145 ; 118  |    unsigned int B16 :1;
                            21146 ; 119  |    unsigned int B17 :1;
                            21147 ; 120  |    unsigned int B18 :1;
                            21148 ; 121  |    unsigned int B19 :1;
                            21149 ; 122  |    unsigned int B20 :1;
                            21150 ; 123  |    unsigned int B21 :1;
                            21151 ; 124  |    unsigned int B22 :1;
                            21152 ; 125  |    unsigned int B23 :1;
                            21153 ; 126  |};
                            21154 ; 127  |
                            21155 ; 128  |union BitInt {
                            21156 ; 129  |        struct Bitfield B;
                            21157 ; 130  |        int        I;
                            21158 ; 131  |};
                            21159 ; 132  |
                            21160 ; 133  |#define MAX_MSG_LENGTH 10
                            21161 ; 134  |struct CMessage
                            21162 ; 135  |{
                            21163 ; 136  |        unsigned int m_uLength;
                            21164 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            21165 ; 138  |};
                            21166 ; 139  |
                            21167 ; 140  |typedef struct {
                            21168 ; 141  |    WORD m_wLength;
                            21169 ; 142  |    WORD m_wMessage;
                            21170 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            21171 ; 144  |} Message;
                            21172 ; 145  |
                            21173 ; 146  |struct MessageQueueDescriptor
                            21174 ; 147  |{
                            21175 ; 148  |        int *m_pBase;
                            21176 ; 149  |        int m_iModulo;
                            21177 ; 150  |        int m_iSize;
                            21178 ; 151  |        int *m_pHead;
                            21179 ; 152  |        int *m_pTail;
                            21180 ; 153  |};
                            21181 ; 154  |
                            21182 ; 155  |struct ModuleEntry
                            21183 ; 156  |{
                            21184 ; 157  |    int m_iSignaledEventMask;
                            21185 ; 158  |    int m_iWaitEventMask;
                            21186 ; 159  |    int m_iResourceOfCode;
                            21187 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            21188 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            21189 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            21190 ; 163  |    int m_uTimeOutHigh;
                            21191 ; 164  |    int m_uTimeOutLow;
                            21192 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            21193 ; 166  |};
                            21194 ; 167  |
                            21195 ; 168  |union WaitMask{
                            21196 ; 169  |    struct B{
                            21197 ; 170  |        unsigned int m_bNone     :1;
                            21198 ; 171  |        unsigned int m_bMessage  :1;
                            21199 ; 172  |        unsigned int m_bTimer    :1;
                            21200 ; 173  |        unsigned int m_bButton   :1;
                            21201 ; 174  |    } B;
                            21202 ; 175  |    int I;
                            21203 ; 176  |} ;
                            21204 ; 177  |
                            21205 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 351

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21206 ; 179  |struct Button {
                            21207 ; 180  |        WORD wButtonEvent;
                            21208 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            21209 ; 182  |};
                            21210 ; 183  |
                            21211 ; 184  |struct Message {
                            21212 ; 185  |        WORD wMsgLength;
                            21213 ; 186  |        WORD wMsgCommand;
                            21214 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            21215 ; 188  |};
                            21216 ; 189  |
                            21217 ; 190  |union EventTypes {
                            21218 ; 191  |        struct CMessage msg;
                            21219 ; 192  |        struct Button Button ;
                            21220 ; 193  |        struct Message Message;
                            21221 ; 194  |};
                            21222 ; 195  |
                            21223 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            21224 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            21225 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            21226 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            21227 ; 200  |
                            21228 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            21229 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            21230 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            21231 ; 204  |
                            21232 ; 205  |#if DEBUG
                            21233 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            21234 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            21235 ; 208  |#else 
                            21236 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            21237 ; 210  |#define DebugBuildAssert(x)    
                            21238 ; 211  |#endif
                            21239 ; 212  |
                            21240 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            21241 ; 214  |//  #pragma asm
                            21242 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            21243 ; 216  |//  #pragma endasm
                            21244 ; 217  |
                            21245 ; 218  |
                            21246 ; 219  |#ifdef COLOR_262K
                            21247 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            21248 ; 221  |#elif defined(COLOR_65K)
                            21249 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            21250 ; 223  |#else
                            21251 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            21252 ; 225  |#endif
                            21253 ; 226  |    
                            21254 ; 227  |#endif // #ifndef _TYPES_H
                            21255 
                            21257 
                            21258 ; 5    |#include "playlist.h"
                            21259 
                            21261 
                            21262 ; 1    |#ifndef PLAYLIST_H
                            21263 ; 2    |#define PLAYLIST_H
                            21264 ; 3    |
                            21265 ; 4    |#include "types.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 352

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21266 
                            21268 
                            21269 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            21270 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            21271 ; 3    |//
                            21272 ; 4    |// Filename: types.h
                            21273 ; 5    |// Description: Standard data types
                            21274 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            21275 ; 7    |
                            21276 ; 8    |#ifndef _TYPES_H
                            21277 ; 9    |#define _TYPES_H
                            21278 ; 10   |
                            21279 ; 11   |// TODO:  move this outta here!
                            21280 ; 12   |#if !defined(NOERROR)
                            21281 ; 13   |#define NOERROR 0
                            21282 ; 14   |#define SUCCESS 0
                            21283 ; 15   |#endif 
                            21284 ; 16   |#if !defined(SUCCESS)
                            21285 ; 17   |#define SUCCESS  0
                            21286 ; 18   |#endif
                            21287 ; 19   |#if !defined(ERROR)
                            21288 ; 20   |#define ERROR   -1
                            21289 ; 21   |#endif
                            21290 ; 22   |#if !defined(FALSE)
                            21291 ; 23   |#define FALSE 0
                            21292 ; 24   |#endif
                            21293 ; 25   |#if !defined(TRUE)
                            21294 ; 26   |#define TRUE  1
                            21295 ; 27   |#endif
                            21296 ; 28   |
                            21297 ; 29   |#if !defined(NULL)
                            21298 ; 30   |#define NULL 0
                            21299 ; 31   |#endif
                            21300 ; 32   |
                            21301 ; 33   |#define MAX_INT     0x7FFFFF
                            21302 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            21303 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            21304 ; 36   |#define MAX_ULONG   (-1) 
                            21305 ; 37   |
                            21306 ; 38   |#define WORD_SIZE   24              // word size in bits
                            21307 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            21308 ; 40   |
                            21309 ; 41   |
                            21310 ; 42   |#define BYTE    unsigned char       // btVarName
                            21311 ; 43   |#define CHAR    signed char         // cVarName
                            21312 ; 44   |#define USHORT  unsigned short      // usVarName
                            21313 ; 45   |#define SHORT   unsigned short      // sVarName
                            21314 ; 46   |#define WORD    unsigned int        // wVarName
                            21315 ; 47   |#define INT     signed int          // iVarName
                            21316 ; 48   |#define DWORD   unsigned long       // dwVarName
                            21317 ; 49   |#define LONG    signed long         // lVarName
                            21318 ; 50   |#define BOOL    unsigned int        // bVarName
                            21319 ; 51   |#define FRACT   _fract              // frVarName
                            21320 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            21321 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            21322 ; 54   |#define FLOAT   float               // fVarName
                            21323 ; 55   |#define DBL     double              // dVarName
                            21324 ; 56   |#define ENUM    enum                // eVarName
                            21325 ; 57   |#define CMX     _complex            // cmxVarName
                            21326 ; 58   |typedef WORD UCS3;                   // 
                            21327 ; 59   |
                            21328 ; 60   |#define UINT16  unsigned short
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 353

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21329 ; 61   |#define UINT8   unsigned char   
                            21330 ; 62   |#define UINT32  unsigned long
                            21331 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            21332 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            21333 ; 65   |#define WCHAR   UINT16
                            21334 ; 66   |
                            21335 ; 67   |//UINT128 is 16 bytes or 6 words
                            21336 ; 68   |typedef struct UINT128_3500 {   
                            21337 ; 69   |    int val[6];     
                            21338 ; 70   |} UINT128_3500;
                            21339 ; 71   |
                            21340 ; 72   |#define UINT128   UINT128_3500
                            21341 ; 73   |
                            21342 ; 74   |// Little endian word packed byte strings:   
                            21343 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            21344 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            21345 ; 77   |// Little endian word packed byte strings:   
                            21346 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            21347 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            21348 ; 80   |
                            21349 ; 81   |// Declare Memory Spaces To Use When Coding
                            21350 ; 82   |// A. Sector Buffers
                            21351 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            21352 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            21353 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            21354 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            21355 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            21356 ; 88   |// B. Media DDI Memory
                            21357 ; 89   |#define MEDIA_DDI_MEM _Y
                            21358 ; 90   |
                            21359 ; 91   |
                            21360 ; 92   |
                            21361 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            21362 ; 94   |// Examples of circular pointers:
                            21363 ; 95   |//    INT CIRC cpiVarName
                            21364 ; 96   |//    DWORD CIRC cpdwVarName
                            21365 ; 97   |
                            21366 ; 98   |#define RETCODE INT                 // rcVarName
                            21367 ; 99   |
                            21368 ; 100  |// generic bitfield structure
                            21369 ; 101  |struct Bitfield {
                            21370 ; 102  |    unsigned int B0  :1;
                            21371 ; 103  |    unsigned int B1  :1;
                            21372 ; 104  |    unsigned int B2  :1;
                            21373 ; 105  |    unsigned int B3  :1;
                            21374 ; 106  |    unsigned int B4  :1;
                            21375 ; 107  |    unsigned int B5  :1;
                            21376 ; 108  |    unsigned int B6  :1;
                            21377 ; 109  |    unsigned int B7  :1;
                            21378 ; 110  |    unsigned int B8  :1;
                            21379 ; 111  |    unsigned int B9  :1;
                            21380 ; 112  |    unsigned int B10 :1;
                            21381 ; 113  |    unsigned int B11 :1;
                            21382 ; 114  |    unsigned int B12 :1;
                            21383 ; 115  |    unsigned int B13 :1;
                            21384 ; 116  |    unsigned int B14 :1;
                            21385 ; 117  |    unsigned int B15 :1;
                            21386 ; 118  |    unsigned int B16 :1;
                            21387 ; 119  |    unsigned int B17 :1;
                            21388 ; 120  |    unsigned int B18 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 354

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21389 ; 121  |    unsigned int B19 :1;
                            21390 ; 122  |    unsigned int B20 :1;
                            21391 ; 123  |    unsigned int B21 :1;
                            21392 ; 124  |    unsigned int B22 :1;
                            21393 ; 125  |    unsigned int B23 :1;
                            21394 ; 126  |};
                            21395 ; 127  |
                            21396 ; 128  |union BitInt {
                            21397 ; 129  |        struct Bitfield B;
                            21398 ; 130  |        int        I;
                            21399 ; 131  |};
                            21400 ; 132  |
                            21401 ; 133  |#define MAX_MSG_LENGTH 10
                            21402 ; 134  |struct CMessage
                            21403 ; 135  |{
                            21404 ; 136  |        unsigned int m_uLength;
                            21405 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            21406 ; 138  |};
                            21407 ; 139  |
                            21408 ; 140  |typedef struct {
                            21409 ; 141  |    WORD m_wLength;
                            21410 ; 142  |    WORD m_wMessage;
                            21411 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            21412 ; 144  |} Message;
                            21413 ; 145  |
                            21414 ; 146  |struct MessageQueueDescriptor
                            21415 ; 147  |{
                            21416 ; 148  |        int *m_pBase;
                            21417 ; 149  |        int m_iModulo;
                            21418 ; 150  |        int m_iSize;
                            21419 ; 151  |        int *m_pHead;
                            21420 ; 152  |        int *m_pTail;
                            21421 ; 153  |};
                            21422 ; 154  |
                            21423 ; 155  |struct ModuleEntry
                            21424 ; 156  |{
                            21425 ; 157  |    int m_iSignaledEventMask;
                            21426 ; 158  |    int m_iWaitEventMask;
                            21427 ; 159  |    int m_iResourceOfCode;
                            21428 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            21429 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            21430 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            21431 ; 163  |    int m_uTimeOutHigh;
                            21432 ; 164  |    int m_uTimeOutLow;
                            21433 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            21434 ; 166  |};
                            21435 ; 167  |
                            21436 ; 168  |union WaitMask{
                            21437 ; 169  |    struct B{
                            21438 ; 170  |        unsigned int m_bNone     :1;
                            21439 ; 171  |        unsigned int m_bMessage  :1;
                            21440 ; 172  |        unsigned int m_bTimer    :1;
                            21441 ; 173  |        unsigned int m_bButton   :1;
                            21442 ; 174  |    } B;
                            21443 ; 175  |    int I;
                            21444 ; 176  |} ;
                            21445 ; 177  |
                            21446 ; 178  |
                            21447 ; 179  |struct Button {
                            21448 ; 180  |        WORD wButtonEvent;
                            21449 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 355

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21450 ; 182  |};
                            21451 ; 183  |
                            21452 ; 184  |struct Message {
                            21453 ; 185  |        WORD wMsgLength;
                            21454 ; 186  |        WORD wMsgCommand;
                            21455 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            21456 ; 188  |};
                            21457 ; 189  |
                            21458 ; 190  |union EventTypes {
                            21459 ; 191  |        struct CMessage msg;
                            21460 ; 192  |        struct Button Button ;
                            21461 ; 193  |        struct Message Message;
                            21462 ; 194  |};
                            21463 ; 195  |
                            21464 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            21465 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            21466 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            21467 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            21468 ; 200  |
                            21469 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            21470 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            21471 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            21472 ; 204  |
                            21473 ; 205  |#if DEBUG
                            21474 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            21475 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            21476 ; 208  |#else 
                            21477 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            21478 ; 210  |#define DebugBuildAssert(x)    
                            21479 ; 211  |#endif
                            21480 ; 212  |
                            21481 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            21482 ; 214  |//  #pragma asm
                            21483 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            21484 ; 216  |//  #pragma endasm
                            21485 ; 217  |
                            21486 ; 218  |
                            21487 ; 219  |#ifdef COLOR_262K
                            21488 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            21489 ; 221  |#elif defined(COLOR_65K)
                            21490 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            21491 ; 223  |#else
                            21492 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            21493 ; 225  |#endif
                            21494 ; 226  |    
                            21495 ; 227  |#endif // #ifndef _TYPES_H
                            21496 
                            21498 
                            21499 ; 5    |
                            21500 ; 6    |typedef struct {
                            21501 ; 7    |    WORD    m_wTrack;                       
                            21502 ; 8    |    WORD    m_wDeviceID;
                            21503 ; 9    |    WORD    m_wBufferLength;            //this is in BYTES, not WORDS!
                            21504 ; 10   |    _packed BYTE *m_pFilename;
                            21505 ; 11   |} SONGFILEINFO;
                            21506 ; 12   |
                            21507 ; 13   |#define PLAYLIST_SUCCESS                                0
                            21508 ; 14   |#define PLAYLIST_FILE_ERROR                             1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 356

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21509 ; 15   |#define PLAYLIST_END_OF_LIST                    2
                            21510 ; 16   |#define PLAYLIST_TRACK_NOT_FOUND                3
                            21511 ; 17   |#define PLAYLIST_DIR_NOT_EMPTY          4 
                            21512 ; 18   |#define PLAYLIST_REBUILD                5
                            21513 ; 19   |#define PLAYLIST_LAST_RETCODE                   5               //The value should always 
                                  be the same as the last RETCODE
                            21514 ; 20   |
                            21515 ; 21   |
                            21516 ; 22   |#ifdef  USE_PLAYLIST1
                            21517 ; 23   |RETCODE ChangeDIRtoFileEntryDir(struct FileEntry *pCurrentEntry, _packed BYTE * buffer);
                            21518 ; 24   |#endif
                            21519 ; 25   |RETCODE _reentrant Playlist_LFNGetFileName(int,int,UCS3*);                      //UCS3 is 
                                  actually typdef WORD
                            21520 
                            21522 
                            21523 ; 26   |RETCODE _reentrant Playlist_MarkCurrentSongPlayed(int,int,int*);
                            21524 ; 27   |RETCODE _reentrant Playlist_GetCurrentSongFileInfo(int, int, int*);
                            21525 ; 28   |RETCODE _reentrant Playlist_GetNextSongFileInfo(int, int , int*);
                            21526 ; 29   |RETCODE _reentrant Playlist_GetPreviousSongFileInfo(int,int,int*);
                            21527 ; 30   |#ifdef USE_PLAYLIST1
                            21528 ; 31   |_reentrant INT Playlist_LocateEntryFromName(INT,INT,INT*);
                            21529 ; 32   |#endif
                            21530 ; 33   |
                            21531 ; 34   |#endif 
                            21532 
                            21534 
                            21535 ; 6    |
                            21536 ; 7    |#define DECODER_STATE_STOP          0
                            21537 ; 8    |#define DECODER_STATE_PLAY          1
                            21538 ; 9    |#define DECODER_STATE_PAUSE         2
                            21539 ; 10   |#define DECODER_STATE_TOGGLE    4
                            21540 ; 11   |
                            21541 ; 12   |#define PLAYERLIB_SUCCESS       0
                            21542 ; 13   |#define PLAYERLIB_BAD_FILE      1
                            21543 ; 14   |#define PLAYERLIB_ERROR         2
                            21544 ; 15   |#define PLAYERLIB_END_OF_LIST   3
                            21545 ; 16   |
                            21546 ; 17   |//These are in the DecoderSR/DecoderCSR
                            21547 ; 18   |#define DECODER_PAUSED          1<<5
                            21548 ; 19   |#define DECODER_STOPPED         1<<6
                            21549 ; 20   |#define DECODER_SYNCED          1<<10
                            21550 ; 21   |#define DECODER_PLAYING         1<<12
                            21551 ; 22   |#define DECODER_SONG_INFO       1<<15
                            21552 ; 23   |#define DECODER_FILE_IS_OPEN    1<<16
                            21553 ; 24   |#define DECODER_A_SET           1<<18
                            21554 ; 25   |#define DECODER_B_SET           1<<19
                            21555 ; 26   |#define DECODER_BAD_FILE        1<<21
                            21556 ; 27   |#define DECODER_LOOKING_FOR_SYNC 1<<22
                            21557 ; 28   |
                            21558 ; 29   |//PrevSong Message Parameters
                            21559 ; 30   |#define PREVSONG_STOP        0             //PrevSong + Stopped
                            21560 ; 31   |#define PREVSONG_PLAY        1<<0          //PrevSong + Play
                            21561 ; 32   |#define PREVSONG_RWND        1<<1          //PrevSong + Rwnd
                            21562 ; 33   |//NextSong Message Parameters
                            21563 ; 34   |#define NEXTSONG_STOP        0             //NextSong + Stopped
                            21564 ; 35   |#define NEXTSONG_PLAY_EOF    1             //NextSong + Play + EOF reached
                            21565 ; 36   |#define NEXTSONG_PLAY_BUTTON 3             //NextSong + Play + BUTTON pressed
                            21566 ; 37   |#define NEXTSONG_FFWD        4             //NextSong + Ffwd
                            21567 ; 38   |#define NEXTSONG_DELETE_MENU 5             //NextSong via delete menu
                            21568 ; 39   |//CurrentSong Message Parameters
                            21569 ; 40   |#define CURRENTSONG_DELETE_MENU 1          //CurrentSong via delete menu
                            21570 ; 41   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 357

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21571 ; 42   |#ifdef USE_PLAYLIST3
                            21572 ; 43   |extern DWORD    g_CurrentSongFastkey;
                            21573 ; 44   |#endif  // USE_PLAYLIST3
                            21574 ; 45   |
                            21575 ; 46   |#ifdef USE_PLAYLIST5
                            21576 ; 47   |extern long g_CurrentFastKey;
                            21577 ; 48   |#endif //USE_PLAYLIST5
                            21578 ; 49   |RETCODE _reentrant PlayerLib_SetState (int iState,int bWait,int*);  
                            21579 ; 50   |RETCODE _reentrant PlayerLib_FastForward (int bPlayDuring,int,int*);
                            21580 ; 51   |RETCODE _reentrant PlayerLib_Rewind(int bPlayDuring,int,int*);
                            21581 ; 52   |RETCODE _reentrant PlayerLib_SetSongName(int bStartPlaying, int, SONGFILEINFO*);
                            21582 
                            21591 
                            21592 ; 53   |RETCODE _reentrant PlayerLib_GetCurrentSong(WORD wMode,int ignored1,int*ignored2);
                            21593 ; 54   |RETCODE _reentrant PlayerLib_SkipToNextSong(WORD,WORD,int*);
                            21594 ; 55   |RETCODE _reentrant PlayerLib_SkipToPreviousSong(WORD,WORD,int*);
                            21595 ; 56   |RETCODE _reentrant PlayerLib_EnablePlaylist(int bTrueFalse,int,int*);  
                            21596 ; 57   |RETCODE _reentrant PlayerLib_GetMetaData(WORD wMode,int ignored1,int*ignored2);
                            21597 ; 58   |DWORD _reentrant PlayerLib_GetSongPosition(void);
                            21598 ; 59   |RETCODE _reentrant PlayerLib_SetSongPosition(DWORD dwSongPos);
                            21599 ; 60   |////////////////////Bookmarking functions///////////////////////////////
                            21600 ; 61   |RETCODE _reentrant PlayerLib_ResetBookmark(int iCurrentPlayset, int ignored, int* pPtr);
                            21601 ; 62   |RETCODE _reentrant PlayerLib_SetBookmark(int iCurrentPlayset, int iTracknum,int* pPtr);
                            21602 ; 63   |RETCODE _reentrant PlayerLib_GotoTrack(int iTracknum, int ignored, int* ptr);
                            21603 ; 64   |RETCODE _reentrant PlayerLib_GetBookmarkSongInfo(int iCurrentPlayset, int ignored2, int* p
                                  Ptr);
                            21604 ; 65   |#ifdef USE_PLAYLIST3
                            21605 ; 66   |RETCODE _reentrant PlayerLib_GetCurrentSong_ML(WORD wMode,int ignored1,int*ignored2);
                            21606 ; 67   |#endif // #ifdef USE_PLAYLIST3
                            21607 ; 68   |
                            21608 ; 69   |#endif 
                            21609 
                            21611 
                            21612 ; 25   |#include "sysmem.h"
                            21613 
                            21615 
                            21616 ; 1    |//;******************************************************************************
                            21617 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                            21618 ; 3    |//; File: sysmem.h
                            21619 ; 4    |//; ST System Memory Externs
                            21620 ; 5    |//;******************************************************************************
                            21621 ; 6    |
                            21622 ; 7    |#ifndef SYSMEM_XREF_C
                            21623 ; 8    |#define SYSMEM_XREF_C
                            21624 ; 9    |
                            21625 ; 10   |// Variables in X
                            21626 ; 11   |extern unsigned int _X g_wDecoderCSR;
                            21627 ; 12   |extern unsigned int _X g_wDecoderSR;
                            21628 ; 13   |extern unsigned int _X g_wDecoderCSR2;  // DECODE2EOF
                            21629 ; 14   |extern unsigned int _X g_wEncoderSR;
                            21630 ; 15   |extern unsigned int _X g_wEncoderCSR;
                            21631 ; 16   |extern unsigned int _X g_wRecStartTimeHigh;
                            21632 ; 17   |extern unsigned int _X g_wRecStartTimeLow;
                            21633 ; 18   |extern unsigned int _X g_wSysError;
                            21634 ; 19   |#ifdef TRACEBUF_EN
                            21635 ; 20   |extern unsigned int _X g_wTraceBuffer; //Disabled by default.   
                            21636 ; 21   |extern unsigned int _X g_wTracePointer;
                            21637 ; 22   |#endif
                            21638 ; 23   |extern unsigned int _X g_wUserScratchX[];
                            21639 ; 24   |extern unsigned int _X g_wNextVoiceNumValue;
                            21640 ; 25   |extern unsigned int _X g_wEncAdpcmSave_r7;
                            21641 ; 26   |extern unsigned int _X g_wEncAdpcmSave_m7;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 358

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21642 ; 27   |extern unsigned int _X g_wEncModuleState;
                            21643 ; 28   |extern unsigned int _X g_wEncoderIsrSR;
                            21644 ; 29   |extern unsigned int _X g_bAudibleNeedFileSize;          // 10/12/04 mmiu - Added for AA fi
                                  le navigation
                            21645 ; 30   |extern unsigned int _X g_bAudiblePlayThrough;           // 11/1/04 mmiu - Added for file p
                                  osition play-through indicator
                            21646 ; 31   |extern unsigned int _X g_wSongStartOffsetHigh;          // 11/1/04 mmiu - Added until conf
                                  irmed we can use g_wSongByteTotalConsumedHigh/Low
                            21647 ; 32   |extern unsigned int _X g_wSongStartOffsetLow;
                            21648 ; 33   |
                            21649 ; 34   |// Variables in Y
                            21650 ; 35   |extern int          _Y g_VolumeBias;
                            21651 ; 36   |extern unsigned int _Y g_wCurrentRoutinePtr;
                            21652 ; 37   |extern unsigned int _Y g_wSystemFileHandle;
                            21653 ; 38   |extern unsigned int _Y g_wSongByteTotalHigh;
                            21654 ; 39   |extern unsigned int _Y g_wSongByteTotalLow; 
                            21655 ; 40   |extern unsigned int _Y g_wSongByteLengthHigh;
                            21656 ; 41   |extern unsigned int _Y g_wSongByteLengthLow;
                            21657 ; 42   |extern unsigned int _Y g_wInvSampleRate;
                            21658 ; 43   |extern unsigned int _Y g_wCurrentSongBad;
                            21659 ; 44   |extern unsigned int _Y g_iSongType;
                            21660 ; 45   |extern _packed BYTE _Y g_CurrentSongName[];
                            21661 ; 46   |extern unsigned int _Y g_wCurrentDirDevId;
                            21662 ; 47   |extern unsigned int _Y g_wSongInvBitRatePtr;
                            21663 ; 48   |extern unsigned int _Y g_wUserScratchXDescriptor;
                            21664 ; 49   |extern unsigned int _Y g_wUserScratchYDescriptor;
                            21665 ; 50   |extern _packed BYTE _Y g_EncFileNameString[];
                            21666 ; 51   |extern unsigned int _Y g_wEncFileHandle;
                            21667 ; 52   |extern unsigned int _Y g_wEncAdpcmOvlSave_sp;
                            21668 ; 53   |extern unsigned int _Y g_wRootDirectory;
                            21669 ; 54   |extern unsigned int _Y g_wUserScratchY[];
                            21670 ; 55   |extern unsigned int _Y g_wPrevInvBitRatePtr;
                            21671 ; 56   |
                            21672 ; 57   |#endif  // SYSMEM_XREF_C
                            21673 
                            21675 
                            21676 ; 26   |
                            21677 ; 27   |extern void SaveUserTime(); //Stmp00008949
                            21678 ; 28   |
                            21679 ; 29   |// Local function prototypes
                            21680 ; 30   |_reentrant void SetTime(int iHours,int iMinutes,int iSeconds);
                            21681 ; 31   |_reentrant void DisplayChangeTime(int iCursorPosition ,int iPreviousCursorPosition,int iIn
                                  vert, int iHours,int iMinutes,int iSeconds, int l_iTimeFormat);
                            21682 ; 32   |_reentrant void DisplaySaveChangesTime(int iSaveOption);
                            21683 ; 33   |_reentrant void DisplayTimeFirst(void);
                            21684 ; 34   |_reentrant void PrintStringSetTime(int iMode,int iXpos,int iYpos,int iString);            
                                             
                            21685 ; 35   |_reentrant void PrintNumberSetTime(int iMode,int iXpos,int iYpos,int iNumber,int iWidth,in
                                  t iFiller);
                            21686 ; 36   |
                            21687 ; 37   |
                            21688 ; 38   |
                            21689 ; 39   |
                            21690 ; 40   |/****  Needs to be saved to user settings *****/
                            21691 ; 41   |int g_iTimeFormat;      // should be current time format from saved user settings, g_iTime
                                  Format is saved, l_iTimeFormat 
                            21692 
                            21712 
                            21713 ; 42   |                                        // is used to allow     user to change TimeFormat 
                                  but is not saved until user confirms                                             
                            21714 ; 43   |
                            21715 ; 44   |extern TimeDateValues_type g_iCurrentRTCValues;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 359

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21716 ; 45   |
                            21717 ; 46   |unsigned long g_Usertime;
                            21718 ; 47   |long g_UserTimeoffset;
                            21719 ; 48   |/////////////////////////////////////////////////////////////////////////////////////////
                            21720 ; 49   |//
                            21721 ; 50   |//>  Name:          int _reentrant SetTimeMenu(int a, int b, int *pPtr)
                            21722 ; 51   |//
                            21723 ; 52   |//   Type:          Function (set time menu entry point)
                            21724 ; 53   |//
                            21725 ; 54   |//   Description:   This function is the entry point for the set time menu manager.
                            21726 ; 55   |//
                            21727 ; 56   |//   Inputs:        None
                            21728 ; 57   |//
                            21729 ; 58   |//   Outputs:       Menu to enter upon exiting set time menu
                            21730 ; 59   |//                      if PH_MENU: return to Music menu
                            21731 ; 60   |//                      else : return to Settings menu selection
                            21732 ; 61   |//
                            21733 ; 62   |/*   Notes:         
                            21734 ; 63   |*/
                            21735 ; 64   |//<
                            21736 ; 65   |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                            21737 ; 66   |int _reentrant SetTimeMenu(int a, int b, int *pPtr)
                            21738 ; 67   |{
                            21739 
P:0000                      21740         org     p,".ptextsettimemenu":
                            21747 FSetTimeMenu:
P:0000 055F7C         2    221748         movec   ssh,y:(r7)+
P:0001 3F1400         2    421751         move    #20,n7
P:0002 000000         2    621752         nop
P:0003 204F00         2    821753         move    (r7)+n7
                            21764 
                            21765 ; 68   |        BOOL bDone = FALSE;
                            21766 
P:0004 77F400 FFFFED  3   1121768         move    #-19,n7
P:0006 000000         2   1321769         nop
P:0007 586F00         4   1721770         move    a0,y:(r7+n7)
                            21830 
                            21831 ; 69   |        BOOL bSendToPlayerStateMachine;
                            21832 ; 70   |        union DisplayHints DisplayHint;
                            21833 ; 71   |
                            21834 ; 72   |        INT l_iTimeFormat = g_iTimeFormat; // use local temp TimeFormat so format can have
                                   option to be saved
                            21835 
P:0008 58F000 rrrrrr  3   2021837         move    y:Fg_iTimeFormat,a0
P:000A 77F400 FFFFEE  3   2321838         move    #-18,n7
P:000C 000000         2   2521839         nop
P:000D 586F00         4   2921840         move    a0,y:(r7+n7)
P:000E 77F400 FFFFEF  3   3221841         move    #-17,n7
P:0010 000000         2   3421842         nop
P:0011 586F00         4   3821843         move    a0,y:(r7+n7)
                            21853 
                            21854 ; 73   |
                            21855 ; 74   |        INT iHours;
                            21856 ; 75   |        INT iMinutes;
                            21857 ; 76   |    INT iSeconds;
                            21858 ; 77   |
                            21859 ; 78   |    INT bBlink = FALSE;
                            21860 
P:0012 2C0000         2   4021862         move    #0,a1
P:0013 77F400 FFFFF0  3   4321864         move    #-16,n7
P:0015 000000         2   4521865         nop
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 360

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0016 5C6F00         4   4921866         move    a1,y:(r7+n7)
                            21871 
                            21872 ; 79   |    INT bTimeModify_mode = FALSE;
                            21873 
P:0017 200013         2   5121875         clr     a   
P:0018 77F400 FFFFF1  3   5421877         move    #-15,n7
P:001A 000000         2   5621878         nop
P:001B 5E6F00         4   6021879         move    a,y:(r7+n7)
                            21884 
                            21885 ; 80   |        INT bTimeModified = FALSE; // Stmp00008949
                            21886 
P:001C 260000         2   6221888         move    #0,y0
P:001D 77F400 FFFFF2  3   6521890         move    #-14,n7
P:001F 000000         2   6721891         nop
P:0020 4E6F00         4   7121892         move    y0,y:(r7+n7)
                            21898 
                            21899 ; 81   |    INT bSaveChanges_mode = FALSE;
                            21900 
P:0021 77F400 FFFFF3  3   7421902         move    #-13,n7
P:0023 000000         2   7621903         nop
P:0024 4E6F00         4   8021904         move    y0,y:(r7+n7)
                            21913 
                            21914 ; 82   |
                            21915 ; 83   |    INT iEvent;
                            21916 ; 84   |    INT iNextMenu = MENU_SET_TIME;
                            21917 ; 85   |    INT iCursorPosition = TIMECANCEL_SELECT;
                            21918 
P:0025 47F400 000004  3   8321920         move    #>4,y1
P:0027 77F400 FFFFF4  3   8621922         move    #-12,n7
P:0029 000000         2   8821923         nop
P:002A 4F6F00         4   9221924         move    y1,y:(r7+n7)
                            21931 
                            21932 ; 86   |    INT iPreviousCursorPosition = TIMEOK_SELECT;
                            21933 ; 87   |    INT iSaveChangesSelected = SETTIME_CANCEL;
                            21934 
P:002B 44F400 000002  3   9521936         move    #>2,x0
P:002D 77F400 FFFFF5  3   9821938         move    #-11,n7
P:002F 000000         2  10021939         nop
P:0030 4C6F00         4  10421940         move    x0,y:(r7+n7)
                            21945 
                            21946 ; 88   |    INT iCancelConfirm = FALSE;
                            21947 
P:0031 250000         2  10621949         move    #0,x1
P:0032 77F400 FFFFF6  3  10921951         move    #-10,n7
P:0034 000000         2  11121952         nop
P:0035 4D6F00         4  11521953         move    x1,y:(r7+n7)
                            21956 
                            21957 ; 89   |
                            21958 ; 90   |    // This is required to get the message into the PlayerStateMachine (PSM)
                            21959 ; 91   |    // casted to avoid pointer mismatch warnings
                            21960 ; 92   |    pPtr = (int *) &gEventInfo;
                            21961 
P:0036 66F400 rrrrrr  3  11821963         move    #FgEventInfo,r6
P:0038 77F400 FFFFF7  3  12121966         move    #-9,n7
P:003A 000000         2  12321967         nop
P:003B 6E6F00         4  12721968         move    r6,y:(r7+n7)
                            21971 
                            21972 ; 93   |
                            21973 ; 94   |    //b;   // avoid warnings for unused
                            21974 ; 95   |
                            21975 ; 96   |    // We need to refresh the screen since entering the menu
                            21976 ; 97   |    DisplayHint.I = TIME_DATE_MENU_DISPLAY_ALL|(1<<DISPLAY_CLEAR_DISPLAY_BITPOS);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 361

M:ADDR CODE           CYCLES LINE SOURCELINE
                            21977 
P:003C 46F400 000001  3  13021979         move    #>1,y0
P:003E 77F400 FFFFEC  3  13321980         move    #-20,n7
P:0040 000000         2  13521981         nop
P:0041 4E6F00         4  13921982         move    y0,y:(r7+n7)
                            21983 
                            21984 ; 98   |    SysCallFunction(RSRC_DISPLAY_CODE_BANK,RefreshDisplay,DisplayHint.I,1,0);
                            21985 
P:0042 200059         2  14121987         tfr     y0,b
P:0043 3C0000         2  14321989         move    #0,n4
P:0044 56F400 000022  3  14621990         move    #>34,a
P:0046 21E400         2  14821992         move    b,x0
P:0047 239400         2  15021993         move    n4,r4
P:0048 60F400 rrrrrr  3  15321994         move    #FRefreshDisplay,r0
P:004A 0BF080 rrrrrr  6  15921995         jsr     SysCallFunction
                            21996 
                            21997 ; 99   |    DisplayHint.I = 0;
                            21998 
P:004C 200013         2  16122000         clr     a   
P:004D 77F400 FFFFEC  3  16422001         move    #-20,n7
P:004F 000000         2  16622002         nop
P:0050 5C6F00         4  17022003         move    a1,y:(r7+n7)
                            22004 
                            22005 ; 100  |    
                            22006 ; 101  |
                            22007 ; 102  |
                            22008 ; 103  |    SysCallFunction(RSRC_TIMEDATE_MENU_CODE_BANK,UpdateTime,0,0,0);
                            22009 
P:0051 200009         2  17222011         tfr     a,b 
P:0052 340000         2  17422012         move    #0,r4
P:0053 240000         2  17622013         move    #0,x0
P:0054 60F400 rrrrrr  3  17922014         move    #FUpdateTime,r0
P:0056 56F400 000081  3  18222015         move    #>$81,a
P:0058 0BF080 rrrrrr  6  18822016         jsr     SysCallFunction
                            22017 
                            22018 ; 104  |    iHours = g_iCurrentRTCValues.B.m_iHours;
                            22019 
P:005A 4EF000 rrrrrr  3  19122021         move    y:Fg_iCurrentRTCValues,y0
P:005C 0106E8         2  19322022         mpy     y0,#6,b
P:005D 46F400 00001F  3  19622023         move    #>$1F,y0
P:005F 20005E         2  19822024         and     y0,b
P:0060 77F400 FFFFF8  3  20122025         move    #-8,n7
P:0062 000000         2  20322026         nop
P:0063 5D6F00         4  20722027         move    b1,y:(r7+n7)
P:0064 77F400 FFFFF9  3  21022028         move    #-7,n7
P:0066 000000         2  21222029         nop
P:0067 5D6F00         4  21622030         move    b1,y:(r7+n7)
                            22032 
                            22033 ; 105  |    iMinutes = g_iCurrentRTCValues.B.m_iMinutes;
                            22034 
P:0068 4EF000 rrrrrr  3  21922036         move    y:Fg_iCurrentRTCValues,y0
P:006A 200059         2  22122037         tfr     y0,b
P:006B 46F400 00003F  3  22422038         move    #>$3F,y0
P:006D 20005E         2  22622039         and     y0,b
P:006E 77F400 FFFFFA  3  22922040         move    #-6,n7
P:0070 000000         2  23122041         nop
P:0071 5D6F00         4  23522042         move    b1,y:(r7+n7)
P:0072 77F400 FFFFFB  3  23822043         move    #-5,n7
P:0074 000000         2  24022044         nop
P:0075 5D6F00         4  24422045         move    b1,y:(r7+n7)
                            22047 
                            22048 ; 106  |    iSeconds = g_iCurrentRTCValues.B.m_iSeconds;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 362

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22049 
P:0076 4DF000 rrrrrr  3  24722051         move    y:Fg_iCurrentRTCValues+1,x1
P:0078 0107F0         2  24922052         mpy     x1,#7,a
P:0079 20C500         2  25122053         move    y0,x1
P:007A 200066         2  25322054         and     x1,a
P:007B 77F400 FFFFFC  3  25622055         move    #-4,n7
P:007D 000000         2  25822056         nop
P:007E 5C6F00         4  26222057         move    a1,y:(r7+n7)
                            22059 
                            22060 ; 107  |
                            22061 ; 108  |    DisplayTimeFirst();
                            22062 
P:007F 0BF080 rrrrrr  6  26822064         jsr     FDisplayTimeFirst
                            22065 
                            22066 ; 109  |    DisplayChangeTime(TIME_SELECT_ALL,iPreviousCursorPosition,TRUE,iHours,iMinutes,iSecond
                                  s,l_iTimeFormat);
                            22067 
P:0081 57F400 000003  3  27122069         move    #>3,b
P:0083 56F400 000005  3  27422070         move    #>5,a
P:0085 44F400 000001  3  27722071         move    #>1,x0
P:0087 77F400 FFFFFC  3  28022072         move    #-4,n7
P:0089 000000         2  28222073         nop
P:008A 4FEF00         4  28622074         move    y:(r7+n7),y1
P:008B 77F400 FFFFEE  3  28922075         move    #-18,n7
P:008D 000000         2  29122076         nop
P:008E 4EEF00         4  29522077         move    y:(r7+n7),y0
P:008F 4E5F00         2  29722078         move    y0,y:(r7)+
P:0090 77F400 FFFFF9  3  30022080         move    #-7,n7
P:0092 000000         2  30222081         nop
P:0093 4DEF00         4  30622082         move    y:(r7+n7),x1
P:0094 77F400 FFFFF7  3  30922083         move    #-9,n7
P:0096 000000         2  31122084         nop
P:0097 4EEF00         4  31522085         move    y:(r7+n7),y0
P:0098 0BF080 rrrrrr  6  32122086         jsr     FDisplayChangeTime
P:009A 205700         2  32322087         move    (r7)-
                            22089 
                            22090 ; 110  |    iPreviousCursorPosition = iCursorPosition;
                            22091 
P:009B 56F400 000004  3  32622093         move    #>4,a
                            22095 
                            22096 ; 111  |    while(!bDone) 
                            22097 
P:009D 0AF080 rrrrrr  6  33222099         jmp     L240
                            22100 
                            22101 ; 112  |    {
                            22102 ; 113  |    // Mask out all display hints that aren't aimed toward the TIME DATE menu
                            22103 ; 114  |        DisplayHint.I &= (TIME_DATE_MENU_DISPLAY_ALL|(1<<DISPLAY_CLEAR_DISPLAY_BITPOS));
                            22104 
P:009F 77F400 FFFFEC  3  33522106 L165:   move    #-20,n7
P:00A1 000000         2  33722107         nop
P:00A2 5FEF00         4  34122108         move    y:(r7+n7),b
P:00A3 46F400 000001  3  34422109         move    #>1,y0
P:00A5 20005E         2  34622110         and     y0,b
P:00A6 5D6F00         4  35022111         move    b1,y:(r7+n7)
                            22112 
                            22113 ; 115  |
                            22114 ; 116  |        // Wait until a Message or Button happens
                            22115 ; 117  |        iEvent = SysWaitOnEvent(EVENT_MESSAGE|EVENT_BUTTON,&gEventInfo.msg,DisplayHint.I ?
                                   1 : -1);
                            22116 
P:00A7 2B0000         2  35222118         move    #0,b2
P:00A8 20000B         2  35422119         tst     b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 363

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00A9 57F400 FFFFFF  3  35722120         move    #>-1,b
P:00AB 022058         2  35922121         tne     y0,b
P:00AC 77F400 FFFFFD  3  36222122         move    #-3,n7
P:00AE 000000         2  36422123         nop
P:00AF 5C6F00         4  36822124         move    a1,y:(r7+n7)
P:00B0 60F400 rrrrrr  3  37122127         move    #FgEventInfo,r0
P:00B2 56F400 00000A  3  37422128         move    #>10,a
P:00B4 0BF080 rrrrrr  6  38022129         jsr     SysWaitOnEvent
                            22131 
                            22132 ; 118  |
                            22133 ; 119  |        // Assume every message goes to the PSM
                            22134 ; 120  |        bSendToPlayerStateMachine = TRUE;
                            22135 
P:00B6 46F400 000001  3  38322137         move    #>1,y0
P:00B8 045FA0         2  38522139         movec   m0,n7
P:00B9 000000         2  38722140         nop
P:00BA 4E6F00         4  39122141         move    y0,y:(r7+n7)
                            22144 
                            22145 ; 121  |
                            22146 ; 122  |        // Handle the event:  EVENT_TIMER, EVENT_MESSAGE, or EVENT_BUTTON
                            22147 ; 123  |        switch(iEvent)
                            22148 
P:00BB 77F400 FFFFFE  3  39422150         move    #-2,n7
P:00BD 000000         2  39622151         nop
P:00BE 5E6F00         4  40022152         move    a,y:(r7+n7)
P:00BF 45F400 000002  3  40322153         move    #>2,x1
P:00C1 45F465 000008  3  40622154         cmp     x1,a    #>8,x1
P:00C3 0AF0AA rrrrrr  6  41222155         jeq     L167
P:00C5 45F465 000004  3  41522156         cmp     x1,a    #>4,x1
P:00C7 0AF0AA rrrrrr  6  42122157         jeq     L169
P:00C9 200065         2  42322158         cmp     x1,a
P:00CA 0AF0A2 rrrrrr  6  42922159         jne     L238
                            22160 
                            22161 ; 124  |        {
                            22162 ; 125  |        case EVENT_TIMER:
                            22163 ; 126  |            if(DisplayHint.I != 0)
                            22164 
P:00CC 77F400 FFFFEC  3  43222166         move    #-20,n7
P:00CE 000000         2  43422167         nop
P:00CF 5FEF00         4  43822168         move    y:(r7+n7),b
P:00D0 2B0000         2  44022169         move    #0,b2
P:00D1 20000B         2  44222170         tst     b
P:00D2 0AF0AA rrrrrr  6  44822171         jeq     L229
                            22172 
                            22173 ; 127  |            {
                            22174 ; 128  |                SysCallFunction(RSRC_DISPLAY_CODE_BANK,RefreshDisplay,DisplayHint.I,1,0);
                            22175 
P:00D4 56F400 000022  3  45122177         move    #>34,a
P:00D6 20C400         2  45322178         move    y0,x0
P:00D7 340000         2  45522179         move    #0,r4
P:00D8 60F400 rrrrrr  3  45822180         move    #FRefreshDisplay,r0
P:00DA 21AF00         2  46022181         move    b1,b
P:00DB 0BF080 rrrrrr  6  46622182         jsr     SysCallFunction
                            22183 
                            22184 ; 129  |                DisplayHint.I = 0;
                            22185 
P:00DD 20001B         2  46822187         clr     b   
P:00DE 77F400 FFFFEC  3  47122188         move    #-20,n7
P:00E0 000000         2  47322189         nop
P:00E1 5D6F00         4  47722190         move    b1,y:(r7+n7)
                            22191 
                            22192 ; 130  |            }
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 364

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22193 ; 131  |            bSendToPlayerStateMachine = FALSE;
                            22194 
P:00E2 0AF080 rrrrrr  6  48322196         jmp     L229
                            22197 
                            22198 ; 132  |            break;
                            22199 ; 133  |
                            22200 ; 134  |        case EVENT_MESSAGE:              // (SDK2.520)
                            22201 ; 135  |            switch(gEventInfo.Message.wMsgCommand)
                            22202 
P:00E4 5EF000 rrrrrr  3  48622204 L167:   move    y:FgEventInfo+1,a
P:00E6 57F400 060016  3  48922205         move    #393238,b
P:00E8 2A0000         2  49122206         move    #0,a2
P:00E9 200005         2  49322207         cmp     b,a
P:00EA 0AF0A2 rrrrrr  6  49922208         jne     L238
                            22209 
                            22210 ; 136  |            {
                            22211 ; 137  |                case MENU_MSG_ANIMATE:   // process expiration of Blink timer
                            22212 ; 138  |                    bBlink ^= 1;         // toggle mode
                            22213 
P:00EC 77F400 FFFFF0  3  50222215         move    #-16,n7
P:00EE 000000         2  50422216         nop
P:00EF 5DEF00         4  50822217         move    y:(r7+n7),b1
P:00F0 0BCD40         4  51222218         bchg    #0,b1
P:00F1 5D6F00         4  51622221         move    b1,y:(r7+n7)
                            22224 
                            22225 ; 139  |                    if(!bSaveChanges_mode) // only blink if "Save Changes?" is not on the 
                                  screen
                            22226 
P:00F2 77F400 FFFFF3  3  51922228         move    #-13,n7
P:00F4 000000         2  52122229         nop
P:00F5 5EEF00         4  52522230         move    y:(r7+n7),a
P:00F6 200003         2  52722231         tst     a
P:00F7 0AF0A2 rrrrrr  6  53322232         jne     L229
                            22233 
                            22234 ; 140  |                        DisplayChangeTime(iCursorPosition,iPreviousCursorPosition,bBlink,i
                                  Hours,iMinutes,iSeconds,l_iTimeFormat);                    
                            22235 
P:00F9 0AF080 rrrrrr  6  53922237         jmp     L204
                            22238 
                            22239 ; 141  |                    bSendToPlayerStateMachine = FALSE;
                            22240 ; 142  |                    break;
                            22241 ; 143  |            }
                            22242 ; 144  |            break;    // pass all other EVENT_MESSAGEs to PSM
                            22243 ; 145  |
                            22244 ; 146  |        case EVENT_BUTTON:
                            22245 ; 147  |            // A button was pressed, so restart timers if enabled
                            22246 ; 148  |            UpdateAutoShutdownTimer();
                            22247 
P:00FB 0BF080 rrrrrr  6  54522249 L169:   jsr     FUpdateAutoShutdownTimer
                            22250 
                            22251 ; 149  |#ifdef BACKLIGHT
                            22252 ; 150  |            // Turn ON the Backlight when any button is pressed
                            22253 ; 151  |            if(g_iBackLightState == BACKLIGHT_ON)
                            22254 
P:00FD 5FF000 rrrrrr  3  54822256         move    y:Fg_iBackLightState,b
P:00FF 47F400 000001  3  55122257         move    #>1,y1
P:0101 20007D         2  55322258         cmp     y1,b
P:0102 0AF0A2 rrrrrr  6  55922259         jne     L170
                            22260 
                            22261 ; 152  |            {
                            22262 ; 153  |                SysPostMessage(2,LCD_BACKLIGHT_ON);
                            22263 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 365

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0104 290200         2  56122265         move    #2,b0
P:0105 46F400 030010  3  56422266         move    #196624,y0
P:0107 4E5F00         2  56622267         move    y0,y:(r7)+
P:0108 595F00         2  56822269         move    b0,y:(r7)+
P:0109 0BF080 rrrrrr  6  57422271         jsr     FSysPostMessage
P:010B 205700         2  57622272         move    (r7)-
P:010C 205700         2  57822274         move    (r7)-
                            22276 
                            22277 ; 154  |                SysPostMessage(6,SOFT_TIMER_SET_TIMER,TIMER_BACKLIGHT,1,BACKLIGHT_TIME,MEN
                                  U_MSG_TURN_OFF_BACKLIGHT);
                            22278 
P:010D 290500         2  58022280         move    #5,b0
P:010E 2D0100         2  58222281         move    #1,b1
P:010F 47F400 06001A  3  58522282         move    #393242,y1
P:0111 4F5F00         2  58722283         move    y1,y:(r7)+
P:0112 44F400 001388  3  59022285         move    #5000,x0
P:0114 4C5F00         2  59222286         move    x0,y:(r7)+
P:0115 5D5F00         2  59422288         move    b1,y:(r7)+
P:0116 595F00         2  59622290         move    b0,y:(r7)+
P:0117 45F400 090001  3  59922292         move    #589825,x1
P:0119 4D5F00         2  60122293         move    x1,y:(r7)+
P:011A 290600         2  60322295         move    #6,b0
P:011B 595F00         2  60522296         move    b0,y:(r7)+
P:011C 0BF080 rrrrrr  6  61122298         jsr     FSysPostMessage
P:011E 3F0600         2  61322299         move    #6,n7
P:011F 000000         2  61522300         nop
P:0120 204700         2  61722301         move    (r7)-n7
                            22303 
                            22304 ; 155  |                    SysWaitOnEvent(0,0,0);
                            22305 
P:0121 300000         2  61922307         move    #0,r0
P:0122 200013         2  62122308         clr     a   
P:0123 20001B         2  62322309         clr     b   
P:0124 0BF080 rrrrrr  6  62922310         jsr     SysWaitOnEvent
                            22311 
                            22312 ; 156  |             } 
                            22313 ; 157  |#endif
                            22314 ; 158  |            switch(gEventInfo.Button.wButtonEvent)
                            22315 
P:0126 5FF000 rrrrrr  3  63222317 L170:   move    y:FgEventInfo,b
P:0128 66F400 rrrrrr  3  63522318         move    #L246,r6
P:012A 2B0000         2  63722319         move    #0,b2
P:012B 56F400 00001A  3  64022320         move    #>26,a
P:012D 21FE0D         2  64222321         cmp     a,b     b,n6
P:012E 0AF0A7 rrrrrr  6  64822322         jgt     L238
P:0130 07EE96         8  65622323         movem   p:(r6+n6),r6
P:0131 000000         2  65822324         nop
P:0132 0AE680         4  66222325         jmp     (r6)
                            22326 
P:0133 rrrrrr               22327 L246:   dc      L179    ; case 0:
P:0134 rrrrrr               22328         dc      L179    ; case 1:
P:0135 rrrrrr               22329         dc      L172    ; case 2:
P:0136 rrrrrr               22330         dc      L172    ; case 3:
P:0137 rrrrrr               22331         dc      L207    ; case 4:
P:0138 rrrrrr               22332         dc      L205    ; case 5:
P:0139 rrrrrr               22333         dc      L238    ; default:
P:013A rrrrrr               22334         dc      L238    ; default:
P:013B rrrrrr               22335         dc      L238    ; default:
P:013C rrrrrr               22336         dc      L238    ; default:
P:013D rrrrrr               22337         dc      L238    ; default:
P:013E rrrrrr               22338         dc      L238    ; default:
P:013F rrrrrr               22339         dc      L238    ; default:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 366

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0140 rrrrrr               22340         dc      L238    ; default:
P:0141 rrrrrr               22341         dc      L238    ; default:
P:0142 rrrrrr               22342         dc      L238    ; default:
P:0143 rrrrrr               22343         dc      L238    ; default:
P:0144 rrrrrr               22344         dc      L238    ; default:
P:0145 rrrrrr               22345         dc      L238    ; default:
P:0146 rrrrrr               22346         dc      L238    ; default:
P:0147 rrrrrr               22347         dc      L238    ; default:
P:0148 rrrrrr               22348         dc      L238    ; default:
P:0149 rrrrrr               22349         dc      L238    ; default:
P:014A rrrrrr               22350         dc      L238    ; default:
P:014B rrrrrr               22351         dc      L238    ; default:
P:014C rrrrrr               22352         dc      L229    ; case 25:
P:014D rrrrrr               22353         dc      L222    ; case 26:
                            22354 
                            22355 
                            22356 ; 159  |            {
                            22357 ; 160  |//                case PH_VOL_UP:       // instead, let PSM adjust the volume
                            22358 ; 161  |//                case PH_VOL_DOWN:
                            22359 ; 162  |//                    break;
                            22360 ; 163  |
                            22361 ; 164  |                case PR_FF:
                            22362 ; 165  |                case PH_FF:
                            22363 ; 166  |                    if(bSaveChanges_mode == TRUE) {
                            22364 
P:014E 77F400 FFFFF3  3  66522366 L172:   move    #-13,n7
P:0150 000000         2  66722367         nop
P:0151 5EEF00         4  67122368         move    y:(r7+n7),a
P:0152 44F400 000001  3  67422369         move    #>1,x0
P:0154 200045         2  67622370         cmp     x0,a
P:0155 0AF0A2 rrrrrr  6  68222371         jne     L173
                            22372 
                            22373 ; 167  |                        iSaveChangesSelected++;
                            22374 
P:0157 77F400 FFFFF5  3  68522376         move    #-11,n7
P:0159 000000         2  68722377         nop
P:015A 5EEF00         4  69122378         move    y:(r7+n7),a
P:015B 208600         2  69322379         move    x0,y0
P:015C 200050         2  69522380         add     y0,a
                            22383 
                            22384 ; 168  |                        if(iSaveChangesSelected > SETTIME_LAST_SAVE_CHANGES)
                            22385 
P:015D 57F400 000002  3  69822387         move    #>2,b
P:015F 200005         2  70022388         cmp     b,a
P:0160 0AF0AF rrrrrr  6  70622389         jle     L182
                            22390 
                            22391 ; 169  |                            iSaveChangesSelected = SETTIME_FIRST_SAVE_CHANGES;
                            22392 
P:0162 200013         2  70822394         clr     a   
                            22395 
                            22396 ; 170  |                        DisplaySaveChangesTime(iSaveChangesSelected);
                            22397 
P:0163 0AF080 rrrrrr  6  71422399         jmp     L182
                            22400 
                            22401 ; 171  |                    }
                            22402 ; 172  |                    else if(bTimeModify_mode == FALSE) {// move cursor to next time parame
                                  ter
                            22403 
                            22405 L173:
P:0165 77F400 FFFFF1  3  71722408         move    #-15,n7
P:0167 000000         2  71922409         nop
P:0168 5EEF00         4  72322410         move    y:(r7+n7),a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 367

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0169 200003         2  72522411         tst     a
P:016A 0AF0A2 rrrrrr  6  73122412         jne     L174
                            22413 
                            22414 ; 173  |                        iCursorPosition++;
                            22415 
P:016C 77F400 FFFFF4  3  73422417         move    #-12,n7
P:016E 000000         2  73622418         nop
P:016F 5EEF00         4  74022419         move    y:(r7+n7),a
P:0170 208700         2  74222420         move    x0,y1
P:0171 200070         2  74422421         add     y1,a
                            22424 
                            22425 ; 174  |                        if(iCursorPosition > LAST_TIME_SELECT)
                            22426 
P:0172 45F400 000004  3  74722428         move    #>4,x1
P:0174 200065         2  74922429         cmp     x1,a
P:0175 0AF0AF rrrrrr  6  75522430         jle     L186
                            22431 
                            22432 ; 175  |                        iCursorPosition = FIRST_TIME_SELECT;
                            22433 
P:0177 200013         2  75722435         clr     a   
                            22436 
                            22437 ; 176  |                        DisplayChangeTime(iCursorPosition,iPreviousCursorPosition,TRUE,iHo
                                  urs,iMinutes,iSeconds,l_iTimeFormat);
                            22438 
P:0178 0AF080 rrrrrr  6  76322440         jmp     L186
                            22441 
                            22442 ; 177  |                    }
                            22443 ; 178  |                    else { //bTimeModify_mode == TRUE , MENU button already pressed to sel
                                  ect parameter, now adjust parameter
                            22444 ; 179  |                        switch(iCursorPosition){
                            22445 
                            22447 L174:
P:017A 77F400 FFFFF4  3  76622450         move    #-12,n7
P:017C 000000         2  76822451         nop
P:017D 5EEF00         4  77222452         move    y:(r7+n7),a
P:017E 208700         2  77422453         move    x0,y1
P:017F 47F475 000002  3  77722454         cmp     y1,a    #>2,y1
P:0181 0AF0AA rrrrrr  6  78322455         jeq     L176
P:0183 200075         2  78522456         cmp     y1,a
P:0184 0AF0AA rrrrrr  6  79122457         jeq     L177
P:0186 200003         2  79322458         tst     a
P:0187 0AF0A2 rrrrrr  6  79922459         jne     L204
                            22460 
                            22461 ; 180  |                        case HOUR_SELECT:
                            22462 ; 181  |                            iHours++;
                            22463 
P:0189 77F400 FFFFF9  3  80222465         move    #-7,n7
P:018B 000000         2  80422466         nop
P:018C 5EEF00         4  80822467         move    y:(r7+n7),a
P:018D 208700         2  81022468         move    x0,y1
P:018E 200070         2  81222469         add     y1,a
                            22472 
                            22473 ; 182  |                            if(iHours > 23)
                            22474 
P:018F 5C6F00         4  81622476         move    a1,y:(r7+n7)
P:0190 46F400 000017  3  81922477         move    #>23,y0
P:0192 200055         2  82122478         cmp     y0,a
P:0193 0AF0AF rrrrrr  6  82722481         jle     L204
                            22482 
                            22483 ; 183  |                                iHours = 0;
                            22484 
P:0195 2D0000         2  82922486         move    #0,b1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 368

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0196 5D6F00         4  83322489         move    b1,y:(r7+n7)
                            22492 
                            22493 ; 184  |                            break;
                            22494 
P:0197 0AF080 rrrrrr  6  83922496         jmp     L204
                            22497 
                            22498 ; 185  |                        case MINUTE_SELECT:
                            22499 ; 186  |                            iMinutes++;
                            22500 
P:0199 77F400 FFFFFB  3  84222502 L176:   move    #-5,n7
P:019B 000000         2  84422503         nop
P:019C 5EEF00         4  84822504         move    y:(r7+n7),a
P:019D 208600         2  85022505         move    x0,y0
P:019E 200050         2  85222506         add     y0,a
                            22509 
                            22510 ; 187  |                            if(iMinutes > 59)
                            22511 
P:019F 5C6F00         4  85622513         move    a1,y:(r7+n7)
P:01A0 44F400 00003B  3  85922514         move    #>59,x0
P:01A2 200045         2  86122515         cmp     x0,a
P:01A3 0AF0AF rrrrrr  6  86722518         jle     L204
                            22519 
                            22520 ; 188  |                                iMinutes = 0;
                            22521 
P:01A5 20001B         2  86922523         clr     b   
P:01A6 5F6F00         4  87322526         move    b,y:(r7+n7)
                            22529 
                            22530 ; 189  |                            break;
                            22531 
P:01A7 0AF080 rrrrrr  6  87922533         jmp     L204
                            22534 
                            22535 ; 190  |                           case TIMEFORMAT_SELECT:
                            22536 ; 191  |                            l_iTimeFormat++;
                            22537 
P:01A9 77F400 FFFFEF  3  88222539 L177:   move    #-17,n7
P:01AB 000000         2  88422540         nop
P:01AC 5EEF00         4  88822541         move    y:(r7+n7),a
P:01AD 208500         2  89022542         move    x0,x1
P:01AE 200060         2  89222543         add     x1,a
                            22546 
                            22547 ; 192  |                            if(l_iTimeFormat > TIMEFORMAT_24HOUR)
                            22548 
P:01AF 5C6F00         4  89622550         move    a1,y:(r7+n7)
P:01B0 200065         2  89822551         cmp     x1,a
P:01B1 0AF0AF rrrrrr  6  90422554         jle     L204
                            22555 
                            22556 ; 193  |                                l_iTimeFormat = TIMEFORMAT_12HOUR;
                            22557 
P:01B3 280000         2  90622559         move    #0,a0
P:01B4 586F00         4  91022562         move    a0,y:(r7+n7)
                            22565 
                            22566 ; 194  |                            break;        
                            22567 ; 195  |                        } // end switch(iCursorPosition)
                            22568 ; 196  |                        DisplayChangeTime(iCursorPosition,iPreviousCursorPosition,bBlink,i
                                  Hours,iMinutes,iSeconds,l_iTimeFormat);
                            22569 
P:01B5 0AF080 rrrrrr  6  91622571         jmp     L204
                            22572 
                            22573 ; 197  |                    }
                            22574 ; 198  |                    bSendToPlayerStateMachine = FALSE;         // no need to send to PSM
                            22575 ; 199  |                    break;
                            22576 ; 200  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 369

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22577 ; 201  |                case PR_RW:
                            22578 ; 202  |                case PH_RW:
                            22579 ; 203  |                    if(bSaveChanges_mode == TRUE) {
                            22580 
P:01B7 77F400 FFFFF3  3  91922582 L179:   move    #-13,n7
P:01B9 000000         2  92122583         nop
P:01BA 5EEF00         4  92522584         move    y:(r7+n7),a
P:01BB 46F400 000001  3  92822585         move    #>1,y0
P:01BD 200055         2  93022586         cmp     y0,a
P:01BE 0AF0A2 rrrrrr  6  93622587         jne     L183
                            22588 
                            22589 ; 204  |                        iSaveChangesSelected--;
                            22590 
P:01C0 77F400 FFFFF5  3  93922592         move    #-11,n7
P:01C2 000000         2  94122593         nop
P:01C3 5EEF00         4  94522594         move    y:(r7+n7),a
P:01C4 20C500         2  94722595         move    y0,x1
P:01C5 200064         2  94922596         sub     x1,a
                            22599 
                            22600 ; 205  |                        if(iSaveChangesSelected < SETTIME_FIRST_SAVE_CHANGES)
                            22601 
P:01C6 0AF0A1 rrrrrr  6  95522603         jge     L182
                            22604 
                            22605 ; 206  |                            iSaveChangesSelected = SETTIME_LAST_SAVE_CHANGES;
                            22606 
P:01C8 56F400 000002  3  95822608         move    #>2,a
                            22609 
                            22610 ; 207  |                        DisplaySaveChangesTime(iSaveChangesSelected);
                            22611 
P:01CA 77F400 FFFFF5  3  96122613 L182:   move    #-11,n7
P:01CC 000000         2  96322614         nop
P:01CD 5C6F00         4  96722615         move    a1,y:(r7+n7)
P:01CE 0BF080 rrrrrr  6  97322620         jsr     FDisplaySaveChangesTime
                            22623 
                            22624 ; 208  |                    }
                            22625 
P:01D0 0AF080 rrrrrr  6  97922627         jmp     L229
                            22628 
                            22629 ; 209  |                    else if(bTimeModify_mode == FALSE) {
                            22630 
P:01D2 77F400 FFFFF1  3  98222632 L183:   move    #-15,n7
P:01D4 000000         2  98422633         nop
P:01D5 5EEF00         4  98822634         move    y:(r7+n7),a
P:01D6 200003         2  99022635         tst     a
P:01D7 0AF0A2 rrrrrr  6  99622636         jne     L187
                            22637 
                            22638 ; 210  |                        iCursorPosition--;
                            22639 
P:01D9 77F400 FFFFF4  3  99922641         move    #-12,n7
P:01DB 000000         2 100122642         nop
P:01DC 5EEF00         4 100522643         move    y:(r7+n7),a
P:01DD 20C700         2 100722644         move    y0,y1
P:01DE 200074         2 100922645         sub     y1,a
                            22648 
                            22649 ; 211  |                        if(iCursorPosition < FIRST_TIME_SELECT)
                            22650 
P:01DF 0AF0A1 rrrrrr  6 101522652         jge     L186
                            22653 
                            22654 ; 212  |                        iCursorPosition = LAST_TIME_SELECT;
                            22655 
P:01E1 56F400 000004  3 101822657         move    #>4,a
                            22658 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 370

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22659 ; 213  |                        DisplayChangeTime(iCursorPosition,iPreviousCursorPosition,TRUE,iHo
                                  urs,iMinutes,iSeconds,l_iTimeFormat);
                            22660 
P:01E3 77F400 FFFFEF  3 102122662 L186:   move    #-17,n7
P:01E5 000000         2 102322663         nop
P:01E6 59EF00         4 102722664         move    y:(r7+n7),b0
P:01E7 77F400 FFFFF4  3 103022667         move    #-12,n7
P:01E9 000000         2 103222668         nop
P:01EA 5C6F00         4 103622669         move    a1,y:(r7+n7)
P:01EB 77F400 FFFFF9  3 103922674         move    #-7,n7
P:01ED 000000         2 104122675         nop
P:01EE 4EEF00         4 104522676         move    y:(r7+n7),y0
P:01EF 77F400 FFFFFB  3 104822679         move    #-5,n7
P:01F1 000000         2 105022680         nop
P:01F2 4DEF00         4 105422681         move    y:(r7+n7),x1
P:01F3 44F400 000001  3 105722684         move    #>1,x0
P:01F5 77F400 FFFFFC  3 106022685         move    #-4,n7
P:01F7 000000         2 106222686         nop
P:01F8 4FEF00         4 106622687         move    y:(r7+n7),y1
P:01F9 595F00         2 106822688         move    b0,y:(r7)+
P:01FA 5FEF00         4 107222691         move    y:(r7+n7),b
P:01FB 0BF080 rrrrrr  6 107822692         jsr     FDisplayChangeTime
P:01FD 205700         2 108022693         move    (r7)-
                            22704 
                            22705 ; 214  |                    }
                            22706 
P:01FE 0AF080 rrrrrr  6 108622708         jmp     L229
                            22709 
                            22710 ; 215  |                    else {// bTimeModify_mode == TRUE and bSaveChange_mode == FALSE;
                            22711 ; 216  |                          // MENU button already pressed to select parameter, now adjust p
                                  arameter
                            22712 ; 217  |                        switch(iCursorPosition){
                            22713 
                            22715 L187:
P:0200 77F400 FFFFF4  3 108922717         move    #-12,n7
P:0202 000000         2 109122718         nop
P:0203 5EEF00         4 109522719         move    y:(r7+n7),a
P:0204 46F455 000002  3 109822720         cmp     y0,a    #>2,y0
P:0206 0AF0AA rrrrrr  6 110422721         jeq     L189
P:0208 200055         2 110622722         cmp     y0,a
P:0209 0AF0AA rrrrrr  6 111222723         jeq     L190
P:020B 200003         2 111422724         tst     a
P:020C 0AF0A2 rrrrrr  6 112022725         jne     L204
                            22726 
                            22727 ; 218  |                        case HOUR_SELECT:
                            22728 ; 219  |                            iHours--;
                            22729 
P:020E 77F400 FFFFF9  3 112322731         move    #-7,n7
P:0210 000000         2 112522732         nop
P:0211 5EEF00         4 112922733         move    y:(r7+n7),a
P:0212 45F400 000001  3 113222734         move    #>1,x1
P:0214 200064         2 113422735         sub     x1,a
                            22738 
                            22739 ; 220  |                            if(iHours < 0)
                            22740 
P:0215 5C6F00         4 113822742         move    a1,y:(r7+n7)
P:0216 0AF0A1 rrrrrr  6 114422745         jge     L204
                            22746 
                            22747 ; 221  |                                iHours = 23;
                            22748 
P:0218 2C1700         2 114622750         move    #23,a1
P:0219 5C6F00         4 115022753         move    a1,y:(r7+n7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 371

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22756 
                            22757 ; 222  |                            break;
                            22758 
P:021A 0AF080 rrrrrr  6 115622760         jmp     L204
                            22761 
                            22762 ; 223  |                        case MINUTE_SELECT:
                            22763 ; 224  |                            iMinutes--;
                            22764 
P:021C 77F400 FFFFFB  3 115922766 L189:   move    #-5,n7
P:021E 000000         2 116122767         nop
P:021F 5EEF00         4 116522768         move    y:(r7+n7),a
P:0220 47F400 000001  3 116822769         move    #>1,y1
P:0222 200074         2 117022770         sub     y1,a
                            22773 
                            22774 ; 225  |                            if(iMinutes < 0)
                            22775 
P:0223 5C6F00         4 117422777         move    a1,y:(r7+n7)
P:0224 0AF0A1 rrrrrr  6 118022780         jge     L204
                            22781 
                            22782 ; 226  |                                iMinutes = 59;
                            22783 
P:0226 56F400 00003B  3 118322785         move    #>59,a
P:0228 5E6F00         4 118722788         move    a,y:(r7+n7)
                            22791 
                            22792 ; 227  |                            break;
                            22793 
P:0229 0AF080 rrrrrr  6 119322795         jmp     L204
                            22796 
                            22797 ; 228  |                          case TIMEFORMAT_SELECT:
                            22798 ; 229  |                            l_iTimeFormat--;
                            22799 
P:022B 77F400 FFFFEF  3 119622801 L190:   move    #-17,n7
P:022D 000000         2 119822802         nop
P:022E 5EEF00         4 120222803         move    y:(r7+n7),a
P:022F 46F400 000001  3 120522804         move    #>1,y0
P:0231 200054         2 120722805         sub     y0,a
                            22807 
                            22808 ; 230  |                            if(l_iTimeFormat < TIMEFORMAT_12HOUR)
                            22809 
P:0232 5C6F00         4 121122811         move    a1,y:(r7+n7)
P:0233 0AF0A1 rrrrrr  6 121722814         jge     L204
                            22817 
                            22818 ; 231  |                                l_iTimeFormat = TIMEFORMAT_24HOUR;
                            22819 
P:0235 4E6F00         4 122122821         move    y0,y:(r7+n7)
                            22824 
                            22825 ; 232  |                            break;
                            22826 ; 233  |                        } // end switch(iCursorPosition)
                            22827 ; 234  |                        DisplayChangeTime(iCursorPosition,iPreviousCursorPosition,bBlink,i
                                  Hours,iMinutes,iSeconds,l_iTimeFormat);
                            22828 
P:0236 77F400 FFFFEF  3 122422830 L204:   move    #-17,n7
P:0238 000000         2 122622831         nop
P:0239 59EF00         4 123022832         move    y:(r7+n7),b0
P:023A 77F400 FFFFF0  3 123322835         move    #-16,n7
P:023C 000000         2 123522836         nop
P:023D 4CEF00         4 123922837         move    y:(r7+n7),x0
P:023E 77F400 FFFFF4  3 124222840         move    #-12,n7
P:0240 000000         2 124422841         nop
P:0241 5EEF00         4 124822842         move    y:(r7+n7),a
P:0242 77F400 FFFFF9  3 125122845         move    #-7,n7
P:0244 000000         2 125322846         nop
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 372

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0245 4EEF00         4 125722847         move    y:(r7+n7),y0
P:0246 77F400 FFFFFB  3 126022850         move    #-5,n7
P:0248 000000         2 126222851         nop
P:0249 4DEF00         4 126622852         move    y:(r7+n7),x1
P:024A 77F400 FFFFFC  3 126922855         move    #-4,n7
P:024C 000000         2 127122856         nop
P:024D 4FEF00         4 127522857         move    y:(r7+n7),y1
P:024E 595F00         2 127722858         move    b0,y:(r7)+
P:024F 5FEF00         4 128122861         move    y:(r7+n7),b
P:0250 0BF080 rrrrrr  6 128722862         jsr     FDisplayChangeTime
P:0252 205700         2 128922863         move    (r7)-
                            22876 
                            22877 ; 235  |                    }
                            22878 ; 236  |                    bSendToPlayerStateMachine = FALSE;         // no need to send to PSM
                            22879 
P:0253 0AF080 rrrrrr  6 129522881         jmp     L229
                            22882 
                            22883 ; 237  |                    break;
                            22884 ; 238  |
                            22885 ; 239  |                case PH_MENU:
                            22886 ; 240  |                    // Allow user to escape to Music mode,
                            22887 ; 241  |                    // but first, ask if changes need to be saved.
                            22888 ; 242  |                                        
                            22889 ; 243  |                    if(!bSaveChanges_mode) {
                            22890 
P:0255 77F400 FFFFF3  3 129822892 L205:   move    #-13,n7
P:0257 000000         2 130022893         nop
P:0258 5FEF00         4 130422894         move    y:(r7+n7),b
P:0259 20000B         2 130622895         tst     b
P:025A 0AF0A2 rrrrrr  6 131222896         jne     L206
P:025C 56F400 000002  3 131522897         move    #>2,a
                            22898 
                            22899 ; 244  |                        DisplaySaveChangesTime(SETTIME_CANCEL); // default to "Cancel"
                            22900 
P:025E 0BF080 rrrrrr  6 132122902         jsr     FDisplaySaveChangesTime
                            22903 
                            22904 ; 245  |                        bSendToPlayerStateMachine = TRUE;
                            22905 
P:0260 46F400 000001  3 132422907         move    #>1,y0
P:0262 045FA0         2 132622910         movec   m0,n7
P:0263 000000         2 132822911         nop
P:0264 4E6F00         4 133222912         move    y0,y:(r7+n7)
                            22917 
                            22918 ; 246  |                        bSaveChanges_mode=TRUE;
                            22919 
P:0265 77F400 FFFFF3  3 133522921         move    #-13,n7
P:0267 000000         2 133722922         nop
P:0268 4E6F00         4 134122923         move    y0,y:(r7+n7)
                            22926 
                            22927 ; 247  |                        g_MenuFlags.MENU_FLAG_ESCAPE_TO_MUSIC = TRUE;
                            22928 
P:0269 0A7061 rrrrrr  6 134722930         bset    #1,y:Fg_MenuFlags
                            22931 
                            22932 ; 248  |                    }
                            22933 
P:026B 0AF080 rrrrrr  6 135322935         jmp     L238
                            22936 
                            22937 ; 249  |                    else {
                            22938 ; 250  |                        g_MenuFlags.MENU_FLAG_ESCAPE_TO_MUSIC = TRUE;
                            22939 
P:026D 0A7061 rrrrrr  6 135922941 L206:   bset    #1,y:Fg_MenuFlags
                            22942 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 373

M:ADDR CODE           CYCLES LINE SOURCELINE
                            22943 ; 251  |                        bSendToPlayerStateMachine = FALSE;
                            22944 
P:026F 270000         2 136122946         move    #0,y1
P:0270 045FA0         2 136322949         movec   m0,n7
P:0271 000000         2 136522950         nop
P:0272 4F6F00         4 136922951         move    y1,y:(r7+n7)
                            22954 
                            22955 ; 252  |                        bDone = TRUE;    
                            22956 
P:0273 0AF080 rrrrrr  6 137522958         jmp     L221
                            22959 
                            22960 ; 253  |                    }
                            22961 ; 254  |                    break;
                            22962 ; 255  |                                                                
                            22963 ; 256  |                case PR_MENU:
                            22964 ; 257  |                    if(!bSaveChanges_mode) {
                            22965 
                            22967 L207:
P:0275 77F400 FFFFF3  3 137822969         move    #-13,n7
P:0277 000000         2 138022970         nop
P:0278 5EEF00         4 138422971         move    y:(r7+n7),a
P:0279 200003         2 138622972         tst     a
P:027A 0AF0A2 rrrrrr  6 139222973         jne     L213
                            22974 
                            22975 ; 258  |                        switch(iCursorPosition) {
                            22976 
P:027C 77F400 FFFFF4  3 139522978         move    #-12,n7
P:027E 000000         2 139722979         nop
P:027F 5EEF00         4 140122980         move    y:(r7+n7),a
P:0280 45F400 000004  3 140422981         move    #>4,x1
P:0282 45F465 000003  3 140722982         cmp     x1,a    #>3,x1
P:0284 0AF0AA rrrrrr  6 141322983         jeq     L221
P:0286 200065         2 141522984         cmp     x1,a
P:0287 0AF0A2 rrrrrr  6 142122985         jne     L209
                            22986 
                            22987 ; 259  |                        case TIMEOK_SELECT:    // exit and save
                            22988 ; 260  |                            g_iTimeFormat = l_iTimeFormat; // save format to global
                            22989 
P:0289 77F400 FFFFEF  3 142422991         move    #-17,n7
P:028B 000000         2 142622992         nop
P:028C 4DEF00         4 143022993         move    y:(r7+n7),x1
P:028D 4D7000 rrrrrr  3 143322994         move    x1,y:Fg_iTimeFormat
                            22995 
                            22996 ; 261  |                            SetTime(iHours,iMinutes,iSeconds);
                            22997 
P:028F 77F400 FFFFF9  3 143622999         move    #-7,n7
P:0291 000000         2 143823000         nop
P:0292 5EEF00         4 144223001         move    y:(r7+n7),a
P:0293 77F400 FFFFFB  3 144523004         move    #-5,n7
P:0295 000000         2 144723005         nop
P:0296 5FEF00         4 145123006         move    y:(r7+n7),b
P:0297 77F400 FFFFFC  3 145423009         move    #-4,n7
P:0299 000000         2 145623010         nop
P:029A 4CEF00         4 146023011         move    y:(r7+n7),x0
P:029B 0BF080 rrrrrr  6 146623012         jsr     FSetTime
                            23017 
                            23018 ; 262  |                            bDone = TRUE;
                            23019 ; 263  |                            break;
                            23020 ; 264  |                        case TIMECANCEL_SELECT: // exit without saving
                            23021 ; 265  |                            bDone = TRUE;                            
                            23022 
P:029D 0AF080 rrrrrr  6 147223024         jmp     L221
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 374

M:ADDR CODE           CYCLES LINE SOURCELINE
                            23025 
                            23026 ; 266  |                            break;
                            23027 ; 267  |                        default:
                            23028 ; 268  |                            // Toggle the Time-modify mode
                            23029 ; 269  |                            if(bTimeModify_mode) { 
                            23030 
P:029F 77F400 FFFFF1  3 147523032 L209:   move    #-15,n7
P:02A1 000000         2 147723033         nop
P:02A2 5EEF00         4 148123034         move    y:(r7+n7),a
P:02A3 200003         2 148323035         tst     a
P:02A4 0AF0AA rrrrrr  6 148923038         jeq     L210
                            23039 
                            23040 ; 270  |                                bTimeModify_mode = FALSE;
                            23041 
P:02A6 270000         2 149123043         move    #0,y1
P:02A7 4F6F00         4 149523046         move    y1,y:(r7+n7)
                            23049 
                            23050 ; 271  |                                bBlink = FALSE;    // stop blinking
                            23051 
P:02A8 240000         2 149723053         move    #0,x0
P:02A9 77F400 FFFFF0  3 150023056         move    #-16,n7
P:02AB 000000         2 150223057         nop
P:02AC 4C6F00         4 150623058         move    x0,y:(r7+n7)
                            23061 
                            23062 ; 272  |                                SysPostMessage(3,SOFT_TIMER_KILL_TIMER,TIMER_ANIMATE);
                            23063 
P:02AD 290300         2 150823065         move    #3,b0
P:02AE 200013         2 151023066         clr     a   
P:02AF 5C5F00         2 151223067         move    a1,y:(r7)+
P:02B0 44F400 090002  3 151523069         move    #589826,x0
P:02B2 4C5F00         2 151723070         move    x0,y:(r7)+
P:02B3 595F00         2 151923072         move    b0,y:(r7)+
P:02B4 0BF080 rrrrrr  6 152523074         jsr     FSysPostMessage
P:02B6 3F0300         2 152723075         move    #3,n7
P:02B7 000000         2 152923076         nop
P:02B8 204700         2 153123077         move    (r7)-n7
                            23079 
                            23080 ; 273  |                                if(iCursorPosition==TIMEFORMAT_SELECT)  // update the form
                                  at if it changed
                            23081 
P:02B9 77F400 FFFFF4  3 153423083         move    #-12,n7
P:02BB 000000         2 153623084         nop
P:02BC 5FEF00         4 154023085         move    y:(r7+n7),b
P:02BD 46F400 000002  3 154323086         move    #>2,y0
P:02BF 20005D         2 154523087         cmp     y0,b
P:02C0 0AF0A2 rrrrrr  6 155123088         jne     L212
                            23089 
                            23090 ; 274  |                                    DisplayChangeTime(TIMEFORMAT_SELECT,HOUR_SELECT,TRUE,i
                                  Hours,iMinutes,iSeconds,l_iTimeFormat);
                            23091 
P:02C2 77F400 FFFFEF  3 155423093         move    #-17,n7
P:02C4 000000         2 155623094         nop
P:02C5 5EEF00         4 156023095         move    y:(r7+n7),a
P:02C6 5E5F00         2 156223097         move    a,y:(r7)+
P:02C7 77F400 FFFFF8  3 156523100         move    #-8,n7
P:02C9 000000         2 156723101         nop
P:02CA 4EEF00         4 157123102         move    y:(r7+n7),y0
P:02CB 77F400 FFFFFA  3 157423105         move    #-6,n7
P:02CD 000000         2 157623106         nop
P:02CE 4DEF00         4 158023107         move    y:(r7+n7),x1
P:02CF 44F400 000001  3 158323110         move    #>1,x0
P:02D1 56F400 000002  3 158623111         move    #>2,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 375

M:ADDR CODE           CYCLES LINE SOURCELINE
P:02D3 77F400 FFFFFB  3 158923112         move    #-5,n7
P:02D5 000000         2 159123113         nop
P:02D6 4FEF00         4 159523114         move    y:(r7+n7),y1
P:02D7 20001B         2 159723115         clr     b   
P:02D8 0BF080 rrrrrr  6 160323116         jsr     FDisplayChangeTime
P:02DA 205700         2 160523117         move    (r7)-
                            23123 
                            23124 ; 275  |                            }
                            23125 
P:02DB 0AF080 rrrrrr  6 161123127         jmp     L212
                            23128 
                            23129 ; 276  |                            else {// visually indicate the time parameter, "blink" the par
                                  ameter
                            23130 ; 277  |                                bTimeModify_mode = TRUE;    // start blinking
                            23131 
P:02DD 45F400 000001  3 161423133 L210:   move    #>1,x1
P:02DF 4D6F00         4 161823136         move    x1,y:(r7+n7)
                            23139 
                            23140 ; 278  |                                bTimeModified = TRUE;   // Stmp00008949
                            23141 
P:02E0 290100         2 162023143         move    #1,b0
P:02E1 77F400 FFFFF2  3 162323146         move    #-14,n7
P:02E3 000000         2 162523147         nop
P:02E4 596F00         4 162923148         move    b0,y:(r7+n7)
                            23151 
                            23152 ; 279  |                                bBlink = TRUE;
                            23153 
P:02E5 2D0100         2 163123155         move    #1,b1
P:02E6 77F400 FFFFF0  3 163423158         move    #-16,n7
P:02E8 000000         2 163623159         nop
P:02E9 5D6F00         4 164023160         move    b1,y:(r7+n7)
                            23163 
                            23164 ; 280  |                                SysPostMessage(6,SOFT_TIMER_SET_TIMER,TIMER_ANIMATE,0,500,
                                  MENU_MSG_ANIMATE);
                            23165 
P:02EA 240000         2 164223167         move    #0,x0
P:02EB 200013         2 164423168         clr     a   
P:02EC 45F400 060016  3 164723169         move    #393238,x1
P:02EE 4D5F00         2 164923170         move    x1,y:(r7)+
P:02EF 51F400 0001F4  3 165223172         move    #500,b0
P:02F1 595F00         2 165423173         move    b0,y:(r7)+
P:02F2 5C5F00         2 165623175         move    a1,y:(r7)+
P:02F3 4C5F00         2 165823177         move    x0,y:(r7)+
P:02F4 55F400 090001  3 166123179         move    #589825,b1
P:02F6 5D5F00         2 166323180         move    b1,y:(r7)+
P:02F7 290600         2 166523182         move    #6,b0
P:02F8 595F00         2 166723183         move    b0,y:(r7)+
P:02F9 0BF080 rrrrrr  6 167323185         jsr     FSysPostMessage
P:02FB 3F0600         2 167523186         move    #6,n7
P:02FC 000000         2 167723187         nop
P:02FD 204700         2 167923188         move    (r7)-n7
                            23190 
                            23191 ; 281  |                            }
                            23192 ; 282  |                            SysWaitOnEvent(0,0,0);    // let system process SOFT_TIMER_xxx
                                  _TIMER msg (KILL or SET)
                            23193 
P:02FE 300000         2 168123195 L212:   move    #0,r0
P:02FF 200013         2 168323196         clr     a   
P:0300 20001B         2 168523197         clr     b   
P:0301 0BF080 rrrrrr  6 169123198         jsr     SysWaitOnEvent
                            23199 
                            23200 ; 283  |                            break;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 376

M:ADDR CODE           CYCLES LINE SOURCELINE
                            23201 ; 284  |            
                            23202 ; 285  |                        }
                            23203 ; 286  |                    } // end if(!bSaveChanges_mode)
                            23204 
P:0303 0AF080 rrrrrr  6 169723206         jmp     L238
                            23207 
                            23208 ; 287  |                    else{    // bSaveChanges_mode == TRUE
                            23209 ; 288  |                        
                            23210 ; 289  |                        switch(iSaveChangesSelected) {
                            23211 
P:0305 77F400 FFFFF5  3 170023213 L213:   move    #-11,n7
P:0307 000000         2 170223214         nop
P:0308 5EEF00         4 170623215         move    y:(r7+n7),a
P:0309 44F400 000001  3 170923216         move    #>1,x0
P:030B 44F445 000002  3 171223217         cmp     x0,a    #>2,x0
P:030D 0AF0AA rrrrrr  6 171823218         jeq     L214
P:030F 200045         2 172023219         cmp     x0,a
P:0310 0AF0AA rrrrrr  6 172623220         jeq     L215
P:0312 200003         2 172823221         tst     a
P:0313 0AF0AA rrrrrr  6 173423222         jeq     L217
P:0315 0AF080 rrrrrr  6 174023223         jmp     L238
                            23224 
                            23225 ; 290  |                        case SETTIME_YES:  // Exit and save
                            23226 ; 291  |                            g_iTimeFormat = l_iTimeFormat;
                            23227 ; 292  |                            SetTime(iHours,iMinutes,iSeconds);
                            23228 ; 293  |                            bSendToPlayerStateMachine = TRUE;
                            23229 ; 294  |                            g_MenuFlags.MENU_FLAG_ESCAPE_TO_MUSIC = TRUE;
                            23230 ; 295  |                            g_MenuFlags.MENU_FLAG_SAVE_CHANGES = TRUE;
                            23231 ; 296  |                            bDone = TRUE;
                            23232 ; 297  |                            break;
                            23233 ; 298  |                        case SETTIME_NO:  // Exit without saving
                            23234 ; 299  |                            bSendToPlayerStateMachine = FALSE;
                            23235 
P:0317 240000         2 174223237 L214:   move    #0,x0
P:0318 045FA0         2 174423240         movec   m0,n7
P:0319 000000         2 174623241         nop
P:031A 4C6F00         4 175023242         move    x0,y:(r7+n7)
                            23245 
                            23246 ; 300  |                            g_MenuFlags.MENU_FLAG_ESCAPE_TO_MUSIC = TRUE;
                            23247 
P:031B 0AF080 rrrrrr  6 175623249         jmp     L218
                            23250 
                            23251 ; 301  |                            g_MenuFlags.MENU_FLAG_SAVE_CHANGES = TRUE;
                            23252 ; 302  |                            bDone = TRUE;
                            23253 ; 303  |                            break;
                            23254 ; 304  |                        case SETTIME_CANCEL:  // Don't exit or save, return to set time me
                                  nu
                            23255 ; 305  |                            if(iCancelConfirm){
                            23256 
P:031D 77F400 FFFFF6  3 175923258 L215:   move    #-10,n7
P:031F 000000         2 176123259         nop
P:0320 5FEF00         4 176523260         move    y:(r7+n7),b
P:0321 20000B         2 176723261         tst     b
P:0322 0AF0AA rrrrrr  6 177323264         jeq     L216
                            23265 
                            23266 ; 306  |                                bSaveChanges_mode = FALSE;
                            23267 
P:0324 20001B         2 177523269         clr     b   
P:0325 77F400 FFFFF3  3 177823272         move    #-13,n7
P:0327 000000         2 178023273         nop
P:0328 5F6F00         4 178423274         move    b,y:(r7+n7)
                            23279 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 377

M:ADDR CODE           CYCLES LINE SOURCELINE
                            23280 ; 307  |                                iCancelConfirm = FALSE;
                            23281 
P:0329 77F400 FFFFF6  3 178723283         move    #-10,n7
P:032B 000000         2 178923284         nop
P:032C 586F00         4 179323285         move    a0,y:(r7+n7)
                            23288 
                            23289 ; 308  |                                iCursorPosition = TIMECANCEL_SELECT;
                            23290 
P:032D 2C0400         2 179523292         move    #4,a1
P:032E 77F400 FFFFF4  3 179823295         move    #-12,n7
P:0330 000000         2 180023296         nop
P:0331 5C6F00         4 180423297         move    a1,y:(r7+n7)
P:0332 56F400 000003  3 180723300         move    #>3,a
                            23301 
                            23302 ; 309  |                                DisplaySaveChangesTime(SETTIME_CLEAR);
                            23303 
P:0334 0BF080 rrrrrr  6 181323305         jsr     FDisplaySaveChangesTime
                            23306 
                            23307 ; 310  |                                DisplayTimeFirst();
                            23308 
P:0336 0BF080 rrrrrr  6 181923310         jsr     FDisplayTimeFirst
                            23311 
                            23312 ; 311  |                                DisplayChangeTime(TIME_SELECT_ALL,iPreviousCursorPosition,
                                  TRUE,iHours,iMinutes,iSeconds,l_iTimeFormat);
                            23313 
P:0338 77F400 FFFFEF  3 182223315         move    #-17,n7
P:033A 000000         2 182423316         nop
P:033B 59EF00         4 182823317         move    y:(r7+n7),b0
P:033C 77F400 FFFFF9  3 183123319         move    #-7,n7
P:033E 000000         2 183323320         nop
P:033F 4EEF00         4 183723321         move    y:(r7+n7),y0
P:0340 77F400 FFFFFB  3 184023324         move    #-5,n7
P:0342 000000         2 184223325         nop
P:0343 4DEF00         4 184623326         move    y:(r7+n7),x1
P:0344 56F400 000005  3 184923329         move    #>5,a
P:0346 44F400 000001  3 185223330         move    #>1,x0
P:0348 77F400 FFFFFC  3 185523331         move    #-4,n7
P:034A 000000         2 185723332         nop
P:034B 4FEF00         4 186123333         move    y:(r7+n7),y1
P:034C 595F00         2 186323334         move    b0,y:(r7)+
P:034D 5FEF00         4 186723337         move    y:(r7+n7),b
P:034E 0BF080 rrrrrr  6 187323338         jsr     FDisplayChangeTime
P:0350 205700         2 187523339         move    (r7)-
                            23348 
                            23349 ; 312  |                            }
                            23350 
P:0351 0AF080 rrrrrr  6 188123352         jmp     L238
                            23353 
                            23354 ; 313  |                            else
                            23355 ; 314  |                                iCancelConfirm = TRUE;
                            23356 
P:0353 56F400 000001  3 188423358 L216:   move    #>1,a
P:0355 5E6F00         4 188823361         move    a,y:(r7+n7)
                            23364 
                            23365 ; 315  |                            break;
                            23366 
P:0356 0AF080 rrrrrr  6 189423368         jmp     L238
P:0358 77F400 FFFFEF  3 189723370 L217:   move    #-17,n7
P:035A 000000         2 189923371         nop
P:035B 4FEF00         4 190323372         move    y:(r7+n7),y1
P:035C 4F7000 rrrrrr  3 190623373         move    y1,y:Fg_iTimeFormat
P:035E 77F400 FFFFF9  3 190923375         move    #-7,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 378

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0360 000000         2 191123376         nop
P:0361 5EEF00         4 191523377         move    y:(r7+n7),a
P:0362 77F400 FFFFFB  3 191823380         move    #-5,n7
P:0364 000000         2 192023381         nop
P:0365 5FEF00         4 192423382         move    y:(r7+n7),b
P:0366 77F400 FFFFFC  3 192723385         move    #-4,n7
P:0368 000000         2 192923386         nop
P:0369 4CEF00         4 193323387         move    y:(r7+n7),x0
P:036A 0BF080 rrrrrr  6 193923388         jsr     FSetTime
P:036C 45F400 000001  3 194223394         move    #>1,x1
P:036E 045FA0         2 194423397         movec   m0,n7
P:036F 000000         2 194623398         nop
P:0370 4D6F00         4 195023399         move    x1,y:(r7+n7)
P:0371 0A7061 rrrrrr  6 195623403 L218:   bset    #1,y:Fg_MenuFlags
P:0373 0A7062 rrrrrr  6 196223405         bset    #2,y:Fg_MenuFlags
P:0375 46F400 000001  3 196523407 L221:   move    #>1,y0
P:0377 77F400 FFFFED  3 196823410         move    #-19,n7
P:0379 000000         2 197023411         nop
P:037A 4E6F00         4 197423412         move    y0,y:(r7+n7)
                            23415 
                            23416 ; 316  |                        default:  // should never happen
                            23417 ; 317  |                            break;
                            23418 ; 318  |                        }
                            23419 ; 319  |                         
                            23420 ; 320  |                    }        // end else{ bSaveChanges_mode == TRUE
                            23421 ; 321  |                    break;
                            23422 
P:037B 0AF080 rrrrrr  6 198023424         jmp     L238
                            23425 
                            23426 ; 322  |
                            23427 ; 323  |                                case PR_STOP:
                            23428 ; 324  |                                        bSendToPlayerStateMachine = FALSE;
                            23429 ; 325  |                                    break;
                            23430 ; 326  |
                            23431 ; 327  |                case PH_STOP:
                            23432 ; 328  |                    // If the STOP button is held down, let's call the Shutdown menu
                            23433 ; 329  |                    SysCallFunction(RSRC_MAIN_MENU_CODE_BANK,ShutdownMenu,USERSHUTDOWN,0,0
                                  );
                            23434 
P:037D 20001B         2 198223436 L222:   clr     b   
P:037E 340000         2 198423437         move    #0,r4
P:037F 240000         2 198623438         move    #0,x0
P:0380 56F400 000078  3 198923439         move    #>$78,a
P:0382 60F400 rrrrrr  3 199223440         move    #FShutdownMenu,r0
P:0384 0BF080 rrrrrr  6 199823441         jsr     SysCallFunction
                            23442 
                            23443 ; 330  |                    // If user chooses to return then update display.  If doesn't return, 
                                  player was powered down.
                            23444 ; 331  |                    DisplayHint.I |= (TIME_DATE_MENU_DISPLAY_ALL|(1<<DISPLAY_CLEAR_DISPLAY
                                  _BITPOS));
                            23445 
P:0386 77F400 FFFFEC  3 200123447         move    #-20,n7
P:0388 000000         2 200323448         nop
P:0389 4FEF00         4 200723449         move    y:(r7+n7),y1
P:038A 0AC760         4 201123450         bset    #0,y1
P:038B 4F6F00         4 201523451         move    y1,y:(r7+n7)
                            23452 
                            23453 ; 332  |
                            23454 ; 333  |                    bDone = TRUE;
                            23455 
P:038C 44F400 000001  3 201823457         move    #>1,x0
P:038E 77F400 FFFFED  3 202123460         move    #-19,n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 379

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0390 000000         2 202323461         nop
P:0391 4C6F00         4 202723462         move    x0,y:(r7+n7)
                            23465 
                            23466 ; 334  |                    bSendToPlayerStateMachine = FALSE;
                            23467 
P:0392 290000         2 202923469 L229:   move    #0,b0
P:0393 045FA0         2 203123472         movec   m0,n7
P:0394 000000         2 203323473         nop
P:0395 596F00         4 203723474         move    b0,y:(r7+n7)
                            23477 
                            23478 ; 335  |                    break;
                            23479 ; 336  |            } // end switch(wButtonEvent)
                            23480 ; 337  |        } // end switch(iEvent)
                            23481 ; 338  |
                            23482 ; 339  |        if(bSendToPlayerStateMachine)
                            23483 
P:0396 045FA0         2 203923485 L238:   movec   m0,n7
P:0397 000000         2 204123486         nop
P:0398 5FEF00         4 204523487         move    y:(r7+n7),b
P:0399 2B0000         2 204723488         move    #0,b2
P:039A 20000B         2 204923489         tst     b
P:039B 0AF0AA rrrrrr  6 205523492         jeq     L239
                            23493 
                            23494 ; 340  |            DisplayHint.I |= SysCallFunction(RSRC_PLAY_STATE_MACHINE_CODE_BANK,HandlePlaye
                                  rStateMachine,iEvent,0,pPtr);
                            23495 
P:039D 77F400 FFFFF7  3 205823497         move    #-9,n7
P:039F 000000         2 206023498         nop
P:03A0 6CEF00         4 206423499         move    y:(r7+n7),r4
P:03A1 240000         2 206623502         move    #0,x0
P:03A2 56F400 000011  3 206923503         move    #>17,a
P:03A4 77F400 FFFFFE  3 207223504         move    #-2,n7
P:03A6 000000         2 207423505         nop
P:03A7 5FEF00         4 207823506         move    y:(r7+n7),b
P:03A8 60F400 rrrrrr  3 208123507         move    #FHandlePlayerStateMachine,r0
P:03AA 0BF080 rrrrrr  6 208723508         jsr     SysCallFunction
P:03AC 77F400 FFFFEC  3 209023515         move    #-20,n7
P:03AE 000000         2 209223516         nop
P:03AF 5DEF00         4 209623517         move    y:(r7+n7),b1
P:03B0 21C600         2 209823518         move    a,y0
P:03B1 20005A         2 210023519         or      y0,b
P:03B2 5D6F00         4 210423520         move    b1,y:(r7+n7)
                            23521 
                            23522 ; 341  |        
                            23523 ; 342  |        iPreviousCursorPosition = iCursorPosition;    
                            23524 
P:03B3 77F400 FFFFF4  3 210723526 L239:   move    #-12,n7
P:03B5 000000         2 210923527         nop
P:03B6 5EEF00         4 211323528         move    y:(r7+n7),a
P:03B7 77F400 FFFFED  3 211623531 L240:   move    #-19,n7
P:03B9 000000         2 211823532         nop
P:03BA 5FEF00         4 212223533         move    y:(r7+n7),b
P:03BB 2B0000         2 212423534         move    #0,b2
P:03BC 20000B         2 212623535         tst     b
P:03BD 0AF0AA rrrrrr  6 213223536         jeq     L165
                            23537 
                            23538 ; 343  |    } // end while(!bDone)
                            23539 ; 344  |
                            23540 ; 345  |    if(bTimeModify_mode)     // (SDK2.520)
                            23541 
P:03BF 77F400 FFFFF1  3 213523543         move    #-15,n7
P:03C1 000000         2 213723544         nop
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 380

M:ADDR CODE           CYCLES LINE SOURCELINE
P:03C2 5EEF00         4 214123545         move    y:(r7+n7),a
P:03C3 200003         2 214323546         tst     a
P:03C4 0AF0AA rrrrrr  6 214923549         jeq     L241
                            23550 
                            23551 ; 346  |    {
                            23552 ; 347  |        SysPostMessage(3,SOFT_TIMER_KILL_TIMER,TIMER_ANIMATE);
                            23553 
P:03C6 20001B         2 215123555         clr     b   
P:03C7 5D5F00         2 215323556         move    b1,y:(r7)+
P:03C8 44F400 090002  3 215623558         move    #589826,x0
P:03CA 4C5F00         2 215823559         move    x0,y:(r7)+
P:03CB 290300         2 216023561         move    #3,b0
P:03CC 595F00         2 216223562         move    b0,y:(r7)+
P:03CD 0BF080 rrrrrr  6 216823564         jsr     FSysPostMessage
P:03CF 3F0300         2 217023565         move    #3,n7
P:03D0 000000         2 217223566         nop
P:03D1 204700         2 217423567         move    (r7)-n7
                            23571 
                            23572 ; 348  |        SysWaitOnEvent(0,0,0);      // let system process SOFT_TIMER_KILL_TIMER msg
                            23573 
P:03D2 300000         2 217623575         move    #0,r0
P:03D3 20001B         2 217823576         clr     b   
P:03D4 200013         2 218023577         clr     a   
P:03D5 0BF080 rrrrrr  6 218623578         jsr     SysWaitOnEvent
                            23579 
                            23580 ; 349  |    }
                            23581 ; 350  |    //Stmp00008949
                            23582 ; 351  |    if(bTimeModified == TRUE)
                            23583 
P:03D7 77F400 FFFFF2  3 218923585 L241:   move    #-14,n7
P:03D9 000000         2 219123586         nop
P:03DA 5FEF00         4 219523587         move    y:(r7+n7),b
P:03DB 46F400 000001  3 219823588         move    #>1,y0
P:03DD 20005D         2 220023589         cmp     y0,b
P:03DE 0AF0A2 rrrrrr  6 220623592         jne     L243
                            23593 
                            23594 ; 352  |    {   if(g_wDecoderSR&DECODER_STOPPED)
                            23595 
P:03E0 55F000 rrrrrr  3 220923597         move    x:Fg_wDecoderSR,b1
P:03E2 47F400 000040  3 221223599         move    #>$40,y1
P:03E4 20007E         2 221423600         and     y1,b
P:03E5 21AF00         2 221623601         move    b1,b
P:03E6 2B0000         2 221823602         move    #0,b2
P:03E7 20000B         2 222023603         tst     b
P:03E8 0AF0AA rrrrrr  6 222623604         jeq     L243
                            23605 
                            23606 ; 353  |        {   SysLoadFATWrite();
                            23607 
P:03EA 0BF080 rrrrrr  6 223223609         jsr     SysLoadFATWrite
                            23610 
                            23611 ; 354  |            SaveUserTime();
                            23612 
P:03EC 0BF080 rrrrrr  6 223823614         jsr     FSaveUserTime
                            23615 
                            23616 ; 355  |            SysUnLoadFATWrite();
                            23617 
P:03EE 0BF080 rrrrrr  6 224423619         jsr     SysUnLoadFATWrite
                            23620 
                            23621 ; 356  |        }
                            23622 ; 357  |    }
                            23623 ; 358  |    return iNextMenu;
                            23624 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 381

M:ADDR CODE           CYCLES LINE SOURCELINE
P:03F0 56F400 000006  3 224723626 L243:   move    #>6,a
                            23627 
                            23628 ; 359  |} // end of SetTimeMenu()
                            23629 
P:03F2 77F400 FFFFEB  3 225023631         move    #-21,n7
P:03F4 000000         2 225223632         nop
P:03F5 05EF7C         4 225623633         movec   y:(r7+n7),ssh
P:03F6 204F00         2 225823635         move    (r7)+n7
P:03F7 00000C         4 226223637         rts
                            23649 
                            23650 ; 360  |
                            23651 ; 361  |
                            23652 ; 362  |/////////////////////////////////////////////////////////////////////////////////////////
                            23653 ; 363  |//
                            23654 ; 364  |//>  Name:          _reentrant void SetTime(int iHours,int iMinutes,int iSeconds)
                            23655 ; 365  |//
                            23656 ; 366  |//   Type:          Function
                            23657 ; 367  |//
                            23658 ; 368  |//   Description:    Set RTC to values passed in   
                            23659 ; 369  |//
                            23660 ; 370  |//   Inputs:        iHours,iMinutes,iSeconds        
                            23661 ; 371  |//
                            23662 ; 372  |//   Outputs:       Sets RTC with new time
                            23663 ; 373  |//
                            23664 ; 374  |//   Notes:         
                            23665 ; 375  |//<
                            23666 ; 376  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                            23667 ; 377  |
                            23668 ; 378  |_reentrant void SetTime(int iHours,int iMinutes,int iSeconds){
                            23669 
                            23674 FSetTime:
P:03F8 055F7C         2 226423675         movec   ssh,y:(r7)+
P:03F9 3F0500         2 226623678         move    #5,n7
P:03FA 000000         2 226823679         nop
P:03FB 204F00         2 227023680         move    (r7)+n7
                            23696 
                            23697 ; 379  |        
                            23698 ; 380  |        int iTotalDays;
                            23699 ; 381  |    long lRTCTime;
                            23700 ; 382  |    long Usertime, Diff;
                            23701 
P:03FC 77F400 FFFFFD  3 227323703         move    #-3,n7
P:03FE 000000         2 227523704         nop
P:03FF 4C6F00         4 227923705         move    x0,y:(r7+n7)
P:0400 77F400 FFFFFC  3 228223708         move    #-4,n7
P:0402 000000         2 228423709         nop
P:0403 5D6F00         4 228823710         move    b1,y:(r7+n7)
P:0404 77F400 FFFFFB  3 229123713         move    #-5,n7
P:0406 000000         2 229323714         nop
P:0407 5C6F00         4 229723715         move    a1,y:(r7+n7)
                            23718 
                            23719 ; 383  |         
                            23720 ; 384  |        // Save date  (truncate RTC value to leave number of days passed) //
                            23721 ; 385  |        lRTCTime = ReadRTC();
                            23722 
P:0408 0BF080 rrrrrr  6 230323724         jsr     FReadRTC
                            23726 
                            23727 ; 386  |        lRTCTime /= 1000;       //now has seconds
                            23728 
P:040A 20001B         2 230523730         clr     b   
P:040B 51F400 0003E8  3 230823731         move    #1000,b0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 382

M:ADDR CODE           CYCLES LINE SOURCELINE
P:040D 0BF080 rrrrrr  6 231423732         jsr     Rdiv_lll
                            23733 
                            23734 ; 387  |    
                            23735 ; 388  |    lRTCTime += g_UserTimeoffset; // Current Time According to the user.
                            23736 
P:040F 4EF000 rrrrrr  3 231723738         move    y:Fg_UserTimeoffset,y0
P:0411 4FF000 rrrrrr  3 232023739         move    y:Fg_UserTimeoffset+1,y1
P:0413 200030         2 232223740         add     y,a
                            23741 
                            23742 ; 389  |    
                            23743 ; 390  |        iTotalDays = (unsigned int) (lRTCTime/86400);   //now has number of days that have
                                   passed (86400 seconds per day)
                            23744 
P:0414 77F400 FFFFFE  3 232523746         move    #-2,n7
P:0416 205F00         2 232723747         move    (r7)+
P:0417 5C6F00         4 233123749         move    a1,y:(r7+n7)
P:0418 205700         2 233323750         move    (r7)-
P:0419 586F00         4 233723752         move    a0,y:(r7+n7)
P:041A 20001B         2 233923753         clr     b   
P:041B 51F400 015180  3 234223754         move    #86400,b0
P:041D 0BF080 rrrrrr  6 234823755         jsr     Rdiv_lll
P:041F 210700         2 235023758         move    a0,y1
                            23760 
                            23761 ; 391  |        
                            23762 ; 392  |        // Write new value to RTC //    
                            23763 ; 393  |    Usertime=((unsigned long) iTotalDays * 86400)+ ((unsigned long) iHours * 3600)+ ((unsi
                                  gned long) iMinutes * 60)+ ((unsigned long) iSeconds);
                            23764 
P:0420 45F400 015180  3 235323766         move    #86400,x1
P:0422 2000F0         2 235523767         mpy     y1,x1,a
P:0423 200022         2 235723768         asr     a
P:0424 77F400 FFFFFB  3 236023769         move    #-5,n7
P:0426 000000         2 236223770         nop
P:0427 4DEF00         4 236623771         move    y:(r7+n7),x1
P:0428 46F400 000E10  3 236923772         move    #3600,y0
P:042A 200032         2 237123773         asl     a
P:042B 2000E2         2 237323774         mac     x1,y0,a
P:042C 200022         2 237523775         asr     a
P:042D 77F400 FFFFFC  3 237823778         move    #-4,n7
P:042F 000000         2 238023779         nop
P:0430 4CEF00         4 238423780         move    y:(r7+n7),x0
P:0431 46F400 00003C  3 238723781         move    #>$3C,y0
P:0433 200032         2 238923782         asl     a
P:0434 2000D2         2 239123783         mac     x0,y0,a
P:0435 200022         2 239323784         asr     a
P:0436 77F400 FFFFFD  3 239623787         move    #-3,n7
P:0438 000000         2 239823788         nop
P:0439 5FEF00         4 240223789         move    y:(r7+n7),b
P:043A 21A900         2 240423790         move    b1,b0
P:043B 216D00         2 240623791         move    b2,b1
P:043C 200018         2 240823795         add     a,b
                            23797 
                            23798 ; 394  |
                            23799 ; 395  |    if(lRTCTime >= Usertime) 
                            23800 
P:043D 77F400 FFFFFE  3 241123802         move    #-2,n7
P:043F 205F00         2 241323803         move    (r7)+
P:0440 5EEF00         4 241723805         move    y:(r7+n7),a
P:0441 205700         2 241923806         move    (r7)-
P:0442 58EF00         4 242323808         move    y:(r7+n7),a0
P:0443 200005         2 242523809         cmp     b,a
P:0444 0AF0A9 rrrrrr  6 243123810         jlt     L247
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 383

M:ADDR CODE           CYCLES LINE SOURCELINE
                            23811 
                            23812 ; 396  |    {
                            23813 ; 397  |        Diff = -(lRTCTime - Usertime);// - (unsigned long) iTotalDays * 86400);
                            23814 
P:0446 205F00         2 243323816         move    (r7)+
P:0447 5EEF00         4 243723818         move    y:(r7+n7),a
P:0448 205700         2 243923819         move    (r7)-
P:0449 58EF00         4 244323821         move    y:(r7+n7),a0
P:044A 200014         2 244523822         sub     b,a
P:044B 200036         2 244723826         neg     a
P:044C 210600         2 244923827         move    a0,y0
P:044D 218700         2 245123828         move    a1,y1
                            23831 
                            23832 ; 398  |    } 
                            23833 
P:044E 0AF080 rrrrrr  6 245723835         jmp     L248
                            23836 
                            23837 ; 399  |    else
                            23838 ; 400  |    {
                            23839 ; 401  |        Diff = (Usertime - lRTCTime); //- (unsigned long) iTotalDays * 86400);    
                            23840 
                            23842 L247:
P:0450 205F00         2 245923844         move    (r7)+
P:0451 4FEF00         4 246323846         move    y:(r7+n7),y1
P:0452 205700         2 246523847         move    (r7)-
P:0453 4EEF00         4 246923849         move    y:(r7+n7),y0
P:0454 20003C         2 247123850         sub     y,b
P:0455 212600         2 247323854         move    b0,y0
P:0456 21A700         2 247523855         move    b1,y1
                            23857 
                            23858 ; 402  |    }
                            23859 ; 403  |    g_UserTimeoffset += Diff;
                            23860 
P:0457 5FF000 rrrrrr  3 247823862 L248:   move    y:Fg_UserTimeoffset+1,b
P:0459 59F000 rrrrrr  3 248123863         move    y:Fg_UserTimeoffset,b0
P:045B 200038         2 248323864         add     y,b
P:045C 5D7000 rrrrrr  3 248623865         move    b1,y:Fg_UserTimeoffset+1
P:045E 597000 rrrrrr  3 248923866         move    b0,y:Fg_UserTimeoffset
                            23867 
                            23868 ; 404  |}
                            23869 
P:0460 77F400 FFFFFA  3 249223871         move    #-6,n7
P:0462 000000         2 249423872         nop
P:0463 05EF7C         4 249823873         movec   y:(r7+n7),ssh
P:0464 204F00         2 250023875         move    (r7)+n7
P:0465 00000C         4 250423877         rts
                            23882 
                            23883 ; 405  |
                            23884 ; 406  |
                            23885 ; 407  |/////////////////////////////////////////////////////////////////////////////////////////
                            23886 ; 408  |//
                            23887 ; 409  |//>  Name:          _reentrant void DisplayChangeTime(int iCursorPosition ,int iInvert, in
                                  t iHours,
                            23888 ; 410  |//                                                int iMinutes,int iSeconds,int l_iTimeFor
                                  mat)
                            23889 ; 411  |//
                            23890 ; 412  |//   Type:          Function
                            23891 ; 413  |//
                            23892 ; 414  |//   Description:   Displays the day of week, date and format for user to change and set. 
                                   
                            23893 ; 415  |//
                            23894 ; 416  |//   Inputs:        iCursorPosition - indicates which band gain to display
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 384

M:ADDR CODE           CYCLES LINE SOURCELINE
                            23895 ; 417  |//                    bDisplayLabels - indicates whether or not to display dB level & Hert
                                  z text
                            23896 ; 418  |//                    bInvert - determines whether or not to invert the gain field ??
                            23897 ; 419  |//
                            23898 ; 420  |//   Outputs:       Updates the display to reflect user selections
                            23899 ; 421  |//
                            23900 ; 422  |//   Notes:         
                            23901 ; 423  |//<
                            23902 ; 424  |//////////////////////////////////////////////////////////////////////////////////////////
                                  
                            23903 ; 425  |
                            23904 ; 426  |_reentrant void DisplayChangeTime(int iCursorPosition ,int iPreviousCursorPosition,int iIn
                                  vert, int iHours,int iMinutes,int iSeconds, int l_iTimeFormat) {
                            23905 
                            23910 FDisplayChangeTime:
P:0466 055F7C         2 250623911         movec   ssh,y:(r7)+
P:0467 3F0800         2 250823914         move    #8,n7
P:0468 000000         2 251023915         nop
P:0469 204F00         2 251223916         move    (r7)+n7
                            23933 
                            23934 ; 427  |    int iHourMode =     LCD_PRINT_NUMBER;
                            23935 
P:046A 77F400 FFFFFB  3 251523937         move    #-5,n7
P:046C 000000         2 251723938         nop
P:046D 4D6F00         4 252123939         move    x1,y:(r7+n7)
P:046E 77F400 FFFFF9  3 252423942         move    #-7,n7
P:0470 000000         2 252623943         nop
P:0471 5D6F00         4 253023944         move    b1,y:(r7+n7)
P:0472 55F400 030013  3 253323947         move    #196627,b1
                            23951 
                            23952 ; 428  |    int iMinuteMode =   LCD_PRINT_NUMBER;
                            23953 
P:0474 21A700         2 253523955         move    b1,y1
P:0475 77F400 FFFFFC  3 253823957         move    #-4,n7
P:0477 000000         2 254023958         nop
P:0478 4F6F00         4 254423959         move    y1,y:(r7+n7)
                            23966 
                            23967 ; 429  |    int iSecondMode =   LCD_PRINT_NUMBER;
                            23968 ; 430  |    int iFormatMode =   LCD_PRINT_STRING_RSRC;
                            23969 
P:0479 47F400 030007  3 254723971         move    #196615,y1
P:047B 77F400 FFFFFD  3 255023973         move    #-3,n7
P:047D 000000         2 255223974         nop
P:047E 4F6F00         4 255623975         move    y1,y:(r7+n7)
                            23980 
                            23981 ; 431  |    int iOkMode =       LCD_PRINT_STRING_RSRC;        
                            23982 
P:047F 20E500         2 255823984         move    y1,x1
P:0480 77F400 FFFFFE  3 256123986         move    #-2,n7
P:0482 000000         2 256323987         nop
P:0483 4D6F00         4 256723988         move    x1,y:(r7+n7)
                            23993 
                            23994 ; 432  |    int iCancelMode =   LCD_PRINT_STRING_RSRC;
                            23995 
P:0484 20A900         2 256923997         move    x1,b0
P:0485 045FA0         2 257123999         movec   m0,n7
P:0486 000000         2 257324000         nop
P:0487 596F00         4 257724001         move    b0,y:(r7+n7)
                            24004 
                            24005 ; 433  |
                            24006 ; 434  |    switch(iCursorPosition){
                            24007 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 385

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0488 218500         2 257924009         move    a1,x1
P:0489 65F403 rrrrrr  3 258224010         tst     a       #L432,r5
P:048B 0AF0AB rrrrrr  6 258824011         jmi     L389
P:048D 47F400 000005  3 259124012         move    #>5,y1
P:048F 21DD75         2 259324013         cmp     y1,a    a,n5
P:0490 0AF0A7 rrrrrr  6 259924014         jgt     L389
P:0492 07ED95         8 260724015         movem   p:(r5+n5),r5
P:0493 000000         2 260924016         nop
P:0494 0AE580         4 261324017         jmp     (r5)
                            24018 
P:0495 rrrrrr               24019 L432:   dc      L373    ; case 0:
P:0496 rrrrrr               24020         dc      L374    ; case 1:
P:0497 rrrrrr               24021         dc      L375    ; case 2:
P:0498 rrrrrr               24022         dc      L376    ; case 3:
P:0499 rrrrrr               24023         dc      L377    ; case 4:
P:049A rrrrrr               24024         dc      L378    ; case 5:
                            24025 
                            24028 
                            24029 ; 435  |        case HOUR_SELECT:
                            24030 ; 436  |            if(iInvert)    iHourMode = LCD_PRINT_NUMBER_INV;
                            24031 
P:049B 200041         2 261524033 L373:   tfr     x0,a
P:049C 200003         2 261724034         tst     a
P:049D 0AF0AA rrrrrr  6 262324037         jeq     L389
                            24038 
                            24039 ; 437  |            break;
                            24040 
P:049F 0AF080 rrrrrr  6 262924042         jmp     L379
                            24043 
                            24044 ; 438  |        case MINUTE_SELECT:
                            24045 ; 439  |            if(iInvert) iMinuteMode =  LCD_PRINT_NUMBER_INV;
                            24046 
                            24048 L374:
P:04A1 200041         2 263124051         tfr     x0,a
P:04A2 200003         2 263324052         tst     a
P:04A3 0AF0AA rrrrrr  6 263924055         jeq     L389
P:04A5 51F400 03001C  3 264224056         move    #196636,b0
P:04A7 77F400 FFFFFC  3 264524059         move    #-4,n7
P:04A9 000000         2 264724060         nop
P:04AA 596F00         4 265124061         move    b0,y:(r7+n7)
                            24064 
                            24065 ; 440  |            break;
                            24066 
P:04AB 0AF080 rrrrrr  6 265724068         jmp     L389
                            24069 
                            24070 ; 441  |        case TIMEFORMAT_SELECT:
                            24071 ; 442  |            if(iInvert) iFormatMode = LCD_PRINT_STRING_INV_RSRC;
                            24072 
                            24074 L375:
P:04AD 200041         2 265924077         tfr     x0,a
P:04AE 200003         2 266124078         tst     a
P:04AF 0AF0AA rrrrrr  6 266724081         jeq     L389
P:04B1 50F400 030009  3 267024082         move    #196617,a0
P:04B3 77F400 FFFFFD  3 267324085         move    #-3,n7
P:04B5 000000         2 267524086         nop
P:04B6 586F00         4 267924087         move    a0,y:(r7+n7)
                            24090 
                            24091 ; 443  |            break;
                            24092 
P:04B7 0AF080 rrrrrr  6 268524094         jmp     L389
                            24095 
                            24096 ; 444  |        case TIMEOK_SELECT:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 386

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24097 ; 445  |            if(iInvert) iOkMode = LCD_PRINT_STRING_INV_RSRC;
                            24098 
                            24100 L376:
P:04B9 200041         2 268724103         tfr     x0,a
P:04BA 200003         2 268924104         tst     a
P:04BB 0AF0AA rrrrrr  6 269524107         jeq     L389
P:04BD 54F400 030009  3 269824108         move    #196617,a1
P:04BF 77F400 FFFFFE  3 270124111         move    #-2,n7
P:04C1 000000         2 270324112         nop
P:04C2 5C6F00         4 270724113         move    a1,y:(r7+n7)
                            24116 
                            24117 ; 446  |            break;
                            24118 
P:04C3 0AF080 rrrrrr  6 271324120         jmp     L389
                            24121 
                            24122 ; 447  |        case TIMECANCEL_SELECT:
                            24123 ; 448  |            if(iInvert) iCancelMode = LCD_PRINT_STRING_INV_RSRC;
                            24124 
                            24126 L377:
P:04C5 200041         2 271524129         tfr     x0,a
P:04C6 200003         2 271724130         tst     a
P:04C7 0AF0AA rrrrrr  6 272324133         jeq     L389
                            24134 
                            24135 ; 449  |            break;
                            24136 ; 450  |        case TIME_SELECT_ALL:
                            24137 ; 451  |            iCancelMode = LCD_PRINT_STRING_INV_RSRC;
                            24138 
P:04C9 56F400 030009  3 272624140 L378:   move    #196617,a
P:04CB 045FA0         2 272824143         movec   m0,n7
P:04CC 000000         2 273024144         nop
P:04CD 5E6F00         4 273424145         move    a,y:(r7+n7)
                            24148 
                            24149 ; 452  |            break;
                            24150 
P:04CE 0AF080 rrrrrr  6 274024152         jmp     L389
P:04D0 55F400 03001C  3 274324154 L379:   move    #196636,b1
                            24155 
                            24156 ; 453  |        default:
                            24157 ; 454  |            break;
                            24158 ; 455  |        }
                            24159 ; 456  |
                            24160 ; 457  |    
                            24161 ; 458  |
                            24162 ; 459  |    if(iCursorPosition==HOUR_SELECT)
                            24163 
P:04D2 200061         2 274524165 L389:   tfr     x1,a
P:04D3 77F400 FFFFF8  3 274824166         move    #-8,n7
P:04D5 000000         2 275024167         nop
P:04D6 5E6F00         4 275424168         move    a,y:(r7+n7)
P:04D7 200003         2 275624169         tst     a
P:04D8 0AF0A2 rrrrrr  6 276224172         jne     L394
                            24173 
                            24174 ; 460  |    {
                            24175 ; 461  |        switch(l_iTimeFormat) {
                            24176 
P:04DA 77F400 FFFFF6  3 276524178         move    #-10,n7
P:04DC 000000         2 276724179         nop
P:04DD 5EEF00         4 277124180         move    y:(r7+n7),a
P:04DE 47F400 000001  3 277424181         move    #>1,y1
P:04E0 200075         2 277624182         cmp     y1,a
P:04E1 0AF0AA rrrrrr  6 278224183         jeq     L393
P:04E3 200003         2 278424184         tst     a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 387

M:ADDR CODE           CYCLES LINE SOURCELINE
P:04E4 0AF0A2 rrrrrr  6 279024185         jne     L411
                            24186 
                            24187 ; 462  |        case TIMEFORMAT_12HOUR:
                            24188 ; 463  |        // Display Hours //
                            24189 ; 464  |        
                            24190 ; 465  |            if(iHours == 0)
                            24191 
P:04E6 200051         2 279224193         tfr     y0,a
P:04E7 77F400 FFFFFA  3 279524194         move    #-6,n7
P:04E9 000000         2 279724195         nop
P:04EA 5E6F00         4 280124196         move    a,y:(r7+n7)
P:04EB 200003         2 280324197         tst     a
P:04EC 0AF0A2 rrrrrr  6 280924200         jne     L391
                            24201 
                            24202 ; 466  |                PrintNumberSetTime(iHourMode,HOUR_X_POS,HOUR_Y_POS,12,2,'0');
                            24203 
P:04EE 21AE00         2 281124205         move    b1,a
P:04EF 57F400 000010  3 281424206         move    #>16,b
P:04F1 44F400 000020  3 281724207         move    #>$20,x0
P:04F3 46F400 00000C  3 282024208         move    #>12,y0
P:04F5 45F400 000002  3 282324209         move    #>2,x1
P:04F7 47F400 000030  3 282624210         move    #>$30,y1
P:04F9 0BF080 rrrrrr  6 283224211         jsr     FPrintNumberSetTime
P:04FB 0AF080 rrrrrr  6 283824215         jmp     L403
                            24216 
                            24217 ; 467  |            else if(iHours > 12)
                            24218 
                            24220 L391:
P:04FD 47F400 00000C  3 284124222         move    #>12,y1
P:04FF 200075         2 284324223         cmp     y1,a
P:0500 0AF0AF rrrrrr  6 284924226         jle     L392
                            24227 
                            24228 ; 468  |                PrintNumberSetTime(iHourMode,HOUR_X_POS,HOUR_Y_POS,iHours-12,2,'0');
                            24229 
P:0502 200074         2 285124231         sub     y1,a
P:0503 218600         2 285324234         move    a1,y0
P:0504 21AE00         2 285524235         move    b1,a
P:0505 57F400 000010  3 285824236         move    #>16,b
P:0507 44F400 000020  3 286124237         move    #>$20,x0
P:0509 45F400 000002  3 286424238         move    #>2,x1
P:050B 47F400 000030  3 286724239         move    #>$30,y1
P:050D 0BF080 rrrrrr  6 287324240         jsr     FPrintNumberSetTime
P:050F 0AF080 rrrrrr  6 287924242         jmp     L403
                            24243 
                            24244 ; 469  |            else                                               
                            24245 ; 470  |               PrintNumberSetTime(iHourMode,HOUR_X_POS,HOUR_Y_POS,iHours,2,'0');
                            24246 
                            24248 L392:
P:0511 5C6F00         4 288324252         move    a1,y:(r7+n7)
P:0512 218600         2 288524253         move    a1,y0
P:0513 21AE00         2 288724258         move    b1,a
P:0514 57F400 000010  3 289024259         move    #>16,b
P:0516 45F400 000002  3 289324260         move    #>2,x1
P:0518 44F400 000020  3 289624261         move    #>$20,x0
P:051A 47F400 000030  3 289924262         move    #>$30,y1
P:051C 0BF080 rrrrrr  6 290524263         jsr     FPrintNumberSetTime
                            24267 
                            24268 ; 471  |        
                            24269 ; 472  |            // Display AM/PM //        
                            24270 ; 473  |            if(iHours >= 12)
                            24271 
P:051E 0AF080 rrrrrr  6 291124273         jmp     L403
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 388

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24274 
                            24275 ; 474  |                PrintStringSetTime(LCD_PRINT_STRING_RSRC,HOUR_X_POS+32,HOUR_Y_POS,RSRC_STR
                                  ING_PM);
                            24276 ; 475  |            else
                            24277 ; 476  |                PrintStringSetTime(LCD_PRINT_STRING_RSRC,HOUR_X_POS+32,HOUR_Y_POS,RSRC_STR
                                  ING_AM);
                            24278 ; 477  |            break;
                            24279 ; 478  |
                            24280 ; 479  |        case TIMEFORMAT_24HOUR:
                            24281 ; 480  |            // Display hours and minutes //
                            24282 ; 481  |            PrintNumberSetTime(iHourMode,HOUR_X_POS,HOUR_Y_POS,iHours,2,'0');
                            24283 
                            24285 L393:
P:0520 44F400 000020  3 291424289         move    #>$20,x0
P:0522 47F400 000030  3 291724290         move    #>$30,y1
P:0524 45F400 000002  3 292024291         move    #>2,x1
P:0526 21AE00         2 292224292         move    b1,a
P:0527 57F400 000010  3 292524293         move    #>16,b
P:0529 0BF080 rrrrrr  6 293124294         jsr     FPrintNumberSetTime
                            24297 
                            24298 ; 482  |            PrintNumberSetTime(iMinuteMode,HOUR_X_POS+16,HOUR_Y_POS,iMinutes,2,'0');
                            24299 
P:052B 44F400 000020  3 293424301         move    #>$20,x0
P:052D 200049         2 293624302         tfr     x0,b
P:052E 77F400 FFFFFC  3 293924303         move    #-4,n7
P:0530 000000         2 294124304         nop
P:0531 5EEF00         4 294524305         move    y:(r7+n7),a
P:0532 77F400 FFFFFB  3 294824308         move    #-5,n7
P:0534 000000         2 295024309         nop
P:0535 4EEF00         4 295424310         move    y:(r7+n7),y0
P:0536 47F400 000030  3 295724313         move    #>$30,y1
P:0538 45F400 000002  3 296024314         move    #>2,x1
P:053A 0BF080 rrrrrr  6 296624315         jsr     FPrintNumberSetTime
                            24320 
                            24321 ; 483  |    
                            24322 ; 484  |            // Clear AM/PM
                            24323 ; 485  |            PrintStringSetTime(LCD_PRINT_STRING_RSRC,HOUR_X_POS+32,HOUR_Y_POS,RSRC_STRING_
                                  AMCLEAR);
                            24324 
P:053C 0AF080 rrrrrr  6 297224326         jmp     L406
                            24327 
                            24328 ; 486  |            break;
                            24329 ; 487  |        }
                            24330 ; 488  |    }
                            24331 ; 489  |    else if((iPreviousCursorPosition==HOUR_SELECT)||(iCursorPosition==TIME_SELECT_ALL))
                            24332 
                            24334 L394:
P:053E 77F400 FFFFF9  3 297524336         move    #-7,n7
P:0540 000000         2 297724337         nop
P:0541 5FEF00         4 298124338         move    y:(r7+n7),b
P:0542 20000B         2 298324339         tst     b
P:0543 0AF0AA rrrrrr  6 298924340         jeq     L395
P:0545 77F400 FFFFF8  3 299224341         move    #-8,n7
P:0547 45F400 000005  3 299524342         move    #>5,x1
P:0549 200065         2 299724343         cmp     x1,a
P:054A 0AF0A2 rrrrrr  6 300324344         jne     L411
                            24345 
                            24346 ; 490  |    {
                            24347 ; 491  |        switch(l_iTimeFormat) {
                            24348 
P:054C 77F400 FFFFF6  3 300624350 L395:   move    #-10,n7
P:054E 000000         2 300824351         nop
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 389

M:ADDR CODE           CYCLES LINE SOURCELINE
P:054F 5EEF00         4 301224352         move    y:(r7+n7),a
P:0550 57F400 000001  3 301524353         move    #>1,b
P:0552 200005         2 301724354         cmp     b,a
P:0553 0AF0AA rrrrrr  6 302324355         jeq     L405
P:0555 200003         2 302524356         tst     a
P:0556 0AF0A2 rrrrrr  6 303124357         jne     L411
                            24358 
                            24359 ; 492  |        case TIMEFORMAT_12HOUR:
                            24360 ; 493  |        // Display Hours //
                            24361 ; 494  |        
                            24362 ; 495  |            if(iHours == 0)
                            24363 
P:0558 200051         2 303324365         tfr     y0,a
P:0559 77F400 FFFFFA  3 303624366         move    #-6,n7
P:055B 000000         2 303824367         nop
P:055C 5E6F00         4 304224368         move    a,y:(r7+n7)
P:055D 200003         2 304424369         tst     a
P:055E 0AF0A2 rrrrrr  6 305024372         jne     L397
                            24373 
                            24374 ; 496  |                PrintNumberSetTime(LCD_PRINT_NUMBER,HOUR_X_POS,HOUR_Y_POS,12,2,'0');
                            24375 
P:0560 56F400 030013  3 305324377         move    #196627,a
P:0562 57F400 000010  3 305624378         move    #>16,b
P:0564 44F400 000020  3 305924379         move    #>$20,x0
P:0566 46F400 00000C  3 306224380         move    #>12,y0
P:0568 45F400 000002  3 306524381         move    #>2,x1
P:056A 47F400 000030  3 306824382         move    #>$30,y1
P:056C 0BF080 rrrrrr  6 307424383         jsr     FPrintNumberSetTime
P:056E 0AF080 rrrrrr  6 308024384         jmp     L403
                            24385 
                            24386 ; 497  |            else if(iHours > 12)
                            24387 
P:0570 5FEF00         4 308424389 L397:   move    y:(r7+n7),b
P:0571 46F400 00000C  3 308724390         move    #>12,y0
P:0573 20005D         2 308924391         cmp     y0,b
P:0574 0AF0AF rrrrrr  6 309524394         jle     L398
                            24395 
                            24396 ; 498  |                PrintNumberSetTime(LCD_PRINT_NUMBER,HOUR_X_POS,HOUR_Y_POS,iHours-12,2,'0')
                                  ;
                            24397 
P:0576 20005C         2 309724399         sub     y0,b
P:0577 56F400 030013  3 310024402         move    #196627,a
P:0579 44F400 000020  3 310324403         move    #>$20,x0
P:057B 21A600         2 310524404         move    b1,y0
P:057C 57F400 000010  3 310824405         move    #>16,b
P:057E 45F400 000002  3 311124406         move    #>2,x1
P:0580 47F400 000030  3 311424407         move    #>$30,y1
P:0582 0BF080 rrrrrr  6 312024408         jsr     FPrintNumberSetTime
P:0584 0AF080 rrrrrr  6 312624409         jmp     L403
                            24410 
                            24411 ; 499  |            else                                               
                            24412 ; 500  |               PrintNumberSetTime(LCD_PRINT_NUMBER,HOUR_X_POS,HOUR_Y_POS,iHours,2,'0');
                            24413 
                            24415 L398:
P:0586 5D6F00         4 313024418         move    b1,y:(r7+n7)
P:0587 21A600         2 313224419         move    b1,y0
P:0588 56F400 030013  3 313524424         move    #196627,a
P:058A 57F400 000010  3 313824425         move    #>16,b
P:058C 44F400 000020  3 314124426         move    #>$20,x0
P:058E 45F400 000002  3 314424427         move    #>2,x1
P:0590 47F400 000030  3 314724428         move    #>$30,y1
P:0592 0BF080 rrrrrr  6 315324429         jsr     FPrintNumberSetTime
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 390

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24432 
                            24433 ; 501  |        
                            24434 ; 502  |            // Display AM/PM //        
                            24435 ; 503  |            if(iHours >= 12)
                            24436 
P:0594 77F400 FFFFFA  3 315624438 L403:   move    #-6,n7
P:0596 000000         2 315824439         nop
P:0597 5FEF00         4 316224440         move    y:(r7+n7),b
P:0598 44F400 00000C  3 316524441         move    #>12,x0
P:059A 20004D         2 316724442         cmp     x0,b
P:059B 0AF0A9 rrrrrr  6 317324445         jlt     L404
                            24446 
                            24447 ; 504  |                PrintStringSetTime(LCD_PRINT_STRING_RSRC,HOUR_X_POS+32,HOUR_Y_POS,RSRC_STR
                                  ING_PM);
                            24448 
P:059D 56F400 030007  3 317624450         move    #196615,a
P:059F 57F400 000030  3 317924451         move    #>$30,b
P:05A1 44F400 000020  3 318224452         move    #>$20,x0
P:05A3 46F400 0001D2  3 318524453         move    #466,y0
P:05A5 0BF080 rrrrrr  6 319124454         jsr     FPrintStringSetTime
P:05A7 0AF080 rrrrrr  6 319724456         jmp     L411
                            24457 
                            24458 ; 505  |            else
                            24459 ; 506  |                PrintStringSetTime(LCD_PRINT_STRING_RSRC,HOUR_X_POS+32,HOUR_Y_POS,RSRC_STR
                                  ING_AM);
                            24460 
P:05A9 56F400 030007  3 320024462 L404:   move    #196615,a
P:05AB 57F400 000030  3 320324463         move    #>$30,b
P:05AD 44F400 000020  3 320624464         move    #>$20,x0
P:05AF 46F400 0001D1  3 320924465         move    #465,y0
P:05B1 0BF080 rrrrrr  6 321524466         jsr     FPrintStringSetTime
                            24467 
                            24468 ; 507  |            break;
                            24469 
P:05B3 0AF080 rrrrrr  6 322124471         jmp     L411
                            24472 
                            24473 ; 508  |
                            24474 ; 509  |        case TIMEFORMAT_24HOUR:
                            24475 ; 510  |            // Display hours and minutes //
                            24476 ; 511  |            PrintNumberSetTime(LCD_PRINT_NUMBER,HOUR_X_POS,HOUR_Y_POS,iHours,2,'0');
                            24477 
                            24479 L405:
P:05B5 47F400 000030  3 322424481         move    #>$30,y1
P:05B7 56F400 030013  3 322724482         move    #196627,a
P:05B9 44F400 000020  3 323024483         move    #>$20,x0
P:05BB 45F400 000002  3 323324484         move    #>2,x1
P:05BD 57F400 000010  3 323624485         move    #>16,b
P:05BF 0BF080 rrrrrr  6 324224486         jsr     FPrintNumberSetTime
                            24488 
                            24489 ; 512  |            PrintNumberSetTime(LCD_PRINT_NUMBER,HOUR_X_POS+16,HOUR_Y_POS,iMinutes,2,'0');
                            24490 
P:05C1 44F400 000020  3 324524492         move    #>$20,x0
P:05C3 200049         2 324724493         tfr     x0,b
P:05C4 56F400 030013  3 325024494         move    #196627,a
P:05C6 77F400 FFFFFB  3 325324495         move    #-5,n7
P:05C8 000000         2 325524496         nop
P:05C9 4EEF00         4 325924497         move    y:(r7+n7),y0
P:05CA 47F400 000030  3 326224500         move    #>$30,y1
P:05CC 45F400 000002  3 326524501         move    #>2,x1
P:05CE 0BF080 rrrrrr  6 327124502         jsr     FPrintNumberSetTime
                            24505 
                            24506 ; 513  |    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 391

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24507 ; 514  |            // Clear AM/PM
                            24508 ; 515  |            PrintStringSetTime(LCD_PRINT_STRING_RSRC,HOUR_X_POS+32,HOUR_Y_POS,RSRC_STRING_
                                  AMCLEAR);
                            24509 
P:05D0 56F400 030007  3 327424511 L406:   move    #196615,a
P:05D2 57F400 000030  3 327724512         move    #>$30,b
P:05D4 44F400 000020  3 328024513         move    #>$20,x0
P:05D6 46F400 0001D3  3 328324514         move    #467,y0
P:05D8 0BF080 rrrrrr  6 328924515         jsr     FPrintStringSetTime
                            24516 
                            24517 ; 516  |            break;
                            24518 ; 517  |        }
                            24519 ; 518  |    }
                            24520 ; 519  |    SysWaitOnEvent(0,0,0);
                            24521 
P:05DA 3D0000         2 329124523 L411:   move    #0,n5
P:05DB 200013         2 329324524         clr     a   
P:05DC 20001B         2 329524525         clr     b   
P:05DD 23B000         2 329724526         move    n5,r0
P:05DE 0BF080 rrrrrr  6 330324527         jsr     SysWaitOnEvent
                            24528 
                            24529 ; 520  |    
                            24530 ; 521  |    // Display minutes//    
                            24531 ; 522  |    if(iCursorPosition==MINUTE_SELECT)
                            24532 
P:05E0 77F400 FFFFF8  3 330624534         move    #-8,n7
P:05E2 000000         2 330824535         nop
P:05E3 5EEF00         4 331224536         move    y:(r7+n7),a
P:05E4 44F400 000001  3 331524537         move    #>1,x0
P:05E6 200045         2 331724538         cmp     x0,a
P:05E7 0AF0A2 rrrrrr  6 332324539         jne     L412
                            24540 
                            24541 ; 523  |        PrintNumberSetTime(iMinuteMode,HOUR_X_POS+16,HOUR_Y_POS,iMinutes,2,'0');    
                            24542 
P:05E9 44F400 000020  3 332624544         move    #>$20,x0
P:05EB 200049         2 332824545         tfr     x0,b
P:05EC 77F400 FFFFFC  3 333124546         move    #-4,n7
P:05EE 000000         2 333324547         nop
P:05EF 5EEF00         4 333724548         move    y:(r7+n7),a
P:05F0 77F400 FFFFFB  3 334024549         move    #-5,n7
P:05F2 000000         2 334224550         nop
P:05F3 4EEF00         4 334624551         move    y:(r7+n7),y0
P:05F4 45F400 000002  3 334924552         move    #>2,x1
P:05F6 47F400 000030  3 335224553         move    #>$30,y1
P:05F8 0BF080 rrrrrr  6 335824554         jsr     FPrintNumberSetTime
P:05FA 0AF080 rrrrrr  6 336424561         jmp     L415
                            24562 
                            24563 ; 524  |    else if((iPreviousCursorPosition==MINUTE_SELECT)||(iCursorPosition==TIME_SELECT_ALL)) 
                                     
                            24564 
                            24566 L412:
P:05FC 77F400 FFFFF9  3 336724568         move    #-7,n7
P:05FE 000000         2 336924569         nop
P:05FF 5FEF00         4 337324570         move    y:(r7+n7),b
P:0600 20004D         2 337524571         cmp     x0,b
P:0601 0AF0AA rrrrrr  6 338124572         jeq     L413
P:0603 77F400 FFFFF8  3 338424573         move    #-8,n7
P:0605 000000         2 338624574         nop
P:0606 5FEF00         4 339024575         move    y:(r7+n7),b
P:0607 46F400 000005  3 339324576         move    #>5,y0
P:0609 20005D         2 339524577         cmp     y0,b
P:060A 0AF0A2 rrrrrr  6 340124578         jne     L415
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 392

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24579 
                            24580 ; 525  |        PrintNumberSetTime(LCD_PRINT_NUMBER,HOUR_X_POS+16,HOUR_Y_POS,iMinutes,2,'0');
                            24581 
P:060C 44F400 000020  3 340424583 L413:   move    #>$20,x0
P:060E 200049         2 340624584         tfr     x0,b
P:060F 77F400 FFFFFB  3 340924585         move    #-5,n7
P:0611 000000         2 341124586         nop
P:0612 4EEF00         4 341524587         move    y:(r7+n7),y0
P:0613 45F400 000002  3 341824588         move    #>2,x1
P:0615 47F400 000030  3 342124589         move    #>$30,y1
P:0617 56F400 030013  3 342424590         move    #196627,a
P:0619 0BF080 rrrrrr  6 343024591         jsr     FPrintNumberSetTime
                            24595 
                            24596 ; 526  |
                            24597 ; 527  |    // Display format //
                            24598 ; 528  |    if(iCursorPosition==TIMEFORMAT_SELECT)
                            24599 
P:061B 77F400 FFFFF8  3 343324601 L415:   move    #-8,n7
P:061D 000000         2 343524602         nop
P:061E 5FEF00         4 343924603         move    y:(r7+n7),b
P:061F 46F400 000002  3 344224604         move    #>2,y0
P:0621 20005D         2 344424605         cmp     y0,b
P:0622 0AF0A2 rrrrrr  6 345024606         jne     L417
                            24607 
                            24608 ; 529  |    {
                            24609 ; 530  |        if(l_iTimeFormat == TIMEFORMAT_12HOUR)
                            24610 
P:0624 77F400 FFFFF6  3 345324612         move    #-10,n7
P:0626 000000         2 345524613         nop
P:0627 5EEF00         4 345924614         move    y:(r7+n7),a
P:0628 200003         2 346124615         tst     a
P:0629 0AF0A2 rrrrrr  6 346724616         jne     L416
                            24617 
                            24618 ; 531  |            PrintStringSetTime(iFormatMode,FORMAT_X_POS+32,FORMAT_Y_POS,RSRC_STRING_12HOUR
                                  );
                            24619 
P:062B 77F400 FFFFFD  3 347024621         move    #-3,n7
P:062D 000000         2 347224622         nop
P:062E 5EEF00         4 347624623         move    y:(r7+n7),a
P:062F 46F400 0001D6  3 347924624         move    #470,y0
P:0631 44F400 000028  3 348224625         move    #>40,x0
P:0633 57F400 000030  3 348524626         move    #>$30,b
P:0635 0BF080 rrrrrr  6 349124627         jsr     FPrintStringSetTime
P:0637 0AF080 rrrrrr  6 349724631         jmp     L423
                            24632 
                            24633 ; 532  |        else
                            24634 ; 533  |            PrintStringSetTime(iFormatMode,FORMAT_X_POS+32,FORMAT_Y_POS,RSRC_STRING_24HOUR
                                  );
                            24635 
                            24637 L416:
P:0639 77F400 FFFFFD  3 350024639         move    #-3,n7
P:063B 000000         2 350224640         nop
P:063C 5EEF00         4 350624641         move    y:(r7+n7),a
P:063D 46F400 0001D7  3 350924642         move    #471,y0
P:063F 44F400 000028  3 351224643         move    #>40,x0
P:0641 57F400 000030  3 351524644         move    #>$30,b
P:0643 0BF080 rrrrrr  6 352124645         jsr     FPrintStringSetTime
                            24649 
                            24650 ; 534  |    }
                            24651 
P:0645 0AF080 rrrrrr  6 352724653         jmp     L423
                            24654 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 393

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24655 ; 535  |    else if((iPreviousCursorPosition==TIMEFORMAT_SELECT)||(iCursorPosition==TIME_SELECT_AL
                                  L))    
                            24656 
P:0647 77F400 FFFFF9  3 353024658 L417:   move    #-7,n7
P:0649 000000         2 353224659         nop
P:064A 5FEF00         4 353624660         move    y:(r7+n7),b
P:064B 20005D         2 353824661         cmp     y0,b
P:064C 0AF0AA rrrrrr  6 354424662         jeq     L418
P:064E 77F400 FFFFF8  3 354724663         move    #-8,n7
P:0650 000000         2 354924664         nop
P:0651 5FEF00         4 355324665         move    y:(r7+n7),b
P:0652 56F400 000005  3 355624666         move    #>5,a
P:0654 20000D         2 355824667         cmp     a,b
P:0655 0AF0A2 rrrrrr  6 356424668         jne     L423
                            24669 
                            24670 ; 536  |    {
                            24671 ; 537  |        if(l_iTimeFormat == TIMEFORMAT_12HOUR)
                            24672 
P:0657 77F400 FFFFF6  3 356724674 L418:   move    #-10,n7
P:0659 000000         2 356924675         nop
P:065A 5FEF00         4 357324676         move    y:(r7+n7),b
P:065B 20000B         2 357524677         tst     b
P:065C 0AF0A2 rrrrrr  6 358124678         jne     L419
                            24679 
                            24680 ; 538  |            PrintStringSetTime(LCD_PRINT_STRING_RSRC,FORMAT_X_POS+32,FORMAT_Y_POS,RSRC_STR
                                  ING_12HOUR);
                            24681 
P:065E 56F400 030007  3 358424683         move    #196615,a
P:0660 57F400 000030  3 358724684         move    #>$30,b
P:0662 46F400 0001D6  3 359024685         move    #470,y0
P:0664 44F400 000028  3 359324686         move    #>40,x0
P:0666 0BF080 rrrrrr  6 359924687         jsr     FPrintStringSetTime
P:0668 0AF080 rrrrrr  6 360524688         jmp     L423
                            24689 
                            24690 ; 539  |        else
                            24691 ; 540  |            PrintStringSetTime(LCD_PRINT_STRING_RSRC,FORMAT_X_POS+32,FORMAT_Y_POS,RSRC_STR
                                  ING_24HOUR);
                            24692 
P:066A 56F400 030007  3 360824694 L419:   move    #196615,a
P:066C 57F400 000030  3 361124695         move    #>$30,b
P:066E 46F400 0001D7  3 361424696         move    #471,y0
P:0670 44F400 000028  3 361724697         move    #>40,x0
P:0672 0BF080 rrrrrr  6 362324698         jsr     FPrintStringSetTime
                            24699 
                            24700 ; 541  |    }
                            24701 ; 542  |    
                            24702 ; 543  |    // Display OK //  
                            24703 ; 544  |    if(iCursorPosition==TIMEOK_SELECT)
                            24704 
P:0674 77F400 FFFFF8  3 362624706 L423:   move    #-8,n7
P:0676 000000         2 362824707         nop
P:0677 5FEF00         4 363224708         move    y:(r7+n7),b
P:0678 45F400 000003  3 363524709         move    #>3,x1
P:067A 20006D         2 363724710         cmp     x1,b
P:067B 0AF0A2 rrrrrr  6 364324711         jne     L424
                            24712 
                            24713 ; 545  |        PrintStringSetTime(iOkMode,OK_TIME_X_POS,OK_TIME_Y_POS,RSRC_STRING_OK);
                            24714 
P:067D 77F400 FFFFFE  3 364624716         move    #-2,n7
P:067F 000000         2 364824717         nop
P:0680 5EEF00         4 365224718         move    y:(r7+n7),a
P:0681 46F400 0001DC  3 365524719         move    #476,y0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 394

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0683 44F400 000030  3 365824720         move    #>$30,x0
P:0685 57F400 000010  3 366124721         move    #>16,b
P:0687 0BF080 rrrrrr  6 366724722         jsr     FPrintStringSetTime
P:0689 0AF080 rrrrrr  6 367324726         jmp     L427
                            24727 
                            24728 ; 546  |    else if((iPreviousCursorPosition==TIMEOK_SELECT)||(iCursorPosition==TIME_SELECT_ALL)) 
                                     
                            24729 
P:068B 77F400 FFFFF9  3 367624731 L424:   move    #-7,n7
P:068D 000000         2 367824732         nop
P:068E 5EEF00         4 368224733         move    y:(r7+n7),a
P:068F 200065         2 368424734         cmp     x1,a
P:0690 0AF0AA rrrrrr  6 369024735         jeq     L425
P:0692 77F400 FFFFF8  3 369324736         move    #-8,n7
P:0694 000000         2 369524737         nop
P:0695 5EEF00         4 369924738         move    y:(r7+n7),a
P:0696 47F400 000005  3 370224739         move    #>5,y1
P:0698 200075         2 370424740         cmp     y1,a
P:0699 0AF0A2 rrrrrr  6 371024741         jne     L427
                            24742 
                            24743 ; 547  |        PrintStringSetTime(LCD_PRINT_STRING_RSRC,OK_TIME_X_POS,OK_TIME_Y_POS,RSRC_STRING_O
                                  K);
                            24744 
P:069B 56F400 030007  3 371324746 L425:   move    #196615,a
P:069D 57F400 000010  3 371624747         move    #>16,b
P:069F 46F400 0001DC  3 371924748         move    #476,y0
P:06A1 44F400 000030  3 372224749         move    #>$30,x0
P:06A3 0BF080 rrrrrr  6 372824750         jsr     FPrintStringSetTime
                            24751 
                            24752 ; 548  |    
                            24753 ; 549  |    // Display Cancel //
                            24754 ; 550  |    if((iCursorPosition==TIMECANCEL_SELECT)||(iCursorPosition==TIME_SELECT_ALL))
                            24755 
P:06A5 77F400 FFFFF8  3 373124757 L427:   move    #-8,n7
P:06A7 000000         2 373324758         nop
P:06A8 5FEF00         4 373724759         move    y:(r7+n7),b
P:06A9 46F400 000004  3 374024760         move    #>4,y0
P:06AB 20005D         2 374224761         cmp     y0,b
P:06AC 0AF0AA rrrrrr  6 374824764         jeq     L428
P:06AE 44F400 000005  3 375124765         move    #>5,x0
P:06B0 20004D         2 375324766         cmp     x0,b
P:06B1 0AF0A2 rrrrrr  6 375924767         jne     L429
                            24768 
                            24769 ; 551  |        PrintStringSetTime(iCancelMode,OK_TIME_X_POS+32,OK_TIME_Y_POS,RSRC_STRING_CANCEL);
                                  
                            24770 
P:06B3 44F400 000030  3 376224772 L428:   move    #>$30,x0
P:06B5 200049         2 376424773         tfr     x0,b
P:06B6 46F400 0001DD  3 376724775         move    #477,y0
P:06B8 045FA0         2 376924776         movec   m0,n7
P:06B9 000000         2 377124777         nop
P:06BA 5EEF00         4 377524778         move    y:(r7+n7),a
P:06BB 0BF080 rrrrrr  6 378124779         jsr     FPrintStringSetTime
P:06BD 0AF080 rrrrrr  6 378724783         jmp     L431
                            24784 
                            24785 ; 552  |    else if(iPreviousCursorPosition==TIMECANCEL_SELECT) 
                            24786 
P:06BF 77F400 FFFFF9  3 379024788 L429:   move    #-7,n7
P:06C1 000000         2 379224789         nop
P:06C2 5EEF00         4 379624790         move    y:(r7+n7),a
P:06C3 200055         2 379824791         cmp     y0,a
P:06C4 0AF0A2 rrrrrr  6 380424794         jne     L431
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 395

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24795 
                            24796 ; 553  |        PrintStringSetTime(LCD_PRINT_STRING_RSRC,OK_TIME_X_POS+32,OK_TIME_Y_POS,RSRC_STRIN
                                  G_CANCEL);
                            24797 
P:06C6 44F400 000030  3 380724799         move    #>$30,x0
P:06C8 200049         2 380924800         tfr     x0,b
P:06C9 46F400 0001DD  3 381224801         move    #477,y0
P:06CB 56F400 030007  3 381524802         move    #196615,a
P:06CD 0BF080 rrrrrr  6 382124803         jsr     FPrintStringSetTime
                            24805 
                            24806 ; 554  |
                            24807 ; 555  |    SysWaitOnEvent(0,0,0);    
                            24808 
P:06CF 20001B         2 382324810 L431:   clr     b   
P:06D0 200013         2 382524811         clr     a   
P:06D1 300000         2 382724812         move    #0,r0
P:06D2 0BF080 rrrrrr  6 383324813         jsr     SysWaitOnEvent
                            24814 
                            24815 ; 556  |}
                            24816 
P:06D4 77F400 FFFFF7  3 383624818         move    #-9,n7
P:06D6 000000         2 383824819         nop
P:06D7 05EF7C         4 384224820         movec   y:(r7+n7),ssh
P:06D8 204F00         2 384424822         move    (r7)+n7
P:06D9 00000C         4 384824824         rts
                            24826 
                            24827 ; 557  |/********************************************************
                            24828 ; 558  |/    Function:      DisplayTimeFirst(void)
                            24829 ; 559  |/    Inputs:     
                            24830 ; 560  |/                
                            24831 ; 561  |/    Outputs:    
                            24832 ; 562  |/                
                            24833 ; 563  |/    Description:   Displays the static text on the LCD.  
                            24834 ; 564  |/                
                            24835 ; 565  |/                
                            24836 ; 566  |/                
                            24837 ; 567  |/********************************************************/
                            24838 ; 568  |_reentrant void DisplayTimeFirst(void)
                            24839 ; 569  |{
                            24840 
                            24845 FDisplayTimeFirst:
P:06DA 055F7C         2 385024846         movec   ssh,y:(r7)+
                            24849 
                            24850 ; 570  |    // display Title                                                                      
                                                 
                            24851 ; 571  |    SysPostMessage(5,LCD_PRINT_RANGE_RSRC,SET_TIME_TITLE_X_POS,SET_TIME_TITLE_Y_POS,RSRC_S
                                  ET_TIME_TITLE);    
                            24852 
P:06DB 280500         2 385224854         move    #5,a0
P:06DC 55F400 000144  3 385524855         move    #324,b1
P:06DE 5D5F00         2 385724856         move    b1,y:(r7)+
P:06DF 290A00         2 385924858         move    #10,b0
P:06E0 595F00         2 386124859         move    b0,y:(r7)+
P:06E1 290F00         2 386324861         move    #15,b0
P:06E2 595F00         2 386524862         move    b0,y:(r7)+
P:06E3 54F400 030001  3 386824864         move    #$30001,a1
P:06E5 5C5F00         2 387024865         move    a1,y:(r7)+
P:06E6 585F00         2 387224867         move    a0,y:(r7)+
P:06E7 0BF080 rrrrrr  6 387824869         jsr     FSysPostMessage
P:06E9 3F0500         2 388024870         move    #5,n7
P:06EA 000000         2 388224871         nop
P:06EB 204700         2 388424872         move    (r7)-n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 396

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24874 
                            24875 ; 572  |    // Display "Format" and format selected//
                            24876 ; 573  |    PrintStringSetTime(LCD_PRINT_STRING_RSRC,FORMAT_X_POS,FORMAT_Y_POS,RSRC_STRING_FORMAT)
                                  ;    
                            24877 
P:06EC 46F400 0001D8  3 388724879         move    #472,y0
P:06EE 57F400 000010  3 389024880         move    #>16,b
P:06F0 56F400 030007  3 389324881         move    #196615,a
P:06F2 44F400 000028  3 389624882         move    #>40,x0
P:06F4 0BF080 rrrrrr  6 390224883         jsr     FPrintStringSetTime
                            24884 
                            24885 ; 574  |    // Display Colon
                            24886 ; 575  |    SysPostMessage(5,LCD_PRINT_UNICODE_CHAR,HOUR_X_POS+13,HOUR_Y_POS,':');
                            24887 
P:06F6 293A00         2 390424889         move    #58,b0
P:06F7 595F00         2 390624890         move    b0,y:(r7)+
P:06F8 292000         2 390824892         move    #$20,b0
P:06F9 595F00         2 391024893         move    b0,y:(r7)+
P:06FA 291D00         2 391224895         move    #29,b0
P:06FB 595F00         2 391424896         move    b0,y:(r7)+
P:06FC 46F400 030022  3 391724898         move    #196642,y0
P:06FE 4E5F00         2 391924899         move    y0,y:(r7)+
P:06FF 290500         2 392124901         move    #5,b0
P:0700 595F00         2 392324902         move    b0,y:(r7)+
P:0701 0BF080 rrrrrr  6 392924904         jsr     FSysPostMessage
P:0703 3F0500         2 393124905         move    #5,n7
P:0704 000000         2 393324906         nop
P:0705 204700         2 393524907         move    (r7)-n7
                            24909 
                            24910 ; 576  |    //PrintStringSetTime(LCD_PRINT_STRING_RSRC,HOUR_X_POS+13,HOUR_Y_POS-2,RSRC_STRING_COLO
                                  N);
                            24911 ; 577  |        
                            24912 ; 578  |}
                            24913 
P:0706 05FF7C         4 393924915         movec   y:-(r7),ssh
P:0707 000000         2 394124918         nop
P:0708 00000C         4 394524919         rts
                            24921 
                            24922 ; 579  |
                            24923 ; 580  |/********************************************************
                            24924 ; 581  |/    Function:    DisplaySaveChangesTime
                            24925 ; 582  |/    Inputs:        iSaveChangesSelected, the save changes option
                            24926 ; 583  |/                the user currenly has selected
                            24927 ; 584  |/    Outputs:    Displays a bitmap with the save option
                            24928 ; 585  |/                highlighted
                            24929 ; 586  |/    Description: This function displays the window to ask
                            24930 ; 587  |/                the user if changes to time are to be saved,
                            24931 ; 588  |/                or to just cancel. Window appears if user
                            24932 ; 589  |/                holds MENU while in set time menu.     
                            24933 ; 590  |/********************************************************/
                            24934 ; 591  |_reentrant void DisplaySaveChangesTime(int iSaveOption) 
                            24935 ; 592  |{
                            24936 
                            24941 FDisplaySaveChangesTime:
P:0709 055F7C         2 394724942         movec   ssh,y:(r7)+
                            24949 
                            24950 ; 593  |    int iSaveText = 0;
                            24951 
P:070A 260000         2 394924953         move    #0,y0
                            24955 
                            24956 ; 594  |
                            24957 ; 595  |    switch(iSaveOption) {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 397

M:ADDR CODE           CYCLES LINE SOURCELINE
                            24958 
P:070B 65F403 rrrrrr  3 395224960         tst     a       #L441,r5
P:070D 0AF0AB rrrrrr  6 395824961         jmi     L440
P:070F 47F400 000003  3 396124962         move    #>3,y1
P:0711 21DD75         2 396324963         cmp     y1,a    a,n5
P:0712 0AF0A7 rrrrrr  6 396924964         jgt     L440
P:0714 07ED95         8 397724965         movem   p:(r5+n5),r5
P:0715 000000         2 397924966         nop
P:0716 0AE580         4 398324967         jmp     (r5)
                            24968 
P:0717 rrrrrr               24969 L441:   dc      L436    ; case 0:
P:0718 rrrrrr               24970         dc      L433    ; case 1:
P:0719 rrrrrr               24971         dc      L434    ; case 2:
P:071A rrrrrr               24972         dc      L435    ; case 3:
                            24973 
                            24974 
                            24975 ; 596  |    case SETTIME_YES:
                            24976 ; 597  |        iSaveText = RSRC_SAVE_CHANGES_YES;
                            24977 ; 598  |        break;
                            24978 ; 599  |    case SETTIME_NO:
                            24979 ; 600  |        iSaveText = RSRC_SAVE_CHANGES_NO;
                            24980 
P:071B 46F400 000148  3 398624982 L433:   move    #328,y0
                            24983 
                            24984 ; 601  |        break;
                            24985 
P:071D 0AF080 rrrrrr  6 399224987         jmp     L440
                            24988 
                            24989 ; 602  |    case SETTIME_CANCEL:
                            24990 ; 603  |        iSaveText = RSRC_SAVE_CHANGES_CANCEL;
                            24991 
P:071F 46F400 000149  3 399524993 L434:   move    #329,y0
                            24994 
                            24995 ; 604  |        break;
                            24996 
P:0721 0AF080 rrrrrr  6 400124998         jmp     L440
                            24999 
                            25000 ; 605  |    case SETTIME_CLEAR:
                            25001 ; 606  |        iSaveText = RSRC_SAVE_CHANGES_CLEAR;
                            25002 
P:0723 46F400 00014A  3 400425004 L435:   move    #330,y0
                            25005 
                            25006 ; 607  |        break;
                            25007 
P:0725 0AF080 rrrrrr  6 401025009         jmp     L440
P:0727 46F400 000147  3 401325011 L436:   move    #327,y0
                            25012 
                            25013 ; 608  |    default:  // should not happen
                            25014 ; 609  |        break;
                            25015 ; 610  |    }
                            25016 ; 611  |    SysPostMessage(5,LCD_PRINT_RANGE_RSRC,SAVE_CHANGES_TIME_X_POS,SAVE_CHANGES_TIME_Y_POS,
                                  iSaveText);
                            25017 
P:0729 4E5F00         2 401525019 L440:   move    y0,y:(r7)+
P:072A 291800         2 401725022         move    #24,b0
P:072B 595F00         2 401925023         move    b0,y:(r7)+
P:072C 290400         2 402125025         move    #4,b0
P:072D 595F00         2 402325026         move    b0,y:(r7)+
P:072E 51F400 030001  3 402625028         move    #$30001,b0
P:0730 595F00         2 402825029         move    b0,y:(r7)+
P:0731 290500         2 403025031         move    #5,b0
P:0732 595F00         2 403225032         move    b0,y:(r7)+
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 398

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0733 0BF080 rrrrrr  6 403825034         jsr     FSysPostMessage
P:0735 3F0500         2 404025035         move    #5,n7
P:0736 000000         2 404225036         nop
P:0737 204700         2 404425037         move    (r7)-n7
                            25040 
                            25041 ; 612  |
                            25042 ; 613  |}
                            25043 
P:0738 05FF7C         4 404825045         movec   y:-(r7),ssh
P:0739 000000         2 405025048         nop
P:073A 00000C         4 405425049         rts
                            25051 
                            25052 ; 614  |    
                            25053 ; 615  |
                            25054 ; 616  |_reentrant void PrintStringSetTime(int iMode,int iXpos,int iYpos,int iString)
                            25055 ; 617  |{
                            25056 
                            25061 FPrintStringSetTime:
P:073B 055F7C         2 405625062         movec   ssh,y:(r7)+
                            25073 
                            25074 ; 618  |        SysPostMessage(5,iMode,iXpos,iYpos,iString);
                            25075 
P:073C 4E5F00         2 405825077         move    y0,y:(r7)+
P:073D 4C5F00         2 406025080         move    x0,y:(r7)+
P:073E 5D5F00         2 406225083         move    b1,y:(r7)+
P:073F 5C5F00         2 406425086         move    a1,y:(r7)+
P:0740 290500         2 406625089         move    #5,b0
P:0741 595F00         2 406825090         move    b0,y:(r7)+
P:0742 0BF080 rrrrrr  6 407425092         jsr     FSysPostMessage
P:0744 3F0500         2 407625093         move    #5,n7
P:0745 000000         2 407825094         nop
P:0746 204700         2 408025095         move    (r7)-n7
                            25097 
                            25098 ; 619  |}
                            25099 
P:0747 05FF7C         4 408425101         movec   y:-(r7),ssh
P:0748 000000         2 408625104         nop
P:0749 00000C         4 409025105         rts
                            25107 
                            25108 ; 620  |
                            25109 ; 621  |_reentrant void PrintNumberSetTime(int iMode,int iXpos,int iYpos,int iNumber,int iWidth,in
                                  t iFiller)
                            25110 ; 622  |{
                            25111 
                            25116 FPrintNumberSetTime:
P:074A 055F7C         2 409225117         movec   ssh,y:(r7)+
                            25132 
                            25133 ; 623  |    SysPostMessage(7,iMode,iXpos,iYpos,iNumber,iWidth,iFiller);
                            25134 
P:074B 4F5F00         2 409425136         move    y1,y:(r7)+
P:074C 4D5F00         2 409625139         move    x1,y:(r7)+
P:074D 4E5F00         2 409825142         move    y0,y:(r7)+
P:074E 4C5F00         2 410025145         move    x0,y:(r7)+
P:074F 5D5F00         2 410225148         move    b1,y:(r7)+
P:0750 5C5F00         2 410425151         move    a1,y:(r7)+
P:0751 290700         2 410625154         move    #7,b0
P:0752 595F00         2 410825155         move    b0,y:(r7)+
P:0753 0BF080 rrrrrr  6 411425157         jsr     FSysPostMessage
P:0755 3F0700         2 411625158         move    #7,n7
P:0756 000000         2 411825159         nop
P:0757 204700         2 412025160         move    (r7)-n7
                            25162 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 399

M:ADDR CODE           CYCLES LINE SOURCELINE
                            25163 ; 624  |}
                            25164 
P:0758 05FF7C         4 412425166         movec   y:-(r7),ssh
P:0759 000000         2 412625169         nop
P:075A 00000C         4 413025170         rts
                            25172 
                            25173 ; 625  |
                            25174 
                            25229 
                            25232 
Y:0000                      25233         org     y,".ybsssettimemenu",bss:
                            25234 Fg_UserTimeoffset:
Y:0000                      25235         ds      2
   |   RESERVED                   
Y:0001
                            25238 Fg_iTimeFormat:
Y:0002 RESERVED             25239         ds      1
Y:0002
                            25271 Fg_Usertime:
Y:0003                      25272         ds      2
   |   RESERVED                   
Y:0004
                            25277 
                            25278         extern  Rdiv_lll, SysCallFunction, SysLoadFATWrite
                            25279         extern  SysUnLoadFATWrite, SysWaitOnEvent
                            25280         extern  FHandlePlayerStateMachine, FReadRTC, FRefreshDisplay
                            25281         extern  FSaveUserTime, FShutdownMenu, FSysPostMessage
                            25282         extern  FUpdateAutoShutdownTimer, FUpdateTime, y:FgEventInfo
                            25283         extern  y:Fg_MenuFlags, y:Fg_iBackLightState
                            25284         extern  y:Fg_iCurrentRTCValues, x:Fg_wDecoderSR
                            25285 
                            25286         global  FDisplayChangeTime, FDisplaySaveChangesTime
                            25287         global  FDisplayTimeFirst, FPrintNumberSetTime
                            25288         global  FPrintStringSetTime, FSetTime, FSetTimeMenu
                            25289         global  Fg_UserTimeoffset, Fg_Usertime, Fg_iTimeFormat
                            25290 
                            25291         local   L165, L167, L169, L170, L172, L173, L174, L176, L177, L179
                            25292         local   L182, L183, L186, L187, L189, L190, L204, L205, L206, L207
                            25293         local   L209, L210, L212, L213, L214, L215, L216, L217, L218, L221
                            25294         local   L222, L229, L238, L239, L240, L241, L243, L246, L247, L248
                            25295         local   L373, L374, L375, L376, L377, L378, L379, L389, L391, L392
                            25296         local   L393, L394, L395, L397, L398, L403, L404, L405, L406, L411
                            25297         local   L412, L413, L415, L416, L417, L418, L419, L423, L424, L425
                            25298         local   L427, L428, L429, L431, L432, L433, L434, L435, L436, L440
                            25299         local   L441
                            25300 
                            25301         calls   "DisplayChangeTime", "PrintNumberSetTime"
                            25302         calls   "DisplayChangeTime", "PrintStringSetTime", "SysWaitOnEvent"
                            25303         calls   "DisplaySaveChangesTime", "SysPostMessage"
                            25304         calls   "DisplayTimeFirst", "PrintStringSetTime", "SysPostMessage"
                            25305         calls   "PrintNumberSetTime", "SysPostMessage"
                            25306         calls   "PrintStringSetTime", "SysPostMessage"
                            25307         calls   "SetTime", "Rdiv_lll", "ReadRTC"
                            25308         calls   "SetTimeMenu", "DisplayChangeTime"
                            25309         calls   "SetTimeMenu", "DisplaySaveChangesTime", "DisplayTimeFirst"
                            25310         calls   "SetTimeMenu", "SaveUserTime", "SetTime", "SysCallFunction"
                            25311         calls   "SetTimeMenu", "SysLoadFATWrite", "SysPostMessage"
                            25312         calls   "SetTimeMenu", "SysUnLoadFATWrite", "SysWaitOnEvent"
                            25313         calls   "SetTimeMenu", "UpdateAutoShutdownTimer"
                            25314 
