TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfd130b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;         font.c:
                               96 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2005
                               98 ; 3    |//
                               99 ; 4    |// Filename: font.c    (Historical note: LcdPrintString.c)
                              100 ; 5    |// Description: Routines for display of text
                              101 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |#include "types.h"
                              104 
                              106 
                              107 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              108 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              109 ; 3    |//
                              110 ; 4    |// Filename: types.h
                              111 ; 5    |// Description: Standard data types
                              112 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              113 ; 7    |
                              114 ; 8    |#ifndef _TYPES_H
                              115 ; 9    |#define _TYPES_H
                              116 ; 10   |
                              117 ; 11   |// TODO:  move this outta here!
                              118 ; 12   |#if !defined(NOERROR)
                              119 ; 13   |#define NOERROR 0
                              120 ; 14   |#define SUCCESS 0
                              121 ; 15   |#endif 
                              122 ; 16   |#if !defined(SUCCESS)
                              123 ; 17   |#define SUCCESS  0
                              124 ; 18   |#endif
                              125 ; 19   |#if !defined(ERROR)
                              126 ; 20   |#define ERROR   -1
                              127 ; 21   |#endif
                              128 ; 22   |#if !defined(FALSE)
                              129 ; 23   |#define FALSE 0
                              130 ; 24   |#endif
                              131 ; 25   |#if !defined(TRUE)
                              132 ; 26   |#define TRUE  1
                              133 ; 27   |#endif
                              134 ; 28   |
                              135 ; 29   |#if !defined(NULL)
                              136 ; 30   |#define NULL 0
                              137 ; 31   |#endif
                              138 ; 32   |
                              139 ; 33   |#define MAX_INT     0x7FFFFF
                              140 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              141 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              142 ; 36   |#define MAX_ULONG   (-1) 
                              143 ; 37   |
                              144 ; 38   |#define WORD_SIZE   24              // word size in bits
                              145 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              146 ; 40   |
                              147 ; 41   |
                              148 ; 42   |#define BYTE    unsigned char       // btVarName
                              149 ; 43   |#define CHAR    signed char         // cVarName
                              150 ; 44   |#define USHORT  unsigned short      // usVarName
                              151 ; 45   |#define SHORT   unsigned short      // sVarName
                              152 ; 46   |#define WORD    unsigned int        // wVarName
                              153 ; 47   |#define INT     signed int          // iVarName
                              154 ; 48   |#define DWORD   unsigned long       // dwVarName
                              155 ; 49   |#define LONG    signed long         // lVarName
                              156 ; 50   |#define BOOL    unsigned int        // bVarName
                              157 ; 51   |#define FRACT   _fract              // frVarName
                              158 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              159 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              160 ; 54   |#define FLOAT   float               // fVarName
                              161 ; 55   |#define DBL     double              // dVarName
                              162 ; 56   |#define ENUM    enum                // eVarName
                              163 ; 57   |#define CMX     _complex            // cmxVarName
                              164 ; 58   |typedef WORD UCS3;                   // 
                              165 ; 59   |
                              166 ; 60   |#define UINT16  unsigned short
                              167 ; 61   |#define UINT8   unsigned char   
                              168 ; 62   |#define UINT32  unsigned long
                              169 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              170 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              171 ; 65   |#define WCHAR   UINT16
                              172 ; 66   |
                              173 ; 67   |//UINT128 is 16 bytes or 6 words
                              174 ; 68   |typedef struct UINT128_3500 {   
                              175 ; 69   |    int val[6];     
                              176 ; 70   |} UINT128_3500;
                              177 ; 71   |
                              178 ; 72   |#define UINT128   UINT128_3500
                              179 ; 73   |
                              180 ; 74   |// Little endian word packed byte strings:   
                              181 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              182 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              183 ; 77   |// Little endian word packed byte strings:   
                              184 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 80   |
                              187 ; 81   |// Declare Memory Spaces To Use When Coding
                              188 ; 82   |// A. Sector Buffers
                              189 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              190 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              191 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              192 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              193 
                              195 
                              196 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              197 ; 88   |// B. Media DDI Memory
                              198 ; 89   |#define MEDIA_DDI_MEM _Y
                              199 ; 90   |
                              200 ; 91   |
                              201 ; 92   |
                              202 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              203 ; 94   |// Examples of circular pointers:
                              204 ; 95   |//    INT CIRC cpiVarName
                              205 ; 96   |//    DWORD CIRC cpdwVarName
                              206 ; 97   |
                              207 ; 98   |#define RETCODE INT                 // rcVarName
                              208 ; 99   |
                              209 ; 100  |// generic bitfield structure
                              210 ; 101  |struct Bitfield {
                              211 ; 102  |    unsigned int B0  :1;
                              212 ; 103  |    unsigned int B1  :1;
                              213 ; 104  |    unsigned int B2  :1;
                              214 ; 105  |    unsigned int B3  :1;
                              215 ; 106  |    unsigned int B4  :1;
                              216 ; 107  |    unsigned int B5  :1;
                              217 ; 108  |    unsigned int B6  :1;
                              218 ; 109  |    unsigned int B7  :1;
                              219 ; 110  |    unsigned int B8  :1;
                              220 ; 111  |    unsigned int B9  :1;
                              221 ; 112  |    unsigned int B10 :1;
                              222 ; 113  |    unsigned int B11 :1;
                              223 ; 114  |    unsigned int B12 :1;
                              224 ; 115  |    unsigned int B13 :1;
                              225 ; 116  |    unsigned int B14 :1;
                              226 ; 117  |    unsigned int B15 :1;
                              227 ; 118  |    unsigned int B16 :1;
                              228 ; 119  |    unsigned int B17 :1;
                              229 ; 120  |    unsigned int B18 :1;
                              230 ; 121  |    unsigned int B19 :1;
                              231 ; 122  |    unsigned int B20 :1;
                              232 ; 123  |    unsigned int B21 :1;
                              233 ; 124  |    unsigned int B22 :1;
                              234 ; 125  |    unsigned int B23 :1;
                              235 ; 126  |};
                              236 ; 127  |
                              237 ; 128  |union BitInt {
                              238 ; 129  |        struct Bitfield B;
                              239 ; 130  |        int        I;
                              240 ; 131  |};
                              241 ; 132  |
                              242 ; 133  |#define MAX_MSG_LENGTH 10
                              243 ; 134  |struct CMessage
                              244 ; 135  |{
                              245 ; 136  |        unsigned int m_uLength;
                              246 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              247 ; 138  |};
                              248 ; 139  |
                              249 ; 140  |typedef struct {
                              250 ; 141  |    WORD m_wLength;
                              251 ; 142  |    WORD m_wMessage;
                              252 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              253 ; 144  |} Message;
                              254 ; 145  |
                              255 ; 146  |struct MessageQueueDescriptor
                              256 ; 147  |{
                              257 ; 148  |        int *m_pBase;
                              258 ; 149  |        int m_iModulo;
                              259 ; 150  |        int m_iSize;
                              260 ; 151  |        int *m_pHead;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                              261 ; 152  |        int *m_pTail;
                              262 ; 153  |};
                              263 ; 154  |
                              264 ; 155  |struct ModuleEntry
                              265 ; 156  |{
                              266 ; 157  |    int m_iSignaledEventMask;
                              267 ; 158  |    int m_iWaitEventMask;
                              268 ; 159  |    int m_iResourceOfCode;
                              269 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              270 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              271 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              272 ; 163  |    int m_uTimeOutHigh;
                              273 ; 164  |    int m_uTimeOutLow;
                              274 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              275 ; 166  |};
                              276 ; 167  |
                              277 ; 168  |union WaitMask{
                              278 ; 169  |    struct B{
                              279 ; 170  |        unsigned int m_bNone     :1;
                              280 ; 171  |        unsigned int m_bMessage  :1;
                              281 ; 172  |        unsigned int m_bTimer    :1;
                              282 ; 173  |        unsigned int m_bButton   :1;
                              283 ; 174  |    } B;
                              284 ; 175  |    int I;
                              285 ; 176  |} ;
                              286 ; 177  |
                              287 ; 178  |
                              288 ; 179  |struct Button {
                              289 ; 180  |        WORD wButtonEvent;
                              290 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              291 ; 182  |};
                              292 ; 183  |
                              293 ; 184  |struct Message {
                              294 ; 185  |        WORD wMsgLength;
                              295 ; 186  |        WORD wMsgCommand;
                              296 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              297 ; 188  |};
                              298 ; 189  |
                              299 ; 190  |union EventTypes {
                              300 ; 191  |        struct CMessage msg;
                              301 ; 192  |        struct Button Button ;
                              302 ; 193  |        struct Message Message;
                              303 ; 194  |};
                              304 ; 195  |
                              305 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              306 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              307 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              308 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              309 ; 200  |
                              310 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              311 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              312 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              313 ; 204  |
                              314 ; 205  |#if DEBUG
                              315 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              316 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              317 ; 208  |#else 
                              318 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              319 ; 210  |#define DebugBuildAssert(x)    
                              320 ; 211  |#endif
                              321 ; 212  |
                              322 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              323 ; 214  |//  #pragma asm
                              324 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              325 ; 216  |//  #pragma endasm
                              326 ; 217  |
                              327 ; 218  |
                              328 ; 219  |#ifdef COLOR_262K
                              329 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              330 ; 221  |#elif defined(COLOR_65K)
                              331 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              332 ; 223  |#else
                              333 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              334 ; 225  |#endif
                              335 ; 226  |    
                              336 ; 227  |#endif // #ifndef _TYPES_H
                              337 
                              339 
                              340 ; 9    |#include "project.h"
                              341 
                              343 
                              344 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              345 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              346 ; 3    |//  Filename: project.inc
                              347 ; 4    |//  Description: 
                              348 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              349 ; 6    |
                              350 ; 7    |#if (!defined(_PROJECT_INC))
                              351 ; 8    |#define _PROJECT_INC 1
                              352 ; 9    |
                              353 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              354 ; 11   |#include "hwequ.h"
                              355 
                              357 
                              358 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              359 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                              360 ; 3    |//  File        : hwequ.inc
                              361 ; 4    |//  Description : STMP Hardware Constants
                              362 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              363 ; 6    |
                              364 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                              365 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                              366 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                              367 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                              368 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                              369 ; 12   |
                              370 ; 13   |#if (!defined(HWEQU_INC))
                              371 ; 14   |#define HWEQU_INC 1
                              372 ; 15   |
                              373 ; 16   |#include "types.h"
                              374 
                              376 
                              377 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              378 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              379 ; 3    |//
                              380 ; 4    |// Filename: types.h
                              381 ; 5    |// Description: Standard data types
                              382 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              383 ; 7    |
                              384 ; 8    |#ifndef _TYPES_H
                              385 ; 9    |#define _TYPES_H
                              386 ; 10   |
                              387 ; 11   |// TODO:  move this outta here!
                              388 ; 12   |#if !defined(NOERROR)
                              389 ; 13   |#define NOERROR 0
                              390 ; 14   |#define SUCCESS 0
                              391 ; 15   |#endif 
                              392 ; 16   |#if !defined(SUCCESS)
                              393 ; 17   |#define SUCCESS  0
                              394 ; 18   |#endif
                              395 ; 19   |#if !defined(ERROR)
                              396 ; 20   |#define ERROR   -1
                              397 ; 21   |#endif
                              398 ; 22   |#if !defined(FALSE)
                              399 ; 23   |#define FALSE 0
                              400 ; 24   |#endif
                              401 ; 25   |#if !defined(TRUE)
                              402 ; 26   |#define TRUE  1
                              403 ; 27   |#endif
                              404 ; 28   |
                              405 ; 29   |#if !defined(NULL)
                              406 ; 30   |#define NULL 0
                              407 ; 31   |#endif
                              408 ; 32   |
                              409 ; 33   |#define MAX_INT     0x7FFFFF
                              410 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              411 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              412 ; 36   |#define MAX_ULONG   (-1) 
                              413 ; 37   |
                              414 ; 38   |#define WORD_SIZE   24              // word size in bits
                              415 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              416 ; 40   |
                              417 ; 41   |
                              418 ; 42   |#define BYTE    unsigned char       // btVarName
                              419 ; 43   |#define CHAR    signed char         // cVarName
                              420 ; 44   |#define USHORT  unsigned short      // usVarName
                              421 ; 45   |#define SHORT   unsigned short      // sVarName
                              422 ; 46   |#define WORD    unsigned int        // wVarName
                              423 ; 47   |#define INT     signed int          // iVarName
                              424 ; 48   |#define DWORD   unsigned long       // dwVarName
                              425 ; 49   |#define LONG    signed long         // lVarName
                              426 ; 50   |#define BOOL    unsigned int        // bVarName
                              427 ; 51   |#define FRACT   _fract              // frVarName
                              428 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              429 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              430 ; 54   |#define FLOAT   float               // fVarName
                              431 ; 55   |#define DBL     double              // dVarName
                              432 ; 56   |#define ENUM    enum                // eVarName
                              433 ; 57   |#define CMX     _complex            // cmxVarName
                              434 ; 58   |typedef WORD UCS3;                   // 
                              435 ; 59   |
                              436 ; 60   |#define UINT16  unsigned short
                              437 ; 61   |#define UINT8   unsigned char   
                              438 ; 62   |#define UINT32  unsigned long
                              439 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              440 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                              441 ; 65   |#define WCHAR   UINT16
                              442 ; 66   |
                              443 ; 67   |//UINT128 is 16 bytes or 6 words
                              444 ; 68   |typedef struct UINT128_3500 {   
                              445 ; 69   |    int val[6];     
                              446 ; 70   |} UINT128_3500;
                              447 ; 71   |
                              448 ; 72   |#define UINT128   UINT128_3500
                              449 ; 73   |
                              450 ; 74   |// Little endian word packed byte strings:   
                              451 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              452 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              453 ; 77   |// Little endian word packed byte strings:   
                              454 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              455 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              456 ; 80   |
                              457 ; 81   |// Declare Memory Spaces To Use When Coding
                              458 ; 82   |// A. Sector Buffers
                              459 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              460 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              461 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              462 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              463 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              464 ; 88   |// B. Media DDI Memory
                              465 ; 89   |#define MEDIA_DDI_MEM _Y
                              466 ; 90   |
                              467 ; 91   |
                              468 ; 92   |
                              469 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              470 ; 94   |// Examples of circular pointers:
                              471 ; 95   |//    INT CIRC cpiVarName
                              472 ; 96   |//    DWORD CIRC cpdwVarName
                              473 ; 97   |
                              474 ; 98   |#define RETCODE INT                 // rcVarName
                              475 ; 99   |
                              476 ; 100  |// generic bitfield structure
                              477 ; 101  |struct Bitfield {
                              478 ; 102  |    unsigned int B0  :1;
                              479 ; 103  |    unsigned int B1  :1;
                              480 ; 104  |    unsigned int B2  :1;
                              481 ; 105  |    unsigned int B3  :1;
                              482 ; 106  |    unsigned int B4  :1;
                              483 ; 107  |    unsigned int B5  :1;
                              484 ; 108  |    unsigned int B6  :1;
                              485 ; 109  |    unsigned int B7  :1;
                              486 ; 110  |    unsigned int B8  :1;
                              487 ; 111  |    unsigned int B9  :1;
                              488 ; 112  |    unsigned int B10 :1;
                              489 ; 113  |    unsigned int B11 :1;
                              490 ; 114  |    unsigned int B12 :1;
                              491 ; 115  |    unsigned int B13 :1;
                              492 ; 116  |    unsigned int B14 :1;
                              493 ; 117  |    unsigned int B15 :1;
                              494 ; 118  |    unsigned int B16 :1;
                              495 ; 119  |    unsigned int B17 :1;
                              496 ; 120  |    unsigned int B18 :1;
                              497 ; 121  |    unsigned int B19 :1;
                              498 ; 122  |    unsigned int B20 :1;
                              499 ; 123  |    unsigned int B21 :1;
                              500 ; 124  |    unsigned int B22 :1;
                              501 ; 125  |    unsigned int B23 :1;
                              502 ; 126  |};
                              503 ; 127  |
                              504 ; 128  |union BitInt {
                              505 ; 129  |        struct Bitfield B;
                              506 ; 130  |        int        I;
                              507 ; 131  |};
                              508 ; 132  |
                              509 ; 133  |#define MAX_MSG_LENGTH 10
                              510 ; 134  |struct CMessage
                              511 ; 135  |{
                              512 ; 136  |        unsigned int m_uLength;
                              513 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              514 ; 138  |};
                              515 ; 139  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              516 ; 140  |typedef struct {
                              517 ; 141  |    WORD m_wLength;
                              518 ; 142  |    WORD m_wMessage;
                              519 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              520 ; 144  |} Message;
                              521 ; 145  |
                              522 ; 146  |struct MessageQueueDescriptor
                              523 ; 147  |{
                              524 ; 148  |        int *m_pBase;
                              525 ; 149  |        int m_iModulo;
                              526 ; 150  |        int m_iSize;
                              527 ; 151  |        int *m_pHead;
                              528 ; 152  |        int *m_pTail;
                              529 ; 153  |};
                              530 ; 154  |
                              531 ; 155  |struct ModuleEntry
                              532 ; 156  |{
                              533 ; 157  |    int m_iSignaledEventMask;
                              534 ; 158  |    int m_iWaitEventMask;
                              535 ; 159  |    int m_iResourceOfCode;
                              536 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              537 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                              538 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              539 ; 163  |    int m_uTimeOutHigh;
                              540 ; 164  |    int m_uTimeOutLow;
                              541 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              542 ; 166  |};
                              543 ; 167  |
                              544 ; 168  |union WaitMask{
                              545 ; 169  |    struct B{
                              546 ; 170  |        unsigned int m_bNone     :1;
                              547 ; 171  |        unsigned int m_bMessage  :1;
                              548 ; 172  |        unsigned int m_bTimer    :1;
                              549 ; 173  |        unsigned int m_bButton   :1;
                              550 ; 174  |    } B;
                              551 ; 175  |    int I;
                              552 ; 176  |} ;
                              553 ; 177  |
                              554 ; 178  |
                              555 ; 179  |struct Button {
                              556 ; 180  |        WORD wButtonEvent;
                              557 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              558 ; 182  |};
                              559 ; 183  |
                              560 ; 184  |struct Message {
                              561 ; 185  |        WORD wMsgLength;
                              562 ; 186  |        WORD wMsgCommand;
                              563 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              564 ; 188  |};
                              565 ; 189  |
                              566 ; 190  |union EventTypes {
                              567 ; 191  |        struct CMessage msg;
                              568 ; 192  |        struct Button Button ;
                              569 ; 193  |        struct Message Message;
                              570 ; 194  |};
                              571 ; 195  |
                              572 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              573 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              574 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              575 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              576 ; 200  |
                              577 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              578 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              579 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              580 ; 204  |
                              581 ; 205  |#if DEBUG
                              582 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              583 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              584 ; 208  |#else 
                              585 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                              586 ; 210  |#define DebugBuildAssert(x)    
                              587 ; 211  |#endif
                              588 ; 212  |
                              589 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              590 ; 214  |//  #pragma asm
                              591 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              592 ; 216  |//  #pragma endasm
                              593 ; 217  |
                              594 ; 218  |
                              595 ; 219  |#ifdef COLOR_262K
                              596 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                              597 ; 221  |#elif defined(COLOR_65K)
                              598 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                              599 ; 223  |#else
                              600 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                              601 ; 225  |#endif
                              602 ; 226  |    
                              603 ; 227  |#endif // #ifndef _TYPES_H
                              604 
                              606 
                              607 ; 17   |#include "regsclkctrl.h"
                              608 
                              610 
                              611 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                              612 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                              613 ; 3    |
                              614 ; 4    |
                              615 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              616 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                              617 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                              618 ; 8    |#define HW_CCR_LTC_BITPOS 1
                              619 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                              620 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                              621 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                              622 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                              623 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                              624 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                              625 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                              626 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                              627 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                              628 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                              629 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                              630 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                              631 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                              632 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                              633 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                              634 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                              635 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                              636 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                              637 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                              638 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                              639 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                              640 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                              641 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                              642 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                              643 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                              644 ; 34   |
                              645 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                              646 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                              647 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                              648 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                              649 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                              650 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                              651 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                              652 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                              653 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                              654 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                              655 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                              656 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                              657 ; 47   |
                              658 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                              659 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                              660 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                              661 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                              662 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                              663 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                              664 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                              665 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                              666 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                              667 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                              668 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                              669 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                              670 ; 60   |
                              671 ; 61   |typedef union               
                              672 ; 62   |{
                              673 ; 63   |    struct
                              674 ; 64   |    {
                              675 ; 65   |        int CKRST       :1; // Clock Reset
                              676 ; 66   |        int LTC         :1;
                              677 ; 67   |        int PLLEN       :1;
                              678 ; 68   |        int XTLEN       :1;
                              679 ; 69   |        int FLB         :1;
                              680 ; 70   |        unsigned ADIV   :3;
                              681 ; 71   |        int CKSRC       :1;
                              682 ; 72   |        unsigned DDIV   :3;
                              683 ; 73   |        unsigned PDIV   :5;
                              684 ; 74   |        int PWDN        :1;
                              685 ; 75   |        int ACKEN       :1;
                              686 ; 76   |        int LOCK        :1;
                              687 ; 77   |        unsigned ADIV1  :3;
                              688 ; 78   |        unsigned DDIV_MSB:1;
                              689 ; 79   |    } B;
                              690 ; 80   |
                              691 ; 81   |    int I;
                              692 ; 82   |    unsigned int U;
                              693 ; 83   |
                              694 ; 84   |} ccr_type;
                              695 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                              696 ; 86   |
                              697 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              698 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                              699 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                              700 ; 90   |#define HW_RCR_SRST_BITPOS 4
                              701 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                              702 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                              703 ; 93   |#define HW_RCR_NMI_BITPOS 10
                              704 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                              705 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                              706 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                              707 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                              708 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                              709 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                              710 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                              711 ; 101  |
                              712 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                              713 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                              714 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                              715 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                              716 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                              717 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                              718 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                              719 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                              720 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                              721 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                              722 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                              723 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                              724 ; 114  |
                              725 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                              726 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                              727 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                              728 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                              729 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                              730 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                              731 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                              732 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                              733 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                              734 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                              735 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                              736 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                              737 ; 127  |
                              738 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                              739 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                              740 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                              741 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                              742 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                              743 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                              744 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                              745 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                              746 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                              747 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                              748 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                              749 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                              750 ; 140  |
                              751 ; 141  |typedef union               
                              752 ; 142  |{
                              753 ; 143  |    struct
                              754 ; 144  |   {
                              755 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                              756 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                              757 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                              758 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                              759 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                              760 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                              761 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                              762 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                              763 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                              764 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                              765 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                              766 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                              767 ; 157  |    } B;
                              768 ; 158  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              769 ; 159  |    int I;
                              770 ; 160  |    unsigned int U;
                              771 ; 161  |
                              772 ; 162  |} rcr_type;
                              773 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                              774 ; 164  |
                              775 ; 165  |
                              776 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                              777 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                              778 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                              779 ; 169  |
                              780 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                              781 ; 171  |
                              782 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                              783 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                              784 ; 174  |typedef union               
                              785 ; 175  |{
                              786 ; 176  |    struct
                              787 ; 177  |   {
                              788 ; 178  |        int LOW;
                              789 ; 179  |    } B;
                              790 ; 180  |
                              791 ; 181  |    int I;
                              792 ; 182  |    unsigned int U;
                              793 ; 183  |
                              794 ; 184  |} dclkcntl_type;
                              795 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                              796 ; 186  |
                              797 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                              798 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                              799 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                              800 ; 190  |
                              801 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                              802 ; 192  |
                              803 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS) 
                              804 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                              805 ; 195  |typedef union               
                              806 ; 196  |{
                              807 ; 197  |    struct
                              808 ; 198  |   {
                              809 ; 199  |        int HIGH;
                              810 ; 200  |    } B;
                              811 ; 201  |
                              812 ; 202  |    int I;
                              813 ; 203  |    unsigned int U;
                              814 ; 204  |
                              815 ; 205  |} dclkcntu_type;
                              816 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                              817 ; 207  |
                              818 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                              819 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                              820 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                              821 ; 211  |
                              822 ; 212  |// Clock count register (lower)
                              823 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                              824 ; 214  |// Clock count register (upper)
                              825 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                              826 ; 216  |// Cycle steal count register
                              827 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                              828 ; 218  |
                              829 ; 219  |#endif
                              830 ; 220  |
                              831 ; 221  |
                              832 
                              834 
                              835 ; 18   |#include "regscore.h"
                              836 
                              838 
                              839 ; 1    |#if !(defined(__REGS_STATUS_INC))
                              840 ; 2    |#define __REGS_STATUS_INC 1
                              841 ; 3    |
                              842 ; 4    |
                              843 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              844 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                              845 ; 7    |#define HW_OMR_MA_BITPOS 0
                              846 ; 8    |#define HW_OMR_MB_BITPOS 1
                              847 ; 9    |#define HW_OMR_DE_BITPOS 2
                              848 ; 10   |#define HW_OMR_YE_BITPOS 3
                              849 ; 11   |#define HW_OMR_MC_BITPOS 4
                              850 ; 12   |#define HW_OMR_SD_BITPOS 6
                              851 ; 13   |
                              852 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                              853 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                              854 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                              855 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                              856 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                              857 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                              858 ; 20   |
                              859 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                              860 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                              861 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                              862 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                              863 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                              864 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                              865 ; 27   |
                              866 ; 28   |
                              867 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                              868 ; 30   |//  Status Register (HW_SR) Bit Positions
                              869 ; 31   |#define HW_SR_C_BITPOS 0
                              870 ; 32   |#define HW_SR_O_BITPOS 1
                              871 ; 33   |#define HW_SR_Z_BITPOS 2
                              872 ; 34   |#define HW_SR_N_BITPOS 3
                              873 ; 35   |#define HW_SR_U_BITPOS 4
                              874 ; 36   |#define HW_SR_E_BITPOS 5
                              875 ; 37   |#define HW_SR_L_BITPOS 6
                              876 ; 38   |#define HW_SR_IM_BITPOS 8
                              877 ; 39   |#define HW_SR_IM0_BITPOS 8
                              878 ; 40   |#define HW_SR_IM1_BITPOS 9
                              879 ; 41   |#define HW_SR_SM_BITPOS 10
                              880 ; 42   |#define HW_SR_SM0_BITPOS 10
                              881 ; 43   |#define HW_SR_SM1_BITPOS 11
                              882 ; 44   |#define HW_SR_TM_BITPOS 13
                              883 ; 45   |#define HW_SR_DP_BITPOS 14
                              884 ; 46   |#define HW_SR_LOOP_BITPOS 15
                              885 ; 47   |
                              886 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                              887 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                              888 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                              889 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                              890 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                              891 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                              892 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                              893 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                              894 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                              895 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                              896 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                              897 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                              898 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                              899 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                              900 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                              901 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                              902 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                              903 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                              904 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                              905 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                              906 ; 68   |
                              907 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                              908 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                              909 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                              910 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                              911 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                              912 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                              913 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                              914 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                              915 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                              916 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                              917 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                              918 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                              919 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                              920 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                              921 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                              922 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                              923 ; 85   |
                              924 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                              925 ; 87   |//  RAM/ROM Config Register Bit Positions
                              926 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                              927 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                              928 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                              929 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                              930 ; 92   |#endif
                              931 ; 93   |
                              932 ; 94   |
                              933 
                              935 
                              936 ; 19   |#include "regscodec.h"
                              937 
                              939 
                              940 ; 1    |#if !(defined(regscodecinc))
                              941 ; 2    |#define regscodecinc 1
                              942 ; 3    |
                              943 ; 4    |
                              944 ; 5    |
                              945 ; 6    |#include "types.h"
                              946 
                              948 
                              949 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              950 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              951 ; 3    |//
                              952 ; 4    |// Filename: types.h
                              953 ; 5    |// Description: Standard data types
                              954 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              955 ; 7    |
                              956 ; 8    |#ifndef _TYPES_H
                              957 ; 9    |#define _TYPES_H
                              958 ; 10   |
                              959 ; 11   |// TODO:  move this outta here!
                              960 ; 12   |#if !defined(NOERROR)
                              961 ; 13   |#define NOERROR 0
                              962 ; 14   |#define SUCCESS 0
                              963 ; 15   |#endif 
                              964 ; 16   |#if !defined(SUCCESS)
                              965 ; 17   |#define SUCCESS  0
                              966 ; 18   |#endif
                              967 ; 19   |#if !defined(ERROR)
                              968 ; 20   |#define ERROR   -1
                              969 ; 21   |#endif
                              970 ; 22   |#if !defined(FALSE)
                              971 ; 23   |#define FALSE 0
                              972 ; 24   |#endif
                              973 ; 25   |#if !defined(TRUE)
                              974 ; 26   |#define TRUE  1
                              975 ; 27   |#endif
                              976 ; 28   |
                              977 ; 29   |#if !defined(NULL)
                              978 ; 30   |#define NULL 0
                              979 ; 31   |#endif
                              980 ; 32   |
                              981 ; 33   |#define MAX_INT     0x7FFFFF
                              982 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              983 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              984 ; 36   |#define MAX_ULONG   (-1) 
                              985 ; 37   |
                              986 ; 38   |#define WORD_SIZE   24              // word size in bits
                              987 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              988 ; 40   |
                              989 ; 41   |
                              990 ; 42   |#define BYTE    unsigned char       // btVarName
                              991 ; 43   |#define CHAR    signed char         // cVarName
                              992 ; 44   |#define USHORT  unsigned short      // usVarName
                              993 ; 45   |#define SHORT   unsigned short      // sVarName
                              994 ; 46   |#define WORD    unsigned int        // wVarName
                              995 ; 47   |#define INT     signed int          // iVarName
                              996 ; 48   |#define DWORD   unsigned long       // dwVarName
                              997 ; 49   |#define LONG    signed long         // lVarName
                              998 ; 50   |#define BOOL    unsigned int        // bVarName
                              999 ; 51   |#define FRACT   _fract              // frVarName
                             1000 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1001 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1002 ; 54   |#define FLOAT   float               // fVarName
                             1003 ; 55   |#define DBL     double              // dVarName
                             1004 ; 56   |#define ENUM    enum                // eVarName
                             1005 ; 57   |#define CMX     _complex            // cmxVarName
                             1006 ; 58   |typedef WORD UCS3;                   // 
                             1007 ; 59   |
                             1008 ; 60   |#define UINT16  unsigned short
                             1009 ; 61   |#define UINT8   unsigned char   
                             1010 ; 62   |#define UINT32  unsigned long
                             1011 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1012 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             1013 ; 65   |#define WCHAR   UINT16
                             1014 ; 66   |
                             1015 ; 67   |//UINT128 is 16 bytes or 6 words
                             1016 ; 68   |typedef struct UINT128_3500 {   
                             1017 ; 69   |    int val[6];     
                             1018 ; 70   |} UINT128_3500;
                             1019 ; 71   |
                             1020 ; 72   |#define UINT128   UINT128_3500
                             1021 ; 73   |
                             1022 ; 74   |// Little endian word packed byte strings:   
                             1023 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1024 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1025 ; 77   |// Little endian word packed byte strings:   
                             1026 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1027 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1028 ; 80   |
                             1029 ; 81   |// Declare Memory Spaces To Use When Coding
                             1030 ; 82   |// A. Sector Buffers
                             1031 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1032 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1033 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1034 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1035 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1036 ; 88   |// B. Media DDI Memory
                             1037 ; 89   |#define MEDIA_DDI_MEM _Y
                             1038 ; 90   |
                             1039 ; 91   |
                             1040 ; 92   |
                             1041 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1042 ; 94   |// Examples of circular pointers:
                             1043 ; 95   |//    INT CIRC cpiVarName
                             1044 ; 96   |//    DWORD CIRC cpdwVarName
                             1045 ; 97   |
                             1046 ; 98   |#define RETCODE INT                 // rcVarName
                             1047 ; 99   |
                             1048 ; 100  |// generic bitfield structure
                             1049 ; 101  |struct Bitfield {
                             1050 ; 102  |    unsigned int B0  :1;
                             1051 ; 103  |    unsigned int B1  :1;
                             1052 ; 104  |    unsigned int B2  :1;
                             1053 ; 105  |    unsigned int B3  :1;
                             1054 ; 106  |    unsigned int B4  :1;
                             1055 ; 107  |    unsigned int B5  :1;
                             1056 ; 108  |    unsigned int B6  :1;
                             1057 ; 109  |    unsigned int B7  :1;
                             1058 ; 110  |    unsigned int B8  :1;
                             1059 ; 111  |    unsigned int B9  :1;
                             1060 ; 112  |    unsigned int B10 :1;
                             1061 ; 113  |    unsigned int B11 :1;
                             1062 ; 114  |    unsigned int B12 :1;
                             1063 ; 115  |    unsigned int B13 :1;
                             1064 ; 116  |    unsigned int B14 :1;
                             1065 ; 117  |    unsigned int B15 :1;
                             1066 ; 118  |    unsigned int B16 :1;
                             1067 ; 119  |    unsigned int B17 :1;
                             1068 ; 120  |    unsigned int B18 :1;
                             1069 ; 121  |    unsigned int B19 :1;
                             1070 ; 122  |    unsigned int B20 :1;
                             1071 ; 123  |    unsigned int B21 :1;
                             1072 ; 124  |    unsigned int B22 :1;
                             1073 ; 125  |    unsigned int B23 :1;
                             1074 ; 126  |};
                             1075 ; 127  |
                             1076 ; 128  |union BitInt {
                             1077 ; 129  |        struct Bitfield B;
                             1078 ; 130  |        int        I;
                             1079 ; 131  |};
                             1080 ; 132  |
                             1081 ; 133  |#define MAX_MSG_LENGTH 10
                             1082 ; 134  |struct CMessage
                             1083 ; 135  |{
                             1084 ; 136  |        unsigned int m_uLength;
                             1085 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1086 ; 138  |};
                             1087 ; 139  |
                             1088 ; 140  |typedef struct {
                             1089 ; 141  |    WORD m_wLength;
                             1090 ; 142  |    WORD m_wMessage;
                             1091 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1092 ; 144  |} Message;
                             1093 ; 145  |
                             1094 ; 146  |struct MessageQueueDescriptor
                             1095 ; 147  |{
                             1096 ; 148  |        int *m_pBase;
                             1097 ; 149  |        int m_iModulo;
                             1098 ; 150  |        int m_iSize;
                             1099 ; 151  |        int *m_pHead;
                             1100 ; 152  |        int *m_pTail;
                             1101 ; 153  |};
                             1102 ; 154  |
                             1103 ; 155  |struct ModuleEntry
                             1104 ; 156  |{
                             1105 ; 157  |    int m_iSignaledEventMask;
                             1106 ; 158  |    int m_iWaitEventMask;
                             1107 ; 159  |    int m_iResourceOfCode;
                             1108 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1109 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             1110 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1111 ; 163  |    int m_uTimeOutHigh;
                             1112 ; 164  |    int m_uTimeOutLow;
                             1113 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1114 ; 166  |};
                             1115 ; 167  |
                             1116 ; 168  |union WaitMask{
                             1117 ; 169  |    struct B{
                             1118 ; 170  |        unsigned int m_bNone     :1;
                             1119 ; 171  |        unsigned int m_bMessage  :1;
                             1120 ; 172  |        unsigned int m_bTimer    :1;
                             1121 ; 173  |        unsigned int m_bButton   :1;
                             1122 ; 174  |    } B;
                             1123 ; 175  |    int I;
                             1124 ; 176  |} ;
                             1125 ; 177  |
                             1126 ; 178  |
                             1127 ; 179  |struct Button {
                             1128 ; 180  |        WORD wButtonEvent;
                             1129 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1130 ; 182  |};
                             1131 ; 183  |
                             1132 ; 184  |struct Message {
                             1133 ; 185  |        WORD wMsgLength;
                             1134 ; 186  |        WORD wMsgCommand;
                             1135 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1136 ; 188  |};
                             1137 ; 189  |
                             1138 ; 190  |union EventTypes {
                             1139 ; 191  |        struct CMessage msg;
                             1140 ; 192  |        struct Button Button ;
                             1141 ; 193  |        struct Message Message;
                             1142 ; 194  |};
                             1143 ; 195  |
                             1144 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1145 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1146 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1147 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1148 ; 200  |
                             1149 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1150 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1151 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1152 ; 204  |
                             1153 ; 205  |#if DEBUG
                             1154 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1155 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1156 ; 208  |#else 
                             1157 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             1158 ; 210  |#define DebugBuildAssert(x)    
                             1159 ; 211  |#endif
                             1160 ; 212  |
                             1161 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1162 ; 214  |//  #pragma asm
                             1163 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1164 ; 216  |//  #pragma endasm
                             1165 ; 217  |
                             1166 ; 218  |
                             1167 ; 219  |#ifdef COLOR_262K
                             1168 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             1169 ; 221  |#elif defined(COLOR_65K)
                             1170 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             1171 ; 223  |#else
                             1172 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             1173 ; 225  |#endif
                             1174 ; 226  |    
                             1175 ; 227  |#endif // #ifndef _TYPES_H
                             1176 
                             1178 
                             1179 ; 7    |
                             1180 ; 8    |
                             1181 ; 9    |
                             1182 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1183 ; 11   |
                             1184 ; 12   |//   SYSTEM STMP Registers 
                             1185 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             1186 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1187 ; 15   |
                             1188 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             1189 ; 17   |
                             1190 ; 18   |
                             1191 ; 19   |
                             1192 ; 20   |
                             1193 ; 21   |
                             1194 ; 22   |
                             1195 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             1196 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             1197 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             1198 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             1199 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             1200 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             1201 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             1202 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             1203 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             1204 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             1205 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             1206 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             1207 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             1208 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             1209 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             1210 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             1211 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             1212 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             1213 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             1214 ; 42   |
                             1215 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             1216 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             1217 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             1218 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             1219 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             1220 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             1221 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             1222 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             1223 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             1224 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             1225 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             1226 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             1227 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             1228 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             1229 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             1230 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             1231 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             1232 ; 60   |
                             1233 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             1234 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             1235 ; 63   |
                             1236 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1237 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1238 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1239 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1240 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1241 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1242 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1243 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1244 ; 72   |
                             1245 ; 73   |#if defined(CAPLESS_HP)
                             1246 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             1247 ; 75   |#else 
                             1248 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             1249 ; 77   |#endif
                             1250 ; 78   |
                             1251 ; 79   |// Headphone control register
                             1252 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             1253 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1254 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             1255 ; 83   |typedef union               
                             1256 ; 84   |{
                             1257 ; 85   |    struct {
                             1258 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             1259 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             1260 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             1261 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             1262 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             1263 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             1264 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             1265 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             1266 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             1267 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             1268 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             1269 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             1270 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             1271 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             1272 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             1273 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             1274 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             1275 ; 103  |    } B;
                             1276 ; 104  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1277 ; 105  |    unsigned int U;
                             1278 ; 106  |} hpctrl_type;
                             1279 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             1280 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             1281 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             1282 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             1283 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             1284 ; 112  |
                             1285 ; 113  |
                             1286 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             1287 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             1288 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             1289 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1290 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             1291 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             1292 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             1293 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             1294 ; 122  |
                             1295 ; 123  |
                             1296 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1297 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             1298 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             1299 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             1300 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             1301 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             1302 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             1303 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             1304 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             1305 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             1306 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             1307 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             1308 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             1309 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             1310 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             1311 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             1312 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             1313 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             1314 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             1315 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             1316 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             1317 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             1318 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             1319 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             1320 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             1321 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             1322 ; 150  |
                             1323 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             1324 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             1325 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             1326 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             1327 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             1328 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             1329 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             1330 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             1331 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             1332 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             1333 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             1334 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             1335 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             1336 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             1337 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             1338 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             1339 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             1340 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             1341 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             1342 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             1343 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             1344 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             1345 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             1346 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             1347 ; 175  |
                             1348 ; 176  |
                             1349 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             1350 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             1351 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             1352 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             1353 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             1354 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             1355 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             1356 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             1357 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             1358 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             1359 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             1360 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             1361 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             1362 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             1363 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             1364 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             1365 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             1366 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             1367 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             1368 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             1369 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             1370 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             1371 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             1372 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             1373 ; 201  |
                             1374 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             1375 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             1376 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             1377 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             1378 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             1379 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             1380 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             1381 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             1382 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             1383 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             1384 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             1385 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             1386 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             1387 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             1388 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             1389 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             1390 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             1391 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             1392 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             1393 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             1394 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             1395 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             1396 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             1397 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             1398 ; 226  |
                             1399 ; 227  |typedef union               
                             1400 ; 228  |{
                             1401 ; 229  |    struct {
                             1402 ; 230  |        int INV_USB_CLK            : 1;
                             1403 ; 231  |        int USB_DFF_BYPASS         : 1;
                             1404 ; 232  |        int HOLD_GND               : 1;
                             1405 ; 233  |        int ACKI                   : 1;
                             1406 ; 234  |        int ASD2X                  : 1;
                             1407 ; 235  |        int PCPCU                  : 1;
                             1408 ; 236  |        int PCPCD                  : 1;
                             1409 ; 237  |        int DCKI                   : 1;
                             1410 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             1411 ; 239  |        int PSRN                   : 1;
                             1412 ; 240  |        int FX2                    : 1;
                             1413 ; 241  |        int VCOS                   : 1;
                             1414 ; 242  |        int XBCO                   : 1;
                             1415 ; 243  |        int XBGC                   : 1;
                             1416 ; 244  |        int ADTHD                  : 1;
                             1417 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             1418 ; 246  |        int PWDADC                 : 1;
                             1419 ; 247  |        int MICBIAS1               : 1;
                             1420 ; 248  |        int EZD                    : 1;
                             1421 ; 249  |        int DZCDA                  : 1;
                             1422 ; 250  |        int DZCFM                  : 1;
                             1423 ; 251  |        int DZCLI                  : 1;
                             1424 ; 252  |        int DZCMI                  : 1;
                             1425 ; 253  |        int DZCMA                  : 1;
                             1426 ; 254  |    } B;
                             1427 ; 255  |    int I;
                             1428 ; 256  |    unsigned int U;
                             1429 ; 257  |} mix_tbr_type;
                             1430 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             1431 ; 259  |
                             1432 ; 260  |
                             1433 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             1434 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1435 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             1436 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             1437 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             1438 ; 266  |
                             1439 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             1440 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             1441 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             1442 ; 270  |
                             1443 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             1444 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             1445 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             1446 ; 274  |
                             1447 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             1448 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             1449 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             1450 ; 278  |
                             1451 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             1452 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             1453 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             1454 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             1455 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             1456 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             1457 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             1458 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             1459 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             1460 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             1461 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             1462 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             1463 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             1464 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             1465 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             1466 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             1467 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             1468 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             1469 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             1470 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             1471 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             1472 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             1473 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             1474 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             1475 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             1476 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             1477 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             1478 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             1479 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             1480 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             1481 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             1482 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             1483 ; 311  |
                             1484 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             1485 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             1486 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             1487 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             1488 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             1489 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             1490 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             1491 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             1492 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             1493 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             1494 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             1495 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             1496 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             1497 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             1498 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             1499 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             1500 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             1501 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             1502 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             1503 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             1504 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             1505 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             1506 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             1507 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             1508 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             1509 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             1510 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             1511 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             1512 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             1513 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             1514 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             1515 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             1516 ; 344  |
                             1517 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             1518 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1519 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             1520 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             1521 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             1522 ; 350  |
                             1523 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             1524 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             1525 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             1526 ; 354  |
                             1527 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1528 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             1529 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             1530 ; 358  |
                             1531 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             1532 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             1533 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             1534 ; 362  |
                             1535 ; 363  |
                             1536 ; 364  |typedef union               
                             1537 ; 365  |{
                             1538 ; 366  |    struct
                             1539 ; 367  |    {
                             1540 ; 368  |        unsigned MR :5;
                             1541 ; 369  |        int         :3;
                             1542 ; 370  |        unsigned ML :5;
                             1543 ; 371  |        int         :2;
                             1544 ; 372  |        int MUTE    :1;
                             1545 ; 373  |    } B;
                             1546 ; 374  |    int I;
                             1547 ; 375  |    unsigned int U;
                             1548 ; 376  |} mix_mastervr_type;
                             1549 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             1550 ; 378  |
                             1551 ; 379  |
                             1552 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             1553 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             1554 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             1555 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             1556 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             1557 ; 385  |
                             1558 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             1559 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             1560 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             1561 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             1562 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             1563 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             1564 ; 392  |
                             1565 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             1566 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             1567 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             1568 ; 396  |
                             1569 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             1570 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             1571 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             1572 ; 400  |
                             1573 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             1574 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             1575 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             1576 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             1577 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             1578 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             1579 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             1580 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             1581 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             1582 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             1583 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             1584 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             1585 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             1586 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             1587 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             1588 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             1589 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             1590 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             1591 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             1592 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             1593 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             1594 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             1595 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             1596 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             1597 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             1598 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             1599 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             1600 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             1601 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             1602 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             1603 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             1604 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             1605 ; 433  |
                             1606 ; 434  |typedef union               
                             1607 ; 435  |{
                             1608 ; 436  |    struct {
                             1609 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             1610 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             1611 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             1612 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             1613 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             1614 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             1615 ; 443  |    } B;
                             1616 ; 444  |    int I;
                             1617 ; 445  |    unsigned int U;
                             1618 ; 446  |} mix_micinvr_type;
                             1619 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             1620 ; 448  |
                             1621 ; 449  |
                             1622 ; 450  |
                             1623 ; 451  |
                             1624 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             1625 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             1626 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             1627 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             1628 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             1629 ; 457  |
                             1630 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             1631 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             1632 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             1633 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             1634 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             1635 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             1636 ; 464  |
                             1637 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             1638 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             1639 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             1640 ; 468  |
                             1641 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             1642 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             1643 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             1644 ; 472  |
                             1645 ; 473  |typedef union               
                             1646 ; 474  |{
                             1647 ; 475  |    struct {
                             1648 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             1649 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             1650 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             1651 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             1652 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             1653 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             1654 ; 482  |    } B;
                             1655 ; 483  |    int I;
                             1656 ; 484  |    unsigned int U;
                             1657 ; 485  |} mix_line1invr_type;
                             1658 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             1659 ; 487  |
                             1660 ; 488  |
                             1661 ; 489  |
                             1662 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             1663 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             1664 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             1665 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             1666 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             1667 ; 495  |
                             1668 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             1669 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             1670 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             1671 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             1672 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             1673 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             1674 ; 502  |
                             1675 ; 503  |
                             1676 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             1677 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             1678 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             1679 ; 507  |
                             1680 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             1681 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             1682 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             1683 ; 511  |
                             1684 ; 512  |typedef union               
                             1685 ; 513  |{
                             1686 ; 514  |    struct {
                             1687 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             1688 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             1689 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             1690 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             1691 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             1692 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             1693 ; 521  |    } B;
                             1694 ; 522  |    int I;
                             1695 ; 523  |    unsigned int U;
                             1696 ; 524  |} mix_line2invr_type;
                             1697 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             1698 ; 526  |
                             1699 ; 527  |
                             1700 ; 528  |
                             1701 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             1702 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             1703 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             1704 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             1705 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             1706 ; 534  |
                             1707 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             1708 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             1709 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             1710 ; 538  |
                             1711 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             1712 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             1713 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             1714 ; 542  |
                             1715 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             1716 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             1717 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             1718 ; 546  |
                             1719 ; 547  |typedef union               
                             1720 ; 548  |{
                             1721 ; 549  |    struct {
                             1722 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             1723 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             1724 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             1725 ; 553  |    } B;
                             1726 ; 554  |    int I;
                             1727 ; 555  |    unsigned int U;
                             1728 ; 556  |} mix_dacinvr_type;
                             1729 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             1730 ; 558  |
                             1731 ; 559  |
                             1732 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             1733 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             1734 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             1735 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             1736 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             1737 ; 565  |
                             1738 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             1739 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             1740 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             1741 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             1742 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             1743 ; 571  |
                             1744 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             1745 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             1746 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             1747 ; 575  |
                             1748 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             1749 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             1750 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             1751 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             1752 ; 580  |
                             1753 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             1754 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             1755 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             1756 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             1757 ; 585  |
                             1758 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             1759 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             1760 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETMASK)
                             1761 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             1762 ; 590  |
                             1763 ; 591  |typedef union               
                             1764 ; 592  |{
                             1765 ; 593  |    struct {
                             1766 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             1767 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             1768 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             1769 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             1770 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             1771 ; 599  |    } B;
                             1772 ; 600  |    int I;
                             1773 ; 601  |    unsigned int U;
                             1774 ; 602  |} mix_recselr_type;
                             1775 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             1776 ; 604  |
                             1777 ; 605  |
                             1778 ; 606  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1779 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             1780 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             1781 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             1782 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             1783 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             1784 ; 612  |
                             1785 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             1786 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             1787 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             1788 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             1789 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             1790 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             1791 ; 619  |
                             1792 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             1793 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             1794 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             1795 ; 623  |
                             1796 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             1797 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             1798 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             1799 ; 627  |
                             1800 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             1801 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             1802 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             1803 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             1804 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             1805 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             1806 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             1807 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             1808 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             1809 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             1810 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             1811 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             1812 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             1813 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             1814 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             1815 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             1816 ; 644  |
                             1817 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             1818 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             1819 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             1820 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             1821 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             1822 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             1823 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             1824 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             1825 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             1826 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             1827 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             1828 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             1829 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             1830 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             1831 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             1832 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             1833 ; 661  |
                             1834 ; 662  |typedef union               
                             1835 ; 663  |{
                             1836 ; 664  |    struct {
                             1837 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             1838 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             1839 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             1840 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             1841 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             1842 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             1843 ; 671  |    } B;
                             1844 ; 672  |    int I;
                             1845 ; 673  |    unsigned int U;
                             1846 ; 674  |} mix_adcgainr_type;
                             1847 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             1848 ; 676  |
                             1849 ; 677  |
                             1850 ; 678  |
                             1851 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             1852 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             1853 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             1854 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             1855 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             1856 ; 684  |
                             1857 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             1858 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             1859 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             1860 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             1861 ; 689  |
                             1862 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             1863 ; 691  |
                             1864 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             1865 ; 693  |
                             1866 ; 694  |typedef union               
                             1867 ; 695  |{
                             1868 ; 696  |    struct {
                             1869 ; 697  |                int                     : 9;
                             1870 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             1871 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             1872 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             1873 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             1874 ; 702  |    } B;
                             1875 ; 703  |    int I;
                             1876 ; 704  |    unsigned int U;
                             1877 ; 705  |} mix_pwrdnr_type;
                             1878 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             1879 ; 707  |
                             1880 ; 708  |
                             1881 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             1882 ; 710  |
                             1883 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             1884 ; 712  |
                             1885 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             1886 ; 714  |
                             1887 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             1888 ; 716  |
                             1889 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             1890 ; 718  |
                             1891 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             1892 ; 720  |
                             1893 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             1894 ; 722  |
                             1895 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             1896 ; 724  |
                             1897 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             1898 ; 726  |
                             1899 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             1900 ; 728  |
                             1901 ; 729  |
                             1902 ; 730  |
                             1903 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             1904 ; 732  |
                             1905 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             1906 ; 734  |
                             1907 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             1908 ; 736  |
                             1909 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             1910 ; 738  |
                             1911 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             1912 ; 740  |
                             1913 ; 741  |
                             1914 ; 742  |
                             1915 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_TEST_DAC_CHOP_CLK_BITPOS)        
                             1916 ; 744  |
                             1917 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             1918 ; 746  |
                             1919 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             1920 ; 748  |
                             1921 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_CFG_BITPOS) 
                             1922 ; 750  |
                             1923 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_BITPOS) 
                             1924 ; 752  |
                             1925 ; 753  |
                             1926 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             1927 ; 755  |
                             1928 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)     
                             1929 ; 757  |
                             1930 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             1931 ; 759  |
                             1932 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             1933 ; 761  |
                             1934 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             1935 ; 763  |
                             1936 ; 764  |
                             1937 ; 765  |typedef union               
                             1938 ; 766  |{
                             1939 ; 767  |    struct {
                             1940 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             1941 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             1942 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             1943 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             1944 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             1945 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             1946 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             1947 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             1948 ; 776  |    } B;
                             1949 ; 777  |    int I;
                             1950 ; 778  |    unsigned int U;
                             1951 ; 779  |} mix_test_type;
                             1952 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Analog Persistent Config Register */
                             1953 ; 781  |
                             1954 ; 782  |
                             1955 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             1956 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             1957 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             1958 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             1959 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             1960 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             1961 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             1962 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             1963 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             1964 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             1965 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             1966 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             1967 ; 795  |
                             1968 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             1969 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             1970 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             1971 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             1972 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             1973 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             1974 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             1975 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             1976 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             1977 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             1978 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             1979 ; 807  |
                             1980 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_DACVBGVAL_BITPOS)
                             1981 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_BITPOS)
                             1982 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_BITPOS)
                             1983 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS)
                             1984 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCREFV_BITPOS)
                             1985 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_BITPOS)
                             1986 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDWNS_BITPOS)
                             1987 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BITPOS)
                             1988 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BITPOS)
                             1989 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_PWR_BITPOS)
                             1990 ; 818  |
                             1991 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             1992 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             1993 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             1994 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             1995 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             1996 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             1997 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             1998 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             1999 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             2000 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             2001 ; 829  |
                             2002 ; 830  |typedef union               
                             2003 ; 831  |{
                             2004 ; 832  |    struct {
                             2005 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             2006 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             2007 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             2008 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             2009 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             2010 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             2011 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             2012 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             2013 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             2014 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             2015 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             2016 ; 844  |    } B;
                             2017 ; 845  |    int I;
                             2018 ; 846  |    unsigned int U;
                             2019 ; 847  |} ref_ctrl_type;
                             2020 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             2021 ; 849  |
                             2022 ; 850  |
                             2023 ; 851  |
                             2024 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             2025 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             2026 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             2027 ; 855  |//////  DAC Registers
                             2028 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             2029 ; 857  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2030 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             2031 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             2032 ; 860  |
                             2033 ; 861  |
                             2034 ; 862  |
                             2035 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             2036 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             2037 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             2038 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             2039 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             2040 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             2041 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             2042 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             2043 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             2044 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             2045 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             2046 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             2047 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             2048 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             2049 ; 877  |
                             2050 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             2051 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             2052 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             2053 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             2054 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             2055 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             2056 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             2057 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             2058 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             2059 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             2060 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             2061 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             2062 ; 890  |
                             2063 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             2064 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             2065 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             2066 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             2067 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             2068 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             2069 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             2070 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             2071 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             2072 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             2073 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             2074 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             2075 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             2076 ; 904  |
                             2077 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             2078 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             2079 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             2080 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             2081 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             2082 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             2083 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             2084 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             2085 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             2086 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             2087 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             2088 ; 916  |
                             2089 ; 917  |
                             2090 ; 918  |typedef union               
                             2091 ; 919  |{
                             2092 ; 920  |    struct {
                             2093 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             2094 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             2095 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             2096 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             2097 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             2098 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             2099 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             2100 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             2101 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             2102 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             2103 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             2104 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             2105 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             2106 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             2107 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             2108 ; 936  |    } B;
                             2109 ; 937  |    int I;
                             2110 ; 938  |    unsigned int U;
                             2111 ; 939  |} dac_csr_type;
                             2112 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             2113 ; 941  |
                             2114 ; 942  |
                             2115 ; 943  |
                             2116 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             2117 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             2118 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             2119 ; 947  |
                             2120 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             2121 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             2122 ; 950  |
                             2123 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             2124 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             2125 ; 953  |
                             2126 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             2127 ; 955  |
                             2128 ; 956  |typedef union               
                             2129 ; 957  |{
                             2130 ; 958  |    struct {
                             2131 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             2132 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             2133 ; 961  |    } B;
                             2134 ; 962  |    int I;
                             2135 ; 963  |    unsigned int U;
                             2136 ; 964  |} dac_srr_type;
                             2137 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             2138 ; 966  |
                             2139 ; 967  |
                             2140 ; 968  |
                             2141 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             2142 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             2143 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             2144 ; 972  |
                             2145 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             2146 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             2147 ; 975  |
                             2148 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             2149 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                             2150 ; 978  |
                             2151 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             2152 ; 980  |
                             2153 ; 981  |typedef union               
                             2154 ; 982  |{
                             2155 ; 983  |    struct {
                             2156 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             2157 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             2158 ; 986  |    } B;
                             2159 ; 987  |    int I;
                             2160 ; 988  |    unsigned int U;
                             2161 ; 989  |} dac_wcr_type;
                             2162 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             2163 ; 991  |
                             2164 ; 992  |
                             2165 ; 993  |
                             2166 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             2167 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             2168 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             2169 ; 997  |
                             2170 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             2171 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             2172 ; 1000 |
                             2173 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             2174 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                             2175 ; 1003 |
                             2176 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             2177 ; 1005 |
                             2178 ; 1006 |typedef union               
                             2179 ; 1007 |{
                             2180 ; 1008 |    struct {
                             2181 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             2182 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             2183 ; 1011 |    } B;
                             2184 ; 1012 |    int I;
                             2185 ; 1013 |    unsigned int U;
                             2186 ; 1014 |} dac_cpr_type;
                             2187 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             2188 ; 1016 |
                             2189 ; 1017 |
                             2190 ; 1018 |
                             2191 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             2192 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             2193 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             2194 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             2195 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             2196 ; 1024 |
                             2197 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             2198 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             2199 ; 1027 |
                             2200 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             2201 ; 1029 |
                             2202 ; 1030 |typedef union               
                             2203 ; 1031 |{
                             2204 ; 1032 |    struct {
                             2205 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             2206 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             2207 ; 1035 |    } B;
                             2208 ; 1036 |    int I;
                             2209 ; 1037 |    unsigned int U;
                             2210 ; 1038 |} dac_mr_type;
                             2211 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             2212 ; 1040 |
                             2213 ; 1041 |
                             2214 ; 1042 |
                             2215 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             2216 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             2217 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             2218 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             2219 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             2220 ; 1048 |
                             2221 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             2222 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                             2223 ; 1051 |
                             2224 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             2225 ; 1053 |
                             2226 ; 1054 |typedef union               
                             2227 ; 1055 |{
                             2228 ; 1056 |    struct {
                             2229 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             2230 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             2231 ; 1059 |    } B;
                             2232 ; 1060 |    int I;
                             2233 ; 1061 |    unsigned int U;
                             2234 ; 1062 |} dac_bar_type;
                             2235 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             2236 ; 1064 |
                             2237 ; 1065 |
                             2238 ; 1066 |
                             2239 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             2240 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             2241 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             2242 ; 1070 |
                             2243 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             2244 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             2245 ; 1073 |
                             2246 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                             2247 ; 1075 |
                             2248 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             2249 ; 1077 |
                             2250 ; 1078 |typedef union               
                             2251 ; 1079 |{
                             2252 ; 1080 |    struct {
                             2253 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             2254 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             2255 ; 1083 |    } B;
                             2256 ; 1084 |    int I;
                             2257 ; 1085 |    unsigned int U;
                             2258 ; 1086 |} dac_icr_type;
                             2259 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             2260 ; 1088 |
                             2261 ; 1089 |
                             2262 ; 1090 |
                             2263 ; 1091 |
                             2264 ; 1092 |
                             2265 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             2266 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             2267 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             2268 ; 1096 |//////  ADC Registers
                             2269 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             2270 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             2271 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             2272 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             2273 ; 1101 |
                             2274 ; 1102 |
                             2275 ; 1103 |
                             2276 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             2277 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             2278 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             2279 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             2280 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2281 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             2282 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             2283 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             2284 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             2285 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             2286 ; 1114 |
                             2287 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             2288 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             2289 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             2290 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             2291 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             2292 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             2293 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             2294 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             2295 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             2296 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             2297 ; 1125 |
                             2298 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             2299 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             2300 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             2301 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             2302 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             2303 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS)        
                             2304 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BITPOS)        
                             2305 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             2306 ; 1134 |
                             2307 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             2308 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             2309 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             2310 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             2311 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             2312 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             2313 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             2314 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             2315 ; 1143 |
                             2316 ; 1144 |typedef union               
                             2317 ; 1145 |{
                             2318 ; 1146 |    struct {
                             2319 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             2320 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             2321 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             2322 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             2323 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             2324 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             2325 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             2326 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             2327 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             2328 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             2329 ; 1157 |    } B;
                             2330 ; 1158 |    int I;
                             2331 ; 1159 |    unsigned int U;
                             2332 ; 1160 |} adc_csr_type;
                             2333 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             2334 ; 1162 |
                             2335 ; 1163 |
                             2336 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             2337 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             2338 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             2339 ; 1167 |
                             2340 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             2341 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             2342 ; 1170 |
                             2343 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                             2344 ; 1172 |
                             2345 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             2346 ; 1174 |
                             2347 ; 1175 |typedef union               
                             2348 ; 1176 |{
                             2349 ; 1177 |    struct {
                             2350 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             2351 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             2352 ; 1180 |    } B;
                             2353 ; 1181 |    int I;
                             2354 ; 1182 |    unsigned int U;
                             2355 ; 1183 |} adc_wcr_type;
                             2356 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             2357 ; 1185 |
                             2358 ; 1186 |
                             2359 ; 1187 |
                             2360 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             2361 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             2362 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             2363 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             2364 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             2365 ; 1193 |
                             2366 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             2367 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                             2368 ; 1196 |
                             2369 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             2370 ; 1198 |
                             2371 ; 1199 |typedef union               
                             2372 ; 1200 |{
                             2373 ; 1201 |    struct {
                             2374 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             2375 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             2376 ; 1204 |    } B;
                             2377 ; 1205 |    int I;
                             2378 ; 1206 |    unsigned int U;
                             2379 ; 1207 |} adc_bar_type;
                             2380 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             2381 ; 1209 |
                             2382 ; 1210 |
                             2383 ; 1211 |
                             2384 ; 1212 |
                             2385 ; 1213 |
                             2386 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             2387 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             2388 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             2389 ; 1217 |
                             2390 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             2391 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             2392 ; 1220 |
                             2393 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                             2394 ; 1222 |
                             2395 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             2396 ; 1224 |
                             2397 ; 1225 |typedef union               
                             2398 ; 1226 |{
                             2399 ; 1227 |    struct {
                             2400 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             2401 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             2402 ; 1230 |    } B;
                             2403 ; 1231 |    int I;
                             2404 ; 1232 |    unsigned int U;
                             2405 ; 1233 |} adc_cpr_type;
                             2406 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             2407 ; 1235 |
                             2408 ; 1236 |
                             2409 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             2410 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             2411 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             2412 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             2413 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             2414 ; 1242 |
                             2415 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             2416 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             2417 ; 1245 |
                             2418 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             2419 ; 1247 |
                             2420 ; 1248 |typedef union               
                             2421 ; 1249 |{
                             2422 ; 1250 |    struct {
                             2423 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             2424 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             2425 ; 1253 |    } B;
                             2426 ; 1254 |    int I;
                             2427 ; 1255 |    unsigned int U;
                             2428 ; 1256 |} adc_mr_type;
                             2429 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             2430 ; 1258 |
                             2431 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             2432 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             2433 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             2434 ; 1262 |
                             2435 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             2436 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             2437 ; 1265 |
                             2438 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             2439 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             2440 ; 1268 |
                             2441 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             2442 ; 1270 |
                             2443 ; 1271 |typedef union               
                             2444 ; 1272 |{
                             2445 ; 1273 |    struct {
                             2446 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             2447 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             2448 ; 1276 |    } B;
                             2449 ; 1277 |    int I;
                             2450 ; 1278 |    unsigned int U;
                             2451 ; 1279 |} adc_srr_type;
                             2452 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             2453 ; 1281 |
                             2454 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             2455 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             2456 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             2457 ; 1285 |
                             2458 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             2459 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             2460 ; 1288 |
                             2461 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                             2462 ; 1290 |
                             2463 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             2464 ; 1292 |
                             2465 ; 1293 |typedef union               
                             2466 ; 1294 |{
                             2467 ; 1295 |    struct {
                             2468 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             2469 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             2470 ; 1298 |    } B;
                             2471 ; 1299 |    int I;
                             2472 ; 1300 |    unsigned int U;
                             2473 ; 1301 |} adc_icr_type;
                             2474 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             2475 ; 1303 |
                             2476 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             2477 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             2478 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2479 ; 1307 |
                             2480 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             2481 ; 1309 |
                             2482 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             2483 ; 1311 |
                             2484 ; 1312 |#endif
                             2485 ; 1313 |
                             2486 
                             2488 
                             2489 ; 20   |#include "regsdcdc.h"
                             2490 
                             2492 
                             2493 ; 1    |#if !(defined(regsdcdcinc))
                             2494 ; 2    |
                             2495 ; 3    |#define regssysteminc 1
                             2496 ; 4    |
                             2497 ; 5    |
                             2498 ; 6    |
                             2499 ; 7    |#include "types.h"
                             2500 
                             2502 
                             2503 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2504 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2505 ; 3    |//
                             2506 ; 4    |// Filename: types.h
                             2507 ; 5    |// Description: Standard data types
                             2508 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2509 ; 7    |
                             2510 ; 8    |#ifndef _TYPES_H
                             2511 ; 9    |#define _TYPES_H
                             2512 ; 10   |
                             2513 ; 11   |// TODO:  move this outta here!
                             2514 ; 12   |#if !defined(NOERROR)
                             2515 ; 13   |#define NOERROR 0
                             2516 ; 14   |#define SUCCESS 0
                             2517 ; 15   |#endif 
                             2518 ; 16   |#if !defined(SUCCESS)
                             2519 ; 17   |#define SUCCESS  0
                             2520 ; 18   |#endif
                             2521 ; 19   |#if !defined(ERROR)
                             2522 ; 20   |#define ERROR   -1
                             2523 ; 21   |#endif
                             2524 ; 22   |#if !defined(FALSE)
                             2525 ; 23   |#define FALSE 0
                             2526 ; 24   |#endif
                             2527 ; 25   |#if !defined(TRUE)
                             2528 ; 26   |#define TRUE  1
                             2529 ; 27   |#endif
                             2530 ; 28   |
                             2531 ; 29   |#if !defined(NULL)
                             2532 ; 30   |#define NULL 0
                             2533 ; 31   |#endif
                             2534 ; 32   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2535 ; 33   |#define MAX_INT     0x7FFFFF
                             2536 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2537 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2538 ; 36   |#define MAX_ULONG   (-1) 
                             2539 ; 37   |
                             2540 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2541 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2542 ; 40   |
                             2543 ; 41   |
                             2544 ; 42   |#define BYTE    unsigned char       // btVarName
                             2545 ; 43   |#define CHAR    signed char         // cVarName
                             2546 ; 44   |#define USHORT  unsigned short      // usVarName
                             2547 ; 45   |#define SHORT   unsigned short      // sVarName
                             2548 ; 46   |#define WORD    unsigned int        // wVarName
                             2549 ; 47   |#define INT     signed int          // iVarName
                             2550 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2551 ; 49   |#define LONG    signed long         // lVarName
                             2552 ; 50   |#define BOOL    unsigned int        // bVarName
                             2553 ; 51   |#define FRACT   _fract              // frVarName
                             2554 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2555 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2556 ; 54   |#define FLOAT   float               // fVarName
                             2557 ; 55   |#define DBL     double              // dVarName
                             2558 ; 56   |#define ENUM    enum                // eVarName
                             2559 ; 57   |#define CMX     _complex            // cmxVarName
                             2560 ; 58   |typedef WORD UCS3;                   // 
                             2561 ; 59   |
                             2562 ; 60   |#define UINT16  unsigned short
                             2563 ; 61   |#define UINT8   unsigned char   
                             2564 ; 62   |#define UINT32  unsigned long
                             2565 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2566 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             2567 ; 65   |#define WCHAR   UINT16
                             2568 ; 66   |
                             2569 ; 67   |//UINT128 is 16 bytes or 6 words
                             2570 ; 68   |typedef struct UINT128_3500 {   
                             2571 ; 69   |    int val[6];     
                             2572 ; 70   |} UINT128_3500;
                             2573 ; 71   |
                             2574 ; 72   |#define UINT128   UINT128_3500
                             2575 ; 73   |
                             2576 ; 74   |// Little endian word packed byte strings:   
                             2577 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2578 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2579 ; 77   |// Little endian word packed byte strings:   
                             2580 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2581 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2582 ; 80   |
                             2583 ; 81   |// Declare Memory Spaces To Use When Coding
                             2584 ; 82   |// A. Sector Buffers
                             2585 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2586 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2587 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2588 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2589 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2590 ; 88   |// B. Media DDI Memory
                             2591 ; 89   |#define MEDIA_DDI_MEM _Y
                             2592 ; 90   |
                             2593 ; 91   |
                             2594 ; 92   |
                             2595 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2596 ; 94   |// Examples of circular pointers:
                             2597 ; 95   |//    INT CIRC cpiVarName
                             2598 ; 96   |//    DWORD CIRC cpdwVarName
                             2599 ; 97   |
                             2600 ; 98   |#define RETCODE INT                 // rcVarName
                             2601 ; 99   |
                             2602 ; 100  |// generic bitfield structure
                             2603 ; 101  |struct Bitfield {
                             2604 ; 102  |    unsigned int B0  :1;
                             2605 ; 103  |    unsigned int B1  :1;
                             2606 ; 104  |    unsigned int B2  :1;
                             2607 ; 105  |    unsigned int B3  :1;
                             2608 ; 106  |    unsigned int B4  :1;
                             2609 ; 107  |    unsigned int B5  :1;
                             2610 ; 108  |    unsigned int B6  :1;
                             2611 ; 109  |    unsigned int B7  :1;
                             2612 ; 110  |    unsigned int B8  :1;
                             2613 ; 111  |    unsigned int B9  :1;
                             2614 ; 112  |    unsigned int B10 :1;
                             2615 ; 113  |    unsigned int B11 :1;
                             2616 ; 114  |    unsigned int B12 :1;
                             2617 ; 115  |    unsigned int B13 :1;
                             2618 ; 116  |    unsigned int B14 :1;
                             2619 ; 117  |    unsigned int B15 :1;
                             2620 ; 118  |    unsigned int B16 :1;
                             2621 ; 119  |    unsigned int B17 :1;
                             2622 ; 120  |    unsigned int B18 :1;
                             2623 ; 121  |    unsigned int B19 :1;
                             2624 ; 122  |    unsigned int B20 :1;
                             2625 ; 123  |    unsigned int B21 :1;
                             2626 ; 124  |    unsigned int B22 :1;
                             2627 ; 125  |    unsigned int B23 :1;
                             2628 ; 126  |};
                             2629 ; 127  |
                             2630 ; 128  |union BitInt {
                             2631 ; 129  |        struct Bitfield B;
                             2632 ; 130  |        int        I;
                             2633 ; 131  |};
                             2634 ; 132  |
                             2635 ; 133  |#define MAX_MSG_LENGTH 10
                             2636 ; 134  |struct CMessage
                             2637 ; 135  |{
                             2638 ; 136  |        unsigned int m_uLength;
                             2639 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2640 ; 138  |};
                             2641 ; 139  |
                             2642 ; 140  |typedef struct {
                             2643 ; 141  |    WORD m_wLength;
                             2644 ; 142  |    WORD m_wMessage;
                             2645 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2646 ; 144  |} Message;
                             2647 ; 145  |
                             2648 ; 146  |struct MessageQueueDescriptor
                             2649 ; 147  |{
                             2650 ; 148  |        int *m_pBase;
                             2651 ; 149  |        int m_iModulo;
                             2652 ; 150  |        int m_iSize;
                             2653 ; 151  |        int *m_pHead;
                             2654 ; 152  |        int *m_pTail;
                             2655 ; 153  |};
                             2656 ; 154  |
                             2657 ; 155  |struct ModuleEntry
                             2658 ; 156  |{
                             2659 ; 157  |    int m_iSignaledEventMask;
                             2660 ; 158  |    int m_iWaitEventMask;
                             2661 ; 159  |    int m_iResourceOfCode;
                             2662 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2663 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             2664 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2665 ; 163  |    int m_uTimeOutHigh;
                             2666 ; 164  |    int m_uTimeOutLow;
                             2667 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2668 ; 166  |};
                             2669 ; 167  |
                             2670 ; 168  |union WaitMask{
                             2671 ; 169  |    struct B{
                             2672 ; 170  |        unsigned int m_bNone     :1;
                             2673 ; 171  |        unsigned int m_bMessage  :1;
                             2674 ; 172  |        unsigned int m_bTimer    :1;
                             2675 ; 173  |        unsigned int m_bButton   :1;
                             2676 ; 174  |    } B;
                             2677 ; 175  |    int I;
                             2678 ; 176  |} ;
                             2679 ; 177  |
                             2680 ; 178  |
                             2681 ; 179  |struct Button {
                             2682 ; 180  |        WORD wButtonEvent;
                             2683 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2684 ; 182  |};
                             2685 ; 183  |
                             2686 ; 184  |struct Message {
                             2687 ; 185  |        WORD wMsgLength;
                             2688 ; 186  |        WORD wMsgCommand;
                             2689 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2690 ; 188  |};
                             2691 ; 189  |
                             2692 ; 190  |union EventTypes {
                             2693 ; 191  |        struct CMessage msg;
                             2694 ; 192  |        struct Button Button ;
                             2695 ; 193  |        struct Message Message;
                             2696 ; 194  |};
                             2697 ; 195  |
                             2698 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2699 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2700 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2701 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2702 ; 200  |
                             2703 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2704 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2705 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2706 ; 204  |
                             2707 ; 205  |#if DEBUG
                             2708 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2709 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2710 ; 208  |#else 
                             2711 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             2712 ; 210  |#define DebugBuildAssert(x)    
                             2713 ; 211  |#endif
                             2714 ; 212  |
                             2715 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2716 ; 214  |//  #pragma asm
                             2717 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2718 ; 216  |//  #pragma endasm
                             2719 ; 217  |
                             2720 ; 218  |
                             2721 ; 219  |#ifdef COLOR_262K
                             2722 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             2723 ; 221  |#elif defined(COLOR_65K)
                             2724 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             2725 ; 223  |#else
                             2726 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             2727 ; 225  |#endif
                             2728 ; 226  |    
                             2729 ; 227  |#endif // #ifndef _TYPES_H
                             2730 
                             2732 
                             2733 ; 8    |
                             2734 ; 9    |
                             2735 ; 10   |
                             2736 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2737 ; 12   |
                             2738 ; 13   |//   SYSTEM STMP Registers 
                             2739 ; 14   |//      Last Edited 2.19.2003 M. May
                             2740 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2741 ; 16   |
                             2742 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             2743 ; 18   |
                             2744 ; 19   |
                             2745 ; 20   |
                             2746 ; 21   |
                             2747 ; 22   |
                             2748 ; 23   |
                             2749 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2750 ; 25   |
                             2751 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             2752 ; 27   |
                             2753 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             2754 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             2755 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             2756 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             2757 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             2758 ; 33   |
                             2759 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             2760 ; 35   |
                             2761 ; 36   |
                             2762 ; 37   |
                             2763 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             2764 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             2765 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             2766 ; 41   |
                             2767 ; 42   |
                             2768 ; 43   |
                             2769 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBU_BITPOS)        
                             2770 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL0_PLEVBO_BITPOS) 
                             2771 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NLEV_BITPOS)  
                             2772 ; 47   |
                             2773 ; 48   |
                             2774 ; 49   |
                             2775 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             2776 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             2777 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             2778 ; 53   |
                             2779 ; 54   |
                             2780 ; 55   |
                             2781 ; 56   |
                             2782 ; 57   |
                             2783 ; 58   |typedef union               
                             2784 ; 59   |{
                             2785 ; 60   |    struct {
                             2786 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2787 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             2788 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             2789 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             2790 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             2791 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             2792 ; 67   |    } B;
                             2793 ; 68   |    unsigned int I;
                             2794 ; 69   |} dcdc1_ctrl0_type;
                             2795 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* DcDc#1 Limit Level Register */
                             2796 ; 71   |
                             2797 ; 72   |
                             2798 ; 73   |
                             2799 ; 74   |
                             2800 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             2801 ; 76   |
                             2802 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             2803 ; 78   |
                             2804 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             2805 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             2806 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             2807 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             2808 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             2809 ; 84   |
                             2810 ; 85   |
                             2811 ; 86   |
                             2812 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             2813 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             2814 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             2815 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             2816 ; 91   |
                             2817 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS)        
                             2818 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS) 
                             2819 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FFOR_BITPOS)  
                             2820 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CTRL1_PFMCTRL_BITPOS)   
                             2821 ; 96   |
                             2822 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             2823 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             2824 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             2825 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             2826 ; 101  |
                             2827 ; 102  |
                             2828 ; 103  |typedef union               
                             2829 ; 104  |{
                             2830 ; 105  |    struct {
                             2831 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             2832 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             2833 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2834 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             2835 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2836 ; 111  |    } B;
                             2837 ; 112  |    unsigned int I;
                             2838 ; 113  |} dcdc1_ctrl1_type;
                             2839 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* DcDc#1 Ctrl #1 Register */
                             2840 ; 115  |
                             2841 ; 116  |
                             2842 ; 117  |
                             2843 ; 118  |
                             2844 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             2845 ; 120  |
                             2846 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             2847 ; 122  |
                             2848 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             2849 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             2850 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             2851 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             2852 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             2853 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             2854 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             2855 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             2856 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             2857 ; 132  |
                             2858 ; 133  |
                             2859 ; 134  |
                             2860 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             2861 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             2862 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             2863 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             2864 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             2865 ; 140  |
                             2866 ; 141  |
                             2867 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             2868 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             2869 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             2870 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             2871 ; 146  |
                             2872 ; 147  |
                             2873 ; 148  |
                             2874 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)     
                             2875 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK) 
                             2876 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK)  
                             2877 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK)  
                             2878 ; 153  |
                             2879 ; 154  |
                             2880 ; 155  |typedef union               
                             2881 ; 156  |{
                             2882 ; 157  |    struct {
                             2883 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             2884 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             2885 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             2886 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             2887 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             2888 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             2889 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             2890 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             2891 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             2892 ; 167  |    } B;
                             2893 ; 168  |    unsigned int I;
                             2894 ; 169  |} dcdc_vddio_type;
                             2895 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* DcDc VDDIO Register */
                             2896 ; 171  |
                             2897 ; 172  |
                             2898 ; 173  |
                             2899 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             2900 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             2901 ; 176  |
                             2902 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             2903 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             2904 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             2905 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             2906 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             2907 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             2908 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             2909 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             2910 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             2911 ; 186  |
                             2912 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             2913 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             2914 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             2915 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             2916 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             2917 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             2918 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             2919 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             2920 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             2921 ; 196  |
                             2922 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)     
                             2923 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             2924 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)  
                             2925 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)  
                             2926 ; 201  |
                             2927 ; 202  |typedef union               
                             2928 ; 203  |{
                             2929 ; 204  |    struct {
                             2930 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             2931 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             2932 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             2933 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             2934 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             2935 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             2936 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             2937 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             2938 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             2939 ; 214  |    } B;
                             2940 ; 215  |   unsigned int I;
                             2941 ; 216  |        unsigned U;
                             2942 ; 217  |} dcdc_vddd_type;
                             2943 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc VDDD Register */
                             2944 ; 219  |
                             2945 ; 220  |
                             2946 ; 221  |
                             2947 ; 222  |
                             2948 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             2949 ; 224  |
                             2950 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             2951 ; 226  |
                             2952 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             2953 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             2954 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             2955 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             2956 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             2957 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             2958 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             2959 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             2960 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             2961 ; 236  |
                             2962 ; 237  |
                             2963 ; 238  |
                             2964 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             2965 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             2966 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             2967 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             2968 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             2969 ; 244  |
                             2970 ; 245  |
                             2971 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             2972 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             2973 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             2974 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<<HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             2975 ; 250  |
                             2976 ; 251  |
                             2977 ; 252  |
                             2978 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)     
                             2979 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             2980 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)  
                             2981 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)  
                             2982 ; 257  |
                             2983 ; 258  |
                             2984 ; 259  |typedef union               
                             2985 ; 260  |{
                             2986 ; 261  |    struct {
                             2987 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             2988 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             2989 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             2990 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             2991 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             2992 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             2993 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             2994 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             2995 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             2996 ; 271  |    } B;
                             2997 ; 272  |    unsigned int I;
                             2998 ; 273  |} dcdc_vdda_type;
                             2999 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc VDDA Register */
                             3000 ; 275  |
                             3001 ; 276  |
                             3002 ; 277  |
                             3003 ; 278  |
                             3004 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             3005 ; 280  |
                             3006 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             3007 ; 282  |
                             3008 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             3009 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             3010 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             3011 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             3012 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             3013 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             3014 ; 289  |
                             3015 ; 290  |
                             3016 ; 291  |
                             3017 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             3018 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             3019 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             3020 ; 295  |
                             3021 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBU_BITPOS)        
                             3022 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL0_PLEVBO_BITPOS) 
                             3023 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NLEV_BITPOS)  
                             3024 ; 299  |
                             3025 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             3026 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             3027 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             3028 ; 303  |
                             3029 ; 304  |
                             3030 ; 305  |typedef union               
                             3031 ; 306  |{
                             3032 ; 307  |    struct {
                             3033 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             3034 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             3035 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             3036 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             3037 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3038 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             3039 ; 314  |    } B;
                             3040 ; 315  |    unsigned int I;
                             3041 ; 316  |} dcdc2_ctrl0_type; 
                             3042 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* DcDc#2 Limit Level Register */
                             3043 ; 318  |
                             3044 ; 319  |
                             3045 ; 320  |
                             3046 ; 321  |
                             3047 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             3048 ; 323  |
                             3049 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             3050 ; 325  |
                             3051 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             3052 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             3053 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             3054 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             3055 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             3056 ; 331  |
                             3057 ; 332  |
                             3058 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             3059 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             3060 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             3061 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             3062 ; 337  |
                             3063 ; 338  |
                             3064 ; 339  |
                             3065 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS)        
                             3066 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS) 
                             3067 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FFOR_BITPOS)  
                             3068 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CTRL1_PFMCTRL_BITPOS)  
                             3069 ; 344  |
                             3070 ; 345  |
                             3071 ; 346  |
                             3072 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             3073 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             3074 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             3075 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             3076 ; 351  |
                             3077 ; 352  |
                             3078 ; 353  |typedef union               
                             3079 ; 354  |{
                             3080 ; 355  |    struct {
                             3081 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             3082 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             3083 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3084 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             3085 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3086 ; 361  |    } B;
                             3087 ; 362  |    unsigned int I;
                             3088 ; 363  |} dcdc2_ctrl1_type;
                             3089 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* DcDc#2 Ctrl Register #1 */
                             3090 ; 365  |
                             3091 ; 366  |
                             3092 ; 367  |
                             3093 ; 368  |
                             3094 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             3095 ; 370  |
                             3096 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             3097 ; 372  |
                             3098 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             3099 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             3100 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             3101 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             3102 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             3103 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             3104 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             3105 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             3106 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             3107 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             3108 ; 383  |
                             3109 ; 384  |
                             3110 ; 385  |
                             3111 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             3112 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             3113 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             3114 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             3115 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             3116 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             3117 ; 392  |
                             3118 ; 393  |
                             3119 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWRUP_BITPOS)        
                             3120 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC1_START_COUNT_BITPOS)        
                             3121 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BITPOS) 
                             3122 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWRUP_BITPOS)        
                             3123 ; 398  |
                             3124 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SPEED_OSC2_START_COUNT_BITPOS)        
                             3125 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BITPOS) 
                             3126 ; 401  |
                             3127 ; 402  |
                             3128 ; 403  |
                             3129 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             3130 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             3131 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             3132 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             3133 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             3134 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             3135 ; 410  |
                             3136 ; 411  |
                             3137 ; 412  |typedef union               
                             3138 ; 413  |{
                             3139 ; 414  |    struct {
                             3140 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             3141 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             3142 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             3143 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             3144 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             3145 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             3146 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             3147 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             3148 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             3149 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             3150 ; 425  |    } B;
                             3151 ; 426  |    unsigned int I;
                             3152 ; 427  |} speed_type;
                             3153 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measurement Register */
                             3154 ; 429  |
                             3155 ; 430  |
                             3156 ; 431  |
                             3157 ; 432  |
                             3158 ; 433  |
                             3159 ; 434  |
                             3160 ; 435  |
                             3161 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             3162 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             3163 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             3164 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             3165 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             3166 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             3167 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             3168 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             3169 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             3170 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             3171 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             3172 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             3173 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             3174 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             3175 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             3176 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             3177 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             3178 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             3179 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             3180 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             3181 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             3182 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             3183 ; 458  |
                             3184 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             3185 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             3186 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             3187 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             3188 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             3189 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             3190 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             3191 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             3192 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             3193 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             3194 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             3195 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             3196 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             3197 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             3198 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             3199 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             3200 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             3201 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             3202 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             3203 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             3204 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             3205 ; 480  |
                             3206 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)
                             3207 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             3208 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1)<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             3209 ; 484  |
                             3210 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             3211 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             3212 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             3213 ; 488  |
                             3214 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the change should happen
                             3215 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             3216 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             3217 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)+((1<<HW_DCDC_TBR_DC
                                  DC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             3218 ; 493  |
                             3219 ; 494  |typedef union               
                             3220 ; 495  |{
                             3221 ; 496  |    struct {
                             3222 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             3223 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             3224 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             3225 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             3226 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             3227 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             3228 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             3229 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             3230 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             3231 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             3232 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             3233 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             3234 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             3235 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             3236 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             3237 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             3238 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             3239 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             3240 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             3241 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             3242 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             3243 ; 518  |    } B;
                             3244 ; 519  |    unsigned int I;
                             3245 ; 520  |} usb_dcdctbr_type;
                             3246 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADDR+8))    /* Analog test bit register*/
                             3247 ; 522  |
                             3248 ; 523  |
                             3249 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             3250 ; 525  |
                             3251 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             3252 ; 527  |
                             3253 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             3254 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             3255 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             3256 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             3257 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             3258 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             3259 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             3260 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             3261 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             3262 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             3263 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             3264 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             3265 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             3266 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             3267 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             3268 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             3269 ; 544  |
                             3270 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             3271 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             3272 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             3273 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             3274 ; 549  |
                             3275 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             3276 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             3277 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             3278 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             3279 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             3280 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             3281 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             3282 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             3283 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             3284 ; 559  |
                             3285 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             3286 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWD_BITPOS)        
                             3287 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_RES_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3288 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_NIMH_BITPOS) 
                             3289 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             3290 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             3291 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             3292 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             3293 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             3294 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             3295 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             3296 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             3297 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             3298 ; 573  |
                             3299 ; 574  |
                             3300 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK)     
                             3301 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             3302 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             3303 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             3304 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             3305 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK)     
                             3306 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK)     
                             3307 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK) 
                             3308 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK) 
                             3309 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK) 
                             3310 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK) 
                             3311 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK) 
                             3312 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK) 
                             3313 ; 588  |
                             3314 ; 589  |typedef union               
                             3315 ; 590  |{
                             3316 ; 591  |    struct {
                             3317 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             3318 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             3319 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             3320 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             3321 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             3322 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             3323 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH;
                             3324 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH;
                             3325 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             3326 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             3327 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             3328 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             3329 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             3330 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                             3331 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             3332 ; 607  |    } B;
                             3333 ; 608  |    unsigned int I;
                             3334 ; 609  |} usb_pwr_charge_type;
                             3335 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17))    /* Analog Persistent Config Register */
                             3336 ; 611  |
                             3337 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             3338 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             3339 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             3340 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             3341 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             3342 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             3343 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             3344 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             3345 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             3346 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             3347 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             3348 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             3349 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             3350 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             3351 ; 626  |
                             3352 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             3353 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             3354 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             3355 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             3356 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             3357 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             3358 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             3359 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             3360 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             3361 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             3362 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             3363 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             3364 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             3365 ; 640  |
                             3366 ; 641  |typedef union               
                             3367 ; 642  |{
                             3368 ; 643  |    struct {       
                             3369 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             3370 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             3371 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             3372 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             3373 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             3374 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             3375 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             3376 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             3377 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             3378 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             3379 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             3380 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                             3381 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             3382 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             3383 ; 658  |    } B;
                             3384 ; 659  |    int I;
                             3385 ; 660  |} usb_dcdcpersist_type;
                             3386 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASEADDR+15))    /* Analog test bit register*/
                             3387 ; 662  |
                             3388 ; 663  |
                             3389 ; 664  |
                             3390 ; 665  |#endif
                             3391 ; 666  |
                             3392 ; 667  |
                             3393 ; 668  |
                             3394 
                             3396 
                             3397 ; 21   |#include "regsemc.h"
                             3398 
                             3400 
                             3401 ; 1    |#if !(defined(__REGS_EMC_INC))
                             3402 ; 2    |#define __REGS_EMC_INC 1
                             3403 ; 3    |
                             3404 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3405 ; 5    |//   Module base addresses
                             3406 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3407 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             3408 ; 8    |
                             3409 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             3410 ; 10   |//  EMC Registers
                             3411 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             3412 ; 12   |
                             3413 ; 13   |
                             3414 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             3415 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             3416 ; 16   |
                             3417 ; 17   |typedef union               /*Flash Control Register*/
                             3418 ; 18   |{
                             3419 ; 19   |    struct
                             3420 ; 20   |    {
                             3421 ; 21   |    int KICK        :1;
                             3422 ; 22   |    int RW          :1;
                             3423 ; 23   |    int TCIE        :1;
                             3424 ; 24   |    int IRQP        :1;
                             3425 ; 25   |    unsigned MMD    :2;
                             3426 ; 26   |    unsigned NB     :11;
                             3427 ; 27   |    unsigned RSVD   :4;
                             3428 ; 28   |    int SRST        :1;
                             3429 ; 29   |    } B;
                             3430 ; 30   |    int I;
                             3431 ; 31   |} flcr_type;
                             3432 ; 32   |
                             3433 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             3434 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             3435 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             3436 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             3437 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             3438 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             3439 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             3440 ; 40   |
                             3441 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             3442 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             3443 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             3444 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             3445 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             3446 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             3447 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             3448 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             3449 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             3450 ; 50   |
                             3451 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             3452 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             3453 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             3454 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             3455 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             3456 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             3457 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             3458 ; 58   |
                             3459 ; 59   |
                             3460 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3461 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             3462 ; 62   |
                             3463 ; 63   |typedef union           /* Flash Start Address Low*/
                             3464 ; 64   |{
                             3465 ; 65   |    struct
                             3466 ; 66   |    {
                             3467 ; 67   |    unsigned XA     : 24;
                             3468 ; 68   |    } B;
                             3469 ; 69   |    int I;
                             3470 ; 70   |} flsalr_type;
                             3471 ; 71   |
                             3472 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             3473 ; 73   |
                             3474 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             3475 ; 75   |
                             3476 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             3477 ; 77   |
                             3478 ; 78   |
                             3479 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             3480 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             3481 ; 81   |
                             3482 ; 82   |typedef union           /* Flash Start Address High*/
                             3483 ; 83   |{
                             3484 ; 84   |    struct
                             3485 ; 85   |    {
                             3486 ; 86   |    unsigned XA     :8;
                             3487 ; 87   |    unsigned DA     :16;
                             3488 ; 88   |    } B;
                             3489 ; 89   |    int I;
                             3490 ; 90   |} flsahr_type;
                             3491 ; 91   |
                             3492 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             3493 ; 93   |
                             3494 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             3495 ; 95   |
                             3496 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             3497 ; 97   |
                             3498 ; 98   |
                             3499 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             3500 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             3501 ; 101  |
                             3502 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             3503 ; 103  |{
                             3504 ; 104  |    struct
                             3505 ; 105  |    {
                             3506 ; 106  |        int WP          :1;
                             3507 ; 107  |        int CDP         :1;
                             3508 ; 108  |        unsigned SM     :2;
                             3509 ; 109  |        int XATTR       :1;
                             3510 ; 110  |        int CRST        :1;
                             3511 ; 111  |        int XWT         :1;
                             3512 ; 112  |        int RI          :1;
                             3513 ; 113  |        int IFCE        :1;
                             3514 ; 114  |        int ISCE        :1;
                             3515 ; 115  |        int INCE        :1;
                             3516 ; 116  |        int IFCS        :1;
                             3517 ; 117  |        int ISCS        :1;
                             3518 ; 118  |        int INCS        :1;
                             3519 ; 119  |        unsigned CFAI   :2;
                             3520 ; 120  |        int XDDI        :1;
                             3521 ; 121  |        unsigned CS     :2;
                             3522 ; 122  |        int CRE         :1;
                             3523 ; 123  |        unsigned VS     :2;
                             3524 ; 124  |        int DASP        :1;
                             3525 ; 125  |        int MODE16      :1; 
                             3526 ; 126  |    } B;
                             3527 ; 127  |    int I;
                             3528 ; 128  |} flcfcr_type;
                             3529 ; 129  |
                             3530 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             3531 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             3532 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             3533 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             3534 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             3535 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             3536 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             3537 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             3538 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             3539 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             3540 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3541 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             3542 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             3543 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             3544 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             3545 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             3546 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             3547 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             3548 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             3549 ; 149  |
                             3550 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             3551 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             3552 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             3553 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             3554 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             3555 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             3556 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             3557 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             3558 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             3559 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             3560 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             3561 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             3562 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             3563 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             3564 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             3565 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             3566 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             3567 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             3568 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             3569 ; 169  |
                             3570 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             3571 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             3572 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             3573 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             3574 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             3575 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             3576 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             3577 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             3578 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             3579 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             3580 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             3581 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             3582 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             3583 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             3584 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             3585 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             3586 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             3587 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             3588 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             3589 ; 189  |
                             3590 ; 190  |
                             3591 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             3592 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             3593 ; 193  |
                             3594 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             3595 ; 195  |{
                             3596 ; 196  |    struct
                             3597 ; 197  |    {
                             3598 ; 198  |        unsigned TRWSU  :5;
                             3599 ; 199  |        unsigned TRPW   :7;
                             3600 ; 200  |        unsigned TWPW   :7;
                             3601 ; 201  |        unsigned TRWH   :5;
                             3602 ; 202  |    } B;
                             3603 ; 203  |    int I;
                             3604 ; 204  |} flcftmr1r_type;
                             3605 ; 205  |
                             3606 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             3607 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             3608 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             3609 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             3610 ; 210  |
                             3611 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             3612 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             3613 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             3614 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             3615 ; 215  |
                             3616 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             3617 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             3618 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             3619 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             3620 ; 220  |
                             3621 ; 221  |
                             3622 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             3623 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             3624 ; 224  |
                             3625 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             3626 ; 226  |{
                             3627 ; 227  |    struct
                             3628 ; 228  |    {
                             3629 ; 229  |        unsigned TWW    :4;
                             3630 ; 230  |        unsigned TWTO   :10;
                             3631 ; 231  |        unsigned THW    :5; 
                             3632 ; 232  |        unsigned TRAQ   :5;
                             3633 ; 233  |    } B;
                             3634 ; 234  |    int I;
                             3635 ; 235  |} flcftmr2r_type;
                             3636 ; 236  |
                             3637 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             3638 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             3639 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             3640 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             3641 ; 241  |
                             3642 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             3643 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             3644 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             3645 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             3646 ; 246  |
                             3647 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             3648 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             3649 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             3650 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             3651 ; 251  |
                             3652 ; 252  |
                             3653 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3654 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             3655 ; 255  |
                             3656 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             3657 ; 257  |{
                             3658 ; 258  |    struct
                             3659 ; 259  |    {
                             3660 ; 260  |        unsigned CS     :2;
                             3661 ; 261  |        int SE          :1;
                             3662 ; 262  |        int WP          :1;
                             3663 ; 263  |        int SIZE        :1;
                             3664 ; 264  |        int ICMD        :8;
                             3665 ; 265  |        int TOIE        :1;
                             3666 ; 266  |        int BPIE        :1;
                             3667 ; 267  |        int TOIRQ       :1;
                             3668 ; 268  |        int BPIRQ       :1;
                             3669 ; 269  |    } B;
                             3670 ; 270  |    int I;
                             3671 ; 271  |} flsmcr_type;
                             3672 ; 272  |
                             3673 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             3674 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             3675 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             3676 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             3677 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             3678 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             3679 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             3680 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             3681 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             3682 ; 282  |
                             3683 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             3684 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             3685 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             3686 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             3687 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             3688 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             3689 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             3690 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             3691 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             3692 ; 292  |
                             3693 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             3694 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             3695 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             3696 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             3697 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             3698 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             3699 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             3700 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             3701 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             3702 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             3703 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             3704 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             3705 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             3706 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             3707 ; 307  |
                             3708 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             3709 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             3710 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             3711 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             3712 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             3713 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             3714 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             3715 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             3716 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             3717 ; 317  |
                             3718 ; 318  |
                             3719 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             3720 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             3721 ; 321  |
                             3722 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             3723 ; 323  |{
                             3724 ; 324  |    struct
                             3725 ; 325  |    {
                             3726 ; 326  |        unsigned TRWSU  :5;
                             3727 ; 327  |        unsigned TRPW   :6;
                             3728 ; 328  |        unsigned TWPW   :6;
                             3729 ; 329  |        unsigned TRWH   :5;
                             3730 ; 330  |    } B;
                             3731 ; 331  |    int I;
                             3732 ; 332  |} flsmtmr1r_type;
                             3733 ; 333  |
                             3734 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             3735 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             3736 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             3737 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             3738 ; 338  |
                             3739 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             3740 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             3741 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             3742 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             3743 ; 343  |
                             3744 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             3745 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             3746 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             3747 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             3748 ; 348  |
                             3749 ; 349  |
                             3750 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             3751 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             3752 ; 352  |
                             3753 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             3754 ; 354  |{
                             3755 ; 355  |    struct
                             3756 ; 356  |    {
                             3757 ; 357  |        unsigned TWT    :6;
                             3758 ; 358  |        unsigned TWTO   :18;
                             3759 ; 359  |    } B;
                             3760 ; 360  |    int I;
                             3761 ; 361  |} flsmtmr2r_type;
                             3762 ; 362  |
                             3763 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             3764 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             3765 ; 365  |
                             3766 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             3767 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             3768 ; 368  |
                             3769 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             3770 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             3771 ; 371  |
                             3772 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             3773 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             3774 ; 374  |typedef union 
                             3775 ; 375  |{
                             3776 ; 376  |  struct
                             3777 ; 377  |  {
                             3778 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             3779 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers */
                             3780 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers */
                             3781 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             3782 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             3783 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             3784 ; 384  |    int PAD0          :17;    
                             3785 ; 385  |  } B;
                             3786 ; 386  |  int I;
                             3787 ; 387  |} flcr2_type;
                             3788 ; 388  |
                             3789 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             3790 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             3791 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3792 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             3793 ; 393  |
                             3794 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Control Register */
                             3795 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash Start Address Low Register */
                             3796 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash Start Address High Register */
                             3797 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             3798 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Control Register2 */
                             3799 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash CompactFlash Control Register*/
                             3800 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Compact Flash Timer1 Register*/
                             3801 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Compact Flash Timer2 Register*/
                             3802 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash SmartMedia Control Register*/
                             3803 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash SmartMedia Timer1 Register*/
                             3804 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash SmartMedia Timer2 Register*/
                             3805 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             3806 ; 406  |
                             3807 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             3808 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             3809 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             3810 ; 410  |
                             3811 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             3812 ; 412  |
                             3813 ; 413  |#endif
                             3814 ; 414  |
                             3815 
                             3817 
                             3818 ; 22   |#include "regsgpio.h"
                             3819 
                             3821 
                             3822 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             3823 ; 2    |#define __REGS_GPIO_INC 1
                             3824 ; 3    |
                             3825 ; 4    |#include "types.h"
                             3826 
                             3828 
                             3829 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3830 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3831 ; 3    |//
                             3832 ; 4    |// Filename: types.h
                             3833 ; 5    |// Description: Standard data types
                             3834 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3835 ; 7    |
                             3836 ; 8    |#ifndef _TYPES_H
                             3837 ; 9    |#define _TYPES_H
                             3838 ; 10   |
                             3839 ; 11   |// TODO:  move this outta here!
                             3840 ; 12   |#if !defined(NOERROR)
                             3841 ; 13   |#define NOERROR 0
                             3842 ; 14   |#define SUCCESS 0
                             3843 ; 15   |#endif 
                             3844 ; 16   |#if !defined(SUCCESS)
                             3845 ; 17   |#define SUCCESS  0
                             3846 ; 18   |#endif
                             3847 ; 19   |#if !defined(ERROR)
                             3848 ; 20   |#define ERROR   -1
                             3849 ; 21   |#endif
                             3850 ; 22   |#if !defined(FALSE)
                             3851 ; 23   |#define FALSE 0
                             3852 ; 24   |#endif
                             3853 ; 25   |#if !defined(TRUE)
                             3854 ; 26   |#define TRUE  1
                             3855 ; 27   |#endif
                             3856 ; 28   |
                             3857 ; 29   |#if !defined(NULL)
                             3858 ; 30   |#define NULL 0
                             3859 ; 31   |#endif
                             3860 ; 32   |
                             3861 ; 33   |#define MAX_INT     0x7FFFFF
                             3862 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3863 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3864 ; 36   |#define MAX_ULONG   (-1) 
                             3865 ; 37   |
                             3866 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3867 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3868 ; 40   |
                             3869 ; 41   |
                             3870 ; 42   |#define BYTE    unsigned char       // btVarName
                             3871 ; 43   |#define CHAR    signed char         // cVarName
                             3872 ; 44   |#define USHORT  unsigned short      // usVarName
                             3873 ; 45   |#define SHORT   unsigned short      // sVarName
                             3874 ; 46   |#define WORD    unsigned int        // wVarName
                             3875 ; 47   |#define INT     signed int          // iVarName
                             3876 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3877 ; 49   |#define LONG    signed long         // lVarName
                             3878 ; 50   |#define BOOL    unsigned int        // bVarName
                             3879 ; 51   |#define FRACT   _fract              // frVarName
                             3880 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3881 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3882 ; 54   |#define FLOAT   float               // fVarName
                             3883 ; 55   |#define DBL     double              // dVarName
                             3884 ; 56   |#define ENUM    enum                // eVarName
                             3885 ; 57   |#define CMX     _complex            // cmxVarName
                             3886 ; 58   |typedef WORD UCS3;                   // 
                             3887 ; 59   |
                             3888 ; 60   |#define UINT16  unsigned short
                             3889 ; 61   |#define UINT8   unsigned char   
                             3890 ; 62   |#define UINT32  unsigned long
                             3891 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3892 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             3893 ; 65   |#define WCHAR   UINT16
                             3894 ; 66   |
                             3895 ; 67   |//UINT128 is 16 bytes or 6 words
                             3896 ; 68   |typedef struct UINT128_3500 {   
                             3897 ; 69   |    int val[6];     
                             3898 ; 70   |} UINT128_3500;
                             3899 ; 71   |
                             3900 ; 72   |#define UINT128   UINT128_3500
                             3901 ; 73   |
                             3902 ; 74   |// Little endian word packed byte strings:   
                             3903 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3904 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3905 ; 77   |// Little endian word packed byte strings:   
                             3906 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3907 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3908 ; 80   |
                             3909 ; 81   |// Declare Memory Spaces To Use When Coding
                             3910 ; 82   |// A. Sector Buffers
                             3911 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3912 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3913 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3914 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3915 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3916 ; 88   |// B. Media DDI Memory
                             3917 ; 89   |#define MEDIA_DDI_MEM _Y
                             3918 ; 90   |
                             3919 ; 91   |
                             3920 ; 92   |
                             3921 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3922 ; 94   |// Examples of circular pointers:
                             3923 ; 95   |//    INT CIRC cpiVarName
                             3924 ; 96   |//    DWORD CIRC cpdwVarName
                             3925 ; 97   |
                             3926 ; 98   |#define RETCODE INT                 // rcVarName
                             3927 ; 99   |
                             3928 ; 100  |// generic bitfield structure
                             3929 ; 101  |struct Bitfield {
                             3930 ; 102  |    unsigned int B0  :1;
                             3931 ; 103  |    unsigned int B1  :1;
                             3932 ; 104  |    unsigned int B2  :1;
                             3933 ; 105  |    unsigned int B3  :1;
                             3934 ; 106  |    unsigned int B4  :1;
                             3935 ; 107  |    unsigned int B5  :1;
                             3936 ; 108  |    unsigned int B6  :1;
                             3937 ; 109  |    unsigned int B7  :1;
                             3938 ; 110  |    unsigned int B8  :1;
                             3939 ; 111  |    unsigned int B9  :1;
                             3940 ; 112  |    unsigned int B10 :1;
                             3941 ; 113  |    unsigned int B11 :1;
                             3942 ; 114  |    unsigned int B12 :1;
                             3943 ; 115  |    unsigned int B13 :1;
                             3944 ; 116  |    unsigned int B14 :1;
                             3945 ; 117  |    unsigned int B15 :1;
                             3946 ; 118  |    unsigned int B16 :1;
                             3947 ; 119  |    unsigned int B17 :1;
                             3948 ; 120  |    unsigned int B18 :1;
                             3949 ; 121  |    unsigned int B19 :1;
                             3950 ; 122  |    unsigned int B20 :1;
                             3951 ; 123  |    unsigned int B21 :1;
                             3952 ; 124  |    unsigned int B22 :1;
                             3953 ; 125  |    unsigned int B23 :1;
                             3954 ; 126  |};
                             3955 ; 127  |
                             3956 ; 128  |union BitInt {
                             3957 ; 129  |        struct Bitfield B;
                             3958 ; 130  |        int        I;
                             3959 ; 131  |};
                             3960 ; 132  |
                             3961 ; 133  |#define MAX_MSG_LENGTH 10
                             3962 ; 134  |struct CMessage
                             3963 ; 135  |{
                             3964 ; 136  |        unsigned int m_uLength;
                             3965 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3966 ; 138  |};
                             3967 ; 139  |
                             3968 ; 140  |typedef struct {
                             3969 ; 141  |    WORD m_wLength;
                             3970 ; 142  |    WORD m_wMessage;
                             3971 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3972 ; 144  |} Message;
                             3973 ; 145  |
                             3974 ; 146  |struct MessageQueueDescriptor
                             3975 ; 147  |{
                             3976 ; 148  |        int *m_pBase;
                             3977 ; 149  |        int m_iModulo;
                             3978 ; 150  |        int m_iSize;
                             3979 ; 151  |        int *m_pHead;
                             3980 ; 152  |        int *m_pTail;
                             3981 ; 153  |};
                             3982 ; 154  |
                             3983 ; 155  |struct ModuleEntry
                             3984 ; 156  |{
                             3985 ; 157  |    int m_iSignaledEventMask;
                             3986 ; 158  |    int m_iWaitEventMask;
                             3987 ; 159  |    int m_iResourceOfCode;
                             3988 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3989 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             3990 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3991 ; 163  |    int m_uTimeOutHigh;
                             3992 ; 164  |    int m_uTimeOutLow;
                             3993 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3994 ; 166  |};
                             3995 ; 167  |
                             3996 ; 168  |union WaitMask{
                             3997 ; 169  |    struct B{
                             3998 ; 170  |        unsigned int m_bNone     :1;
                             3999 ; 171  |        unsigned int m_bMessage  :1;
                             4000 ; 172  |        unsigned int m_bTimer    :1;
                             4001 ; 173  |        unsigned int m_bButton   :1;
                             4002 ; 174  |    } B;
                             4003 ; 175  |    int I;
                             4004 ; 176  |} ;
                             4005 ; 177  |
                             4006 ; 178  |
                             4007 ; 179  |struct Button {
                             4008 ; 180  |        WORD wButtonEvent;
                             4009 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4010 ; 182  |};
                             4011 ; 183  |
                             4012 ; 184  |struct Message {
                             4013 ; 185  |        WORD wMsgLength;
                             4014 ; 186  |        WORD wMsgCommand;
                             4015 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4016 ; 188  |};
                             4017 ; 189  |
                             4018 ; 190  |union EventTypes {
                             4019 ; 191  |        struct CMessage msg;
                             4020 ; 192  |        struct Button Button ;
                             4021 ; 193  |        struct Message Message;
                             4022 ; 194  |};
                             4023 ; 195  |
                             4024 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4025 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4026 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4027 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4028 ; 200  |
                             4029 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4030 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4031 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4032 ; 204  |
                             4033 ; 205  |#if DEBUG
                             4034 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4035 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4036 ; 208  |#else 
                             4037 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4038 ; 210  |#define DebugBuildAssert(x)    
                             4039 ; 211  |#endif
                             4040 ; 212  |
                             4041 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4042 ; 214  |//  #pragma asm
                             4043 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4044 ; 216  |//  #pragma endasm
                             4045 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4046 ; 218  |
                             4047 ; 219  |#ifdef COLOR_262K
                             4048 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4049 ; 221  |#elif defined(COLOR_65K)
                             4050 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4051 ; 223  |#else
                             4052 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4053 ; 225  |#endif
                             4054 ; 226  |    
                             4055 ; 227  |#endif // #ifndef _TYPES_H
                             4056 
                             4058 
                             4059 ; 5    |
                             4060 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4061 ; 7    |//  Interrupt Collector Registers
                             4062 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             4063 ; 9    |
                             4064 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             4065 ; 11   |
                             4066 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             4067 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             4068 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             4069 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             4070 ; 16   |
                             4071 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             4072 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             4073 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             4074 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             4075 ; 21   |
                             4076 ; 22   |#define HW_GPB_GPENR 0
                             4077 ; 23   |#define HW_GPB_GPDOR 1
                             4078 ; 24   |#define HW_GPB_GPDIR 2
                             4079 ; 25   |#define HW_GPB_GPDOER 3
                             4080 ; 26   |#define HW_GPB_GPIPENR 4
                             4081 ; 27   |#define HW_GPB_GPIENR 5
                             4082 ; 28   |#define HW_GPB_GPILVLR 6
                             4083 ; 29   |#define HW_GPB_GPIPOLR 7
                             4084 ; 30   |#define HW_GPB_GPISTATR 8
                             4085 ; 31   |#define HW_GPB_GPPWR 9
                             4086 ; 32   |#define HW_GPB_GP8MA 10
                             4087 ; 33   |
                             4088 ; 34   |
                             4089 ; 35   |
                             4090 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             4091 ; 37   |//  GPIO Register Bit Positions
                             4092 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             4093 ; 39   |{
                             4094 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             4095 ; 41   |    unsigned int I;
                             4096 ; 42   |    unsigned int U;
                             4097 ; 43   |} gpr_type;
                             4098 ; 44   |
                             4099 ; 45   |#define HW_GP_B0_BITPOS 0
                             4100 ; 46   |#define HW_GP_B1_BITPOS 1
                             4101 ; 47   |#define HW_GP_B2_BITPOS 2
                             4102 ; 48   |#define HW_GP_B3_BITPOS 3
                             4103 ; 49   |#define HW_GP_B4_BITPOS 4
                             4104 ; 50   |#define HW_GP_B5_BITPOS 5
                             4105 ; 51   |#define HW_GP_B6_BITPOS 6
                             4106 ; 52   |#define HW_GP_B7_BITPOS 7
                             4107 ; 53   |#define HW_GP_B8_BITPOS 8
                             4108 ; 54   |#define HW_GP_B9_BITPOS 9
                             4109 ; 55   |#define HW_GP_B10_BITPOS 10
                             4110 ; 56   |#define HW_GP_B11_BITPOS 11
                             4111 ; 57   |#define HW_GP_B12_BITPOS 12
                             4112 ; 58   |#define HW_GP_B13_BITPOS 13
                             4113 ; 59   |#define HW_GP_B14_BITPOS 14
                             4114 ; 60   |#define HW_GP_B15_BITPOS 15
                             4115 ; 61   |#define HW_GP_B16_BITPOS 16
                             4116 ; 62   |#define HW_GP_B17_BITPOS 17
                             4117 ; 63   |#define HW_GP_B18_BITPOS 18
                             4118 ; 64   |#define HW_GP_B19_BITPOS 19
                             4119 ; 65   |#define HW_GP_B20_BITPOS 20
                             4120 ; 66   |#define HW_GP_B21_BITPOS 21
                             4121 ; 67   |#define HW_GP_B22_BITPOS 22
                             4122 ; 68   |#define HW_GP_B23_BITPOS 23
                             4123 ; 69   |
                             4124 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             4125 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             4126 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             4127 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             4128 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             4129 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             4130 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             4131 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             4132 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             4133 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             4134 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4135 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4136 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4137 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             4138 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4139 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4140 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4141 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4142 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4143 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4144 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4145 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4146 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4147 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4148 ; 94   |
                             4149 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4150 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4151 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4152 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4153 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4154 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4155 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4156 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4157 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             4158 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4159 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4160 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4161 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4162 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4163 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4164 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4165 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4166 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4167 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4168 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4169 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             4170 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4171 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4172 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4173 ; 119  |
                             4174 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4175 ; 121  |//  GPIO 8mA Register Bit Positions
                             4176 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4177 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4178 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4179 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4180 ; 126  |
                             4181 ; 127  |
                             4182 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4183 ; 129  |//  Logical GPIO numbers
                             4184 ; 130  |#define HW_GPIO_000 0
                             4185 ; 131  |#define HW_GPIO_001 1
                             4186 ; 132  |#define HW_GPIO_002 2
                             4187 ; 133  |#define HW_GPIO_003 3
                             4188 ; 134  |#define HW_GPIO_004 4
                             4189 ; 135  |#define HW_GPIO_005 5
                             4190 ; 136  |#define HW_GPIO_006 6
                             4191 ; 137  |#define HW_GPIO_007 7
                             4192 ; 138  |#define HW_GPIO_008 8
                             4193 ; 139  |#define HW_GPIO_009 9
                             4194 ; 140  |#define HW_GPIO_010 10
                             4195 ; 141  |#define HW_GPIO_011 11
                             4196 ; 142  |#define HW_GPIO_012 12
                             4197 ; 143  |#define HW_GPIO_013 13
                             4198 ; 144  |#define HW_GPIO_014 14
                             4199 ; 145  |#define HW_GPIO_015 15
                             4200 ; 146  |#define HW_GPIO_016 16
                             4201 ; 147  |#define HW_GPIO_017 17
                             4202 ; 148  |#define HW_GPIO_018 18
                             4203 ; 149  |#define HW_GPIO_019 19
                             4204 ; 150  |#define HW_GPIO_020 20
                             4205 ; 151  |#define HW_GPIO_021 21
                             4206 ; 152  |#define HW_GPIO_022 22
                             4207 ; 153  |#define HW_GPIO_023 23
                             4208 ; 154  |#define HW_GPIO_024 24
                             4209 ; 155  |#define HW_GPIO_025 25
                             4210 ; 156  |#define HW_GPIO_026 26
                             4211 ; 157  |#define HW_GPIO_027 27
                             4212 ; 158  |#define HW_GPIO_028 28
                             4213 ; 159  |#define HW_GPIO_029 29
                             4214 ; 160  |#define HW_GPIO_030 30
                             4215 ; 161  |#define HW_GPIO_031 31
                             4216 ; 162  |#define HW_GPIO_032 32
                             4217 ; 163  |#define HW_GPIO_033 33
                             4218 ; 164  |#define HW_GPIO_034 34
                             4219 ; 165  |#define HW_GPIO_035 35
                             4220 ; 166  |#define HW_GPIO_036 36
                             4221 ; 167  |#define HW_GPIO_037 37
                             4222 ; 168  |#define HW_GPIO_038 38
                             4223 ; 169  |#define HW_GPIO_039 39
                             4224 ; 170  |#define HW_GPIO_040 40
                             4225 ; 171  |#define HW_GPIO_041 41
                             4226 ; 172  |#define HW_GPIO_042 42
                             4227 ; 173  |#define HW_GPIO_043 43
                             4228 ; 174  |#define HW_GPIO_044 44
                             4229 ; 175  |#define HW_GPIO_045 45
                             4230 ; 176  |#define HW_GPIO_046 46
                             4231 ; 177  |#define HW_GPIO_047 47
                             4232 ; 178  |#define HW_GPIO_048 48
                             4233 ; 179  |#define HW_GPIO_049 49
                             4234 ; 180  |#define HW_GPIO_050 50
                             4235 ; 181  |#define HW_GPIO_051 51
                             4236 ; 182  |#define HW_GPIO_052 52
                             4237 ; 183  |#define HW_GPIO_053 53
                             4238 ; 184  |#define HW_GPIO_054 54
                             4239 ; 185  |#define HW_GPIO_055 55
                             4240 ; 186  |#define HW_GPIO_056 56
                             4241 ; 187  |#define HW_GPIO_057 57
                             4242 ; 188  |#define HW_GPIO_058 58
                             4243 ; 189  |#define HW_GPIO_059 59
                             4244 ; 190  |#define HW_GPIO_060 60
                             4245 ; 191  |#define HW_GPIO_061 61
                             4246 ; 192  |#define HW_GPIO_062 62
                             4247 ; 193  |#define HW_GPIO_063 63
                             4248 ; 194  |#define HW_GPIO_064 64
                             4249 ; 195  |#define HW_GPIO_065 65
                             4250 ; 196  |#define HW_GPIO_066 66
                             4251 ; 197  |#define HW_GPIO_067 67
                             4252 ; 198  |#define HW_GPIO_068 68
                             4253 ; 199  |#define HW_GPIO_069 69
                             4254 ; 200  |#define HW_GPIO_070 70
                             4255 ; 201  |#define HW_GPIO_071 71
                             4256 ; 202  |#define HW_GPIO_072 72
                             4257 ; 203  |#define HW_GPIO_073 73
                             4258 ; 204  |#define HW_GPIO_074 74
                             4259 ; 205  |#define HW_GPIO_075 75
                             4260 ; 206  |#define HW_GPIO_076 76
                             4261 ; 207  |#define HW_GPIO_077 77
                             4262 ; 208  |#define HW_GPIO_078 78
                             4263 ; 209  |#define HW_GPIO_079 79
                             4264 ; 210  |#define HW_GPIO_080 80
                             4265 ; 211  |#define HW_GPIO_081 81
                             4266 ; 212  |#define HW_GPIO_082 82
                             4267 ; 213  |#define HW_GPIO_083 83
                             4268 ; 214  |#define HW_GPIO_084 84
                             4269 ; 215  |#define HW_GPIO_085 85
                             4270 ; 216  |#define HW_GPIO_086 86
                             4271 ; 217  |#define HW_GPIO_087 87
                             4272 ; 218  |#define HW_GPIO_088 88
                             4273 ; 219  |#define HW_GPIO_089 89
                             4274 ; 220  |#define HW_GPIO_090 90
                             4275 ; 221  |#define HW_GPIO_091 91
                             4276 ; 222  |#define HW_GPIO_092 92
                             4277 ; 223  |#define HW_GPIO_093 93
                             4278 ; 224  |#define HW_GPIO_094 94
                             4279 ; 225  |#define HW_GPIO_095 95
                             4280 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4281 ; 227  |
                             4282 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO 0 Enable Register   */
                             4283 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 0 Data Out Register */
                             4284 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 0 Dait In Register  */
                             4285 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO 0 Dait Out Enable Register  */
                             4286 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 0 Interrupt Pin Enable Register */
                             4287 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO 0 Interrupt Enable Register */
                             4288 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 0 Interrupt Level Register  */
                             4289 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 0 Interrupt Polarity Register   */
                             4290 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 0 Interrupt Status Register */
                             4291 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4292 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4293 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* GPIO 1 Enable Register   */
                             4294 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 1 Data Out Register */
                             4295 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 1 Dait In Register  */
                             4296 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO 1 Dait Out Enable Register  */
                             4297 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 1 Interrupt Pin Enable Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4298 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO 1 Interrupt Enable Register */
                             4299 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 1 Interrupt Level Register  */
                             4300 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 1 Interrupt Polarity Register   */
                             4301 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 1 Interrupt Status Register */
                             4302 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4303 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             4304 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             4305 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             4306 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             4307 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             4308 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             4309 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             4310 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             4311 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             4312 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             4313 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4314 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4315 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* GPIO 2 Enable Register   */
                             4316 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 2 Data Out Register */
                             4317 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 2 Dait In Register  */
                             4318 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO 2 Dait Out Enable Register  */
                             4319 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPIO 2 Interrupt Pin Enable Register */
                             4320 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO 2 Interrupt Enable Register */
                             4321 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPIO 2 Interrupt Level Register  */
                             4322 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPIO 2 Interrupt Polarity Register   */
                             4323 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GPIO 2 Interrupt Status Register */
                             4324 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 0 Power Register */
                             4325 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4326 ; 272  |
                             4327 ; 273  |#endif
                             4328 ; 274  |
                             4329 
                             4331 
                             4332 ; 23   |#include "regsi2c.h"
                             4333 
                             4335 
                             4336 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4337 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4338 ; 3    |// Filename: regsI2C.inc
                             4339 ; 4    |// Description: Register definitions for GPFLASH interface
                             4340 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4341 ; 6    |// The following naming conventions are followed in this file.
                             4342 ; 7    |// All registers are named using the format...
                             4343 ; 8    |//     HW_<module>_<regname>
                             4344 ; 9    |// where <module> is the module name which can be any of the following...
                             4345 ; 10   |//     USB20
                             4346 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4347 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4348 ; 13   |// that module)
                             4349 ; 14   |// <regname> is the specific register within that module
                             4350 ; 15   |// We also define the following...
                             4351 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4352 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4353 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4354 ; 19   |// which does something else, and
                             4355 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4356 ; 21   |// which does something else.
                             4357 ; 22   |// Other rules
                             4358 ; 23   |//     All caps
                             4359 ; 24   |//     Numeric identifiers start at 0
                             4360 ; 25   |#if !(defined(regsi2cinc))
                             4361 ; 26   |#define regsi2cinc 1
                             4362 ; 27   |
                             4363 ; 28   |#include "types.h"
                             4364 
                             4366 
                             4367 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4368 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4369 ; 3    |//
                             4370 ; 4    |// Filename: types.h
                             4371 ; 5    |// Description: Standard data types
                             4372 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4373 ; 7    |
                             4374 ; 8    |#ifndef _TYPES_H
                             4375 ; 9    |#define _TYPES_H
                             4376 ; 10   |
                             4377 ; 11   |// TODO:  move this outta here!
                             4378 ; 12   |#if !defined(NOERROR)
                             4379 ; 13   |#define NOERROR 0
                             4380 ; 14   |#define SUCCESS 0
                             4381 ; 15   |#endif 
                             4382 ; 16   |#if !defined(SUCCESS)
                             4383 ; 17   |#define SUCCESS  0
                             4384 ; 18   |#endif
                             4385 ; 19   |#if !defined(ERROR)
                             4386 ; 20   |#define ERROR   -1
                             4387 ; 21   |#endif
                             4388 ; 22   |#if !defined(FALSE)
                             4389 ; 23   |#define FALSE 0
                             4390 ; 24   |#endif
                             4391 ; 25   |#if !defined(TRUE)
                             4392 ; 26   |#define TRUE  1
                             4393 ; 27   |#endif
                             4394 ; 28   |
                             4395 ; 29   |#if !defined(NULL)
                             4396 ; 30   |#define NULL 0
                             4397 ; 31   |#endif
                             4398 ; 32   |
                             4399 ; 33   |#define MAX_INT     0x7FFFFF
                             4400 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4401 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4402 ; 36   |#define MAX_ULONG   (-1) 
                             4403 ; 37   |
                             4404 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4405 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4406 ; 40   |
                             4407 ; 41   |
                             4408 ; 42   |#define BYTE    unsigned char       // btVarName
                             4409 ; 43   |#define CHAR    signed char         // cVarName
                             4410 ; 44   |#define USHORT  unsigned short      // usVarName
                             4411 ; 45   |#define SHORT   unsigned short      // sVarName
                             4412 ; 46   |#define WORD    unsigned int        // wVarName
                             4413 ; 47   |#define INT     signed int          // iVarName
                             4414 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4415 ; 49   |#define LONG    signed long         // lVarName
                             4416 ; 50   |#define BOOL    unsigned int        // bVarName
                             4417 ; 51   |#define FRACT   _fract              // frVarName
                             4418 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4419 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4420 ; 54   |#define FLOAT   float               // fVarName
                             4421 ; 55   |#define DBL     double              // dVarName
                             4422 ; 56   |#define ENUM    enum                // eVarName
                             4423 ; 57   |#define CMX     _complex            // cmxVarName
                             4424 ; 58   |typedef WORD UCS3;                   // 
                             4425 ; 59   |
                             4426 ; 60   |#define UINT16  unsigned short
                             4427 ; 61   |#define UINT8   unsigned char   
                             4428 ; 62   |#define UINT32  unsigned long
                             4429 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4430 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4431 ; 65   |#define WCHAR   UINT16
                             4432 ; 66   |
                             4433 ; 67   |//UINT128 is 16 bytes or 6 words
                             4434 ; 68   |typedef struct UINT128_3500 {   
                             4435 ; 69   |    int val[6];     
                             4436 ; 70   |} UINT128_3500;
                             4437 ; 71   |
                             4438 ; 72   |#define UINT128   UINT128_3500
                             4439 ; 73   |
                             4440 ; 74   |// Little endian word packed byte strings:   
                             4441 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4442 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4443 ; 77   |// Little endian word packed byte strings:   
                             4444 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4445 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4446 ; 80   |
                             4447 ; 81   |// Declare Memory Spaces To Use When Coding
                             4448 ; 82   |// A. Sector Buffers
                             4449 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4450 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4451 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4452 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4453 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4454 ; 88   |// B. Media DDI Memory
                             4455 ; 89   |#define MEDIA_DDI_MEM _Y
                             4456 ; 90   |
                             4457 ; 91   |
                             4458 ; 92   |
                             4459 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4460 ; 94   |// Examples of circular pointers:
                             4461 ; 95   |//    INT CIRC cpiVarName
                             4462 ; 96   |//    DWORD CIRC cpdwVarName
                             4463 ; 97   |
                             4464 ; 98   |#define RETCODE INT                 // rcVarName
                             4465 ; 99   |
                             4466 ; 100  |// generic bitfield structure
                             4467 ; 101  |struct Bitfield {
                             4468 ; 102  |    unsigned int B0  :1;
                             4469 ; 103  |    unsigned int B1  :1;
                             4470 ; 104  |    unsigned int B2  :1;
                             4471 ; 105  |    unsigned int B3  :1;
                             4472 ; 106  |    unsigned int B4  :1;
                             4473 ; 107  |    unsigned int B5  :1;
                             4474 ; 108  |    unsigned int B6  :1;
                             4475 ; 109  |    unsigned int B7  :1;
                             4476 ; 110  |    unsigned int B8  :1;
                             4477 ; 111  |    unsigned int B9  :1;
                             4478 ; 112  |    unsigned int B10 :1;
                             4479 ; 113  |    unsigned int B11 :1;
                             4480 ; 114  |    unsigned int B12 :1;
                             4481 ; 115  |    unsigned int B13 :1;
                             4482 ; 116  |    unsigned int B14 :1;
                             4483 ; 117  |    unsigned int B15 :1;
                             4484 ; 118  |    unsigned int B16 :1;
                             4485 ; 119  |    unsigned int B17 :1;
                             4486 ; 120  |    unsigned int B18 :1;
                             4487 ; 121  |    unsigned int B19 :1;
                             4488 ; 122  |    unsigned int B20 :1;
                             4489 ; 123  |    unsigned int B21 :1;
                             4490 ; 124  |    unsigned int B22 :1;
                             4491 ; 125  |    unsigned int B23 :1;
                             4492 ; 126  |};
                             4493 ; 127  |
                             4494 ; 128  |union BitInt {
                             4495 ; 129  |        struct Bitfield B;
                             4496 ; 130  |        int        I;
                             4497 ; 131  |};
                             4498 ; 132  |
                             4499 ; 133  |#define MAX_MSG_LENGTH 10
                             4500 ; 134  |struct CMessage
                             4501 ; 135  |{
                             4502 ; 136  |        unsigned int m_uLength;
                             4503 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4504 ; 138  |};
                             4505 ; 139  |
                             4506 ; 140  |typedef struct {
                             4507 ; 141  |    WORD m_wLength;
                             4508 ; 142  |    WORD m_wMessage;
                             4509 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4510 ; 144  |} Message;
                             4511 ; 145  |
                             4512 ; 146  |struct MessageQueueDescriptor
                             4513 ; 147  |{
                             4514 ; 148  |        int *m_pBase;
                             4515 ; 149  |        int m_iModulo;
                             4516 ; 150  |        int m_iSize;
                             4517 ; 151  |        int *m_pHead;
                             4518 ; 152  |        int *m_pTail;
                             4519 ; 153  |};
                             4520 ; 154  |
                             4521 ; 155  |struct ModuleEntry
                             4522 ; 156  |{
                             4523 ; 157  |    int m_iSignaledEventMask;
                             4524 ; 158  |    int m_iWaitEventMask;
                             4525 ; 159  |    int m_iResourceOfCode;
                             4526 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4527 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4528 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4529 ; 163  |    int m_uTimeOutHigh;
                             4530 ; 164  |    int m_uTimeOutLow;
                             4531 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4532 ; 166  |};
                             4533 ; 167  |
                             4534 ; 168  |union WaitMask{
                             4535 ; 169  |    struct B{
                             4536 ; 170  |        unsigned int m_bNone     :1;
                             4537 ; 171  |        unsigned int m_bMessage  :1;
                             4538 ; 172  |        unsigned int m_bTimer    :1;
                             4539 ; 173  |        unsigned int m_bButton   :1;
                             4540 ; 174  |    } B;
                             4541 ; 175  |    int I;
                             4542 ; 176  |} ;
                             4543 ; 177  |
                             4544 ; 178  |
                             4545 ; 179  |struct Button {
                             4546 ; 180  |        WORD wButtonEvent;
                             4547 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4548 ; 182  |};
                             4549 ; 183  |
                             4550 ; 184  |struct Message {
                             4551 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4552 ; 186  |        WORD wMsgCommand;
                             4553 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4554 ; 188  |};
                             4555 ; 189  |
                             4556 ; 190  |union EventTypes {
                             4557 ; 191  |        struct CMessage msg;
                             4558 ; 192  |        struct Button Button ;
                             4559 ; 193  |        struct Message Message;
                             4560 ; 194  |};
                             4561 ; 195  |
                             4562 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4563 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4564 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4565 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4566 ; 200  |
                             4567 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4568 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4569 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4570 ; 204  |
                             4571 ; 205  |#if DEBUG
                             4572 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4573 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4574 ; 208  |#else 
                             4575 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             4576 ; 210  |#define DebugBuildAssert(x)    
                             4577 ; 211  |#endif
                             4578 ; 212  |
                             4579 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4580 ; 214  |//  #pragma asm
                             4581 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4582 ; 216  |//  #pragma endasm
                             4583 ; 217  |
                             4584 ; 218  |
                             4585 ; 219  |#ifdef COLOR_262K
                             4586 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             4587 ; 221  |#elif defined(COLOR_65K)
                             4588 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             4589 ; 223  |#else
                             4590 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             4591 ; 225  |#endif
                             4592 ; 226  |    
                             4593 ; 227  |#endif // #ifndef _TYPES_H
                             4594 
                             4596 
                             4597 ; 29   |
                             4598 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             4599 ; 31   |////   I2C STMP Registers
                             4600 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             4601 ; 33   |
                             4602 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             4603 ; 35   |
                             4604 ; 36   |
                             4605 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             4606 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             4607 ; 39   |
                             4608 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             4609 ; 41   |
                             4610 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             4611 ; 43   |
                             4612 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             4613 ; 45   |
                             4614 ; 46   |typedef union               /* I2C Clock Divider Register */
                             4615 ; 47   |{
                             4616 ; 48   |    struct {
                             4617 ; 49   |        int                :1; 
                             4618 ; 50   |        unsigned FACT      :8;
                             4619 ; 51   |    } B;
                             4620 ; 52   |    int I;
                             4621 ; 53   |    unsigned U;
                             4622 ; 54   |} i2cdivr_type;
                             4623 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Registers        */
                             4624 ; 56   |
                             4625 ; 57   |
                             4626 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             4627 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             4628 ; 60   |
                             4629 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             4630 ; 62   |
                             4631 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             4632 ; 64   |
                             4633 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             4634 ; 66   |
                             4635 ; 67   |typedef union               /* I2C Data Register */
                             4636 ; 68   |{
                             4637 ; 69   |    struct {
                             4638 ; 70   |         unsigned DATA :24; 
                             4639 ; 71   |    } B;
                             4640 ; 72   |    int I;
                             4641 ; 73   |    unsigned U;
                             4642 ; 74   |} i2cdatr_type;
                             4643 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers (I2CDAT)      */
                             4644 ; 76   |
                             4645 ; 77   |
                             4646 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             4647 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             4648 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             4649 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                             4650 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             4651 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             4652 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             4653 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             4654 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             4655 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             4656 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             4657 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             4658 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             4659 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             4660 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             4661 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             4662 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             4663 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             4664 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             4665 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             4666 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             4667 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             4668 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             4669 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             4670 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             4671 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             4672 ; 104  |
                             4673 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             4674 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             4675 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             4676 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             4677 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             4678 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             4679 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             4680 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             4681 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             4682 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             4683 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             4684 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             4685 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             4686 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             4687 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             4688 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             4689 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             4690 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             4691 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             4692 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             4693 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             4694 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             4695 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             4696 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             4697 ; 129  |
                             4698 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             4699 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             4700 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             4701 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             4702 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             4703 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             4704 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             4705 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             4706 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             4707 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             4708 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             4709 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             4710 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             4711 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                             4712 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             4713 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             4714 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             4715 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             4716 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             4717 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             4718 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             4719 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             4720 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             4721 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             4722 ; 154  |
                             4723 ; 155  |typedef union               /* I2C Control Register         */
                             4724 ; 156  |{
                             4725 ; 157  |    struct {
                             4726 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             4727 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             4728 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             4729 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             4730 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             4731 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             4732 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             4733 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             4734 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             4735 ; 167  |       unsigned WL     :2; /* Word Length              */
                             4736 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             4737 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             4738 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             4739 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             4740 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             4741 ; 173  |        int LWORD       :1; /* Last Word                */
                             4742 ; 174  |        int SUBA        :1; /* Sub Address              */
                             4743 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             4744 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             4745 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             4746 ; 178  |    } B;
                             4747 ; 179  |    int I;
                             4748 ; 180  |    unsigned U;
                             4749 ; 181  |} i2ccsr_type;
                             4750 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status Register (I2CCSR) */
                             4751 ; 183  |
                             4752 ; 184  |#endif
                             4753 
                             4755 
                             4756 ; 24   |#include "regsi2s.h"
                             4757 
                             4759 
                             4760 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4761 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4762 ; 3    |// Filename: regsi2s.inc
                             4763 ; 4    |// Description: Register definitions for I2S interface
                             4764 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4765 ; 6    |// The following naming conventions are followed in this file.
                             4766 ; 7    |// All registers are named using the format...
                             4767 ; 8    |//     HW_<module>_<regname>
                             4768 ; 9    |// where <module> is the module name which can be any of the following...
                             4769 ; 10   |//     USB20
                             4770 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4771 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4772 ; 13   |// that module)
                             4773 ; 14   |// <regname> is the specific register within that module
                             4774 ; 15   |// We also define the following...
                             4775 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4776 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4777 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4778 ; 19   |// which does something else, and
                             4779 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4780 ; 21   |// which does something else.
                             4781 ; 22   |// Other rules
                             4782 ; 23   |//     All caps
                             4783 ; 24   |//     Numeric identifiers start at 0
                             4784 ; 25   |#if !(defined(regsi2sinc))
                             4785 ; 26   |#define regsi2sinc 1
                             4786 ; 27   |
                             4787 ; 28   |#include "types.h"
                             4788 
                             4790 
                             4791 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4792 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4793 ; 3    |//
                             4794 ; 4    |// Filename: types.h
                             4795 ; 5    |// Description: Standard data types
                             4796 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4797 ; 7    |
                             4798 ; 8    |#ifndef _TYPES_H
                             4799 ; 9    |#define _TYPES_H
                             4800 ; 10   |
                             4801 ; 11   |// TODO:  move this outta here!
                             4802 ; 12   |#if !defined(NOERROR)
                             4803 ; 13   |#define NOERROR 0
                             4804 ; 14   |#define SUCCESS 0
                             4805 ; 15   |#endif 
                             4806 ; 16   |#if !defined(SUCCESS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4807 ; 17   |#define SUCCESS  0
                             4808 ; 18   |#endif
                             4809 ; 19   |#if !defined(ERROR)
                             4810 ; 20   |#define ERROR   -1
                             4811 ; 21   |#endif
                             4812 ; 22   |#if !defined(FALSE)
                             4813 ; 23   |#define FALSE 0
                             4814 ; 24   |#endif
                             4815 ; 25   |#if !defined(TRUE)
                             4816 ; 26   |#define TRUE  1
                             4817 ; 27   |#endif
                             4818 ; 28   |
                             4819 ; 29   |#if !defined(NULL)
                             4820 ; 30   |#define NULL 0
                             4821 ; 31   |#endif
                             4822 ; 32   |
                             4823 ; 33   |#define MAX_INT     0x7FFFFF
                             4824 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4825 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4826 ; 36   |#define MAX_ULONG   (-1) 
                             4827 ; 37   |
                             4828 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4829 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4830 ; 40   |
                             4831 ; 41   |
                             4832 ; 42   |#define BYTE    unsigned char       // btVarName
                             4833 ; 43   |#define CHAR    signed char         // cVarName
                             4834 ; 44   |#define USHORT  unsigned short      // usVarName
                             4835 ; 45   |#define SHORT   unsigned short      // sVarName
                             4836 ; 46   |#define WORD    unsigned int        // wVarName
                             4837 ; 47   |#define INT     signed int          // iVarName
                             4838 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4839 ; 49   |#define LONG    signed long         // lVarName
                             4840 ; 50   |#define BOOL    unsigned int        // bVarName
                             4841 ; 51   |#define FRACT   _fract              // frVarName
                             4842 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4843 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4844 ; 54   |#define FLOAT   float               // fVarName
                             4845 ; 55   |#define DBL     double              // dVarName
                             4846 ; 56   |#define ENUM    enum                // eVarName
                             4847 ; 57   |#define CMX     _complex            // cmxVarName
                             4848 ; 58   |typedef WORD UCS3;                   // 
                             4849 ; 59   |
                             4850 ; 60   |#define UINT16  unsigned short
                             4851 ; 61   |#define UINT8   unsigned char   
                             4852 ; 62   |#define UINT32  unsigned long
                             4853 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4854 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             4855 ; 65   |#define WCHAR   UINT16
                             4856 ; 66   |
                             4857 ; 67   |//UINT128 is 16 bytes or 6 words
                             4858 ; 68   |typedef struct UINT128_3500 {   
                             4859 ; 69   |    int val[6];     
                             4860 ; 70   |} UINT128_3500;
                             4861 ; 71   |
                             4862 ; 72   |#define UINT128   UINT128_3500
                             4863 ; 73   |
                             4864 ; 74   |// Little endian word packed byte strings:   
                             4865 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4866 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4867 ; 77   |// Little endian word packed byte strings:   
                             4868 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4869 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4870 ; 80   |
                             4871 ; 81   |// Declare Memory Spaces To Use When Coding
                             4872 ; 82   |// A. Sector Buffers
                             4873 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4874 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4875 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4876 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4877 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4878 ; 88   |// B. Media DDI Memory
                             4879 ; 89   |#define MEDIA_DDI_MEM _Y
                             4880 ; 90   |
                             4881 ; 91   |
                             4882 ; 92   |
                             4883 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4884 ; 94   |// Examples of circular pointers:
                             4885 ; 95   |//    INT CIRC cpiVarName
                             4886 ; 96   |//    DWORD CIRC cpdwVarName
                             4887 ; 97   |
                             4888 ; 98   |#define RETCODE INT                 // rcVarName
                             4889 ; 99   |
                             4890 ; 100  |// generic bitfield structure
                             4891 ; 101  |struct Bitfield {
                             4892 ; 102  |    unsigned int B0  :1;
                             4893 ; 103  |    unsigned int B1  :1;
                             4894 ; 104  |    unsigned int B2  :1;
                             4895 ; 105  |    unsigned int B3  :1;
                             4896 ; 106  |    unsigned int B4  :1;
                             4897 ; 107  |    unsigned int B5  :1;
                             4898 ; 108  |    unsigned int B6  :1;
                             4899 ; 109  |    unsigned int B7  :1;
                             4900 ; 110  |    unsigned int B8  :1;
                             4901 ; 111  |    unsigned int B9  :1;
                             4902 ; 112  |    unsigned int B10 :1;
                             4903 ; 113  |    unsigned int B11 :1;
                             4904 ; 114  |    unsigned int B12 :1;
                             4905 ; 115  |    unsigned int B13 :1;
                             4906 ; 116  |    unsigned int B14 :1;
                             4907 ; 117  |    unsigned int B15 :1;
                             4908 ; 118  |    unsigned int B16 :1;
                             4909 ; 119  |    unsigned int B17 :1;
                             4910 ; 120  |    unsigned int B18 :1;
                             4911 ; 121  |    unsigned int B19 :1;
                             4912 ; 122  |    unsigned int B20 :1;
                             4913 ; 123  |    unsigned int B21 :1;
                             4914 ; 124  |    unsigned int B22 :1;
                             4915 ; 125  |    unsigned int B23 :1;
                             4916 ; 126  |};
                             4917 ; 127  |
                             4918 ; 128  |union BitInt {
                             4919 ; 129  |        struct Bitfield B;
                             4920 ; 130  |        int        I;
                             4921 ; 131  |};
                             4922 ; 132  |
                             4923 ; 133  |#define MAX_MSG_LENGTH 10
                             4924 ; 134  |struct CMessage
                             4925 ; 135  |{
                             4926 ; 136  |        unsigned int m_uLength;
                             4927 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4928 ; 138  |};
                             4929 ; 139  |
                             4930 ; 140  |typedef struct {
                             4931 ; 141  |    WORD m_wLength;
                             4932 ; 142  |    WORD m_wMessage;
                             4933 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4934 ; 144  |} Message;
                             4935 ; 145  |
                             4936 ; 146  |struct MessageQueueDescriptor
                             4937 ; 147  |{
                             4938 ; 148  |        int *m_pBase;
                             4939 ; 149  |        int m_iModulo;
                             4940 ; 150  |        int m_iSize;
                             4941 ; 151  |        int *m_pHead;
                             4942 ; 152  |        int *m_pTail;
                             4943 ; 153  |};
                             4944 ; 154  |
                             4945 ; 155  |struct ModuleEntry
                             4946 ; 156  |{
                             4947 ; 157  |    int m_iSignaledEventMask;
                             4948 ; 158  |    int m_iWaitEventMask;
                             4949 ; 159  |    int m_iResourceOfCode;
                             4950 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4951 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             4952 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4953 ; 163  |    int m_uTimeOutHigh;
                             4954 ; 164  |    int m_uTimeOutLow;
                             4955 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4956 ; 166  |};
                             4957 ; 167  |
                             4958 ; 168  |union WaitMask{
                             4959 ; 169  |    struct B{
                             4960 ; 170  |        unsigned int m_bNone     :1;
                             4961 ; 171  |        unsigned int m_bMessage  :1;
                             4962 ; 172  |        unsigned int m_bTimer    :1;
                             4963 ; 173  |        unsigned int m_bButton   :1;
                             4964 ; 174  |    } B;
                             4965 ; 175  |    int I;
                             4966 ; 176  |} ;
                             4967 ; 177  |
                             4968 ; 178  |
                             4969 ; 179  |struct Button {
                             4970 ; 180  |        WORD wButtonEvent;
                             4971 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4972 ; 182  |};
                             4973 ; 183  |
                             4974 ; 184  |struct Message {
                             4975 ; 185  |        WORD wMsgLength;
                             4976 ; 186  |        WORD wMsgCommand;
                             4977 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4978 ; 188  |};
                             4979 ; 189  |
                             4980 ; 190  |union EventTypes {
                             4981 ; 191  |        struct CMessage msg;
                             4982 ; 192  |        struct Button Button ;
                             4983 ; 193  |        struct Message Message;
                             4984 ; 194  |};
                             4985 ; 195  |
                             4986 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4987 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4988 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4989 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4990 ; 200  |
                             4991 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4992 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4993 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4994 ; 204  |
                             4995 ; 205  |#if DEBUG
                             4996 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4997 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4998 ; 208  |#else 
                             4999 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             5000 ; 210  |#define DebugBuildAssert(x)    
                             5001 ; 211  |#endif
                             5002 ; 212  |
                             5003 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5004 ; 214  |//  #pragma asm
                             5005 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5006 ; 216  |//  #pragma endasm
                             5007 ; 217  |
                             5008 ; 218  |
                             5009 ; 219  |#ifdef COLOR_262K
                             5010 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             5011 ; 221  |#elif defined(COLOR_65K)
                             5012 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             5013 ; 223  |#else
                             5014 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             5015 ; 225  |#endif
                             5016 ; 226  |    
                             5017 ; 227  |#endif // #ifndef _TYPES_H
                             5018 
                             5020 
                             5021 ; 29   |
                             5022 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             5023 ; 31   |////  I2S Registers (SAI)
                             5024 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             5025 ; 33   |
                             5026 ; 34   |
                             5027 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             5028 ; 36   |
                             5029 ; 37   |
                             5030 ; 38   |
                             5031 ; 39   |
                             5032 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             5033 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             5034 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             5035 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             5036 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             5037 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             5038 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             5039 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             5040 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             5041 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             5042 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             5043 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             5044 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             5045 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             5046 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             5047 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             5048 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             5049 ; 57   |
                             5050 ; 58   |
                             5051 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             5052 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             5053 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             5054 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             5055 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             5056 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             5057 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             5058 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5059 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             5060 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             5061 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             5062 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             5063 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             5064 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             5065 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             5066 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             5067 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             5068 ; 76   |
                             5069 ; 77   |
                             5070 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             5071 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             5072 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             5073 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             5074 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                             5075 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             5076 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             5077 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             5078 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                             5079 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             5080 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             5081 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             5082 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                             5083 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             5084 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             5085 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                             5086 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                             5087 ; 95   |
                             5088 ; 96   |
                             5089 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             5090 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             5091 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             5092 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             5093 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             5094 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             5095 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             5096 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             5097 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             5098 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             5099 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             5100 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             5101 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             5102 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             5103 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             5104 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             5105 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             5106 ; 114  |
                             5107 ; 115  |typedef union
                             5108 ; 116  |{
                             5109 ; 117  |    struct {
                             5110 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             5111 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             5112 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             5113 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             5114 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             5115 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             5116 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             5117 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             5118 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             5119 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             5120 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                             5121 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             5122 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             5123 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             5124 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             5125 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             5126 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             5127 ; 135  |    } B;
                             5128 ; 136  |    int I;
                             5129 ; 137  |    unsigned U;
                             5130 ; 138  |} saircsr_type;
                             5131 ; 139  |
                             5132 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive CSR         */
                             5133 ; 141  |
                             5134 ; 142  |typedef union
                             5135 ; 143  |{
                             5136 ; 144  |    struct {
                             5137 ; 145  |        unsigned SAI :24;
                             5138 ; 146  |    } B;
                             5139 ; 147  |    int I;
                             5140 ; 148  |    unsigned U;
                             5141 ; 149  |} saixr_type;
                             5142 ; 150  |
                             5143 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received data reg 0 */
                             5144 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received data reg 1 */
                             5145 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received data reg 2 */
                             5146 ; 154  |
                             5147 ; 155  |
                             5148 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             5149 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             5150 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             5151 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             5152 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             5153 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             5154 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             5155 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             5156 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             5157 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             5158 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             5159 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             5160 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             5161 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             5162 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             5163 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             5164 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             5165 ; 173  |
                             5166 ; 174  |
                             5167 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             5168 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             5169 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             5170 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             5171 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             5172 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             5173 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             5174 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             5175 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             5176 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             5177 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             5178 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             5179 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             5180 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             5181 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             5182 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             5183 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             5184 ; 192  |
                             5185 ; 193  |
                             5186 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             5187 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             5188 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             5189 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             5190 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                             5191 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             5192 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             5193 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                             5194 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             5195 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             5196 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             5197 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             5198 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                             5199 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             5200 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             5201 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                             5202 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                             5203 ; 211  |
                             5204 ; 212  |
                             5205 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             5206 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             5207 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             5208 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             5209 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             5210 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             5211 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             5212 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             5213 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             5214 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             5215 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             5216 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             5217 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             5218 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             5219 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             5220 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             5221 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             5222 ; 230  |
                             5223 ; 231  |
                             5224 ; 232  |typedef union
                             5225 ; 233  |{
                             5226 ; 234  |    struct {
                             5227 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             5228 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             5229 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             5230 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             5231 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             5232 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             5233 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction 
                             5234 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             5235 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             5236 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             5237 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justification
                             5238 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             5239 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             5240 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             5241 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             5242 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             5243 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             5244 ; 252  |    } B;
                             5245 ; 253  |    int I;
                             5246 ; 254  |    unsigned U;
                             5247 ; 255  |} saitcsr_type;
                             5248 ; 256  |
                             5249 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR      */
                             5250 ; 258  |
                             5251 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit data reg 0 */
                             5252 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit data reg 1 */
                             5253 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit data reg 2 */
                             5254 ; 262  |
                             5255 ; 263  |#endif
                             5256 
                             5258 
                             5259 ; 25   |#include "regsicoll.h"
                             5260 
                             5262 
                             5263 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             5264 ; 2    |#define __REGS_ICOLL_INC 1
                             5265 ; 3    |
                             5266 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             5267 ; 5    |//  Interrupt Collector Registers
                             5268 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5269 ; 7    |
                             5270 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             5271 ; 9    |
                             5272 ; 10   |
                             5273 ; 11   |
                             5274 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             5275 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             5276 ; 14   |
                             5277 ; 15   |typedef union
                             5278 ; 16   |{
                             5279 ; 17   |    struct {
                             5280 ; 18   |        int SEN0        :1;
                             5281 ; 19   |        int SEN1        :1;
                             5282 ; 20   |        int SEN2        :1;
                             5283 ; 21   |        int SEN3        :1;
                             5284 ; 22   |        int SEN4        :1;
                             5285 ; 23   |        int SEN5        :1;
                             5286 ; 24   |        int SEN6        :1;
                             5287 ; 25   |        int SEN7        :1;
                             5288 ; 26   |        int SEN8        :1;
                             5289 ; 27   |        int SEN9        :1;
                             5290 ; 28   |        int SEN10       :1;
                             5291 ; 29   |        int SEN11       :1;
                             5292 ; 30   |        int SEN12       :1;
                             5293 ; 31   |        int SEN13       :1;
                             5294 ; 32   |        int SEN14       :1;
                             5295 ; 33   |        int SEN15       :1;
                             5296 ; 34   |        int SEN16       :1;
                             5297 ; 35   |        int SEN17       :1;
                             5298 ; 36   |        int SEN18       :1;
                             5299 ; 37   |        int SEN19       :1;
                             5300 ; 38   |        int SEN20       :1;
                             5301 ; 39   |        int SEN21       :1;
                             5302 ; 40   |        int SEN22       :1;
                             5303 ; 41   |        int SEN23       :1;
                             5304 ; 42   |    } B;
                             5305 ; 43   |    int I;
                             5306 ; 44   |} iclenable0_type;
                             5307 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt Priority Register Core   */
                             5308 ; 46   |
                             5309 ; 47   |
                             5310 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             5311 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5312 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             5313 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             5314 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             5315 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             5316 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             5317 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             5318 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             5319 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             5320 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             5321 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             5322 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             5323 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             5324 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             5325 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             5326 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             5327 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             5328 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             5329 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             5330 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             5331 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             5332 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             5333 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             5334 ; 72   |
                             5335 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             5336 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             5337 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             5338 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             5339 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             5340 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             5341 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             5342 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             5343 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             5344 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             5345 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             5346 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             5347 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             5348 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             5349 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             5350 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             5351 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             5352 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             5353 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             5354 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             5355 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             5356 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             5357 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             5358 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             5359 ; 97   |
                             5360 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             5361 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             5362 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             5363 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             5364 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             5365 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             5366 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             5367 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             5368 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             5369 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             5370 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             5371 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             5372 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             5373 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             5374 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             5375 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             5376 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             5377 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             5378 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             5379 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             5380 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             5381 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             5382 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             5383 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             5384 ; 122  |
                             5385 ; 123  |
                             5386 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             5387 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             5388 ; 126  |typedef union
                             5389 ; 127  |{
                             5390 ; 128  |    struct {
                             5391 ; 129  |        
                             5392 ; 130  |        int SEN24       :1;
                             5393 ; 131  |        int SEN25       :1;
                             5394 ; 132  |        int SEN26       :1;
                             5395 ; 133  |        int SEN27       :1;
                             5396 ; 134  |        int SEN28       :1;
                             5397 ; 135  |        int SEN29       :1;
                             5398 ; 136  |        int SEN30       :1;
                             5399 ; 137  |        int SEN31       :1;
                             5400 ; 138  |        int SEN32       :1;
                             5401 ; 139  |        int SEN33       :1;
                             5402 ; 140  |    } B;
                             5403 ; 141  |    int I;
                             5404 ; 142  |} iclenable1_type;
                             5405 ; 143  |
                             5406 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interrupt Priority Register Core    */
                             5407 ; 145  |
                             5408 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             5409 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             5410 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             5411 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             5412 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             5413 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             5414 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             5415 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             5416 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             5417 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             5418 ; 156  |
                             5419 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             5420 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             5421 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             5422 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             5423 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             5424 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             5425 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             5426 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             5427 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             5428 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             5429 ; 167  |
                             5430 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             5431 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             5432 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             5433 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             5434 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             5435 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             5436 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             5437 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             5438 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             5439 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             5440 ; 178  |
                             5441 ; 179  |
                             5442 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             5443 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             5444 ; 182  |typedef union
                             5445 ; 183  |{
                             5446 ; 184  |    struct {
                             5447 ; 185  |        int SST0        :1;
                             5448 ; 186  |        int SST1        :1;
                             5449 ; 187  |        int SST2        :1;
                             5450 ; 188  |        int SST3        :1;
                             5451 ; 189  |        int SST4        :1;
                             5452 ; 190  |        int SST5        :1;
                             5453 ; 191  |        int SST6        :1;
                             5454 ; 192  |        int SST7        :1;
                             5455 ; 193  |        int SST8        :1;
                             5456 ; 194  |        int SST9        :1;
                             5457 ; 195  |        int SST10       :1;
                             5458 ; 196  |        int SST11       :1;
                             5459 ; 197  |        int SST12       :1;
                             5460 ; 198  |        int SST13       :1;
                             5461 ; 199  |        int SST14       :1;
                             5462 ; 200  |        int SST15       :1;
                             5463 ; 201  |        int SST16       :1;
                             5464 ; 202  |        int SST17       :1;
                             5465 ; 203  |        int SST18       :1;
                             5466 ; 204  |        int SST19       :1;
                             5467 ; 205  |        int SST20       :1;
                             5468 ; 206  |        int SST21       :1;
                             5469 ; 207  |        int SST22       :1;
                             5470 ; 208  |        int SST23       :1;
                             5471 ; 209  |    } B;
                             5472 ; 210  |    int I;
                             5473 ; 211  |} iclstatus0_type;
                             5474 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interrupt Priority Register Core */
                             5475 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             5476 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             5477 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             5478 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             5479 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             5480 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             5481 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             5482 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             5483 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             5484 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             5485 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             5486 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             5487 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             5488 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             5489 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             5490 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             5491 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             5492 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             5493 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             5494 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             5495 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             5496 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             5497 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             5498 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             5499 ; 237  |
                             5500 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             5501 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             5502 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             5503 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             5504 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             5505 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             5506 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             5507 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             5508 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             5509 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             5510 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             5511 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             5512 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             5513 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             5514 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             5515 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             5516 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             5517 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             5518 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             5519 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             5520 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             5521 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             5522 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             5523 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             5524 ; 262  |
                             5525 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             5526 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             5527 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             5528 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             5529 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             5530 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             5531 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             5532 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             5533 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             5534 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             5535 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             5536 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             5537 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             5538 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             5539 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             5540 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             5541 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             5542 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             5543 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             5544 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             5545 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             5546 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             5547 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             5548 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             5549 ; 287  |
                             5550 ; 288  |
                             5551 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             5552 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             5553 ; 291  |typedef union
                             5554 ; 292  |{
                             5555 ; 293  |    struct {
                             5556 ; 294  |        int SST24       :1;
                             5557 ; 295  |        int SST25       :1;
                             5558 ; 296  |        int SST26       :1;
                             5559 ; 297  |        int SST27       :1;
                             5560 ; 298  |        int SST28       :1;
                             5561 ; 299  |        int SST29       :1;
                             5562 ; 300  |        int SST30       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5563 ; 301  |        int SST31       :1;
                             5564 ; 302  |        int SST32       :1;
                             5565 ; 303  |        int SST33       :1;
                             5566 ; 304  |    } B;
                             5567 ; 305  |    int I;
                             5568 ; 306  |} iclstatus1_type;
                             5569 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interrupt Priority Register Core */
                             5570 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             5571 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             5572 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             5573 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             5574 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             5575 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             5576 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             5577 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             5578 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             5579 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             5580 ; 318  |
                             5581 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             5582 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             5583 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             5584 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             5585 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             5586 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             5587 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             5588 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             5589 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             5590 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             5591 ; 329  |
                             5592 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             5593 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             5594 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             5595 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             5596 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             5597 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             5598 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             5599 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             5600 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             5601 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             5602 ; 340  |
                             5603 ; 341  |
                             5604 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             5605 ; 343  |//  Interrupt Collector Priority Defs
                             5606 ; 344  |typedef union
                             5607 ; 345  |{
                             5608 ; 346  |    struct {
                             5609 ; 347  |        unsigned S0P    :3;
                             5610 ; 348  |        unsigned S1P    :3;
                             5611 ; 349  |        unsigned S2P    :3;
                             5612 ; 350  |        unsigned S3P    :3;
                             5613 ; 351  |        unsigned S4P    :3;
                             5614 ; 352  |        unsigned S5P    :3;
                             5615 ; 353  |        unsigned S6P    :3;
                             5616 ; 354  |        unsigned S7P    :3;
                             5617 ; 355  |    } B;
                             5618 ; 356  |    int I;
                             5619 ; 357  |
                             5620 ; 358  |} iclprior0_type;
                             5621 ; 359  |
                             5622 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrupt Collector Register 0 Priority   */
                             5623 ; 361  |
                             5624 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             5625 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             5626 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             5627 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             5628 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             5629 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             5630 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             5631 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             5632 ; 370  |
                             5633 ; 371  |
                             5634 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             5635 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             5636 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             5637 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             5638 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             5639 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             5640 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             5641 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             5642 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             5643 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             5644 ; 382  |
                             5645 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             5646 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             5647 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             5648 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             5649 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             5650 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             5651 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             5652 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             5653 ; 391  |
                             5654 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             5655 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             5656 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             5657 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             5658 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             5659 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             5660 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             5661 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             5662 ; 400  |
                             5663 ; 401  |
                             5664 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             5665 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             5666 ; 404  |typedef union
                             5667 ; 405  |{
                             5668 ; 406  |    struct {
                             5669 ; 407  |        unsigned S8P    :3;
                             5670 ; 408  |        unsigned S9P    :3;
                             5671 ; 409  |        unsigned S10P   :3;
                             5672 ; 410  |        unsigned S11P   :3;
                             5673 ; 411  |        unsigned S12P   :3;
                             5674 ; 412  |        unsigned S13P   :3;
                             5675 ; 413  |        unsigned S14P   :3;
                             5676 ; 414  |        unsigned S15P   :3;
                             5677 ; 415  |    } B;
                             5678 ; 416  |    int I;
                             5679 ; 417  |} iclprior1_type;
                             5680 ; 418  |
                             5681 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrupt Collector Register 1 Priority   */
                             5682 ; 420  |
                             5683 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             5684 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             5685 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             5686 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             5687 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             5688 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             5689 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             5690 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             5691 ; 429  |
                             5692 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             5693 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             5694 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             5695 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             5696 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             5697 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             5698 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             5699 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             5700 ; 438  |
                             5701 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             5702 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             5703 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             5704 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             5705 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             5706 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             5707 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             5708 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             5709 ; 447  |
                             5710 ; 448  |
                             5711 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             5712 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             5713 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             5714 ; 452  |{
                             5715 ; 453  |    struct {
                             5716 ; 454  |        unsigned S16P   :3;
                             5717 ; 455  |        unsigned S17P   :3;
                             5718 ; 456  |        unsigned S18P   :3;
                             5719 ; 457  |        unsigned S19P   :3;
                             5720 ; 458  |        unsigned S20P   :3;
                             5721 ; 459  |        unsigned S21P   :3;
                             5722 ; 460  |        unsigned S22P   :3;
                             5723 ; 461  |        unsigned S23P   :3;
                             5724 ; 462  |    } B;
                             5725 ; 463  |    int I;
                             5726 ; 464  |} iclprior2_type;
                             5727 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrupt Collector Register 2 Priority   */
                             5728 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             5729 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             5730 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             5731 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             5732 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             5733 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             5734 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             5735 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             5736 ; 474  |
                             5737 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             5738 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             5739 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             5740 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             5741 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             5742 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             5743 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             5744 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             5745 ; 483  |
                             5746 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             5747 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             5748 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             5749 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             5750 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             5751 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             5752 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             5753 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             5754 ; 492  |
                             5755 ; 493  |
                             5756 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             5757 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             5758 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5759 ; 497  |{
                             5760 ; 498  |    struct {
                             5761 ; 499  |        unsigned S24P   :3;
                             5762 ; 500  |        unsigned S25P   :3;
                             5763 ; 501  |        unsigned S26P   :3;
                             5764 ; 502  |        unsigned S27P   :3;
                             5765 ; 503  |        unsigned S28P   :3;
                             5766 ; 504  |        unsigned S29P   :3;
                             5767 ; 505  |        unsigned S30P   :3;
                             5768 ; 506  |        unsigned S31P   :3;
                             5769 ; 507  |    } B;
                             5770 ; 508  |    int I;
                             5771 ; 509  |} iclprior3_type;
                             5772 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrupt Collector Register 3 Priority   */
                             5773 ; 511  |
                             5774 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             5775 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             5776 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             5777 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             5778 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             5779 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             5780 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             5781 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             5782 ; 520  |
                             5783 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             5784 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             5785 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             5786 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             5787 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             5788 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             5789 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             5790 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             5791 ; 529  |
                             5792 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             5793 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             5794 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             5795 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             5796 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             5797 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             5798 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             5799 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             5800 ; 538  |
                             5801 ; 539  |
                             5802 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             5803 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             5804 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5805 ; 543  |{
                             5806 ; 544  |    struct {
                             5807 ; 545  |        unsigned S32P   :3;
                             5808 ; 546  |        unsigned S33P   :3;
                             5809 ; 547  |    } B;
                             5810 ; 548  |    int I;
                             5811 ; 549  |} iclprior4_type;
                             5812 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt Collector Register 4 Priority   */
                             5813 ; 551  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5814 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             5815 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             5816 ; 554  |
                             5817 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             5818 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             5819 ; 557  |
                             5820 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             5821 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             5822 ; 560  |
                             5823 ; 561  |
                             5824 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             5825 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             5826 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             5827 ; 565  |{
                             5828 ; 566  |    struct {
                             5829 ; 567  |        unsigned S0S    :2;
                             5830 ; 568  |        unsigned S1S    :2;
                             5831 ; 569  |        unsigned S2S    :2;
                             5832 ; 570  |        unsigned S3S    :2;
                             5833 ; 571  |        unsigned S4S    :2;
                             5834 ; 572  |        unsigned S5S    :2;
                             5835 ; 573  |        unsigned S6S    :2;
                             5836 ; 574  |        unsigned S7S    :2;
                             5837 ; 575  |        unsigned S8S    :2;
                             5838 ; 576  |        unsigned S9S    :2;
                             5839 ; 577  |        unsigned S10S   :2;
                             5840 ; 578  |        unsigned S11S   :2;
                             5841 ; 579  |    } B;
                             5842 ; 580  |    int I;
                             5843 ; 581  |} iclsteer0_type;
                             5844 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrupt Collector Steering Register 0   */
                             5845 ; 583  |
                             5846 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             5847 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             5848 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             5849 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             5850 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             5851 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             5852 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             5853 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             5854 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             5855 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             5856 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             5857 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             5858 ; 596  |
                             5859 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             5860 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             5861 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             5862 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             5863 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             5864 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             5865 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             5866 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             5867 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             5868 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             5869 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             5870 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             5871 ; 609  |
                             5872 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             5873 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             5874 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             5875 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             5876 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             5877 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             5878 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             5879 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             5880 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             5881 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             5882 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             5883 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             5884 ; 622  |
                             5885 ; 623  |
                             5886 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             5887 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             5888 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             5889 ; 627  |{
                             5890 ; 628  |    struct {
                             5891 ; 629  |        unsigned S12S   :2;
                             5892 ; 630  |        unsigned S13S   :2;
                             5893 ; 631  |        unsigned S14S   :2;
                             5894 ; 632  |        unsigned S15S   :2;
                             5895 ; 633  |        unsigned S16S   :2;
                             5896 ; 634  |        unsigned S17S   :2;
                             5897 ; 635  |        unsigned S18S   :2;
                             5898 ; 636  |        unsigned S19S   :2;
                             5899 ; 637  |        unsigned S20S   :2;
                             5900 ; 638  |        unsigned S21S   :2;
                             5901 ; 639  |        unsigned S22S   :2;
                             5902 ; 640  |        unsigned S23S   :2;
                             5903 ; 641  |    } B;
                             5904 ; 642  |    int I;
                             5905 ; 643  |} iclsteer1_type;
                             5906 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrupt Collector Steering Register 1   */
                             5907 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             5908 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             5909 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             5910 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             5911 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             5912 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             5913 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             5914 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             5915 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             5916 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             5917 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             5918 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             5919 ; 657  |
                             5920 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             5921 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             5922 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             5923 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             5924 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             5925 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             5926 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             5927 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             5928 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             5929 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             5930 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             5931 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             5932 ; 670  |
                             5933 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             5934 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             5935 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             5936 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             5937 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             5938 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             5939 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             5940 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             5941 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             5942 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             5943 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             5944 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             5945 ; 683  |
                             5946 ; 684  |
                             5947 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             5948 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             5949 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             5950 ; 688  |{
                             5951 ; 689  |    struct {
                             5952 ; 690  |        unsigned S24S   :2;
                             5953 ; 691  |        unsigned S25S   :2;
                             5954 ; 692  |        unsigned S26S   :2;
                             5955 ; 693  |        unsigned S27S   :2;
                             5956 ; 694  |        unsigned S28S   :2;
                             5957 ; 695  |        unsigned S29S   :2;
                             5958 ; 696  |        unsigned S30S   :2;
                             5959 ; 697  |        unsigned S31S   :2;
                             5960 ; 698  |        unsigned S32S   :2;
                             5961 ; 699  |        unsigned S33S   :2;
                             5962 ; 700  |    } B;
                             5963 ; 701  |    int I;
                             5964 ; 702  |} iclsteer2_type;
                             5965 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interrupt Collector Steering Register 2  */
                             5966 ; 704  |
                             5967 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             5968 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             5969 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             5970 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             5971 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             5972 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             5973 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             5974 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             5975 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             5976 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             5977 ; 715  |
                             5978 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             5979 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             5980 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             5981 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             5982 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             5983 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             5984 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             5985 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             5986 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             5987 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             5988 ; 726  |
                             5989 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             5990 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             5991 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             5992 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             5993 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             5994 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             5995 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             5996 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             5997 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             5998 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             5999 ; 737  |
                             6000 ; 738  |
                             6001 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             6002 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             6003 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             6004 ; 742  |{
                             6005 ; 743  |    struct {
                             6006 ; 744  |        int S0FV        :1;
                             6007 ; 745  |        int S1FV        :1;
                             6008 ; 746  |        int S2FV        :1;
                             6009 ; 747  |        int S3FV        :1;
                             6010 ; 748  |        int S4FV        :1;
                             6011 ; 749  |        int S5FV        :1;
                             6012 ; 750  |        int S6FV        :1;
                             6013 ; 751  |        int S7FV        :1;
                             6014 ; 752  |        int S8FV        :1;
                             6015 ; 753  |        int S9FV        :1;
                             6016 ; 754  |        int S10FV       :1;
                             6017 ; 755  |        int S11FV       :1;
                             6018 ; 756  |        int S12FV       :1;
                             6019 ; 757  |        int S13FV       :1;
                             6020 ; 758  |        int S14FV       :1;
                             6021 ; 759  |        int S15FV       :1;
                             6022 ; 760  |        int S16FV       :1;
                             6023 ; 761  |        int S17FV       :1;
                             6024 ; 762  |        int S18FV       :1;
                             6025 ; 763  |        int S19FV       :1;
                             6026 ; 764  |        int S20FV       :1;
                             6027 ; 765  |        int S21FV       :1;
                             6028 ; 766  |        int S22FV       :1;
                             6029 ; 767  |        int S23FV       :1;
                             6030 ; 768  |    } B;
                             6031 ; 769  |    int I;
                             6032 ; 770  |} iclforce0_type;
                             6033 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interrupt Collector Debug Force Register 0   */
                             6034 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             6035 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             6036 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             6037 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             6038 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             6039 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             6040 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             6041 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             6042 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             6043 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             6044 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             6045 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             6046 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             6047 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             6048 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             6049 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             6050 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             6051 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             6052 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             6053 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             6054 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             6055 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             6056 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             6057 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             6058 ; 796  |
                             6059 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             6060 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             6061 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             6062 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             6063 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             6064 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6065 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             6066 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             6067 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             6068 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             6069 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             6070 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             6071 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             6072 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             6073 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             6074 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             6075 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             6076 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             6077 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             6078 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             6079 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             6080 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             6081 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             6082 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             6083 ; 821  |
                             6084 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             6085 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             6086 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             6087 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             6088 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             6089 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             6090 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             6091 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             6092 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             6093 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             6094 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             6095 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             6096 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             6097 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             6098 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             6099 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             6100 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             6101 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             6102 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             6103 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             6104 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             6105 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             6106 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             6107 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             6108 ; 846  |
                             6109 ; 847  |
                             6110 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             6111 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             6112 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             6113 ; 851  |{
                             6114 ; 852  |    struct {
                             6115 ; 853  |        int S24FV       :1;
                             6116 ; 854  |        int S25FV       :1;
                             6117 ; 855  |        int S26FV       :1;
                             6118 ; 856  |        int S27FV       :1;
                             6119 ; 857  |        int S28FV       :1;
                             6120 ; 858  |        int S29FV       :1;
                             6121 ; 859  |        int S30FV       :1;
                             6122 ; 860  |        int S31FV       :1;
                             6123 ; 861  |        int S32FV       :1;
                             6124 ; 862  |        int S33FV       :1;
                             6125 ; 863  |    } B;
                             6126 ; 864  |    int I;
                             6127 ; 865  |} iclforce1_type;
                             6128 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interrupt Collector Debug Force Register 1   */
                             6129 ; 867  |
                             6130 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             6131 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             6132 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             6133 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             6134 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             6135 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             6136 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             6137 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             6138 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             6139 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             6140 ; 878  |
                             6141 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             6142 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             6143 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             6144 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             6145 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             6146 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             6147 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             6148 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             6149 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             6150 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             6151 ; 889  |
                             6152 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             6153 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             6154 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             6155 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             6156 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             6157 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             6158 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             6159 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             6160 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             6161 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             6162 ; 900  |
                             6163 ; 901  |
                             6164 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             6165 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             6166 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             6167 ; 905  |{
                             6168 ; 906  |    struct {
                             6169 ; 907  |        int S0FE        :1;
                             6170 ; 908  |        int S1FE        :1;
                             6171 ; 909  |        int S2FE        :1;
                             6172 ; 910  |        int S3FE        :1;
                             6173 ; 911  |        int S4FE        :1;
                             6174 ; 912  |        int S5FE        :1;
                             6175 ; 913  |        int S6FE        :1;
                             6176 ; 914  |        int S7FE        :1;
                             6177 ; 915  |        int S8FE        :1;
                             6178 ; 916  |        int S9FE        :1;
                             6179 ; 917  |        int S10FE       :1;
                             6180 ; 918  |        int S11FE       :1;
                             6181 ; 919  |        int S12FE       :1;
                             6182 ; 920  |        int S13FE       :1;
                             6183 ; 921  |        int S14FE       :1;
                             6184 ; 922  |        int S15FE       :1;
                             6185 ; 923  |        int S16FE       :1;
                             6186 ; 924  |        int S17FE       :1;
                             6187 ; 925  |        int S18FE       :1;
                             6188 ; 926  |        int S19FE       :1;
                             6189 ; 927  |        int S20FE       :1;
                             6190 ; 928  |        int S21FE       :1;
                             6191 ; 929  |        int S22FE       :1;
                             6192 ; 930  |        int S23FE       :1;
                             6193 ; 931  |    } B;
                             6194 ; 932  |    int I;
                             6195 ; 933  |} iclfenable0_type;
                             6196 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Interrupt Collector Force Enable Register 0    */
                             6197 ; 935  |
                             6198 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             6199 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             6200 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             6201 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             6202 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             6203 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             6204 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             6205 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             6206 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             6207 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             6208 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             6209 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             6210 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             6211 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             6212 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             6213 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             6214 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             6215 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             6216 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             6217 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             6218 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             6219 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             6220 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             6221 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             6222 ; 960  |
                             6223 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             6224 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             6225 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             6226 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             6227 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             6228 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             6229 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             6230 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             6231 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             6232 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             6233 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             6234 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             6235 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             6236 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             6237 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             6238 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             6239 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             6240 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             6241 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             6242 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             6243 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             6244 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             6245 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             6246 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             6247 ; 985  |
                             6248 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             6249 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             6250 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             6251 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             6252 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             6253 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             6254 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             6255 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             6256 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             6257 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             6258 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             6259 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             6260 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             6261 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             6262 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             6263 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             6264 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             6265 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             6266 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             6267 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             6268 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             6269 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             6270 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             6271 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             6272 ; 1010 |
                             6273 ; 1011 |
                             6274 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             6275 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             6276 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             6277 ; 1015 |{
                             6278 ; 1016 |    struct {
                             6279 ; 1017 |        int S24FE       :1;
                             6280 ; 1018 |        int S25FE       :1;
                             6281 ; 1019 |        int S26FE       :1;
                             6282 ; 1020 |        int S27FE       :1;
                             6283 ; 1021 |        int S28FE       :1;
                             6284 ; 1022 |        int S29FE       :1;
                             6285 ; 1023 |        int S30FE       :1;
                             6286 ; 1024 |        int S31FE       :1;
                             6287 ; 1025 |        int S32FE       :1;
                             6288 ; 1026 |        int S33FE       :1;
                             6289 ; 1027 |    } B;
                             6290 ; 1028 |    int I;
                             6291 ; 1029 |} iclfenable1_type;
                             6292 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Interrupt Collector Force Enable Register 1    */
                             6293 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             6294 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             6295 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             6296 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             6297 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             6298 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             6299 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             6300 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             6301 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             6302 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             6303 ; 1041 |
                             6304 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             6305 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             6306 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             6307 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             6308 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             6309 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             6310 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             6311 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             6312 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             6313 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             6314 ; 1052 |
                             6315 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6316 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             6317 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             6318 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             6319 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             6320 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             6321 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             6322 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             6323 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             6324 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             6325 ; 1063 |
                             6326 ; 1064 |
                             6327 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             6328 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             6329 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             6330 ; 1068 |{
                             6331 ; 1069 |    struct {
                             6332 ; 1070 |        unsigned RQ     :7;
                             6333 ; 1071 |        unsigned IVA    :7;
                             6334 ; 1072 |        unsigned IVB    :7;
                             6335 ; 1073 |    } B;
                             6336 ; 1074 |    int I;
                             6337 ; 1075 |} iclobsvz0_type;
                             6338 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interrupt Collector Observation Register 0   */
                             6339 ; 1077 |
                             6340 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             6341 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             6342 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             6343 ; 1081 |
                             6344 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             6345 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             6346 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             6347 ; 1085 |
                             6348 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             6349 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             6350 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             6351 ; 1089 |
                             6352 ; 1090 |
                             6353 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             6354 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             6355 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             6356 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             6357 ; 1095 |
                             6358 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             6359 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             6360 ; 1098 |
                             6361 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             6362 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             6363 ; 1101 |
                             6364 ; 1102 |
                             6365 ; 1103 |
                             6366 ; 1104 |
                             6367 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             6368 ; 1106 |//  Interrupt Vectors
                             6369 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             6370 ; 1108 |// Reset Vector
                             6371 ; 1109 |#define HW_IVECRESET 0x0000           
                             6372 ; 1110 |// Stack Error
                             6373 ; 1111 |#define HW_IVECSTERR 0x0002           
                             6374 ; 1112 |// Trace
                             6375 ; 1113 |#define HW_IVECTRAC 0x0004           
                             6376 ; 1114 |// SWI
                             6377 ; 1115 |#define HW_IVECSWI 0x0006           
                             6378 ; 1116 |// ~IRQA
                             6379 ; 1117 |#define HW_IVECIRQA 0x0008           
                             6380 ; 1118 |// ~IRQB - BROWNOUT
                             6381 ; 1119 |#define HW_IVECIRQB 0x000A           
                             6382 ; 1120 |// Fatal Error
                             6383 ; 1121 |#define HW_IVECERROR 0x000C           
                             6384 ; 1122 |// SPI
                             6385 ; 1123 |#define HW_IVECSPI 0x000E           
                             6386 ; 1124 |// I2S TX Data Empty
                             6387 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             6388 ; 1126 |// I2S TX Underflow
                             6389 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             6390 ; 1128 |// I2S RX Data Full
                             6391 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             6392 ; 1130 |// I2S RX Overflow
                             6393 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             6394 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors here
                             6395 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors here
                             6396 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors here
                             6397 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             6398 ; 1136 |// GPIO1
                             6399 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             6400 ; 1138 |// GPIO2
                             6401 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             6402 ; 1140 |// GPIO0
                             6403 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             6404 ; 1142 |// TIMER0
                             6405 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             6406 ; 1144 |// TIMER1
                             6407 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             6408 ; 1146 |// TIMER2
                             6409 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             6410 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors here
                             6411 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors here
                             6412 ; 1150 |// I2C RX Data Ready
                             6413 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             6414 ; 1152 |// I2C RX Overflow
                             6415 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             6416 ; 1154 |// I2C TX Data Empty
                             6417 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             6418 ; 1156 |// I2C TX Underflow
                             6419 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             6420 ; 1158 |// Illegal Instruction
                             6421 ; 1159 |#define HW_IVECILI 0x0038           
                             6422 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors here
                             6423 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             6424 ; 1162 |#define HW_IVECDACE 0x003C           
                             6425 ; 1163 |// DAC Underflow ISR
                             6426 ; 1164 |#define HW_IVECDACUF 0x003E           
                             6427 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors here
                             6428 ; 1166 |// ADC Full ISR
                             6429 ; 1167 |#define HW_IVECADCF 0x0042           
                             6430 ; 1168 |// ADC Overflow ISR
                             6431 ; 1169 |#define HW_IVECADCOF 0x0044           
                             6432 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors here
                             6433 ; 1171 |// TIMER3
                             6434 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             6435 ; 1173 |// GPIO3
                             6436 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             6437 ; 1175 |// SDRAM
                             6438 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             6439 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors here
                             6440 ; 1178 |// 5 volt power connected
                             6441 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             6442 ; 1180 |// USB Controller
                             6443 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             6444 ; 1182 |// USB Wakeup 
                             6445 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             6446 ; 1184 |// 5 volt power disconnected
                             6447 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             6448 ; 1186 |// enhanced SPI
                             6449 ; 1187 |#define HW_IVECESPI 0x0058           
                             6450 ; 1188 |// filter coprocessor
                             6451 ; 1189 |#define HW_IVECFILCO 0x005A           
                             6452 ; 1190 |// low res ADC #1
                             6453 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             6454 ; 1192 |// real time clock alarm
                             6455 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             6456 ; 1194 |// low res ADC #2
                             6457 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             6458 ; 1196 |// flash hardware ECC
                             6459 ; 1197 |#define HW_IVECHWECC 0x0062           
                             6460 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors here
                             6461 ; 1199 |// CDSYNC Interrupt
                             6462 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             6463 ; 1201 |// CDSYNC Exception
                             6464 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             6465 ; 1203 |// RS
                             6466 ; 1204 |#define HW_IVECRS 0x006A           
                             6467 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors here
                             6468 ; 1206 |// Flash Done ISR
                             6469 ; 1207 |#define HW_IVECFD 0x006E           
                             6470 ; 1208 |// CompactFlash ISR
                             6471 ; 1209 |#define HW_IVECCF 0x0070           
                             6472 ; 1210 |// SmartMedia Timeout ISR
                             6473 ; 1211 |#define HW_IVECSMTO 0x0072           
                             6474 ; 1212 |// SmartMedia Invalid Programming
                             6475 ; 1213 |#define HW_IVECSMIP 0x0074           
                             6476 ; 1214 |// CompactFlash No Card ISR
                             6477 ; 1215 |#define HW_IVECCFNC 0x0076           
                             6478 ; 1216 |// CompactFlash Status Change ISR
                             6479 ; 1217 |#define HW_IVECCFSC 0x0078           
                             6480 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors here
                             6481 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors here
                             6482 ; 1220 |// CDI
                             6483 ; 1221 |#define HW_IVECCDI 0x007E           
                             6484 ; 1222 |
                             6485 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             6486 ; 1224 |//  Interrupt Vectors
                             6487 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             6488 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             6489 ; 1227 |#define VECTOR(address,isr) \ 
                             6490 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             6491 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             6492 ; 1230 |
                             6493 ; 1231 |
                             6494 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             6495 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             6496 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             6497 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             6498 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             6499 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             6500 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             6501 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             6502 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             6503 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             6504 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             6505 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             6506 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             6507 ; 1245 |
                             6508 ; 1246 |// Interrupt Disabled
                             6509 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             6510 ; 1248 |// Interrupt Priority Level 0
                             6511 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             6512 ; 1250 |// Interrupt Priority Level 1
                             6513 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             6514 ; 1252 |// Interrupt Priority Level 2
                             6515 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             6516 ; 1254 |
                             6517 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             6518 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             6519 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             6520 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             6521 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             6522 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             6523 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             6524 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             6525 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             6526 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             6527 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             6528 ; 1266 |
                             6529 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             6530 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             6531 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             6532 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             6533 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             6534 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             6535 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             6536 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             6537 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             6538 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             6539 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             6540 ; 1278 |
                             6541 ; 1279 |// Interrupt Priority register
                             6542 ; 1280 |typedef union               
                             6543 ; 1281 |{
                             6544 ; 1282 |    struct {
                             6545 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             6546 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             6547 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             6548 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             6549 ; 1287 |        int                 :4; /* Reserved */
                             6550 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             6551 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             6552 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             6553 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             6554 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             6555 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             6556 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             6557 ; 1295 |    } B;
                             6558 ; 1296 |
                             6559 ; 1297 |    int I;
                             6560 ; 1298 |
                             6561 ; 1299 |} ipr_type;
                             6562 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             6563 ; 1301 |
                             6564 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                             6565 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                             6566 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6567 ; 1305 |
                             6568 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             6569 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             6570 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             6571 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             6572 ; 1310 |
                             6573 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             6574 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6575 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             6576 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             6577 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             6578 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             6579 ; 1317 |
                             6580 ; 1318 |#endif
                             6581 ; 1319 |
                             6582 
                             6584 
                             6585 ; 26   |#include "regslradc.h"
                             6586 
                             6588 
                             6589 ; 1    |#if !(defined(regslradcinc))
                             6590 ; 2    |
                             6591 ; 3    |#define regslradcinc 1
                             6592 ; 4    |
                             6593 ; 5    |#include "types.h"
                             6594 
                             6596 
                             6597 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6598 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6599 ; 3    |//
                             6600 ; 4    |// Filename: types.h
                             6601 ; 5    |// Description: Standard data types
                             6602 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6603 ; 7    |
                             6604 ; 8    |#ifndef _TYPES_H
                             6605 ; 9    |#define _TYPES_H
                             6606 ; 10   |
                             6607 ; 11   |// TODO:  move this outta here!
                             6608 ; 12   |#if !defined(NOERROR)
                             6609 ; 13   |#define NOERROR 0
                             6610 ; 14   |#define SUCCESS 0
                             6611 ; 15   |#endif 
                             6612 ; 16   |#if !defined(SUCCESS)
                             6613 ; 17   |#define SUCCESS  0
                             6614 ; 18   |#endif
                             6615 ; 19   |#if !defined(ERROR)
                             6616 ; 20   |#define ERROR   -1
                             6617 ; 21   |#endif
                             6618 ; 22   |#if !defined(FALSE)
                             6619 ; 23   |#define FALSE 0
                             6620 ; 24   |#endif
                             6621 ; 25   |#if !defined(TRUE)
                             6622 ; 26   |#define TRUE  1
                             6623 ; 27   |#endif
                             6624 ; 28   |
                             6625 ; 29   |#if !defined(NULL)
                             6626 ; 30   |#define NULL 0
                             6627 ; 31   |#endif
                             6628 ; 32   |
                             6629 ; 33   |#define MAX_INT     0x7FFFFF
                             6630 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6631 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6632 ; 36   |#define MAX_ULONG   (-1) 
                             6633 ; 37   |
                             6634 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6635 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6636 ; 40   |
                             6637 ; 41   |
                             6638 ; 42   |#define BYTE    unsigned char       // btVarName
                             6639 ; 43   |#define CHAR    signed char         // cVarName
                             6640 ; 44   |#define USHORT  unsigned short      // usVarName
                             6641 ; 45   |#define SHORT   unsigned short      // sVarName
                             6642 ; 46   |#define WORD    unsigned int        // wVarName
                             6643 ; 47   |#define INT     signed int          // iVarName
                             6644 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6645 ; 49   |#define LONG    signed long         // lVarName
                             6646 ; 50   |#define BOOL    unsigned int        // bVarName
                             6647 ; 51   |#define FRACT   _fract              // frVarName
                             6648 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6649 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6650 ; 54   |#define FLOAT   float               // fVarName
                             6651 ; 55   |#define DBL     double              // dVarName
                             6652 ; 56   |#define ENUM    enum                // eVarName
                             6653 ; 57   |#define CMX     _complex            // cmxVarName
                             6654 ; 58   |typedef WORD UCS3;                   // 
                             6655 ; 59   |
                             6656 ; 60   |#define UINT16  unsigned short
                             6657 ; 61   |#define UINT8   unsigned char   
                             6658 ; 62   |#define UINT32  unsigned long
                             6659 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6660 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             6661 ; 65   |#define WCHAR   UINT16
                             6662 ; 66   |
                             6663 ; 67   |//UINT128 is 16 bytes or 6 words
                             6664 ; 68   |typedef struct UINT128_3500 {   
                             6665 ; 69   |    int val[6];     
                             6666 ; 70   |} UINT128_3500;
                             6667 ; 71   |
                             6668 ; 72   |#define UINT128   UINT128_3500
                             6669 ; 73   |
                             6670 ; 74   |// Little endian word packed byte strings:   
                             6671 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6672 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6673 ; 77   |// Little endian word packed byte strings:   
                             6674 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6675 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6676 ; 80   |
                             6677 ; 81   |// Declare Memory Spaces To Use When Coding
                             6678 ; 82   |// A. Sector Buffers
                             6679 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6680 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             6681 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6682 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6683 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6684 ; 88   |// B. Media DDI Memory
                             6685 ; 89   |#define MEDIA_DDI_MEM _Y
                             6686 ; 90   |
                             6687 ; 91   |
                             6688 ; 92   |
                             6689 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6690 ; 94   |// Examples of circular pointers:
                             6691 ; 95   |//    INT CIRC cpiVarName
                             6692 ; 96   |//    DWORD CIRC cpdwVarName
                             6693 ; 97   |
                             6694 ; 98   |#define RETCODE INT                 // rcVarName
                             6695 ; 99   |
                             6696 ; 100  |// generic bitfield structure
                             6697 ; 101  |struct Bitfield {
                             6698 ; 102  |    unsigned int B0  :1;
                             6699 ; 103  |    unsigned int B1  :1;
                             6700 ; 104  |    unsigned int B2  :1;
                             6701 ; 105  |    unsigned int B3  :1;
                             6702 ; 106  |    unsigned int B4  :1;
                             6703 ; 107  |    unsigned int B5  :1;
                             6704 ; 108  |    unsigned int B6  :1;
                             6705 ; 109  |    unsigned int B7  :1;
                             6706 ; 110  |    unsigned int B8  :1;
                             6707 ; 111  |    unsigned int B9  :1;
                             6708 ; 112  |    unsigned int B10 :1;
                             6709 ; 113  |    unsigned int B11 :1;
                             6710 ; 114  |    unsigned int B12 :1;
                             6711 ; 115  |    unsigned int B13 :1;
                             6712 ; 116  |    unsigned int B14 :1;
                             6713 ; 117  |    unsigned int B15 :1;
                             6714 ; 118  |    unsigned int B16 :1;
                             6715 ; 119  |    unsigned int B17 :1;
                             6716 ; 120  |    unsigned int B18 :1;
                             6717 ; 121  |    unsigned int B19 :1;
                             6718 ; 122  |    unsigned int B20 :1;
                             6719 ; 123  |    unsigned int B21 :1;
                             6720 ; 124  |    unsigned int B22 :1;
                             6721 ; 125  |    unsigned int B23 :1;
                             6722 ; 126  |};
                             6723 ; 127  |
                             6724 ; 128  |union BitInt {
                             6725 ; 129  |        struct Bitfield B;
                             6726 ; 130  |        int        I;
                             6727 ; 131  |};
                             6728 ; 132  |
                             6729 ; 133  |#define MAX_MSG_LENGTH 10
                             6730 ; 134  |struct CMessage
                             6731 ; 135  |{
                             6732 ; 136  |        unsigned int m_uLength;
                             6733 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6734 ; 138  |};
                             6735 ; 139  |
                             6736 ; 140  |typedef struct {
                             6737 ; 141  |    WORD m_wLength;
                             6738 ; 142  |    WORD m_wMessage;
                             6739 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6740 ; 144  |} Message;
                             6741 ; 145  |
                             6742 ; 146  |struct MessageQueueDescriptor
                             6743 ; 147  |{
                             6744 ; 148  |        int *m_pBase;
                             6745 ; 149  |        int m_iModulo;
                             6746 ; 150  |        int m_iSize;
                             6747 ; 151  |        int *m_pHead;
                             6748 ; 152  |        int *m_pTail;
                             6749 ; 153  |};
                             6750 ; 154  |
                             6751 ; 155  |struct ModuleEntry
                             6752 ; 156  |{
                             6753 ; 157  |    int m_iSignaledEventMask;
                             6754 ; 158  |    int m_iWaitEventMask;
                             6755 ; 159  |    int m_iResourceOfCode;
                             6756 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6757 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             6758 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6759 ; 163  |    int m_uTimeOutHigh;
                             6760 ; 164  |    int m_uTimeOutLow;
                             6761 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6762 ; 166  |};
                             6763 ; 167  |
                             6764 ; 168  |union WaitMask{
                             6765 ; 169  |    struct B{
                             6766 ; 170  |        unsigned int m_bNone     :1;
                             6767 ; 171  |        unsigned int m_bMessage  :1;
                             6768 ; 172  |        unsigned int m_bTimer    :1;
                             6769 ; 173  |        unsigned int m_bButton   :1;
                             6770 ; 174  |    } B;
                             6771 ; 175  |    int I;
                             6772 ; 176  |} ;
                             6773 ; 177  |
                             6774 ; 178  |
                             6775 ; 179  |struct Button {
                             6776 ; 180  |        WORD wButtonEvent;
                             6777 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6778 ; 182  |};
                             6779 ; 183  |
                             6780 ; 184  |struct Message {
                             6781 ; 185  |        WORD wMsgLength;
                             6782 ; 186  |        WORD wMsgCommand;
                             6783 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6784 ; 188  |};
                             6785 ; 189  |
                             6786 ; 190  |union EventTypes {
                             6787 ; 191  |        struct CMessage msg;
                             6788 ; 192  |        struct Button Button ;
                             6789 ; 193  |        struct Message Message;
                             6790 ; 194  |};
                             6791 ; 195  |
                             6792 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6793 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6794 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6795 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6796 ; 200  |
                             6797 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6798 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6799 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6800 ; 204  |
                             6801 ; 205  |#if DEBUG
                             6802 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6803 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             6804 ; 208  |#else 
                             6805 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             6806 ; 210  |#define DebugBuildAssert(x)    
                             6807 ; 211  |#endif
                             6808 ; 212  |
                             6809 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6810 ; 214  |//  #pragma asm
                             6811 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6812 ; 216  |//  #pragma endasm
                             6813 ; 217  |
                             6814 ; 218  |
                             6815 ; 219  |#ifdef COLOR_262K
                             6816 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             6817 ; 221  |#elif defined(COLOR_65K)
                             6818 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             6819 ; 223  |#else
                             6820 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6821 ; 225  |#endif
                             6822 ; 226  |    
                             6823 ; 227  |#endif // #ifndef _TYPES_H
                             6824 
                             6826 
                             6827 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6828 ; 7    |
                             6829 ; 8    |//   SYSTEM STMP Registers 
                             6830 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             6831 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6832 ; 11   |
                             6833 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             6834 ; 13   |
                             6835 ; 14   |
                             6836 ; 15   |
                             6837 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             6838 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             6839 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             6840 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             6841 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6842 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             6843 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             6844 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             6845 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             6846 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             6847 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             6848 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             6849 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             6850 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             6851 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             6852 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             6853 ; 32   |
                             6854 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             6855 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6856 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             6857 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             6858 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             6859 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             6860 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             6861 ; 40   |
                             6862 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BATT_CTRL_INPUT_OFFSET_BITPOS)        
                             6863 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BATT_CTRL_HALF_CMP_PWR_BITPOS)        
                             6864 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_CTRL_INPUT_DIV2_BITPOS) 
                             6865 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_BITPOS) 
                             6866 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS) 
                             6867 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CLK_DIV_BITPOS)        
                             6868 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_REF_VAL_BITPOS)        
                             6869 ; 48   |
                             6870 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             6871 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             6872 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             6873 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             6874 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             6875 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             6876 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             6877 ; 56   |
                             6878 ; 57   |typedef union               
                             6879 ; 58   |{
                             6880 ; 59   |    struct {
                             6881 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             6882 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             6883 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             6884 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             6885 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             6886 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             6887 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             6888 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             6889 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             6890 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             6891 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH;
                             6892 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH;
                             6893 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDTH;
                             6894 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_WIDTH;
                             6895 ; 74   |    } B;
                             6896 ; 75   |   unsigned int I;
                             6897 ; 76   |        unsigned int U;
                             6898 ; 77   |} lradc_ctrl_type;
                             6899 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Battery LRADC Control Register */
                             6900 ; 79   |
                             6901 ; 80   |
                             6902 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             6903 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             6904 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             6905 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             6906 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             6907 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             6908 ; 87   |
                             6909 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             6910 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             6911 ; 90   |
                             6912 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             6913 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)-1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             6914 ; 93   |
                             6915 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK)     
                             6916 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK)     
                             6917 ; 96   |
                             6918 ; 97   |
                             6919 ; 98   |typedef union               
                             6920 ; 99   |{
                             6921 ; 100  |    struct {
                             6922 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             6923 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             6924 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             6925 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             6926 ; 105  |    } B;
                             6927 ; 106  |    unsigned int I;
                             6928 ; 107  |} lradc_thrsh_type;
                             6929 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* Battery LRADC Threshold Register */
                             6930 ; 109  |
                             6931 ; 110  |
                             6932 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             6933 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             6934 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             6935 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             6936 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             6937 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             6938 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             6939 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             6940 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             6941 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             6942 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             6943 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             6944 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             6945 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             6946 ; 125  |
                             6947 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             6948 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             6949 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             6950 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             6951 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             6952 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             6953 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             6954 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             6955 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             6956 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             6957 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             6958 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             6959 ; 138  |
                             6960 ; 139  |
                             6961 ; 140  |
                             6962 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT1_BITPOS)
                             6963 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_EQ_EVENT0_BITPOS)
                             6964 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT1_BITPOS)
                             6965 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_GT_EVENT0_BITPOS)
                             6966 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT1_BITPOS)
                             6967 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_LT_EVENT0_BITPOS)
                             6968 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_RSVD0_BITPOS)
                             6969 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_RESULT_DATA_OUT_BITPOS)
                             6970 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_RSVD1_BITPOS)
                             6971 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT0_BITPOS)
                             6972 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BATT_RESULT_IRQ_EVENT1_BITPOS)
                             6973 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_RSVD2_BITPOS)
                             6974 ; 153  |
                             6975 ; 154  |
                             6976 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             6977 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             6978 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             6979 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             6980 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             6981 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             6982 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             6983 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             6984 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             6985 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             6986 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             6987 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             6988 ; 167  |
                             6989 ; 168  |typedef union               
                             6990 ; 169  |{
                             6991 ; 170  |    struct {
                             6992 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             6993 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             6994 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             6995 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             6996 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             6997 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             6998 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             6999 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             7000 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             7001 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_IRQ_EVENT0_WIDTH;
                             7002 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_IRQ_EVENT1_WIDTH;                      
                             7003 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESULT_RSVD2_WIDTH;
                             7004 ; 183  |    } B;
                             7005 ; 184  |    unsigned int I;
                             7006 ; 185  |} lradc_result_type;
                             7007 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /* Battery LRADC Result Register */
                             7008 ; 187  |
                             7009 ; 188  |
                             7010 ; 189  |
                             7011 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             7012 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             7013 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             7014 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             7015 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7016 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             7017 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             7018 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             7019 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             7020 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             7021 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             7022 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             7023 ; 202  |
                             7024 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             7025 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7026 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             7027 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             7028 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             7029 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             7030 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             7031 ; 210  |
                             7032 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             7033 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             7034 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC1_CTRL_INPUT_DIV2_BITPOS) 
                             7035 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_CLEAR_BITPOS) 
                             7036 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_BITPOS) 
                             7037 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_CTRL_CLK_DIV_BITPOS)        
                             7038 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_CTRL_REF_VAL_BITPOS)        
                             7039 ; 218  |
                             7040 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)     
                             7041 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)     
                             7042 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             7043 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             7044 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             7045 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             7046 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             7047 ; 226  |
                             7048 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* LRADC1 Control Register */
                             7049 ; 228  |
                             7050 ; 229  |
                             7051 ; 230  |
                             7052 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             7053 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             7054 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7055 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             7056 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7057 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             7058 ; 237  |
                             7059 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7060 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7061 ; 240  |
                             7062 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             7063 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             7064 ; 243  |
                             7065 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK)     
                             7066 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK)     
                             7067 ; 246  |
                             7068 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /* LRADC1 Threshold Register */
                             7069 ; 248  |
                             7070 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             7071 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             7072 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7073 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             7074 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             7075 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             7076 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             7077 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             7078 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             7079 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             7080 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             7081 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             7082 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             7083 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             7084 ; 263  |
                             7085 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             7086 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             7087 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             7088 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             7089 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             7090 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             7091 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             7092 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             7093 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             7094 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             7095 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             7096 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             7097 ; 276  |
                             7098 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             7099 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             7100 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT1_BITPOS)
                             7101 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_GT_EVENT0_BITPOS)
                             7102 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT1_BITPOS)
                             7103 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_LT_EVENT0_BITPOS)
                             7104 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD0_BITPOS)
                             7105 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC1_RESULT_DATA_OUT_BITPOS)
                             7106 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD1_BITPOS)
                             7107 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             7108 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             7109 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_RESULT_RSVD2_BITPOS)
                             7110 ; 289  |
                             7111 ; 290  |
                             7112 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             7113 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             7114 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             7115 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             7116 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             7117 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             7118 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             7119 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             7120 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             7121 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             7122 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             7123 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             7124 ; 303  |
                             7125 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))    /* LRADC1 Result Register */
                             7126 ; 305  |
                             7127 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             7128 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             7129 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             7130 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             7131 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7132 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             7133 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             7134 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             7135 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             7136 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             7137 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             7138 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             7139 ; 318  |
                             7140 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             7141 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7142 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             7143 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             7144 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             7145 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             7146 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             7147 ; 326  |
                             7148 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             7149 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             7150 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             7151 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             7152 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_PWD_BITPOS) 
                             7153 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             7154 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             7155 ; 334  |
                             7156 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK)     
                             7157 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK)     
                             7158 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK) 
                             7159 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             7160 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             7161 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)     
                             7162 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)     
                             7163 ; 342  |
                             7164 ; 343  |
                             7165 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* LRADC2_CTRL Control Register */
                             7166 ; 345  |
                             7167 ; 346  |
                             7168 ; 347  |
                             7169 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             7170 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             7171 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7172 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             7173 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7174 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             7175 ; 354  |
                             7176 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7177 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7178 ; 357  |
                             7179 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             7180 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1)<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             7181 ; 360  |
                             7182 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK)     
                             7183 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK)     
                             7184 ; 363  |
                             7185 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /* LRADC2 Threshold Register */
                             7186 ; 365  |
                             7187 ; 366  |
                             7188 ; 367  |
                             7189 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             7190 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             7191 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             7192 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             7193 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             7194 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             7195 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             7196 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             7197 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             7198 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             7199 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             7200 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             7201 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             7202 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             7203 ; 382  |
                             7204 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             7205 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             7206 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             7207 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             7208 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             7209 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             7210 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             7211 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             7212 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             7213 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             7214 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             7215 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             7216 ; 395  |
                             7217 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             7218 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             7219 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT1_BITPOS)
                             7220 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_GT_EVENT0_BITPOS)
                             7221 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT1_BITPOS)
                             7222 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_LT_EVENT0_BITPOS)
                             7223 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD0_BITPOS)
                             7224 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LRADC2_RESULT_DATA_OUT_BITPOS)
                             7225 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD1_BITPOS)
                             7226 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             7227 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             7228 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_RESULT_RSVD2_BITPOS)
                             7229 ; 408  |
                             7230 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             7231 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             7232 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             7233 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             7234 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             7235 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             7236 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             7237 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             7238 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             7239 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             7240 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             7241 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             7242 ; 421  |
                             7243 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))    /* LRADC2 Result Register */
                             7244 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7245 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7246 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7247 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7248 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7249 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7250 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7251 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_DIV2_SETMASK
                             7252 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7253 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7254 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7255 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7256 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7257 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7258 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7259 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             7260 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK          
                             7261 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementation
                             7262 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7263 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7264 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7265 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7266 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7267 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7268 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7269 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7270 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7271 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7272 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7273 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7274 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7275 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             7276 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7277 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             7278 ; 457  |
                             7279 ; 458  |//Needed by button.asm
                             7280 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7281 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7282 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7283 ; 462  |
                             7284 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7285 ; 464  |
                             7286 ; 465  |#endif
                             7287 ; 466  |
                             7288 ; 467  |
                             7289 
                             7291 
                             7292 ; 27   |#include "regspwm.h"
                             7293 
                             7295 
                             7296 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7297 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7298 ; 3    |// Filename: regspwm.inc
                             7299 ; 4    |// Description: Register definitions for PWM interface
                             7300 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7301 ; 6    |// The following naming conventions are followed in this file.
                             7302 ; 7    |// All registers are named using the format...
                             7303 ; 8    |//     HW_<module>_<regname>
                             7304 ; 9    |// where <module> is the module name which can be any of the following...
                             7305 ; 10   |//     USB20
                             7306 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7307 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7308 ; 13   |// that module)
                             7309 ; 14   |// <regname> is the specific register within that module
                             7310 ; 15   |// We also define the following...
                             7311 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7312 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7313 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7314 ; 19   |// which does something else, and
                             7315 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7316 ; 21   |// which does something else.
                             7317 ; 22   |// Other rules
                             7318 ; 23   |//     All caps
                             7319 ; 24   |//     Numeric identifiers start at 0
                             7320 ; 25   |#if !(defined(regspwminc))
                             7321 ; 26   |#define regspwminc 1
                             7322 ; 27   |
                             7323 ; 28   |#include "types.h"
                             7324 
                             7326 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7327 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7328 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7329 ; 3    |//
                             7330 ; 4    |// Filename: types.h
                             7331 ; 5    |// Description: Standard data types
                             7332 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7333 ; 7    |
                             7334 ; 8    |#ifndef _TYPES_H
                             7335 ; 9    |#define _TYPES_H
                             7336 ; 10   |
                             7337 ; 11   |// TODO:  move this outta here!
                             7338 ; 12   |#if !defined(NOERROR)
                             7339 ; 13   |#define NOERROR 0
                             7340 ; 14   |#define SUCCESS 0
                             7341 ; 15   |#endif 
                             7342 ; 16   |#if !defined(SUCCESS)
                             7343 ; 17   |#define SUCCESS  0
                             7344 ; 18   |#endif
                             7345 ; 19   |#if !defined(ERROR)
                             7346 ; 20   |#define ERROR   -1
                             7347 ; 21   |#endif
                             7348 ; 22   |#if !defined(FALSE)
                             7349 ; 23   |#define FALSE 0
                             7350 ; 24   |#endif
                             7351 ; 25   |#if !defined(TRUE)
                             7352 ; 26   |#define TRUE  1
                             7353 ; 27   |#endif
                             7354 ; 28   |
                             7355 ; 29   |#if !defined(NULL)
                             7356 ; 30   |#define NULL 0
                             7357 ; 31   |#endif
                             7358 ; 32   |
                             7359 ; 33   |#define MAX_INT     0x7FFFFF
                             7360 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7361 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7362 ; 36   |#define MAX_ULONG   (-1) 
                             7363 ; 37   |
                             7364 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7365 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7366 ; 40   |
                             7367 ; 41   |
                             7368 ; 42   |#define BYTE    unsigned char       // btVarName
                             7369 ; 43   |#define CHAR    signed char         // cVarName
                             7370 ; 44   |#define USHORT  unsigned short      // usVarName
                             7371 ; 45   |#define SHORT   unsigned short      // sVarName
                             7372 ; 46   |#define WORD    unsigned int        // wVarName
                             7373 ; 47   |#define INT     signed int          // iVarName
                             7374 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7375 ; 49   |#define LONG    signed long         // lVarName
                             7376 ; 50   |#define BOOL    unsigned int        // bVarName
                             7377 ; 51   |#define FRACT   _fract              // frVarName
                             7378 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7379 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7380 ; 54   |#define FLOAT   float               // fVarName
                             7381 ; 55   |#define DBL     double              // dVarName
                             7382 ; 56   |#define ENUM    enum                // eVarName
                             7383 ; 57   |#define CMX     _complex            // cmxVarName
                             7384 ; 58   |typedef WORD UCS3;                   // 
                             7385 ; 59   |
                             7386 ; 60   |#define UINT16  unsigned short
                             7387 ; 61   |#define UINT8   unsigned char   
                             7388 ; 62   |#define UINT32  unsigned long
                             7389 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7390 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7391 ; 65   |#define WCHAR   UINT16
                             7392 ; 66   |
                             7393 ; 67   |//UINT128 is 16 bytes or 6 words
                             7394 ; 68   |typedef struct UINT128_3500 {   
                             7395 ; 69   |    int val[6];     
                             7396 ; 70   |} UINT128_3500;
                             7397 ; 71   |
                             7398 ; 72   |#define UINT128   UINT128_3500
                             7399 ; 73   |
                             7400 ; 74   |// Little endian word packed byte strings:   
                             7401 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7402 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7403 ; 77   |// Little endian word packed byte strings:   
                             7404 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7405 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7406 ; 80   |
                             7407 ; 81   |// Declare Memory Spaces To Use When Coding
                             7408 ; 82   |// A. Sector Buffers
                             7409 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7410 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7411 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7412 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7413 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7414 ; 88   |// B. Media DDI Memory
                             7415 ; 89   |#define MEDIA_DDI_MEM _Y
                             7416 ; 90   |
                             7417 ; 91   |
                             7418 ; 92   |
                             7419 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7420 ; 94   |// Examples of circular pointers:
                             7421 ; 95   |//    INT CIRC cpiVarName
                             7422 ; 96   |//    DWORD CIRC cpdwVarName
                             7423 ; 97   |
                             7424 ; 98   |#define RETCODE INT                 // rcVarName
                             7425 ; 99   |
                             7426 ; 100  |// generic bitfield structure
                             7427 ; 101  |struct Bitfield {
                             7428 ; 102  |    unsigned int B0  :1;
                             7429 ; 103  |    unsigned int B1  :1;
                             7430 ; 104  |    unsigned int B2  :1;
                             7431 ; 105  |    unsigned int B3  :1;
                             7432 ; 106  |    unsigned int B4  :1;
                             7433 ; 107  |    unsigned int B5  :1;
                             7434 ; 108  |    unsigned int B6  :1;
                             7435 ; 109  |    unsigned int B7  :1;
                             7436 ; 110  |    unsigned int B8  :1;
                             7437 ; 111  |    unsigned int B9  :1;
                             7438 ; 112  |    unsigned int B10 :1;
                             7439 ; 113  |    unsigned int B11 :1;
                             7440 ; 114  |    unsigned int B12 :1;
                             7441 ; 115  |    unsigned int B13 :1;
                             7442 ; 116  |    unsigned int B14 :1;
                             7443 ; 117  |    unsigned int B15 :1;
                             7444 ; 118  |    unsigned int B16 :1;
                             7445 ; 119  |    unsigned int B17 :1;
                             7446 ; 120  |    unsigned int B18 :1;
                             7447 ; 121  |    unsigned int B19 :1;
                             7448 ; 122  |    unsigned int B20 :1;
                             7449 ; 123  |    unsigned int B21 :1;
                             7450 ; 124  |    unsigned int B22 :1;
                             7451 ; 125  |    unsigned int B23 :1;
                             7452 ; 126  |};
                             7453 ; 127  |
                             7454 ; 128  |union BitInt {
                             7455 ; 129  |        struct Bitfield B;
                             7456 ; 130  |        int        I;
                             7457 ; 131  |};
                             7458 ; 132  |
                             7459 ; 133  |#define MAX_MSG_LENGTH 10
                             7460 ; 134  |struct CMessage
                             7461 ; 135  |{
                             7462 ; 136  |        unsigned int m_uLength;
                             7463 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7464 ; 138  |};
                             7465 ; 139  |
                             7466 ; 140  |typedef struct {
                             7467 ; 141  |    WORD m_wLength;
                             7468 ; 142  |    WORD m_wMessage;
                             7469 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7470 ; 144  |} Message;
                             7471 ; 145  |
                             7472 ; 146  |struct MessageQueueDescriptor
                             7473 ; 147  |{
                             7474 ; 148  |        int *m_pBase;
                             7475 ; 149  |        int m_iModulo;
                             7476 ; 150  |        int m_iSize;
                             7477 ; 151  |        int *m_pHead;
                             7478 ; 152  |        int *m_pTail;
                             7479 ; 153  |};
                             7480 ; 154  |
                             7481 ; 155  |struct ModuleEntry
                             7482 ; 156  |{
                             7483 ; 157  |    int m_iSignaledEventMask;
                             7484 ; 158  |    int m_iWaitEventMask;
                             7485 ; 159  |    int m_iResourceOfCode;
                             7486 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7487 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             7488 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7489 ; 163  |    int m_uTimeOutHigh;
                             7490 ; 164  |    int m_uTimeOutLow;
                             7491 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7492 ; 166  |};
                             7493 ; 167  |
                             7494 ; 168  |union WaitMask{
                             7495 ; 169  |    struct B{
                             7496 ; 170  |        unsigned int m_bNone     :1;
                             7497 ; 171  |        unsigned int m_bMessage  :1;
                             7498 ; 172  |        unsigned int m_bTimer    :1;
                             7499 ; 173  |        unsigned int m_bButton   :1;
                             7500 ; 174  |    } B;
                             7501 ; 175  |    int I;
                             7502 ; 176  |} ;
                             7503 ; 177  |
                             7504 ; 178  |
                             7505 ; 179  |struct Button {
                             7506 ; 180  |        WORD wButtonEvent;
                             7507 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7508 ; 182  |};
                             7509 ; 183  |
                             7510 ; 184  |struct Message {
                             7511 ; 185  |        WORD wMsgLength;
                             7512 ; 186  |        WORD wMsgCommand;
                             7513 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7514 ; 188  |};
                             7515 ; 189  |
                             7516 ; 190  |union EventTypes {
                             7517 ; 191  |        struct CMessage msg;
                             7518 ; 192  |        struct Button Button ;
                             7519 ; 193  |        struct Message Message;
                             7520 ; 194  |};
                             7521 ; 195  |
                             7522 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7523 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7524 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7525 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7526 ; 200  |
                             7527 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7528 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7529 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7530 ; 204  |
                             7531 ; 205  |#if DEBUG
                             7532 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7533 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7534 ; 208  |#else 
                             7535 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             7536 ; 210  |#define DebugBuildAssert(x)    
                             7537 ; 211  |#endif
                             7538 ; 212  |
                             7539 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7540 ; 214  |//  #pragma asm
                             7541 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7542 ; 216  |//  #pragma endasm
                             7543 ; 217  |
                             7544 ; 218  |
                             7545 ; 219  |#ifdef COLOR_262K
                             7546 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             7547 ; 221  |#elif defined(COLOR_65K)
                             7548 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             7549 ; 223  |#else
                             7550 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             7551 ; 225  |#endif
                             7552 ; 226  |    
                             7553 ; 227  |#endif // #ifndef _TYPES_H
                             7554 
                             7556 
                             7557 ; 29   |
                             7558 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7559 ; 31   |//   Pulse Width Modulator STMP Registers 
                             7560 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7561 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             7562 ; 34   |
                             7563 ; 35   |
                             7564 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             7565 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             7566 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             7567 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             7568 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             7569 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             7570 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             7571 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             7572 ; 44   |
                             7573 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             7574 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             7575 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             7576 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             7577 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             7578 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7579 ; 51   |
                             7580 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_BITPOS)
                             7581 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_BITPOS)
                             7582 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_BITPOS)
                             7583 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_BITPOS)
                             7584 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             7585 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_BITPOS)
                             7586 ; 58   |
                             7587 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             7588 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             7589 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             7590 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             7591 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             7592 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             7593 ; 65   |
                             7594 ; 66   |typedef union               
                             7595 ; 67   |{
                             7596 ; 68   |    struct {
                             7597 ; 69   |        int PWM0_EN                    :1;
                             7598 ; 70   |        int PWM1_EN                    :1;
                             7599 ; 71   |        int PWM2_EN                    :1;
                             7600 ; 72   |        int PWM3_EN                    :1;
                             7601 ; 73   |        int RSVD0                      :4;
                             7602 ; 74   |        int CDIV                       :2;
                             7603 ; 75   |        int RSVD1                      :13;
                             7604 ; 76   |        int MSTR_EN                    :1;
                             7605 ; 77   |    } B;
                             7606 ; 78   |    int I;
                             7607 ; 79   |} pwmcsr_type;
                             7608 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control Status Register */
                             7609 ; 81   |
                             7610 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             7611 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             7612 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             7613 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             7614 ; 86   |
                             7615 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             7616 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             7617 ; 89   |
                             7618 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTIVE_BITPOS)
                             7619 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_INACTIVE_BITPOS)
                             7620 ; 92   |
                             7621 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             7622 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             7623 ; 95   |
                             7624 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             7625 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             7626 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             7627 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             7628 ; 100  |
                             7629 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             7630 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             7631 ; 103  |
                             7632 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTIVE_BITPOS)
                             7633 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_INACTIVE_BITPOS)
                             7634 ; 106  |
                             7635 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             7636 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             7637 ; 109  |
                             7638 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             7639 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             7640 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             7641 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             7642 ; 114  |
                             7643 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             7644 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             7645 ; 117  |
                             7646 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTIVE_BITPOS)
                             7647 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_INACTIVE_BITPOS)
                             7648 ; 120  |
                             7649 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             7650 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             7651 ; 123  |
                             7652 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             7653 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             7654 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             7655 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             7656 ; 128  |
                             7657 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             7658 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             7659 ; 131  |
                             7660 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTIVE_BITPOS)
                             7661 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_INACTIVE_BITPOS)
                             7662 ; 134  |
                             7663 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             7664 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             7665 ; 137  |
                             7666 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             7667 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             7668 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             7669 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             7670 ; 142  |
                             7671 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             7672 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             7673 ; 145  |
                             7674 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTIVE_BITPOS)
                             7675 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_INACTIVE_BITPOS)
                             7676 ; 148  |
                             7677 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             7678 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             7679 ; 151  |
                             7680 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             7681 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             7682 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             7683 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             7684 ; 156  |
                             7685 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             7686 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             7687 ; 159  |
                             7688 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTIVE_BITPOS)
                             7689 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_INACTIVE_BITPOS)
                             7690 ; 162  |
                             7691 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             7692 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             7693 ; 165  |
                             7694 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             7695 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             7696 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                             7697 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             7698 ; 170  |
                             7699 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             7700 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             7701 ; 173  |
                             7702 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTIVE_BITPOS)
                             7703 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_INACTIVE_BITPOS)
                             7704 ; 176  |
                             7705 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             7706 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             7707 ; 179  |
                             7708 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             7709 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             7710 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             7711 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             7712 ; 184  |
                             7713 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             7714 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             7715 ; 187  |
                             7716 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTIVE_BITPOS)
                             7717 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_INACTIVE_BITPOS)
                             7718 ; 190  |
                             7719 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             7720 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             7721 ; 193  |
                             7722 ; 194  |typedef union               
                             7723 ; 195  |{
                             7724 ; 196  |    struct {
                             7725 ; 197  |       int ACTIVE                    :12;
                             7726 ; 198  |       int INACTIVE                  :12;
                             7727 ; 199  |    } B;
                             7728 ; 200  |    int I;
                             7729 ; 201  |} pwmchan_type;
                             7730 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Channel 0 A Register */
                             7731 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Channel 0 B Register */
                             7732 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Channel 1 A Register */
                             7733 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Channel 1 B Register */
                             7734 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Channel 2 A Register */
                             7735 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Channel 2 B Register */
                             7736 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Channel 3 A Register */
                             7737 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Channel 3 B Register */
                             7738 ; 210  |
                             7739 ; 211  |#endif
                             7740 ; 212  |
                             7741 ; 213  |
                             7742 ; 214  |
                             7743 ; 215  |
                             7744 
                             7746 
                             7747 ; 28   |#include "regsrevision.h"
                             7748 
                             7750 
                             7751 ; 1    |#if !(defined(__HW_REVR))
                             7752 ; 2    |#define __HW_REVR 1
                             7753 ; 3    |
                             7754 ; 4    |
                             7755 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             7756 ; 6    |
                             7757 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             7758 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             7759 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             7760 ; 10   |
                             7761 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             7762 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             7763 ; 13   |
                             7764 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS)
                             7765 ; 15   |
                             7766 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             7767 ; 17   |
                             7768 ; 18   |
                             7769 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             7770 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             7771 ; 21   |//  June15 2004: C struct updated to be correct: 
                             7772 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits.
                             7773 ; 23   |typedef union               
                             7774 ; 24   |{
                             7775 ; 25   |    struct {
                             7776 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             7777 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapping
                             7778 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             7779 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             7780 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             7781 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             7782 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             7783 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             7784 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             7785 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             7786 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             7787 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             7788 ; 38   |    } B;
                             7789 ; 39   |
                             7790 ; 40   |    int I;
                             7791 ; 41   |
                             7792 ; 42   |} revr_type;
                             7793 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             7794 ; 44   |
                             7795 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             7796 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             7797 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             7798 ; 48   |
                             7799 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             7800 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE_B0_BITPOS)
                             7801 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             7802 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             7803 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             7804 ; 54   |
                             7805 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             7806 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             7807 ; 57   |
                             7808 ; 58   |#endif //!@def(__HW_REVR)
                             7809 ; 59   |
                             7810 
                             7812 
                             7813 ; 29   |#include "regsrtc.h"
                             7814 
                             7816 
                             7817 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7818 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7819 ; 3    |// Filename: regsrtc.inc
                             7820 ; 4    |// Description: Register definitions for RTC interface
                             7821 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7822 ; 6    |// The following naming conventions are followed in this file.
                             7823 ; 7    |// All registers are named using the format...
                             7824 ; 8    |//     HW_<module>_<regname>
                             7825 ; 9    |// where <module> is the module name which can be any of the following...
                             7826 ; 10   |//     USB20
                             7827 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7828 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7829 ; 13   |// that module)
                             7830 ; 14   |// <regname> is the specific register within that module
                             7831 ; 15   |// We also define the following...
                             7832 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7833 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7834 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7835 ; 19   |// which does something else, and
                             7836 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7837 ; 21   |// which does something else.
                             7838 ; 22   |// Other rules
                             7839 ; 23   |//     All caps
                             7840 ; 24   |//     Numeric identifiers start at 0
                             7841 ; 25   |#if !(defined(regsrtcinc))
                             7842 ; 26   |#define regsrtcinc 1
                             7843 ; 27   |
                             7844 ; 28   |#include "types.h"
                             7845 
                             7847 
                             7848 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7849 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7850 ; 3    |//
                             7851 ; 4    |// Filename: types.h
                             7852 ; 5    |// Description: Standard data types
                             7853 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7854 ; 7    |
                             7855 ; 8    |#ifndef _TYPES_H
                             7856 ; 9    |#define _TYPES_H
                             7857 ; 10   |
                             7858 ; 11   |// TODO:  move this outta here!
                             7859 ; 12   |#if !defined(NOERROR)
                             7860 ; 13   |#define NOERROR 0
                             7861 ; 14   |#define SUCCESS 0
                             7862 ; 15   |#endif 
                             7863 ; 16   |#if !defined(SUCCESS)
                             7864 ; 17   |#define SUCCESS  0
                             7865 ; 18   |#endif
                             7866 ; 19   |#if !defined(ERROR)
                             7867 ; 20   |#define ERROR   -1
                             7868 ; 21   |#endif
                             7869 ; 22   |#if !defined(FALSE)
                             7870 ; 23   |#define FALSE 0
                             7871 ; 24   |#endif
                             7872 ; 25   |#if !defined(TRUE)
                             7873 ; 26   |#define TRUE  1
                             7874 ; 27   |#endif
                             7875 ; 28   |
                             7876 ; 29   |#if !defined(NULL)
                             7877 ; 30   |#define NULL 0
                             7878 ; 31   |#endif
                             7879 ; 32   |
                             7880 ; 33   |#define MAX_INT     0x7FFFFF
                             7881 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7882 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7883 ; 36   |#define MAX_ULONG   (-1) 
                             7884 ; 37   |
                             7885 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7886 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7887 ; 40   |
                             7888 ; 41   |
                             7889 ; 42   |#define BYTE    unsigned char       // btVarName
                             7890 ; 43   |#define CHAR    signed char         // cVarName
                             7891 ; 44   |#define USHORT  unsigned short      // usVarName
                             7892 ; 45   |#define SHORT   unsigned short      // sVarName
                             7893 ; 46   |#define WORD    unsigned int        // wVarName
                             7894 ; 47   |#define INT     signed int          // iVarName
                             7895 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7896 ; 49   |#define LONG    signed long         // lVarName
                             7897 ; 50   |#define BOOL    unsigned int        // bVarName
                             7898 ; 51   |#define FRACT   _fract              // frVarName
                             7899 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7900 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7901 ; 54   |#define FLOAT   float               // fVarName
                             7902 ; 55   |#define DBL     double              // dVarName
                             7903 ; 56   |#define ENUM    enum                // eVarName
                             7904 ; 57   |#define CMX     _complex            // cmxVarName
                             7905 ; 58   |typedef WORD UCS3;                   // 
                             7906 ; 59   |
                             7907 ; 60   |#define UINT16  unsigned short
                             7908 ; 61   |#define UINT8   unsigned char   
                             7909 ; 62   |#define UINT32  unsigned long
                             7910 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7911 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             7912 ; 65   |#define WCHAR   UINT16
                             7913 ; 66   |
                             7914 ; 67   |//UINT128 is 16 bytes or 6 words
                             7915 ; 68   |typedef struct UINT128_3500 {   
                             7916 ; 69   |    int val[6];     
                             7917 ; 70   |} UINT128_3500;
                             7918 ; 71   |
                             7919 ; 72   |#define UINT128   UINT128_3500
                             7920 ; 73   |
                             7921 ; 74   |// Little endian word packed byte strings:   
                             7922 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7923 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7924 ; 77   |// Little endian word packed byte strings:   
                             7925 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7926 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7927 ; 80   |
                             7928 ; 81   |// Declare Memory Spaces To Use When Coding
                             7929 ; 82   |// A. Sector Buffers
                             7930 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7931 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7932 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7933 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7934 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7935 ; 88   |// B. Media DDI Memory
                             7936 ; 89   |#define MEDIA_DDI_MEM _Y
                             7937 ; 90   |
                             7938 ; 91   |
                             7939 ; 92   |
                             7940 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7941 ; 94   |// Examples of circular pointers:
                             7942 ; 95   |//    INT CIRC cpiVarName
                             7943 ; 96   |//    DWORD CIRC cpdwVarName
                             7944 ; 97   |
                             7945 ; 98   |#define RETCODE INT                 // rcVarName
                             7946 ; 99   |
                             7947 ; 100  |// generic bitfield structure
                             7948 ; 101  |struct Bitfield {
                             7949 ; 102  |    unsigned int B0  :1;
                             7950 ; 103  |    unsigned int B1  :1;
                             7951 ; 104  |    unsigned int B2  :1;
                             7952 ; 105  |    unsigned int B3  :1;
                             7953 ; 106  |    unsigned int B4  :1;
                             7954 ; 107  |    unsigned int B5  :1;
                             7955 ; 108  |    unsigned int B6  :1;
                             7956 ; 109  |    unsigned int B7  :1;
                             7957 ; 110  |    unsigned int B8  :1;
                             7958 ; 111  |    unsigned int B9  :1;
                             7959 ; 112  |    unsigned int B10 :1;
                             7960 ; 113  |    unsigned int B11 :1;
                             7961 ; 114  |    unsigned int B12 :1;
                             7962 ; 115  |    unsigned int B13 :1;
                             7963 ; 116  |    unsigned int B14 :1;
                             7964 ; 117  |    unsigned int B15 :1;
                             7965 ; 118  |    unsigned int B16 :1;
                             7966 ; 119  |    unsigned int B17 :1;
                             7967 ; 120  |    unsigned int B18 :1;
                             7968 ; 121  |    unsigned int B19 :1;
                             7969 ; 122  |    unsigned int B20 :1;
                             7970 ; 123  |    unsigned int B21 :1;
                             7971 ; 124  |    unsigned int B22 :1;
                             7972 ; 125  |    unsigned int B23 :1;
                             7973 ; 126  |};
                             7974 ; 127  |
                             7975 ; 128  |union BitInt {
                             7976 ; 129  |        struct Bitfield B;
                             7977 ; 130  |        int        I;
                             7978 ; 131  |};
                             7979 ; 132  |
                             7980 ; 133  |#define MAX_MSG_LENGTH 10
                             7981 ; 134  |struct CMessage
                             7982 ; 135  |{
                             7983 ; 136  |        unsigned int m_uLength;
                             7984 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7985 ; 138  |};
                             7986 ; 139  |
                             7987 ; 140  |typedef struct {
                             7988 ; 141  |    WORD m_wLength;
                             7989 ; 142  |    WORD m_wMessage;
                             7990 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7991 ; 144  |} Message;
                             7992 ; 145  |
                             7993 ; 146  |struct MessageQueueDescriptor
                             7994 ; 147  |{
                             7995 ; 148  |        int *m_pBase;
                             7996 ; 149  |        int m_iModulo;
                             7997 ; 150  |        int m_iSize;
                             7998 ; 151  |        int *m_pHead;
                             7999 ; 152  |        int *m_pTail;
                             8000 ; 153  |};
                             8001 ; 154  |
                             8002 ; 155  |struct ModuleEntry
                             8003 ; 156  |{
                             8004 ; 157  |    int m_iSignaledEventMask;
                             8005 ; 158  |    int m_iWaitEventMask;
                             8006 ; 159  |    int m_iResourceOfCode;
                             8007 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8008 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8009 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8010 ; 163  |    int m_uTimeOutHigh;
                             8011 ; 164  |    int m_uTimeOutLow;
                             8012 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8013 ; 166  |};
                             8014 ; 167  |
                             8015 ; 168  |union WaitMask{
                             8016 ; 169  |    struct B{
                             8017 ; 170  |        unsigned int m_bNone     :1;
                             8018 ; 171  |        unsigned int m_bMessage  :1;
                             8019 ; 172  |        unsigned int m_bTimer    :1;
                             8020 ; 173  |        unsigned int m_bButton   :1;
                             8021 ; 174  |    } B;
                             8022 ; 175  |    int I;
                             8023 ; 176  |} ;
                             8024 ; 177  |
                             8025 ; 178  |
                             8026 ; 179  |struct Button {
                             8027 ; 180  |        WORD wButtonEvent;
                             8028 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8029 ; 182  |};
                             8030 ; 183  |
                             8031 ; 184  |struct Message {
                             8032 ; 185  |        WORD wMsgLength;
                             8033 ; 186  |        WORD wMsgCommand;
                             8034 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8035 ; 188  |};
                             8036 ; 189  |
                             8037 ; 190  |union EventTypes {
                             8038 ; 191  |        struct CMessage msg;
                             8039 ; 192  |        struct Button Button ;
                             8040 ; 193  |        struct Message Message;
                             8041 ; 194  |};
                             8042 ; 195  |
                             8043 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8044 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8045 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8046 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8047 ; 200  |
                             8048 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8049 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8050 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8051 ; 204  |
                             8052 ; 205  |#if DEBUG
                             8053 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8054 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8055 ; 208  |#else 
                             8056 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8057 ; 210  |#define DebugBuildAssert(x)    
                             8058 ; 211  |#endif
                             8059 ; 212  |
                             8060 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8061 ; 214  |//  #pragma asm
                             8062 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8063 ; 216  |//  #pragma endasm
                             8064 ; 217  |
                             8065 ; 218  |
                             8066 ; 219  |#ifdef COLOR_262K
                             8067 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8068 ; 221  |#elif defined(COLOR_65K)
                             8069 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8070 ; 223  |#else
                             8071 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8072 ; 225  |#endif
                             8073 ; 226  |    
                             8074 ; 227  |#endif // #ifndef _TYPES_H
                             8075 
                             8077 
                             8078 ; 29   |
                             8079 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8080 ; 31   |
                             8081 ; 32   |//   RTC STMP Registers 
                             8082 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             8083 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8084 ; 35   |
                             8085 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             8086 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8087 ; 38   |
                             8088 ; 39   |
                             8089 ; 40   |
                             8090 ; 41   |
                             8091 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             8092 ; 43   |
                             8093 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             8094 ; 45   |
                             8095 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             8096 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             8097 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             8098 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             8099 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             8100 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             8101 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             8102 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             8103 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             8104 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             8105 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             8106 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             8107 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             8108 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             8109 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             8110 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                                           
                             8111 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             8112 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             8113 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             8114 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             8115 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             8116 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             8117 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             8118 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             8119 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             8120 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             8121 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             8122 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             8123 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             8124 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             8125 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             8126 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             8127 ; 78   |
                             8128 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMINT_BITPOS) 
                             8129 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_ALARMINTEN_BITPOS) 
                             8130 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WATCHDOGEN_BITPOS) 
                             8131 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS) 
                             8132 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STALEREGS_BITPOS) 
                             8133 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS) 
                             8134 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_BITPOS) 
                             8135 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             8136 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             8137 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             8138 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             8139 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             8140 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS) 
                             8141 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS) 
                             8142 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS) 
                             8143 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BITPOS) 
                             8144 ; 95   |
                             8145 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             8146 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             8147 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             8148 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             8149 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             8150 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             8151 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             8152 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             8153 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             8154 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                             8155 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             8156 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             8157 ; 108  |
                             8158 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             8159 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             8160 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             8161 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             8162 ; 113  |
                             8163 ; 114  |
                             8164 ; 115  |typedef union               
                             8165 ; 116  |{
                             8166 ; 117  |    struct {
                             8167 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             8168 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             8169 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             8170 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             8171 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             8172 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             8173 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             8174 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             8175 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             8176 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             8177 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             8178 ; 129  |    } B;
                             8179 ; 130  |    int I;
                             8180 ; 131  |    unsigned int U;
                             8181 ; 132  |} rtc_csr_type;
                             8182 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Control / Status Register */
                             8183 ; 134  |
                             8184 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             8185 ; 136  |
                             8186 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             8187 ; 138  |
                             8188 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             8189 ; 140  |
                             8190 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             8191 ; 142  |
                             8192 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<<HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             8193 ; 144  |
                             8194 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                             8195 ; 146  |
                             8196 ; 147  |typedef union               
                             8197 ; 148  |{
                             8198 ; 149  |    struct {
                             8199 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             8200 ; 151  |    } B;
                             8201 ; 152  |    int I;
                             8202 ; 153  |    unsigned int U;
                             8203 ; 154  |} rtc_mseconds0_type;
                             8204 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    /* RTC MSECONDS Lower Word Register */
                             8205 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             8206 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             8207 ; 158  |
                             8208 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             8209 ; 160  |
                             8210 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             8211 ; 162  |
                             8212 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             8213 ; 164  |
                             8214 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1)<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             8215 ; 166  |
                             8216 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK)
                             8217 ; 168  |
                             8218 ; 169  |typedef union               
                             8219 ; 170  |{
                             8220 ; 171  |    struct {
                             8221 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             8222 ; 173  |    } B;
                             8223 ; 174  |    int I;
                             8224 ; 175  |    unsigned int U;
                             8225 ; 176  |} rtc_mseconds1_type;
                             8226 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    /* RTC MSECONDS Upper Word Register */
                             8227 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             8228 ; 179  |
                             8229 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             8230 ; 181  |#define HW_RTC_UP_OFFSET 2
                             8231 ; 182  |
                             8232 ; 183  |
                             8233 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             8234 ; 185  |
                             8235 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             8236 ; 187  |
                             8237 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             8238 ; 189  |
                             8239 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             8240 ; 191  |
                             8241 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             8242 ; 193  |
                             8243 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             8244 ; 195  |
                             8245 ; 196  |typedef union               
                             8246 ; 197  |{
                             8247 ; 198  |    struct {
                             8248 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             8249 ; 200  |    } B;
                             8250 ; 201  |    int I;
                             8251 ; 202  |    unsigned int U;
                             8252 ; 203  |} rtc_watchdog_type;
                             8253 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* RTC Watchdog Timeout Register */
                             8254 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             8255 ; 206  |
                             8256 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             8257 ; 208  |
                             8258 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             8259 ; 210  |
                             8260 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             8261 ; 212  |
                             8262 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALARM0_ALARMLOW_BITPOS) 
                             8263 ; 214  |
                             8264 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             8265 ; 216  |
                             8266 ; 217  |typedef union               
                             8267 ; 218  |{
                             8268 ; 219  |    struct {
                             8269 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             8270 ; 221  |    } B;
                             8271 ; 222  |    int I;
                             8272 ; 223  |    unsigned int U;
                             8273 ; 224  |} rtc_alarm0_type;
                             8274 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC ALARM Lower Word Register */
                             8275 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             8276 ; 227  |
                             8277 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             8278 ; 229  |
                             8279 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             8280 ; 231  |
                             8281 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             8282 ; 233  |
                             8283 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_ALARM1_ALARMHIGH_BITPOS) 
                             8284 ; 235  |
                             8285 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             8286 ; 237  |
                             8287 ; 238  |typedef union               
                             8288 ; 239  |{
                             8289 ; 240  |    struct {
                             8290 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             8291 ; 242  |    } B;
                             8292 ; 243  |    int I;
                             8293 ; 244  |    unsigned int U;
                             8294 ; 245  |} rtc_alarm1_type;
                             8295 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC ALARM Upper Word Register */
                             8296 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             8297 ; 248  |
                             8298 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             8299 ; 250  |
                             8300 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             8301 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             8302 ; 253  |
                             8303 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             8304 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             8305 ; 256  |
                             8306 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             8307 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS) 
                             8308 ; 259  |
                             8309 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             8310 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             8311 ; 262  |
                             8312 ; 263  |typedef union               
                             8313 ; 264  |{
                             8314 ; 265  |    struct {
                             8315 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             8316 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             8317 ; 268  |    } B;
                             8318 ; 269  |    int I;
                             8319 ; 270  |    unsigned int U;
                             8320 ; 271  |} rtc_xtaldivide_type;
                             8321 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* RTC Xtal-clock Pre-Divider Word Register */
                             8322 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             8323 ; 274  |
                             8324 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             8325 ; 276  |
                             8326 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             8327 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             8328 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             8329 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             8330 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             8331 ; 282  |
                             8332 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             8333 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             8334 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             8335 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             8336 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             8337 ; 288  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8338 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             8339 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             8340 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             8341 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<<HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             8342 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT0_RSVD0_BITPOS) 
                             8343 ; 294  |
                             8344 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             8345 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK)
                             8346 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                             8347 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                             8348 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             8349 ; 300  |
                             8350 ; 301  |typedef union               
                             8351 ; 302  |{
                             8352 ; 303  |   struct {
                             8353 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             8354 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             8355 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             8356 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             8357 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             8358 ; 309  |   } B;
                             8359 ; 310  |    int I;
                             8360 ; 311  |    unsigned int U;
                             8361 ; 312  |} rtc_PERSISTENT0_type;
                             8362 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /* RTC PERSISTENT Register0 */
                             8363 ; 314  |
                             8364 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             8365 ; 316  |
                             8366 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             8367 ; 318  |
                             8368 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             8369 ; 320  |
                             8370 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             8371 ; 322  |
                             8372 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_PERSISTENT1_RSVD0_BITPOS) 
                             8373 ; 324  |
                             8374 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             8375 ; 326  |
                             8376 ; 327  |
                             8377 ; 328  |typedef union               
                             8378 ; 329  |{
                             8379 ; 330  |    struct {
                             8380 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             8381 ; 332  |    } B;
                             8382 ; 333  |    int I;
                             8383 ; 334  |    unsigned int U;
                             8384 ; 335  |} rtc_PERSISTENT1_type;
                             8385 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /* RTC PERSISTENT Register1 */
                             8386 ; 337  |
                             8387 ; 338  |
                             8388 ; 339  |#endif
                             8389 ; 340  |
                             8390 ; 341  |
                             8391 ; 342  |
                             8392 ; 343  |
                             8393 ; 344  |
                             8394 ; 345  |
                             8395 ; 346  |
                             8396 ; 347  |
                             8397 ; 348  |
                             8398 ; 349  |
                             8399 ; 350  |
                             8400 ; 351  |
                             8401 ; 352  |
                             8402 ; 353  |
                             8403 
                             8405 
                             8406 ; 30   |#include "regsspare.h"
                             8407 
                             8409 
                             8410 ; 1    |#if !(defined(RESGSSPARE_INC))
                             8411 ; 2    |#define RESGSSPARE_INC 1
                             8412 ; 3    |
                             8413 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             8414 ; 5    |
                             8415 ; 6    |
                             8416 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             8417 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             8418 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             8419 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             8420 ; 11   |
                             8421 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             8422 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             8423 ; 14   |
                             8424 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             8425 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             8426 ; 17   |
                             8427 ; 18   |
                             8428 ; 19   |
                             8429 ; 20   |typedef union               
                             8430 ; 21   |{
                             8431 ; 22   |    struct {
                             8432 ; 23   |        int      I2SS       :1;     
                             8433 ; 24   |        int      USBSELECT  :1;     
                             8434 ; 25   |        unsigned            :6;
                             8435 ; 26   |        int      USBPLUGIN  :1;     
                             8436 ; 27   |        int      PSWITCH    :1;     
                             8437 ; 28   |    } B;
                             8438 ; 29   |
                             8439 ; 30   |    int I;
                             8440 ; 31   |
                             8441 ; 32   |} spare_type;
                             8442 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                             8443 ; 34   |
                             8444 ; 35   |
                             8445 ; 36   |
                             8446 ; 37   |#endif
                             8447 
                             8449 
                             8450 ; 31   |#include "regsspi.h"
                             8451 
                             8453 
                             8454 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8455 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8456 ; 3    |//;; Filename    : regsspi.inc
                             8457 ; 4    |//;; Description : Register definitions for SPI interface
                             8458 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8459 ; 6    |
                             8460 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8461 ; 8    |// The following naming conventions are followed in this file.
                             8462 ; 9    |// All registers are named using the format...
                             8463 ; 10   |//     HW_<module>_<regname>
                             8464 ; 11   |// where <module> is the module name which can be any of the following...
                             8465 ; 12   |//     USB20
                             8466 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8467 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8468 ; 15   |// that module)
                             8469 ; 16   |// <regname> is the specific register within that module
                             8470 ; 17   |// We also define the following...
                             8471 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8472 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8473 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8474 ; 21   |// which does something else, and
                             8475 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8476 ; 23   |// which does something else.
                             8477 ; 24   |// Other rules
                             8478 ; 25   |//     All caps
                             8479 ; 26   |//     Numeric identifiers start at 0
                             8480 ; 27   |#if !(defined(regsspiinc))
                             8481 ; 28   |#define regsspiinc 1
                             8482 ; 29   |
                             8483 ; 30   |#include "types.h"
                             8484 
                             8486 
                             8487 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8488 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8489 ; 3    |//
                             8490 ; 4    |// Filename: types.h
                             8491 ; 5    |// Description: Standard data types
                             8492 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8493 ; 7    |
                             8494 ; 8    |#ifndef _TYPES_H
                             8495 ; 9    |#define _TYPES_H
                             8496 ; 10   |
                             8497 ; 11   |// TODO:  move this outta here!
                             8498 ; 12   |#if !defined(NOERROR)
                             8499 ; 13   |#define NOERROR 0
                             8500 ; 14   |#define SUCCESS 0
                             8501 ; 15   |#endif 
                             8502 ; 16   |#if !defined(SUCCESS)
                             8503 ; 17   |#define SUCCESS  0
                             8504 ; 18   |#endif
                             8505 ; 19   |#if !defined(ERROR)
                             8506 ; 20   |#define ERROR   -1
                             8507 ; 21   |#endif
                             8508 ; 22   |#if !defined(FALSE)
                             8509 ; 23   |#define FALSE 0
                             8510 ; 24   |#endif
                             8511 ; 25   |#if !defined(TRUE)
                             8512 ; 26   |#define TRUE  1
                             8513 ; 27   |#endif
                             8514 ; 28   |
                             8515 ; 29   |#if !defined(NULL)
                             8516 ; 30   |#define NULL 0
                             8517 ; 31   |#endif
                             8518 ; 32   |
                             8519 ; 33   |#define MAX_INT     0x7FFFFF
                             8520 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8521 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8522 ; 36   |#define MAX_ULONG   (-1) 
                             8523 ; 37   |
                             8524 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8525 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8526 ; 40   |
                             8527 ; 41   |
                             8528 ; 42   |#define BYTE    unsigned char       // btVarName
                             8529 ; 43   |#define CHAR    signed char         // cVarName
                             8530 ; 44   |#define USHORT  unsigned short      // usVarName
                             8531 ; 45   |#define SHORT   unsigned short      // sVarName
                             8532 ; 46   |#define WORD    unsigned int        // wVarName
                             8533 ; 47   |#define INT     signed int          // iVarName
                             8534 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8535 ; 49   |#define LONG    signed long         // lVarName
                             8536 ; 50   |#define BOOL    unsigned int        // bVarName
                             8537 ; 51   |#define FRACT   _fract              // frVarName
                             8538 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8539 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8540 ; 54   |#define FLOAT   float               // fVarName
                             8541 ; 55   |#define DBL     double              // dVarName
                             8542 ; 56   |#define ENUM    enum                // eVarName
                             8543 ; 57   |#define CMX     _complex            // cmxVarName
                             8544 ; 58   |typedef WORD UCS3;                   // 
                             8545 ; 59   |
                             8546 ; 60   |#define UINT16  unsigned short
                             8547 ; 61   |#define UINT8   unsigned char   
                             8548 ; 62   |#define UINT32  unsigned long
                             8549 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8550 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8551 ; 65   |#define WCHAR   UINT16
                             8552 ; 66   |
                             8553 ; 67   |//UINT128 is 16 bytes or 6 words
                             8554 ; 68   |typedef struct UINT128_3500 {   
                             8555 ; 69   |    int val[6];     
                             8556 ; 70   |} UINT128_3500;
                             8557 ; 71   |
                             8558 ; 72   |#define UINT128   UINT128_3500
                             8559 ; 73   |
                             8560 ; 74   |// Little endian word packed byte strings:   
                             8561 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8562 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8563 ; 77   |// Little endian word packed byte strings:   
                             8564 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8565 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8566 ; 80   |
                             8567 ; 81   |// Declare Memory Spaces To Use When Coding
                             8568 ; 82   |// A. Sector Buffers
                             8569 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8570 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8571 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8572 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8573 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8574 ; 88   |// B. Media DDI Memory
                             8575 ; 89   |#define MEDIA_DDI_MEM _Y
                             8576 ; 90   |
                             8577 ; 91   |
                             8578 ; 92   |
                             8579 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8580 ; 94   |// Examples of circular pointers:
                             8581 ; 95   |//    INT CIRC cpiVarName
                             8582 ; 96   |//    DWORD CIRC cpdwVarName
                             8583 ; 97   |
                             8584 ; 98   |#define RETCODE INT                 // rcVarName
                             8585 ; 99   |
                             8586 ; 100  |// generic bitfield structure
                             8587 ; 101  |struct Bitfield {
                             8588 ; 102  |    unsigned int B0  :1;
                             8589 ; 103  |    unsigned int B1  :1;
                             8590 ; 104  |    unsigned int B2  :1;
                             8591 ; 105  |    unsigned int B3  :1;
                             8592 ; 106  |    unsigned int B4  :1;
                             8593 ; 107  |    unsigned int B5  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8594 ; 108  |    unsigned int B6  :1;
                             8595 ; 109  |    unsigned int B7  :1;
                             8596 ; 110  |    unsigned int B8  :1;
                             8597 ; 111  |    unsigned int B9  :1;
                             8598 ; 112  |    unsigned int B10 :1;
                             8599 ; 113  |    unsigned int B11 :1;
                             8600 ; 114  |    unsigned int B12 :1;
                             8601 ; 115  |    unsigned int B13 :1;
                             8602 ; 116  |    unsigned int B14 :1;
                             8603 ; 117  |    unsigned int B15 :1;
                             8604 ; 118  |    unsigned int B16 :1;
                             8605 ; 119  |    unsigned int B17 :1;
                             8606 ; 120  |    unsigned int B18 :1;
                             8607 ; 121  |    unsigned int B19 :1;
                             8608 ; 122  |    unsigned int B20 :1;
                             8609 ; 123  |    unsigned int B21 :1;
                             8610 ; 124  |    unsigned int B22 :1;
                             8611 ; 125  |    unsigned int B23 :1;
                             8612 ; 126  |};
                             8613 ; 127  |
                             8614 ; 128  |union BitInt {
                             8615 ; 129  |        struct Bitfield B;
                             8616 ; 130  |        int        I;
                             8617 ; 131  |};
                             8618 ; 132  |
                             8619 ; 133  |#define MAX_MSG_LENGTH 10
                             8620 ; 134  |struct CMessage
                             8621 ; 135  |{
                             8622 ; 136  |        unsigned int m_uLength;
                             8623 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8624 ; 138  |};
                             8625 ; 139  |
                             8626 ; 140  |typedef struct {
                             8627 ; 141  |    WORD m_wLength;
                             8628 ; 142  |    WORD m_wMessage;
                             8629 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8630 ; 144  |} Message;
                             8631 ; 145  |
                             8632 ; 146  |struct MessageQueueDescriptor
                             8633 ; 147  |{
                             8634 ; 148  |        int *m_pBase;
                             8635 ; 149  |        int m_iModulo;
                             8636 ; 150  |        int m_iSize;
                             8637 ; 151  |        int *m_pHead;
                             8638 ; 152  |        int *m_pTail;
                             8639 ; 153  |};
                             8640 ; 154  |
                             8641 ; 155  |struct ModuleEntry
                             8642 ; 156  |{
                             8643 ; 157  |    int m_iSignaledEventMask;
                             8644 ; 158  |    int m_iWaitEventMask;
                             8645 ; 159  |    int m_iResourceOfCode;
                             8646 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8647 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             8648 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8649 ; 163  |    int m_uTimeOutHigh;
                             8650 ; 164  |    int m_uTimeOutLow;
                             8651 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8652 ; 166  |};
                             8653 ; 167  |
                             8654 ; 168  |union WaitMask{
                             8655 ; 169  |    struct B{
                             8656 ; 170  |        unsigned int m_bNone     :1;
                             8657 ; 171  |        unsigned int m_bMessage  :1;
                             8658 ; 172  |        unsigned int m_bTimer    :1;
                             8659 ; 173  |        unsigned int m_bButton   :1;
                             8660 ; 174  |    } B;
                             8661 ; 175  |    int I;
                             8662 ; 176  |} ;
                             8663 ; 177  |
                             8664 ; 178  |
                             8665 ; 179  |struct Button {
                             8666 ; 180  |        WORD wButtonEvent;
                             8667 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8668 ; 182  |};
                             8669 ; 183  |
                             8670 ; 184  |struct Message {
                             8671 ; 185  |        WORD wMsgLength;
                             8672 ; 186  |        WORD wMsgCommand;
                             8673 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8674 ; 188  |};
                             8675 ; 189  |
                             8676 ; 190  |union EventTypes {
                             8677 ; 191  |        struct CMessage msg;
                             8678 ; 192  |        struct Button Button ;
                             8679 ; 193  |        struct Message Message;
                             8680 ; 194  |};
                             8681 ; 195  |
                             8682 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8683 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8684 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8685 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8686 ; 200  |
                             8687 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8688 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8689 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8690 ; 204  |
                             8691 ; 205  |#if DEBUG
                             8692 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8693 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8694 ; 208  |#else 
                             8695 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             8696 ; 210  |#define DebugBuildAssert(x)    
                             8697 ; 211  |#endif
                             8698 ; 212  |
                             8699 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8700 ; 214  |//  #pragma asm
                             8701 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8702 ; 216  |//  #pragma endasm
                             8703 ; 217  |
                             8704 ; 218  |
                             8705 ; 219  |#ifdef COLOR_262K
                             8706 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             8707 ; 221  |#elif defined(COLOR_65K)
                             8708 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             8709 ; 223  |#else
                             8710 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             8711 ; 225  |#endif
                             8712 ; 226  |    
                             8713 ; 227  |#endif // #ifndef _TYPES_H
                             8714 
                             8716 
                             8717 ; 31   |
                             8718 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8719 ; 33   |
                             8720 ; 34   |//   SPI STMP3500 Registers 
                             8721 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             8722 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8723 ; 37   |
                             8724 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             8725 ; 39   |
                             8726 ; 40   |
                             8727 ; 41   |
                             8728 ; 42   |// /////////////////////////////////////////////
                             8729 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             8730 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             8731 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             8732 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             8733 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             8734 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             8735 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             8736 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             8737 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             8738 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             8739 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             8740 ; 54   |
                             8741 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             8742 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             8743 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             8744 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             8745 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             8746 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             8747 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             8748 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             8749 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                             8750 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             8751 ; 65   |
                             8752 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             8753 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             8754 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             8755 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             8756 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             8757 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             8758 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             8759 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             8760 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             8761 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             8762 ; 76   |
                             8763 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             8764 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             8765 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             8766 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             8767 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             8768 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             8769 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             8770 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             8771 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             8772 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             8773 ; 87   |
                             8774 ; 88   |typedef union               
                             8775 ; 89   |{
                             8776 ; 90   |    struct {
                             8777 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             8778 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             8779 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             8780 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             8781 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             8782 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             8783 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             8784 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             8785 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             8786 ; 100  |    } B;
                             8787 ; 101  |
                             8788 ; 102  |    int I;
                             8789 ; 103  |    unsigned int U;
                             8790 ; 104  |} spcsr_type;
                             8791 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / Status Register */
                             8792 ; 106  |
                             8793 ; 107  |// /////////////////////////////////////////////
                             8794 ; 108  |// //  SPI Data Register Bit Definitions
                             8795 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             8796 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             8797 ; 111  |
                             8798 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             8799 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             8800 ; 114  |
                             8801 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             8802 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             8803 ; 117  |
                             8804 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             8805 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             8806 ; 120  |
                             8807 ; 121  |typedef union               
                             8808 ; 122  |{
                             8809 ; 123  |    struct {
                             8810 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                             8811 ; 125  |    } B;
                             8812 ; 126  |
                             8813 ; 127  |    int I;
                             8814 ; 128  |    unsigned int U;
                             8815 ; 129  |} spdr_type;
                             8816 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Register */
                             8817 ; 131  |
                             8818 ; 132  |
                             8819 ; 133  |#endif
                             8820 ; 134  |
                             8821 ; 135  |
                             8822 
                             8824 
                             8825 ; 32   |#include "regsswizzle.h"
                             8826 
                             8828 
                             8829 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8830 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8831 ; 3    |//;; Filename    : regsswizzle.inc
                             8832 ; 4    |//;; Description : Register definitions for Swizzle interface
                             8833 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8834 ; 6    |
                             8835 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8836 ; 8    |// The following naming conventions are followed in this file.
                             8837 ; 9    |// All registers are named using the format...
                             8838 ; 10   |//     HW_<module>_<regname>
                             8839 ; 11   |// where <module> is the module name which can be any of the following...
                             8840 ; 12   |//     USB20
                             8841 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8842 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8843 ; 15   |// that module)
                             8844 ; 16   |// <regname> is the specific register within that module
                             8845 ; 17   |// We also define the following...
                             8846 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8847 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8848 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8849 ; 21   |// which does something else, and
                             8850 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8851 ; 23   |// which does something else.
                             8852 ; 24   |// Other rules
                             8853 ; 25   |//     All caps
                             8854 ; 26   |//     Numeric identifiers start at 0
                             8855 ; 27   |#if !(defined(regsswizzleinc))
                             8856 ; 28   |#define regsswizzleinc 1
                             8857 ; 29   |
                             8858 ; 30   |#include "types.h"
                             8859 
                             8861 
                             8862 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8863 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8864 ; 3    |//
                             8865 ; 4    |// Filename: types.h
                             8866 ; 5    |// Description: Standard data types
                             8867 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8868 ; 7    |
                             8869 ; 8    |#ifndef _TYPES_H
                             8870 ; 9    |#define _TYPES_H
                             8871 ; 10   |
                             8872 ; 11   |// TODO:  move this outta here!
                             8873 ; 12   |#if !defined(NOERROR)
                             8874 ; 13   |#define NOERROR 0
                             8875 ; 14   |#define SUCCESS 0
                             8876 ; 15   |#endif 
                             8877 ; 16   |#if !defined(SUCCESS)
                             8878 ; 17   |#define SUCCESS  0
                             8879 ; 18   |#endif
                             8880 ; 19   |#if !defined(ERROR)
                             8881 ; 20   |#define ERROR   -1
                             8882 ; 21   |#endif
                             8883 ; 22   |#if !defined(FALSE)
                             8884 ; 23   |#define FALSE 0
                             8885 ; 24   |#endif
                             8886 ; 25   |#if !defined(TRUE)
                             8887 ; 26   |#define TRUE  1
                             8888 ; 27   |#endif
                             8889 ; 28   |
                             8890 ; 29   |#if !defined(NULL)
                             8891 ; 30   |#define NULL 0
                             8892 ; 31   |#endif
                             8893 ; 32   |
                             8894 ; 33   |#define MAX_INT     0x7FFFFF
                             8895 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8896 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8897 ; 36   |#define MAX_ULONG   (-1) 
                             8898 ; 37   |
                             8899 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8900 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8901 ; 40   |
                             8902 ; 41   |
                             8903 ; 42   |#define BYTE    unsigned char       // btVarName
                             8904 ; 43   |#define CHAR    signed char         // cVarName
                             8905 ; 44   |#define USHORT  unsigned short      // usVarName
                             8906 ; 45   |#define SHORT   unsigned short      // sVarName
                             8907 ; 46   |#define WORD    unsigned int        // wVarName
                             8908 ; 47   |#define INT     signed int          // iVarName
                             8909 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8910 ; 49   |#define LONG    signed long         // lVarName
                             8911 ; 50   |#define BOOL    unsigned int        // bVarName
                             8912 ; 51   |#define FRACT   _fract              // frVarName
                             8913 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8914 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8915 ; 54   |#define FLOAT   float               // fVarName
                             8916 ; 55   |#define DBL     double              // dVarName
                             8917 ; 56   |#define ENUM    enum                // eVarName
                             8918 ; 57   |#define CMX     _complex            // cmxVarName
                             8919 ; 58   |typedef WORD UCS3;                   // 
                             8920 ; 59   |
                             8921 ; 60   |#define UINT16  unsigned short
                             8922 ; 61   |#define UINT8   unsigned char   
                             8923 ; 62   |#define UINT32  unsigned long
                             8924 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8925 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             8926 ; 65   |#define WCHAR   UINT16
                             8927 ; 66   |
                             8928 ; 67   |//UINT128 is 16 bytes or 6 words
                             8929 ; 68   |typedef struct UINT128_3500 {   
                             8930 ; 69   |    int val[6];     
                             8931 ; 70   |} UINT128_3500;
                             8932 ; 71   |
                             8933 ; 72   |#define UINT128   UINT128_3500
                             8934 ; 73   |
                             8935 ; 74   |// Little endian word packed byte strings:   
                             8936 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8937 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8938 ; 77   |// Little endian word packed byte strings:   
                             8939 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8940 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8941 ; 80   |
                             8942 ; 81   |// Declare Memory Spaces To Use When Coding
                             8943 ; 82   |// A. Sector Buffers
                             8944 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8945 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8946 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8947 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8948 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8949 ; 88   |// B. Media DDI Memory
                             8950 ; 89   |#define MEDIA_DDI_MEM _Y
                             8951 ; 90   |
                             8952 ; 91   |
                             8953 ; 92   |
                             8954 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8955 ; 94   |// Examples of circular pointers:
                             8956 ; 95   |//    INT CIRC cpiVarName
                             8957 ; 96   |//    DWORD CIRC cpdwVarName
                             8958 ; 97   |
                             8959 ; 98   |#define RETCODE INT                 // rcVarName
                             8960 ; 99   |
                             8961 ; 100  |// generic bitfield structure
                             8962 ; 101  |struct Bitfield {
                             8963 ; 102  |    unsigned int B0  :1;
                             8964 ; 103  |    unsigned int B1  :1;
                             8965 ; 104  |    unsigned int B2  :1;
                             8966 ; 105  |    unsigned int B3  :1;
                             8967 ; 106  |    unsigned int B4  :1;
                             8968 ; 107  |    unsigned int B5  :1;
                             8969 ; 108  |    unsigned int B6  :1;
                             8970 ; 109  |    unsigned int B7  :1;
                             8971 ; 110  |    unsigned int B8  :1;
                             8972 ; 111  |    unsigned int B9  :1;
                             8973 ; 112  |    unsigned int B10 :1;
                             8974 ; 113  |    unsigned int B11 :1;
                             8975 ; 114  |    unsigned int B12 :1;
                             8976 ; 115  |    unsigned int B13 :1;
                             8977 ; 116  |    unsigned int B14 :1;
                             8978 ; 117  |    unsigned int B15 :1;
                             8979 ; 118  |    unsigned int B16 :1;
                             8980 ; 119  |    unsigned int B17 :1;
                             8981 ; 120  |    unsigned int B18 :1;
                             8982 ; 121  |    unsigned int B19 :1;
                             8983 ; 122  |    unsigned int B20 :1;
                             8984 ; 123  |    unsigned int B21 :1;
                             8985 ; 124  |    unsigned int B22 :1;
                             8986 ; 125  |    unsigned int B23 :1;
                             8987 ; 126  |};
                             8988 ; 127  |
                             8989 ; 128  |union BitInt {
                             8990 ; 129  |        struct Bitfield B;
                             8991 ; 130  |        int        I;
                             8992 ; 131  |};
                             8993 ; 132  |
                             8994 ; 133  |#define MAX_MSG_LENGTH 10
                             8995 ; 134  |struct CMessage
                             8996 ; 135  |{
                             8997 ; 136  |        unsigned int m_uLength;
                             8998 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8999 ; 138  |};
                             9000 ; 139  |
                             9001 ; 140  |typedef struct {
                             9002 ; 141  |    WORD m_wLength;
                             9003 ; 142  |    WORD m_wMessage;
                             9004 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9005 ; 144  |} Message;
                             9006 ; 145  |
                             9007 ; 146  |struct MessageQueueDescriptor
                             9008 ; 147  |{
                             9009 ; 148  |        int *m_pBase;
                             9010 ; 149  |        int m_iModulo;
                             9011 ; 150  |        int m_iSize;
                             9012 ; 151  |        int *m_pHead;
                             9013 ; 152  |        int *m_pTail;
                             9014 ; 153  |};
                             9015 ; 154  |
                             9016 ; 155  |struct ModuleEntry
                             9017 ; 156  |{
                             9018 ; 157  |    int m_iSignaledEventMask;
                             9019 ; 158  |    int m_iWaitEventMask;
                             9020 ; 159  |    int m_iResourceOfCode;
                             9021 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9022 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9023 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9024 ; 163  |    int m_uTimeOutHigh;
                             9025 ; 164  |    int m_uTimeOutLow;
                             9026 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9027 ; 166  |};
                             9028 ; 167  |
                             9029 ; 168  |union WaitMask{
                             9030 ; 169  |    struct B{
                             9031 ; 170  |        unsigned int m_bNone     :1;
                             9032 ; 171  |        unsigned int m_bMessage  :1;
                             9033 ; 172  |        unsigned int m_bTimer    :1;
                             9034 ; 173  |        unsigned int m_bButton   :1;
                             9035 ; 174  |    } B;
                             9036 ; 175  |    int I;
                             9037 ; 176  |} ;
                             9038 ; 177  |
                             9039 ; 178  |
                             9040 ; 179  |struct Button {
                             9041 ; 180  |        WORD wButtonEvent;
                             9042 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9043 ; 182  |};
                             9044 ; 183  |
                             9045 ; 184  |struct Message {
                             9046 ; 185  |        WORD wMsgLength;
                             9047 ; 186  |        WORD wMsgCommand;
                             9048 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9049 ; 188  |};
                             9050 ; 189  |
                             9051 ; 190  |union EventTypes {
                             9052 ; 191  |        struct CMessage msg;
                             9053 ; 192  |        struct Button Button ;
                             9054 ; 193  |        struct Message Message;
                             9055 ; 194  |};
                             9056 ; 195  |
                             9057 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9058 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9059 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9060 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9061 ; 200  |
                             9062 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9063 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9064 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9065 ; 204  |
                             9066 ; 205  |#if DEBUG
                             9067 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9068 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9069 ; 208  |#else 
                             9070 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9071 ; 210  |#define DebugBuildAssert(x)    
                             9072 ; 211  |#endif
                             9073 ; 212  |
                             9074 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9075 ; 214  |//  #pragma asm
                             9076 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9077 ; 216  |//  #pragma endasm
                             9078 ; 217  |
                             9079 ; 218  |
                             9080 ; 219  |#ifdef COLOR_262K
                             9081 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9082 ; 221  |#elif defined(COLOR_65K)
                             9083 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9084 ; 223  |#else
                             9085 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9086 ; 225  |#endif
                             9087 ; 226  |    
                             9088 ; 227  |#endif // #ifndef _TYPES_H
                             9089 
                             9091 
                             9092 ; 31   |
                             9093 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9094 ; 33   |
                             9095 ; 34   |//   SWIZZLE STMP3500 Registers 
                             9096 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             9097 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9098 ; 37   |
                             9099 ; 38   |
                             9100 ; 39   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9101 ; 40   |
                             9102 ; 41   |
                             9103 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                             9104 ; 43   |
                             9105 ; 44   |
                             9106 ; 45   |
                             9107 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                             9108 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             9109 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                             9110 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             9111 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             9112 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             9113 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             9114 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             9115 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             9116 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                             9117 ; 56   |
                             9118 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             9119 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             9120 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             9121 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             9122 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             9123 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             9124 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             9125 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             9126 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             9127 ; 66   |
                             9128 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITPOS)
                             9129 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITPOS)
                             9130 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_BITPOS)
                             9131 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIGN_BITPOS)
                             9132 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_SHIFT_BITPOS)
                             9133 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_BITPOS)
                             9134 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECSR1_CLK_OFF_BITPOS)
                             9135 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1_NEWADD_BITPOS)
                             9136 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSVD_BITPOS)
                             9137 ; 76   |
                             9138 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             9139 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             9140 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             9141 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             9142 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                             9143 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             9144 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             9145 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             9146 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             9147 ; 86   |
                             9148 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             9149 ; 88   |//  Bit Manipulation Unit Registers
                             9150 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             9151 ; 90   |typedef union
                             9152 ; 91   |{
                             9153 ; 92   |    struct
                             9154 ; 93   |    {
                             9155 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             9156 ; 95   |    int LA      :1;     /* Left Align Data                          */
                             9157 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             9158 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             9159 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             9160 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                             9161 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             9162 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             9163 ; 102  |    } B;
                             9164 ; 103  |    int I;
                             9165 ; 104  |    unsigned U;
                             9166 ; 105  |} swizzlecsr1_type;
                             9167 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             9168 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* Swizzle Control & Status Register 1 */
                             9169 ; 108  |
                             9170 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             9171 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             9172 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             9173 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             9174 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             9175 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             9176 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             9177 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             9178 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             9179 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             9180 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             9181 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             9182 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             9183 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                             9184 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             9185 ; 124  |
                             9186 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             9187 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             9188 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             9189 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             9190 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             9191 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             9192 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             9193 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             9194 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             9195 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             9196 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             9197 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             9198 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             9199 ; 138  |
                             9200 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KICK_BITPOS)
                             9201 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_SASEL_BITPOS)
                             9202 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECSR2_DESASEL_BITPOS)
                             9203 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIGE_BITPOS)
                             9204 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2_BITREV_BITPOS)
                             9205 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLSB_BITPOS)
                             9206 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMSB_BITPOS)
                             9207 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16L_BITPOS)
                             9208 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16I_BITPOS)
                             9209 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_BS_EN_BITPOS)
                             9210 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZLECSR2_SBYTEDEST_BITPOS)
                             9211 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2_UNKICK_BITPOS)
                             9212 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSVD_BITPOS)
                             9213 ; 152  |
                             9214 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             9215 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             9216 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             9217 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                             9218 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             9219 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             9220 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             9221 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                             9222 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                             9223 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                             9224 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                             9225 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                             9226 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                             9227 ; 166  |
                             9228 ; 167  |///////////////////////////////////////////////////////////////////////////////
                             9229 ; 168  |typedef union
                             9230 ; 169  |{
                             9231 ; 170  |    struct
                             9232 ; 171  |    {
                             9233 ; 172  |    int KICK    :1;         /* Start transfer                      */
                             9234 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                             9235 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                             9236 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                             9237 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                             9238 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                             9239 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                             9240 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                             9241 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                             9242 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                             9243 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                             9244 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                             9245 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                             9246 ; 185  |    } B;
                             9247 ; 186  |    unsigned int I;
                             9248 ; 187  |    unsigned int U;
                             9249 ; 188  |} swizzlecsr2_type;
                             9250 ; 189  |///////////////////////////////////////////////////////////////////////////////
                             9251 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* Swizzle Control & Status Register 2 */
                             9252 ; 191  |
                             9253 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                             9254 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                             9255 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                             9256 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                             9257 ; 196  |
                             9258 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                             9259 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                             9260 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                             9261 ; 200  |
                             9262 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_SIZE_BITPOS)
                             9263 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWIZZLESIZER_NEW_SHIFT_BITPOS)
                             9264 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_RSVD_BITPOS)
                             9265 ; 204  |
                             9266 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                             9267 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                             9268 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                             9269 ; 208  |
                             9270 ; 209  |///////////////////////////////////////////////////////////////////////////////
                             9271 ; 210  |typedef union
                             9272 ; 211  |{
                             9273 ; 212  |    struct
                             9274 ; 213  |    {
                             9275 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                             9276 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                             9277 ; 216  |    } B;
                             9278 ; 217  |    int I;
                             9279 ; 218  |    unsigned U;
                             9280 ; 219  |} swizzlesizer_type;
                             9281 ; 220  |///////////////////////////////////////////////////////////////////////////////
                             9282 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))        /* Swizzle Transfer Size Register */
                             9283 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* Swizzle Source Address Register */
                             9284 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* Swizzle Data1 Register */
                             9285 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* Swizzle Data2 Register */
                             9286 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* Swizzle Destination Address Register */
                             9287 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* Swizzle Big Endian Register */
                             9288 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* Swizzle BITREV Register */
                             9289 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* Swizzle Pass Least Significant Byte Register */
                             9290 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* Swizzle Pass Intermediate Byte Register */
                             9291 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* Swizzle Pass Most Significant Byte Register */
                             9292 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* Swizzle Pass Least Significant Word Register */
                             9293 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* Swizzle Pass Intermediate Significant Word Register */
                             9294 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* Swizzle Pass Most Significant Word Register */
                             9295 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Swizzle Barrel Shift Register */
                             9296 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swizzle Divide By 3 Lower Register */
                             9297 ; 236  |
                             9298 ; 237  |
                             9299 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                             9300 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                             9301 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                             9302 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                             9303 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                             9304 ; 243  |
                             9305 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                             9306 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                             9307 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                             9308 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                             9309 ; 248  |
                             9310 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                             9311 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD0_BITPOS)
                             9312 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_SWIZZLEDIV3UR_REMAINDER_BITPOS)
                             9313 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDIV3UR_RSVD1_BITPOS)
                             9314 ; 253  |
                             9315 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                             9316 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                             9317 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                             9318 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                             9319 ; 258  |
                             9320 ; 259  |///////////////////////////////////////////////////////////////////////////////
                             9321 ; 260  |typedef union
                             9322 ; 261  |{
                             9323 ; 262  |    struct
                             9324 ; 263  |    {
                             9325 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                             9326 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                             9327 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                             9328 ; 267  |    } B;
                             9329 ; 268  |    int I;
                             9330 ; 269  |    unsigned U;
                             9331 ; 270  |} swizzlediv3ur_type;
                             9332 ; 271  |///////////////////////////////////////////////////////////////////////////////
                             9333 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    /* Swizzle Divide By 3 Upper Register */
                             9334 ; 273  |
                             9335 ; 274  |#endif
                             9336 ; 275  |
                             9337 
                             9339 
                             9340 ; 33   |#include "regssdram.h"
                             9341 
                             9343 
                             9344 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9345 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             9346 ; 3    |//;  File        : regssdram.inc
                             9347 ; 4    |//;  Description : Mixed Signal IP Register definition
                             9348 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9349 ; 6    |
                             9350 ; 7    |// The following naming conventions are followed in this file.
                             9351 ; 8    |// All registers are named using the format...
                             9352 ; 9    |//     HW_<module>_<regname>
                             9353 ; 10   |// where <module> is the module name which can be any of the following...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9354 ; 11   |//     SYSTEM
                             9355 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             9356 ; 13   |// module name includes a number starting from 0 for the first instance of
                             9357 ; 14   |// that module)
                             9358 ; 15   |// <regname> is the specific register within that module
                             9359 ; 16   |// We also define the following...
                             9360 ; 17   |//     HW_<module>_<regname>_BITPOS
                             9361 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9362 ; 19   |//     HW_<module>_<regname>_SETMASK
                             9363 ; 20   |// which does something else, and
                             9364 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             9365 ; 22   |// which does something else.
                             9366 ; 23   |// Other rules
                             9367 ; 24   |//     All caps
                             9368 ; 25   |//     Numeric identifiers start at 0
                             9369 ; 26   |
                             9370 ; 27   |#if !(defined(regssdraminc))
                             9371 ; 28   |#define regssdraminc 1
                             9372 ; 29   |
                             9373 ; 30   |#include "types.h"
                             9374 
                             9376 
                             9377 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9378 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9379 ; 3    |//
                             9380 ; 4    |// Filename: types.h
                             9381 ; 5    |// Description: Standard data types
                             9382 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9383 ; 7    |
                             9384 ; 8    |#ifndef _TYPES_H
                             9385 ; 9    |#define _TYPES_H
                             9386 ; 10   |
                             9387 ; 11   |// TODO:  move this outta here!
                             9388 ; 12   |#if !defined(NOERROR)
                             9389 ; 13   |#define NOERROR 0
                             9390 ; 14   |#define SUCCESS 0
                             9391 ; 15   |#endif 
                             9392 ; 16   |#if !defined(SUCCESS)
                             9393 ; 17   |#define SUCCESS  0
                             9394 ; 18   |#endif
                             9395 ; 19   |#if !defined(ERROR)
                             9396 ; 20   |#define ERROR   -1
                             9397 ; 21   |#endif
                             9398 ; 22   |#if !defined(FALSE)
                             9399 ; 23   |#define FALSE 0
                             9400 ; 24   |#endif
                             9401 ; 25   |#if !defined(TRUE)
                             9402 ; 26   |#define TRUE  1
                             9403 ; 27   |#endif
                             9404 ; 28   |
                             9405 ; 29   |#if !defined(NULL)
                             9406 ; 30   |#define NULL 0
                             9407 ; 31   |#endif
                             9408 ; 32   |
                             9409 ; 33   |#define MAX_INT     0x7FFFFF
                             9410 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9411 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9412 ; 36   |#define MAX_ULONG   (-1) 
                             9413 ; 37   |
                             9414 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9415 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9416 ; 40   |
                             9417 ; 41   |
                             9418 ; 42   |#define BYTE    unsigned char       // btVarName
                             9419 ; 43   |#define CHAR    signed char         // cVarName
                             9420 ; 44   |#define USHORT  unsigned short      // usVarName
                             9421 ; 45   |#define SHORT   unsigned short      // sVarName
                             9422 ; 46   |#define WORD    unsigned int        // wVarName
                             9423 ; 47   |#define INT     signed int          // iVarName
                             9424 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9425 ; 49   |#define LONG    signed long         // lVarName
                             9426 ; 50   |#define BOOL    unsigned int        // bVarName
                             9427 ; 51   |#define FRACT   _fract              // frVarName
                             9428 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9429 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9430 ; 54   |#define FLOAT   float               // fVarName
                             9431 ; 55   |#define DBL     double              // dVarName
                             9432 ; 56   |#define ENUM    enum                // eVarName
                             9433 ; 57   |#define CMX     _complex            // cmxVarName
                             9434 ; 58   |typedef WORD UCS3;                   // 
                             9435 ; 59   |
                             9436 ; 60   |#define UINT16  unsigned short
                             9437 ; 61   |#define UINT8   unsigned char   
                             9438 ; 62   |#define UINT32  unsigned long
                             9439 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9440 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9441 ; 65   |#define WCHAR   UINT16
                             9442 ; 66   |
                             9443 ; 67   |//UINT128 is 16 bytes or 6 words
                             9444 ; 68   |typedef struct UINT128_3500 {   
                             9445 ; 69   |    int val[6];     
                             9446 ; 70   |} UINT128_3500;
                             9447 ; 71   |
                             9448 ; 72   |#define UINT128   UINT128_3500
                             9449 ; 73   |
                             9450 ; 74   |// Little endian word packed byte strings:   
                             9451 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9452 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9453 ; 77   |// Little endian word packed byte strings:   
                             9454 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9455 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9456 ; 80   |
                             9457 ; 81   |// Declare Memory Spaces To Use When Coding
                             9458 ; 82   |// A. Sector Buffers
                             9459 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9460 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9461 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9462 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9463 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9464 ; 88   |// B. Media DDI Memory
                             9465 ; 89   |#define MEDIA_DDI_MEM _Y
                             9466 ; 90   |
                             9467 ; 91   |
                             9468 ; 92   |
                             9469 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9470 ; 94   |// Examples of circular pointers:
                             9471 ; 95   |//    INT CIRC cpiVarName
                             9472 ; 96   |//    DWORD CIRC cpdwVarName
                             9473 ; 97   |
                             9474 ; 98   |#define RETCODE INT                 // rcVarName
                             9475 ; 99   |
                             9476 ; 100  |// generic bitfield structure
                             9477 ; 101  |struct Bitfield {
                             9478 ; 102  |    unsigned int B0  :1;
                             9479 ; 103  |    unsigned int B1  :1;
                             9480 ; 104  |    unsigned int B2  :1;
                             9481 ; 105  |    unsigned int B3  :1;
                             9482 ; 106  |    unsigned int B4  :1;
                             9483 ; 107  |    unsigned int B5  :1;
                             9484 ; 108  |    unsigned int B6  :1;
                             9485 ; 109  |    unsigned int B7  :1;
                             9486 ; 110  |    unsigned int B8  :1;
                             9487 ; 111  |    unsigned int B9  :1;
                             9488 ; 112  |    unsigned int B10 :1;
                             9489 ; 113  |    unsigned int B11 :1;
                             9490 ; 114  |    unsigned int B12 :1;
                             9491 ; 115  |    unsigned int B13 :1;
                             9492 ; 116  |    unsigned int B14 :1;
                             9493 ; 117  |    unsigned int B15 :1;
                             9494 ; 118  |    unsigned int B16 :1;
                             9495 ; 119  |    unsigned int B17 :1;
                             9496 ; 120  |    unsigned int B18 :1;
                             9497 ; 121  |    unsigned int B19 :1;
                             9498 ; 122  |    unsigned int B20 :1;
                             9499 ; 123  |    unsigned int B21 :1;
                             9500 ; 124  |    unsigned int B22 :1;
                             9501 ; 125  |    unsigned int B23 :1;
                             9502 ; 126  |};
                             9503 ; 127  |
                             9504 ; 128  |union BitInt {
                             9505 ; 129  |        struct Bitfield B;
                             9506 ; 130  |        int        I;
                             9507 ; 131  |};
                             9508 ; 132  |
                             9509 ; 133  |#define MAX_MSG_LENGTH 10
                             9510 ; 134  |struct CMessage
                             9511 ; 135  |{
                             9512 ; 136  |        unsigned int m_uLength;
                             9513 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9514 ; 138  |};
                             9515 ; 139  |
                             9516 ; 140  |typedef struct {
                             9517 ; 141  |    WORD m_wLength;
                             9518 ; 142  |    WORD m_wMessage;
                             9519 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9520 ; 144  |} Message;
                             9521 ; 145  |
                             9522 ; 146  |struct MessageQueueDescriptor
                             9523 ; 147  |{
                             9524 ; 148  |        int *m_pBase;
                             9525 ; 149  |        int m_iModulo;
                             9526 ; 150  |        int m_iSize;
                             9527 ; 151  |        int *m_pHead;
                             9528 ; 152  |        int *m_pTail;
                             9529 ; 153  |};
                             9530 ; 154  |
                             9531 ; 155  |struct ModuleEntry
                             9532 ; 156  |{
                             9533 ; 157  |    int m_iSignaledEventMask;
                             9534 ; 158  |    int m_iWaitEventMask;
                             9535 ; 159  |    int m_iResourceOfCode;
                             9536 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9537 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                             9538 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9539 ; 163  |    int m_uTimeOutHigh;
                             9540 ; 164  |    int m_uTimeOutLow;
                             9541 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9542 ; 166  |};
                             9543 ; 167  |
                             9544 ; 168  |union WaitMask{
                             9545 ; 169  |    struct B{
                             9546 ; 170  |        unsigned int m_bNone     :1;
                             9547 ; 171  |        unsigned int m_bMessage  :1;
                             9548 ; 172  |        unsigned int m_bTimer    :1;
                             9549 ; 173  |        unsigned int m_bButton   :1;
                             9550 ; 174  |    } B;
                             9551 ; 175  |    int I;
                             9552 ; 176  |} ;
                             9553 ; 177  |
                             9554 ; 178  |
                             9555 ; 179  |struct Button {
                             9556 ; 180  |        WORD wButtonEvent;
                             9557 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9558 ; 182  |};
                             9559 ; 183  |
                             9560 ; 184  |struct Message {
                             9561 ; 185  |        WORD wMsgLength;
                             9562 ; 186  |        WORD wMsgCommand;
                             9563 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9564 ; 188  |};
                             9565 ; 189  |
                             9566 ; 190  |union EventTypes {
                             9567 ; 191  |        struct CMessage msg;
                             9568 ; 192  |        struct Button Button ;
                             9569 ; 193  |        struct Message Message;
                             9570 ; 194  |};
                             9571 ; 195  |
                             9572 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9573 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9574 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9575 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9576 ; 200  |
                             9577 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9578 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9579 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9580 ; 204  |
                             9581 ; 205  |#if DEBUG
                             9582 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9583 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9584 ; 208  |#else 
                             9585 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                             9586 ; 210  |#define DebugBuildAssert(x)    
                             9587 ; 211  |#endif
                             9588 ; 212  |
                             9589 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9590 ; 214  |//  #pragma asm
                             9591 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9592 ; 216  |//  #pragma endasm
                             9593 ; 217  |
                             9594 ; 218  |
                             9595 ; 219  |#ifdef COLOR_262K
                             9596 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                             9597 ; 221  |#elif defined(COLOR_65K)
                             9598 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                             9599 ; 223  |#else
                             9600 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                             9601 ; 225  |#endif
                             9602 ; 226  |    
                             9603 ; 227  |#endif // #ifndef _TYPES_H
                             9604 
                             9606 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9607 ; 31   |
                             9608 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                             9609 ; 33   |
                             9610 ; 34   |
                             9611 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                             9612 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                             9613 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                             9614 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                             9615 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                             9616 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                             9617 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                             9618 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                             9619 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                             9620 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                             9621 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                             9622 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                             9623 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                             9624 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                             9625 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                             9626 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                             9627 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                             9628 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                             9629 ; 53   |
                             9630 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                             9631 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                             9632 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                             9633 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                             9634 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                             9635 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                             9636 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                             9637 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                             9638 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                             9639 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                             9640 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                             9641 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                             9642 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                             9643 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                             9644 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                             9645 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                             9646 ; 70   |
                             9647 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SDRAMEN_BITPOS)
                             9648 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                             9649 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS)
                             9650 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BITPOS)
                             9651 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                             9652 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_BITPOS)
                             9653 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BITPOS)
                             9654 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_BITPOS)
                             9655 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS)
                             9656 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BITPOS)
                             9657 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_BITPOS)
                             9658 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_BITPOS)
                             9659 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS)
                             9660 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_BITPOS)
                             9661 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_BITPOS)
                             9662 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BITPOS)
                             9663 ; 87   |
                             9664 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                             9665 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                             9666 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                             9667 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                             9668 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                             9669 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                             9670 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                             9671 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                             9672 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                             9673 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                             9674 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                             9675 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                             9676 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                             9677 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                             9678 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                             9679 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                             9680 ; 104  |
                             9681 ; 105  |typedef union               
                             9682 ; 106  |{
                             9683 ; 107  |    struct {
                             9684 ; 108  |        int SDRAMEN                     :1;
                             9685 ; 109  |        int IE                          :1;
                             9686 ; 110  |        int RNW                         :1;
                             9687 ; 111  |        int KICK                        :1;
                             9688 ; 112  |        int LM                          :1;
                             9689 ; 113  |        int ISTAT                       :1;
                             9690 ; 114  |        int PWDN                        :1;
                             9691 ; 115  |        int RSVD                        :1;
                             9692 ; 116  |        int SBYTE                       :2;
                             9693 ; 117  |        int MEM                         :2;
                             9694 ; 118  |        int BIGE                        :1;
                             9695 ; 119  |        int ASIZE                       :3;
                             9696 ; 120  |        int UKICK                       :1;
                             9697 ; 121  |        int DIV                         :4;
                             9698 ; 122  |        int MULTI                       :1;
                             9699 ; 123  |        int SDRAM                       :1;
                             9700 ; 124  |        int SIGN                        :1;
                             9701 ; 125  |    } B;
                             9702 ; 126  |    int I;
                             9703 ; 127  |} sdramcsr_type;
                             9704 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                             9705 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                             9706 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                             9707 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                             9708 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                             9709 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                             9710 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                             9711 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                             9712 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                             9713 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                             9714 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                             9715 ; 139  |
                             9716 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                             9717 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                             9718 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                             9719 ; 143  |
                             9720 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                             9721 ; 145  |
                             9722 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                             9723 ; 147  |
                             9724 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             9725 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                             9726 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                             9727 ; 151  |
                             9728 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                             9729 ; 153  |
                             9730 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                             9731 ; 155  |
                             9732 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                             9733 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                             9734 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                             9735 ; 159  |
                             9736 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                             9737 ; 161  |
                             9738 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                             9739 ; 163  |
                             9740 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                             9741 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                             9742 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                             9743 ; 167  |
                             9744 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                             9745 ; 169  |
                             9746 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                             9747 ; 171  |
                             9748 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                             9749 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                             9750 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                             9751 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                             9752 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                             9753 ; 177  |
                             9754 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                             9755 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                             9756 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                             9757 ; 181  |
                             9758 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1_INIT_BITPOS)
                             9759 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_TRP_BITPOS)
                             9760 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1_TRFC_BITPOS)
                             9761 ; 185  |
                             9762 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                             9763 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                             9764 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                             9765 ; 189  |
                             9766 ; 190  |typedef union               
                             9767 ; 191  |{
                             9768 ; 192  |    struct {
                             9769 ; 193  |        int INIT                :16;
                             9770 ; 194  |        int TRP                 :4;
                             9771 ; 195  |        int TRFC                :4;
                             9772 ; 196  |    } B;
                             9773 ; 197  |    int I;
                             9774 ; 198  |} sdramtimer1_type;
                             9775 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                             9776 ; 200  |
                             9777 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                             9778 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                             9779 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                             9780 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                             9781 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                             9782 ; 206  |
                             9783 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                             9784 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                             9785 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                             9786 ; 210  |
                             9787 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2_TXSR_BITPOS)
                             9788 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2_TREF_BITPOS)
                             9789 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2_TRCD_BITPOS)
                             9790 ; 214  |
                             9791 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                             9792 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                             9793 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                             9794 ; 218  |
                             9795 ; 219  |typedef union               
                             9796 ; 220  |{
                             9797 ; 221  |    struct {
                             9798 ; 222  |        int TXSR                :4;
                             9799 ; 223  |        int TREF                :12;
                             9800 ; 224  |        int TRCD                :4;
                             9801 ; 225  |        int RSVD                :4; 
                             9802 ; 226  |    } B;
                             9803 ; 227  |    int I;
                             9804 ; 228  |} sdramtimer2_type;
                             9805 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                             9806 ; 230  |
                             9807 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             9808 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                             9809 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                             9810 ; 234  |
                             9811 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                             9812 ; 236  |
                             9813 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                             9814 ; 238  |
                             9815 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                             9816 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                             9817 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                             9818 ; 242  |
                             9819 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                             9820 ; 244  |
                             9821 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                             9822 ; 246  |
                             9823 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9824 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                             9825 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                             9826 ; 250  |
                             9827 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                             9828 ; 252  |
                             9829 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS)
                             9830 ; 254  |
                             9831 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                             9832 ; 256  |
                             9833 ; 257  |typedef union               
                             9834 ; 258  |{
                             9835 ; 259  |    struct {
                             9836 ; 260  |        int VALUE               :14;
                             9837 ; 261  |        int RSVD                :10; 
                             9838 ; 262  |    } B;
                             9839 ; 263  |    int I;
                             9840 ; 264  |} sdrammode_type;
                             9841 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                             9842 ; 266  |
                             9843 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                             9844 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                             9845 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                             9846 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                             9847 ; 271  |
                             9848 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                             9849 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                             9850 ; 274  |
                             9851 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_COLWIDTH_BITPOS)
                             9852 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TYPE_ROWWIDTH_BITPOS)
                             9853 ; 277  |
                             9854 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                             9855 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                             9856 ; 280  |
                             9857 ; 281  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9858 ; 282  |{
                             9859 ; 283  |    struct {
                             9860 ; 284  |        int COLWIDTH               :4;
                             9861 ; 285  |        int ROWWIDTH               :4; 
                             9862 ; 286  |    } B;
                             9863 ; 287  |    int I;
                             9864 ; 288  |} sdramtype_type;
                             9865 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                             9866 ; 290  |
                             9867 ; 291  |#endif
                             9868 ; 292  |
                             9869 ; 293  |
                             9870 ; 294  |
                             9871 ; 295  |
                             9872 ; 296  |
                             9873 ; 297  |
                             9874 
                             9876 
                             9877 ; 34   |#include "regstb.h"
                             9878 
                             9880 
                             9881 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             9882 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             9883 ; 3    |// Filename: regstb.inc
                             9884 ; 4    |// Description: Register definitions for Trace Buffer
                             9885 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             9886 ; 6    |// The following naming conventions are followed in this file.
                             9887 ; 7    |// All registers are named using the format...
                             9888 ; 8    |//     HW_<module>_<regname>
                             9889 ; 9    |// where <module> is the module name which can be any of the following...
                             9890 ; 10   |//     USB20
                             9891 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             9892 ; 12   |// module name includes a number starting from 0 for the first instance of
                             9893 ; 13   |// that module)
                             9894 ; 14   |// <regname> is the specific register within that module
                             9895 ; 15   |// We also define the following...
                             9896 ; 16   |//     HW_<module>_<regname>_BITPOS
                             9897 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9898 ; 18   |//     HW_<module>_<regname>_SETMASK
                             9899 ; 19   |// which does something else, and
                             9900 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             9901 ; 21   |// which does something else.
                             9902 ; 22   |// Other rules
                             9903 ; 23   |//     All caps
                             9904 ; 24   |//     Numeric identifiers start at 0
                             9905 ; 25   |#if !(defined(regstbinc))
                             9906 ; 26   |#define regstbinc 1
                             9907 ; 27   |
                             9908 ; 28   |#include "types.h"
                             9909 
                             9911 
                             9912 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9913 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9914 ; 3    |//
                             9915 ; 4    |// Filename: types.h
                             9916 ; 5    |// Description: Standard data types
                             9917 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9918 ; 7    |
                             9919 ; 8    |#ifndef _TYPES_H
                             9920 ; 9    |#define _TYPES_H
                             9921 ; 10   |
                             9922 ; 11   |// TODO:  move this outta here!
                             9923 ; 12   |#if !defined(NOERROR)
                             9924 ; 13   |#define NOERROR 0
                             9925 ; 14   |#define SUCCESS 0
                             9926 ; 15   |#endif 
                             9927 ; 16   |#if !defined(SUCCESS)
                             9928 ; 17   |#define SUCCESS  0
                             9929 ; 18   |#endif
                             9930 ; 19   |#if !defined(ERROR)
                             9931 ; 20   |#define ERROR   -1
                             9932 ; 21   |#endif
                             9933 ; 22   |#if !defined(FALSE)
                             9934 ; 23   |#define FALSE 0
                             9935 ; 24   |#endif
                             9936 ; 25   |#if !defined(TRUE)
                             9937 ; 26   |#define TRUE  1
                             9938 ; 27   |#endif
                             9939 ; 28   |
                             9940 ; 29   |#if !defined(NULL)
                             9941 ; 30   |#define NULL 0
                             9942 ; 31   |#endif
                             9943 ; 32   |
                             9944 ; 33   |#define MAX_INT     0x7FFFFF
                             9945 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9946 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9947 ; 36   |#define MAX_ULONG   (-1) 
                             9948 ; 37   |
                             9949 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9950 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9951 ; 40   |
                             9952 ; 41   |
                             9953 ; 42   |#define BYTE    unsigned char       // btVarName
                             9954 ; 43   |#define CHAR    signed char         // cVarName
                             9955 ; 44   |#define USHORT  unsigned short      // usVarName
                             9956 ; 45   |#define SHORT   unsigned short      // sVarName
                             9957 ; 46   |#define WORD    unsigned int        // wVarName
                             9958 ; 47   |#define INT     signed int          // iVarName
                             9959 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9960 ; 49   |#define LONG    signed long         // lVarName
                             9961 ; 50   |#define BOOL    unsigned int        // bVarName
                             9962 ; 51   |#define FRACT   _fract              // frVarName
                             9963 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9964 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9965 ; 54   |#define FLOAT   float               // fVarName
                             9966 ; 55   |#define DBL     double              // dVarName
                             9967 ; 56   |#define ENUM    enum                // eVarName
                             9968 ; 57   |#define CMX     _complex            // cmxVarName
                             9969 ; 58   |typedef WORD UCS3;                   // 
                             9970 ; 59   |
                             9971 ; 60   |#define UINT16  unsigned short
                             9972 ; 61   |#define UINT8   unsigned char   
                             9973 ; 62   |#define UINT32  unsigned long
                             9974 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9975 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                             9976 ; 65   |#define WCHAR   UINT16
                             9977 ; 66   |
                             9978 ; 67   |//UINT128 is 16 bytes or 6 words
                             9979 ; 68   |typedef struct UINT128_3500 {   
                             9980 ; 69   |    int val[6];     
                             9981 ; 70   |} UINT128_3500;
                             9982 ; 71   |
                             9983 ; 72   |#define UINT128   UINT128_3500
                             9984 ; 73   |
                             9985 ; 74   |// Little endian word packed byte strings:   
                             9986 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9987 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9988 ; 77   |// Little endian word packed byte strings:   
                             9989 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9990 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9991 ; 80   |
                             9992 ; 81   |// Declare Memory Spaces To Use When Coding
                             9993 ; 82   |// A. Sector Buffers
                             9994 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9995 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9996 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9997 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9998 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9999 ; 88   |// B. Media DDI Memory
                            10000 ; 89   |#define MEDIA_DDI_MEM _Y
                            10001 ; 90   |
                            10002 ; 91   |
                            10003 ; 92   |
                            10004 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10005 ; 94   |// Examples of circular pointers:
                            10006 ; 95   |//    INT CIRC cpiVarName
                            10007 ; 96   |//    DWORD CIRC cpdwVarName
                            10008 ; 97   |
                            10009 ; 98   |#define RETCODE INT                 // rcVarName
                            10010 ; 99   |
                            10011 ; 100  |// generic bitfield structure
                            10012 ; 101  |struct Bitfield {
                            10013 ; 102  |    unsigned int B0  :1;
                            10014 ; 103  |    unsigned int B1  :1;
                            10015 ; 104  |    unsigned int B2  :1;
                            10016 ; 105  |    unsigned int B3  :1;
                            10017 ; 106  |    unsigned int B4  :1;
                            10018 ; 107  |    unsigned int B5  :1;
                            10019 ; 108  |    unsigned int B6  :1;
                            10020 ; 109  |    unsigned int B7  :1;
                            10021 ; 110  |    unsigned int B8  :1;
                            10022 ; 111  |    unsigned int B9  :1;
                            10023 ; 112  |    unsigned int B10 :1;
                            10024 ; 113  |    unsigned int B11 :1;
                            10025 ; 114  |    unsigned int B12 :1;
                            10026 ; 115  |    unsigned int B13 :1;
                            10027 ; 116  |    unsigned int B14 :1;
                            10028 ; 117  |    unsigned int B15 :1;
                            10029 ; 118  |    unsigned int B16 :1;
                            10030 ; 119  |    unsigned int B17 :1;
                            10031 ; 120  |    unsigned int B18 :1;
                            10032 ; 121  |    unsigned int B19 :1;
                            10033 ; 122  |    unsigned int B20 :1;
                            10034 ; 123  |    unsigned int B21 :1;
                            10035 ; 124  |    unsigned int B22 :1;
                            10036 ; 125  |    unsigned int B23 :1;
                            10037 ; 126  |};
                            10038 ; 127  |
                            10039 ; 128  |union BitInt {
                            10040 ; 129  |        struct Bitfield B;
                            10041 ; 130  |        int        I;
                            10042 ; 131  |};
                            10043 ; 132  |
                            10044 ; 133  |#define MAX_MSG_LENGTH 10
                            10045 ; 134  |struct CMessage
                            10046 ; 135  |{
                            10047 ; 136  |        unsigned int m_uLength;
                            10048 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10049 ; 138  |};
                            10050 ; 139  |
                            10051 ; 140  |typedef struct {
                            10052 ; 141  |    WORD m_wLength;
                            10053 ; 142  |    WORD m_wMessage;
                            10054 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10055 ; 144  |} Message;
                            10056 ; 145  |
                            10057 ; 146  |struct MessageQueueDescriptor
                            10058 ; 147  |{
                            10059 ; 148  |        int *m_pBase;
                            10060 ; 149  |        int m_iModulo;
                            10061 ; 150  |        int m_iSize;
                            10062 ; 151  |        int *m_pHead;
                            10063 ; 152  |        int *m_pTail;
                            10064 ; 153  |};
                            10065 ; 154  |
                            10066 ; 155  |struct ModuleEntry
                            10067 ; 156  |{
                            10068 ; 157  |    int m_iSignaledEventMask;
                            10069 ; 158  |    int m_iWaitEventMask;
                            10070 ; 159  |    int m_iResourceOfCode;
                            10071 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10072 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10073 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10074 ; 163  |    int m_uTimeOutHigh;
                            10075 ; 164  |    int m_uTimeOutLow;
                            10076 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10077 ; 166  |};
                            10078 ; 167  |
                            10079 ; 168  |union WaitMask{
                            10080 ; 169  |    struct B{
                            10081 ; 170  |        unsigned int m_bNone     :1;
                            10082 ; 171  |        unsigned int m_bMessage  :1;
                            10083 ; 172  |        unsigned int m_bTimer    :1;
                            10084 ; 173  |        unsigned int m_bButton   :1;
                            10085 ; 174  |    } B;
                            10086 ; 175  |    int I;
                            10087 ; 176  |} ;
                            10088 ; 177  |
                            10089 ; 178  |
                            10090 ; 179  |struct Button {
                            10091 ; 180  |        WORD wButtonEvent;
                            10092 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10093 ; 182  |};
                            10094 ; 183  |
                            10095 ; 184  |struct Message {
                            10096 ; 185  |        WORD wMsgLength;
                            10097 ; 186  |        WORD wMsgCommand;
                            10098 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10099 ; 188  |};
                            10100 ; 189  |
                            10101 ; 190  |union EventTypes {
                            10102 ; 191  |        struct CMessage msg;
                            10103 ; 192  |        struct Button Button ;
                            10104 ; 193  |        struct Message Message;
                            10105 ; 194  |};
                            10106 ; 195  |
                            10107 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10108 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10109 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10110 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10111 ; 200  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10112 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10113 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10114 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10115 ; 204  |
                            10116 ; 205  |#if DEBUG
                            10117 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10118 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10119 ; 208  |#else 
                            10120 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10121 ; 210  |#define DebugBuildAssert(x)    
                            10122 ; 211  |#endif
                            10123 ; 212  |
                            10124 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10125 ; 214  |//  #pragma asm
                            10126 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10127 ; 216  |//  #pragma endasm
                            10128 ; 217  |
                            10129 ; 218  |
                            10130 ; 219  |#ifdef COLOR_262K
                            10131 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10132 ; 221  |#elif defined(COLOR_65K)
                            10133 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10134 ; 223  |#else
                            10135 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10136 ; 225  |#endif
                            10137 ; 226  |    
                            10138 ; 227  |#endif // #ifndef _TYPES_H
                            10139 
                            10141 
                            10142 ; 29   |
                            10143 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10144 ; 31   |
                            10145 ; 32   |//   Trace Buffer STMP Registers 
                            10146 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            10147 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10148 ; 35   |
                            10149 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            10150 ; 37   |
                            10151 ; 38   |
                            10152 ; 39   |
                            10153 ; 40   |
                            10154 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            10155 ; 42   |
                            10156 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            10157 ; 44   |
                            10158 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            10159 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            10160 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            10161 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            10162 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            10163 ; 50   |
                            10164 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            10165 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            10166 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            10167 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            10168 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            10169 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            10170 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            10171 ; 58   |
                            10172 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_ENABLE_BITPOS) 
                            10173 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS) 
                            10174 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            10175 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_BITPOS) 
                            10176 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_EVENT_BITPOS) 
                            10177 ; 64   |
                            10178 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            10179 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            10180 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            10181 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            10182 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            10183 ; 70   |
                            10184 ; 71   |typedef union               
                            10185 ; 72   |{
                            10186 ; 73   |    struct {
                            10187 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            10188 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            10189 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            10190 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            10191 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            10192 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            10193 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            10194 ; 81   |    } B;
                            10195 ; 82   |    int I;
                            10196 ; 83   |    unsigned int U;
                            10197 ; 84   |} tb_cfg_type;
                            10198 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer Configuration Register */
                            10199 ; 86   |
                            10200 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            10201 ; 88   |
                            10202 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            10203 ; 90   |
                            10204 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            10205 ; 92   |
                            10206 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            10207 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            10208 ; 95   |
                            10209 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BITPOS) 
                            10210 ; 97   |
                            10211 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            10212 ; 99   |
                            10213 ; 100  |typedef union               
                            10214 ; 101  |{
                            10215 ; 102  |    struct {
                            10216 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            10217 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            10218 ; 105  |    } B;
                            10219 ; 106  |    int I;
                            10220 ; 107  |    unsigned int U;
                            10221 ; 108  |} tb_bar_type;
                            10222 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer Base Address Register */
                            10223 ; 110  |
                            10224 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10225 ; 112  |
                            10226 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            10227 ; 114  |
                            10228 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            10229 ; 116  |
                            10230 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            10231 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            10232 ; 119  |
                            10233 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BITPOS) 
                            10234 ; 121  |
                            10235 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            10236 ; 123  |
                            10237 ; 124  |typedef union               
                            10238 ; 125  |{
                            10239 ; 126  |    struct {
                            10240 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            10241 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            10242 ; 129  |    } B;
                            10243 ; 130  |    int I;
                            10244 ; 131  |    unsigned int U;
                            10245 ; 132  |} tb_mod_type;
                            10246 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer Modulus Register */
                            10247 ; 134  |
                            10248 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10249 ; 136  |
                            10250 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            10251 ; 138  |
                            10252 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            10253 ; 140  |
                            10254 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            10255 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            10256 ; 143  |
                            10257 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            10258 ; 145  |
                            10259 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            10260 ; 147  |
                            10261 ; 148  |typedef union               
                            10262 ; 149  |{
                            10263 ; 150  |    struct {
                            10264 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            10265 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            10266 ; 153  |    } B;
                            10267 ; 154  |    int I;
                            10268 ; 155  |    unsigned int U;
                            10269 ; 156  |} tb_cir_type;
                            10270 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer Current Index Register */
                            10271 ; 158  |
                            10272 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            10273 ; 160  |
                            10274 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            10275 ; 162  |
                            10276 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            10277 ; 164  |
                            10278 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            10279 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            10280 ; 167  |
                            10281 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            10282 ; 169  |
                            10283 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            10284 ; 171  |
                            10285 ; 172  |typedef union               
                            10286 ; 173  |{
                            10287 ; 174  |    struct {
                            10288 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            10289 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            10290 ; 177  |    } B;
                            10291 ; 178  |    int I;
                            10292 ; 179  |    unsigned int U;
                            10293 ; 180  |} tb_obc_type;
                            10294 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer one byte code Register */
                            10295 ; 182  |
                            10296 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            10297 ; 184  |
                            10298 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            10299 ; 186  |
                            10300 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            10301 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            10302 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            10303 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            10304 ; 191  |
                            10305 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            10306 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            10307 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            10308 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            10309 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            10310 ; 197  |
                            10311 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STYLE_BITPOS) 
                            10312 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLASS_BITPOS) 
                            10313 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLASS_BITPOS) 
                            10314 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS) 
                            10315 ; 202  |
                            10316 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            10317 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            10318 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            10319 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            10320 ; 207  |
                            10321 ; 208  |typedef union               
                            10322 ; 209  |{
                            10323 ; 210  |    struct {
                            10324 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            10325 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            10326 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            10327 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            10328 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            10329 ; 216  |    } B;
                            10330 ; 217  |    int I;
                            10331 ; 218  |    unsigned int U;
                            10332 ; 219  |} tb_tcs_type;
                            10333 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffer Trigger Command Register */
                            10334 ; 221  |
                            10335 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10336 ; 223  |
                            10337 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            10338 ; 225  |
                            10339 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            10340 ; 227  |
                            10341 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            10342 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            10343 ; 230  |
                            10344 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH_ADDR_BITPOS) 
                            10345 ; 232  |
                            10346 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            10347 ; 234  |
                            10348 ; 235  |typedef union               
                            10349 ; 236  |{
                            10350 ; 237  |    struct {
                            10351 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            10352 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            10353 ; 240  |    } B;
                            10354 ; 241  |    int I;
                            10355 ; 242  |    unsigned int U;
                            10356 ; 243  |} tb_tvr_type;
                            10357 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffer Trigger Value Register */
                            10358 ; 245  |
                            10359 ; 246  |
                            10360 ; 247  |
                            10361 ; 248  |#endif
                            10362 ; 249  |
                            10363 ; 250  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10364 ; 251  |
                            10365 ; 252  |
                            10366 ; 253  |
                            10367 ; 254  |
                            10368 ; 255  |
                            10369 ; 256  |
                            10370 ; 257  |
                            10371 ; 258  |
                            10372 ; 259  |
                            10373 ; 260  |
                            10374 ; 261  |
                            10375 ; 262  |
                            10376 ; 263  |
                            10377 ; 264  |
                            10378 ; 265  |
                            10379 
                            10381 
                            10382 ; 35   |#include "regstimer.h"
                            10383 
                            10385 
                            10386 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10387 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            10388 ; 3    |// Filename: regstimer.inc
                            10389 ; 4    |// Description: Register definitions for  Timers interface
                            10390 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10391 ; 6    |// The following naming conventions are followed in this file.
                            10392 ; 7    |// All registers are named using the format...
                            10393 ; 8    |//     HW_<module>_<regname>
                            10394 ; 9    |// where <module> is the module name which can be any of the following...
                            10395 ; 10   |//     USB20
                            10396 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10397 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10398 ; 13   |// that module)
                            10399 ; 14   |// <regname> is the specific register within that module
                            10400 ; 15   |// We also define the following...
                            10401 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10402 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10403 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10404 ; 19   |// which does something else, and
                            10405 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10406 ; 21   |// which does something else.
                            10407 ; 22   |// Other rules
                            10408 ; 23   |//     All caps
                            10409 ; 24   |//     Numeric identifiers start at 0
                            10410 ; 25   |#if !(defined(regstimerinc))
                            10411 ; 26   |#define regstimerinc 1
                            10412 ; 27   |
                            10413 ; 28   |#include "types.h"
                            10414 
                            10416 
                            10417 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10418 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10419 ; 3    |//
                            10420 ; 4    |// Filename: types.h
                            10421 ; 5    |// Description: Standard data types
                            10422 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10423 ; 7    |
                            10424 ; 8    |#ifndef _TYPES_H
                            10425 ; 9    |#define _TYPES_H
                            10426 ; 10   |
                            10427 ; 11   |// TODO:  move this outta here!
                            10428 ; 12   |#if !defined(NOERROR)
                            10429 ; 13   |#define NOERROR 0
                            10430 ; 14   |#define SUCCESS 0
                            10431 ; 15   |#endif 
                            10432 ; 16   |#if !defined(SUCCESS)
                            10433 ; 17   |#define SUCCESS  0
                            10434 ; 18   |#endif
                            10435 ; 19   |#if !defined(ERROR)
                            10436 ; 20   |#define ERROR   -1
                            10437 ; 21   |#endif
                            10438 ; 22   |#if !defined(FALSE)
                            10439 ; 23   |#define FALSE 0
                            10440 ; 24   |#endif
                            10441 ; 25   |#if !defined(TRUE)
                            10442 ; 26   |#define TRUE  1
                            10443 ; 27   |#endif
                            10444 ; 28   |
                            10445 ; 29   |#if !defined(NULL)
                            10446 ; 30   |#define NULL 0
                            10447 ; 31   |#endif
                            10448 ; 32   |
                            10449 ; 33   |#define MAX_INT     0x7FFFFF
                            10450 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10451 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10452 ; 36   |#define MAX_ULONG   (-1) 
                            10453 ; 37   |
                            10454 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10455 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10456 ; 40   |
                            10457 ; 41   |
                            10458 ; 42   |#define BYTE    unsigned char       // btVarName
                            10459 ; 43   |#define CHAR    signed char         // cVarName
                            10460 ; 44   |#define USHORT  unsigned short      // usVarName
                            10461 ; 45   |#define SHORT   unsigned short      // sVarName
                            10462 ; 46   |#define WORD    unsigned int        // wVarName
                            10463 ; 47   |#define INT     signed int          // iVarName
                            10464 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10465 ; 49   |#define LONG    signed long         // lVarName
                            10466 ; 50   |#define BOOL    unsigned int        // bVarName
                            10467 ; 51   |#define FRACT   _fract              // frVarName
                            10468 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10469 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10470 ; 54   |#define FLOAT   float               // fVarName
                            10471 ; 55   |#define DBL     double              // dVarName
                            10472 ; 56   |#define ENUM    enum                // eVarName
                            10473 ; 57   |#define CMX     _complex            // cmxVarName
                            10474 ; 58   |typedef WORD UCS3;                   // 
                            10475 ; 59   |
                            10476 ; 60   |#define UINT16  unsigned short
                            10477 ; 61   |#define UINT8   unsigned char   
                            10478 ; 62   |#define UINT32  unsigned long
                            10479 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10480 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10481 ; 65   |#define WCHAR   UINT16
                            10482 ; 66   |
                            10483 ; 67   |//UINT128 is 16 bytes or 6 words
                            10484 ; 68   |typedef struct UINT128_3500 {   
                            10485 ; 69   |    int val[6];     
                            10486 ; 70   |} UINT128_3500;
                            10487 ; 71   |
                            10488 ; 72   |#define UINT128   UINT128_3500
                            10489 ; 73   |
                            10490 ; 74   |// Little endian word packed byte strings:   
                            10491 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10492 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10493 ; 77   |// Little endian word packed byte strings:   
                            10494 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10495 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10496 ; 80   |
                            10497 ; 81   |// Declare Memory Spaces To Use When Coding
                            10498 ; 82   |// A. Sector Buffers
                            10499 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10500 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10501 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10502 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10503 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10504 ; 88   |// B. Media DDI Memory
                            10505 ; 89   |#define MEDIA_DDI_MEM _Y
                            10506 ; 90   |
                            10507 ; 91   |
                            10508 ; 92   |
                            10509 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10510 ; 94   |// Examples of circular pointers:
                            10511 ; 95   |//    INT CIRC cpiVarName
                            10512 ; 96   |//    DWORD CIRC cpdwVarName
                            10513 ; 97   |
                            10514 ; 98   |#define RETCODE INT                 // rcVarName
                            10515 ; 99   |
                            10516 ; 100  |// generic bitfield structure
                            10517 ; 101  |struct Bitfield {
                            10518 ; 102  |    unsigned int B0  :1;
                            10519 ; 103  |    unsigned int B1  :1;
                            10520 ; 104  |    unsigned int B2  :1;
                            10521 ; 105  |    unsigned int B3  :1;
                            10522 ; 106  |    unsigned int B4  :1;
                            10523 ; 107  |    unsigned int B5  :1;
                            10524 ; 108  |    unsigned int B6  :1;
                            10525 ; 109  |    unsigned int B7  :1;
                            10526 ; 110  |    unsigned int B8  :1;
                            10527 ; 111  |    unsigned int B9  :1;
                            10528 ; 112  |    unsigned int B10 :1;
                            10529 ; 113  |    unsigned int B11 :1;
                            10530 ; 114  |    unsigned int B12 :1;
                            10531 ; 115  |    unsigned int B13 :1;
                            10532 ; 116  |    unsigned int B14 :1;
                            10533 ; 117  |    unsigned int B15 :1;
                            10534 ; 118  |    unsigned int B16 :1;
                            10535 ; 119  |    unsigned int B17 :1;
                            10536 ; 120  |    unsigned int B18 :1;
                            10537 ; 121  |    unsigned int B19 :1;
                            10538 ; 122  |    unsigned int B20 :1;
                            10539 ; 123  |    unsigned int B21 :1;
                            10540 ; 124  |    unsigned int B22 :1;
                            10541 ; 125  |    unsigned int B23 :1;
                            10542 ; 126  |};
                            10543 ; 127  |
                            10544 ; 128  |union BitInt {
                            10545 ; 129  |        struct Bitfield B;
                            10546 ; 130  |        int        I;
                            10547 ; 131  |};
                            10548 ; 132  |
                            10549 ; 133  |#define MAX_MSG_LENGTH 10
                            10550 ; 134  |struct CMessage
                            10551 ; 135  |{
                            10552 ; 136  |        unsigned int m_uLength;
                            10553 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10554 ; 138  |};
                            10555 ; 139  |
                            10556 ; 140  |typedef struct {
                            10557 ; 141  |    WORD m_wLength;
                            10558 ; 142  |    WORD m_wMessage;
                            10559 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10560 ; 144  |} Message;
                            10561 ; 145  |
                            10562 ; 146  |struct MessageQueueDescriptor
                            10563 ; 147  |{
                            10564 ; 148  |        int *m_pBase;
                            10565 ; 149  |        int m_iModulo;
                            10566 ; 150  |        int m_iSize;
                            10567 ; 151  |        int *m_pHead;
                            10568 ; 152  |        int *m_pTail;
                            10569 ; 153  |};
                            10570 ; 154  |
                            10571 ; 155  |struct ModuleEntry
                            10572 ; 156  |{
                            10573 ; 157  |    int m_iSignaledEventMask;
                            10574 ; 158  |    int m_iWaitEventMask;
                            10575 ; 159  |    int m_iResourceOfCode;
                            10576 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10577 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            10578 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10579 ; 163  |    int m_uTimeOutHigh;
                            10580 ; 164  |    int m_uTimeOutLow;
                            10581 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10582 ; 166  |};
                            10583 ; 167  |
                            10584 ; 168  |union WaitMask{
                            10585 ; 169  |    struct B{
                            10586 ; 170  |        unsigned int m_bNone     :1;
                            10587 ; 171  |        unsigned int m_bMessage  :1;
                            10588 ; 172  |        unsigned int m_bTimer    :1;
                            10589 ; 173  |        unsigned int m_bButton   :1;
                            10590 ; 174  |    } B;
                            10591 ; 175  |    int I;
                            10592 ; 176  |} ;
                            10593 ; 177  |
                            10594 ; 178  |
                            10595 ; 179  |struct Button {
                            10596 ; 180  |        WORD wButtonEvent;
                            10597 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10598 ; 182  |};
                            10599 ; 183  |
                            10600 ; 184  |struct Message {
                            10601 ; 185  |        WORD wMsgLength;
                            10602 ; 186  |        WORD wMsgCommand;
                            10603 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10604 ; 188  |};
                            10605 ; 189  |
                            10606 ; 190  |union EventTypes {
                            10607 ; 191  |        struct CMessage msg;
                            10608 ; 192  |        struct Button Button ;
                            10609 ; 193  |        struct Message Message;
                            10610 ; 194  |};
                            10611 ; 195  |
                            10612 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10613 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10614 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10615 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10616 ; 200  |
                            10617 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10618 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10619 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10620 ; 204  |
                            10621 ; 205  |#if DEBUG
                            10622 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10623 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10624 ; 208  |#else 
                            10625 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            10626 ; 210  |#define DebugBuildAssert(x)    
                            10627 ; 211  |#endif
                            10628 ; 212  |
                            10629 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10630 ; 214  |//  #pragma asm
                            10631 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10632 ; 216  |//  #pragma endasm
                            10633 ; 217  |
                            10634 ; 218  |
                            10635 ; 219  |#ifdef COLOR_262K
                            10636 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            10637 ; 221  |#elif defined(COLOR_65K)
                            10638 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            10639 ; 223  |#else
                            10640 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            10641 ; 225  |#endif
                            10642 ; 226  |    
                            10643 ; 227  |#endif // #ifndef _TYPES_H
                            10644 
                            10646 
                            10647 ; 29   |
                            10648 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10649 ; 31   |//   TIMER STMP Registers 
                            10650 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10651 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            10652 ; 34   |
                            10653 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            10654 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            10655 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            10656 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            10657 ; 39   |
                            10658 ; 40   |#define HW_TIMER_NUMBER_0 0
                            10659 ; 41   |#define HW_TIMER_NUMBER_1 1
                            10660 ; 42   |#define HW_TIMER_NUMBER_2 2
                            10661 ; 43   |#define HW_TIMER_NUMBER_3 3
                            10662 ; 44   |
                            10663 ; 45   |#define HW_TMRCSR 0
                            10664 ; 46   |#define HW_TMRCNTR 1
                            10665 ; 47   |
                            10666 ; 48   |
                            10667 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            10668 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            10669 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            10670 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            10671 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            10672 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            10673 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            10674 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            10675 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            10676 ; 58   |
                            10677 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            10678 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            10679 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            10680 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            10681 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            10682 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            10683 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            10684 ; 66   |
                            10685 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CSR_TIMER_ENABLE_BITPOS)
                            10686 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CSR_TIMER_INT_EN_BITPOS)
                            10687 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BITPOS)
                            10688 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0CSR_TIMER_CONTROL_BITPOS)
                            10689 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CSR_TIMER_STATUS_BITPOS)
                            10690 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TIMER_MODE_BITPOS)
                            10691 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS)
                            10692 ; 74   |
                            10693 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            10694 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            10695 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            10696 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            10697 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            10698 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            10699 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            10700 ; 82   |
                            10701 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            10702 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            10703 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            10704 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            10705 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            10706 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            10707 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            10708 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            10709 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            10710 ; 92   |
                            10711 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            10712 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            10713 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            10714 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            10715 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            10716 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            10717 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            10718 ; 100  |
                            10719 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CSR_TIMER_ENABLE_BITPOS)
                            10720 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CSR_TIMER_INT_EN_BITPOS)
                            10721 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BITPOS)
                            10722 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1CSR_TIMER_CONTROL_BITPOS)
                            10723 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CSR_TIMER_STATUS_BITPOS)
                            10724 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TIMER_MODE_BITPOS)
                            10725 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS)
                            10726 ; 108  |
                            10727 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            10728 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            10729 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            10730 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            10731 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            10732 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            10733 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            10734 ; 116  |
                            10735 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            10736 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            10737 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            10738 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            10739 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            10740 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            10741 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            10742 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            10743 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            10744 ; 126  |
                            10745 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            10746 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            10747 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            10748 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            10749 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            10750 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            10751 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            10752 ; 134  |
                            10753 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CSR_TIMER_ENABLE_BITPOS)
                            10754 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CSR_TIMER_INT_EN_BITPOS)
                            10755 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BITPOS)
                            10756 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2CSR_TIMER_CONTROL_BITPOS)
                            10757 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CSR_TIMER_STATUS_BITPOS)
                            10758 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TIMER_MODE_BITPOS)
                            10759 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS)
                            10760 ; 142  |
                            10761 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            10762 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            10763 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            10764 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            10765 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            10766 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            10767 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            10768 ; 150  |
                            10769 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            10770 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            10771 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            10772 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            10773 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            10774 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            10775 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            10776 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            10777 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            10778 ; 160  |
                            10779 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            10780 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            10781 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            10782 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            10783 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            10784 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            10785 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            10786 ; 168  |
                            10787 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CSR_TIMER_ENABLE_BITPOS)
                            10788 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CSR_TIMER_INT_EN_BITPOS)
                            10789 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BITPOS)
                            10790 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3CSR_TIMER_CONTROL_BITPOS)
                            10791 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CSR_TIMER_STATUS_BITPOS)
                            10792 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TIMER_MODE_BITPOS)
                            10793 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS)
                            10794 ; 176  |
                            10795 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            10796 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            10797 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            10798 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            10799 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            10800 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            10801 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            10802 ; 184  |
                            10803 ; 185  |typedef union               
                            10804 ; 186  |{
                            10805 ; 187  |    struct {
                            10806 ; 188  |       int TIMER_ENABLE              :1;
                            10807 ; 189  |       int TIMER_INT_EN              :1;
                            10808 ; 190  |       int INVERT                    :1;
                            10809 ; 191  |       int TIMER_CONTROL             :3;
                            10810 ; 192  |       int RSVD0                     :1;
                            10811 ; 193  |       int TIMER_STATUS              :1;
                            10812 ; 194  |       int TIMER_MODE                :2;
                            10813 ; 195  |       int RSVD1                     :13;
                            10814 ; 196  |       int CLKGT                     :1;
                            10815 ; 197  |    } B;
                            10816 ; 198  |    int I;
                            10817 ; 199  |} timercsr_type;
                            10818 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /* Timer0 Control Status Register */
                            10819 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /* Timer1 Control Status Register */
                            10820 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /* Timer2 Control Status Register */
                            10821 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /* Timer3 Control Status Register */
                            10822 ; 204  |
                            10823 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            10824 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            10825 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            10826 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            10827 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BITPOS)
                            10828 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            10829 ; 211  |
                            10830 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            10831 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            10832 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            10833 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            10834 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BITPOS)
                            10835 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            10836 ; 218  |
                            10837 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            10838 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            10839 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            10840 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            10841 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BITPOS)
                            10842 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            10843 ; 225  |
                            10844 ; 226  |typedef union               
                            10845 ; 227  |{
                            10846 ; 228  |    struct {
                            10847 ; 229  |       int COUNT                    :24;
                            10848 ; 230  |    } B;
                            10849 ; 231  |    int I;
                            10850 ; 232  |} tmrcntr_type;
                            10851 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /* Timer0 Count Register */
                            10852 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /* Timer1 Count Register */
                            10853 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /* Timer2 Count Register */
                            10854 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /* Timer3 Count Register */
                            10855 ; 237  |
                            10856 ; 238  |
                            10857 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *******************************
                            10858 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code without needing 
                            10859 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            10860 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            10861 ; 243  |
                            10862 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            10863 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            10864 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            10865 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            10866 ; 248  |
                            10867 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            10868 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            10869 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10870 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            10871 ; 253  |
                            10872 ; 254  |// Timer enable
                            10873 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            10874 ; 256  |// Timer clock gating control
                            10875 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            10876 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            10877 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            10878 ; 260  |#endif
                            10879 ; 261  |
                            10880 ; 262  |
                            10881 ; 263  |
                            10882 ; 264  |
                            10883 
                            10885 
                            10886 ; 36   |#include "regsusb20.h"
                            10887 
                            10889 
                            10890 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10891 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10892 ; 3    |//;  File        : regsusb20ip.inc
                            10893 ; 4    |//;  Description : USB20 IP Register definition
                            10894 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10895 ; 6    |
                            10896 ; 7    |// The following naming conventions are followed in this file.
                            10897 ; 8    |// All registers are named using the format...
                            10898 ; 9    |//     HW_<module>_<regname>
                            10899 ; 10   |// where <module> is the module name which can be any of the following...
                            10900 ; 11   |//     USB20
                            10901 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10902 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10903 ; 14   |// that module)
                            10904 ; 15   |// <regname> is the specific register within that module
                            10905 ; 16   |// We also define the following...
                            10906 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10907 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10908 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10909 ; 20   |// which does something else, and
                            10910 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10911 ; 22   |// which does something else.
                            10912 ; 23   |// Other rules
                            10913 ; 24   |//     All caps
                            10914 ; 25   |//     Numeric identifiers start at 0
                            10915 ; 26   |
                            10916 ; 27   |#if !(defined(regsusb20inc))
                            10917 ; 28   |#define regsusb20inc 1
                            10918 ; 29   |
                            10919 ; 30   |#include "types.h"
                            10920 
                            10922 
                            10923 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10924 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10925 ; 3    |//
                            10926 ; 4    |// Filename: types.h
                            10927 ; 5    |// Description: Standard data types
                            10928 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10929 ; 7    |
                            10930 ; 8    |#ifndef _TYPES_H
                            10931 ; 9    |#define _TYPES_H
                            10932 ; 10   |
                            10933 ; 11   |// TODO:  move this outta here!
                            10934 ; 12   |#if !defined(NOERROR)
                            10935 ; 13   |#define NOERROR 0
                            10936 ; 14   |#define SUCCESS 0
                            10937 ; 15   |#endif 
                            10938 ; 16   |#if !defined(SUCCESS)
                            10939 ; 17   |#define SUCCESS  0
                            10940 ; 18   |#endif
                            10941 ; 19   |#if !defined(ERROR)
                            10942 ; 20   |#define ERROR   -1
                            10943 ; 21   |#endif
                            10944 ; 22   |#if !defined(FALSE)
                            10945 ; 23   |#define FALSE 0
                            10946 ; 24   |#endif
                            10947 ; 25   |#if !defined(TRUE)
                            10948 ; 26   |#define TRUE  1
                            10949 ; 27   |#endif
                            10950 ; 28   |
                            10951 ; 29   |#if !defined(NULL)
                            10952 ; 30   |#define NULL 0
                            10953 ; 31   |#endif
                            10954 ; 32   |
                            10955 ; 33   |#define MAX_INT     0x7FFFFF
                            10956 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10957 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10958 ; 36   |#define MAX_ULONG   (-1) 
                            10959 ; 37   |
                            10960 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10961 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10962 ; 40   |
                            10963 ; 41   |
                            10964 ; 42   |#define BYTE    unsigned char       // btVarName
                            10965 ; 43   |#define CHAR    signed char         // cVarName
                            10966 ; 44   |#define USHORT  unsigned short      // usVarName
                            10967 ; 45   |#define SHORT   unsigned short      // sVarName
                            10968 ; 46   |#define WORD    unsigned int        // wVarName
                            10969 ; 47   |#define INT     signed int          // iVarName
                            10970 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10971 ; 49   |#define LONG    signed long         // lVarName
                            10972 ; 50   |#define BOOL    unsigned int        // bVarName
                            10973 ; 51   |#define FRACT   _fract              // frVarName
                            10974 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10975 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10976 ; 54   |#define FLOAT   float               // fVarName
                            10977 ; 55   |#define DBL     double              // dVarName
                            10978 ; 56   |#define ENUM    enum                // eVarName
                            10979 ; 57   |#define CMX     _complex            // cmxVarName
                            10980 ; 58   |typedef WORD UCS3;                   // 
                            10981 ; 59   |
                            10982 ; 60   |#define UINT16  unsigned short
                            10983 ; 61   |#define UINT8   unsigned char   
                            10984 ; 62   |#define UINT32  unsigned long
                            10985 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10986 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            10987 ; 65   |#define WCHAR   UINT16
                            10988 ; 66   |
                            10989 ; 67   |//UINT128 is 16 bytes or 6 words
                            10990 ; 68   |typedef struct UINT128_3500 {   
                            10991 ; 69   |    int val[6];     
                            10992 ; 70   |} UINT128_3500;
                            10993 ; 71   |
                            10994 ; 72   |#define UINT128   UINT128_3500
                            10995 ; 73   |
                            10996 ; 74   |// Little endian word packed byte strings:   
                            10997 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10998 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10999 ; 77   |// Little endian word packed byte strings:   
                            11000 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11001 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11002 ; 80   |
                            11003 ; 81   |// Declare Memory Spaces To Use When Coding
                            11004 ; 82   |// A. Sector Buffers
                            11005 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11006 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11007 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11008 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11009 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11010 ; 88   |// B. Media DDI Memory
                            11011 ; 89   |#define MEDIA_DDI_MEM _Y
                            11012 ; 90   |
                            11013 ; 91   |
                            11014 ; 92   |
                            11015 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11016 ; 94   |// Examples of circular pointers:
                            11017 ; 95   |//    INT CIRC cpiVarName
                            11018 ; 96   |//    DWORD CIRC cpdwVarName
                            11019 ; 97   |
                            11020 ; 98   |#define RETCODE INT                 // rcVarName
                            11021 ; 99   |
                            11022 ; 100  |// generic bitfield structure
                            11023 ; 101  |struct Bitfield {
                            11024 ; 102  |    unsigned int B0  :1;
                            11025 ; 103  |    unsigned int B1  :1;
                            11026 ; 104  |    unsigned int B2  :1;
                            11027 ; 105  |    unsigned int B3  :1;
                            11028 ; 106  |    unsigned int B4  :1;
                            11029 ; 107  |    unsigned int B5  :1;
                            11030 ; 108  |    unsigned int B6  :1;
                            11031 ; 109  |    unsigned int B7  :1;
                            11032 ; 110  |    unsigned int B8  :1;
                            11033 ; 111  |    unsigned int B9  :1;
                            11034 ; 112  |    unsigned int B10 :1;
                            11035 ; 113  |    unsigned int B11 :1;
                            11036 ; 114  |    unsigned int B12 :1;
                            11037 ; 115  |    unsigned int B13 :1;
                            11038 ; 116  |    unsigned int B14 :1;
                            11039 ; 117  |    unsigned int B15 :1;
                            11040 ; 118  |    unsigned int B16 :1;
                            11041 ; 119  |    unsigned int B17 :1;
                            11042 ; 120  |    unsigned int B18 :1;
                            11043 ; 121  |    unsigned int B19 :1;
                            11044 ; 122  |    unsigned int B20 :1;
                            11045 ; 123  |    unsigned int B21 :1;
                            11046 ; 124  |    unsigned int B22 :1;
                            11047 ; 125  |    unsigned int B23 :1;
                            11048 ; 126  |};
                            11049 ; 127  |
                            11050 ; 128  |union BitInt {
                            11051 ; 129  |        struct Bitfield B;
                            11052 ; 130  |        int        I;
                            11053 ; 131  |};
                            11054 ; 132  |
                            11055 ; 133  |#define MAX_MSG_LENGTH 10
                            11056 ; 134  |struct CMessage
                            11057 ; 135  |{
                            11058 ; 136  |        unsigned int m_uLength;
                            11059 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11060 ; 138  |};
                            11061 ; 139  |
                            11062 ; 140  |typedef struct {
                            11063 ; 141  |    WORD m_wLength;
                            11064 ; 142  |    WORD m_wMessage;
                            11065 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11066 ; 144  |} Message;
                            11067 ; 145  |
                            11068 ; 146  |struct MessageQueueDescriptor
                            11069 ; 147  |{
                            11070 ; 148  |        int *m_pBase;
                            11071 ; 149  |        int m_iModulo;
                            11072 ; 150  |        int m_iSize;
                            11073 ; 151  |        int *m_pHead;
                            11074 ; 152  |        int *m_pTail;
                            11075 ; 153  |};
                            11076 ; 154  |
                            11077 ; 155  |struct ModuleEntry
                            11078 ; 156  |{
                            11079 ; 157  |    int m_iSignaledEventMask;
                            11080 ; 158  |    int m_iWaitEventMask;
                            11081 ; 159  |    int m_iResourceOfCode;
                            11082 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11083 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            11084 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11085 ; 163  |    int m_uTimeOutHigh;
                            11086 ; 164  |    int m_uTimeOutLow;
                            11087 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11088 ; 166  |};
                            11089 ; 167  |
                            11090 ; 168  |union WaitMask{
                            11091 ; 169  |    struct B{
                            11092 ; 170  |        unsigned int m_bNone     :1;
                            11093 ; 171  |        unsigned int m_bMessage  :1;
                            11094 ; 172  |        unsigned int m_bTimer    :1;
                            11095 ; 173  |        unsigned int m_bButton   :1;
                            11096 ; 174  |    } B;
                            11097 ; 175  |    int I;
                            11098 ; 176  |} ;
                            11099 ; 177  |
                            11100 ; 178  |
                            11101 ; 179  |struct Button {
                            11102 ; 180  |        WORD wButtonEvent;
                            11103 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11104 ; 182  |};
                            11105 ; 183  |
                            11106 ; 184  |struct Message {
                            11107 ; 185  |        WORD wMsgLength;
                            11108 ; 186  |        WORD wMsgCommand;
                            11109 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11110 ; 188  |};
                            11111 ; 189  |
                            11112 ; 190  |union EventTypes {
                            11113 ; 191  |        struct CMessage msg;
                            11114 ; 192  |        struct Button Button ;
                            11115 ; 193  |        struct Message Message;
                            11116 ; 194  |};
                            11117 ; 195  |
                            11118 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11119 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11120 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11121 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11122 ; 200  |
                            11123 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11124 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11125 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11126 ; 204  |
                            11127 ; 205  |#if DEBUG
                            11128 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11129 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11130 ; 208  |#else 
                            11131 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            11132 ; 210  |#define DebugBuildAssert(x)    
                            11133 ; 211  |#endif
                            11134 ; 212  |
                            11135 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11136 ; 214  |//  #pragma asm
                            11137 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11138 ; 216  |//  #pragma endasm
                            11139 ; 217  |
                            11140 ; 218  |
                            11141 ; 219  |#ifdef COLOR_262K
                            11142 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            11143 ; 221  |#elif defined(COLOR_65K)
                            11144 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            11145 ; 223  |#else
                            11146 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            11147 ; 225  |#endif
                            11148 ; 226  |    
                            11149 ; 227  |#endif // #ifndef _TYPES_H
                            11150 
                            11152 
                            11153 ; 31   |
                            11154 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11155 ; 33   |//   USB2.0 STMP Registers 
                            11156 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11157 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            11158 ; 36   |
                            11159 ; 37   |
                            11160 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            11161 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            11162 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            11163 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            11164 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            11165 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            11166 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            11167 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            11168 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            11169 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            11170 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            11171 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            11172 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            11173 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            11174 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            11175 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            11176 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            11177 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            11178 ; 56   |
                            11179 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            11180 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            11181 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            11182 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            11183 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            11184 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            11185 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            11186 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            11187 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            11188 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            11189 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            11190 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            11191 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            11192 ; 70   |
                            11193 ; 71   |
                            11194 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            11195 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            11196 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            11197 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            11198 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            11199 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            11200 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            11201 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            11202 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            11203 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            11204 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            11205 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            11206 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            11207 ; 85   |
                            11208 ; 86   |typedef union               
                            11209 ; 87   |{
                            11210 ; 88   |    struct {
                            11211 ; 89   |        int USBEN          :1;
                            11212 ; 90   |        int WAKEUPIRQ      :1;
                            11213 ; 91   |        int WAKEUPIE       :1;
                            11214 ; 92   |        int VBUSCXIRQ      :1;
                            11215 ; 93   |        int VBUSCXIE       :1;
                            11216 ; 94   |        int VBUSDISCXIRQ   :1;
                            11217 ; 95   |        int VBUSDISCXIE    :1;
                            11218 ; 96   |        int CLKOFF         :1;
                            11219 ; 97   |        int SUSP           :1;
                            11220 ; 98   |        int SUSPF          :1;
                            11221 ; 99   |        int UTMITST        :1;
                            11222 ; 100  |        int ARCCONNECT     :1;
                            11223 ; 101  |        int PLUGGEDIN_EN   :1;
                            11224 ; 102  |        int PLUGGEDIN      :1;
                            11225 ; 103  |        int                :8;
                            11226 ; 104  |        int HOSTDISCONNECT :1;
                            11227 ; 105  |        int VBUSSENSE      :1;
                            11228 ; 106  |    } B;
                            11229 ; 107  |    int I;
                            11230 ; 108  |} usbcsr_type;
                            11231 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control / Status Register */
                            11232 ; 110  |
                            11233 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            11234 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            11235 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            11236 ; 114  |
                            11237 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            11238 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            11239 ; 117  |
                            11240 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            11241 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            11242 ; 120  |
                            11243 ; 121  |typedef union               
                            11244 ; 122  |{
                            11245 ; 123  |    struct {
                            11246 ; 124  |        int ADD            :16;
                            11247 ; 125  |        int MEM            :2;
                            11248 ; 126  |        int                :6;
                            11249 ; 127  |    } B;
                            11250 ; 128  |    int I;
                            11251 ; 129  |} usbdmaoff_type;
                            11252 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            11253 ; 131  |
                            11254 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            11255 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            11256 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            11257 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            11258 ; 136  |
                            11259 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11260 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11261 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11262 ; 140  |
                            11263 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11264 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11265 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11266 ; 144  |
                            11267 ; 145  |typedef union               
                            11268 ; 146  |{
                            11269 ; 147  |    struct {
                            11270 ; 148  |        int ADD            :9;
                            11271 ; 149  |        int                :7;
                            11272 ; 150  |        int RWB            :1;
                            11273 ; 151  |        int                :14;
                            11274 ; 152  |        int KICK           :1;
                            11275 ; 153  |    } B;
                            11276 ; 154  |    int I;
                            11277 ; 155  |} usbarcaccess_type;
                            11278 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11279 ; 157  |
                            11280 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            11281 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11282 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11283 ; 161  |
                            11284 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11285 ; 163  |
                            11286 ; 164  |typedef union               
                            11287 ; 165  |{
                            11288 ; 166  |    struct {
                            11289 ; 167  |        int DATA           :16;
                            11290 ; 168  |        int                :8;
                            11291 ; 169  |    } B;
                            11292 ; 170  |    int I;
                            11293 ; 171  |} usbarcdatalow_type;
                            11294 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                            11295 ; 173  |
                            11296 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11297 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11298 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11299 ; 177  |
                            11300 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11301 ; 179  |
                            11302 ; 180  |typedef union               
                            11303 ; 181  |{
                            11304 ; 182  |    struct {
                            11305 ; 183  |        int DATA           :16;
                            11306 ; 184  |        int                :8;
                            11307 ; 185  |    } B;
                            11308 ; 186  |    int I;
                            11309 ; 187  |} usbarcdatahigh_type;
                            11310 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))    
                            11311 ; 189  |
                            11312 ; 190  |
                            11313 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11314 ; 192  |//   USB2.0 ARC Registers 
                            11315 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11316 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11317 ; 195  |
                            11318 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            11319 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11320 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11321 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11322 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            11323 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11324 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11325 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11326 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11327 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11328 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11329 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11330 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11331 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11332 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11333 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11334 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11335 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11336 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11337 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11338 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11339 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11340 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            11341 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11342 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11343 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11344 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11345 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11346 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11347 ; 225  |
                            11348 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11349 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11350 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11351 ; 229  |
                            11352 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11353 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11354 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            11355 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11356 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11357 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11358 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11359 ; 237  |
                            11360 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11361 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11362 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            11363 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11364 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11365 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11366 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11367 ; 245  |
                            11368 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11369 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            11370 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            11371 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11372 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11373 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11374 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11375 ; 253  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11376 ; 254  |typedef union               
                            11377 ; 255  |{
                            11378 ; 256  |    struct {
                            11379 ; 257  |        int N_PORTS         :4;
                            11380 ; 258  |        int PPC             :1;
                            11381 ; 259  |        int                 :3;
                            11382 ; 260  |        int N_PCC           :4;
                            11383 ; 261  |        int N_CC            :4;
                            11384 ; 262  |        int PI              :1;
                            11385 ; 263  |        int                 :3;
                            11386 ; 264  |        int N_PTT           :4;
                            11387 ; 265  |        int N_TT            :4;
                            11388 ; 266  |        int                 :20;
                            11389 ; 267  |    } B;
                            11390 ; 268  |    DWORD I;
                            11391 ; 269  |} hcsparams_type;
                            11392 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11393 ; 271  |
                            11394 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11395 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11396 ; 274  |
                            11397 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11398 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11399 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11400 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11401 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11402 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            11403 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11404 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11405 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11406 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11407 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11408 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11409 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11410 ; 288  |
                            11411 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11412 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11413 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11414 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11415 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11416 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11417 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11418 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11419 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11420 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11421 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11422 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11423 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11424 ; 302  |
                            11425 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11426 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11427 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11428 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11429 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11430 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11431 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11432 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11433 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11434 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11435 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11436 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11437 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11438 ; 316  |
                            11439 ; 317  |typedef union               
                            11440 ; 318  |{
                            11441 ; 319  |    struct {
                            11442 ; 320  |        int RS              :1;
                            11443 ; 321  |        int RST             :1;
                            11444 ; 322  |        int FS0             :1;
                            11445 ; 323  |        int FS1             :1;
                            11446 ; 324  |        int PSE             :1;
                            11447 ; 325  |        int ASE             :1;
                            11448 ; 326  |        int IAA             :1;
                            11449 ; 327  |        int LR              :1;
                            11450 ; 328  |        int ASP0            :1;
                            11451 ; 329  |        int ASP1            :1;
                            11452 ; 330  |        int                 :1;
                            11453 ; 331  |        int ASPE            :1;
                            11454 ; 332  |        int                 :3;
                            11455 ; 333  |        int FS2             :1;
                            11456 ; 334  |        int ITC             :8;
                            11457 ; 335  |        int                 :24;
                            11458 ; 336  |    } B;
                            11459 ; 337  |    DWORD I;
                            11460 ; 338  |} usbcmd_type;
                            11461 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11462 ; 340  |
                            11463 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11464 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            11465 ; 343  |
                            11466 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11467 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11468 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11469 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11470 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11471 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11472 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11473 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11474 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11475 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11476 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11477 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11478 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11479 ; 357  |
                            11480 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11481 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11482 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11483 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11484 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11485 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11486 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            11487 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11488 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11489 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11490 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11491 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11492 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11493 ; 371  |
                            11494 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11495 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11496 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11497 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11498 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11499 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11500 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11501 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            11502 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            11503 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            11504 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            11505 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            11506 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            11507 ; 385  |
                            11508 ; 386  |
                            11509 ; 387  |typedef union               
                            11510 ; 388  |{
                            11511 ; 389  |    struct {
                            11512 ; 390  |        int UI              :1;
                            11513 ; 391  |        int UEI             :1;
                            11514 ; 392  |        int PCI             :1;
                            11515 ; 393  |        int FRI             :1;
                            11516 ; 394  |        int SEI             :1;
                            11517 ; 395  |        int AAI             :1;
                            11518 ; 396  |        int URI             :1;
                            11519 ; 397  |        int STI             :1;
                            11520 ; 398  |        int SLI             :1;
                            11521 ; 399  |        int                 :3;
                            11522 ; 400  |        int HCH             :1;
                            11523 ; 401  |        int RCL             :1;
                            11524 ; 402  |        int PS              :1;
                            11525 ; 403  |        int AS              :1;
                            11526 ; 404  |        int                 :24;
                            11527 ; 405  |    } B;
                            11528 ; 406  |    DWORD I;
                            11529 ; 407  |} usbsts_type;
                            11530 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            11531 ; 409  |
                            11532 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            11533 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            11534 ; 412  |
                            11535 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            11536 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            11537 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            11538 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            11539 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            11540 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            11541 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            11542 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            11543 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            11544 ; 422  |
                            11545 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            11546 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            11547 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            11548 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            11549 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            11550 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            11551 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            11552 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            11553 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            11554 ; 432  |
                            11555 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            11556 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            11557 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            11558 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            11559 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            11560 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            11561 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            11562 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            11563 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            11564 ; 442  |
                            11565 ; 443  |
                            11566 ; 444  |typedef union               
                            11567 ; 445  |{
                            11568 ; 446  |    struct {
                            11569 ; 447  |        int UE              :1;
                            11570 ; 448  |        int UEE             :1;
                            11571 ; 449  |        int PCE             :1;
                            11572 ; 450  |        int FRE             :1;
                            11573 ; 451  |        int SEE             :1;
                            11574 ; 452  |        int AAE             :1;
                            11575 ; 453  |        int URE             :1;
                            11576 ; 454  |        int STE             :1;
                            11577 ; 455  |        int SLE             :1;
                            11578 ; 456  |        int                 :39;
                            11579 ; 457  |    } B;
                            11580 ; 458  |    DWORD I;
                            11581 ; 459  |} usbintr_type;
                            11582 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            11583 ; 461  |
                            11584 ; 462  |
                            11585 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            11586 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            11587 ; 465  |
                            11588 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            11589 ; 467  |
                            11590 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            11591 ; 469  |
                            11592 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            11593 ; 471  |
                            11594 ; 472  |typedef union               
                            11595 ; 473  |{
                            11596 ; 474  |    struct {
                            11597 ; 475  |        int                 :25;
                            11598 ; 476  |        int ADD             :7;
                            11599 ; 477  |        int                 :16;
                            11600 ; 478  |    } B;
                            11601 ; 479  |    DWORD I;
                            11602 ; 480  |} devaddr_type;
                            11603 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            11604 ; 482  |
                            11605 ; 483  |
                            11606 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            11607 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            11608 ; 486  |
                            11609 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            11610 ; 488  |
                            11611 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            11612 ; 490  |
                            11613 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            11614 ; 492  |
                            11615 ; 493  |typedef union               
                            11616 ; 494  |{
                            11617 ; 495  |    struct {
                            11618 ; 496  |        int                 :10;
                            11619 ; 497  |        int ADD             :22;
                            11620 ; 498  |        int                 :16;
                            11621 ; 499  |    } B;
                            11622 ; 500  |    DWORD I;
                            11623 ; 501  |} endptlistaddr_type;
                            11624 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158))    
                            11625 ; 503  |
                            11626 ; 504  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11627 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            11628 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            11629 ; 507  |
                            11630 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            11631 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            11632 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            11633 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            11634 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            11635 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            11636 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            11637 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            11638 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            11639 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            11640 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            11641 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            11642 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            11643 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            11644 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            11645 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            11646 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            11647 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            11648 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            11649 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            11650 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            11651 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            11652 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            11653 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            11654 ; 532  |
                            11655 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            11656 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            11657 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            11658 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            11659 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            11660 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            11661 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            11662 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            11663 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            11664 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            11665 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            11666 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            11667 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            11668 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            11669 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            11670 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            11671 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            11672 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            11673 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            11674 ; 552  |
                            11675 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            11676 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            11677 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            11678 ; 556  |
                            11679 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            11680 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            11681 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            11682 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            11683 ; 561  |
                            11684 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            11685 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            11686 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            11687 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            11688 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            11689 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            11690 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            11691 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            11692 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            11693 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            11694 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            11695 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            11696 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            11697 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            11698 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            11699 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            11700 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            11701 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            11702 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            11703 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            11704 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            11705 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            11706 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            11707 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            11708 ; 586  |
                            11709 ; 587  |typedef union               
                            11710 ; 588  |{
                            11711 ; 589  |    struct {
                            11712 ; 590  |        int CCS             :1;
                            11713 ; 591  |        int CSC             :1;
                            11714 ; 592  |        int PE              :1;
                            11715 ; 593  |        int PEC             :1;
                            11716 ; 594  |        int OCA             :1;
                            11717 ; 595  |        int OCC             :1;
                            11718 ; 596  |        int FPR             :1;
                            11719 ; 597  |        int SUSP            :1;
                            11720 ; 598  |        int PR              :1;
                            11721 ; 599  |        int HSP             :1;
                            11722 ; 600  |        int LS              :2;
                            11723 ; 601  |        int PP              :1;
                            11724 ; 602  |        int PO              :1;
                            11725 ; 603  |        int PIC             :2;
                            11726 ; 604  |        int PTC             :4;
                            11727 ; 605  |        int WKCN            :1;
                            11728 ; 606  |        int WKDS            :1;
                            11729 ; 607  |        int WKOC            :1;
                            11730 ; 608  |        int PHCD            :1;
                            11731 ; 609  |        int PFSC            :1;
                            11732 ; 610  |        int                 :1;
                            11733 ; 611  |        int PSPD            :2;
                            11734 ; 612  |        int                 :1;
                            11735 ; 613  |        int PTW             :1;
                            11736 ; 614  |        int STS             :1;
                            11737 ; 615  |        int PTS             :1;
                            11738 ; 616  |        int                 :16;
                            11739 ; 617  |    } B;
                            11740 ; 618  |    DWORD I;
                            11741 ; 619  |} portsc1_type;
                            11742 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            11743 ; 621  |
                            11744 ; 622  |
                            11745 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            11746 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            11747 ; 625  |
                            11748 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            11749 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            11750 ; 628  |
                            11751 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            11752 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            11753 ; 631  |
                            11754 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            11755 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            11756 ; 634  |
                            11757 ; 635  |typedef union               
                            11758 ; 636  |{
                            11759 ; 637  |    struct {
                            11760 ; 638  |        int CM              :2;
                            11761 ; 639  |        int ES              :1;
                            11762 ; 640  |        int                 :46;
                            11763 ; 641  |    } B;
                            11764 ; 642  |    DWORD I;
                            11765 ; 643  |} usbmode_type;
                            11766 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            11767 ; 645  |
                            11768 ; 646  |
                            11769 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            11770 ; 648  |//  The following endpoint equates are common for the following registers
                            11771 ; 649  |
                            11772 ; 650  |#define ENDPOINT0_BITPOS (0)
                            11773 ; 651  |#define ENDPOINT1_BITPOS (1)
                            11774 ; 652  |#define ENDPOINT2_BITPOS (2)
                            11775 ; 653  |#define ENDPOINT3_BITPOS (3)
                            11776 ; 654  |#define ENDPOINT4_BITPOS (4)
                            11777 ; 655  |#define ENDPOINT5_BITPOS (5)
                            11778 ; 656  |#define ENDPOINT6_BITPOS (6)
                            11779 ; 657  |#define ENDPOINT7_BITPOS (7)
                            11780 ; 658  |#define ENDPOINT8_BITPOS (8)
                            11781 ; 659  |#define ENDPOINT9_BITPOS (9)
                            11782 ; 660  |#define ENDPOINT10_BITPOS (10)
                            11783 ; 661  |#define ENDPOINT11_BITPOS (11)
                            11784 ; 662  |#define ENDPOINT12_BITPOS (12)
                            11785 ; 663  |#define ENDPOINT13_BITPOS (13)
                            11786 ; 664  |#define ENDPOINT14_BITPOS (14)
                            11787 ; 665  |#define ENDPOINT15_BITPOS (15)
                            11788 ; 666  |
                            11789 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            11790 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            11791 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            11792 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            11793 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            11794 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            11795 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            11796 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            11797 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            11798 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            11799 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            11800 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            11801 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            11802 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            11803 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            11804 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            11805 ; 683  |
                            11806 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            11807 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            11808 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            11809 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            11810 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            11811 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            11812 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            11813 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            11814 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            11815 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            11816 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            11817 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            11818 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            11819 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            11820 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            11821 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            11822 ; 700  |
                            11823 ; 701  |typedef union               
                            11824 ; 702  |{
                            11825 ; 703  |    struct {
                            11826 ; 704  |        int EP0              :1;
                            11827 ; 705  |        int EP1              :1;
                            11828 ; 706  |        int EP2              :1;
                            11829 ; 707  |        int EP3              :1;
                            11830 ; 708  |        int EP4              :1;
                            11831 ; 709  |        int EP5              :1;
                            11832 ; 710  |        int EP6              :1;
                            11833 ; 711  |        int EP7              :1;
                            11834 ; 712  |        int EP8              :1;
                            11835 ; 713  |        int EP9              :1;
                            11836 ; 714  |        int EP10             :1;
                            11837 ; 715  |        int EP11             :1;
                            11838 ; 716  |        int EP12             :1;
                            11839 ; 717  |        int EP13             :1;
                            11840 ; 718  |        int EP14             :1;
                            11841 ; 719  |        int EP15             :1;
                            11842 ; 720  |        int                  :32;
                            11843 ; 721  |    } B;
                            11844 ; 722  |    DWORD I;
                            11845 ; 723  |} endpsetupstat_type;
                            11846 ; 724  |
                            11847 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac))    
                            11848 ; 726  |
                            11849 ; 727  |typedef union               
                            11850 ; 728  |{
                            11851 ; 729  |    struct {
                            11852 ; 730  |        int EP0              :1;
                            11853 ; 731  |        int EP1              :1;
                            11854 ; 732  |        int EP2              :1;
                            11855 ; 733  |        int EP3              :1;
                            11856 ; 734  |        int EP4              :1;
                            11857 ; 735  |        int EP5              :1;
                            11858 ; 736  |        int EP6              :1;
                            11859 ; 737  |        int EP7              :1;
                            11860 ; 738  |        int EP8              :1;
                            11861 ; 739  |        int EP9              :1;
                            11862 ; 740  |        int EP10             :1;
                            11863 ; 741  |        int EP11             :1;
                            11864 ; 742  |        int EP12             :1;
                            11865 ; 743  |        int EP13             :1;
                            11866 ; 744  |        int EP14             :1;
                            11867 ; 745  |        int EP15             :1;
                            11868 ; 746  |        int                  :8;
                            11869 ; 747  |    } B;
                            11870 ; 748  |    WORD I;
                            11871 ; 749  |} endpt_type;
                            11872 
                            11910 
                            11911 ; 750  |
                            11912 ; 751  |typedef union
                            11913 ; 752  |{
                            11914 ; 753  |   struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11915 ; 754  |       endpt_type  RX;
                            11916 ; 755  |       endpt_type  TX;
                            11917 ; 756  |   } W;
                            11918 ; 757  |   DWORD DW;
                            11919 ; 758  |} endptrxtx_type;
                            11920 ; 759  |
                            11921 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))    
                            11922 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))    
                            11923 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))    
                            11924 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))    
                            11925 ; 764  |
                            11926 ; 765  |
                            11927 ; 766  |
                            11928 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            11929 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            11930 ; 769  |
                            11931 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            11932 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            11933 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            11934 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            11935 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            11936 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            11937 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            11938 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            11939 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            11940 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            11941 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            11942 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            11943 ; 782  |
                            11944 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            11945 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            11946 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            11947 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            11948 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            11949 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            11950 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            11951 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            11952 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            11953 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            11954 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            11955 ; 794  |
                            11956 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            11957 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11958 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            11959 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11960 ; 799  |
                            11961 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            11962 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            11963 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            11964 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            11965 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            11966 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            11967 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            11968 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            11969 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            11970 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            11971 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            11972 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            11973 ; 812  |
                            11974 ; 813  |
                            11975 ; 814  |typedef union               
                            11976 ; 815  |{
                            11977 ; 816  |    struct {
                            11978 ; 817  |        int RXS             :1;
                            11979 ; 818  |        int RXD             :1;
                            11980 ; 819  |        int RXT             :2;
                            11981 ; 820  |        int                 :1;
                            11982 ; 821  |        int RXI             :1;
                            11983 ; 822  |        int RXR             :1;
                            11984 ; 823  |        int RXE             :1;
                            11985 ; 824  |        int                 :8;
                            11986 ; 825  |        int TXS             :1;
                            11987 ; 826  |        int TXD             :1;
                            11988 ; 827  |        int TXT             :2;
                            11989 ; 828  |        int                 :1;
                            11990 ; 829  |        int TXI             :1;
                            11991 ; 830  |        int TXR             :1;
                            11992 ; 831  |        int TXE             :1;
                            11993 ; 832  |        int                 :24;
                            11994 ; 833  |    } B;
                            11995 ; 834  |    DWORD I;
                            11996 ; 835  |} endptctrl_type;
                            11997 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)))    
                            11998 ; 837  |
                            11999 ; 838  |#endif
                            12000 ; 839  |
                            12001 ; 840  |
                            12002 
                            12004 
                            12005 ; 37   |#include "regsusb20phy.h"
                            12006 
                            12008 
                            12009 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12010 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            12011 ; 3    |//;  File        : regsusbphy.inc
                            12012 ; 4    |//;  Description : USB20 PHY Register definition
                            12013 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            12014 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12015 ; 7    |
                            12016 ; 8    |// The following naming conventions are followed in this file.
                            12017 ; 9    |// All registers are named using the format...
                            12018 ; 10   |//     HW_<module>_<regname>
                            12019 ; 11   |// where <module> is the module name which can be any of the following...
                            12020 ; 12   |//     USB20
                            12021 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            12022 ; 14   |// module name includes a number starting from 0 for the first instance of
                            12023 ; 15   |// that module)
                            12024 ; 16   |// <regname> is the specific register within that module
                            12025 ; 17   |// We also define the following...
                            12026 ; 18   |//     HW_<module>_<regname>_BITPOS
                            12027 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12028 ; 20   |//     HW_<module>_<regname>_SETMASK
                            12029 ; 21   |// which does something else, and
                            12030 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            12031 ; 23   |// which does something else.
                            12032 ; 24   |// Other rules
                            12033 ; 25   |//     All caps
                            12034 ; 26   |//     Numeric identifiers start at 0
                            12035 ; 27   |
                            12036 ; 28   |#if !(defined(regsusbphyinc))
                            12037 ; 29   |#define regsusbphyinc 1
                            12038 ; 30   |
                            12039 ; 31   |#include "types.h"
                            12040 
                            12042 
                            12043 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12044 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12045 ; 3    |//
                            12046 ; 4    |// Filename: types.h
                            12047 ; 5    |// Description: Standard data types
                            12048 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12049 ; 7    |
                            12050 ; 8    |#ifndef _TYPES_H
                            12051 ; 9    |#define _TYPES_H
                            12052 ; 10   |
                            12053 ; 11   |// TODO:  move this outta here!
                            12054 ; 12   |#if !defined(NOERROR)
                            12055 ; 13   |#define NOERROR 0
                            12056 ; 14   |#define SUCCESS 0
                            12057 ; 15   |#endif 
                            12058 ; 16   |#if !defined(SUCCESS)
                            12059 ; 17   |#define SUCCESS  0
                            12060 ; 18   |#endif
                            12061 ; 19   |#if !defined(ERROR)
                            12062 ; 20   |#define ERROR   -1
                            12063 ; 21   |#endif
                            12064 ; 22   |#if !defined(FALSE)
                            12065 ; 23   |#define FALSE 0
                            12066 ; 24   |#endif
                            12067 ; 25   |#if !defined(TRUE)
                            12068 ; 26   |#define TRUE  1
                            12069 ; 27   |#endif
                            12070 ; 28   |
                            12071 ; 29   |#if !defined(NULL)
                            12072 ; 30   |#define NULL 0
                            12073 ; 31   |#endif
                            12074 ; 32   |
                            12075 ; 33   |#define MAX_INT     0x7FFFFF
                            12076 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12077 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12078 ; 36   |#define MAX_ULONG   (-1) 
                            12079 ; 37   |
                            12080 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12081 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12082 ; 40   |
                            12083 ; 41   |
                            12084 ; 42   |#define BYTE    unsigned char       // btVarName
                            12085 ; 43   |#define CHAR    signed char         // cVarName
                            12086 ; 44   |#define USHORT  unsigned short      // usVarName
                            12087 ; 45   |#define SHORT   unsigned short      // sVarName
                            12088 ; 46   |#define WORD    unsigned int        // wVarName
                            12089 ; 47   |#define INT     signed int          // iVarName
                            12090 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12091 ; 49   |#define LONG    signed long         // lVarName
                            12092 ; 50   |#define BOOL    unsigned int        // bVarName
                            12093 ; 51   |#define FRACT   _fract              // frVarName
                            12094 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12095 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12096 ; 54   |#define FLOAT   float               // fVarName
                            12097 ; 55   |#define DBL     double              // dVarName
                            12098 ; 56   |#define ENUM    enum                // eVarName
                            12099 ; 57   |#define CMX     _complex            // cmxVarName
                            12100 ; 58   |typedef WORD UCS3;                   // 
                            12101 ; 59   |
                            12102 ; 60   |#define UINT16  unsigned short
                            12103 ; 61   |#define UINT8   unsigned char   
                            12104 ; 62   |#define UINT32  unsigned long
                            12105 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12106 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            12107 ; 65   |#define WCHAR   UINT16
                            12108 ; 66   |
                            12109 ; 67   |//UINT128 is 16 bytes or 6 words
                            12110 ; 68   |typedef struct UINT128_3500 {   
                            12111 ; 69   |    int val[6];     
                            12112 ; 70   |} UINT128_3500;
                            12113 ; 71   |
                            12114 ; 72   |#define UINT128   UINT128_3500
                            12115 ; 73   |
                            12116 ; 74   |// Little endian word packed byte strings:   
                            12117 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12118 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12119 ; 77   |// Little endian word packed byte strings:   
                            12120 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12121 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12122 ; 80   |
                            12123 ; 81   |// Declare Memory Spaces To Use When Coding
                            12124 ; 82   |// A. Sector Buffers
                            12125 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12126 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12127 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12128 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12129 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12130 ; 88   |// B. Media DDI Memory
                            12131 ; 89   |#define MEDIA_DDI_MEM _Y
                            12132 ; 90   |
                            12133 ; 91   |
                            12134 ; 92   |
                            12135 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12136 ; 94   |// Examples of circular pointers:
                            12137 ; 95   |//    INT CIRC cpiVarName
                            12138 ; 96   |//    DWORD CIRC cpdwVarName
                            12139 ; 97   |
                            12140 ; 98   |#define RETCODE INT                 // rcVarName
                            12141 ; 99   |
                            12142 ; 100  |// generic bitfield structure
                            12143 ; 101  |struct Bitfield {
                            12144 ; 102  |    unsigned int B0  :1;
                            12145 ; 103  |    unsigned int B1  :1;
                            12146 ; 104  |    unsigned int B2  :1;
                            12147 ; 105  |    unsigned int B3  :1;
                            12148 ; 106  |    unsigned int B4  :1;
                            12149 ; 107  |    unsigned int B5  :1;
                            12150 ; 108  |    unsigned int B6  :1;
                            12151 ; 109  |    unsigned int B7  :1;
                            12152 ; 110  |    unsigned int B8  :1;
                            12153 ; 111  |    unsigned int B9  :1;
                            12154 ; 112  |    unsigned int B10 :1;
                            12155 ; 113  |    unsigned int B11 :1;
                            12156 ; 114  |    unsigned int B12 :1;
                            12157 ; 115  |    unsigned int B13 :1;
                            12158 ; 116  |    unsigned int B14 :1;
                            12159 ; 117  |    unsigned int B15 :1;
                            12160 ; 118  |    unsigned int B16 :1;
                            12161 ; 119  |    unsigned int B17 :1;
                            12162 ; 120  |    unsigned int B18 :1;
                            12163 ; 121  |    unsigned int B19 :1;
                            12164 ; 122  |    unsigned int B20 :1;
                            12165 ; 123  |    unsigned int B21 :1;
                            12166 ; 124  |    unsigned int B22 :1;
                            12167 ; 125  |    unsigned int B23 :1;
                            12168 ; 126  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12169 ; 127  |
                            12170 ; 128  |union BitInt {
                            12171 ; 129  |        struct Bitfield B;
                            12172 ; 130  |        int        I;
                            12173 ; 131  |};
                            12174 ; 132  |
                            12175 ; 133  |#define MAX_MSG_LENGTH 10
                            12176 ; 134  |struct CMessage
                            12177 ; 135  |{
                            12178 ; 136  |        unsigned int m_uLength;
                            12179 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12180 ; 138  |};
                            12181 ; 139  |
                            12182 ; 140  |typedef struct {
                            12183 ; 141  |    WORD m_wLength;
                            12184 ; 142  |    WORD m_wMessage;
                            12185 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12186 ; 144  |} Message;
                            12187 ; 145  |
                            12188 ; 146  |struct MessageQueueDescriptor
                            12189 ; 147  |{
                            12190 ; 148  |        int *m_pBase;
                            12191 ; 149  |        int m_iModulo;
                            12192 ; 150  |        int m_iSize;
                            12193 ; 151  |        int *m_pHead;
                            12194 ; 152  |        int *m_pTail;
                            12195 ; 153  |};
                            12196 ; 154  |
                            12197 ; 155  |struct ModuleEntry
                            12198 ; 156  |{
                            12199 ; 157  |    int m_iSignaledEventMask;
                            12200 ; 158  |    int m_iWaitEventMask;
                            12201 ; 159  |    int m_iResourceOfCode;
                            12202 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12203 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            12204 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12205 ; 163  |    int m_uTimeOutHigh;
                            12206 ; 164  |    int m_uTimeOutLow;
                            12207 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12208 ; 166  |};
                            12209 ; 167  |
                            12210 ; 168  |union WaitMask{
                            12211 ; 169  |    struct B{
                            12212 ; 170  |        unsigned int m_bNone     :1;
                            12213 ; 171  |        unsigned int m_bMessage  :1;
                            12214 ; 172  |        unsigned int m_bTimer    :1;
                            12215 ; 173  |        unsigned int m_bButton   :1;
                            12216 ; 174  |    } B;
                            12217 ; 175  |    int I;
                            12218 ; 176  |} ;
                            12219 ; 177  |
                            12220 ; 178  |
                            12221 ; 179  |struct Button {
                            12222 ; 180  |        WORD wButtonEvent;
                            12223 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12224 ; 182  |};
                            12225 ; 183  |
                            12226 ; 184  |struct Message {
                            12227 ; 185  |        WORD wMsgLength;
                            12228 ; 186  |        WORD wMsgCommand;
                            12229 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12230 ; 188  |};
                            12231 ; 189  |
                            12232 ; 190  |union EventTypes {
                            12233 ; 191  |        struct CMessage msg;
                            12234 ; 192  |        struct Button Button ;
                            12235 ; 193  |        struct Message Message;
                            12236 ; 194  |};
                            12237 ; 195  |
                            12238 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12239 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12240 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12241 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            12242 ; 200  |
                            12243 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12244 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12245 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12246 ; 204  |
                            12247 ; 205  |#if DEBUG
                            12248 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12249 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12250 ; 208  |#else 
                            12251 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            12252 ; 210  |#define DebugBuildAssert(x)    
                            12253 ; 211  |#endif
                            12254 ; 212  |
                            12255 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12256 ; 214  |//  #pragma asm
                            12257 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12258 ; 216  |//  #pragma endasm
                            12259 ; 217  |
                            12260 ; 218  |
                            12261 ; 219  |#ifdef COLOR_262K
                            12262 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            12263 ; 221  |#elif defined(COLOR_65K)
                            12264 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            12265 ; 223  |#else
                            12266 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            12267 ; 225  |#endif
                            12268 ; 226  |    
                            12269 ; 227  |#endif // #ifndef _TYPES_H
                            12270 
                            12272 
                            12273 ; 32   |
                            12274 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12275 ; 34   |//   USB2.0 PHY STMP Registers 
                            12276 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12277 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            12278 ; 37   |
                            12279 ; 38   |
                            12280 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            12281 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            12282 ; 41   |
                            12283 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            12284 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            12285 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            12286 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            12287 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            12288 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            12289 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            12290 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            12291 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            12292 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            12293 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            12294 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            12295 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            12296 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            12297 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            12298 ; 57   |
                            12299 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            12300 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            12301 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            12302 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            12303 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            12304 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            12305 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            12306 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            12307 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            12308 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            12309 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            12310 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            12311 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            12312 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            12313 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            12314 ; 73   |
                            12315 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            12316 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            12317 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            12318 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            12319 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            12320 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            12321 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            12322 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            12323 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            12324 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            12325 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            12326 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            12327 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            12328 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            12329 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            12330 ; 89   |
                            12331 ; 90   |typedef union               
                            12332 ; 91   |{
                            12333 ; 92   |    struct {
                            12334 ; 93   |        int RSVD0          :5;
                            12335 ; 94   |        int TXDISCON1500   :1;
                            12336 ; 95   |        int PLLVCOPWD      :1;
                            12337 ; 96   |        int PLLVCPPWD      :1;
                            12338 ; 97   |        int RSVD1          :2;
                            12339 ; 98   |        int TXPWDFS        :1;
                            12340 ; 99   |        int TXPWDIBIAS     :1;
                            12341 ; 100  |        int TXPWDV2I       :1;
                            12342 ; 101  |        int TXPWDVBG       :1;
                            12343 ; 102  |        int TXPWDCOMP      :1;
                            12344 ; 103  |        int RSVD2          :1;
                            12345 ; 104  |        int RXPWDDISCONDET :1;
                            12346 ; 105  |        int RXPWDENV       :1;
                            12347 ; 106  |        int RXPWD1PT1      :1;
                            12348 ; 107  |        int RXPWDDIFF      :1;
                            12349 ; 108  |        int RXPWDRX        :1;
                            12350 ; 109  |        int RSVD3          :1;
                            12351 ; 110  |        int PWDIBIAS       :1;
                            12352 ; 111  |        int REGRESET       :1;
                            12353 ; 112  |    } B;
                            12354 ; 113  |    int I;
                            12355 ; 114  |} usbphypwd_type;
                            12356 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB PHY Powerdown Register */
                            12357 ; 116  |
                            12358 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12359 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            12360 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            12361 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            12362 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            12363 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            12364 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            12365 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            12366 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            12367 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            12368 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            12369 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            12370 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            12371 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            12372 ; 131  |
                            12373 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            12374 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            12375 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            12376 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            12377 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            12378 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            12379 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            12380 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            12381 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            12382 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            12383 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            12384 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            12385 ; 144  |
                            12386 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXCAL1500_BITPOS)
                            12387 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHYTX_TXENCAL1500_BITPOS)
                            12388 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXHSXCVR_BITPOS)
                            12389 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHYTX_TXCALIBRATE_BITPOS)
                            12390 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DN_BITPOS)
                            12391 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DN_BITPOS)
                            12392 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXHSTERM_BITPOS)
                            12393 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_BITPOS)
                            12394 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXCAL45DP_BITPOS)
                            12395 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHYTX_TXENCAL45DP_BITPOS)
                            12396 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSHIZ_BITPOS)
                            12397 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_TXCOMPOUT_BITPOS)
                            12398 ; 157  |
                            12399 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            12400 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            12401 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            12402 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            12403 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            12404 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            12405 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            12406 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            12407 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            12408 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            12409 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            12410 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            12411 ; 170  |
                            12412 ; 171  |typedef union               
                            12413 ; 172  |{
                            12414 ; 173  |    struct {
                            12415 ; 174  |        int TXCAL1500          :4;
                            12416 ; 175  |        int RSVD0              :1;
                            12417 ; 176  |        int TXENCAL1500        :1;
                            12418 ; 177  |        int TXHSXCVR           :1;
                            12419 ; 178  |        int TXCALIBRATE        :1;
                            12420 ; 179  |        int TXCAL45DN          :4;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12421 ; 180  |        int RSVD1              :1;
                            12422 ; 181  |        int TXENCAL45DN        :1;
                            12423 ; 182  |        int TXHSTERM           :1;
                            12424 ; 183  |        int TXSKEW             :1;
                            12425 ; 184  |        int TXCAL45DP          :4;
                            12426 ; 185  |        int RSVD2              :1;
                            12427 ; 186  |        int TXENCAL45DP        :1;
                            12428 ; 187  |        int TXFSHIZ            :1;
                            12429 ; 188  |        int TXCOMPOUT          :1;
                            12430 ; 189  |    } B;
                            12431 ; 190  |    int I;
                            12432 ; 191  |} usbphytx_type;
                            12433 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            12434 ; 193  |
                            12435 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            12436 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            12437 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            12438 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            12439 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            12440 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            12441 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            12442 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            12443 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            12444 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            12445 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            12446 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            12447 ; 206  |
                            12448 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            12449 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            12450 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            12451 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            12452 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            12453 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            12454 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            12455 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            12456 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            12457 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            12458 ; 217  |
                            12459 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPLL_PLLV2ISEL_BITPOS)
                            12460 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHYPLL_PLLCPDBLIP_BITPOS)
                            12461 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK2_BITPOS)
                            12462 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOCLK24_BITPOS)
                            12463 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCPNSEL_BITPOS)
                            12464 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS)
                            12465 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPLL_PLLPFDRST_BITPOS)
                            12466 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            12467 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_USBPHYPLL_PLLVCOKSTART_BITPOS)
                            12468 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            12469 ; 228  |
                            12470 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            12471 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            12472 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            12473 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            12474 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            12475 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            12476 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            12477 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            12478 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            12479 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            12480 ; 239  |
                            12481 ; 240  |typedef union               
                            12482 ; 241  |{
                            12483 ; 242  |    struct {
                            12484 ; 243  |        int PLLV2ISEL        :4;
                            12485 ; 244  |        int RSVD0            :1;
                            12486 ; 245  |        int PLLCPDBLIP       :1;
                            12487 ; 246  |        int PLLVCOCLK2       :1;
                            12488 ; 247  |        int PLLVCOCLK24      :1;
                            12489 ; 248  |        int PLLCPNSEL        :4;
                            12490 ; 249  |        int PLLCLKDIVSEL     :4;
                            12491 ; 250  |        int RSVD1            :4;
                            12492 ; 251  |        int PLLPFDRST        :1;
                            12493 ; 252  |        int PLLCPSHORTLFR    :1;
                            12494 ; 253  |        int PLLVCOKSTART     :1;
                            12495 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            12496 ; 255  |    } B;
                            12497 ; 256  |    int I;
                            12498 ; 257  |} usbphypll_type;
                            12499 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            12500 ; 259  |
                            12501 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            12502 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            12503 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            12504 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            12505 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            12506 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            12507 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            12508 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            12509 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            12510 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            12511 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            12512 ; 271  |
                            12513 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            12514 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            12515 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            12516 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            12517 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            12518 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            12519 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            12520 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            12521 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            12522 ; 281  |
                            12523 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            12524 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_BITPOS)
                            12525 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_BITPOS)
                            12526 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLLKTIMECTL_BITPOS)
                            12527 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKDIVCTL_BITPOS)
                            12528 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives actual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            12529 ; 288  |//              480Mhz/7 =68.57Mhz
                            12530 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            12531 ; 290  |
                            12532 ; 291  |//              480Mhz/8 ~60Mhz
                            12533 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            12534 ; 293  |
                            12535 ; 294  |//              480Mhz/9 =53.3Mhz
                            12536 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            12537 ; 296  |
                            12538 ; 297  |//              480Mhz/10 =48Mhz
                            12539 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            12540 ; 299  |
                            12541 ; 300  |
                            12542 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOSTMODETEST_BITPOS)
                            12543 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FSCKSOURCESEL_BITPOS)
                            12544 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGRXDBYPASS_BITPOS)
                            12545 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_BITPOS)
                            12546 ; 305  |
                            12547 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            12548 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            12549 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            12550 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            12551 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            12552 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            12553 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            12554 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            12555 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            12556 ; 315  |
                            12557 ; 316  |typedef union               
                            12558 ; 317  |{
                            12559 ; 318  |    struct {
                            12560 ; 319  |     int ENVADJ               :4;
                            12561 ; 320  |     int DISCONADJ            :4;
                            12562 ; 321  |     int DEBUGMODE            :4;
                            12563 ; 322  |     int PLLLKTIMECTL         :4;
                            12564 ; 323  |     int PLLCKDIVCTL          :4;
                            12565 ; 324  |     int HOSTMODETEST         :1;
                            12566 ; 325  |     int FSCKSOURCESEL        :1;
                            12567 ; 326  |     int REGRXDBYPASS         :1;
                            12568 ; 327  |     int PLLLOCKED            :1;
                            12569 ; 328  |    } B;
                            12570 ; 329  |    int I;
                            12571 ; 330  |} usbphyrx_type;
                            12572 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            12573 ; 332  |
                            12574 ; 333  |#endif
                            12575 ; 334  |
                            12576 
                            12578 
                            12579 ; 38   |
                            12580 ; 39   |
                            12581 ; 40   |#endif // if (!@def(hwequ))
                            12582 ; 41   |
                            12583 
                            12585 
                            12586 ; 12   |#else 
                            12587 ; 13   |//include "regscodec.inc"
                            12588 ; 14   |#endif
                            12589 ; 15   |
                            12590 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            12591 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                            12592 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                            12593 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
                            12594 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
                            12595 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                            12596 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            12597 ; 23   |
                            12598 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            12599 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            12600 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            12601 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                            12602 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            12603 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            12604 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            12605 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                            12606 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                            12607 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                            12608 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            12609 ; 35   |
                            12610 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            12611 ; 37   |// MEDIA DEFINITIONS
                            12612 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            12613 ; 39   |
                            12614 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            12615 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            12616 ; 42   |#if defined(NAND1)
                            12617 ; 43   |#define SM_INTERNAL_CHIPS 1
                            12618 ; 44   |#else 
                            12619 ; 45   |#if defined(NAND2)
                            12620 ; 46   |#define SM_INTERNAL_CHIPS 2
                            12621 ; 47   |#else 
                            12622 ; 48   |#if defined(NAND3)
                            12623 ; 49   |#define SM_INTERNAL_CHIPS 3
                            12624 ; 50   |#else 
                            12625 ; 51   |#if defined(NAND4)
                            12626 ; 52   |#define SM_INTERNAL_CHIPS 4
                            12627 ; 53   |#else 
                            12628 ; 54   |#define SM_INTERNAL_CHIPS 1
                            12629 ; 55   |#endif
                            12630 ; 56   |#endif
                            12631 ; 57   |#endif
                            12632 ; 58   |#endif
                            12633 ; 59   |
                            12634 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            12635 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            12636 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                            12637 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            12638 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                            12639 ; 65   |//*** comment out if active high ****
                            12640 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            12641 ; 67   |
                            12642 ; 68   |#if defined(SMEDIA)
                            12643 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            12644 ; 70   |#define NUM_SM_EXTERNAL 1
                            12645 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12646 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            12647 ; 73   |#else 
                            12648 ; 74   |#if defined(MMC)
                            12649 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            12650 ; 76   |#define NUM_SM_EXTERNAL 0
                            12651 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            12652 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            12653 ; 79   |#else 
                            12654 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            12655 ; 81   |#define NUM_SM_EXTERNAL 0
                            12656 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12657 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            12658 ; 84   |#endif
                            12659 ; 85   |#endif
                            12660 ; 86   |
                            12661 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            12662 ; 88   |// Mass Storage Class definitions
                            12663 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            12664 ; 90   |// Set to 0 if Composite Device build is desired.    
                            12665 ; 91   |#define MULTI_LUN_BUILD 1   
                            12666 ; 92   |
                            12667 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            12668 ; 94   |//  SCSI
                            12669 ; 95   |#if (MULTI_LUN_BUILD==0)
                            12670 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12671 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            12672 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12673 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12674 ; 100  |  #else
                            12675 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            12676 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12677 ; 103  |  #endif
                            12678 ; 104  |#else
                            12679 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            12680 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12681 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            12682 ; 108  |  #else
                            12683 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            12684 ; 110  |  #endif
                            12685 ; 111  |#endif
                            12686 ; 112  |
                            12687 ; 113  |
                            12688 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            12689 ; 115  |
                            12690 ; 116  |
                            12691 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            12692 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            12693 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            12694 ; 120  |#ifdef MMC
                            12695 ; 121  |#ifdef MTP_BUILD
                            12696 ; 122  |// --------------------
                            12697 ; 123  |// MTP and MMC
                            12698 ; 124  |// --------------------
                            12699 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            12700 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            12701 ; 127  |#else  // ifndef MTP_BUILD
                            12702 ; 128  |#ifdef STMP_BUILD_PLAYER
                            12703 ; 129  |// --------------------
                            12704 ; 130  |// Player and MMC
                            12705 ; 131  |// --------------------
                            12706 ; 132  |#else
                            12707 ; 133  |// --------------------
                            12708 ; 134  |// USBMSC and MMC
                            12709 ; 135  |// --------------------
                            12710 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            12711 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            12712 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            12713 ; 139  |#endif // ifdef MTP_BUILD
                            12714 ; 140  |#else  // ifndef MMC
                            12715 ; 141  |#ifdef MTP_BUILD
                            12716 ; 142  |// --------------------
                            12717 ; 143  |// MTP and NAND only
                            12718 ; 144  |// --------------------
                            12719 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            12720 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            12721 ; 147  |#else  // ifndef MTP_BUILD
                            12722 ; 148  |#ifdef STMP_BUILD_PLAYER
                            12723 ; 149  |// --------------------
                            12724 ; 150  |// Player and NAND only
                            12725 ; 151  |// --------------------
                            12726 ; 152  |#else
                            12727 ; 153  |// --------------------
                            12728 ; 154  |// USBMSC and NAND only
                            12729 ; 155  |// --------------------
                            12730 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            12731 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            12732 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            12733 ; 159  |#endif // ifdef MTP_BUILD
                            12734 ; 160  |#endif // ifdef MMC 
                            12735 ; 161  |
                            12736 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            12737 ; 163  |#if (defined(MTP_BUILD))
                            12738 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            12739 ; 165  |
                            12740 ; 166  |////!
                            12741 ; 167  |////! This varible holds the watchdog count for the store flush.
                            12742 ; 168  |////!
                            12743 ; 169  |///
                            12744 ; 170  |#include <types.h>
                            12745 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            12746 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            12747 ; 173  |#endif
                            12748 ; 174  |
                            12749 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            12750 ; 176  |// These are needed here for Mass Storage Class
                            12751 ; 177  |// Needs to be cleaned up
                            12752 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            12753 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            12754 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            12755 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            12756 ; 182  |
                            12757 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            12758 ; 184  |
                            12759 ; 185  |#endif
                            12760 ; 186  |
                            12761 ; 187  |
                            12762 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            12763 ; 189  |// SmartMedia/NAND defs
                            12764 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12765 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            12766 ; 192  |
                            12767 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            12768 ; 194  |// Sysloadresources defs
                            12769 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12770 ; 196  |
                            12771 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            12772 ; 198  |// MMC defs
                            12773 ; 199  |#define MMC_MAX_PARTITIONS 1
                            12774 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            12775 ; 201  |
                            12776 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            12777 ; 203  |// SPI defs
                            12778 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            12779 ; 205  |
                            12780 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            12781 ; 207  |// Global media defs
                            12782 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            12783 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            12784 ; 210  |
                            12785 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            12786 ; 212  |// DO NOT CHANGE THESE!!!
                            12787 ; 213  |#define SM_MAX_PARTITIONS 4
                            12788 ; 214  |#define MAX_HANDLES 2
                            12789 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            12790 ; 216  |
                            12791 ; 217  |
                            12792 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            12793 ; 219  |// Battery LRADC Values 
                            12794 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            12795 ; 221  |// brownout trip point in mV (moved by RS)
                            12796 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            12797 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            12798 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            12799 ; 225  |//     audio recording to media.
                            12800 ; 226  |#define BATT_SAFETY_MARGIN 10
                            12801 ; 227  |
                            12802 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                            12803 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                            12804 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            12805 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            12806 ; 232  |
                            12807 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                            12808 ; 234  |
                            12809 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            12810 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                            12811 ; 237  |#if (!defined(CLCD))
                            12812 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            12813 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            12814 ; 240  |#else 
                            12815 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            12816 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            12817 ; 243  |#endif
                            12818 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            12819 ; 245  |
                            12820 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            12821 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                            12822 ; 248  |// See mp3 encoder overlay.
                            12823 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            12824 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            12825 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            12826 ; 252  |
                            12827 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            12828 ; 254  |// Voice recording filenames
                            12829 ; 255  |// number of digits in filename Vxxx.wav
                            12830 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            12831 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            12832 ; 258  |
                            12833 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            12834 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            12835 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            12836 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            12837 ; 263  |#if defined(DEVICE_3500)
                            12838 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            12839 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            12840 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            12841 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                            12842 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12843 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            12844 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            12845 ; 271  |
                            12846 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                            12847 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            12848 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                            12849 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                            12850 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            12851 ; 277  |
                            12852 ; 278  |#else 
                            12853 ; 279  |// STMP3410
                            12854 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            12855 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12856 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            12857 ; 283  |#endif
                            12858 ; 284  |
                            12859 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            12860 ; 286  |// Number of available soft timers
                            12861 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            12862 ; 288  |#if defined(SYNC_LYRICS)
                            12863 ; 289  |#define SOFT_TIMERS 10
                            12864 ; 290  |#else 
                            12865 ; 291  |#if defined(JPEG_DECODER)
                            12866 ; 292  |#define SOFT_TIMERS 10
                            12867 ; 293  |#else 
                            12868 ; 294  |#define SOFT_TIMERS 9
                            12869 ; 295  |#endif
                            12870 ; 296  |#endif
                            12871 ; 297  |
                            12872 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            12873 ; 299  |//  sizes
                            12874 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            12875 ; 301  |#if defined(MMC)
                            12876 ; 302  |#if defined(USE_PLAYLIST5)
                            12877 ; 303  |#define MENU_STACK_SIZE 1500
                            12878 ; 304  |#else 
                            12879 ; 305  |#define MENU_STACK_SIZE 1250
                            12880 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            12881 ; 307  |#else 
                            12882 ; 308  |#if defined(USE_PLAYLIST5)
                            12883 ; 309  |#define MENU_STACK_SIZE 1500
                            12884 ; 310  |#else 
                            12885 ; 311  |#define MENU_STACK_SIZE 1250
                            12886 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            12887 ; 313  |#endif //if @def('MMC')
                            12888 ; 314  |
                            12889 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                            12890 ; 316  |// 
                            12891 ; 317  |#define STACK_L1_SIZE 750
                            12892 ; 318  |#define STACK_L2_SIZE 100
                            12893 ; 319  |#define STACK_L3_SIZE 160
                            12894 ; 320  |
                            12895 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            12896 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            12897 ; 323  |// is ok with switching code.
                            12898 ; 324  |#if defined(MTP_BUILD)
                            12899 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            12900 ; 326  |#endif
                            12901 ; 327  |
                            12902 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            12903 ; 329  |// maximum number of nested funclets 
                            12904 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            12905 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            12906 ; 332  |
                            12907 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            12908 ; 334  |//    LCD DEFINITIONS
                            12909 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            12910 ; 336  |
                            12911 ; 337  |#define SPACE_CHAR 0x000020          
                            12912 ; 338  |#define ZERO_CHAR 0x000030
                            12913 ; 339  |#define COLON_CHAR 0x00003A
                            12914 ; 340  |#define PERIOD_CHAR 0x00002E
                            12915 ; 341  |
                            12916 ; 342  |#if (defined(S6B33B0A_LCD))
                            12917 ; 343  |#define LCD_X_SIZE 128
                            12918 ; 344  |#define LCD_Y_SIZE 159
                            12919 ; 345  |#endif
                            12920 ; 346  |
                            12921 ; 347  |#if (defined(SED15XX_LCD))
                            12922 ; 348  |#define LCD_X_SIZE 128
                            12923 ; 349  |#define LCD_Y_SIZE 64
                            12924 ; 350  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12925 ; 351  |
                            12926 ; 352  |
                            12927 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            12928 ; 354  |//   Details on Customizing Contrast
                            12929 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            12930 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            12931 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            12932 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            12933 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            12934 ; 360  |//   unless the ezact sequence is remembered.
                            12935 ; 361  |//   To find out what range your player supports: 
                            12936 ; 362  |//   change these equs to full range or comment out (full range is default)
                            12937 ; 363  |//;;;;;;
                            12938 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            12939 ; 365  |// recommended calibration using player -- uncomment 
                            12940 ; 366  |//;;;;;;
                            12941 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            12942 ; 368  |////////////////////////////
                            12943 ; 369  |#if (defined(DEMO_HW))
                            12944 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                            12945 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            12946 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            12947 ; 373  |#else 
                            12948 ; 374  |
                            12949 ; 375  |#if (defined(S6B33B0A_LCD))
                            12950 ; 376  |#define LCD_MAX_CONTRAST 210
                            12951 ; 377  |#define LCD_MIN_CONTRAST 160    
                            12952 ; 378  |#endif
                            12953 ; 379  |
                            12954 ; 380  |#if (defined(SED15XX_LCD))
                            12955 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            12956 ; 382  |// Engineering board regs support range [17-37].
                            12957 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            12958 ; 384  |//   One default contrast range [24-42] works for both.
                            12959 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            12960 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            12961 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            12962 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            12963 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            12964 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            12965 ; 391  |
                            12966 ; 392  |#if (defined(NEWSHINGYIH))
                            12967 ; 393  |#define LCD_MAX_CONTRAST 250
                            12968 ; 394  |#define LCD_MIN_CONTRAST 0
                            12969 ; 395  |#else 
                            12970 ; 396  |//-----
                            12971 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            12972 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                            12973 ; 399  |#define LCD_MAX_CONTRAST 250
                            12974 ; 400  |#define LCD_MIN_CONTRAST 0
                            12975 ; 401  |
                            12976 ; 402  |//=====
                            12977 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            12978 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                            12979 ; 405  |//LCD_MAX_CONTRAST equ 42
                            12980 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            12981 ; 407  |
                            12982 ; 408  |#endif
                            12983 ; 409  |#endif
                            12984 ; 410  |
                            12985 ; 411  |#endif
                            12986 ; 412  |
                            12987 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            12988 ; 414  |// The default value of the lcd contrast in % of range
                            12989 ; 415  |//   the default value is used when no settings.dat is available
                            12990 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            12991 ; 417  |
                            12992 ; 418  |#if (defined(S6B33B0A_LCD))
                            12993 ; 419  |// 60% of range is default value
                            12994 ; 420  |#define DEFAULT_CONTRAST 50 
                            12995 ; 421  |#endif
                            12996 ; 422  |
                            12997 ; 423  |#if (defined(SED15XX_LCD))
                            12998 ; 424  |// % of range is default value (was 60%)
                            12999 ; 425  |#define DEFAULT_CONTRAST 50 
                            13000 ; 426  |#endif
                            13001 ; 427  |
                            13002 ; 428  |
                            13003 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            13004 ; 430  |// make lower when doing calibration
                            13005 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            13006 ; 432  |
                            13007 ; 433  |
                            13008 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            13009 ; 435  |// For FFWD and RWND
                            13010 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            13011 ; 437  |#define SECONDS_TO_SKIP 1
                            13012 ; 438  |#define SECONDS_TO_SKIP1 3
                            13013 ; 439  |#define SECONDS_TO_SKIP2 6
                            13014 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            13015 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            13016 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13017 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            13018 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13019 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            13020 ; 446  |
                            13021 ; 447  |// For audible FFW/RWD
                            13022 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            13023 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            13024 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            13025 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            13026 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13027 ; 453  |#define LEVEL1_BOUNDARY 17 
                            13028 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13029 ; 455  |#define LEVEL2_BOUNDARY 33 
                            13030 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13031 ; 457  |#define LEVEL3_BOUNDARY 50 
                            13032 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            13033 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            13034 ; 460  |// Short Song Time, songs too short to play.
                            13035 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            13036 ; 462  |
                            13037 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            13038 ; 464  |// MP3 Sync Values
                            13039 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            13040 ; 466  |// # bytes to look for sync before marking it bad
                            13041 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            13042 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            13043 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            13044 ; 470  |// once we have sync'd, the isr should be called this frequently
                            13045 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            13046 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            13047 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            13048 ; 474  |
                            13049 ; 475  |
                            13050 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            13051 ; 477  |//// Multi-Stage Volume Control Definitions
                            13052 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            13053 ; 479  |//// Use Multi-Stage Volume
                            13054 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            13055 ; 481  |
                            13056 ; 482  |//// Master Volume definitions
                            13057 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            13058 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            13059 ; 485  |
                            13060 ; 486  |//// DAC-Mode definitions
                            13061 ; 487  |//// Adjusts 0dB point
                            13062 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            13063 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            13064 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                            13065 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            13066 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                            13067 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                            13068 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            13069 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            13070 ; 496  |
                            13071 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            13072 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            13073 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                            13074 ; 500  |
                            13075 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                            13076 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                            13077 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            13078 ; 504  |
                            13079 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                            13080 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            13081 ; 507  |
                            13082 ; 508  |
                            13083 ; 509  |//// Line In definitions (used for Line-In 1)
                            13084 ; 510  |//// 0dB point of the Line In
                            13085 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            13086 ; 512  |//// Minimum volume of Line In
                            13087 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            13088 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            13089 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            13090 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            13091 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            13092 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                            13093 ; 519  |
                            13094 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            13095 ; 521  |//// 0dB point of the Line In
                            13096 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            13097 ; 523  |//// Minimum volume of Line In
                            13098 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            13099 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            13100 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            13101 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            13102 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            13103 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            13104 ; 530  |
                            13105 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            13106 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                            13107 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            13108 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            13109 ; 535  |
                            13110 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            13111 ; 537  |////
                            13112 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            13113 ; 539  |////
                            13114 ; 540  |///
                            13115 ; 541  |#include <types.h>
                            13116 ; 542  |extern volatile WORD g_wActivityState;
                            13117 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            13118 ; 544  |
                            13119 ; 545  |void _reentrant Init5VSense(void);
                            13120 ; 546  |void _reentrant ServiceDCDC(void);
                            13121 ; 547  |
                            13122 ; 548  |////////////////////////////////////////////////////////////////////////////
                            13123 ; 549  |//// JPEG Thumbnail Mode Setting
                            13124 ; 550  |//// number of column in thumbnail mode
                            13125 ; 551  |#define THUMBNAIL_X 2           
                            13126 ; 552  |//// number of row in  thumbnail mode
                            13127 ; 553  |#define THUMBNAIL_Y 2           
                            13128 ; 554  |//// thumbnail boundary offset x
                            13129 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            13130 ; 556  |//// thumbnail boundary offset y
                            13131 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            13132 ; 558  |
                            13133 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            13134 ; 560  |
                            13135 
                            13137 
                            13138 ; 10   |#include "resource.h"
                            13139 
                            13141 
                            13142 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                            13143 ; 2    |//  Do not edit it directly.
                            13144 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                            13145 ; 4    |
                            13146 ; 5    |
                            13147 ; 6    |
                            13148 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                            13149 ; 8    |//  Do not edit it directly.
                            13150 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                            13151 ; 10   |
                            13152 ; 11   |
                            13153 ; 12   |
                            13154 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13155 ; 14   |//  Do not edit it directly.
                            13156 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                            13157 ; 16   |
                            13158 ; 17   |
                            13159 ; 18   |
                            13160 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13161 ; 20   |//  Do not edit it directly.
                            13162 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                            13163 ; 22   |
                            13164 ; 23   |
                            13165 ; 24   |
                            13166 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13167 ; 26   |//  Do not edit it directly.
                            13168 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                            13169 ; 28   |
                            13170 ; 29   |
                            13171 ; 30   |
                            13172 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13173 ; 32   |//  Do not edit it directly.
                            13174 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                            13175 ; 34   |
                            13176 ; 35   |
                            13177 ; 36   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13178 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13179 ; 38   |//  Do not edit it directly.
                            13180 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                            13181 ; 40   |
                            13182 ; 41   |
                            13183 ; 42   |
                            13184 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13185 ; 44   |//  Do not edit it directly.
                            13186 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
                            13187 ; 46   |
                            13188 ; 47   |
                            13189 ; 48   |
                            13190 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13191 ; 50   |//  Do not edit it directly.
                            13192 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                            13193 ; 52   |
                            13194 ; 53   |
                            13195 ; 54   |
                            13196 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13197 ; 56   |//  Do not edit it directly.
                            13198 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                            13199 ; 58   |
                            13200 ; 59   |
                            13201 ; 60   |
                            13202 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13203 ; 62   |//  Do not edit it directly.
                            13204 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                            13205 ; 64   |
                            13206 ; 65   |
                            13207 ; 66   |
                            13208 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13209 ; 68   |//  Do not edit it directly.
                            13210 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
                            13211 ; 70   |
                            13212 ; 71   |
                            13213 ; 72   |
                            13214 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13215 ; 74   |//  Do not edit it directly.
                            13216 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                            13217 ; 76   |
                            13218 ; 77   |
                            13219 ; 78   |
                            13220 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13221 ; 80   |//  Do not edit it directly.
                            13222 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                            13223 ; 82   |
                            13224 ; 83   |
                            13225 ; 84   |
                            13226 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13227 ; 86   |//  Do not edit it directly.
                            13228 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                            13229 ; 88   |
                            13230 ; 89   |
                            13231 ; 90   |
                            13232 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13233 ; 92   |//  Do not edit it directly.
                            13234 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                            13235 ; 94   |
                            13236 ; 95   |
                            13237 ; 96   |
                            13238 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13239 ; 98   |//  Do not edit it directly.
                            13240 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                            13241 ; 100  |
                            13242 ; 101  |
                            13243 ; 102  |
                            13244 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13245 ; 104  |//  Do not edit it directly.
                            13246 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                            13247 ; 106  |
                            13248 ; 107  |
                            13249 ; 108  |
                            13250 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13251 ; 110  |//  Do not edit it directly.
                            13252 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                            13253 ; 112  |
                            13254 ; 113  |
                            13255 ; 114  |
                            13256 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13257 ; 116  |//  Do not edit it directly.
                            13258 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                            13259 ; 118  |
                            13260 ; 119  |
                            13261 ; 120  |
                            13262 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13263 ; 122  |//  Do not edit it directly.
                            13264 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                            13265 ; 124  |
                            13266 ; 125  |
                            13267 ; 126  |
                            13268 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                            13269 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                            13270 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
                            13271 ; 130  |// LCD example resource listing
                            13272 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                            13273 ; 132  |
                            13274 ; 133  |#if (!defined(resources))
                            13275 ; 134  |#define resources 1
                            13276 ; 135  |
                            13277 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                            13278 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                            13279 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            13280 ; 139  |
                            13281 ; 140  |#define VERSION_MAJOR 3
                            13282 ; 141  |#define VERSION_MIDDLE 200
                            13283 ; 142  |#define VERSION_MINOR 910
                            13284 ; 143  |
                            13285 ; 144  |#define LCD_SEG_OFFSET 0x000000
                            13286 ; 145  |#define NUMBER_OF_PRESETS 10
                            13287 ; 146  |
                            13288 ; 147  |
                            13289 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            13290 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
                            13291 ; 150  |//  the resource index cache if it was added.
                            13292 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                            13293 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            13294 ; 153  |
                            13295 ; 154  |//$FILENAME searchdirectory.src
                            13296 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                            13297 ; 156  |//$FILENAME shortdirmatch.src
                            13298 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                            13299 ; 158  |//$FILENAME fopen.src
                            13300 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                            13301 ; 160  |//$FILENAME musicmenu.src
                            13302 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                            13303 ; 162  |//$FILENAME changepath.src
                            13304 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                            13305 ; 164  |//$FILENAME _openandverifyslot.src
                            13306 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                            13307 ; 166  |//$FILENAME _loadslot.src
                            13308 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                            13309 ; 168  |//$FILENAME getname.src
                            13310 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
                            13311 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                            13312 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                            13313 ; 172  |//$FILENAME sethandleforsearch.src
                            13314 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                            13315 ; 174  |//$FILENAME wmaWrap.src
                            13316 ; 175  |#define RSRC_WMADEC_CODE 11    
                            13317 ; 176  |//$FILENAME extractfilename.src
                            13318 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                            13319 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                            13320 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                            13321 ; 180  |//$FILENAME SoftTimerMod.src
                            13322 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                            13323 ; 182  |//$FILENAME GetShortfilename.src
                            13324 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
                            13325 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
                            13326 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                            13327 ; 186  |//$FILENAME playerstatemachine.src
                            13328 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                            13329 ; 188  |//$FILENAME SysMod.src
                            13330 ; 189  |#define RSRC_SYSMOD_CODE 18    
                            13331 ; 190  |//$FILENAME drm_b64_decodew.src
                            13332 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
                            13333 ; 192  |//$FILENAME discardtrailigperiods.src
                            13334 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
                            13335 ; 194  |//$FILENAME uppercase.src
                            13336 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                            13337 ; 196  |//$FILENAME strlength.src
                            13338 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                            13339 ; 198  |//$FILENAME ConverToShortname.src
                            13340 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                            13341 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                            13342 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                            13343 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                            13344 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                            13345 ; 204  |//$FILENAME drm_sst_closekey.src
                            13346 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                            13347 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                            13348 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                            13349 ; 208  |//$FILENAME freehandle.src
                            13350 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                            13351 ; 210  |//$FILENAME searchfreehandleallocate.src
                            13352 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                            13353 ; 212  |//$FILENAME _parselicenseattributes.src
                            13354 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                            13355 ; 214  |//$FILENAME variablesecstategetorset.src
                            13356 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                            13357 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                            13358 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                            13359 ; 218  |//$FILENAME drm_mgr_initialize.src
                            13360 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                            13361 ; 220  |//$FILENAME display.src
                            13362 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                            13363 ; 222  |//$FILENAME DisplayModule.src
                            13364 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                            13365 ; 224  |//$FILENAME extractpath.src
                            13366 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                            13367 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                            13368 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                            13369 ; 228  |//$FILENAME _getprivatekey.src
                            13370 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                            13371 ; 230  |//$FILENAME drm_hds_opennamespace.src
                            13372 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
                            13373 ; 232  |//$FILENAME drm_hds_openslot.src
                            13374 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                            13375 ; 234  |//$FILENAME fclose.src
                            13376 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                            13377 ; 236  |//$FILENAME drm_cphr_init.src
                            13378 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                            13379 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                            13380 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                            13381 ; 240  |//$FILENAME drm_mgr_bind.src
                            13382 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                            13383 ; 242  |//$FILENAME _decryptcontentkey.src
                            13384 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                            13385 ; 244  |//$FILENAME drm_mac_inv32.src
                            13386 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
                            13387 ; 246  |//$FILENAME drm_lic_getattribute.src
                            13388 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                            13389 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                            13390 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                            13391 ; 250  |//$FILENAME drm_dcp_getattribute.src
                            13392 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                            13393 ; 252  |//$FILENAME effectsmodules.src
                            13394 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
                            13395 ; 254  |//$FILENAME janusx.src
                            13396 ; 255  |#define RSRC_JANUSX_CODE 51    
                            13397 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                            13398 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                            13399 ; 258  |//$FILENAME eval.src
                            13400 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                            13401 ; 260  |//$FILENAME _verifyslothash.src
                            13402 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                            13403 ; 262  |//$FILENAME januscommon.src
                            13404 ; 263  |#define RSRC_JANUS_COMMON 55    
                            13405 ; 264  |//$FILENAME changecase.src
                            13406 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                            13407 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                            13408 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                            13409 ; 268  |//$FILENAME _loadlicenseattributes.src
                            13410 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                            13411 ; 270  |//$FILENAME drm_hds_slotseek.src
                            13412 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                            13413 ; 272  |//$FILENAME drm_hds_slotwrite.src
                            13414 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                            13415 ; 274  |//$FILENAME drm_levl_performoperations.src
                            13416 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                            13417 ; 276  |//$FILENAME drm_lic_verifysignature.src
                            13418 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                            13419 ; 278  |//$FILENAME drm_lst_getlicense.src
                            13420 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                            13421 ; 280  |//$FILENAME drm_utl_numbertostring.src
                            13422 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                            13423 ; 282  |//$FILENAME oem_writefile.src
                            13424 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                            13425 ; 284  |//$FILENAME drm_sst_getdata.src
                            13426 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                            13427 ; 286  |//$FILENAME updatehandlemode.src
                            13428 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13429 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                            13430 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                            13431 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                            13432 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                            13433 ; 292  |//$FILENAME doplay_p.src
                            13434 ; 293  |#define RSRC_DOPLAY_P 70    
                            13435 ; 294  |//$FILENAME fatwritep.src
                            13436 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                            13437 ; 296  |//$FILENAME findfirst.src
                            13438 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                            13439 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                            13440 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                            13441 ; 300  |//$FILENAME changetorootdirectory.src
                            13442 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                            13443 ; 302  |//$FILENAME _findkeypair.src
                            13444 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                            13445 ; 304  |//$FILENAME variablemachinegetorset.src
                            13446 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                            13447 ; 306  |//$FILENAME _hdsslotenumnext.src
                            13448 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
                            13449 ; 308  |//$FILENAME getlspubkey.src
                            13450 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                            13451 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                            13452 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                            13453 ; 312  |//$FILENAME drm_utl_decodekid.src
                            13454 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                            13455 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                            13456 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
                            13457 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
                            13458 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
                            13459 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                            13460 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                            13461 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                            13462 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                            13463 ; 322  |//$FILENAME aes_enc.src
                            13464 ; 323  |#define RSRC_AES_ENC 85    
                            13465 ; 324  |//$FILENAME getprivkey.src
                            13466 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                            13467 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                            13468 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                            13469 ; 328  |//$FILENAME playlist_codebank.src
                            13470 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                            13471 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                            13472 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                            13473 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                            13474 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                            13475 ; 334  |//$FILENAME _getdevicecert.src
                            13476 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                            13477 ; 336  |//$FILENAME drm_lic_reportactions.src
                            13478 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                            13479 ; 338  |//$FILENAME drmcrt_wcsntol.src
                            13480 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                            13481 ; 340  |//$FILENAME _basicheaderchecks.src
                            13482 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                            13483 ; 342  |//$FILENAME drm_hdr_getattribute.src
                            13484 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                            13485 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                            13486 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                            13487 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                            13488 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                            13489 ; 348  |//$FILENAME drm_lst_open.src
                            13490 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                            13491 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                            13492 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                            13493 ; 352  |//$FILENAME _verifysymmerticsignature.src
                            13494 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                            13495 ; 354  |//$FILENAME oem_openfile.src
                            13496 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
                            13497 ; 356  |//$FILENAME _getdrmfullpathname.src
                            13498 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                            13499 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                            13500 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                            13501 ; 360  |//$FILENAME _applydiffstostore.src
                            13502 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                            13503 ; 362  |//$FILENAME drm_sst_setdata.src
                            13504 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                            13505 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                            13506 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                            13507 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                            13508 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                            13509 ; 368  |//$FILENAME playerlib_extra.src
                            13510 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
                            13511 ; 370  |//$FILENAME wmaCommon.src
                            13512 ; 371  |#define RSRC_WMA_COMMON 109    
                            13513 ; 372  |//$FILENAME wmainit.src
                            13514 ; 373  |#define RSRC_WMA_INIT 110    
                            13515 ; 374  |//$FILENAME playlist2traverse_codebank.src
                            13516 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                            13517 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                            13518 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
                            13519 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                            13520 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
                            13521 ; 380  |//$FILENAME drm_hds_closestore.src
                            13522 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                            13523 ; 382  |//$FILENAME _hdsloadsrn.src
                            13524 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                            13525 ; 384  |//$FILENAME _loadproritizedlist.src
                            13526 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                            13527 ; 386  |//$FILENAME drm_lst_initenum.src
                            13528 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                            13529 ; 388  |//$FILENAME _loadattributesintocache.src
                            13530 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                            13531 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                            13532 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                            13533 ; 392  |
                            13534 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                            13535 ; 394  |//  Menu Modules (codebanks)
                            13536 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                            13537 ; 396  |//$FILENAME mainmenu.src
                            13538 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                            13539 ; 398  |//$FILENAME displaylists.src
                            13540 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                            13541 ; 400  |
                            13542 ; 401  |//$FILENAME voicemenu.src
                            13543 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                            13544 ; 403  |//$FILENAME fmtunermenu.src
                            13545 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                            13546 ; 405  |//$FILENAME recorderstatemachine.src
                            13547 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                            13548 ; 407  |
                            13549 ; 408  |//$FILENAME eqmenu.src
                            13550 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                            13551 ; 410  |//$FILENAME playmodemenu.src
                            13552 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                            13553 ; 412  |//$FILENAME contrastmenu.src
                            13554 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                            13555 ; 414  |//$FILENAME pwrsettingsmenu.src
                            13556 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                            13557 ; 416  |//$FILENAME timedatemenu.src
                            13558 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
                            13559 ; 418  |//$FILENAME settimemenu.src
                            13560 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                            13561 ; 420  |//$FILENAME setdatemenu.src
                            13562 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                            13563 ; 422  |//$FILENAME settingsmenu.src
                            13564 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                            13565 ; 424  |//$FILENAME string_system_menu.src
                            13566 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                            13567 ; 426  |//$FILENAME deletemenu.src
                            13568 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                            13569 ; 428  |//$FILENAME aboutmenu.src
                            13570 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                            13571 ; 430  |
                            13572 ; 431  |//$FILENAME spectrogram.src
                            13573 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
                            13574 ; 433  |
                            13575 ; 434  |//$FILENAME motionvideomenu.src
                            13576 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                            13577 ; 436  |//$FILENAME motionvideomenuinitstate.src
                            13578 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                            13579 ; 438  |//$FILENAME jpegdisplaymenu.src
                            13580 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
                            13581 ; 440  |//$FILENAME jpegmanualmenu.src
                            13582 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
                            13583 ; 442  |//$FILENAME jpegthumbnailmenu.src
                            13584 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                            13585 ; 444  |//$FILENAME jpegslideshowmenu.src
                            13586 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                            13587 ; 446  |//$FILENAME albumartmenu.src
                            13588 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                            13589 ; 448  |//$FILENAME jpegfileutilextra.src
                            13590 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                            13591 ; 450  |
                            13592 ; 451  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13593 ; 452  |// General Modules
                            13594 ; 453  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13595 ; 454  |//$FILENAME MixMod.src
                            13596 ; 455  |#define RSRC_MIXMOD_CODE 145    
                            13597 ; 456  |//$FILENAME TunerModule.src
                            13598 ; 457  |#define RSRC_TUNER_MODULE 146    
                            13599 ; 458  |//$FILENAME geqoverlay.src
                            13600 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                            13601 ; 460  |
                            13602 ; 461  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13603 ; 462  |// Decoders/Encoders
                            13604 ; 463  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13605 ; 464  |//$FILENAME DecMod.src
                            13606 ; 465  |#define RSRC_DECMOD_CODE 148    
                            13607 ; 466  |//$FILENAME mp3p.src
                            13608 ; 467  |#define RSRC_MP3P_CODE 149    
                            13609 ; 468  |//$FILENAME mp3x.src
                            13610 ; 469  |#define RSRC_MP3X_CODE 150    
                            13611 ; 470  |//$FILENAME mp3y.src
                            13612 ; 471  |#define RSRC_MP3Y_CODE 151    
                            13613 ; 472  |//$FILENAME janusp.src
                            13614 ; 473  |#define RSRC_JANUSP_CODE 152    
                            13615 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                            13616 ; 475  |
                            13617 ; 476  |//$FILENAME decadpcmimamod.src
                            13618 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                            13619 ; 478  |//$FILENAME dec_adpcmp.src
                            13620 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                            13621 ; 480  |//$FILENAME dec_adpcmx.src
                            13622 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                            13623 ; 482  |//$FILENAME dec_adpcmy.src
                            13624 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                            13625 ; 484  |
                            13626 ; 485  |//$FILENAME decadpcmsmvmod.src
                            13627 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                            13628 ; 487  |//$FILENAME dec_smvadpcmp.src
                            13629 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                            13630 ; 489  |//$FILENAME dec_smvadpcmx.src
                            13631 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
                            13632 ; 491  |//$FILENAME dec_smvadpcmy.src
                            13633 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                            13634 ; 493  |
                            13635 ; 494  |//$FILENAME encadpcmimamod.src
                            13636 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                            13637 ; 496  |//$FILENAME enc_adpcmp.src
                            13638 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
                            13639 ; 498  |//$FILENAME enc_adpcmx.src
                            13640 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
                            13641 ; 500  |//$FILENAME enc_adpcmy.src
                            13642 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                            13643 ; 502  |
                            13644 ; 503  |//$FILENAME jpeg_p.src
                            13645 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                            13646 ; 505  |//$FILENAME jpeg_x.src
                            13647 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                            13648 ; 507  |//$FILENAME jpeg_y.src
                            13649 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                            13650 ; 509  |//$FILENAME jpeg2_y.src
                            13651 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                            13652 ; 511  |//$FILENAME bmp2_y.src
                            13653 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                            13654 ; 513  |//$FILENAME bmp_p.src
                            13655 ; 514  |#define RSRC_BMP_DECODER_P 170    
                            13656 ; 515  |
                            13657 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                            13658 ; 517  |//$FILENAME smvjpeg_x.src
                            13659 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                            13660 ; 519  |//$FILENAME smvjpeg_y.src
                            13661 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                            13662 ; 521  |
                            13663 ; 522  |
                            13664 ; 523  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13665 ; 524  |// System Settings
                            13666 ; 525  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13667 ; 526  |//$FILENAME settings.src
                            13668 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                            13669 ; 528  |
                            13670 ; 529  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13671 ; 530  |// Media Device Drivers
                            13672 ; 531  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13673 ; 532  |//This resource is filled with garbage unless it is the MMC build
                            13674 ; 533  |//$FILENAME null.src
                            13675 ; 534  |#define RSRC_MMCDD_CODE 174    
                            13676 ; 535  |//$FILENAME null.src
                            13677 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                            13678 ; 537  |
                            13679 ; 538  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13680 ; 539  |//  PlayState resources
                            13681 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            13682 ; 541  |//$FILENAME play_icon_with_border.src
                            13683 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                            13684 ; 543  |//$FILENAME pause_icon_with_border.src
                            13685 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                            13686 ; 545  |//$FILENAME stop_icon_with_border.src
                            13687 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                            13688 ; 547  |//$FILENAME record_icon_with_border.src
                            13689 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
                            13690 ; 549  |//$FILENAME paused_record_icon_with_border.src
                            13691 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                            13692 ; 551  |//$FILENAME ffwd_icon_with_border.src
                            13693 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                            13694 ; 553  |//$FILENAME rwnd_icon_with_border.src
                            13695 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                            13696 ; 555  |
                            13697 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                            13698 ; 557  |//  PlayMode resources
                            13699 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                            13700 ; 559  |//$FILENAME repeatall_icon.src
                            13701 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                            13702 ; 561  |//$FILENAME repeatsong_icon.src
                            13703 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                            13704 ; 563  |//$FILENAME shuffle_icon.src
                            13705 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                            13706 ; 565  |//$FILENAME random_icon.src
                            13707 ; 566  |#define RSRC_RANDOM_ICON 186    
                            13708 ; 567  |//$FILENAME repeatallclear_icon.src
                            13709 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                            13710 ; 569  |//$FILENAME repeatsongclear_icon.src
                            13711 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                            13712 ; 571  |//$FILENAME shuffleclear_icon.src
                            13713 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                            13714 ; 573  |
                            13715 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                            13716 ; 575  |//  Battery Status
                            13717 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                            13718 ; 577  |//$FILENAME battery_00.src
                            13719 ; 578  |#define RSRC_BATTERY_00 190    
                            13720 ; 579  |//$FILENAME battery_01.src
                            13721 ; 580  |#define RSRC_BATTERY_01 191    
                            13722 ; 581  |//$FILENAME battery_02.src
                            13723 ; 582  |#define RSRC_BATTERY_02 192    
                            13724 ; 583  |//$FILENAME battery_03.src
                            13725 ; 584  |#define RSRC_BATTERY_03 193    
                            13726 ; 585  |//$FILENAME battery_04.src
                            13727 ; 586  |#define RSRC_BATTERY_04 194    
                            13728 ; 587  |//$FILENAME battery_05.src
                            13729 ; 588  |#define RSRC_BATTERY_05 195    
                            13730 ; 589  |//$FILENAME battery_06.src
                            13731 ; 590  |#define RSRC_BATTERY_06 196    
                            13732 ; 591  |//$FILENAME battery_07.src
                            13733 ; 592  |#define RSRC_BATTERY_07 197    
                            13734 ; 593  |//$FILENAME battery_08.src
                            13735 ; 594  |#define RSRC_BATTERY_08 198    
                            13736 ; 595  |//$FILENAME battery_09.src
                            13737 ; 596  |#define RSRC_BATTERY_09 199    
                            13738 ; 597  |//$FILENAME battery_10.src
                            13739 ; 598  |#define RSRC_BATTERY_10 200    
                            13740 ; 599  |
                            13741 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                            13742 ; 601  |//  System Icons
                            13743 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                            13744 ; 603  |//$FILENAME disk_small.src
                            13745 ; 604  |#define RSRC_DISK_ICON 201    
                            13746 ; 605  |//$FILENAME lock_small.src
                            13747 ; 606  |#define RSRC_LOCK_ICON 202    
                            13748 ; 607  |//$FILENAME icon_music_mode.src
                            13749 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                            13750 ; 609  |//$FILENAME icon_voice_mode.src
                            13751 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
                            13752 ; 611  |
                            13753 ; 612  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13754 ; 613  |// Volume Bitmaps
                            13755 ; 614  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            13756 ; 615  |//$FILENAME icon_vol_00.src
                            13757 ; 616  |#define RSRC_ICON_VOL_00 205    
                            13758 ; 617  |//$FILENAME icon_vol_01.src
                            13759 ; 618  |#define RSRC_ICON_VOL_01 206    
                            13760 ; 619  |//$FILENAME icon_vol_02.src
                            13761 ; 620  |#define RSRC_ICON_VOL_02 207    
                            13762 ; 621  |//$FILENAME icon_vol_03.src
                            13763 ; 622  |#define RSRC_ICON_VOL_03 208    
                            13764 ; 623  |//$FILENAME icon_vol_04.src
                            13765 ; 624  |#define RSRC_ICON_VOL_04 209    
                            13766 ; 625  |//$FILENAME icon_vol_05.src
                            13767 ; 626  |#define RSRC_ICON_VOL_05 210    
                            13768 ; 627  |//$FILENAME icon_vol_06.src
                            13769 ; 628  |#define RSRC_ICON_VOL_06 211    
                            13770 ; 629  |//$FILENAME icon_vol_07.src
                            13771 ; 630  |#define RSRC_ICON_VOL_07 212    
                            13772 ; 631  |//$FILENAME icon_vol_08.src
                            13773 ; 632  |#define RSRC_ICON_VOL_08 213    
                            13774 ; 633  |//$FILENAME icon_vol_09.src
                            13775 ; 634  |#define RSRC_ICON_VOL_09 214    
                            13776 ; 635  |//$FILENAME icon_vol_10.src
                            13777 ; 636  |#define RSRC_ICON_VOL_10 215    
                            13778 ; 637  |//$FILENAME icon_vol_11.src
                            13779 ; 638  |#define RSRC_ICON_VOL_11 216    
                            13780 ; 639  |//$FILENAME icon_vol_12.src
                            13781 ; 640  |#define RSRC_ICON_VOL_12 217    
                            13782 ; 641  |//$FILENAME icon_vol_13.src
                            13783 ; 642  |#define RSRC_ICON_VOL_13 218    
                            13784 ; 643  |//$FILENAME icon_vol_14.src
                            13785 ; 644  |#define RSRC_ICON_VOL_14 219    
                            13786 ; 645  |//$FILENAME icon_vol_15.src
                            13787 ; 646  |#define RSRC_ICON_VOL_15 220    
                            13788 ; 647  |//$FILENAME icon_vol_16.src
                            13789 ; 648  |#define RSRC_ICON_VOL_16 221    
                            13790 ; 649  |//$FILENAME icon_vol_17.src
                            13791 ; 650  |#define RSRC_ICON_VOL_17 222    
                            13792 ; 651  |//$FILENAME icon_vol_18.src
                            13793 ; 652  |#define RSRC_ICON_VOL_18 223    
                            13794 ; 653  |//$FILENAME icon_vol_19.src
                            13795 ; 654  |#define RSRC_ICON_VOL_19 224    
                            13796 ; 655  |//$FILENAME icon_vol_20.src
                            13797 ; 656  |#define RSRC_ICON_VOL_20 225    
                            13798 ; 657  |//$FILENAME icon_vol_21.src
                            13799 ; 658  |#define RSRC_ICON_VOL_21 226    
                            13800 ; 659  |//$FILENAME icon_vol_22.src
                            13801 ; 660  |#define RSRC_ICON_VOL_22 227    
                            13802 ; 661  |//$FILENAME icon_vol_23.src
                            13803 ; 662  |#define RSRC_ICON_VOL_23 228    
                            13804 ; 663  |//$FILENAME icon_vol_24.src
                            13805 ; 664  |#define RSRC_ICON_VOL_24 229    
                            13806 ; 665  |//$FILENAME icon_vol_25.src
                            13807 ; 666  |#define RSRC_ICON_VOL_25 230    
                            13808 ; 667  |//$FILENAME icon_vol_26.src
                            13809 ; 668  |#define RSRC_ICON_VOL_26 231    
                            13810 ; 669  |//$FILENAME icon_vol_27.src
                            13811 ; 670  |#define RSRC_ICON_VOL_27 232    
                            13812 ; 671  |//$FILENAME icon_vol_28.src
                            13813 ; 672  |#define RSRC_ICON_VOL_28 233    
                            13814 ; 673  |//$FILENAME icon_vol_29.src
                            13815 ; 674  |#define RSRC_ICON_VOL_29 234    
                            13816 ; 675  |//$FILENAME icon_vol_30.src
                            13817 ; 676  |#define RSRC_ICON_VOL_30 235    
                            13818 ; 677  |//$FILENAME icon_vol_31.src
                            13819 ; 678  |#define RSRC_ICON_VOL_31 236    
                            13820 ; 679  |
                            13821 ; 680  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13822 ; 681  |// Splash Screen Stuff
                            13823 ; 682  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13824 ; 683  |//$FILENAME st_bw1.src
                            13825 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                            13826 ; 685  |//$FILENAME siglogo1.src
                            13827 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                            13828 ; 687  |//$FILENAME siglogo2.src
                            13829 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                            13830 ; 689  |//$FILENAME siglogo3.src
                            13831 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                            13832 ; 691  |//$FILENAME siglogo4.src
                            13833 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                            13834 ; 693  |//$FILENAME siglogo5.src
                            13835 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                            13836 ; 695  |//$FILENAME siglogo6.src
                            13837 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                            13838 ; 697  |//$FILENAME siglogo7.src
                            13839 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                            13840 ; 699  |//$FILENAME siglogo8.src
                            13841 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                            13842 ; 701  |//$FILENAME siglogo9.src
                            13843 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                            13844 ; 703  |//$FILENAME siglogo10.src
                            13845 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                            13846 ; 705  |//$FILENAME siglogo11.src
                            13847 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                            13848 ; 707  |//$FILENAME siglogo12.src
                            13849 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                            13850 ; 709  |//$FILENAME siglogo13.src
                            13851 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                            13852 ; 711  |//$FILENAME siglogo.src
                            13853 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                            13854 ; 713  |
                            13855 ; 714  |//$FILENAME locked.src
                            13856 ; 715  |#define RSRC_LOCKED_SCREEN 252    
                            13857 ; 716  |
                            13858 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                            13859 ; 718  |//  Shutdown
                            13860 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                            13861 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                            13862 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                            13863 ; 722  |//$FILENAME status_16_6_steps_0.src
                            13864 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                            13865 ; 724  |//$FILENAME status_16_6_steps_1.src
                            13866 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                            13867 ; 726  |//$FILENAME status_16_6_steps_2.src
                            13868 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                            13869 ; 728  |//$FILENAME status_16_6_steps_3.src
                            13870 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
                            13871 ; 730  |//$FILENAME status_16_6_steps_4.src
                            13872 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                            13873 ; 732  |//$FILENAME status_16_6_steps_5.src
                            13874 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                            13875 ; 734  |//$FILENAME status_16_6_steps_6.src
                            13876 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                            13877 ; 736  |
                            13878 ; 737  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13879 ; 738  |// EQ
                            13880 ; 739  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13881 ; 740  |//$FILENAME eq_clear_icon.src
                            13882 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                            13883 ; 742  |//$FILENAME rock_icon.src
                            13884 ; 743  |#define RSRC_ROCK_ICON 262    
                            13885 ; 744  |//$FILENAME jazz_icon.src
                            13886 ; 745  |#define RSRC_JAZZ_ICON 263    
                            13887 ; 746  |//$FILENAME classic_icon.src
                            13888 ; 747  |#define RSRC_CLASSIC_ICON 264    
                            13889 ; 748  |//$FILENAME pop_icon.src
                            13890 ; 749  |#define RSRC_POP_ICON 265    
                            13891 ; 750  |//$FILENAME custom_icon.src
                            13892 ; 751  |#define RSRC_CUSTOM_ICON 266    
                            13893 ; 752  |
                            13894 ; 753  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13895 ; 754  |// AB
                            13896 ; 755  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13897 ; 756  |//$FILENAME ab_mark_a.src
                            13898 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                            13899 ; 758  |//$FILENAME ab_mark_b.src
                            13900 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                            13901 ; 760  |
                            13902 ; 761  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13903 ; 762  |// Menu Display Resources
                            13904 ; 763  |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            13905 ; 764  |//$FILENAME string_music_menu.src
                            13906 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                            13907 ; 766  |//$FILENAME string_mvideo_menu.src
                            13908 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                            13909 ; 768  |//$FILENAME string_jpeg_display_menu.src
                            13910 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                            13911 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                            13912 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
                            13913 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                            13914 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                            13915 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                            13916 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                            13917 ; 776  |//$FILENAME string_voice_menu.src
                            13918 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                            13919 ; 778  |//$FILENAME string_audible_menu.src
                            13920 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                            13921 ; 780  |//$FILENAME string_fmtuner_menu.src
                            13922 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                            13923 ; 782  |//$FILENAME string_settings_menu.src
                            13924 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                            13925 ; 784  |//$FILENAME string_eq_menu.src
                            13926 ; 785  |#define RSRC_STRING_EQ_MENU 279    
                            13927 ; 786  |//$FILENAME string_playmode_menu.src
                            13928 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                            13929 ; 788  |//$FILENAME string_contrast_menu.src
                            13930 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13931 ; 790  |//$FILENAME string_pwrsavings_menu.src
                            13932 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                            13933 ; 792  |//$FILENAME string_time_date_menu.src
                            13934 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                            13935 ; 794  |//$FILENAME string_set_time_menu.src
                            13936 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
                            13937 ; 796  |//$FILENAME string_set_date_menu.src
                            13938 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                            13939 ; 798  |//$FILENAME string_exit_menu.src
                            13940 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                            13941 ; 800  |//$FILENAME string_rock_menu.src
                            13942 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                            13943 ; 802  |//$FILENAME string_pop_menu.src
                            13944 ; 803  |#define RSRC_STRING_POP_MENU 288    
                            13945 ; 804  |//$FILENAME string_classic_menu.src
                            13946 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                            13947 ; 806  |//$FILENAME string_normal_menu.src
                            13948 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                            13949 ; 808  |//$FILENAME string_jazz_menu.src
                            13950 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                            13951 ; 810  |//$FILENAME string_repeat1_menu.src
                            13952 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                            13953 ; 812  |//$FILENAME string_repeatall_menu.src
                            13954 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                            13955 ; 814  |//$FILENAME string_shuffle_menu.src
                            13956 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                            13957 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                            13958 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
                            13959 ; 818  |//$FILENAME string_disable_menu.src
                            13960 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                            13961 ; 820  |//$FILENAME string_1min_menu.src
                            13962 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                            13963 ; 822  |//$FILENAME string_2min_menu.src
                            13964 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                            13965 ; 824  |//$FILENAME string_5min_menu.src
                            13966 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                            13967 ; 826  |//$FILENAME string_10min_menu.src
                            13968 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                            13969 ; 828  |//$FILENAME string_system_menu.src
                            13970 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                            13971 ; 830  |//$FILENAME string_about_menu.src
                            13972 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                            13973 ; 832  |//$FILENAME string_delete_menu.src
                            13974 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
                            13975 ; 834  |//$FILENAME string_record_menu.src
                            13976 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                            13977 ; 836  |//$FILENAME string_spectrogram_menu.src
                            13978 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                            13979 ; 838  |
                            13980 ; 839  |//$FILENAME string_end_of_slide_show.src
                            13981 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                            13982 ; 841  |
                            13983 ; 842  |//$FILENAME string_mb.src
                            13984 ; 843  |#define RSRC_STRING_MB 307    
                            13985 ; 844  |
                            13986 ; 845  |//$FILENAME internal_media.src
                            13987 ; 846  |#define RSRC_INT_MEDIA 308    
                            13988 ; 847  |//$FILENAME external_media.src
                            13989 ; 848  |#define RSRC_EXT_MEDIA 309    
                            13990 ; 849  |
                            13991 ; 850  |//$FILENAME about_title.src
                            13992 ; 851  |#define RSRC_ABOUT_TITLE 310    
                            13993 ; 852  |//$FILENAME player_name.src
                            13994 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                            13995 ; 854  |
                            13996 ; 855  |//$FILENAME settings_title.src
                            13997 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                            13998 ; 857  |//$FILENAME jpeg_display_title.src
                            13999 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                            14000 ; 859  |//$FILENAME erase_title.src
                            14001 ; 860  |#define RSRC_ERASE_TITLE 314    
                            14002 ; 861  |
                            14003 ; 862  |//$FILENAME del_warning_no.src
                            14004 ; 863  |#define RSRC_DELETE_NO 315    
                            14005 ; 864  |//$FILENAME del_warning_yes.src
                            14006 ; 865  |#define RSRC_DELETE_YES 316    
                            14007 ; 866  |//$FILENAME del_warning_line1.src
                            14008 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                            14009 ; 868  |//$FILENAME del_warning_line2.src
                            14010 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                            14011 ; 870  |//$FILENAME lowbattery.src
                            14012 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                            14013 ; 872  |//$FILENAME vbr.src
                            14014 ; 873  |#define RSRC_VBR_BITMAP 320    
                            14015 ; 874  |
                            14016 ; 875  |//$FILENAME string_song.src
                            14017 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                            14018 ; 877  |//$FILENAME string_voice.src
                            14019 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                            14020 ; 879  |
                            14021 ; 880  |//$FILENAME time_date_title.src
                            14022 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                            14023 ; 882  |//$FILENAME set_time_title.src
                            14024 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                            14025 ; 884  |//$FILENAME set_date_title.src
                            14026 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                            14027 ; 886  |//$FILENAME string_searching.src
                            14028 ; 887  |#define RSRC_STRING_SEARCHING 326    
                            14029 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                            14030 ; 889  |//  Save Changes
                            14031 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                            14032 ; 891  |//$FILENAME save_changes_yes.src
                            14033 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                            14034 ; 893  |//$FILENAME save_changes_no.src
                            14035 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                            14036 ; 895  |//$FILENAME save_changes_cancel.src
                            14037 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                            14038 ; 897  |//$FILENAME save_changes_clear.src
                            14039 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                            14040 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                            14041 ; 900  |//  Contrast
                            14042 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                            14043 ; 902  |//$FILENAME contrast_title.src
                            14044 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                            14045 ; 904  |//$FILENAME contrast_frame.src
                            14046 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                            14047 ; 906  |//$FILENAME contrast_level0.src
                            14048 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                            14049 ; 908  |//$FILENAME contrast_level1.src
                            14050 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
                            14051 ; 910  |//$FILENAME contrast_level2.src
                            14052 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                            14053 ; 912  |//$FILENAME contrast_level3.src
                            14054 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                            14055 ; 914  |//$FILENAME contrast_level4.src
                            14056 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                            14057 ; 916  |//$FILENAME contrast_level5.src
                            14058 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                            14059 ; 918  |//$FILENAME contrast_level6.src
                            14060 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
                            14061 ; 920  |//$FILENAME contrast_level7.src
                            14062 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                            14063 ; 922  |//$FILENAME contrast_level8.src
                            14064 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                            14065 ; 924  |//$FILENAME contrast_level9.src
                            14066 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                            14067 ; 926  |//$FILENAME contrast_level10.src
                            14068 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                            14069 ; 928  |
                            14070 ; 929  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            14071 ; 930  |// Funclets
                            14072 ; 931  |////////////////////////////////////////////////////////////////////////////////////////////////////
                            14073 ; 932  |//$FILENAME Funclet_SetRTC.src
                            14074 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                            14075 ; 934  |//$FILENAME Funclet_InitRTC.src
                            14076 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                            14077 ; 936  |//$FILENAME Funclet_ReadRTC.src
                            14078 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                            14079 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                            14080 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                            14081 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                            14082 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                            14083 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                            14084 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                            14085 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                            14086 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                            14087 ; 946  |//$FILENAME Funclet_AnalogInit.src
                            14088 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                            14089 ; 948  |//$FILENAME Funclet_UsbConnected.src
                            14090 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                            14091 ; 950  |//$FILENAME Funclet_ButtonInit.src
                            14092 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                            14093 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                            14094 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                            14095 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                            14096 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
                            14097 ; 956  |//$FILENAME Funclet_StartProject.src
                            14098 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                            14099 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                            14100 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                            14101 ; 960  |//$FILENAME null.src
                            14102 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                            14103 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                            14104 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                            14105 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                            14106 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                            14107 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                            14108 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                            14109 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                            14110 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
                            14111 ; 970  |//$FILENAME null.src
                            14112 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                            14113 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                            14114 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                            14115 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                            14116 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                            14117 ; 976  |//$FILENAME null.src
                            14118 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                            14119 ; 978  |//$FILENAME null.src
                            14120 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
                            14121 ; 980  |//$FILENAME null.src
                            14122 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                            14123 ; 982  |//$FILENAME null.src
                            14124 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                            14125 ; 984  |//$FILENAME null.src
                            14126 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                            14127 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                            14128 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                            14129 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                            14130 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                            14131 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                            14132 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                            14133 ; 992  |//$FILENAME null.src
                            14134 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                            14135 ; 994  |//$FILENAME null.src
                            14136 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                            14137 ; 996  |//$FILENAME Funclet_SaveSettings.src
                            14138 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                            14139 ; 998  |//$FILENAME Funclet_LoadSettings.src
                            14140 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                            14141 ; 1000 |///////////////////////////////////////////////////////////////
                            14142 ; 1001 |// Sanyo FM Tuner Fuclet
                            14143 ; 1002 |///////////////////////////////////////////////////////////////
                            14144 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                            14145 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations.src
                            14146 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.src
                            14147 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoStereo.src
                            14148 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                            14149 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                            14150 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.src
                            14151 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
                            14152 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.src
                            14153 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFieldStrength.src
                            14154 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapOsc.src
                            14155 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmStation.src
                            14156 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPreset.src
                            14157 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                            14158 ; 1017 |
                            14159 ; 1018 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            14160 ; 1019 |// WMA Resources
                            14161 ; 1020 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            14162 ; 1021 |//$FILENAME wmaCore.src
                            14163 ; 1022 |#define RSRC_WMA_CORE 378    
                            14164 ; 1023 |//$FILENAME wmaMidLow.src
                            14165 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                            14166 ; 1025 |//$FILENAME wmaHigh.src
                            14167 ; 1026 |#define RSRC_WMA_HIGH 380    
                            14168 ; 1027 |//$FILENAME wmaHighMid.src
                            14169 ; 1028 |#define RSRC_WMA_HIGHMID 381    
                            14170 ; 1029 |//$FILENAME wmaMid.src
                            14171 ; 1030 |#define RSRC_WMA_MID 382    
                            14172 ; 1031 |//$FILENAME wmaLow.src
                            14173 ; 1032 |#define RSRC_WMA_LOW 383    
                            14174 ; 1033 |//$FILENAME wmaX1mem.src
                            14175 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                            14176 ; 1035 |//$FILENAME wmaYmem.src
                            14177 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                            14178 ; 1037 |//$FILENAME wmaLXmem.src
                            14179 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                            14180 ; 1039 |//$FILENAME wmaLYmem.src
                            14181 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14182 ; 1041 |//$FILENAME wmaHuff44Qb.src
                            14183 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                            14184 ; 1043 |//$FILENAME wmaHuff44Ob.src
                            14185 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                            14186 ; 1045 |//$FILENAME wmaHuff16Ob.src
                            14187 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                            14188 ; 1047 |//$FILENAME drmpdcommon.src
                            14189 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                            14190 ; 1049 |//$FILENAME januswmasupport.src
                            14191 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                            14192 ; 1051 |//$FILENAME wmalicenseinit.src
                            14193 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                            14194 ; 1053 |//$FILENAME wma_tables.src
                            14195 ; 1054 |#define RSRC_WMA_TABLES 394    
                            14196 ; 1055 |//$FILENAME janus_tables.src
                            14197 ; 1056 |#define RSRC_JANUS_TABLES 395    
                            14198 ; 1057 |//$FILENAME wma_constants.src
                            14199 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                            14200 ; 1059 |//$FILENAME janus_constants.src
                            14201 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                            14202 ; 1061 |//$FILENAME janus_xmem.src
                            14203 ; 1062 |#define RSRC_JANUS_X 398    
                            14204 ; 1063 |//$FILENAME janusy_data.src
                            14205 ; 1064 |#define RSRC_JANUSY_DATA 399    
                            14206 ; 1065 |
                            14207 ; 1066 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            14208 ; 1067 |// Fonts -- these are last because they are very large
                            14209 ; 1068 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            14210 ; 1069 |//$FILENAME font_table.src
                            14211 ; 1070 |#define RSRC_FONT_TABLE 400    
                            14212 ; 1071 |//$FILENAME font_PGM.src
                            14213 ; 1072 |#define RSRC_PGM_8 401    
                            14214 ; 1073 |//$FILENAME font_SGMs.src
                            14215 ; 1074 |#define RSRC_SGMS_8 402    
                            14216 ; 1075 |//$FILENAME font_script_00.src
                            14217 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                            14218 ; 1077 |//$FILENAME font_scripts.src
                            14219 ; 1078 |#define RSRC_SCRIPTS_8 404    
                            14220 ; 1079 |//$FILENAME font_PDM.src
                            14221 ; 1080 |#define RSRC_PDM 405    
                            14222 ; 1081 |//$FILENAME font_SDMs.src
                            14223 ; 1082 |#define RSRC_SDMS 406    
                            14224 ; 1083 |//$FILENAME bitmap_warning.src
                            14225 ; 1084 |#define RSRC_WARNING 407    
                            14226 ; 1085 |//$FILENAME bitmap_device_full.src
                            14227 ; 1086 |#define RSRC_DEVICE_FULL 408    
                            14228 ; 1087 |
                            14229 ; 1088 |
                            14230 ; 1089 |//$FILENAME lcd_controller_init.src
                            14231 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                            14232 ; 1091 |
                            14233 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                            14234 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                            14235 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                            14236 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                            14237 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                            14238 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                            14239 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                            14240 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                            14241 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                            14242 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                            14243 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                            14244 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                            14245 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                            14246 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                            14247 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                            14248 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                            14249 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                            14250 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                            14251 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                            14252 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                            14253 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                            14254 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                            14255 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                            14256 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                            14257 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                            14258 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                            14259 ; 1118 |
                            14260 ; 1119 |
                            14261 ; 1120 |//$FILENAME sysrecord.src
                            14262 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                            14263 ; 1122 |
                            14264 ; 1123 |//$FILENAME string_record_settings.src
                            14265 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                            14266 ; 1125 |//$FILENAME string_sample_rate.src
                            14267 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                            14268 ; 1127 |//$FILENAME string_encoder.src
                            14269 ; 1128 |#define RSRC_STRING_ENCODER 426    
                            14270 ; 1129 |//$FILENAME string_adpcm.src
                            14271 ; 1130 |#define RSRC_STRING_ADPCM 427    
                            14272 ; 1131 |//$FILENAME string_msadpcm.src
                            14273 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                            14274 ; 1133 |//$FILENAME string_imadpcm.src
                            14275 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                            14276 ; 1135 |//$FILENAME string_pcm.src
                            14277 ; 1136 |#define RSRC_STRING_PCM 430    
                            14278 ; 1137 |//$FILENAME string_internal.src
                            14279 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                            14280 ; 1139 |//$FILENAME string_external.src
                            14281 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
                            14282 ; 1141 |//$FILENAME string_device.src
                            14283 ; 1142 |#define RSRC_STRING_DEVICE 433    
                            14284 ; 1143 |//$FILENAME string_source.src
                            14285 ; 1144 |#define RSRC_STRING_SOURCE 434    
                            14286 ; 1145 |//$FILENAME string_microphone.src
                            14287 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                            14288 ; 1147 |//$FILENAME string_linein.src
                            14289 ; 1148 |#define RSRC_STRING_LINEIN 436    
                            14290 ; 1149 |//$FILENAME string_bits.src
                            14291 ; 1150 |#define RSRC_STRING_BITS 437    
                            14292 ; 1151 |//$FILENAME string_4.src
                            14293 ; 1152 |#define RSRC_STRING_4 438    
                            14294 ; 1153 |//$FILENAME string_8.src
                            14295 ; 1154 |#define RSRC_STRING_8 439    
                            14296 ; 1155 |//$FILENAME string_16.src
                            14297 ; 1156 |#define RSRC_STRING_16 440    
                            14298 ; 1157 |//$FILENAME string_24.src
                            14299 ; 1158 |#define RSRC_STRING_24 441    
                            14300 ; 1159 |//$FILENAME string_fm.src
                            14301 ; 1160 |#define RSRC_STRING_FM 442    
                            14302 ; 1161 |//$FILENAME string_mono.src
                            14303 ; 1162 |#define RSRC_STRING_MONO 443    
                            14304 ; 1163 |//$FILENAME string_stereo.src
                            14305 ; 1164 |#define RSRC_STRING_STEREO 444    
                            14306 ; 1165 |//$FILENAME string_8000hz.src
                            14307 ; 1166 |#define RSRC_STRING_8000HZ 445    
                            14308 ; 1167 |//$FILENAME string_11025hz.src
                            14309 ; 1168 |#define RSRC_STRING_11025HZ 446    
                            14310 ; 1169 |//$FILENAME string_16000hz.src
                            14311 ; 1170 |#define RSRC_STRING_16000HZ 447    
                            14312 ; 1171 |//$FILENAME string_22050hz.src
                            14313 ; 1172 |#define RSRC_STRING_22050HZ 448    
                            14314 ; 1173 |//$FILENAME string_32000hz.src
                            14315 ; 1174 |#define RSRC_STRING_32000HZ 449    
                            14316 ; 1175 |//$FILENAME string_44100hz.src
                            14317 ; 1176 |#define RSRC_STRING_44100HZ 450    
                            14318 ; 1177 |//$FILENAME string_48000hz.src
                            14319 ; 1178 |#define RSRC_STRING_48000HZ 451    
                            14320 ; 1179 |//$FILENAME string_channels.src
                            14321 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                            14322 ; 1181 |//$FILENAME string_spaces.src
                            14323 ; 1182 |#define RSRC_STRING_SPACES 453    
                            14324 ; 1183 |//$FILENAME slider_bar.src
                            14325 ; 1184 |#define RSRC_SLIDER_BAR 454    
                            14326 ; 1185 |//$FILENAME slider_bar_inv.src
                            14327 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                            14328 ; 1187 |//$FILENAME slider_track.src
                            14329 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                            14330 ; 1189 |//$FILENAME string_no_files.src
                            14331 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                            14332 ; 1191 |
                            14333 ; 1192 |/////////////////////////////////////////////////////////////////////
                            14334 ; 1193 |//  Time and Date Resource Strings
                            14335 ; 1194 |/////////////////////////////////////////////////////////////////////
                            14336 ; 1195 |//$FILENAME string_sunday.src
                            14337 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                            14338 ; 1197 |//$FILENAME string_monday.src
                            14339 ; 1198 |#define RSRC_STRING_MONDAY 459    
                            14340 ; 1199 |//$FILENAME string_tuesday.src
                            14341 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                            14342 ; 1201 |//$FILENAME string_wednesday.src
                            14343 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
                            14344 ; 1203 |//$FILENAME string_thursday.src
                            14345 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                            14346 ; 1205 |//$FILENAME string_friday.src
                            14347 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                            14348 ; 1207 |//$FILENAME string_saturday.src
                            14349 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                            14350 ; 1209 |//$FILENAME string_am.src
                            14351 ; 1210 |#define RSRC_STRING_AM 465    
                            14352 ; 1211 |//$FILENAME string_pm.src
                            14353 ; 1212 |#define RSRC_STRING_PM 466    
                            14354 ; 1213 |//$FILENAME string_amclear.src
                            14355 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                            14356 ; 1215 |//$FILENAME string_slash.src
                            14357 ; 1216 |#define RSRC_STRING_SLASH 468    
                            14358 ; 1217 |//$FILENAME string_colon.src
                            14359 ; 1218 |#define RSRC_STRING_COLON 469    
                            14360 ; 1219 |//$FILENAME string_12hour.src
                            14361 ; 1220 |#define RSRC_STRING_12HOUR 470    
                            14362 ; 1221 |//$FILENAME string_24hour.src
                            14363 ; 1222 |#define RSRC_STRING_24HOUR 471    
                            14364 ; 1223 |//$FILENAME string_format.src
                            14365 ; 1224 |#define RSRC_STRING_FORMAT 472    
                            14366 ; 1225 |//$FILENAME string_mmddyyyy.src
                            14367 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                            14368 ; 1227 |//$FILENAME string_ddmmyyyy.src
                            14369 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                            14370 ; 1229 |//$FILENAME string_yyyymmdd.src
                            14371 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                            14372 ; 1231 |//$FILENAME string_ok.src
                            14373 ; 1232 |#define RSRC_STRING_OK 476    
                            14374 ; 1233 |//$FILENAME string_cancel.src
                            14375 ; 1234 |#define RSRC_STRING_CANCEL 477    
                            14376 ; 1235 |//$FILENAME negative_sign.src
                            14377 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                            14378 ; 1237 |//$FILENAME string_dec_pt5.src
                            14379 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                            14380 ; 1239 |//$FILENAME string_dec_pt0.src
                            14381 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                            14382 ; 1241 |//$FILENAME string_db.src
                            14383 ; 1242 |#define RSRC_DB_STRING 481    
                            14384 ; 1243 |//$FILENAME string_hz2.src
                            14385 ; 1244 |#define RSRC_HZ2_STRING 482    
                            14386 ; 1245 |
                            14387 ; 1246 |
                            14388 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                            14389 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                            14390 ; 1249 |//$FILENAME metadata_codebank.src
                            14391 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                            14392 ; 1251 |//$FILENAME mp3metadata_codebank.src
                            14393 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                            14394 ; 1253 |//$FILENAME wmametadata_codebank.src
                            14395 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                            14396 ; 1255 |//$FILENAME wavmetadata_codebank.src
                            14397 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                            14398 ; 1257 |//$FILENAME smvmetadata_codebank.src
                            14399 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                            14400 ; 1259 |//$FILENAME playlist2init_codebank.src
                            14401 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                            14402 ; 1261 |
                            14403 ; 1262 |//$FILENAME delete_successful.src
                            14404 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                            14405 ; 1264 |//$FILENAME delete_error.src
                            14406 ; 1265 |#define RSRC_DELETE_ERROR 491    
                            14407 ; 1266 |//$FILENAME lic_expired.src
                            14408 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                            14409 ; 1268 |//$FILENAME id3v2_codebank.src
                            14410 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                            14411 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                            14412 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
                            14413 ; 1272 |//$FILENAME lyrics3_codebank.src
                            14414 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                            14415 ; 1274 |//$FILENAME lrc_codebank.src
                            14416 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                            14417 ; 1276 |//$FILENAME lyrics_api_codebank.src
                            14418 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                            14419 ; 1278 |//$FILENAME wmalyrics_codebank.src
                            14420 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                            14421 ; 1280 |//$FILENAME apicframe_codebank.src
                            14422 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                            14423 ; 1282 |
                            14424 ; 1283 |//$FILENAME exmediaerror1.src
                            14425 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                            14426 ; 1285 |//$FILENAME exmediaerror2.src
                            14427 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                            14428 ; 1287 |//$FILENAME inmediaerror1.src
                            14429 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                            14430 ; 1289 |
                            14431 ; 1290 |//$FILENAME backlight_title.src
                            14432 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14433 ; 1292 |//$FILENAME backlight_state_on.src
                            14434 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                            14435 ; 1294 |//$FILENAME backlight_state_off.src
                            14436 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                            14437 ; 1296 |//$FILENAME backlightmenu.src
                            14438 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                            14439 ; 1298 |//$FILENAME string_backlight_menu.src
                            14440 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                            14441 ; 1300 |
                            14442 ; 1301 |//$FILENAME enc_mp3mod.src
                            14443 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                            14444 ; 1303 |//$FILENAME enc_mp3p.src
                            14445 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                            14446 ; 1305 |//$FILENAME enc_mp3x.src
                            14447 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                            14448 ; 1307 |//$FILENAME enc_mp3y.src
                            14449 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                            14450 ; 1309 |//$FILENAME mp3_implementation.src
                            14451 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                            14452 ; 1311 |//$FILENAME string_mp3.src
                            14453 ; 1312 |#define RSRC_STRING_MP3 513    
                            14454 ; 1313 |//$FILENAME string_all.src
                            14455 ; 1314 |#define RSRC_STRING_ALL 514    
                            14456 ; 1315 |
                            14457 ; 1316 |//$FILENAME mediastartup.src
                            14458 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                            14459 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                            14460 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                            14461 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
                            14462 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                            14463 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                            14464 ; 1323 |
                            14465 ; 1324 |//$FILENAME nanddatadriveinit.src
                            14466 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                            14467 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
                            14468 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                            14469 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                            14470 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                            14471 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                            14472 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                            14473 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                            14474 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
                            14475 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                            14476 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                            14477 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
                            14478 ; 1337 |
                            14479 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                            14480 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                            14481 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                            14482 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                            14483 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                            14484 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                            14485 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                            14486 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                            14487 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                            14488 ; 1347 |
                            14489 ; 1348 |//$FILENAME vbr_codebank.src
                            14490 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                            14491 ; 1350 |
                            14492 ; 1351 |//$FILENAME string_recordtest_menu.src
                            14493 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                            14494 ; 1353 |//$FILENAME string_recordtest_duration.src
                            14495 ; 1354 |#define RSRC_STRING_DURATION 520    
                            14496 ; 1355 |//$FILENAME string_recordtest_time5.src
                            14497 ; 1356 |#define RSRC_STRING_TIME5 521    
                            14498 ; 1357 |//$FILENAME string_recordtest_time10.src
                            14499 ; 1358 |#define RSRC_STRING_TIME10 522    
                            14500 ; 1359 |//$FILENAME string_recordtest_time30.src
                            14501 ; 1360 |#define RSRC_STRING_TIME30 523    
                            14502 ; 1361 |//$FILENAME string_recordtest_time60.src
                            14503 ; 1362 |#define RSRC_STRING_TIME60 524    
                            14504 ; 1363 |//$FILENAME string_recordtest_time300.src
                            14505 ; 1364 |#define RSRC_STRING_TIME300 525    
                            14506 ; 1365 |//$FILENAME string_recordtest_time600.src
                            14507 ; 1366 |#define RSRC_STRING_TIME600 526    
                            14508 ; 1367 |
                            14509 ; 1368 |//$FILENAME test_title.src
                            14510 ; 1369 |#define RSRC_TEST_TITLE 527    
                            14511 ; 1370 |//$FILENAME testmenu.src
                            14512 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                            14513 ; 1372 |
                            14514 ; 1373 |
                            14515 ; 1374 |//$FILENAME mmcmediastartup.src
                            14516 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                            14517 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                            14518 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                            14519 ; 1378 |//$FILENAME mmcinfo.src
                            14520 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                            14521 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                            14522 ; 1381 |//$FILENAME mmcerase.src
                            14523 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                            14524 ; 1383 |
                            14525 ; 1384 |
                            14526 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                            14527 ; 1386 |
                            14528 ; 1387 |//$FILENAME mmcenumerate.src
                            14529 ; 1388 |#define RSRC_MMCENUMERATE 532    
                            14530 ; 1389 |//$FILENAME mmcresetdevice.src
                            14531 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                            14532 ; 1391 |//$FILENAME mmcprocesscsd.src
                            14533 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                            14534 ; 1393 |//$FILENAME mmcprocesscid.src
                            14535 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                            14536 ; 1395 |//$FILENAME mmcprocesscid2.src
                            14537 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                            14538 ; 1397 |//$FILENAME mmcdetectpresence.src
                            14539 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
                            14540 ; 1399 |//$FILENAME mmcserialnumberinit.src
                            14541 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                            14542 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                            14543 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
                            14544 ; 1403 |
                            14545 ; 1404 |//$FILENAME mmcread.src
                            14546 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                            14547 ; 1406 |//$FILENAME mmcmediainit.src
                            14548 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                            14549 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                            14550 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                            14551 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                            14552 ; 1411 |//$FILENAME mmcdatadriveerase.src
                            14553 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                            14554 ; 1413 |
                            14555 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                            14556 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                            14557 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                            14558 ; 1417 |
                            14559 ; 1418 |
                            14560 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                            14561 ; 1420 |//  File system
                            14562 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                            14563 ; 1422 |//$FILENAME arrangefilename.src
                            14564 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                            14565 ; 1424 |//$FILENAME clearcluster.src
                            14566 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                            14567 ; 1426 |//$FILENAME createdirectory.src
                            14568 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                            14569 ; 1428 |//$FILENAME deletecontent.src
                            14570 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                            14571 ; 1430 |//$FILENAME deleterecord.src
                            14572 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                            14573 ; 1432 |//$FILENAME fastopen.src
                            14574 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                            14575 ; 1434 |//$FILENAME fcreate.src
                            14576 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
                            14577 ; 1436 |//$FILENAME filegetattrib.src
                            14578 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                            14579 ; 1438 |//$FILENAME filegetdate.src
                            14580 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                            14581 ; 1440 |//$FILENAME filesetattrib.src
                            14582 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                            14583 ; 1442 |//$FILENAME filesetdate.src
                            14584 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                            14585 ; 1444 |//$FILENAME fsinit.src
                            14586 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                            14587 ; 1446 |//$FILENAME fsshutdown.src
                            14588 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                            14589 ; 1448 |//$FILENAME readdevicerecord.src
                            14590 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                            14591 ; 1450 |//$FILENAME checkspaceinrootdir.src
                            14592 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                            14593 ; 1452 |//$FILENAME setcwdhandle.src
                            14594 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                            14595 ; 1454 |//$FILENAME fsdriveinit.src
                            14596 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                            14597 ; 1456 |//$FILENAME fsclearBuf.src
                            14598 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
                            14599 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                            14600 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.src
                            14601 ; 1460 |//$FILENAME fgetfasthandle.src
                            14602 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                            14603 ; 1462 |//$FILENAME ishandlewriteallocated.src
                            14604 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                            14605 ; 1464 |//$FILENAME isfileopen.src
                            14606 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                            14607 ; 1466 |//$FILENAME iscurrworkdir.src
                            14608 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                            14609 ; 1468 |//$FILENAME chdir.src
                            14610 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                            14611 ; 1470 |//$FILENAME chdirFromOffset.src
                            14612 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                            14613 ; 1472 |//$FILENAME deletetree.src
                            14614 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                            14615 ; 1474 |//$FILENAME deleteallrecords.src
                            14616 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                            14617 ; 1476 |//$FILENAME cleardata.src
                            14618 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                            14619 ; 1478 |//$FILENAME changetolowleveldir.src
                            14620 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                            14621 ; 1480 |//$FILENAME getrecordnumber.src
                            14622 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                            14623 ; 1482 |//$FILENAME fileremove.src
                            14624 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                            14625 ; 1484 |//$FILENAME charactersearch.src
                            14626 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                            14627 ; 1486 |//$FILENAME stringcompare.src
                            14628 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                            14629 ; 1488 |//$FILENAME fopenw.src
                            14630 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                            14631 ; 1490 |//$FILENAME fremove.src
                            14632 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                            14633 ; 1492 |//$FILENAME fremovew.src
                            14634 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                            14635 ; 1494 |//$FILENAME mkdir.src
                            14636 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                            14637 ; 1496 |//$FILENAME mkdirw.src
                            14638 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                            14639 ; 1498 |//$FILENAME rmdir.src
                            14640 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                            14641 ; 1500 |//$FILENAME rmdirw.src
                            14642 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                            14643 ; 1502 |//$FILENAME fgetc.src
                            14644 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                            14645 ; 1504 |//$FILENAME fgets.src
                            14646 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                            14647 ; 1506 |//$FILENAME fputc.src
                            14648 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                            14649 ; 1508 |//$FILENAME fputs.src
                            14650 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                            14651 ; 1510 |//$FILENAME arrangelongfilename.src
                            14652 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
                            14653 ; 1512 |//$FILENAME convert_itoa.src
                            14654 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                            14655 ; 1514 |//$FILENAME createdirrecord.src
                            14656 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                            14657 ; 1516 |//$FILENAME chksum.src
                            14658 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                            14659 ; 1518 |//$FILENAME createshortdirrecord.src
                            14660 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                            14661 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                            14662 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
                            14663 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                            14664 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                            14665 ; 1524 |//$FILENAME extractfilenamew.src
                            14666 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                            14667 ; 1526 |//$FILENAME extractpathw.src
                            14668 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                            14669 ; 1528 |//$FILENAME findfreerecord.src
                            14670 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                            14671 ; 1530 |//$FILENAME getnamew.src
                            14672 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                            14673 ; 1532 |//$FILENAME isdirectoryempty.src
                            14674 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                            14675 ; 1534 |//$FILENAME isshortnamevalid.src
                            14676 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                            14677 ; 1536 |//$FILENAME longdirmatch.src
                            14678 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                            14679 ; 1538 |//$FILENAME unicodetooem.src
                            14680 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                            14681 ; 1540 |//$FILENAME matchdirrecordw.src
                            14682 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                            14683 ; 1542 |//$FILENAME setcwd.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14684 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                            14685 ; 1544 |//$FILENAME setshortfilename.src
                            14686 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                            14687 ; 1546 |//$FILENAME generatefilenametail.src
                            14688 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                            14689 ; 1548 |//$FILENAME dbcstounicode.src
                            14690 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                            14691 ; 1550 |//$FILENAME strcpy.src
                            14692 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                            14693 ; 1552 |//$FILENAME strcpyw.src
                            14694 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                            14695 ; 1554 |//$FILENAME strlengthw.src
                            14696 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                            14697 ; 1556 |//$FILENAME filesystempresent.src
                            14698 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                            14699 ; 1558 |//$FILENAME DataDriveInit.src
                            14700 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                            14701 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                            14702 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                            14703 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                            14704 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                            14705 ; 1564 |//$FILENAME DataDriveGetSize.src
                            14706 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                            14707 ; 1566 |//$FILENAME ConstructLongFileName.src
                            14708 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                            14709 ; 1568 |//$FILENAME strcpyucs3_2.src
                            14710 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                            14711 ; 1570 |//$FILENAME getvolumelabel.src
                            14712 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
                            14713 ; 1572 |//$FILENAME setvolumelabel.src
                            14714 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
                            14715 ; 1574 |//$FILENAME disk_full.src
                            14716 ; 1575 |#define RSRC_DISK_FULL 619    
                            14717 ; 1576 |//$FILENAME chkdskstartup.src
                            14718 ; 1577 |#define RSRC_CHECKDISK 620    
                            14719 ; 1578 |//$FILENAME chkdskstartupy.src
                            14720 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                            14721 ; 1580 |//$FILENAME low_level_pwr_line1.src
                            14722 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                            14723 ; 1582 |//$FILENAME low_level_pwr_line2.src
                            14724 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
                            14725 ; 1584 |//$FILENAME string_bit_rate.src
                            14726 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                            14727 ; 1586 |//$FILENAME string_96000hz.src
                            14728 ; 1587 |#define RSRC_STRING_96KBPS 625    
                            14729 ; 1588 |//$FILENAME string_112000hz.src
                            14730 ; 1589 |#define RSRC_STRING_112KBPS 626    
                            14731 ; 1590 |//$FILENAME string_128000hz.src
                            14732 ; 1591 |#define RSRC_STRING_128KBPS 627    
                            14733 ; 1592 |//$FILENAME string_160000hz.src
                            14734 ; 1593 |#define RSRC_STRING_160KBPS 628    
                            14735 ; 1594 |//$FILENAME string_192000hz.src
                            14736 ; 1595 |#define RSRC_STRING_192KBPS 629    
                            14737 ; 1596 |//$FILENAME string_224000hz.src
                            14738 ; 1597 |#define RSRC_STRING_224KBPS 630    
                            14739 ; 1598 |//$FILENAME string_256000hz.src
                            14740 ; 1599 |#define RSRC_STRING_256KBPS 631    
                            14741 ; 1600 |//$FILENAME string_320000hz.src
                            14742 ; 1601 |#define RSRC_STRING_320KBPS 632    
                            14743 ; 1602 |//$FILENAME string_hz.src
                            14744 ; 1603 |#define RSRC_STRING_HZ 633    
                            14745 ; 1604 |//$FILENAME EncCommonp.src
                            14746 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                            14747 ; 1606 |//$FILENAME adc_adcx.src
                            14748 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                            14749 ; 1608 |//$FILENAME adc_adcy.src
                            14750 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                            14751 ; 1610 |//$FILENAME Funclet_encodercommon.src
                            14752 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                            14753 ; 1612 |//$FILENAME string_album.src
                            14754 ; 1613 |#define RSRC_STRING_ALBUM 638    
                            14755 ; 1614 |//$FILENAME string_encoder_song.src
                            14756 ; 1615 |#define RSRC_STRING_SONG 639    
                            14757 ; 1616 |//$FILENAME string_mode.src
                            14758 ; 1617 |#define RSRC_STRING_MODE 640    
                            14759 ; 1618 |
                            14760 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                            14761 ; 1620 |// display related
                            14762 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                            14763 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                            14764 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                            14765 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                            14766 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                            14767 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                            14768 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                            14769 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                            14770 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                            14771 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                            14772 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                            14773 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                            14774 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                            14775 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                            14776 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
                            14777 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                            14778 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                            14779 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                            14780 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                            14781 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                            14782 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                            14783 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
                            14784 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                            14785 ; 1644 |
                            14786 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
                            14787 ; 1646 |//WMDRM Related
                            14788 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                            14789 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                            14790 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                            14791 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                            14792 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                            14793 ; 1652 |//$FILENAME drm_bbx_initialize.src
                            14794 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
                            14795 ; 1654 |//$FILENAME drm_bbx_canbind.src
                            14796 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
                            14797 ; 1656 |//$FILENAME verifychecksum.src
                            14798 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                            14799 ; 1658 |//$FILENAME drm_b64_encodew.src
                            14800 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                            14801 ; 1660 |//$FILENAME _performactions.src
                            14802 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                            14803 ; 1662 |//$FILENAME _processendofchain.src
                            14804 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                            14805 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                            14806 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                            14807 ; 1666 |//$FILENAME drmcrt_towlower.src
                            14808 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                            14809 ; 1668 |//$FILENAME drmcrt_wcslen.src
                            14810 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                            14811 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                            14812 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                            14813 ; 1672 |//$FILENAME drmcrt_memmove.src
                            14814 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                            14815 ; 1674 |//$FILENAME performoperation_part1.src
                            14816 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                            14817 ; 1676 |//$FILENAME performoperation_part2.src
                            14818 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                            14819 ; 1678 |//$FILENAME performoperation_part3.src
                            14820 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                            14821 ; 1680 |//$FILENAME performoperation_part4.src
                            14822 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                            14823 ; 1682 |//$FILENAME performoperation_part5.src
                            14824 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                            14825 ; 1684 |//$FILENAME performoperation_part6.src
                            14826 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                            14827 ; 1686 |//$FILENAME isvalidfunction.src
                            14828 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                            14829 ; 1688 |//$FILENAME functiongetvalue.src
                            14830 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                            14831 ; 1690 |//$FILENAME globalsetvariable.src
                            14832 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                            14833 ; 1692 |//$FILENAME variabledrmkgetorset.src
                            14834 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                            14835 ; 1694 |//$FILENAME variabledrmgetorset.src
                            14836 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                            14837 ; 1696 |//$FILENAME variableappgetorset.src
                            14838 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
                            14839 ; 1698 |//$FILENAME variablelicensegetorset.src
                            14840 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                            14841 ; 1700 |//$FILENAME variablecontentgetorset.src
                            14842 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                            14843 ; 1702 |//$FILENAME variabledevicegetorset.src
                            14844 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                            14845 ; 1704 |//$FILENAME variablepmlicensegetorset.src
                            14846 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                            14847 ; 1706 |//$FILENAME drm_hds_createstore.src
                            14848 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
                            14849 ; 1708 |//$FILENAME drm_hds_init.src
                            14850 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                            14851 ; 1710 |//$FILENAME drm_hds_uninit.src
                            14852 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                            14853 ; 1712 |//$FILENAME drm_hds_openstore.src
                            14854 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                            14855 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                            14856 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                            14857 ; 1716 |//$FILENAME drm_hds_slotresize.src
                            14858 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                            14859 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                            14860 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                            14861 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                            14862 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                            14863 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                            14864 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                            14865 ; 1724 |//$FILENAME _hdscopychildpayload.src
                            14866 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                            14867 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                            14868 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                            14869 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                            14870 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                            14871 ; 1730 |//$FILENAME _hdscleanupstore.src
                            14872 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                            14873 ; 1732 |//$FILENAME drm_lst_clean.src
                            14874 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                            14875 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                            14876 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                            14877 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                            14878 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                            14879 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                            14880 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                            14881 ; 1740 |//$FILENAME _hdscreatenamespace.src
                            14882 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                            14883 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                            14884 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                            14885 ; 1744 |//$FILENAME _writesrn.src
                            14886 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                            14887 ; 1746 |//$FILENAME _writecommonblockheader.src
                            14888 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                            14889 ; 1748 |//$FILENAME _writechildblockheader.src
                            14890 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                            14891 ; 1750 |//$FILENAME _readdatablockheader.src
                            14892 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                            14893 ; 1752 |//$FILENAME _writedatablockheader.src
                            14894 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                            14895 ; 1754 |//$FILENAME _hdsexpandstore.src
                            14896 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                            14897 ; 1756 |//$FILENAME _hdsallocblock.src
                            14898 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                            14899 ; 1758 |//$FILENAME _hdsfreeblock.src
                            14900 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
                            14901 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                            14902 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                            14903 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                            14904 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                            14905 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                            14906 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                            14907 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
                            14908 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                            14909 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                            14910 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
                            14911 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                            14912 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                            14913 ; 1772 |//$FILENAME _hdsremoveslot.src
                            14914 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                            14915 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                            14916 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                            14917 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                            14918 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                            14919 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                            14920 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                            14921 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                            14922 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                            14923 ; 1782 |//$FILENAME _hdsslotresize.src
                            14924 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                            14925 ; 1784 |//$FILENAME _isnull.src
                            14926 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                            14927 ; 1786 |//$FILENAME _hdsgensrnhash.src
                            14928 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                            14929 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                            14930 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                            14931 ; 1790 |//$FILENAME _readsrn.src
                            14932 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                            14933 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                            14934 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14935 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                            14936 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                            14937 ; 1796 |//$FILENAME _hdsslotwrite.src
                            14938 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                            14939 ; 1798 |//$FILENAME _hdsinitslotenum.src
                            14940 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                            14941 ; 1800 |//$FILENAME drm_lst_close.src
                            14942 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                            14943 ; 1802 |//$FILENAME drm_lst_enumnext.src
                            14944 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                            14945 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                            14946 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                            14947 ; 1806 |//$FILENAME _processextensions.src
                            14948 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                            14949 ; 1808 |//$FILENAME _processidlist.src
                            14950 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                            14951 ; 1810 |//$FILENAME _processexclusions.src
                            14952 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                            14953 ; 1812 |//$FILENAME _processinclusions.src
                            14954 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                            14955 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                            14956 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                            14957 ; 1816 |//$FILENAME _getopllevel.src
                            14958 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                            14959 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                            14960 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                            14961 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                            14962 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
                            14963 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
                            14964 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                            14965 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                            14966 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                            14967 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                            14968 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                            14969 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
                            14970 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                            14971 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                            14972 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
                            14973 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                            14974 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                            14975 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                            14976 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                            14977 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                            14978 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                            14979 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                            14980 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                            14981 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                            14982 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                            14983 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                            14984 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                            14985 ; 1844 |//$FILENAME overlappingdates.src
                            14986 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                            14987 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                            14988 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                            14989 ; 1848 |//$FILENAME neginfdate.src
                            14990 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                            14991 ; 1850 |//$FILENAME infdate.src
                            14992 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                            14993 ; 1852 |//$FILENAME isexpired.src
                            14994 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                            14995 ; 1854 |//$FILENAME getsecstateattr.src
                            14996 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                            14997 ; 1856 |//$FILENAME setexpirycategory.src
                            14998 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                            14999 ; 1858 |//$FILENAME getv2licenseinfo.src
                            15000 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                            15001 ; 1860 |//$FILENAME getnextlicense.src
                            15002 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                            15003 ; 1862 |//$FILENAME aggregate.src
                            15004 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                            15005 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                            15006 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                            15007 ; 1866 |//$FILENAME _scannodeforattributew.src
                            15008 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                            15009 ; 1868 |//$FILENAME _getxmlnodecdataw.src
                            15010 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                            15011 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                            15012 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                            15013 ; 1872 |//$FILENAME _createdevicestore.src
                            15014 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                            15015 ; 1874 |//$FILENAME _mapdrmerror.src
                            15016 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                            15017 ; 1876 |//$FILENAME _comparemachineid.src
                            15018 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                            15019 ; 1878 |//$FILENAME initmgrcontext.src
                            15020 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                            15021 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                            15022 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                            15023 ; 1882 |//$FILENAME drm_mgr_commit.src
                            15024 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
                            15025 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                            15026 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                            15027 ; 1886 |//$FILENAME januscleandatastore.src
                            15028 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                            15029 ; 1888 |//$FILENAME drm_mtr_openid.src
                            15030 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                            15031 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
                            15032 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                            15033 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                            15034 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
                            15035 ; 1894 |//$FILENAME oem_setendoffile.src
                            15036 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                            15037 ; 1896 |//$FILENAME oem_genrandombytes.src
                            15038 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                            15039 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                            15040 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                            15041 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                            15042 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                            15043 ; 1902 |//$FILENAME oem_setdevicecert.src
                            15044 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                            15045 ; 1904 |//$FILENAME oem_getclockresetstate.src
                            15046 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                            15047 ; 1906 |//$FILENAME oem_setclockresetstate.src
                            15048 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                            15049 ; 1908 |//$FILENAME oem_getuniqueid.src
                            15050 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                            15051 ; 1910 |//$FILENAME oem_getdevicecert.src
                            15052 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                            15053 ; 1912 |//$FILENAME drm_snc_openstore.src
                            15054 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                            15055 ; 1914 |//$FILENAME drm_snc_closestore.src
                            15056 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                            15057 ; 1916 |//$FILENAME _setkidstoredata.src
                            15058 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                            15059 ; 1918 |//$FILENAME drm_snc_deletekid.src
                            15060 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                            15061 ; 1920 |//$FILENAME drm_snc_updatekid.src
                            15062 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                            15063 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                            15064 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                            15065 ; 1924 |//$FILENAME functiongetvalue_part1.src
                            15066 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                            15067 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                            15068 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                            15069 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                            15070 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                            15071 ; 1930 |//$FILENAME drm_hds_createstore2.src
                            15072 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                            15073 ; 1932 |//$FILENAME drm_hds_openstore2.src
                            15074 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                            15075 ; 1934 |//$FILENAME _hdsprealloc.src
                            15076 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                            15077 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                            15078 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                            15079 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                            15080 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                            15081 ; 1940 |//$FILENAME gendevicecertificate.src
                            15082 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                            15083 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                            15084 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                            15085 ; 1944 |//$FILENAME copyhdsdtore.src
                            15086 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
                            15087 ; 1946 |//$FILENAME generatedevicecert.src
                            15088 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                            15089 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                            15090 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                            15091 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                            15092 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                            15093 ; 1952 |//$FILENAME _hdsupdatesrn.src
                            15094 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                            15095 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                            15096 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
                            15097 ; 1956 |//$FILENAME _checksecureclock.src
                            15098 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                            15099 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                            15100 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                            15101 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                            15102 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                            15103 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                            15104 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                            15105 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                            15106 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                            15107 ; 1966 |//$FILENAME strtol.src
                            15108 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                            15109 ; 1968 |//$FILENAME mktime.src
                            15110 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                            15111 ; 1970 |//$FILENAME gmtime.src
                            15112 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                            15113 ; 1972 |//$FILENAME localtime.src
                            15114 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                            15115 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                            15116 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                            15117 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                            15118 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                            15119 ; 1978 |//$FILENAME _systemtimetotime_t.src
                            15120 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                            15121 ; 1980 |//$FILENAME oem_setsystemtime.src
                            15122 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                            15123 ; 1982 |//$FILENAME const_pkcrypto.src
                            15124 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                            15125 ; 1984 |//$FILENAME const_y.src
                            15126 ; 1985 |#define RSRC_CONST_Y 820    
                            15127 ; 1986 |//$FILENAME aes_dec_table.src
                            15128 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                            15129 ; 1988 |//$FILENAME aes_key_table.src
                            15130 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                            15131 ; 1990 |//$FILENAME aes_enc_table.src
                            15132 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                            15133 ; 1992 |//$FILENAME device_cert.src
                            15134 ; 1993 |#define RSRC_DEVCERT 824    
                            15135 ; 1994 |//$FILENAME devcert_template.src
                            15136 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                            15137 ; 1996 |//$FILENAME getbase64decodedkey.src
                            15138 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                            15139 ; 1998 |//$FILENAME _initslot.src
                            15140 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                            15141 ; 2000 |//$FILENAME hdsimplcommon.src
                            15142 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                            15143 ; 2002 |//$FILENAME hdsimpl_p.src
                            15144 ; 2003 |#define RSRC_HDSIMPL_P 829    
                            15145 ; 2004 |
                            15146 ; 2005 |
                            15147 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                            15148 ; 2007 |//pkcrypto Related
                            15149 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                            15150 ; 2009 |//$FILENAME two_adic_inverse.src
                            15151 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                            15152 ; 2011 |//$FILENAME mp_shift.src
                            15153 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                            15154 ; 2013 |//$FILENAME mp_significant_bit_count.src
                            15155 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
                            15156 ; 2015 |//$FILENAME set_immediate.src
                            15157 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                            15158 ; 2017 |//$FILENAME multiply_immediate.src
                            15159 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                            15160 ; 2019 |//$FILENAME multiply.src
                            15161 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                            15162 ; 2021 |//$FILENAME divide_precondition_1.src
                            15163 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                            15164 ; 2023 |//$FILENAME divide_immediate.src
                            15165 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                            15166 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                            15167 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                            15168 ; 2027 |//$FILENAME ecaffine_table_construction.src
                            15169 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                            15170 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                            15171 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                            15172 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                            15173 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                            15174 ; 2033 |//$FILENAME ecaffine_on_curve.src
                            15175 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                            15176 ; 2035 |//$FILENAME ecaffine_addition.src
                            15177 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                            15178 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                            15179 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                            15180 ; 2039 |//$FILENAME ecaffine_attributes2.src
                            15181 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                            15182 ; 2041 |//$FILENAME kfdesc_initialize.src
                            15183 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                            15184 ; 2043 |//$FILENAME kimmediate.src
                            15185 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15186 ; 2045 |//$FILENAME kprime_immediater.src
                            15187 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                            15188 ; 2047 |//$FILENAME kprime_sqrter.src
                            15189 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                            15190 ; 2049 |//$FILENAME kinitialize_prime.src
                            15191 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                            15192 ; 2051 |//$FILENAME mod_lucasuv.src
                            15193 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                            15194 ; 2053 |//$FILENAME mod_lucas.src
                            15195 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
                            15196 ; 2055 |//$FILENAME bucket_multiply.src
                            15197 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                            15198 ; 2057 |//$FILENAME mod_exp2000.src
                            15199 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                            15200 ; 2059 |//$FILENAME mod_exp.src
                            15201 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                            15202 ; 2061 |//$FILENAME modmul_choices1.src
                            15203 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                            15204 ; 2063 |//$FILENAME mod_sqrt.src
                            15205 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                            15206 ; 2065 |//$FILENAME create_modulus.src
                            15207 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                            15208 ; 2067 |//$FILENAME from_modular.src
                            15209 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                            15210 ; 2069 |//$FILENAME add_immediate.src
                            15211 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                            15212 ; 2071 |//$FILENAME add_diff.src
                            15213 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
                            15214 ; 2073 |//$FILENAME add_full.src
                            15215 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                            15216 ; 2075 |//$FILENAME compare_sum_same.src
                            15217 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
                            15218 ; 2077 |//$FILENAME sub_immediate.src
                            15219 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                            15220 ; 2079 |//$FILENAME mp_initialization.src
                            15221 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                            15222 ; 2081 |//$FILENAME new_random_bytes.src
                            15223 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                            15224 ; 2083 |//$FILENAME new_random_dword_interval.src
                            15225 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                            15226 ; 2085 |//$FILENAME new_random_digit_interval.src
                            15227 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                            15228 ; 2087 |//$FILENAME new_random_mod.src
                            15229 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                            15230 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                            15231 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                            15232 ; 2091 |//$FILENAME new_random_digits.src
                            15233 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                            15234 ; 2093 |//$FILENAME words_to_ecaffine.src
                            15235 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                            15236 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                            15237 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                            15238 ; 2097 |//$FILENAME _threadunsafepkinit.src
                            15239 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                            15240 ; 2099 |//$FILENAME pkinit.src
                            15241 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                            15242 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                            15243 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                            15244 ; 2103 |//$FILENAME drm_pk_encrypt.src
                            15245 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                            15246 ; 2105 |//$FILENAME drm_pk_decrypt.src
                            15247 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                            15248 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                            15249 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                            15250 ; 2109 |//$FILENAME fe2ipmod.src
                            15251 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                            15252 ; 2111 |//$FILENAME drm_pk_sign.src
                            15253 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                            15254 ; 2113 |//$FILENAME drm_pk_verify.src
                            15255 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                            15256 ; 2115 |//$FILENAME random_bytes.src
                            15257 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
                            15258 ; 2117 |//$FILENAME mp_gcdex.src
                            15259 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                            15260 ; 2119 |//$FILENAME mp_gcdex_split1.src
                            15261 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                            15262 ; 2121 |//$FILENAME pkcrypto_p.src
                            15263 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                            15264 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                            15265 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                            15266 ; 2125 |//$FILENAME del_all_warning_line2.src
                            15267 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                            15268 ; 2127 |//$FILENAME del_all_file_star.src
                            15269 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                            15270 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                            15271 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                            15272 ; 2131 |//$FILENAME Funclet_Init5VSense.src
                            15273 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                            15274 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                            15275 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                            15276 ; 2135 |//$FILENAME Funclet_changeplayset.src
                            15277 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                            15278 ; 2137 |
                            15279 ; 2138 |//$FILENAME Funclet_mmctesterase.src
                            15280 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                            15281 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                            15282 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
                            15283 ; 2142 |
                            15284 ; 2143 |
                            15285 ; 2144 |// Added to allow rechargeable battery configurations to build
                            15286 ; 2145 |//$FILENAME battery_charging.src
                            15287 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                            15288 ; 2147 |//$FILENAME batterychargecodebank.src
                            15289 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                            15290 ; 2149 |//$FILENAME updatevolume.src
                            15291 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                            15292 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                            15293 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                            15294 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                            15295 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                            15296 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
                            15297 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                            15298 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
                            15299 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                            15300 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                            15301 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                            15302 ; 2161 |//$FILENAME _iscachedevent.src
                            15303 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                            15304 ; 2163 |//$FILENAME setcountedexpirycategory.src
                            15305 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                            15306 ; 2165 |//$FILENAME oem_data.src
                            15307 ; 2166 |#define RSRC_OEM_DATA 906    
                            15308 ; 2167 |//$FILENAME gpk_p.src
                            15309 ; 2168 |#define RSRC_GPK_P 907    
                            15310 ; 2169 |//$FILENAME key_data.src
                            15311 ; 2170 |#define RSRC_KEY_DATA 908    
                            15312 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                            15313 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                            15314 ; 2173 |//$FILENAME string_working.src
                            15315 ; 2174 |#define RSRC_STRING_WORKING 910    
                            15316 ; 2175 |//$FILENAME Funclet_loadusertime.src
                            15317 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                            15318 ; 2177 |//$FILENAME Funclet_saveusertime.src
                            15319 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
                            15320 ; 2179 |
                            15321 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                            15322 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                            15323 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                            15324 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                            15325 ; 2184 |
                            15326 ; 2185 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15327 ; 2186 |// Audible ACELP Resources
                            15328 ; 2187 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15329 ; 2188 |//$FILENAME AudibleAcelpDec.src
                            15330 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                            15331 ; 2190 |//$FILENAME AudibleAcelpP.src
                            15332 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
                            15333 ; 2192 |//$FILENAME AudibleAcelpX.src
                            15334 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                            15335 ; 2194 |//$FILENAME AudibleAcelpY.src
                            15336 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                            15337 ; 2196 |
                            15338 ; 2197 |//$FILENAME AudibleDecMod.src
                            15339 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
                            15340 ; 2199 |//$FILENAME audiblemp3p.src
                            15341 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                            15342 ; 2201 |//$FILENAME audiblemp3x.src
                            15343 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                            15344 ; 2203 |//$FILENAME audiblemp3y.src
                            15345 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                            15346 ; 2205 |
                            15347 ; 2206 |//$FILENAME audiblemetadata_p.src
                            15348 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                            15349 ; 2208 |//$FILENAME audiblemetadata_y.src
                            15350 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                            15351 ; 2210 |//$FILENAME audiblesongposition_p.src
                            15352 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                            15353 ; 2212 |//$FILENAME audibletargetcheck_p.src
                            15354 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                            15355 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                            15356 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                            15357 ; 2216 |//$FILENAME audibledsa_p.src
                            15358 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                            15359 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                            15360 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                            15361 ; 2220 |//$FILENAME audiblemetastrings_p.src
                            15362 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                            15363 ; 2222 |//$FILENAME aaactivationrecords_p.src
                            15364 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                            15365 ; 2224 |
                            15366 ; 2225 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15367 ; 2226 |// Effects and SRS Resources
                            15368 ; 2227 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15369 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                            15370 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                            15371 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                            15372 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                            15373 ; 2232 |//$FILENAME wowctrl.src
                            15374 ; 2233 |#define RSRC_WOW_CTRL 934    
                            15375 ; 2234 |
                            15376 ; 2235 |//$FILENAME wowmenu.src
                            15377 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
                            15378 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                            15379 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                            15380 ; 2239 |//$FILENAME string_wow_menu.src
                            15381 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                            15382 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                            15383 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                            15384 ; 2243 |//$FILENAME string_wowvolume_menu.src
                            15385 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                            15386 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                            15387 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                            15388 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                            15389 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                            15390 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                            15391 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                            15392 ; 2251 |//$FILENAME wow_icon.src
                            15393 ; 2252 |#define RSRC_WOW_ICON 943    
                            15394 ; 2253 |
                            15395 ; 2254 |//$FILENAME wow16k.src
                            15396 ; 2255 |#define RSRC_WOW16K 944    
                            15397 ; 2256 |//$FILENAME wow32k.src
                            15398 ; 2257 |#define RSRC_WOW32K 945    
                            15399 ; 2258 |//$FILENAME wow8k.src
                            15400 ; 2259 |#define RSRC_WOW8K 946    
                            15401 ; 2260 |//$FILENAME wow11k.src
                            15402 ; 2261 |#define RSRC_WOW11K 947    
                            15403 ; 2262 |//$FILENAME wow22k.src
                            15404 ; 2263 |#define RSRC_WOW22K 948    
                            15405 ; 2264 |//$FILENAME wow24k.src
                            15406 ; 2265 |#define RSRC_WOW24K 949    
                            15407 ; 2266 |//$FILENAME wow44k.src
                            15408 ; 2267 |#define RSRC_WOW44K 950    
                            15409 ; 2268 |//$FILENAME wow48k.src
                            15410 ; 2269 |#define RSRC_WOW48K 951    
                            15411 ; 2270 |
                            15412 ; 2271 |//$FILENAME wow16k_Y.src
                            15413 ; 2272 |#define RSRC_WOW16K_Y 952    
                            15414 ; 2273 |//$FILENAME wow32k_Y.src
                            15415 ; 2274 |#define RSRC_WOW32K_Y 953    
                            15416 ; 2275 |//$FILENAME wow8k_Y.src
                            15417 ; 2276 |#define RSRC_WOW8K_Y 954    
                            15418 ; 2277 |//$FILENAME wow11k_Y.src
                            15419 ; 2278 |#define RSRC_WOW11K_Y 955    
                            15420 ; 2279 |//$FILENAME wow22k_Y.src
                            15421 ; 2280 |#define RSRC_WOW22K_Y 956    
                            15422 ; 2281 |//$FILENAME wow24k_Y.src
                            15423 ; 2282 |#define RSRC_WOW24K_Y 957    
                            15424 ; 2283 |//$FILENAME wow44k_Y.src
                            15425 ; 2284 |#define RSRC_WOW44K_Y 958    
                            15426 ; 2285 |//$FILENAME wow48k_Y.src
                            15427 ; 2286 |#define RSRC_WOW48K_Y 959    
                            15428 ; 2287 |
                            15429 ; 2288 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            15430 ; 2289 |// Audible Section Navigation
                            15431 ; 2290 |/////////////////////////////////////////////////////////////////////////////////////////////////////
                            15432 ; 2291 |//$FILENAME audible_secnav.src
                            15433 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                            15434 ; 2293 |
                            15435 ; 2294 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15436 ; 2295 |// PLAYLIST3 and Music Library
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15437 ; 2296 |////////////////////////////////////////////////////////////////////////////////////////////////////
                            15438 ; 2297 |
                            15439 ; 2298 |//$FILENAME build_ml.src
                            15440 ; 2299 |#define RSRC_BUILD_ML 961    
                            15441 ; 2300 |//$FILENAME build_ml_warning.src
                            15442 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                            15443 ; 2302 |//$FILENAME build_ml_warning2.src
                            15444 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                            15445 ; 2304 |//$FILENAME build_flash1.src
                            15446 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                            15447 ; 2306 |//$FILENAME build_flash2.src
                            15448 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                            15449 ; 2308 |//$FILENAME build_flash3.src
                            15450 ; 2309 |#define RSRC_BUILD_FLASH3 966    
                            15451 ; 2310 |//$FILENAME build_sd1.src
                            15452 ; 2311 |#define RSRC_BUILD_SD1 967    
                            15453 ; 2312 |//$FILENAME build_sd2.src
                            15454 ; 2313 |#define RSRC_BUILD_SD2 968    
                            15455 ; 2314 |//$FILENAME build_sd3.src
                            15456 ; 2315 |#define RSRC_BUILD_SD3 969    
                            15457 ; 2316 |//$FILENAME build_newmusic.src
                            15458 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                            15459 ; 2318 |//$FILENAME sdmd.src
                            15460 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
                            15461 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                            15462 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                            15463 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                            15464 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
                            15465 ; 2324 |//$FILENAME MusicLibBuildModule.src
                            15466 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                            15467 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                            15468 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                            15469 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                            15470 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                            15471 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                            15472 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                            15473 ; 2332 |//$FILENAME MusicLibPlayModule.src
                            15474 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                            15475 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                            15476 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                            15477 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                            15478 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                            15479 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                            15480 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                            15481 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                            15482 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                            15483 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                            15484 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                            15485 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                            15486 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                            15487 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                            15488 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                            15489 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                            15490 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                            15491 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                            15492 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                            15493 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                            15494 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                            15495 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                            15496 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                            15497 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
                            15498 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                            15499 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                            15500 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                            15501 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                            15502 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                            15503 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                            15504 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                            15505 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                            15506 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                            15507 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                            15508 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                            15509 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                            15510 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                            15511 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                            15512 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
                            15513 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                            15514 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                            15515 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                            15516 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                            15517 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                            15518 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                            15519 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
                            15520 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                            15521 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                            15522 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
                            15523 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                            15524 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                            15525 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                            15526 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                            15527 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                            15528 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                            15529 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                            15530 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                            15531 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                            15532 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                            15533 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                            15534 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                            15535 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                            15536 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                            15537 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                            15538 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                            15539 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                            15540 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                            15541 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                            15542 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                            15543 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                            15544 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                            15545 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                            15546 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                            15547 ; 2406 |//$FILENAME MusicLibMergeFunction.src
                            15548 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                            15549 ; 2408 |//$FILENAME MusicLibMergeModule.src
                            15550 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                            15551 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                            15552 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                            15553 ; 2412 |//$FILENAME playmusicmenu.src
                            15554 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                            15555 ; 2414 |//$FILENAME browsemenu.src
                            15556 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                            15557 ; 2416 |//$FILENAME browsemenu_extra.src
                            15558 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                            15559 ; 2418 |//$FILENAME string_play_all.src
                            15560 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                            15561 ; 2420 |//$FILENAME string_play.src
                            15562 ; 2421 |#define RSRC_STRING_PLAY 1022    
                            15563 ; 2422 |//$FILENAME string_unknown_year.src
                            15564 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                            15565 ; 2424 |//$FILENAME string_year_width.src
                            15566 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                            15567 ; 2426 |//$FILENAME string_artist.src
                            15568 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                            15569 ; 2428 |//$FILENAME string_songs.src
                            15570 ; 2429 |#define RSRC_STRING_SONGS 1026    
                            15571 ; 2430 |//$FILENAME string_on_the_fly.src
                            15572 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                            15573 ; 2432 |//$FILENAME string_new_music.src
                            15574 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
                            15575 ; 2434 |//$FILENAME string_genre.src
                            15576 ; 2435 |#define RSRC_STRING_GENRE 1029    
                            15577 ; 2436 |//$FILENAME string_year.src
                            15578 ; 2437 |#define RSRC_STRING_YEAR 1030    
                            15579 ; 2438 |//$FILENAME string_playlist.src
                            15580 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                            15581 ; 2440 |//$FILENAME string_fm_rec.src
                            15582 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                            15583 ; 2442 |//$FILENAME string_linein_rec.src
                            15584 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
                            15585 ; 2444 |//$FILENAME string_play_music.src
                            15586 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                            15587 ; 2446 |//$FILENAME highlight_back.src
                            15588 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                            15589 ; 2448 |//$FILENAME newmusicmenu.src
                            15590 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                            15591 ; 2450 |//$FILENAME string_1_day.src
                            15592 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                            15593 ; 2452 |//$FILENAME string_1_week.src
                            15594 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                            15595 ; 2454 |//$FILENAME string_1_month.src
                            15596 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                            15597 ; 2456 |//$FILENAME on_the_fly_full.src
                            15598 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                            15599 ; 2458 |//$FILENAME on_the_fly_free1.src
                            15600 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                            15601 ; 2460 |//$FILENAME on_the_fly_free2.src
                            15602 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                            15603 ; 2462 |//$FILENAME on_the_fly_delete1.src
                            15604 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                            15605 ; 2464 |//$FILENAME on_the_fly_delete2.src
                            15606 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                            15607 ; 2466 |//$FILENAME empty_favourite.src
                            15608 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                            15609 ; 2468 |//$FILENAME sd_remove.src
                            15610 ; 2469 |#define RSRC_SD_REMOVE 1046    
                            15611 ; 2470 |//$FILENAME sd_insert.src
                            15612 ; 2471 |#define RSRC_SD_INSERT 1047    
                            15613 ; 2472 |//$FILENAME check_disk_1.src
                            15614 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                            15615 ; 2474 |//$FILENAME check_disk_2.src
                            15616 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                            15617 ; 2476 |//$FILENAME check_disk_3.src
                            15618 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                            15619 ; 2478 |//$FILENAME flash_error.src
                            15620 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                            15621 ; 2480 |
                            15622 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15623 ; 2482 |// STFM1000 Tuner funclet
                            15624 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15625 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                            15626 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                            15627 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                            15628 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                            15629 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                            15630 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                            15631 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                            15632 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                            15633 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                            15634 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                            15635 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                            15636 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
                            15637 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                            15638 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                            15639 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                            15640 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                            15641 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                            15642 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                            15643 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
                            15644 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                            15645 ; 2504 |//$FILENAME decstfmmod.src
                            15646 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
                            15647 ; 2506 |//$FILENAME dec_stfmp.src
                            15648 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                            15649 ; 2508 |//$FILENAME dec_stfmx.src
                            15650 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                            15651 ; 2510 |//$FILENAME dec_stfmy.src
                            15652 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                            15653 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                            15654 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                            15655 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                            15656 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                            15657 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                            15658 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                            15659 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                            15660 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                            15661 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                            15662 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                            15663 ; 2522 |//$FILENAME Funclet_I2CReset.src
                            15664 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                            15665 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                            15666 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                            15667 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                            15668 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                            15669 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                            15670 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                            15671 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                            15672 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                            15673 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                            15674 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                            15675 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                            15676 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                            15677 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaBias.src
                            15678 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookForPilot.src
                            15679 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                            15680 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                            15681 ; 2540 |// for RestoreDriveFromBackup
                            15682 ; 2541 |//$FILENAME restoresysdrive.src
                            15683 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                            15684 ; 2543 |
                            15685 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15686 ; 2545 |// Playlist5 sources
                            15687 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15688 ; 2547 |//$FILENAME playlist5_browsemenu.src
                            15689 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                            15690 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                            15691 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                            15692 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                            15693 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                            15694 ; 2553 |//$FILENAME playlist5_playback_module.src
                            15695 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                            15696 ; 2555 |//$FILENAME playlist5_browse_module.src
                            15697 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                            15698 ; 2557 |
                            15699 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                            15700 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                            15701 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                            15702 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                            15703 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
                            15704 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                            15705 ; 2564 |
                            15706 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15707 ; 2566 |// DanhNguyen added bitmaps
                            15708 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15709 ; 2568 |//$FILENAME icon_folder.src
                            15710 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                            15711 ; 2570 |//$FILENAME icon_song.src
                            15712 ; 2571 |#define RSRC_ICON_SONG 1089    
                            15713 ; 2572 |
                            15714 ; 2573 |//$FILENAME menu_music.src
                            15715 ; 2574 |#define RSRC_MENU_MUSIC 1090    
                            15716 ; 2575 |//$FILENAME vie_menu_music.src
                            15717 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                            15718 ; 2577 |
                            15719 ; 2578 |//$FILENAME menu_voice.src
                            15720 ; 2579 |#define RSRC_MENU_VOICE 1092    
                            15721 ; 2580 |//$FILENAME vie_menu_voice.src
                            15722 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                            15723 ; 2582 |
                            15724 ; 2583 |//$FILENAME menu_fmtuner.src
                            15725 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                            15726 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                            15727 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                            15728 ; 2587 |
                            15729 ; 2588 |//$FILENAME menu_record.src
                            15730 ; 2589 |#define RSRC_MENU_RECORD 1096    
                            15731 ; 2590 |//$FILENAME vie_menu_record.src
                            15732 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                            15733 ; 2592 |
                            15734 ; 2593 |//$FILENAME menu_settings.src
                            15735 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                            15736 ; 2595 |//$FILENAME vie_menu_settings.src
                            15737 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                            15738 ; 2597 |
                            15739 ; 2598 |//$FILENAME menu_shutdown.src
                            15740 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                            15741 ; 2600 |//$FILENAME vie_menu_shutdown.src
                            15742 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                            15743 ; 2602 |
                            15744 ; 2603 |//$FILENAME menu_clock.src
                            15745 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                            15746 ; 2605 |//$FILENAME vie_menu_clock.src
                            15747 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                            15748 ; 2607 |
                            15749 ; 2608 |//$FILENAME menu_ab.src
                            15750 ; 2609 |#define RSRC_MENU_AB 1104    
                            15751 ; 2610 |//$FILENAME vie_menu_ab.src
                            15752 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                            15753 ; 2612 |
                            15754 ; 2613 |//$FILENAME menu_delete.src
                            15755 ; 2614 |#define RSRC_MENU_DELETE 1106    
                            15756 ; 2615 |//$FILENAME vie_menu_delete.src
                            15757 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                            15758 ; 2617 |
                            15759 ; 2618 |//$FILENAME menu_about.src
                            15760 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                            15761 ; 2620 |//$FILENAME vie_menu_about.src
                            15762 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                            15763 ; 2622 |
                            15764 ; 2623 |//$FILENAME menu_exit.src
                            15765 ; 2624 |#define RSRC_MENU_EXIT 1110    
                            15766 ; 2625 |//$FILENAME vie_menu_exit.src
                            15767 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                            15768 ; 2627 |
                            15769 ; 2628 |//$FILENAME music_play_all.src
                            15770 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                            15771 ; 2630 |//$FILENAME vie_music_play_all.src
                            15772 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                            15773 ; 2632 |
                            15774 ; 2633 |//$FILENAME music_folder_internal.src
                            15775 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                            15776 ; 2635 |//$FILENAME vie_music_folder_internal.src
                            15777 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                            15778 ; 2637 |
                            15779 ; 2638 |//$FILENAME music_folder_external.src
                            15780 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                            15781 ; 2640 |//$FILENAME vie_music_folder_external.src
                            15782 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                            15783 ; 2642 |
                            15784 ; 2643 |//$FILENAME music_songs.src
                            15785 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                            15786 ; 2645 |//$FILENAME vie_music_songs.src
                            15787 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                            15788 ; 2647 |
                            15789 ; 2648 |//$FILENAME music_favorites.src
                            15790 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                            15791 ; 2650 |//$FILENAME vie_music_favorites.src
                            15792 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                            15793 ; 2652 |
                            15794 ; 2653 |//$FILENAME music_fm_record.src
                            15795 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                            15796 ; 2655 |//$FILENAME vie_music_fm_record.src
                            15797 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                            15798 ; 2657 |
                            15799 ; 2658 |//$FILENAME music_exit.src
                            15800 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
                            15801 ; 2660 |//$FILENAME vie_music_exit.src
                            15802 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                            15803 ; 2662 |
                            15804 ; 2663 |//$FILENAME browse_music_folder_internal.src
                            15805 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
                            15806 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                            15807 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                            15808 ; 2667 |
                            15809 ; 2668 |//$FILENAME browse_music_folder_external.src
                            15810 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                            15811 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                            15812 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                            15813 ; 2672 |
                            15814 ; 2673 |//$FILENAME browse_music_list_songs.src
                            15815 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                            15816 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                            15817 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                            15818 ; 2677 |
                            15819 ; 2678 |//$FILENAME browse_music_favourites.src
                            15820 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
                            15821 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                            15822 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                            15823 ; 2682 |
                            15824 ; 2683 |//$FILENAME browse_music_fm_files.src
                            15825 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                            15826 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                            15827 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
                            15828 ; 2687 |
                            15829 ; 2688 |//$FILENAME browse_voice.src
                            15830 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
                            15831 ; 2690 |//$FILENAME vie_browse_voice.src
                            15832 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                            15833 ; 2692 |
                            15834 ; 2693 |//$FILENAME favourites_list_add.src
                            15835 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                            15836 ; 2695 |//$FILENAME vie_favourites_list_add.src
                            15837 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                            15838 ; 2697 |
                            15839 ; 2698 |//$FILENAME favourites_list_remove.src
                            15840 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                            15841 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                            15842 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                            15843 ; 2702 |
                            15844 ; 2703 |//$FILENAME favourites_list_is_full.src
                            15845 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                            15846 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                            15847 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                            15848 ; 2707 |
                            15849 ; 2708 |//$FILENAME about_screen_1.src
                            15850 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                            15851 ; 2710 |//$FILENAME vie_about_screen_1.src
                            15852 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                            15853 ; 2712 |
                            15854 ; 2713 |//$FILENAME about_screen_2.src
                            15855 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                            15856 ; 2715 |//$FILENAME vie_about_screen_2.src
                            15857 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                            15858 ; 2717 |
                            15859 ; 2718 |//$FILENAME about_screen_3.src
                            15860 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                            15861 ; 2720 |//$FILENAME vie_about_screen_3.src
                            15862 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                            15863 ; 2722 |
                            15864 ; 2723 |//$FILENAME about_screen_4.src
                            15865 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                            15866 ; 2725 |//$FILENAME vie_about_screen_4.src
                            15867 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
                            15868 ; 2727 |
                            15869 ; 2728 |//$FILENAME time_date_exit_title.src
                            15870 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                            15871 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                            15872 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                            15873 ; 2732 |
                            15874 ; 2733 |//$FILENAME time_clean_desktop.src
                            15875 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                            15876 ; 2735 |//$FILENAME time_dash.src
                            15877 ; 2736 |#define RSRC_TIME_DASH 1155    
                            15878 ; 2737 |
                            15879 ; 2738 |//$FILENAME time_day_7.src
                            15880 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                            15881 ; 2740 |//$FILENAME vie_time_day_7.src
                            15882 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
                            15883 ; 2742 |//$FILENAME time_day_cn.src
                            15884 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                            15885 ; 2744 |//$FILENAME vie_time_day_cn.src
                            15886 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                            15887 ; 2746 |//$FILENAME time_day_2.src
                            15888 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                            15889 ; 2748 |//$FILENAME vie_time_day_2.src
                            15890 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                            15891 ; 2750 |//$FILENAME time_day_3.src
                            15892 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
                            15893 ; 2752 |//$FILENAME vie_time_day_3.src
                            15894 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                            15895 ; 2754 |//$FILENAME time_day_4.src
                            15896 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                            15897 ; 2756 |//$FILENAME vie_time_day_4.src
                            15898 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                            15899 ; 2758 |//$FILENAME time_day_5.src
                            15900 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                            15901 ; 2760 |//$FILENAME vie_time_day_5.src
                            15902 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                            15903 ; 2762 |//$FILENAME time_day_6.src
                            15904 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                            15905 ; 2764 |//$FILENAME vie_time_day_6.src
                            15906 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                            15907 ; 2766 |
                            15908 ; 2767 |//$FILENAME time_month_1.src
                            15909 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                            15910 ; 2769 |//$FILENAME vie_time_month_1.src
                            15911 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                            15912 ; 2771 |//$FILENAME time_month_2.src
                            15913 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                            15914 ; 2773 |//$FILENAME vie_time_month_2.src
                            15915 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                            15916 ; 2775 |//$FILENAME time_month_3.src
                            15917 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                            15918 ; 2777 |//$FILENAME vie_time_month_3.src
                            15919 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                            15920 ; 2779 |//$FILENAME time_month_4.src
                            15921 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                            15922 ; 2781 |//$FILENAME vie_time_month_4.src
                            15923 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                            15924 ; 2783 |//$FILENAME time_month_5.src
                            15925 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                            15926 ; 2785 |//$FILENAME vie_time_month_5.src
                            15927 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                            15928 ; 2787 |//$FILENAME time_month_6.src
                            15929 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
                            15930 ; 2789 |//$FILENAME vie_time_month_6.src
                            15931 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                            15932 ; 2791 |//$FILENAME time_month_7.src
                            15933 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                            15934 ; 2793 |//$FILENAME vie_time_month_7.src
                            15935 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                            15936 ; 2795 |//$FILENAME time_month_8.src
                            15937 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                            15938 ; 2797 |//$FILENAME vie_time_month_8.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15939 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                            15940 ; 2799 |//$FILENAME time_month_9.src
                            15941 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                            15942 ; 2801 |//$FILENAME vie_time_month_9.src
                            15943 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                            15944 ; 2803 |//$FILENAME time_month_10.src
                            15945 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                            15946 ; 2805 |//$FILENAME vie_time_month_10.src
                            15947 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                            15948 ; 2807 |//$FILENAME time_month_11.src
                            15949 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                            15950 ; 2809 |//$FILENAME vie_time_month_11.src
                            15951 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
                            15952 ; 2811 |//$FILENAME time_month_12.src
                            15953 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                            15954 ; 2813 |//$FILENAME vie_time_month_12.src
                            15955 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                            15956 ; 2815 |
                            15957 ; 2816 |//$FILENAME time_num_am.src
                            15958 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                            15959 ; 2818 |//$FILENAME time_num_am.src
                            15960 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                            15961 ; 2820 |//$FILENAME settime_format_12h.src
                            15962 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                            15963 ; 2822 |//$FILENAME settime_format_24h.src
                            15964 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                            15965 ; 2824 |//$FILENAME setdate_format_dmy.src
                            15966 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
                            15967 ; 2826 |//$FILENAME setdate_format_mdy.src
                            15968 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                            15969 ; 2828 |//$FILENAME setdate_format_ymd.src
                            15970 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                            15971 ; 2830 |
                            15972 ; 2831 |//$FILENAME time_num_large_0.src
                            15973 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                            15974 ; 2833 |//$FILENAME time_num_large_1.src
                            15975 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                            15976 ; 2835 |//$FILENAME time_num_large_2.src
                            15977 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                            15978 ; 2837 |//$FILENAME time_num_large_3.src
                            15979 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                            15980 ; 2839 |//$FILENAME time_num_large_4.src
                            15981 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                            15982 ; 2841 |//$FILENAME time_num_large_5.src
                            15983 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                            15984 ; 2843 |//$FILENAME time_num_large_6.src
                            15985 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                            15986 ; 2845 |//$FILENAME time_num_large_7.src
                            15987 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                            15988 ; 2847 |//$FILENAME time_num_large_8.src
                            15989 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                            15990 ; 2849 |//$FILENAME time_num_large_9.src
                            15991 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
                            15992 ; 2851 |
                            15993 ; 2852 |//$FILENAME time_num_medium_0.src
                            15994 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                            15995 ; 2854 |//$FILENAME time_num_medium_1.src
                            15996 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                            15997 ; 2856 |//$FILENAME time_num_medium_2.src
                            15998 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                            15999 ; 2858 |//$FILENAME time_num_medium_3.src
                            16000 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                            16001 ; 2860 |//$FILENAME time_num_medium_4.src
                            16002 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                            16003 ; 2862 |//$FILENAME time_num_medium_5.src
                            16004 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                            16005 ; 2864 |//$FILENAME time_num_medium_6.src
                            16006 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
                            16007 ; 2866 |//$FILENAME time_num_medium_7.src
                            16008 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                            16009 ; 2868 |//$FILENAME time_num_medium_8.src
                            16010 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                            16011 ; 2870 |//$FILENAME time_num_medium_9.src
                            16012 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                            16013 ; 2872 |
                            16014 ; 2873 |//$FILENAME time_colon.src
                            16015 ; 2874 |#define RSRC_TIME_COLON 1221    
                            16016 ; 2875 |
                            16017 ; 2876 |//$FILENAME settings_backlight_title.src
                            16018 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                            16019 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                            16020 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                            16021 ; 2880 |//$FILENAME settings_playmode_title.src
                            16022 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                            16023 ; 2882 |
                            16024 ; 2883 |//$FILENAME settings_contrast_title.src
                            16025 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                            16026 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                            16027 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                            16028 ; 2887 |
                            16029 ; 2888 |//$FILENAME settings_eq_title.src
                            16030 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                            16031 ; 2890 |//$FILENAME vie_settings_eq_title.src
                            16032 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                            16033 ; 2892 |
                            16034 ; 2893 |//$FILENAME settings_exit_title.src
                            16035 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                            16036 ; 2895 |//$FILENAME vie_settings_exit_title.src
                            16037 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                            16038 ; 2897 |
                            16039 ; 2898 |//$FILENAME settings_set_date_title.src
                            16040 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                            16041 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                            16042 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                            16043 ; 2902 |
                            16044 ; 2903 |//$FILENAME settings_set_time_title.src
                            16045 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                            16046 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                            16047 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                            16048 ; 2907 |
                            16049 ; 2908 |//$FILENAME settings_playmode_normal.src
                            16050 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                            16051 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
                            16052 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                            16053 ; 2912 |
                            16054 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                            16055 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                            16056 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                            16057 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                            16058 ; 2917 |
                            16059 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                            16060 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                            16061 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                            16062 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                            16063 ; 2922 |
                            16064 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                            16065 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                            16066 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                            16067 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                            16068 ; 2927 |
                            16069 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                            16070 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                            16071 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                            16072 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                            16073 ; 2932 |
                            16074 ; 2933 |//$FILENAME settings_backlight_on.src
                            16075 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
                            16076 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                            16077 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                            16078 ; 2937 |
                            16079 ; 2938 |//$FILENAME settings_backlight_10s.src
                            16080 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                            16081 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                            16082 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                            16083 ; 2942 |
                            16084 ; 2943 |//$FILENAME settings_backlight_20s.src
                            16085 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                            16086 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                            16087 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                            16088 ; 2947 |
                            16089 ; 2948 |//$FILENAME settings_backlight_30s.src
                            16090 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                            16091 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                            16092 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                            16093 ; 2952 |
                            16094 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                            16095 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                            16096 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                            16097 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                            16098 ; 2957 |
                            16099 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                            16100 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                            16101 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                            16102 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                            16103 ; 2962 |
                            16104 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                            16105 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                            16106 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                            16107 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                            16108 ; 2967 |
                            16109 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                            16110 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                            16111 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                            16112 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                            16113 ; 2972 |
                            16114 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                            16115 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
                            16116 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                            16117 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                            16118 ; 2977 |
                            16119 ; 2978 |//$FILENAME settings_languages_eng.src
                            16120 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                            16121 ; 2980 |//$FILENAME settings_languages_vie.src
                            16122 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                            16123 ; 2982 |
                            16124 ; 2983 |//$FILENAME fraction_dot.src
                            16125 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                            16126 ; 2985 |
                            16127 ; 2986 |//$FILENAME fm_background.src
                            16128 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                            16129 ; 2988 |//$FILENAME vie_fm_background.src
                            16130 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
                            16131 ; 2990 |
                            16132 ; 2991 |//$FILENAME searching_please_wait.src
                            16133 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                            16134 ; 2993 |//$FILENAME vie_searching_please_wait.src
                            16135 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                            16136 ; 2995 |
                            16137 ; 2996 |//$FILENAME fm_auto_search.src
                            16138 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                            16139 ; 2998 |//$FILENAME vie_fm_auto_search.src
                            16140 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
                            16141 ; 3000 |
                            16142 ; 3001 |//$FILENAME jvj_shutdown_player.src
                            16143 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                            16144 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                            16145 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                            16146 ; 3005 |
                            16147 ; 3006 |#endif //IF (!@def(resources))
                            16148 ; 3007 |
                            16149 
                            16151 
                            16152 ; 11   |#include "sysmem.h"
                            16153 
                            16155 
                            16156 ; 1    |//;******************************************************************************
                            16157 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                            16158 ; 3    |//; File: sysmem.h
                            16159 ; 4    |//; ST System Memory Externs
                            16160 ; 5    |//;******************************************************************************
                            16161 ; 6    |
                            16162 ; 7    |#ifndef SYSMEM_XREF_C
                            16163 ; 8    |#define SYSMEM_XREF_C
                            16164 ; 9    |
                            16165 ; 10   |// Variables in X
                            16166 ; 11   |extern unsigned int _X g_wDecoderCSR;
                            16167 ; 12   |extern unsigned int _X g_wDecoderSR;
                            16168 ; 13   |extern unsigned int _X g_wDecoderCSR2;  // DECODE2EOF
                            16169 ; 14   |extern unsigned int _X g_wEncoderSR;
                            16170 ; 15   |extern unsigned int _X g_wEncoderCSR;
                            16171 ; 16   |extern unsigned int _X g_wRecStartTimeHigh;
                            16172 ; 17   |extern unsigned int _X g_wRecStartTimeLow;
                            16173 ; 18   |extern unsigned int _X g_wSysError;
                            16174 ; 19   |#ifdef TRACEBUF_EN
                            16175 ; 20   |extern unsigned int _X g_wTraceBuffer; //Disabled by default.   
                            16176 ; 21   |extern unsigned int _X g_wTracePointer;
                            16177 ; 22   |#endif
                            16178 ; 23   |extern unsigned int _X g_wUserScratchX[];
                            16179 ; 24   |extern unsigned int _X g_wNextVoiceNumValue;
                            16180 ; 25   |extern unsigned int _X g_wEncAdpcmSave_r7;
                            16181 ; 26   |extern unsigned int _X g_wEncAdpcmSave_m7;
                            16182 ; 27   |extern unsigned int _X g_wEncModuleState;
                            16183 ; 28   |extern unsigned int _X g_wEncoderIsrSR;
                            16184 ; 29   |extern unsigned int _X g_bAudibleNeedFileSize;          // 10/12/04 mmiu - Added for AA file navigation
                            16185 ; 30   |extern unsigned int _X g_bAudiblePlayThrough;           // 11/1/04 mmiu - Added for file position play-through indicator
                            16186 ; 31   |extern unsigned int _X g_wSongStartOffsetHigh;          // 11/1/04 mmiu - Added until confirmed we can use g_wSongByteTotalConsumedHigh/Low
                            16187 ; 32   |extern unsigned int _X g_wSongStartOffsetLow;
                            16188 ; 33   |
                            16189 ; 34   |// Variables in Y
                            16190 ; 35   |extern int          _Y g_VolumeBias;
                            16191 ; 36   |extern unsigned int _Y g_wCurrentRoutinePtr;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16192 ; 37   |extern unsigned int _Y g_wSystemFileHandle;
                            16193 ; 38   |extern unsigned int _Y g_wSongByteTotalHigh;
                            16194 ; 39   |extern unsigned int _Y g_wSongByteTotalLow; 
                            16195 ; 40   |extern unsigned int _Y g_wSongByteLengthHigh;
                            16196 ; 41   |extern unsigned int _Y g_wSongByteLengthLow;
                            16197 ; 42   |extern unsigned int _Y g_wInvSampleRate;
                            16198 ; 43   |extern unsigned int _Y g_wCurrentSongBad;
                            16199 ; 44   |extern unsigned int _Y g_iSongType;
                            16200 ; 45   |extern _packed BYTE _Y g_CurrentSongName[];
                            16201 ; 46   |extern unsigned int _Y g_wCurrentDirDevId;
                            16202 ; 47   |extern unsigned int _Y g_wSongInvBitRatePtr;
                            16203 ; 48   |extern unsigned int _Y g_wUserScratchXDescriptor;
                            16204 ; 49   |extern unsigned int _Y g_wUserScratchYDescriptor;
                            16205 ; 50   |extern _packed BYTE _Y g_EncFileNameString[];
                            16206 ; 51   |extern unsigned int _Y g_wEncFileHandle;
                            16207 ; 52   |extern unsigned int _Y g_wEncAdpcmOvlSave_sp;
                            16208 ; 53   |extern unsigned int _Y g_wRootDirectory;
                            16209 ; 54   |extern unsigned int _Y g_wUserScratchY[];
                            16210 ; 55   |extern unsigned int _Y g_wPrevInvBitRatePtr;
                            16211 ; 56   |
                            16212 ; 57   |#endif  // SYSMEM_XREF_C
                            16213 
                            16215 
                            16216 ; 12   |//#include "sysequ.h"
                            16217 ; 13   |#include "SysResourceApi.h"
                            16218 
                            16220 
                            16221 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16222 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                            16223 ; 3    |//
                            16224 ; 4    |// File : SysResourceApi.h
                            16225 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                            16226 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16227 ; 7    |
                            16228 ; 8    |#ifndef __SysResourceApi_h__
                            16229 ; 9    |#define __SysResourceApi_h__ 1
                            16230 ; 10   |
                            16231 ; 11   |#include "types.h"
                            16232 
                            16234 
                            16235 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16236 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16237 ; 3    |//
                            16238 ; 4    |// Filename: types.h
                            16239 ; 5    |// Description: Standard data types
                            16240 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16241 ; 7    |
                            16242 ; 8    |#ifndef _TYPES_H
                            16243 ; 9    |#define _TYPES_H
                            16244 ; 10   |
                            16245 ; 11   |// TODO:  move this outta here!
                            16246 ; 12   |#if !defined(NOERROR)
                            16247 ; 13   |#define NOERROR 0
                            16248 ; 14   |#define SUCCESS 0
                            16249 ; 15   |#endif 
                            16250 ; 16   |#if !defined(SUCCESS)
                            16251 ; 17   |#define SUCCESS  0
                            16252 ; 18   |#endif
                            16253 ; 19   |#if !defined(ERROR)
                            16254 ; 20   |#define ERROR   -1
                            16255 ; 21   |#endif
                            16256 ; 22   |#if !defined(FALSE)
                            16257 ; 23   |#define FALSE 0
                            16258 ; 24   |#endif
                            16259 ; 25   |#if !defined(TRUE)
                            16260 ; 26   |#define TRUE  1
                            16261 ; 27   |#endif
                            16262 ; 28   |
                            16263 ; 29   |#if !defined(NULL)
                            16264 ; 30   |#define NULL 0
                            16265 ; 31   |#endif
                            16266 ; 32   |
                            16267 ; 33   |#define MAX_INT     0x7FFFFF
                            16268 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16269 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16270 ; 36   |#define MAX_ULONG   (-1) 
                            16271 ; 37   |
                            16272 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16273 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16274 ; 40   |
                            16275 ; 41   |
                            16276 ; 42   |#define BYTE    unsigned char       // btVarName
                            16277 ; 43   |#define CHAR    signed char         // cVarName
                            16278 ; 44   |#define USHORT  unsigned short      // usVarName
                            16279 ; 45   |#define SHORT   unsigned short      // sVarName
                            16280 ; 46   |#define WORD    unsigned int        // wVarName
                            16281 ; 47   |#define INT     signed int          // iVarName
                            16282 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16283 ; 49   |#define LONG    signed long         // lVarName
                            16284 ; 50   |#define BOOL    unsigned int        // bVarName
                            16285 ; 51   |#define FRACT   _fract              // frVarName
                            16286 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            16287 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            16288 ; 54   |#define FLOAT   float               // fVarName
                            16289 ; 55   |#define DBL     double              // dVarName
                            16290 ; 56   |#define ENUM    enum                // eVarName
                            16291 ; 57   |#define CMX     _complex            // cmxVarName
                            16292 ; 58   |typedef WORD UCS3;                   // 
                            16293 ; 59   |
                            16294 ; 60   |#define UINT16  unsigned short
                            16295 ; 61   |#define UINT8   unsigned char   
                            16296 ; 62   |#define UINT32  unsigned long
                            16297 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16298 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port exisiting code to only use 48 bit
                            16299 ; 65   |#define WCHAR   UINT16
                            16300 ; 66   |
                            16301 ; 67   |//UINT128 is 16 bytes or 6 words
                            16302 ; 68   |typedef struct UINT128_3500 {   
                            16303 ; 69   |    int val[6];     
                            16304 ; 70   |} UINT128_3500;
                            16305 ; 71   |
                            16306 ; 72   |#define UINT128   UINT128_3500
                            16307 ; 73   |
                            16308 ; 74   |// Little endian word packed byte strings:   
                            16309 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16310 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16311 ; 77   |// Little endian word packed byte strings:   
                            16312 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            16313 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            16314 ; 80   |
                            16315 ; 81   |// Declare Memory Spaces To Use When Coding
                            16316 ; 82   |// A. Sector Buffers
                            16317 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            16318 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            16319 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            16320 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            16321 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            16322 ; 88   |// B. Media DDI Memory
                            16323 ; 89   |#define MEDIA_DDI_MEM _Y
                            16324 ; 90   |
                            16325 ; 91   |
                            16326 ; 92   |
                            16327 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            16328 ; 94   |// Examples of circular pointers:
                            16329 ; 95   |//    INT CIRC cpiVarName
                            16330 ; 96   |//    DWORD CIRC cpdwVarName
                            16331 ; 97   |
                            16332 ; 98   |#define RETCODE INT                 // rcVarName
                            16333 ; 99   |
                            16334 ; 100  |// generic bitfield structure
                            16335 ; 101  |struct Bitfield {
                            16336 ; 102  |    unsigned int B0  :1;
                            16337 ; 103  |    unsigned int B1  :1;
                            16338 ; 104  |    unsigned int B2  :1;
                            16339 ; 105  |    unsigned int B3  :1;
                            16340 ; 106  |    unsigned int B4  :1;
                            16341 ; 107  |    unsigned int B5  :1;
                            16342 ; 108  |    unsigned int B6  :1;
                            16343 ; 109  |    unsigned int B7  :1;
                            16344 ; 110  |    unsigned int B8  :1;
                            16345 ; 111  |    unsigned int B9  :1;
                            16346 ; 112  |    unsigned int B10 :1;
                            16347 ; 113  |    unsigned int B11 :1;
                            16348 ; 114  |    unsigned int B12 :1;
                            16349 ; 115  |    unsigned int B13 :1;
                            16350 ; 116  |    unsigned int B14 :1;
                            16351 ; 117  |    unsigned int B15 :1;
                            16352 ; 118  |    unsigned int B16 :1;
                            16353 ; 119  |    unsigned int B17 :1;
                            16354 ; 120  |    unsigned int B18 :1;
                            16355 ; 121  |    unsigned int B19 :1;
                            16356 ; 122  |    unsigned int B20 :1;
                            16357 ; 123  |    unsigned int B21 :1;
                            16358 ; 124  |    unsigned int B22 :1;
                            16359 ; 125  |    unsigned int B23 :1;
                            16360 ; 126  |};
                            16361 ; 127  |
                            16362 ; 128  |union BitInt {
                            16363 ; 129  |        struct Bitfield B;
                            16364 ; 130  |        int        I;
                            16365 ; 131  |};
                            16366 ; 132  |
                            16367 ; 133  |#define MAX_MSG_LENGTH 10
                            16368 ; 134  |struct CMessage
                            16369 ; 135  |{
                            16370 ; 136  |        unsigned int m_uLength;
                            16371 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            16372 ; 138  |};
                            16373 ; 139  |
                            16374 ; 140  |typedef struct {
                            16375 ; 141  |    WORD m_wLength;
                            16376 ; 142  |    WORD m_wMessage;
                            16377 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            16378 ; 144  |} Message;
                            16379 ; 145  |
                            16380 ; 146  |struct MessageQueueDescriptor
                            16381 ; 147  |{
                            16382 ; 148  |        int *m_pBase;
                            16383 ; 149  |        int m_iModulo;
                            16384 ; 150  |        int m_iSize;
                            16385 ; 151  |        int *m_pHead;
                            16386 ; 152  |        int *m_pTail;
                            16387 ; 153  |};
                            16388 ; 154  |
                            16389 ; 155  |struct ModuleEntry
                            16390 ; 156  |{
                            16391 ; 157  |    int m_iSignaledEventMask;
                            16392 ; 158  |    int m_iWaitEventMask;
                            16393 ; 159  |    int m_iResourceOfCode;
                            16394 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            16395 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescriptor *);
                            16396 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            16397 ; 163  |    int m_uTimeOutHigh;
                            16398 ; 164  |    int m_uTimeOutLow;
                            16399 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            16400 ; 166  |};
                            16401 ; 167  |
                            16402 ; 168  |union WaitMask{
                            16403 ; 169  |    struct B{
                            16404 ; 170  |        unsigned int m_bNone     :1;
                            16405 ; 171  |        unsigned int m_bMessage  :1;
                            16406 ; 172  |        unsigned int m_bTimer    :1;
                            16407 ; 173  |        unsigned int m_bButton   :1;
                            16408 ; 174  |    } B;
                            16409 ; 175  |    int I;
                            16410 ; 176  |} ;
                            16411 ; 177  |
                            16412 ; 178  |
                            16413 ; 179  |struct Button {
                            16414 ; 180  |        WORD wButtonEvent;
                            16415 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            16416 ; 182  |};
                            16417 ; 183  |
                            16418 ; 184  |struct Message {
                            16419 ; 185  |        WORD wMsgLength;
                            16420 ; 186  |        WORD wMsgCommand;
                            16421 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            16422 ; 188  |};
                            16423 ; 189  |
                            16424 ; 190  |union EventTypes {
                            16425 ; 191  |        struct CMessage msg;
                            16426 ; 192  |        struct Button Button ;
                            16427 ; 193  |        struct Message Message;
                            16428 ; 194  |};
                            16429 ; 195  |
                            16430 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            16431 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            16432 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            16433 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            16434 ; 200  |
                            16435 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            16436 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            16437 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            16438 ; 204  |
                            16439 ; 205  |#if DEBUG
                            16440 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            16441 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            16442 ; 208  |#else 
                            16443 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rather than halt or reset. 
                            16444 ; 210  |#define DebugBuildAssert(x)    
                            16445 ; 211  |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16446 ; 212  |
                            16447 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            16448 ; 214  |//  #pragma asm
                            16449 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            16450 ; 216  |//  #pragma endasm
                            16451 ; 217  |
                            16452 ; 218  |
                            16453 ; 219  |#ifdef COLOR_262K
                            16454 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b)) >> 2)    //262k
                            16455 ; 221  |#elif defined(COLOR_65K)
                            16456 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)) >> 3)  //65k
                            16457 ; 223  |#else
                            16458 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >> 4)
                            16459 ; 225  |#endif
                            16460 ; 226  |    
                            16461 ; 227  |#endif // #ifndef _TYPES_H
                            16462 
                            16464 
                            16465 ; 12   |
                            16466 ; 13   |#define RSRC_TYPE_STRING                1
                            16467 ; 14   |#define RSRC_TYPE_DATA                  2
                            16468 ; 15   |#define RSRC_TYPE_BITMAP                3
                            16469 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                            16470 ; 17   |
                            16471 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                            16472 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                            16473 ; 20   |
                            16474 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                            16475 ; 22   |                                                        // from the root.
                            16476 ; 23   |
                            16477 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                            16478 ; 25   |                                                        // Maximum allocated nested resource handle reached
                            16479 ; 26   |                                                        // To correct error increase the number of MAX_NESTED_RSC
                            16480 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is Invalid
                            16481 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                            16482 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is not initialized
                            16483 ; 30   |                                                        // element RscNumber of Struct_Handle_Nested_Rsc 
                            16484 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                            16485 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource Header does not
                            16486 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is invalid. Valid spaces are X, Y or P.
                            16487 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                            16488 ; 35   |
                            16489 ; 36   |#define TARGET_MEM_X                        0x800000
                            16490 ; 37   |#define TARGET_MEM_Y                        0x400000
                            16491 ; 38   |#define TARGET_MEM_L                        0x200000
                            16492 ; 39   |#define TARGET_MEM_P                        0x100000
                            16493 ; 40   |
                            16494 ; 41   |typedef struct {
                            16495 ; 42   |    WORD    wRscNumber;             // Nested resource number
                            16496 ; 43   |                                    // 0x00 = Root Resource
                            16497 ; 44   |                                    // 0xffff = Free Handle
                            16498 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                            16499 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                            16500 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                            16501 ; 48   |
                            16502 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                            16503 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                            16504 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                            16505 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                            16506 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                            16507 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                            16508 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);                        
                            16509 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                            16510 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                            16511 ; 58   |                   
                            16512 ; 59   |extern WORD wResourceTag;
                            16513 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                            16514 ; 61   |
                            16515 ; 62   |extern void EnterNonReentrantSection(void);
                            16516 ; 63   |extern void LeaveNonReentrantSection(void);
                            16517 ; 64   |
                            16518 ; 65   |#endif
                            16519 
                            16521 
                            16522 ; 14   |#include "stringlib.h"
                            16523 
                            16525 
                            16526 ; 1    |#ifndef STRINGLIB_H
                            16527 ; 2    |#define STRINGLIB_H
                            16528 
                            16530 
                            16531 ; 3    |_asmfunc int pack_string(UCS3 _Y * _Y pUnpacked, _packed BYTE _Y * _Y pPacked);
                            16532 ; 4    |_asmfunc int unpack_string( _packed BYTE _Y * _Y pPacked,  UCS3 _Y * _Y pUnpacked);
                            16533 ; 5    |_asmfunc int unpack_data( _packed BYTE _Y * _Y pPacked,  BYTE _Y * _Y pUnpacked, INT iCount);
                            16534 ; 6    |
                            16535 ; 7    |_asmfunc BYTE GetByteFromArrayInX( void _X * p,int n);
                            16536 ; 8    |_asmfunc void PutByteInArrayInX( void _X * p,int n, int newchar);
                            16537 ; 9    |_asmfunc BYTE GetByteFromArrayInY( void _Y * p,int n);
                            16538 ; 10   |_asmfunc void PutByteInArrayInY( void _Y * p,int n, int newchar);
                            16539 ; 11   |
                            16540 ; 12   |_asmfunc BYTE packed_get( _packed BYTE _Y * p,int n);
                            16541 ; 13   |_asmfunc void packed_set( _packed BYTE _Y * p,int n, int newchar);
                            16542 ; 14   |
                            16543 ; 15   |_asmfunc int packed_strlen( _packed BYTE _Y * _Y p);
                            16544 ; 16   |
                            16545 ; 17   |_asmfunc _packed BYTE _Y * packed_strncpy( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSrc, int iCount);
                            16546 ; 18   |_asmfunc _packed BYTE _Y * packed_strcpy ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSrc);
                            16547 ; 19   |
                            16548 ; 20   |
                            16549 ; 21   |_asmfunc int packed_strncmp( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight, int iCount);
                            16550 ; 22   |_asmfunc int packed_strcmp ( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight);
                            16551 ; 23   |
                            16552 ; 24   |_asmfunc int packed_strncat( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource, int iCount);
                            16553 ; 25   |_asmfunc int packed_strcat ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource);
                            16554 ; 26   |
                            16555 ; 27   |
                            16556 ; 28   |_asmfunc int strlen(UCS3 _Y * _Y p);
                            16557 ; 29   |
                            16558 ; 30   |_asmfunc UCS3 *strchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                            16559 ; 31   |_asmfunc UCS3 *strrchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                            16560 ; 32   |
                            16561 ; 33   |_asmfunc void strncpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, BYTE iCount);
                            16562 ; 34   |_asmfunc void strcpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                            16563 ; 35   |
                            16564 ; 36   |_asmfunc char *strncat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                            16565 ; 37   |_asmfunc char *strcat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                            16566 ; 38   |
                            16567 ; 39   |_asmfunc int strncmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                            16568 ; 40   |_asmfunc int strcmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                            16569 ; 41   |
                            16570 ; 42   |#endif
                            16571 
                            16573 
                            16574 ; 15   |#include "displaydrv.h"
                            16575 
                            16577 
                            16578 ; 1    |///////////////////////////////////////////////////////////////////////////////
                            16579 ; 2    |///
                            16580 ; 3    |/// Filename: displaydrv.h
                            16581 ; 4    |/// Description: Prototypes for the display driver files.
                            16582 ; 5    |///
                            16583 ; 6    |///
                            16584 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                            16585 ; 8    |///
                            16586 ; 9    |/// SigmaTel, Inc.
                            16587 ; 10   |/// Proprietary  Confidential
                            16588 ; 11   |///
                            16589 ; 12   |/// This source code and the algorithms implemented therein constitute
                            16590 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                            16591 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                            16592 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                            16593 ; 16   |/// source code was originally received.
                            16594 ; 17   |///
                            16595 ; 18   |///////////////////////////////////////////////////////////////////////////////
                            16596 ; 19   |#ifndef __DISPLAY_H
                            16597 ; 20   |#define __DISPLAY_H
                            16598 ; 21   |
                            16599 ; 22   |#include "project.h"
                            16600 
                            16602 
                            16603 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            16604 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                            16605 ; 3    |//  Filename: project.inc
                            16606 ; 4    |//  Description: 
                            16607 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            16608 ; 6    |
                            16609 ; 7    |#if (!defined(_PROJECT_INC))
                            16610 ; 8    |#define _PROJECT_INC 1
                            16611 ; 9    |
                            16612 ; 10   |#if defined(STMP_BUILD_PLAYER)
                            16613 ; 11   |#include "hwequ.h"
                            16614 ; 12   |#else 
                            16615 ; 13   |//include "regscodec.inc"
                            16616 ; 14   |#endif
                            16617 ; 15   |
                            16618 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            16619 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults ON) & 
                            16620 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm. STMP00012148
                            16621 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal). 
                            16622 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's specs can 
                            16623 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player mode.  
                            16624 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            16625 ; 23   |
                            16626 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            16627 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            16628 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            16629 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define below by defining
                            16630 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            16631 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            16632 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            16633 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot config above- 
                            16634 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down threshholds by maybe 50mV.
                            16635 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed.
                            16636 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            16637 ; 35   |
                            16638 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            16639 ; 37   |// MEDIA DEFINITIONS
                            16640 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            16641 ; 39   |
                            16642 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            16643 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            16644 ; 42   |#if defined(NAND1)
                            16645 ; 43   |#define SM_INTERNAL_CHIPS 1
                            16646 ; 44   |#else 
                            16647 ; 45   |#if defined(NAND2)
                            16648 ; 46   |#define SM_INTERNAL_CHIPS 2
                            16649 ; 47   |#else 
                            16650 ; 48   |#if defined(NAND3)
                            16651 ; 49   |#define SM_INTERNAL_CHIPS 3
                            16652 ; 50   |#else 
                            16653 ; 51   |#if defined(NAND4)
                            16654 ; 52   |#define SM_INTERNAL_CHIPS 4
                            16655 ; 53   |#else 
                            16656 ; 54   |#define SM_INTERNAL_CHIPS 1
                            16657 ; 55   |#endif
                            16658 ; 56   |#endif
                            16659 ; 57   |#endif
                            16660 ; 58   |#endif
                            16661 ; 59   |
                            16662 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            16663 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            16664 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it reads 0.  
                            16665 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            16666 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it reads 1.
                            16667 ; 65   |//*** comment out if active high ****
                            16668 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            16669 ; 67   |
                            16670 ; 68   |#if defined(SMEDIA)
                            16671 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            16672 ; 70   |#define NUM_SM_EXTERNAL 1
                            16673 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            16674 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            16675 ; 73   |#else 
                            16676 ; 74   |#if defined(MMC)
                            16677 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            16678 ; 76   |#define NUM_SM_EXTERNAL 0
                            16679 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            16680 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            16681 ; 79   |#else 
                            16682 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            16683 ; 81   |#define NUM_SM_EXTERNAL 0
                            16684 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            16685 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            16686 ; 84   |#endif
                            16687 ; 85   |#endif
                            16688 ; 86   |
                            16689 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            16690 ; 88   |// Mass Storage Class definitions
                            16691 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            16692 ; 90   |// Set to 0 if Composite Device build is desired.    
                            16693 ; 91   |#define MULTI_LUN_BUILD 1   
                            16694 ; 92   |
                            16695 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            16696 ; 94   |//  SCSI
                            16697 ; 95   |#if (MULTI_LUN_BUILD==0)
                            16698 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16699 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            16700 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16701 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            16702 ; 100  |  #else
                            16703 ; 101  |    #define SCSI_NUM_TARGETS                        1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16704 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16705 ; 103  |  #endif
                            16706 ; 104  |#else
                            16707 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            16708 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16709 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            16710 ; 108  |  #else
                            16711 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            16712 ; 110  |  #endif
                            16713 ; 111  |#endif
                            16714 ; 112  |
                            16715 ; 113  |
                            16716 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            16717 ; 115  |
                            16718 ; 116  |
                            16719 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            16720 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            16721 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            16722 ; 120  |#ifdef MMC
                            16723 ; 121  |#ifdef MTP_BUILD
                            16724 ; 122  |// --------------------
                            16725 ; 123  |// MTP and MMC
                            16726 ; 124  |// --------------------
                            16727 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            16728 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            16729 ; 127  |#else  // ifndef MTP_BUILD
                            16730 ; 128  |#ifdef STMP_BUILD_PLAYER
                            16731 ; 129  |// --------------------
                            16732 ; 130  |// Player and MMC
                            16733 ; 131  |// --------------------
                            16734 ; 132  |#else
                            16735 ; 133  |// --------------------
                            16736 ; 134  |// USBMSC and MMC
                            16737 ; 135  |// --------------------
                            16738 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            16739 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            16740 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            16741 ; 139  |#endif // ifdef MTP_BUILD
                            16742 ; 140  |#else  // ifndef MMC
                            16743 ; 141  |#ifdef MTP_BUILD
                            16744 ; 142  |// --------------------
                            16745 ; 143  |// MTP and NAND only
                            16746 ; 144  |// --------------------
                            16747 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            16748 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            16749 ; 147  |#else  // ifndef MTP_BUILD
                            16750 ; 148  |#ifdef STMP_BUILD_PLAYER
                            16751 ; 149  |// --------------------
                            16752 ; 150  |// Player and NAND only
                            16753 ; 151  |// --------------------
                            16754 ; 152  |#else
                            16755 ; 153  |// --------------------
                            16756 ; 154  |// USBMSC and NAND only
                            16757 ; 155  |// --------------------
                            16758 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            16759 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            16760 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            16761 ; 159  |#endif // ifdef MTP_BUILD
                            16762 ; 160  |#endif // ifdef MMC 
                            16763 ; 161  |
                            16764 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            16765 ; 163  |#if (defined(MTP_BUILD))
                            16766 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            16767 ; 165  |
                            16768 ; 166  |////!
                            16769 ; 167  |////! This varible holds the watchdog count for the store flush.
                            16770 ; 168  |////!
                            16771 ; 169  |///
                            16772 ; 170  |#include <types.h>
                            16773 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            16774 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            16775 ; 173  |#endif
                            16776 ; 174  |
                            16777 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            16778 ; 176  |// These are needed here for Mass Storage Class
                            16779 ; 177  |// Needs to be cleaned up
                            16780 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            16781 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            16782 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            16783 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            16784 ; 182  |
                            16785 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            16786 ; 184  |
                            16787 ; 185  |#endif
                            16788 ; 186  |
                            16789 ; 187  |
                            16790 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            16791 ; 189  |// SmartMedia/NAND defs
                            16792 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16793 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            16794 ; 192  |
                            16795 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            16796 ; 194  |// Sysloadresources defs
                            16797 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16798 ; 196  |
                            16799 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            16800 ; 198  |// MMC defs
                            16801 ; 199  |#define MMC_MAX_PARTITIONS 1
                            16802 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            16803 ; 201  |
                            16804 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            16805 ; 203  |// SPI defs
                            16806 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            16807 ; 205  |
                            16808 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            16809 ; 207  |// Global media defs
                            16810 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            16811 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            16812 ; 210  |
                            16813 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            16814 ; 212  |// DO NOT CHANGE THESE!!!
                            16815 ; 213  |#define SM_MAX_PARTITIONS 4
                            16816 ; 214  |#define MAX_HANDLES 2
                            16817 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            16818 ; 216  |
                            16819 ; 217  |
                            16820 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            16821 ; 219  |// Battery LRADC Values 
                            16822 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            16823 ; 221  |// brownout trip point in mV (moved by RS)
                            16824 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            16825 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            16826 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            16827 ; 225  |//     audio recording to media.
                            16828 ; 226  |#define BATT_SAFETY_MARGIN 10
                            16829 ; 227  |
                            16830 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                            16831 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline voltage to do a refresh.
                            16832 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            16833 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            16834 ; 232  |
                            16835 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc presence.
                            16836 ; 234  |
                            16837 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            16838 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat check.
                            16839 ; 237  |#if (!defined(CLCD))
                            16840 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            16841 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            16842 ; 240  |#else 
                            16843 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            16844 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            16845 ; 243  |#endif
                            16846 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            16847 ; 245  |
                            16848 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            16849 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIon.
                            16850 ; 248  |// See mp3 encoder overlay.
                            16851 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            16852 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            16853 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            16854 ; 252  |
                            16855 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            16856 ; 254  |// Voice recording filenames
                            16857 ; 255  |// number of digits in filename Vxxx.wav
                            16858 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            16859 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            16860 ; 258  |
                            16861 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            16862 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            16863 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            16864 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            16865 ; 263  |#if defined(DEVICE_3500)
                            16866 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            16867 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            16868 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            16869 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, & demo player)
                            16870 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16871 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            16872 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            16873 ; 271  |
                            16874 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn when bias not yet ready.
                            16875 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            16876 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevention if you use rec button from outside voice menu.
                            16877 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latency in the record-from-music-menu use-case.
                            16878 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            16879 ; 277  |
                            16880 ; 278  |#else 
                            16881 ; 279  |// STMP3410
                            16882 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            16883 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16884 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            16885 ; 283  |#endif
                            16886 ; 284  |
                            16887 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            16888 ; 286  |// Number of available soft timers
                            16889 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            16890 ; 288  |#if defined(SYNC_LYRICS)
                            16891 ; 289  |#define SOFT_TIMERS 10
                            16892 ; 290  |#else 
                            16893 ; 291  |#if defined(JPEG_DECODER)
                            16894 ; 292  |#define SOFT_TIMERS 10
                            16895 ; 293  |#else 
                            16896 ; 294  |#define SOFT_TIMERS 9
                            16897 ; 295  |#endif
                            16898 ; 296  |#endif
                            16899 ; 297  |
                            16900 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            16901 ; 299  |//  sizes
                            16902 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            16903 ; 301  |#if defined(MMC)
                            16904 ; 302  |#if defined(USE_PLAYLIST5)
                            16905 ; 303  |#define MENU_STACK_SIZE 1500
                            16906 ; 304  |#else 
                            16907 ; 305  |#define MENU_STACK_SIZE 1250
                            16908 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            16909 ; 307  |#else 
                            16910 ; 308  |#if defined(USE_PLAYLIST5)
                            16911 ; 309  |#define MENU_STACK_SIZE 1500
                            16912 ; 310  |#else 
                            16913 ; 311  |#define MENU_STACK_SIZE 1250
                            16914 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            16915 ; 313  |#endif //if @def('MMC')
                            16916 ; 314  |
                            16917 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 750 else 550 for other builds? TOVERIFY. MYALLOC
                            16918 ; 316  |// 
                            16919 ; 317  |#define STACK_L1_SIZE 750
                            16920 ; 318  |#define STACK_L2_SIZE 100
                            16921 ; 319  |#define STACK_L3_SIZE 160
                            16922 ; 320  |
                            16923 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            16924 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            16925 ; 323  |// is ok with switching code.
                            16926 ; 324  |#if defined(MTP_BUILD)
                            16927 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            16928 ; 326  |#endif
                            16929 ; 327  |
                            16930 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            16931 ; 329  |// maximum number of nested funclets 
                            16932 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            16933 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            16934 ; 332  |
                            16935 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            16936 ; 334  |//    LCD DEFINITIONS
                            16937 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            16938 ; 336  |
                            16939 ; 337  |#define SPACE_CHAR 0x000020          
                            16940 ; 338  |#define ZERO_CHAR 0x000030
                            16941 ; 339  |#define COLON_CHAR 0x00003A
                            16942 ; 340  |#define PERIOD_CHAR 0x00002E
                            16943 ; 341  |
                            16944 ; 342  |#if (defined(S6B33B0A_LCD))
                            16945 ; 343  |#define LCD_X_SIZE 128
                            16946 ; 344  |#define LCD_Y_SIZE 159
                            16947 ; 345  |#endif
                            16948 ; 346  |
                            16949 ; 347  |#if (defined(SED15XX_LCD))
                            16950 ; 348  |#define LCD_X_SIZE 128
                            16951 ; 349  |#define LCD_Y_SIZE 64
                            16952 ; 350  |#endif
                            16953 ; 351  |
                            16954 ; 352  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16955 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            16956 ; 354  |//   Details on Customizing Contrast
                            16957 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            16958 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            16959 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            16960 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            16961 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            16962 ; 360  |//   unless the ezact sequence is remembered.
                            16963 ; 361  |//   To find out what range your player supports: 
                            16964 ; 362  |//   change these equs to full range or comment out (full range is default)
                            16965 ; 363  |//;;;;;;
                            16966 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            16967 ; 365  |// recommended calibration using player -- uncomment 
                            16968 ; 366  |//;;;;;;
                            16969 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            16970 ; 368  |////////////////////////////
                            16971 ; 369  |#if (defined(DEMO_HW))
                            16972 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi LCD (June6'05)
                            16973 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            16974 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            16975 ; 373  |#else 
                            16976 ; 374  |
                            16977 ; 375  |#if (defined(S6B33B0A_LCD))
                            16978 ; 376  |#define LCD_MAX_CONTRAST 210
                            16979 ; 377  |#define LCD_MIN_CONTRAST 160    
                            16980 ; 378  |#endif
                            16981 ; 379  |
                            16982 ; 380  |#if (defined(SED15XX_LCD))
                            16983 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            16984 ; 382  |// Engineering board regs support range [17-37].
                            16985 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            16986 ; 384  |//   One default contrast range [24-42] works for both.
                            16987 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            16988 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            16989 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            16990 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            16991 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            16992 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            16993 ; 391  |
                            16994 ; 392  |#if (defined(NEWSHINGYIH))
                            16995 ; 393  |#define LCD_MAX_CONTRAST 250
                            16996 ; 394  |#define LCD_MIN_CONTRAST 0
                            16997 ; 395  |#else 
                            16998 ; 396  |//-----
                            16999 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            17000 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for both LCDs.
                            17001 ; 399  |#define LCD_MAX_CONTRAST 250
                            17002 ; 400  |#define LCD_MIN_CONTRAST 0
                            17003 ; 401  |
                            17004 ; 402  |//=====
                            17005 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            17006 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this historic ver.
                            17007 ; 405  |//LCD_MAX_CONTRAST equ 42
                            17008 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            17009 ; 407  |
                            17010 ; 408  |#endif
                            17011 ; 409  |#endif
                            17012 ; 410  |
                            17013 ; 411  |#endif
                            17014 ; 412  |
                            17015 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            17016 ; 414  |// The default value of the lcd contrast in % of range
                            17017 ; 415  |//   the default value is used when no settings.dat is available
                            17018 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            17019 ; 417  |
                            17020 ; 418  |#if (defined(S6B33B0A_LCD))
                            17021 ; 419  |// 60% of range is default value
                            17022 ; 420  |#define DEFAULT_CONTRAST 50 
                            17023 ; 421  |#endif
                            17024 ; 422  |
                            17025 ; 423  |#if (defined(SED15XX_LCD))
                            17026 ; 424  |// % of range is default value (was 60%)
                            17027 ; 425  |#define DEFAULT_CONTRAST 50 
                            17028 ; 426  |#endif
                            17029 ; 427  |
                            17030 ; 428  |
                            17031 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            17032 ; 430  |// make lower when doing calibration
                            17033 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            17034 ; 432  |
                            17035 ; 433  |
                            17036 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            17037 ; 435  |// For FFWD and RWND
                            17038 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            17039 ; 437  |#define SECONDS_TO_SKIP 1
                            17040 ; 438  |#define SECONDS_TO_SKIP1 3
                            17041 ; 439  |#define SECONDS_TO_SKIP2 6
                            17042 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            17043 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            17044 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17045 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            17046 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17047 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            17048 ; 446  |
                            17049 ; 447  |// For audible FFW/RWD
                            17050 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            17051 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            17052 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            17053 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            17054 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17055 ; 453  |#define LEVEL1_BOUNDARY 17 
                            17056 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17057 ; 455  |#define LEVEL2_BOUNDARY 33 
                            17058 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17059 ; 457  |#define LEVEL3_BOUNDARY 50 
                            17060 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            17061 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            17062 ; 460  |// Short Song Time, songs too short to play.
                            17063 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            17064 ; 462  |
                            17065 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            17066 ; 464  |// MP3 Sync Values
                            17067 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            17068 ; 466  |// # bytes to look for sync before marking it bad
                            17069 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            17070 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            17071 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            17072 ; 470  |// once we have sync'd, the isr should be called this frequently
                            17073 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            17074 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            17075 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            17076 ; 474  |
                            17077 ; 475  |
                            17078 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            17079 ; 477  |//// Multi-Stage Volume Control Definitions
                            17080 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            17081 ; 479  |//// Use Multi-Stage Volume
                            17082 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            17083 ; 481  |
                            17084 ; 482  |//// Master Volume definitions
                            17085 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            17086 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            17087 ; 485  |
                            17088 ; 486  |//// DAC-Mode definitions
                            17089 ; 487  |//// Adjusts 0dB point
                            17090 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            17091 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            17092 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines above.
                            17093 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            17094 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provides 1.5 dB gain on Stmp34x0; 
                            17095 ; 493  |//                                               Max gain possible: 8 step diff would provide +12dB gain.   
                            17096 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            17097 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            17098 ; 496  |
                            17099 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            17100 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            17101 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                            17102 ; 500  |
                            17103 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not the default
                            17104 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoint.
                            17105 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            17106 ; 504  |
                            17107 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the default
                            17108 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            17109 ; 507  |
                            17110 ; 508  |
                            17111 ; 509  |//// Line In definitions (used for Line-In 1)
                            17112 ; 510  |//// 0dB point of the Line In
                            17113 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            17114 ; 512  |//// Minimum volume of Line In
                            17115 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            17116 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            17117 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            17118 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            17119 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            17120 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS+1)
                            17121 ; 519  |
                            17122 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            17123 ; 521  |//// 0dB point of the Line In
                            17124 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            17125 ; 523  |//// Minimum volume of Line In
                            17126 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            17127 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            17128 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            17129 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            17130 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            17131 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            17132 ; 530  |
                            17133 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            17134 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid deadlock states & recovers. 
                            17135 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            17136 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            17137 ; 535  |
                            17138 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            17139 ; 537  |////
                            17140 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            17141 ; 539  |////
                            17142 ; 540  |///
                            17143 ; 541  |#include <types.h>
                            17144 ; 542  |extern volatile WORD g_wActivityState;
                            17145 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            17146 ; 544  |
                            17147 ; 545  |void _reentrant Init5VSense(void);
                            17148 ; 546  |void _reentrant ServiceDCDC(void);
                            17149 ; 547  |
                            17150 ; 548  |////////////////////////////////////////////////////////////////////////////
                            17151 ; 549  |//// JPEG Thumbnail Mode Setting
                            17152 ; 550  |//// number of column in thumbnail mode
                            17153 ; 551  |#define THUMBNAIL_X 2           
                            17154 ; 552  |//// number of row in  thumbnail mode
                            17155 ; 553  |#define THUMBNAIL_Y 2           
                            17156 ; 554  |//// thumbnail boundary offset x
                            17157 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            17158 ; 556  |//// thumbnail boundary offset y
                            17159 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            17160 ; 558  |
                            17161 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            17162 ; 560  |
                            17163 
                            17165 
                            17166 ; 23   |
                            17167 ; 24   |#define MAX_BITMAP_SIZE 10000
                            17168 ; 25   |
                            17169 ; 26   |//comment this out to put the frame buffer in Y
                            17170 ; 27   |
                            17171 ; 28   |#ifndef LCD_X_SIZE     
                            17172 ; 29   |#define LCD_X_SIZE          98
                            17173 ; 30   |#endif
                            17174 ; 31   |
                            17175 ; 32   |#ifndef LCD_Y_SIZE
                            17176 ; 33   |#define LCD_Y_SIZE          64
                            17177 ; 34   |#endif
                            17178 ; 35   |
                            17179 ; 36   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                            17180 ; 37   |
                            17181 ; 38   |typedef union
                            17182 ; 39   |{
                            17183 ; 40   |    struct
                            17184 ; 41   |    {
                            17185 ; 42   |        INT m_Resource:21;
                            17186 ; 43   |        INT m_Type :3;
                            17187 ; 44   |    } Complex;
                            17188 ; 45   |    WORD I;
                            17189 ; 46   |} COMPLEX_RESOURCE;
                            17190 ; 47   |
                            17191 ; 48   |#define RESOURCE_TYPE_SIMPLE    0
                            17192 ; 49   |#define RESOURCE_TYPE_NESTED    1
                            17193 ; 50   |#define RESOURCE_TYPE_UNICODE   2
                            17194 ; 51   |
                            17195 ; 52   |
                            17196 ; 53   |typedef struct 
                            17197 ; 54   |{
                            17198 ; 55   |    INT m_iMaskLeft;
                            17199 ; 56   |    INT m_iMaskTop;
                            17200 ; 57   |    INT m_iMaskRight;
                            17201 ; 58   |    INT m_iMaskBottom;
                            17202 ; 59   |}   MASK;
                            17203 ; 60   |
                            17204 ; 61   |typedef struct 
                            17205 ; 62   |{
                            17206 ; 63   |    INT m_iWidth;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17207 ; 64   |    INT m_iHeight;
                            17208 ; 65   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                            17209 ; 66   |} BITMAP;
                            17210 ; 67   |
                            17211 ; 68   |
                            17212 ; 69   |typedef struct 
                            17213 ; 70   |{
                            17214 ; 71   |    INT m_iWidth;
                            17215 ; 72   |    INT m_iHeight;
                            17216 ; 73   |} BITMAPHEADER;
                            17217 ; 74   |
                            17218 ; 75   |#define DISPLAY_NORMAL  0
                            17219 ; 76   |#define DISPLAY_INVERT  1
                            17220 ; 77   |#define DISPLAY_CLEAR   2 
                            17221 ; 78   |
                            17222 ; 79   |void _reentrant DisplayInit(void);
                            17223 
                            17230 
                            17231 ; 80   |
                            17232 ; 81   |
                            17233 ; 82   |_reentrant void DisplayHandleMessage(Message *);
                            17234 ; 83   |
                            17235 ; 84   |_reentrant void DisplayUpdateDisplay(void);
                            17236 ; 85   |
                            17237 ; 86   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                            17238 ; 87   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            17239 ; 88   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            17240 ; 89   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                            17241 ; 90   |_reentrant void DisplaySetFont(INT);
                            17242 ; 91   |_reentrant void DisplayPrintBitmapAddress(INT x,INT y,BITMAP *pBitmap,INT bInvert);
                            17243 
                            17250 
                            17251 ; 92   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInvert);
                            17252 ; 93   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert);
                            17253 ; 94   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFiller    ,INT bInvert);
                            17254 ; 95   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds                   ,INT bInvert);
                            17255 ; 96   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeconds   ,INT bInvert);
                            17256 ; 97   |_reentrant void DisplaySetFont(INT iFont);
                            17257 ; 98   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                            17258 ; 99   |
                            17259 ; 100  |
                            17260 ; 101  |#endif
                            17261 
                            17263 
                            17264 ; 16   |#include "unicode.h"
                            17265 
                            17267 
                            17268 ; 1    |#ifndef UNICODE_H
                            17269 ; 2    |#define UNICODE_H
                            17270 ; 3    |
                            17271 ; 4    |//#include "displaydrv.h"
                            17272 ; 5    |
                            17273 ; 6    |// Exported functions
                            17274 ; 7    |_reentrant BITMAP *  GetUnicodeCharacterBitmap(WORD c) ;
                            17275 ; 8    |
                            17276 ; 9    |void _reentrant CLcdPrintStringAddress(WORD x, WORD y, WORD *string, WORD bInverted);
                            17277 ; 10   |#ifndef USBMSC_BUILD
                            17278 ; 11   |void _reentrant LCDSetFont(WORD fontNum);
                            17279 ; 12   |#else
                            17280 ; 13   |void LCDSetFont(WORD fontNum);
                            17281 ; 14   |#endif
                            17282 ; 15   |
                            17283 ; 16   |#endif
                            17284 
                            17286 
                            17287 ; 17   |#include "dbcs.h"
                            17288 
                            17290 
                            17291 ; 1    |#ifndef DBCS_H
                            17292 ; 2    |#define DBCS_H
                            17293 ; 3    |
                            17294 ; 4    |
                            17295 ; 5    |_reentrant void DBCSToUnicode(_packed unsigned char *pDBCS, WORD *pUnicode,INT iLength);
                            17296 ; 6    |_reentrant void DBCSToUnicodeDstXSrcY(_packed unsigned char *pDBCS, WORD _X * _X pUnicode, INT iLength);
                            17297 ; 7    |
                            17298 ; 8    |#endif
                            17299 
                            17301 
                            17302 ; 18   |
                            17303 ; 19   |
                            17304 ; 20   |
                            17305 ; 21   |
                            17306 ; 22   |
                            17307 ; 23   |#define MBC_FLAG 0x010000
                            17308 ; 24   |#define SGM_MASK 0x00ffff
                            17309 ; 25   |
                            17310 ; 26   |#define MAX_STRING 30
                            17311 ; 27   |
                            17312 ; 28   |#pragma optimize 1
                            17314 ; 29   |
                            17315 ; 30   |
                            17316 ; 31   |extern INT g_iPDM;
                            17317 ; 32   |extern INT g_iSDMS;
                            17318 ; 33   |extern WORD S_currentFont_PGM;
                            17319 ; 34   |extern WORD S_currentFont_SGMs;
                            17320 ; 35   |extern WORD S_currentFont_Scripts;
                            17321 ; 36   |extern WORD S_currentFont_Script_00;
                            17322 ; 37   |
                            17323 ; 38   |extern BYTE g_btHandlePGM;
                            17324 ; 39   |extern BYTE g_btHandleSGMs;
                            17325 ; 40   |extern BYTE g_btHandleScript00;
                            17326 ; 41   |
                            17327 ; 42   |_reentrant BITMAP * InternalGetUnicodeCharacterBitmap(WORD c);
                            17328 ; 43   |_reentrant WORD InternalGetTextWidthAddressUnicode(WORD *pUnicodeString);
                            17329 ; 44   |
                            17330 ; 45   |#ifdef FUNCLET
                            17331 ; 46   |#pragma asm
                            17332     extern SysCallFunclet
                            17333 ; 48   |#pragma endasm    
                            17334 ; 49   |#endif    
                            17335 ; 50   |
                            17336 ; 51   |void FontDummy(void)
                            17337 ; 52   |    {
                            17338 
P:0000                      17339         org     p,".ptextfont":
                            17344 FFontDummy:
                            17345 
                            17346 ; 53   |    }
                            17347 
P:0000 00000C         4    417349         rts
                            17351 
                            17352 ; 54   |
                            17353 ; 55   |/////////////////////////////////////////////////////////////////////////////////
                            17354 ; 56   |//> Name: CLcdSetFont
                            17355 ; 57   |//
                            17356 ; 58   |//  Type: Function
                            17357 ; 59   |//  Description:                Set the current font.
                            17358 ; 60   |//  Prototype:                  void _reentrant CLcdSetFont(WORD fontNum);
                            17359 ; 61   |//  Inputs:                             A = Font number (index of one of one or more possible fonts.  
                            17360 ; 62   |//                                           Indexes start at ZERO)
                            17361 ; 63   |//  Outputs: 
                            17362 ; 64   |//  Notes:              The FONT_TABLE resource has the following structure:
                            17363 ; 65   |//                                      numberOfFonts
                            17364 ; 66   |//                                      font1_PGM_resourceNumber  (or label)
                            17365 ; 67   |//                                      font1_SGMs_resourceNumber (or label)
                            17366 ; 68   |//                  font1_Scripts_rscNumber   (or label)
                            17367 ; 69   |//                  font2_PGM_rscNumber       (if present)
                            17368 ; 70   |//                  ...
                            17369 ; 71   |//<
                            17370 ; 72   |/////////////////////////////////////////////////////////////////////////////////
                            17371 ; 73   |#ifdef FUNCLET
                            17372 ; 74   |    #pragma asm
                            17373         FLCDSetFont:
                            17374 
                            17379 
                            17380         ;If using funclet, function will be executed via funclet kernel
                            17381         CallFunclet RSRC_FUNCLET_SET_FONT
P:0001 0D0080         4    817381     jsr       $80
P:0002 00019C               17381     DC       RSRC_FUNCLET_SET_FONT  ; 1 word
                            17382 
P:0000                      17383         org p,"SYSFUNCLET_SET_FONT_P":
P:0000 00019C               17384         dc      RSRC_FUNCLET_SET_FONT
                            17385 ; 87   |    #pragma endasm
                            17386 ; 88   |    #define LCDSetFont LCDSetFontFunclet
                            17387 ; 89   |#endif
                            17388 ; 90   |#ifndef USBMSC_BUILD
                            17389 ; 91   |void _reentrant LCDSetFont(WORD fontNum) {
                            17390 
                            17395 FLCDSetFontFunclet:
                            17417 
                            17418 ; 92   |#else
                            17419 ; 93   |void LCDSetFont(WORD fontNum) {
                            17420 ; 94   |#endif
                            17421 ; 95   |
                            17422 ; 96   |  // Currently allowing for up to three fonts in the table
                            17423 ; 97   |#ifndef MAX_FONTS
                            17424 ; 98   |#define MAX_FONTS 3
                            17425 ; 99   |#endif
                            17426 ; 100  |
                            17427 ; 101  |  struct {
                            17428 ; 102  |    WORD numFonts;
                            17429 ; 103  |    struct {
                            17430 ; 104  |      WORD PDM_rscNum;                  //DBCS Map (Maps DBCS->Unicode)
                            17431 ; 105  |      WORD SDMs_rscNum;
                            17432 ; 106  |      WORD PGM_rscNum;                  //Glyph Map (Maps Unicode->Glyphs)
                            17433 ; 107  |      WORD SGMs_rscNum;
                            17434 ; 108  |      WORD Script_00_rscNum;   //Glyphs (these are the images)
                            17435 ; 109  |      WORD Scripts_rscNum;
                            17436 ; 110  |    } font[MAX_FONTS];
                            17437 ; 111  |  } fontTable;
                            17438 
                            17445 
                            17446 ; 112  |
                            17447 ; 113  |
                            17448 ; 114  |  // Read the FONT_TABLE resource
                            17449 ; 115  |
                            17450 ; 116  |  SysLoadResource(RSRC_FONT_TABLE, RS_ROOT_HANDLE, RSRC_TYPE_DATA,
                            17451 ; 117  |                    (WORD *) &fontTable, TARGET_MEM_Y, sizeof(fontTable)*3);
                            17452 
P:0001 055F7C         2    217396         movec   ssh,y:(r7)+
P:0002 3F141B         2    417457         clr     b	                #20,n7
P:0003 264000         2    617461         move    #<$40,y0
P:0004 45F400 000039  3    917459         move    #>$39,x1
P:0006 44F400 000002  3   1217460         move    #>2,x0
P:0008 204F00         2   1417401         move    (r7)+n7
P:0009 045FA0         2   1617440         movec   m0,n7
P:000A 000000         2   1817440         nop             ; (inserted)
P:000B 5C6F00         4   2217442         move    a1,y:(r7+n7)
P:000C 77F400 FFFFEC  3   2517454         move    #-20,n7
P:000E 56F400 000190  3   2817458         move    #400,a
P:0010 044F10         4   3217456         lua     (r7)+n7,r0
P:0011 0BF080 rrrrrr  6   3817462         jsr     FSysLoadResource
                            17463 
                            17464 ; 118  |
                            17465 ; 119  |  if((fontNum < 0) || (fontNum > fontTable.numFonts))
                            17466 
P:0013 045FA0         2   4017468         movec   m0,n7
P:0014 000000         2   4217468         nop             ; (inserted)
P:0015 5FEF00         4   4617470         move    y:(r7+n7),b
P:0016 2B0000         2   4817471         move    #0,b2
P:0017 20000B         2   5017472         tst     b
P:0018 0AF0A9 rrrrrr  6   5617475         jlt     L3
P:001A 77F400 FFFFEC  3   5917476         move    #-20,n7
P:001C 000000         2   6117476         nop             ; (inserted)
P:001D 5EEF00         4   6517478         move    y:(r7+n7),a
P:001E 2A0000         2   6717479         move    #0,a2
P:001F 20000D         2   6917480         cmp     a,b
P:0020 0AF0AF rrrrrr  6   7517481         jle     L4
                            17482 
                            17483 ; 120  |    fontNum = 0;        //handle errors gracefully
                            17484 
                            17486 L3:
                            17487 
                            17488 ; 121  |
                            17489 ; 122  |  g_iPDM = fontTable.font[fontNum].PDM_rscNum;
                            17490 
P:0022 2F0000         2   7717486         move    #0,b
                            17492 L4:
                            17506 
                            17507 ; 123  |  g_iSDMS =     fontTable.font[fontNum].SDMs_rscNum;
                            17508 
                            17516 
                            17517 ; 124  |  S_currentFont_PGM = fontTable.font[fontNum].PGM_rscNum;
                            17518 
                            17526 
                            17527 ; 125  |  S_currentFont_SGMs = fontTable.font[fontNum].SGMs_rscNum;
                            17528 
                            17536 
                            17537 ; 126  |  S_currentFont_Script_00 = fontTable.font[fontNum].Script_00_rscNum;
                            17538 
                            17546 
                            17547 ; 127  |  S_currentFont_Scripts = fontTable.font[fontNum].Scripts_rscNum;
                            17548 
                            17556 
                            17557 ; 128  |
                            17558 ; 129  |    if(g_btHandlePGM)
                            17559 
P:0023 77F400 FFFFED  3   8017492         move    #-19,n7
P:0025 21A600         2   8217495         move    b1,y0
P:0026 044F16         4   8617494         lua     (r7)+n7,r6
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0027 47F400 000006  3   8917496         move    #>6,y1
P:0029 77F4B8 FFFFEE  3   9217497         mpy     y0,y1,b	                #-18,n7
P:002B 20002A         2   9417498         asr     b
P:002C 213E00         2   9617501         move    b0,n6
P:002D 213D00         2   9817502         move    b0,n5
P:002E 4EEE00         4  10217503         move    y:(r6+n6),y0
P:002F 044F16         4  10617512         lua     (r7)+n7,r6
P:0030 77F400 FFFFEF  3  10917520         move    #-17,n7
P:0032 4E7000 rrrrrr  3  11217505         move    y0,y:Fg_iPDM
P:0034 4EEE00         4  11617514         move    y:(r6+n6),y0
P:0035 044F16         4  12017522         lua     (r7)+n7,r6
P:0036 77F400 FFFFF0  3  12317530         move    #-16,n7
P:0038 4E7000 rrrrrr  3  12617515         move    y0,y:Fg_iSDMS
P:003A 4EEE00         4  13017524         move    y:(r6+n6),y0
P:003B 044F16         4  13417532         lua     (r7)+n7,r6
P:003C 77F400 FFFFF1  3  13717540         move    #-15,n7
P:003E 4E7000 rrrrrr  3  14017525         move    y0,y:FS_currentFont_PGM
P:0040 4EEE00         4  14417534         move    y:(r6+n6),y0
P:0041 044F16         4  14817542         lua     (r7)+n7,r6
P:0042 77F400 FFFFF2  3  15117550         move    #-14,n7
P:0044 4E7000 rrrrrr  3  15417535         move    y0,y:FS_currentFont_SGMs
P:0046 044F15         4  15817552         lua     (r7)+n7,r5
P:0047 4EEE00         4  16217544         move    y:(r6+n6),y0
P:0048 4E7000 rrrrrr  3  16517545         move    y0,y:FS_currentFont_Script_00
P:004A 4EED00         4  16917554         move    y:(r5+n5),y0
P:004B 4E7000 rrrrrr  3  17217555         move    y0,y:FS_currentFont_Scripts
P:004D 5EF000 rrrrrr  3  17517561         move    y:Fg_btHandlePGM,a
P:004F 2A0000         2  17717562         move    #0,a2
P:0050 200003         2  17917563         tst     a
P:0051 0AF0AA rrrrrr  6  18517564         jeq     L5
                            17565 
                            17566 ; 130  |    {
                            17567 ; 131  |        SysCloseResource(g_btHandlePGM);
                            17568 
P:0053 0BF080 rrrrrr  6  19117570         jsr     FSysCloseResource
                            17571 
                            17572 ; 132  |        g_btHandlePGM = 0;
                            17573 
                            17577 
                            17578 ; 133  |    }
                            17579 ; 134  |
                            17580 ; 135  |    if(g_btHandleSGMs)
                            17581 
P:0055 2F0000         2  19317575         move    #0,b
P:0056 5D7000 rrrrrr  3  19617576         move    b1,y:Fg_btHandlePGM
P:0058 5EF000 rrrrrr  3  19917583 L5:     move    y:Fg_btHandleSGMs,a
P:005A 2A0000         2  20117584         move    #0,a2
P:005B 200003         2  20317585         tst     a
P:005C 0AF0AA rrrrrr  6  20917586         jeq     L6
                            17587 
                            17588 ; 136  |    {
                            17589 ; 137  |        SysCloseResource(g_btHandleSGMs);
                            17590 
P:005E 0BF080 rrrrrr  6  21517592         jsr     FSysCloseResource
                            17593 
                            17594 ; 138  |        g_btHandleSGMs = 0;
                            17595 
                            17599 
                            17600 ; 139  |    }
                            17601 ; 140  |    
                            17602 ; 141  |    if(g_btHandleScript00)
                            17603 
P:0060 2F0000         2  21717597         move    #0,b
P:0061 5D7000 rrrrrr  3  22017598         move    b1,y:Fg_btHandleSGMs
P:0063 5EF000 rrrrrr  3  22317605 L6:     move    y:Fg_btHandleScript00,a
P:0065 2A0000         2  22517606         move    #0,a2
P:0066 200003         2  22717607         tst     a
P:0067 0AF0AA rrrrrr  6  23317608         jeq     L7
                            17609 
                            17610 ; 142  |    {
                            17611 ; 143  |        SysCloseResource(g_btHandleScript00);
                            17612 
P:0069 0BF080 rrrrrr  6  23917614         jsr     FSysCloseResource
                            17615 
                            17616 ; 144  |        g_btHandleScript00 = 0;
                            17617 
                            17621 
                            17622 ; 145  |    }
                            17623 
P:006B 2E0000         2  24117619         move    #0,a
P:006C 5C7000 rrrrrr  3  24417620         move    a1,y:Fg_btHandleScript00
                            17625 L7:
                            17626 
                            17627 ; 146  |    
                            17628 ; 147  |}
                            17629 
P:006E 77F400 FFFFEB  3  24717631         move    #-21,n7
P:0070 000000         2  24917631         nop             ; (inserted)
P:0071 05EF7C         4  25317633         movec   y:(r7+n7),ssh
P:0072 204F00         2  25517635         move    (r7)+n7
P:0073 00000C         4  25917637         rts
                            17639 
                            17640 ; 148  |
                            17641 ; 149  |#ifdef FUNCLET
                            17642 ; 150  |    #pragma asm
                            17643         ;The name of the following counter is the concatenation of the string ;".ptext" and the name of the C source file.
P:0003                      17644             org p,".ptextfont":
                            17645 ; 153  |    #pragma endasm
                            17646 ; 154  |#endif
                            17647 ; 155  |
                            17648 ; 156  |
                            17649 ; 157  |#ifdef FUNCLET
                            17650 ; 158  |    #pragma asm
                            17651         FGetTextWidthAddressUnicode:
                            17652 
                            17657 
                            17658         ;If using funclet, function will be executed via funclet kernel
                            17659         CallFunclet RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE
P:0003 0D0080         4   1217659     jsr       $80
P:0004 00019D               17659     DC       RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE  ; 1 word
                            17660 
P:0000                      17661         org p,"SYSFUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE_P":
P:0000 00019D               17662         dc      RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE
                            17663 ; 171  |    #pragma endasm
                            17664 ; 172  |    #define GetTextWidthAddressUnicode GetTextWidthAddressUnicodeFunclet
                            17665 ; 173  |#endif
                            17666 ; 174  |_reentrant INT GetTextWidthAddressUnicode(WORD *pUnicodeString)
                            17667 ; 175  |{
                            17668 
                            17675 FGetTextWidthAddressUnicodeFunclet:
                            17681 
                            17682 ; 176  |    return InternalGetTextWidthAddressUnicode(pUnicodeString);
                            17683 
P:0001 055F7C         2    217676         movec   ssh,y:(r7)+
P:0002 0BF080 rrrrrr  6    817685         jsr     FInternalGetTextWidthAddressUnicode
                            17688 
                            17689 ; 177  |}
                            17690 
P:0004 05FF7C         4   1217692         movec   y:-(r7),ssh
P:0005 218E00         2   1417687         move    a1,a
P:0006 00000C         4   1817696         rts
                            17698 
                            17699 ; 178  |
                            17700 ; 179  |#ifdef FUNCLET
                            17701 ; 180  |    #pragma asm
                            17702         ;The name of the following counter is the concatenation of the string ;".ptext" and the name of the C source file.
P:0005                      17703             org p,".ptextfont":
                            17704 ; 183  |    #pragma endasm
                            17705 ; 184  |#endif
                            17706 ; 185  |
                            17707 ; 186  |#ifdef FUNCLET
                            17708 ; 187  |    #pragma asm
                            17709         FGetTextWidthResourceUnicode:
                            17710 
                            17715 
                            17716         ;If using funclet, function will be executed via funclet kernel
                            17717         CallFunclet RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE
P:0005 0D0080         4   1617717     jsr       $80
P:0006 00019E               17717     DC       RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE  ; 1 word
                            17718 
P:0000                      17719         org p,"SYSFUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE_P":
P:0000 00019E               17720         dc      RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE
                            17721 ; 200  |    #pragma endasm
                            17722 ; 201  |    #define GetTextWidthResourceUnicode GetTextWidthResourceUnicodeFunclet
                            17723 ; 202  |#endif
                            17724 ; 203  |_reentrant INT GetTextWidthResourceUnicode(WORD wResource)
                            17725 ; 204  |{
                            17726 
                            17731 FGetTextWidthResourceUnicodeFunclet:
                            17742 
                            17743 ; 205  |    WORD StringBuffer[MAX_STRING+1];
                            17744 ; 206  |    WORD *pUnicodeString = StringBuffer;
                            17745 
                            17760 
                            17761 ; 207  |    INT x=0;
                            17762 ; 208  |    BITMAP *pBITMAP;
                            17763 ; 209  |    //load up the unicode string
                            17764 ; 210  |
                            17765 ; 211  |    SysLoadResource(wResource, RS_ROOT_HANDLE, RSRC_TYPE_STRING, StringBuffer,
                            17766 ; 212  |                        TARGET_MEM_Y, MAX_STRING);
                            17767 
P:0001 055F7C         2    217732         movec   ssh,y:(r7)+
P:0002 3F201B         2    417769         clr     b	                #32,n7
P:0003 22F000         2    617747         move    r7,r0
P:0004 264000         2    817772         move    #<$40,y0
P:0005 45F400 00001E  3   1117770         move    #>30,x1
P:0007 44F400 000001  3   1417771         move    #>1,x0
P:0009 204F00         2   1617748         move    (r7)+n7
P:000A 045FA0         2   1817750         movec   m0,n7
P:000B 000000         2   2017750         nop             ; (inserted)
P:000C 686F00         4   2417752         move    r0,y:(r7+n7)
P:000D 0BF080 rrrrrr  6   3017773         jsr     FSysLoadResource
                            17775 
                            17776 ; 213  |
                            17777 ; 214  |    StringBuffer[MAX_STRING]=0;
                            17778 
                            17784 
                            17785 ; 215  |    return InternalGetTextWidthAddressUnicode(pUnicodeString);
                            17786 
P:000F 77F400 FFFFFE  3   3317781         move    #-2,n7
P:0011 290000         2   3517780         move    #0,b0
P:0012 596F00         4   3917783         move    b0,y:(r7+n7)
P:0013 045FA0         2   4117788         movec   m0,n7
P:0014 000000         2   4317788         nop             ; (inserted)
P:0015 68EF00         4   4717790         move    y:(r7+n7),r0
P:0016 0BF080 rrrrrr  6   5317791         jsr     FInternalGetTextWidthAddressUnicode
                            17796 
                            17797 ; 216  |}
                            17798 
P:0018 77F400 FFFFDF  3   5617800         move    #-33,n7
P:001A 218E00         2   5817795         move    a1,a
P:001B 05EF7C         4   6217802         movec   y:(r7+n7),ssh
P:001C 204F00         2   6417804         move    (r7)+n7
P:001D 00000C         4   6817806         rts
                            17808 
                            17809 ; 217  |
                            17810 ; 218  |#ifdef FUNCLET
                            17811 ; 219  |    #pragma asm
                            17812         ;The name of the following counter is the concatenation of the string ;".ptext" and the name of the C source file.
P:0007                      17813             org p,".ptextfont":
                            17814 ; 222  |    #pragma endasm
                            17815 ; 223  |#endif
                            17816 ; 224  |
                            17817 ; 225  |
                            17818 ; 226  |
                            17819 ; 227  |
                            17820 ; 228  |#ifdef FUNCLET
                            17821 ; 229  |    #pragma asm
                            17822         FGetTextWidthAddressDBCS:
                            17823 
                            17828 
                            17829         ;If using funclet, function will be executed via funclet kernel
                            17830         CallFunclet RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS
P:0007 0D0080         4   2017830     jsr       $80
P:0008 00019F               17830     DC       RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS  ; 1 word
                            17831 
P:0000                      17832         org p,"SYSFUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS_P":
P:0000 00019F               17833         dc      RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS
                            17834 ; 242  |    #pragma endasm
                            17835 ; 243  |    #define GetTextWidthAddressDBCS GetTextWidthAddressDBCSFunclet
                            17836 ; 244  |#endif
                            17837 ; 245  |_reentrant INT GetTextWidthAddressDBCS(_packed unsigned char *pDBCSString)
                            17838 ; 246  |{
                            17839 
                            17846 FGetTextWidthAddressDBCSFunclet:
                            17856 
                            17857 ; 247  |    WORD StringBuffer[MAX_STRING+1];
                            17858 ; 248  |    WORD *pUnicodeString=StringBuffer;
                            17859 
                            17872 
                            17873 ; 249  |    BITMAP *pBITMAP;
                            17874 ; 250  |    INT x=0;
                            17875 ; 251  |    DBCSToUnicode(pDBCSString,StringBuffer,MAX_STRING);
                            17876 
P:0001 055F7C         2    217847         movec   ssh,y:(r7)+
P:0002 3F2000         2    417850         move    #32,n7
P:0003 22F400         2    617861         move    r7,r4
P:0004 56F400 00001E  3    917878         move    #>30,a
P:0006 204F00         2   1117862         move    (r7)+n7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                                                                                                                                                       Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0007 045FA0         2   1317864         movec   m0,n7
P:0008 000000         2   1517864         nop             ; (inserted)
P:0009 6C6F00         4   1917866         move    r4,y:(r7+n7)
P:000A 0BF080 rrrrrr  6   2517879         jsr     FDBCSToUnicode
                            17881 
                            17882 ; 252  |    StringBuffer[MAX_STRING]=0;
                            17883 
                            17889 
                            17890 ; 253  |    return InternalGetTextWidthAddressUnicode(pUnicodeString);
                            17891 
P:000C 77F400 FFFFFE  3   2817886         move    #-2,n7
P:000E 290000         2   3017885         move    #0,b0
P:000F 596F00         4   3417888         move    b0,y:(r7+n7)
P:0010 045FA0         2   3617893         movec   m0,n7
P:0011 000000         2   3817893         nop             ; (inserted)
P:0012 68EF00         4   4217895         move    y:(r7+n7),r0
P:0013 0BF080 rrrrrr  6   4817896         jsr     FInternalGetTextWidthAddressUnicode
                            17901 
                            17902 ; 254  |}
                            17903 
P:0015 77F400 FFFFDF  3   5117905         move    #-33,n7
P:0017 218E00         2   5317900         move    a1,a
P:0018 05EF7C         4   5717907         movec   y:(r7+n7),ssh
P:0019 204F00         2   5917909         move    (r7)+n7
P:001A 00000C         4   6317911         rts
                            17913 
                            17914 ; 255  |
                            17915 ; 256  |#ifdef FUNCLET
                            17916 ; 257  |    #pragma asm
                            17917         ;The name of the following counter is the concatenation of the string ;".ptext" and the name of the C source file.
P:0009                      17918             org p,".ptextfont":
                            17919 ; 260  |    #pragma endasm
                            17920 ; 261  |#endif
                            17921 ; 262  |
                            17922 ; 263  |#ifdef FUNCLET
                            17923 ; 264  |    #pragma asm
                            17924         FGetTextWidthResourceDBCS:
                            17925 
                            17930 
                            17931         ;If using funclet, function will be executed via funclet kernel
                            17932         CallFunclet RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS
P:0009 0D0080         4   2417932     jsr       $80
P:000A 0001A0               17932     DC       RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS  ; 1 word
                            17933 
P:0000                      17934         org p,"SYSFUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS_P":
P:0000 0001A0               17935         dc      RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS
                            17936 ; 277  |    #pragma endasm
                            17937 ; 278  |    #define GetTextWidthResourceDBCS GetTextWidthResourceDBCSFunclet
                            17938 ; 279  |#endif
                            17939 ; 280  |_reentrant INT GetTextWidthResourceDBCS(WORD wResource)
                            17940 ; 281  |{
                            17941 
                            17946 FGetTextWidthResourceDBCSFunclet:
                            17956 
                            17957 ; 282  |    WORD StringBuffer[MAX_STRING+1];
                            17958 ; 283  |    WORD *pUnicodeString= StringBuffer;
                            17959 
                            17972 
                            17973 ; 284  |    INT x=0;
                            17974 ; 285  |    BITMAP *pBITMAP;
                            17975 ; 286  |
                            17976 ; 287  |    //load up the unicode string
                            17977 ; 288  |
                            17978 ; 289  |    SysLoadResource(wResource, RS_ROOT_HANDLE, RSRC_TYPE_STRING, (WORD *)g_wUserScratchY,
                            17979 ; 290  |                        TARGET_MEM_Y, MAX_STRING);
                            17980 
P:0001 055F7C         2    217947         movec   ssh,y:(r7)+
P:0002 3F201B         2    417984         clr     b	                #32,n7
P:0003 60F400 rrrrrr  3    717982         move    #Fg_wUserScratchY,r0
P:0005 22F500         2    917961         move    r7,r5
P:0006 264000         2   1117985         move    #<$40,y0
P:0007 45F400 00001E  3   1417983         move    #>30,x1
P:0009 44F400 000001  3   1717986         move    #>1,x0
P:000B 204F00         2   1917962         move    (r7)+n7
P:000C 045FA0         2   2117964         movec   m0,n7
P:000D 000000         2   2317964         nop             ; (inserted)
P:000E 6D6F00         4   2717966         move    r5,y:(r7+n7)
P:000F 0BF080 rrrrrr  6   3317987         jsr     FSysLoadResource
                            17989 
                            17990 ; 291  |
                            17991 ; 292  |    DBCSToUnicode((_packed unsigned char*)g_wUserScratchY,StringBuffer,MAX_STRING);
                            17992 
P:0011 77F400 FFFFE0  3   3617994         move    #-32,n7
P:0013 60F400 rrrrrr  3   3917997         move    #Fg_wUserScratchY,r0
P:0015 044F14         4   4317996         lua     (r7)+n7,r4
P:0016 56F400 00001E  3   4617998         move    #>30,a
P:0018 0BF080 rrrrrr  6   5217999         jsr     FDBCSToUnicode
                            18000 
                            18001 ; 293  |
                            18002 ; 294  |    StringBuffer[MAX_STRING]=0;
                            18003 
                            18009 
                            18010 ; 295  |    return InternalGetTextWidthAddressUnicode(pUnicodeString);
                            18011 
P:001A 77F41B FFFFFE  3   5518005         clr     b	                #-2,n7
P:001C 000000         2   5718005         nop             ; (inserted)
P:001D 5D6F00         4   6118008         move    b1,y:(r7+n7)
P:001E 045FA0         2   6318013         movec   m0,n7
P:001F 000000         2   6518013         nop             ; (inserted)
P:0020 68EF00         4   6918015         move    y:(r7+n7),r0
P:0021 0BF080 rrrrrr  6   7518016         jsr     FInternalGetTextWidthAddressUnicode
                            18021 
                            18022 ; 296  |}
                            18023 
P:0023 77F400 FFFFDF  3   7818025         move    #-33,n7
P:0025 218E00         2   8018020         move    a1,a
P:0026 05EF7C         4   8418027         movec   y:(r7+n7),ssh
P:0027 204F00         2   8618029         move    (r7)+n7
P:0028 00000C         4   9018031         rts
                            18033 
                            18034 ; 297  |
                            18035 ; 298  |#ifdef FUNCLET
                            18036 ; 299  |    #pragma asm
                            18037         ;The name of the following counter is the concatenation of the string ;".ptext" and the name of the C source file.
P:000B                      18038             org p,".ptextfont":
                            18039 ; 302  |    #pragma endasm
                            18040 ; 303  |#endif
                            18041 ; 304  |
                            18042 ; 305  |
                            18043 ; 306  |#ifdef FUNCLET
                            18044 ; 307  |    #pragma asm
                            18045         FGetUnicodeCharacterBitmap:
                            18046 
                            18051 
                            18052         ;If using funclet, function will be executed via funclet kernel
                            18053         CallFunclet RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP
P:000B 0D0080         4   2818053     jsr       $80
P:000C 000057               18053     DC       RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP  ; 1 word
                            18054 
P:0000                      18055         org p,"SYSFUNCLET_GetUnicodeCharacterBitmap_P":
P:0000 000057               18056         dc      RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP
                            18057 ; 320  |    #pragma endasm
                            18058 ; 321  |    #define GetUnicodeCharacterBitmap GetUnicodeCharacterBitmapFunclet
                            18059 ; 322  |#endif
                            18060 ; 323  |_reentrant BITMAP *  GetUnicodeCharacterBitmap(WORD c) 
                            18061 ; 324  |{
                            18062 
                            18067 FGetUnicodeCharacterBitmapFunclet:
                            18073 
                            18074 ; 325  |    return InternalGetUnicodeCharacterBitmap(c);
                            18075 
P:0001 055F7C         2    218068         movec   ssh,y:(r7)+
P:0002 0BF080 rrrrrr  6    818077         jsr     FInternalGetUnicodeCharacterBitmap
                            18079 
                            18080 ; 326  |}
                            18081 
P:0004 05FF7C         4   1218083         movec   y:-(r7),ssh
P:0005 000000         2   1418083         nop             ; (inserted)
P:0006 00000C         4   1818087         rts
                            18089 
                            18090 ; 327  |
                            18091 ; 328  |#ifdef FUNCLET
                            18092 ; 329  |    #pragma asm
                            18093         ;The name of the following counter is the concatenation of the string ;".ptext" and the name of the C source file.
P:000D                      18094             org p,".ptextfont":
                            18095 ; 332  |    #pragma endasm
                            18096 ; 333  |#endif
                            18097 
                            18120 
                            18121         extern  FDBCSToUnicode, FInternalGetTextWidthAddressUnicode
                            18122         extern  FInternalGetUnicodeCharacterBitmap, y:FS_currentFont_PGM
                            18123         extern  y:FS_currentFont_SGMs, y:FS_currentFont_Script_00
                            18124         extern  y:FS_currentFont_Scripts, FSysCloseResource
                            18125         extern  FSysLoadResource, y:Fg_btHandlePGM, y:Fg_btHandleSGMs
                            18126         extern  y:Fg_btHandleScript00, y:Fg_iPDM, y:Fg_iSDMS
                            18127         extern  y:Fg_wUserScratchY
                            18128 
                            18129         global  FFontDummy, FGetTextWidthAddressDBCSFunclet
                            18130         global  FGetTextWidthAddressUnicodeFunclet
                            18131         global  FGetTextWidthResourceDBCSFunclet
                            18132         global  FGetTextWidthResourceUnicodeFunclet
                            18133         global  FGetUnicodeCharacterBitmapFunclet, FLCDSetFontFunclet
                            18134 
                            18135         local   L3, L4, L5, L6, L7
                            18136 
                            18137         calls   "GetTextWidthAddressDBCSFunclet", "DBCSToUnicode"
                            18138         calls   "GetTextWidthAddressDBCSFunclet", "InternalGetTextWidthAddressUnicode"
                            18139         calls   "GetTextWidthAddressUnicodeFunclet", "InternalGetTextWidthAddressUnicode"
                            18140         calls   "GetTextWidthResourceDBCSFunclet", "DBCSToUnicode"
                            18141         calls   "GetTextWidthResourceDBCSFunclet", "InternalGetTextWidthAddressUnicode"
                            18142         calls   "GetTextWidthResourceDBCSFunclet", "SysLoadResource"
                            18143         calls   "GetTextWidthResourceUnicodeFunclet", "InternalGetTextWidthAddressUnicode"
                            18144         calls   "GetTextWidthResourceUnicodeFunclet", "SysLoadResource"
                            18145         calls   "GetUnicodeCharacterBitmapFunclet", "InternalGetUnicodeCharacterBitmap"
                            18146         calls   "LCDSetFontFunclet", "SysCloseResource", "SysLoadResource"
                            18147 
