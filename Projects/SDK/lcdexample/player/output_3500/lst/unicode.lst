TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfd117b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;      unicode.c:
                               96 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                               97 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                               98 ; 3    |//
                               99 ; 4    |// Filename: LcdPrintString.c
                              100 ; 5    |// Description: Routines for display of text
                              101 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                              102 ; 7    |
                              103 ; 8    |#include "types.h"
                              104 
                              106 
                              107 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              108 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              109 ; 3    |//
                              110 ; 4    |// Filename: types.h
                              111 ; 5    |// Description: Standard data types
                              112 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              113 ; 7    |
                              114 ; 8    |#ifndef _TYPES_H
                              115 ; 9    |#define _TYPES_H
                              116 ; 10   |
                              117 ; 11   |// TODO:  move this outta here!
                              118 ; 12   |#if !defined(NOERROR)
                              119 ; 13   |#define NOERROR 0
                              120 ; 14   |#define SUCCESS 0
                              121 ; 15   |#endif 
                              122 ; 16   |#if !defined(SUCCESS)
                              123 ; 17   |#define SUCCESS  0
                              124 ; 18   |#endif
                              125 ; 19   |#if !defined(ERROR)
                              126 ; 20   |#define ERROR   -1
                              127 ; 21   |#endif
                              128 ; 22   |#if !defined(FALSE)
                              129 ; 23   |#define FALSE 0
                              130 ; 24   |#endif
                              131 ; 25   |#if !defined(TRUE)
                              132 ; 26   |#define TRUE  1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 27   |#endif
                              134 ; 28   |
                              135 ; 29   |#if !defined(NULL)
                              136 ; 30   |#define NULL 0
                              137 ; 31   |#endif
                              138 ; 32   |
                              139 ; 33   |#define MAX_INT     0x7FFFFF
                              140 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              141 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              142 ; 36   |#define MAX_ULONG   (-1) 
                              143 ; 37   |
                              144 ; 38   |#define WORD_SIZE   24              // word size in bits
                              145 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              146 ; 40   |
                              147 ; 41   |
                              148 ; 42   |#define BYTE    unsigned char       // btVarName
                              149 ; 43   |#define CHAR    signed char         // cVarName
                              150 ; 44   |#define USHORT  unsigned short      // usVarName
                              151 ; 45   |#define SHORT   unsigned short      // sVarName
                              152 ; 46   |#define WORD    unsigned int        // wVarName
                              153 ; 47   |#define INT     signed int          // iVarName
                              154 ; 48   |#define DWORD   unsigned long       // dwVarName
                              155 ; 49   |#define LONG    signed long         // lVarName
                              156 ; 50   |#define BOOL    unsigned int        // bVarName
                              157 ; 51   |#define FRACT   _fract              // frVarName
                              158 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              159 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              160 ; 54   |#define FLOAT   float               // fVarName
                              161 ; 55   |#define DBL     double              // dVarName
                              162 ; 56   |#define ENUM    enum                // eVarName
                              163 ; 57   |#define CMX     _complex            // cmxVarName
                              164 ; 58   |typedef WORD UCS3;                   // 
                              165 ; 59   |
                              166 ; 60   |#define UINT16  unsigned short
                              167 ; 61   |#define UINT8   unsigned char   
                              168 ; 62   |#define UINT32  unsigned long
                              169 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              170 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              171 ; 65   |#define WCHAR   UINT16
                              172 ; 66   |
                              173 ; 67   |//UINT128 is 16 bytes or 6 words
                              174 ; 68   |typedef struct UINT128_3500 {   
                              175 ; 69   |    int val[6];     
                              176 ; 70   |} UINT128_3500;
                              177 ; 71   |
                              178 ; 72   |#define UINT128   UINT128_3500
                              179 ; 73   |
                              180 ; 74   |// Little endian word packed byte strings:   
                              181 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              182 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              183 ; 77   |// Little endian word packed byte strings:   
                              184 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              185 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              186 ; 80   |
                              187 ; 81   |// Declare Memory Spaces To Use When Coding
                              188 ; 82   |// A. Sector Buffers
                              189 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              190 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              191 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              192 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              193 
                              195 
                              196 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              197 ; 88   |// B. Media DDI Memory
                              198 ; 89   |#define MEDIA_DDI_MEM _Y
                              199 ; 90   |
                              200 ; 91   |
                              201 ; 92   |
                              202 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              203 ; 94   |// Examples of circular pointers:
                              204 ; 95   |//    INT CIRC cpiVarName
                              205 ; 96   |//    DWORD CIRC cpdwVarName
                              206 ; 97   |
                              207 ; 98   |#define RETCODE INT                 // rcVarName
                              208 ; 99   |
                              209 ; 100  |// generic bitfield structure
                              210 ; 101  |struct Bitfield {
                              211 ; 102  |    unsigned int B0  :1;
                              212 ; 103  |    unsigned int B1  :1;
                              213 ; 104  |    unsigned int B2  :1;
                              214 ; 105  |    unsigned int B3  :1;
                              215 ; 106  |    unsigned int B4  :1;
                              216 ; 107  |    unsigned int B5  :1;
                              217 ; 108  |    unsigned int B6  :1;
                              218 ; 109  |    unsigned int B7  :1;
                              219 ; 110  |    unsigned int B8  :1;
                              220 ; 111  |    unsigned int B9  :1;
                              221 ; 112  |    unsigned int B10 :1;
                              222 ; 113  |    unsigned int B11 :1;
                              223 ; 114  |    unsigned int B12 :1;
                              224 ; 115  |    unsigned int B13 :1;
                              225 ; 116  |    unsigned int B14 :1;
                              226 ; 117  |    unsigned int B15 :1;
                              227 ; 118  |    unsigned int B16 :1;
                              228 ; 119  |    unsigned int B17 :1;
                              229 ; 120  |    unsigned int B18 :1;
                              230 ; 121  |    unsigned int B19 :1;
                              231 ; 122  |    unsigned int B20 :1;
                              232 ; 123  |    unsigned int B21 :1;
                              233 ; 124  |    unsigned int B22 :1;
                              234 ; 125  |    unsigned int B23 :1;
                              235 ; 126  |};
                              236 ; 127  |
                              237 ; 128  |union BitInt {
                              238 ; 129  |        struct Bitfield B;
                              239 ; 130  |        int        I;
                              240 ; 131  |};
                              241 ; 132  |
                              242 ; 133  |#define MAX_MSG_LENGTH 10
                              243 ; 134  |struct CMessage
                              244 ; 135  |{
                              245 ; 136  |        unsigned int m_uLength;
                              246 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              247 ; 138  |};
                              248 ; 139  |
                              249 ; 140  |typedef struct {
                              250 ; 141  |    WORD m_wLength;
                              251 ; 142  |    WORD m_wMessage;
                              252 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              253 ; 144  |} Message;
                              254 ; 145  |
                              255 ; 146  |struct MessageQueueDescriptor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 147  |{
                              257 ; 148  |        int *m_pBase;
                              258 ; 149  |        int m_iModulo;
                              259 ; 150  |        int m_iSize;
                              260 ; 151  |        int *m_pHead;
                              261 ; 152  |        int *m_pTail;
                              262 ; 153  |};
                              263 ; 154  |
                              264 ; 155  |struct ModuleEntry
                              265 ; 156  |{
                              266 ; 157  |    int m_iSignaledEventMask;
                              267 ; 158  |    int m_iWaitEventMask;
                              268 ; 159  |    int m_iResourceOfCode;
                              269 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              270 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              271 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              272 ; 163  |    int m_uTimeOutHigh;
                              273 ; 164  |    int m_uTimeOutLow;
                              274 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              275 ; 166  |};
                              276 ; 167  |
                              277 ; 168  |union WaitMask{
                              278 ; 169  |    struct B{
                              279 ; 170  |        unsigned int m_bNone     :1;
                              280 ; 171  |        unsigned int m_bMessage  :1;
                              281 ; 172  |        unsigned int m_bTimer    :1;
                              282 ; 173  |        unsigned int m_bButton   :1;
                              283 ; 174  |    } B;
                              284 ; 175  |    int I;
                              285 ; 176  |} ;
                              286 ; 177  |
                              287 ; 178  |
                              288 ; 179  |struct Button {
                              289 ; 180  |        WORD wButtonEvent;
                              290 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              291 ; 182  |};
                              292 ; 183  |
                              293 ; 184  |struct Message {
                              294 ; 185  |        WORD wMsgLength;
                              295 ; 186  |        WORD wMsgCommand;
                              296 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              297 ; 188  |};
                              298 ; 189  |
                              299 ; 190  |union EventTypes {
                              300 ; 191  |        struct CMessage msg;
                              301 ; 192  |        struct Button Button ;
                              302 ; 193  |        struct Message Message;
                              303 ; 194  |};
                              304 ; 195  |
                              305 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              306 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              307 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              308 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              309 ; 200  |
                              310 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              311 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              312 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              313 ; 204  |
                              314 ; 205  |#if DEBUG
                              315 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              316 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              317 ; 208  |#else 
                              318 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              319 ; 210  |#define DebugBuildAssert(x)    
                              320 ; 211  |#endif
                              321 ; 212  |
                              322 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              323 ; 214  |//  #pragma asm
                              324 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              325 ; 216  |//  #pragma endasm
                              326 ; 217  |
                              327 ; 218  |
                              328 ; 219  |#ifdef COLOR_262K
                              329 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              330 ; 221  |#elif defined(COLOR_65K)
                              331 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              332 ; 223  |#else
                              333 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              334 ; 225  |#endif
                              335 ; 226  |    
                              336 ; 227  |#endif // #ifndef _TYPES_H
                              337 
                              339 
                              340 ; 9    |#include "displaydrv.h"
                              341 
                              343 
                              344 ; 1    |///////////////////////////////////////////////////////////////////////////////
                              345 ; 2    |///
                              346 ; 3    |/// Filename: displaydrv.h
                              347 ; 4    |/// Description: Prototypes for the display driver files.
                              348 ; 5    |///
                              349 ; 6    |///
                              350 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                              351 ; 8    |///
                              352 ; 9    |/// SigmaTel, Inc.
                              353 ; 10   |/// Proprietary  Confidential
                              354 ; 11   |///
                              355 ; 12   |/// This source code and the algorithms implemented therein constitute
                              356 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                              357 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                              358 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                              359 ; 16   |/// source code was originally received.
                              360 ; 17   |///
                              361 ; 18   |///////////////////////////////////////////////////////////////////////////////
                              362 ; 19   |#ifndef __DISPLAY_H
                              363 ; 20   |#define __DISPLAY_H
                              364 ; 21   |
                              365 ; 22   |#include "project.h"
                              366 
                              368 
                              369 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              370 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              371 ; 3    |//  Filename: project.inc
                              372 ; 4    |//  Description: 
                              373 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              374 ; 6    |
                              375 ; 7    |#if (!defined(_PROJECT_INC))
                              376 ; 8    |#define _PROJECT_INC 1
                              377 ; 9    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              378 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              379 ; 11   |#include "hwequ.h"
                              380 
                              382 
                              383 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              384 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                              385 ; 3    |//  File        : hwequ.inc
                              386 ; 4    |//  Description : STMP Hardware Constants
                              387 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              388 ; 6    |
                              389 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                              390 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                              391 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                              392 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                              393 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                              394 ; 12   |
                              395 ; 13   |#if (!defined(HWEQU_INC))
                              396 ; 14   |#define HWEQU_INC 1
                              397 ; 15   |
                              398 ; 16   |#include "types.h"
                              399 
                              401 
                              402 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              403 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              404 ; 3    |//
                              405 ; 4    |// Filename: types.h
                              406 ; 5    |// Description: Standard data types
                              407 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              408 ; 7    |
                              409 ; 8    |#ifndef _TYPES_H
                              410 ; 9    |#define _TYPES_H
                              411 ; 10   |
                              412 ; 11   |// TODO:  move this outta here!
                              413 ; 12   |#if !defined(NOERROR)
                              414 ; 13   |#define NOERROR 0
                              415 ; 14   |#define SUCCESS 0
                              416 ; 15   |#endif 
                              417 ; 16   |#if !defined(SUCCESS)
                              418 ; 17   |#define SUCCESS  0
                              419 ; 18   |#endif
                              420 ; 19   |#if !defined(ERROR)
                              421 ; 20   |#define ERROR   -1
                              422 ; 21   |#endif
                              423 ; 22   |#if !defined(FALSE)
                              424 ; 23   |#define FALSE 0
                              425 ; 24   |#endif
                              426 ; 25   |#if !defined(TRUE)
                              427 ; 26   |#define TRUE  1
                              428 ; 27   |#endif
                              429 ; 28   |
                              430 ; 29   |#if !defined(NULL)
                              431 ; 30   |#define NULL 0
                              432 ; 31   |#endif
                              433 ; 32   |
                              434 ; 33   |#define MAX_INT     0x7FFFFF
                              435 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              436 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              437 ; 36   |#define MAX_ULONG   (-1) 
                              438 ; 37   |
                              439 ; 38   |#define WORD_SIZE   24              // word size in bits
                              440 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              441 ; 40   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              442 ; 41   |
                              443 ; 42   |#define BYTE    unsigned char       // btVarName
                              444 ; 43   |#define CHAR    signed char         // cVarName
                              445 ; 44   |#define USHORT  unsigned short      // usVarName
                              446 ; 45   |#define SHORT   unsigned short      // sVarName
                              447 ; 46   |#define WORD    unsigned int        // wVarName
                              448 ; 47   |#define INT     signed int          // iVarName
                              449 ; 48   |#define DWORD   unsigned long       // dwVarName
                              450 ; 49   |#define LONG    signed long         // lVarName
                              451 ; 50   |#define BOOL    unsigned int        // bVarName
                              452 ; 51   |#define FRACT   _fract              // frVarName
                              453 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              454 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              455 ; 54   |#define FLOAT   float               // fVarName
                              456 ; 55   |#define DBL     double              // dVarName
                              457 ; 56   |#define ENUM    enum                // eVarName
                              458 ; 57   |#define CMX     _complex            // cmxVarName
                              459 ; 58   |typedef WORD UCS3;                   // 
                              460 ; 59   |
                              461 ; 60   |#define UINT16  unsigned short
                              462 ; 61   |#define UINT8   unsigned char   
                              463 ; 62   |#define UINT32  unsigned long
                              464 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              465 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              466 ; 65   |#define WCHAR   UINT16
                              467 ; 66   |
                              468 ; 67   |//UINT128 is 16 bytes or 6 words
                              469 ; 68   |typedef struct UINT128_3500 {   
                              470 ; 69   |    int val[6];     
                              471 ; 70   |} UINT128_3500;
                              472 ; 71   |
                              473 ; 72   |#define UINT128   UINT128_3500
                              474 ; 73   |
                              475 ; 74   |// Little endian word packed byte strings:   
                              476 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              477 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              478 ; 77   |// Little endian word packed byte strings:   
                              479 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              480 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              481 ; 80   |
                              482 ; 81   |// Declare Memory Spaces To Use When Coding
                              483 ; 82   |// A. Sector Buffers
                              484 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              485 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              486 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              487 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              488 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              489 ; 88   |// B. Media DDI Memory
                              490 ; 89   |#define MEDIA_DDI_MEM _Y
                              491 ; 90   |
                              492 ; 91   |
                              493 ; 92   |
                              494 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              495 ; 94   |// Examples of circular pointers:
                              496 ; 95   |//    INT CIRC cpiVarName
                              497 ; 96   |//    DWORD CIRC cpdwVarName
                              498 ; 97   |
                              499 ; 98   |#define RETCODE INT                 // rcVarName
                              500 ; 99   |
                              501 ; 100  |// generic bitfield structure
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              502 ; 101  |struct Bitfield {
                              503 ; 102  |    unsigned int B0  :1;
                              504 ; 103  |    unsigned int B1  :1;
                              505 ; 104  |    unsigned int B2  :1;
                              506 ; 105  |    unsigned int B3  :1;
                              507 ; 106  |    unsigned int B4  :1;
                              508 ; 107  |    unsigned int B5  :1;
                              509 ; 108  |    unsigned int B6  :1;
                              510 ; 109  |    unsigned int B7  :1;
                              511 ; 110  |    unsigned int B8  :1;
                              512 ; 111  |    unsigned int B9  :1;
                              513 ; 112  |    unsigned int B10 :1;
                              514 ; 113  |    unsigned int B11 :1;
                              515 ; 114  |    unsigned int B12 :1;
                              516 ; 115  |    unsigned int B13 :1;
                              517 ; 116  |    unsigned int B14 :1;
                              518 ; 117  |    unsigned int B15 :1;
                              519 ; 118  |    unsigned int B16 :1;
                              520 ; 119  |    unsigned int B17 :1;
                              521 ; 120  |    unsigned int B18 :1;
                              522 ; 121  |    unsigned int B19 :1;
                              523 ; 122  |    unsigned int B20 :1;
                              524 ; 123  |    unsigned int B21 :1;
                              525 ; 124  |    unsigned int B22 :1;
                              526 ; 125  |    unsigned int B23 :1;
                              527 ; 126  |};
                              528 ; 127  |
                              529 ; 128  |union BitInt {
                              530 ; 129  |        struct Bitfield B;
                              531 ; 130  |        int        I;
                              532 ; 131  |};
                              533 ; 132  |
                              534 ; 133  |#define MAX_MSG_LENGTH 10
                              535 ; 134  |struct CMessage
                              536 ; 135  |{
                              537 ; 136  |        unsigned int m_uLength;
                              538 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              539 ; 138  |};
                              540 ; 139  |
                              541 ; 140  |typedef struct {
                              542 ; 141  |    WORD m_wLength;
                              543 ; 142  |    WORD m_wMessage;
                              544 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              545 ; 144  |} Message;
                              546 ; 145  |
                              547 ; 146  |struct MessageQueueDescriptor
                              548 ; 147  |{
                              549 ; 148  |        int *m_pBase;
                              550 ; 149  |        int m_iModulo;
                              551 ; 150  |        int m_iSize;
                              552 ; 151  |        int *m_pHead;
                              553 ; 152  |        int *m_pTail;
                              554 ; 153  |};
                              555 ; 154  |
                              556 ; 155  |struct ModuleEntry
                              557 ; 156  |{
                              558 ; 157  |    int m_iSignaledEventMask;
                              559 ; 158  |    int m_iWaitEventMask;
                              560 ; 159  |    int m_iResourceOfCode;
                              561 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              562 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              563 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              564 ; 163  |    int m_uTimeOutHigh;
                              565 ; 164  |    int m_uTimeOutLow;
                              566 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              567 ; 166  |};
                              568 ; 167  |
                              569 ; 168  |union WaitMask{
                              570 ; 169  |    struct B{
                              571 ; 170  |        unsigned int m_bNone     :1;
                              572 ; 171  |        unsigned int m_bMessage  :1;
                              573 ; 172  |        unsigned int m_bTimer    :1;
                              574 ; 173  |        unsigned int m_bButton   :1;
                              575 ; 174  |    } B;
                              576 ; 175  |    int I;
                              577 ; 176  |} ;
                              578 ; 177  |
                              579 ; 178  |
                              580 ; 179  |struct Button {
                              581 ; 180  |        WORD wButtonEvent;
                              582 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              583 ; 182  |};
                              584 ; 183  |
                              585 ; 184  |struct Message {
                              586 ; 185  |        WORD wMsgLength;
                              587 ; 186  |        WORD wMsgCommand;
                              588 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              589 ; 188  |};
                              590 ; 189  |
                              591 ; 190  |union EventTypes {
                              592 ; 191  |        struct CMessage msg;
                              593 ; 192  |        struct Button Button ;
                              594 ; 193  |        struct Message Message;
                              595 ; 194  |};
                              596 ; 195  |
                              597 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              598 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              599 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              600 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              601 ; 200  |
                              602 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              603 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              604 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              605 ; 204  |
                              606 ; 205  |#if DEBUG
                              607 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              608 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              609 ; 208  |#else 
                              610 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              611 ; 210  |#define DebugBuildAssert(x)    
                              612 ; 211  |#endif
                              613 ; 212  |
                              614 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                              615 ; 214  |//  #pragma asm
                              616 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              617 ; 216  |//  #pragma endasm
                              618 ; 217  |
                              619 ; 218  |
                              620 ; 219  |#ifdef COLOR_262K
                              621 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              622 ; 221  |#elif defined(COLOR_65K)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              623 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              624 ; 223  |#else
                              625 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              626 ; 225  |#endif
                              627 ; 226  |    
                              628 ; 227  |#endif // #ifndef _TYPES_H
                              629 
                              631 
                              632 ; 17   |#include "regsclkctrl.h"
                              633 
                              635 
                              636 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                              637 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                              638 ; 3    |
                              639 ; 4    |
                              640 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              641 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                              642 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                              643 ; 8    |#define HW_CCR_LTC_BITPOS 1
                              644 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                              645 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                              646 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
                              647 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                              648 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                              649 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                              650 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                              651 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                              652 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                              653 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                              654 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                              655 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                              656 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                              657 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                              658 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                              659 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                              660 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                              661 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                              662 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                              663 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                              664 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                              665 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                              666 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                              667 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                              668 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                              669 ; 34   |
                              670 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                              671 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                              672 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                              673 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                              674 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                              675 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                              676 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                              677 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                              678 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                              679 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                              680 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                              681 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                              682 ; 47   |
                              683 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                              684 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              685 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                              686 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                              687 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                              688 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                              689 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                              690 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                              691 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                              692 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                              693 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                              694 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                              695 ; 60   |
                              696 ; 61   |typedef union               
                              697 ; 62   |{
                              698 ; 63   |    struct
                              699 ; 64   |    {
                              700 ; 65   |        int CKRST       :1; // Clock Reset
                              701 ; 66   |        int LTC         :1;
                              702 ; 67   |        int PLLEN       :1;
                              703 ; 68   |        int XTLEN       :1;
                              704 ; 69   |        int FLB         :1;
                              705 ; 70   |        unsigned ADIV   :3;
                              706 ; 71   |        int CKSRC       :1;
                              707 ; 72   |        unsigned DDIV   :3;
                              708 ; 73   |        unsigned PDIV   :5;
                              709 ; 74   |        int PWDN        :1;
                              710 ; 75   |        int ACKEN       :1;
                              711 ; 76   |        int LOCK        :1;
                              712 ; 77   |        unsigned ADIV1  :3;
                              713 ; 78   |        unsigned DDIV_MSB:1;
                              714 ; 79   |    } B;
                              715 ; 80   |
                              716 ; 81   |    int I;
                              717 ; 82   |    unsigned int U;
                              718 ; 83   |
                              719 ; 84   |} ccr_type;
                              720 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                              721 ; 86   |
                              722 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                              723 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                              724 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                              725 ; 90   |#define HW_RCR_SRST_BITPOS 4
                              726 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                              727 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                              728 ; 93   |#define HW_RCR_NMI_BITPOS 10
                              729 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                              730 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                              731 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                              732 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                              733 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                              734 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                              735 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                              736 ; 101  |
                              737 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                              738 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                              739 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                              740 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                              741 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                              742 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                              743 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                              744 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                              745 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                              746 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              747 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                              748 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                              749 ; 114  |
                              750 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                              751 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                              752 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                              753 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                              754 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                              755 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                              756 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                              757 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                              758 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                              759 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                              760 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                              761 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                              762 ; 127  |
                              763 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                              764 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                              765 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                              766 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                              767 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                              768 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                              769 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                              770 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
                              771 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                              772 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                              773 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                              774 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                              775 ; 140  |
                              776 ; 141  |typedef union               
                              777 ; 142  |{
                              778 ; 143  |    struct
                              779 ; 144  |   {
                              780 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                              781 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                              782 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                              783 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                              784 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                              785 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                              786 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                              787 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                              788 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                              789 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                              790 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                              791 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                              792 ; 157  |    } B;
                              793 ; 158  |
                              794 ; 159  |    int I;
                              795 ; 160  |    unsigned int U;
                              796 ; 161  |
                              797 ; 162  |} rcr_type;
                              798 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                              799 ; 164  |
                              800 ; 165  |
                              801 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                              802 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                              803 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                              804 ; 169  |
                              805 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                              806 ; 171  |
                              807 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                              808 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              809 ; 174  |typedef union               
                              810 ; 175  |{
                              811 ; 176  |    struct
                              812 ; 177  |   {
                              813 ; 178  |        int LOW;
                              814 ; 179  |    } B;
                              815 ; 180  |
                              816 ; 181  |    int I;
                              817 ; 182  |    unsigned int U;
                              818 ; 183  |
                              819 ; 184  |} dclkcntl_type;
                              820 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                              821 ; 186  |
                              822 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                              823 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                              824 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                              825 ; 190  |
                              826 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                              827 ; 192  |
                              828 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                              829 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                              830 ; 195  |typedef union               
                              831 ; 196  |{
                              832 ; 197  |    struct
                              833 ; 198  |   {
                              834 ; 199  |        int HIGH;
                              835 ; 200  |    } B;
                              836 ; 201  |
                              837 ; 202  |    int I;
                              838 ; 203  |    unsigned int U;
                              839 ; 204  |
                              840 ; 205  |} dclkcntu_type;
                              841 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                              842 ; 207  |
                              843 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                              844 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                              845 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                              846 ; 211  |
                              847 ; 212  |// Clock count register (lower)
                              848 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                              849 ; 214  |// Clock count register (upper)
                              850 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                              851 ; 216  |// Cycle steal count register
                              852 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                              853 ; 218  |
                              854 ; 219  |#endif
                              855 ; 220  |
                              856 ; 221  |
                              857 
                              859 
                              860 ; 18   |#include "regscore.h"
                              861 
                              863 
                              864 ; 1    |#if !(defined(__REGS_STATUS_INC))
                              865 ; 2    |#define __REGS_STATUS_INC 1
                              866 ; 3    |
                              867 ; 4    |
                              868 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              869 ; 6    |//  OMR Register (HW_OMR) Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              870 ; 7    |#define HW_OMR_MA_BITPOS 0
                              871 ; 8    |#define HW_OMR_MB_BITPOS 1
                              872 ; 9    |#define HW_OMR_DE_BITPOS 2
                              873 ; 10   |#define HW_OMR_YE_BITPOS 3
                              874 ; 11   |#define HW_OMR_MC_BITPOS 4
                              875 ; 12   |#define HW_OMR_SD_BITPOS 6
                              876 ; 13   |
                              877 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                              878 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                              879 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                              880 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                              881 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                              882 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                              883 ; 20   |
                              884 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                              885 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                              886 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                              887 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                              888 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                              889 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                              890 ; 27   |
                              891 ; 28   |
                              892 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                              893 ; 30   |//  Status Register (HW_SR) Bit Positions
                              894 ; 31   |#define HW_SR_C_BITPOS 0
                              895 ; 32   |#define HW_SR_O_BITPOS 1
                              896 ; 33   |#define HW_SR_Z_BITPOS 2
                              897 ; 34   |#define HW_SR_N_BITPOS 3
                              898 ; 35   |#define HW_SR_U_BITPOS 4
                              899 ; 36   |#define HW_SR_E_BITPOS 5
                              900 ; 37   |#define HW_SR_L_BITPOS 6
                              901 ; 38   |#define HW_SR_IM_BITPOS 8
                              902 ; 39   |#define HW_SR_IM0_BITPOS 8
                              903 ; 40   |#define HW_SR_IM1_BITPOS 9
                              904 ; 41   |#define HW_SR_SM_BITPOS 10
                              905 ; 42   |#define HW_SR_SM0_BITPOS 10
                              906 ; 43   |#define HW_SR_SM1_BITPOS 11
                              907 ; 44   |#define HW_SR_TM_BITPOS 13
                              908 ; 45   |#define HW_SR_DP_BITPOS 14
                              909 ; 46   |#define HW_SR_LOOP_BITPOS 15
                              910 ; 47   |
                              911 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                              912 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                              913 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                              914 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                              915 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                              916 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                              917 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                              918 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                              919 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                              920 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                              921 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                              922 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                              923 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                              924 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                              925 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                              926 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                              927 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                              928 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                              929 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                              930 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                              931 ; 68   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              932 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                              933 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                              934 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                              935 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                              936 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                              937 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                              938 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                              939 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                              940 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                              941 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                              942 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                              943 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                              944 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                              945 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                              946 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                              947 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                              948 ; 85   |
                              949 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                              950 ; 87   |//  RAM/ROM Config Register Bit Positions
                              951 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                              952 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                              953 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                              954 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                              955 ; 92   |#endif
                              956 ; 93   |
                              957 ; 94   |
                              958 
                              960 
                              961 ; 19   |#include "regscodec.h"
                              962 
                              964 
                              965 ; 1    |#if !(defined(regscodecinc))
                              966 ; 2    |#define regscodecinc 1
                              967 ; 3    |
                              968 ; 4    |
                              969 ; 5    |
                              970 ; 6    |#include "types.h"
                              971 
                              973 
                              974 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              975 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              976 ; 3    |//
                              977 ; 4    |// Filename: types.h
                              978 ; 5    |// Description: Standard data types
                              979 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              980 ; 7    |
                              981 ; 8    |#ifndef _TYPES_H
                              982 ; 9    |#define _TYPES_H
                              983 ; 10   |
                              984 ; 11   |// TODO:  move this outta here!
                              985 ; 12   |#if !defined(NOERROR)
                              986 ; 13   |#define NOERROR 0
                              987 ; 14   |#define SUCCESS 0
                              988 ; 15   |#endif 
                              989 ; 16   |#if !defined(SUCCESS)
                              990 ; 17   |#define SUCCESS  0
                              991 ; 18   |#endif
                              992 ; 19   |#if !defined(ERROR)
                              993 ; 20   |#define ERROR   -1
                              994 ; 21   |#endif
                              995 ; 22   |#if !defined(FALSE)
                              996 ; 23   |#define FALSE 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              997 ; 24   |#endif
                              998 ; 25   |#if !defined(TRUE)
                              999 ; 26   |#define TRUE  1
                             1000 ; 27   |#endif
                             1001 ; 28   |
                             1002 ; 29   |#if !defined(NULL)
                             1003 ; 30   |#define NULL 0
                             1004 ; 31   |#endif
                             1005 ; 32   |
                             1006 ; 33   |#define MAX_INT     0x7FFFFF
                             1007 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1008 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1009 ; 36   |#define MAX_ULONG   (-1) 
                             1010 ; 37   |
                             1011 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1012 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1013 ; 40   |
                             1014 ; 41   |
                             1015 ; 42   |#define BYTE    unsigned char       // btVarName
                             1016 ; 43   |#define CHAR    signed char         // cVarName
                             1017 ; 44   |#define USHORT  unsigned short      // usVarName
                             1018 ; 45   |#define SHORT   unsigned short      // sVarName
                             1019 ; 46   |#define WORD    unsigned int        // wVarName
                             1020 ; 47   |#define INT     signed int          // iVarName
                             1021 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1022 ; 49   |#define LONG    signed long         // lVarName
                             1023 ; 50   |#define BOOL    unsigned int        // bVarName
                             1024 ; 51   |#define FRACT   _fract              // frVarName
                             1025 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1026 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1027 ; 54   |#define FLOAT   float               // fVarName
                             1028 ; 55   |#define DBL     double              // dVarName
                             1029 ; 56   |#define ENUM    enum                // eVarName
                             1030 ; 57   |#define CMX     _complex            // cmxVarName
                             1031 ; 58   |typedef WORD UCS3;                   // 
                             1032 ; 59   |
                             1033 ; 60   |#define UINT16  unsigned short
                             1034 ; 61   |#define UINT8   unsigned char   
                             1035 ; 62   |#define UINT32  unsigned long
                             1036 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1037 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1038 ; 65   |#define WCHAR   UINT16
                             1039 ; 66   |
                             1040 ; 67   |//UINT128 is 16 bytes or 6 words
                             1041 ; 68   |typedef struct UINT128_3500 {   
                             1042 ; 69   |    int val[6];     
                             1043 ; 70   |} UINT128_3500;
                             1044 ; 71   |
                             1045 ; 72   |#define UINT128   UINT128_3500
                             1046 ; 73   |
                             1047 ; 74   |// Little endian word packed byte strings:   
                             1048 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1049 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1050 ; 77   |// Little endian word packed byte strings:   
                             1051 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1052 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1053 ; 80   |
                             1054 ; 81   |// Declare Memory Spaces To Use When Coding
                             1055 ; 82   |// A. Sector Buffers
                             1056 ; 83   |#define SECTOR_BUFFER_MEM_X _X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1057 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1058 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1059 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1060 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1061 ; 88   |// B. Media DDI Memory
                             1062 ; 89   |#define MEDIA_DDI_MEM _Y
                             1063 ; 90   |
                             1064 ; 91   |
                             1065 ; 92   |
                             1066 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1067 ; 94   |// Examples of circular pointers:
                             1068 ; 95   |//    INT CIRC cpiVarName
                             1069 ; 96   |//    DWORD CIRC cpdwVarName
                             1070 ; 97   |
                             1071 ; 98   |#define RETCODE INT                 // rcVarName
                             1072 ; 99   |
                             1073 ; 100  |// generic bitfield structure
                             1074 ; 101  |struct Bitfield {
                             1075 ; 102  |    unsigned int B0  :1;
                             1076 ; 103  |    unsigned int B1  :1;
                             1077 ; 104  |    unsigned int B2  :1;
                             1078 ; 105  |    unsigned int B3  :1;
                             1079 ; 106  |    unsigned int B4  :1;
                             1080 ; 107  |    unsigned int B5  :1;
                             1081 ; 108  |    unsigned int B6  :1;
                             1082 ; 109  |    unsigned int B7  :1;
                             1083 ; 110  |    unsigned int B8  :1;
                             1084 ; 111  |    unsigned int B9  :1;
                             1085 ; 112  |    unsigned int B10 :1;
                             1086 ; 113  |    unsigned int B11 :1;
                             1087 ; 114  |    unsigned int B12 :1;
                             1088 ; 115  |    unsigned int B13 :1;
                             1089 ; 116  |    unsigned int B14 :1;
                             1090 ; 117  |    unsigned int B15 :1;
                             1091 ; 118  |    unsigned int B16 :1;
                             1092 ; 119  |    unsigned int B17 :1;
                             1093 ; 120  |    unsigned int B18 :1;
                             1094 ; 121  |    unsigned int B19 :1;
                             1095 ; 122  |    unsigned int B20 :1;
                             1096 ; 123  |    unsigned int B21 :1;
                             1097 ; 124  |    unsigned int B22 :1;
                             1098 ; 125  |    unsigned int B23 :1;
                             1099 ; 126  |};
                             1100 ; 127  |
                             1101 ; 128  |union BitInt {
                             1102 ; 129  |        struct Bitfield B;
                             1103 ; 130  |        int        I;
                             1104 ; 131  |};
                             1105 ; 132  |
                             1106 ; 133  |#define MAX_MSG_LENGTH 10
                             1107 ; 134  |struct CMessage
                             1108 ; 135  |{
                             1109 ; 136  |        unsigned int m_uLength;
                             1110 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1111 ; 138  |};
                             1112 ; 139  |
                             1113 ; 140  |typedef struct {
                             1114 ; 141  |    WORD m_wLength;
                             1115 ; 142  |    WORD m_wMessage;
                             1116 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1117 ; 144  |} Message;
                             1118 ; 145  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1119 ; 146  |struct MessageQueueDescriptor
                             1120 ; 147  |{
                             1121 ; 148  |        int *m_pBase;
                             1122 ; 149  |        int m_iModulo;
                             1123 ; 150  |        int m_iSize;
                             1124 ; 151  |        int *m_pHead;
                             1125 ; 152  |        int *m_pTail;
                             1126 ; 153  |};
                             1127 ; 154  |
                             1128 ; 155  |struct ModuleEntry
                             1129 ; 156  |{
                             1130 ; 157  |    int m_iSignaledEventMask;
                             1131 ; 158  |    int m_iWaitEventMask;
                             1132 ; 159  |    int m_iResourceOfCode;
                             1133 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1134 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1135 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1136 ; 163  |    int m_uTimeOutHigh;
                             1137 ; 164  |    int m_uTimeOutLow;
                             1138 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1139 ; 166  |};
                             1140 ; 167  |
                             1141 ; 168  |union WaitMask{
                             1142 ; 169  |    struct B{
                             1143 ; 170  |        unsigned int m_bNone     :1;
                             1144 ; 171  |        unsigned int m_bMessage  :1;
                             1145 ; 172  |        unsigned int m_bTimer    :1;
                             1146 ; 173  |        unsigned int m_bButton   :1;
                             1147 ; 174  |    } B;
                             1148 ; 175  |    int I;
                             1149 ; 176  |} ;
                             1150 ; 177  |
                             1151 ; 178  |
                             1152 ; 179  |struct Button {
                             1153 ; 180  |        WORD wButtonEvent;
                             1154 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1155 ; 182  |};
                             1156 ; 183  |
                             1157 ; 184  |struct Message {
                             1158 ; 185  |        WORD wMsgLength;
                             1159 ; 186  |        WORD wMsgCommand;
                             1160 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1161 ; 188  |};
                             1162 ; 189  |
                             1163 ; 190  |union EventTypes {
                             1164 ; 191  |        struct CMessage msg;
                             1165 ; 192  |        struct Button Button ;
                             1166 ; 193  |        struct Message Message;
                             1167 ; 194  |};
                             1168 ; 195  |
                             1169 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1170 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1171 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1172 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1173 ; 200  |
                             1174 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1175 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1176 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1177 ; 204  |
                             1178 ; 205  |#if DEBUG
                             1179 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1180 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1181 ; 208  |#else 
                             1182 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1183 ; 210  |#define DebugBuildAssert(x)    
                             1184 ; 211  |#endif
                             1185 ; 212  |
                             1186 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1187 ; 214  |//  #pragma asm
                             1188 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1189 ; 216  |//  #pragma endasm
                             1190 ; 217  |
                             1191 ; 218  |
                             1192 ; 219  |#ifdef COLOR_262K
                             1193 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1194 ; 221  |#elif defined(COLOR_65K)
                             1195 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1196 ; 223  |#else
                             1197 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1198 ; 225  |#endif
                             1199 ; 226  |    
                             1200 ; 227  |#endif // #ifndef _TYPES_H
                             1201 
                             1203 
                             1204 ; 7    |
                             1205 ; 8    |
                             1206 ; 9    |
                             1207 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1208 ; 11   |
                             1209 ; 12   |//   SYSTEM STMP Registers 
                             1210 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             1211 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1212 ; 15   |
                             1213 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             1214 ; 17   |
                             1215 ; 18   |
                             1216 ; 19   |
                             1217 ; 20   |
                             1218 ; 21   |
                             1219 ; 22   |
                             1220 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             1221 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             1222 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             1223 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             1224 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             1225 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             1226 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             1227 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             1228 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             1229 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             1230 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             1231 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             1232 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             1233 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             1234 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             1235 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             1236 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             1237 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             1238 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1239 ; 42   |
                             1240 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             1241 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             1242 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             1243 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             1244 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             1245 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             1246 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             1247 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             1248 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             1249 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             1250 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             1251 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             1252 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             1253 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             1254 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             1255 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             1256 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             1257 ; 60   |
                             1258 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             1259 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             1260 ; 63   |
                             1261 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1262 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1263 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1264 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1265 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1266 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1267 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1268 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1269 ; 72   |
                             1270 ; 73   |#if defined(CAPLESS_HP)
                             1271 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             1272 ; 75   |#else 
                             1273 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             1274 ; 77   |#endif
                             1275 ; 78   |
                             1276 ; 79   |// Headphone control register
                             1277 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             1278 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1279 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             1280 ; 83   |typedef union               
                             1281 ; 84   |{
                             1282 ; 85   |    struct {
                             1283 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             1284 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             1285 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             1286 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             1287 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             1288 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             1289 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             1290 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             1291 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             1292 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             1293 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             1294 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             1295 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             1296 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             1297 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             1298 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             1299 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             1300 ; 103  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1301 ; 104  |    int I;
                             1302 ; 105  |    unsigned int U;
                             1303 ; 106  |} hpctrl_type;
                             1304 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             1305 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             1306 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             1307 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             1308 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             1309 ; 112  |
                             1310 ; 113  |
                             1311 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             1312 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             1313 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             1314 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1315 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             1316 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             1317 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             1318 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             1319 ; 122  |
                             1320 ; 123  |
                             1321 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1322 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             1323 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             1324 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
                             1325 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             1326 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             1327 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             1328 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             1329 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             1330 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             1331 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             1332 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             1333 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             1334 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             1335 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             1336 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             1337 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             1338 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             1339 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             1340 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             1341 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             1342 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             1343 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             1344 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             1345 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             1346 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             1347 ; 150  |
                             1348 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             1349 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             1350 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             1351 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             1352 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             1353 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             1354 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             1355 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             1356 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             1357 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             1358 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             1359 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             1360 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             1361 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             1362 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1363 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             1364 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             1365 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             1366 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             1367 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             1368 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             1369 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             1370 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             1371 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             1372 ; 175  |
                             1373 ; 176  |
                             1374 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             1375 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             1376 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             1377 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             1378 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             1379 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             1380 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             1381 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             1382 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             1383 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             1384 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             1385 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             1386 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
                             1387 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             1388 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             1389 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             1390 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             1391 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             1392 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             1393 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             1394 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             1395 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             1396 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             1397 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             1398 ; 201  |
                             1399 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             1400 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             1401 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             1402 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             1403 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             1404 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             1405 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             1406 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             1407 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             1408 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             1409 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             1410 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             1411 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             1412 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             1413 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             1414 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             1415 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             1416 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             1417 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             1418 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             1419 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             1420 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             1421 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             1422 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             1423 ; 226  |
                             1424 ; 227  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1425 ; 228  |{
                             1426 ; 229  |    struct {
                             1427 ; 230  |        int INV_USB_CLK            : 1;
                             1428 ; 231  |        int USB_DFF_BYPASS         : 1;
                             1429 ; 232  |        int HOLD_GND               : 1;
                             1430 ; 233  |        int ACKI                   : 1;
                             1431 ; 234  |        int ASD2X                  : 1;
                             1432 ; 235  |        int PCPCU                  : 1;
                             1433 ; 236  |        int PCPCD                  : 1;
                             1434 ; 237  |        int DCKI                   : 1;
                             1435 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             1436 ; 239  |        int PSRN                   : 1;
                             1437 ; 240  |        int FX2                    : 1;
                             1438 ; 241  |        int VCOS                   : 1;
                             1439 ; 242  |        int XBCO                   : 1;
                             1440 ; 243  |        int XBGC                   : 1;
                             1441 ; 244  |        int ADTHD                  : 1;
                             1442 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             1443 ; 246  |        int PWDADC                 : 1;
                             1444 ; 247  |        int MICBIAS1               : 1;
                             1445 ; 248  |        int EZD                    : 1;
                             1446 ; 249  |        int DZCDA                  : 1;
                             1447 ; 250  |        int DZCFM                  : 1;
                             1448 ; 251  |        int DZCLI                  : 1;
                             1449 ; 252  |        int DZCMI                  : 1;
                             1450 ; 253  |        int DZCMA                  : 1;
                             1451 ; 254  |    } B;
                             1452 ; 255  |    int I;
                             1453 ; 256  |    unsigned int U;
                             1454 ; 257  |} mix_tbr_type;
                             1455 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             1456 ; 259  |
                             1457 ; 260  |
                             1458 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             1459 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1460 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             1461 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             1462 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             1463 ; 266  |
                             1464 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             1465 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             1466 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             1467 ; 270  |
                             1468 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             1469 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             1470 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             1471 ; 274  |
                             1472 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             1473 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             1474 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             1475 ; 278  |
                             1476 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             1477 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             1478 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             1479 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             1480 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             1481 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             1482 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             1483 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             1484 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             1485 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             1486 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1487 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             1488 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             1489 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             1490 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             1491 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             1492 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             1493 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             1494 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             1495 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             1496 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             1497 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             1498 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             1499 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             1500 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             1501 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             1502 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             1503 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             1504 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             1505 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             1506 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             1507 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             1508 ; 311  |
                             1509 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             1510 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
                             1511 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             1512 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             1513 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             1514 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             1515 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             1516 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             1517 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             1518 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             1519 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             1520 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             1521 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             1522 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             1523 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             1524 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             1525 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             1526 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             1527 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             1528 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             1529 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             1530 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             1531 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             1532 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             1533 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             1534 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             1535 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             1536 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             1537 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             1538 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             1539 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             1540 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             1541 ; 344  |
                             1542 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             1543 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1544 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             1545 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             1546 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             1547 ; 350  |
                             1548 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1549 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             1550 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             1551 ; 354  |
                             1552 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             1553 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             1554 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             1555 ; 358  |
                             1556 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             1557 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             1558 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             1559 ; 362  |
                             1560 ; 363  |
                             1561 ; 364  |typedef union               
                             1562 ; 365  |{
                             1563 ; 366  |    struct
                             1564 ; 367  |    {
                             1565 ; 368  |        unsigned MR :5;
                             1566 ; 369  |        int         :3;
                             1567 ; 370  |        unsigned ML :5;
                             1568 ; 371  |        int         :2;
                             1569 ; 372  |        int MUTE    :1;
                             1570 ; 373  |    } B;
                             1571 ; 374  |    int I;
                             1572 ; 375  |    unsigned int U;
                             1573 ; 376  |} mix_mastervr_type;
                             1574 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             1575 ; 378  |
                             1576 ; 379  |
                             1577 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             1578 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             1579 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             1580 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             1581 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             1582 ; 385  |
                             1583 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             1584 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             1585 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             1586 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             1587 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             1588 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             1589 ; 392  |
                             1590 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             1591 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             1592 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             1593 ; 396  |
                             1594 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             1595 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             1596 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             1597 ; 400  |
                             1598 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             1599 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             1600 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             1601 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             1602 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             1603 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             1604 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             1605 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             1606 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             1607 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             1608 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             1609 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             1610 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1611 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             1612 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             1613 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             1614 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             1615 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             1616 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             1617 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             1618 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             1619 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             1620 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             1621 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             1622 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             1623 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             1624 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             1625 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             1626 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             1627 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             1628 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             1629 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             1630 ; 433  |
                             1631 ; 434  |typedef union               
                             1632 ; 435  |{
                             1633 ; 436  |    struct {
                             1634 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
                             1635 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             1636 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             1637 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             1638 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             1639 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             1640 ; 443  |    } B;
                             1641 ; 444  |    int I;
                             1642 ; 445  |    unsigned int U;
                             1643 ; 446  |} mix_micinvr_type;
                             1644 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             1645 ; 448  |
                             1646 ; 449  |
                             1647 ; 450  |
                             1648 ; 451  |
                             1649 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             1650 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             1651 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             1652 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             1653 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             1654 ; 457  |
                             1655 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             1656 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             1657 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             1658 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             1659 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             1660 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             1661 ; 464  |
                             1662 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             1663 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             1664 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             1665 ; 468  |
                             1666 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             1667 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             1668 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             1669 ; 472  |
                             1670 ; 473  |typedef union               
                             1671 ; 474  |{
                             1672 ; 475  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1673 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             1674 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             1675 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             1676 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             1677 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             1678 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             1679 ; 482  |    } B;
                             1680 ; 483  |    int I;
                             1681 ; 484  |    unsigned int U;
                             1682 ; 485  |} mix_line1invr_type;
                             1683 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             1684 ; 487  |
                             1685 ; 488  |
                             1686 ; 489  |
                             1687 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             1688 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             1689 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             1690 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             1691 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             1692 ; 495  |
                             1693 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             1694 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             1695 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             1696 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
                             1697 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             1698 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             1699 ; 502  |
                             1700 ; 503  |
                             1701 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             1702 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             1703 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             1704 ; 507  |
                             1705 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             1706 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             1707 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             1708 ; 511  |
                             1709 ; 512  |typedef union               
                             1710 ; 513  |{
                             1711 ; 514  |    struct {
                             1712 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             1713 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             1714 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             1715 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             1716 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             1717 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             1718 ; 521  |    } B;
                             1719 ; 522  |    int I;
                             1720 ; 523  |    unsigned int U;
                             1721 ; 524  |} mix_line2invr_type;
                             1722 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             1723 ; 526  |
                             1724 ; 527  |
                             1725 ; 528  |
                             1726 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             1727 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             1728 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             1729 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             1730 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             1731 ; 534  |
                             1732 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             1733 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             1734 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1735 ; 538  |
                             1736 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             1737 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             1738 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             1739 ; 542  |
                             1740 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             1741 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             1742 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             1743 ; 546  |
                             1744 ; 547  |typedef union               
                             1745 ; 548  |{
                             1746 ; 549  |    struct {
                             1747 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             1748 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             1749 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             1750 ; 553  |    } B;
                             1751 ; 554  |    int I;
                             1752 ; 555  |    unsigned int U;
                             1753 ; 556  |} mix_dacinvr_type;
                             1754 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             1755 ; 558  |
                             1756 ; 559  |
                             1757 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             1758 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
                             1759 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             1760 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             1761 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             1762 ; 565  |
                             1763 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             1764 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             1765 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             1766 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             1767 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             1768 ; 571  |
                             1769 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             1770 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             1771 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             1772 ; 575  |
                             1773 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             1774 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             1775 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             1776 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             1777 ; 580  |
                             1778 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             1779 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             1780 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             1781 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             1782 ; 585  |
                             1783 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             1784 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             1785 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             1786 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             1787 ; 590  |
                             1788 ; 591  |typedef union               
                             1789 ; 592  |{
                             1790 ; 593  |    struct {
                             1791 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             1792 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             1793 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             1794 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             1795 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1796 ; 599  |    } B;
                             1797 ; 600  |    int I;
                             1798 ; 601  |    unsigned int U;
                             1799 ; 602  |} mix_recselr_type;
                             1800 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             1801 ; 604  |
                             1802 ; 605  |
                             1803 ; 606  |
                             1804 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             1805 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             1806 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             1807 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             1808 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             1809 ; 612  |
                             1810 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             1811 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             1812 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             1813 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             1814 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             1815 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             1816 ; 619  |
                             1817 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             1818 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             1819 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
                             1820 ; 623  |
                             1821 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             1822 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             1823 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             1824 ; 627  |
                             1825 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             1826 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             1827 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             1828 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             1829 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             1830 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             1831 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             1832 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             1833 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             1834 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             1835 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             1836 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             1837 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             1838 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             1839 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             1840 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             1841 ; 644  |
                             1842 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             1843 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             1844 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             1845 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             1846 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             1847 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             1848 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             1849 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             1850 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             1851 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             1852 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             1853 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             1854 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             1855 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             1856 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             1857 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1858 ; 661  |
                             1859 ; 662  |typedef union               
                             1860 ; 663  |{
                             1861 ; 664  |    struct {
                             1862 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             1863 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             1864 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             1865 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             1866 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             1867 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             1868 ; 671  |    } B;
                             1869 ; 672  |    int I;
                             1870 ; 673  |    unsigned int U;
                             1871 ; 674  |} mix_adcgainr_type;
                             1872 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             1873 ; 676  |
                             1874 ; 677  |
                             1875 ; 678  |
                             1876 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             1877 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             1878 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             1879 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             1880 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             1881 ; 684  |
                             1882 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             1883 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             1884 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             1885 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             1886 ; 689  |
                             1887 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             1888 ; 691  |
                             1889 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             1890 ; 693  |
                             1891 ; 694  |typedef union               
                             1892 ; 695  |{
                             1893 ; 696  |    struct {
                             1894 ; 697  |                int                     : 9;
                             1895 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             1896 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             1897 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             1898 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             1899 ; 702  |    } B;
                             1900 ; 703  |    int I;
                             1901 ; 704  |    unsigned int U;
                             1902 ; 705  |} mix_pwrdnr_type;
                             1903 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             1904 ; 707  |
                             1905 ; 708  |
                             1906 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             1907 ; 710  |
                             1908 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             1909 ; 712  |
                             1910 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             1911 ; 714  |
                             1912 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             1913 ; 716  |
                             1914 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             1915 ; 718  |
                             1916 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             1917 ; 720  |
                             1918 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             1919 ; 722  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1920 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             1921 ; 724  |
                             1922 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             1923 ; 726  |
                             1924 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             1925 ; 728  |
                             1926 ; 729  |
                             1927 ; 730  |
                             1928 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             1929 ; 732  |
                             1930 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             1931 ; 734  |
                             1932 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             1933 ; 736  |
                             1934 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             1935 ; 738  |
                             1936 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             1937 ; 740  |
                             1938 ; 741  |
                             1939 ; 742  |
                             1940 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
                             1941 ; 744  |
                             1942 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             1943 ; 746  |
                             1944 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             1945 ; 748  |
                             1946 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             1947 ; 750  |
                             1948 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             1949 ; 752  |
                             1950 ; 753  |
                             1951 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             1952 ; 755  |
                             1953 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             1954 ; 757  |
                             1955 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             1956 ; 759  |
                             1957 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             1958 ; 761  |
                             1959 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             1960 ; 763  |
                             1961 ; 764  |
                             1962 ; 765  |typedef union               
                             1963 ; 766  |{
                             1964 ; 767  |    struct {
                             1965 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             1966 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             1967 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             1968 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             1969 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             1970 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             1971 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             1972 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             1973 ; 776  |    } B;
                             1974 ; 777  |    int I;
                             1975 ; 778  |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1976 ; 779  |} mix_test_type;
                             1977 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             1978 ; 781  |
                             1979 ; 782  |
                             1980 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             1981 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             1982 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             1983 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             1984 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             1985 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             1986 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             1987 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             1988 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             1989 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             1990 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             1991 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             1992 ; 795  |
                             1993 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             1994 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             1995 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             1996 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             1997 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
                             1998 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             1999 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             2000 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             2001 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             2002 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             2003 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             2004 ; 807  |
                             2005 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             2006 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             2007 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             2008 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             2009 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
                             2010 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             2011 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
                             2012 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             2013 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             2014 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             2015 ; 818  |
                             2016 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             2017 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             2018 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             2019 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             2020 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             2021 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             2022 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             2023 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             2024 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             2025 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             2026 ; 829  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2027 ; 830  |typedef union               
                             2028 ; 831  |{
                             2029 ; 832  |    struct {
                             2030 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             2031 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             2032 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             2033 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             2034 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             2035 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             2036 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             2037 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             2038 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             2039 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             2040 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             2041 ; 844  |    } B;
                             2042 ; 845  |    int I;
                             2043 ; 846  |    unsigned int U;
                             2044 ; 847  |} ref_ctrl_type;
                             2045 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             2046 ; 849  |
                             2047 ; 850  |
                             2048 ; 851  |
                             2049 ; 852  |/////////////////////////////////////////////////////////////////////////////////
                             2050 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             2051 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             2052 ; 855  |//////  DAC Registers
                             2053 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             2054 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             2055 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             2056 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             2057 ; 860  |
                             2058 ; 861  |
                             2059 ; 862  |
                             2060 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             2061 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             2062 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             2063 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             2064 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             2065 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             2066 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             2067 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             2068 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             2069 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             2070 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             2071 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             2072 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             2073 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             2074 ; 877  |
                             2075 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             2076 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             2077 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             2078 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             2079 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             2080 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             2081 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             2082 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             2083 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             2084 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             2085 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             2086 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             2087 ; 890  |
                             2088 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2089 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             2090 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             2091 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             2092 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             2093 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             2094 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             2095 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             2096 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             2097 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             2098 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             2099 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             2100 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             2101 ; 904  |
                             2102 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             2103 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             2104 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             2105 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             2106 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             2107 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             2108 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             2109 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             2110 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             2111 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
                             2112 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             2113 ; 916  |
                             2114 ; 917  |
                             2115 ; 918  |typedef union               
                             2116 ; 919  |{
                             2117 ; 920  |    struct {
                             2118 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             2119 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             2120 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             2121 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             2122 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             2123 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             2124 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             2125 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             2126 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             2127 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             2128 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             2129 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             2130 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             2131 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             2132 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             2133 ; 936  |    } B;
                             2134 ; 937  |    int I;
                             2135 ; 938  |    unsigned int U;
                             2136 ; 939  |} dac_csr_type;
                             2137 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             2138 ; 941  |
                             2139 ; 942  |
                             2140 ; 943  |
                             2141 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             2142 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             2143 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             2144 ; 947  |
                             2145 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             2146 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             2147 ; 950  |
                             2148 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             2149 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             2150 ; 953  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2151 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             2152 ; 955  |
                             2153 ; 956  |typedef union               
                             2154 ; 957  |{
                             2155 ; 958  |    struct {
                             2156 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             2157 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             2158 ; 961  |    } B;
                             2159 ; 962  |    int I;
                             2160 ; 963  |    unsigned int U;
                             2161 ; 964  |} dac_srr_type;
                             2162 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             2163 ; 966  |
                             2164 ; 967  |
                             2165 ; 968  |
                             2166 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             2167 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             2168 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             2169 ; 972  |
                             2170 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             2171 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             2172 ; 975  |
                             2173 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
                             2174 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             2175 ; 978  |
                             2176 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             2177 ; 980  |
                             2178 ; 981  |typedef union               
                             2179 ; 982  |{
                             2180 ; 983  |    struct {
                             2181 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             2182 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             2183 ; 986  |    } B;
                             2184 ; 987  |    int I;
                             2185 ; 988  |    unsigned int U;
                             2186 ; 989  |} dac_wcr_type;
                             2187 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             2188 ; 991  |
                             2189 ; 992  |
                             2190 ; 993  |
                             2191 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             2192 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             2193 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             2194 ; 997  |
                             2195 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             2196 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             2197 ; 1000 |
                             2198 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             2199 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             2200 ; 1003 |
                             2201 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             2202 ; 1005 |
                             2203 ; 1006 |typedef union               
                             2204 ; 1007 |{
                             2205 ; 1008 |    struct {
                             2206 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             2207 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             2208 ; 1011 |    } B;
                             2209 ; 1012 |    int I;
                             2210 ; 1013 |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2211 ; 1014 |} dac_cpr_type;
                             2212 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             2213 ; 1016 |
                             2214 ; 1017 |
                             2215 ; 1018 |
                             2216 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             2217 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             2218 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             2219 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             2220 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             2221 ; 1024 |
                             2222 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             2223 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             2224 ; 1027 |
                             2225 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             2226 ; 1029 |
                             2227 ; 1030 |typedef union               
                             2228 ; 1031 |{
                             2229 ; 1032 |    struct {
                             2230 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             2231 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             2232 ; 1035 |    } B;
                             2233 ; 1036 |    int I;
                             2234 ; 1037 |    unsigned int U;
                             2235 ; 1038 |} dac_mr_type;
                             2236 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             2237 ; 1040 |
                             2238 ; 1041 |
                             2239 ; 1042 |
                             2240 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             2241 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             2242 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             2243 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             2244 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             2245 ; 1048 |
                             2246 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             2247 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             2248 ; 1051 |
                             2249 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             2250 ; 1053 |
                             2251 ; 1054 |typedef union               
                             2252 ; 1055 |{
                             2253 ; 1056 |    struct {
                             2254 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             2255 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             2256 ; 1059 |    } B;
                             2257 ; 1060 |    int I;
                             2258 ; 1061 |    unsigned int U;
                             2259 ; 1062 |} dac_bar_type;
                             2260 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             2261 ; 1064 |
                             2262 ; 1065 |
                             2263 ; 1066 |
                             2264 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             2265 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             2266 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             2267 ; 1070 |
                             2268 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             2269 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             2270 ; 1073 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2271 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             2272 ; 1075 |
                             2273 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             2274 ; 1077 |
                             2275 ; 1078 |typedef union               
                             2276 ; 1079 |{
                             2277 ; 1080 |    struct {
                             2278 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             2279 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             2280 ; 1083 |    } B;
                             2281 ; 1084 |    int I;
                             2282 ; 1085 |    unsigned int U;
                             2283 ; 1086 |} dac_icr_type;
                             2284 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             2285 ; 1088 |
                             2286 ; 1089 |
                             2287 ; 1090 |
                             2288 ; 1091 |
                             2289 ; 1092 |
                             2290 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             2291 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             2292 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             2293 ; 1096 |//////  ADC Registers
                             2294 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             2295 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             2296 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             2297 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             2298 ; 1101 |
                             2299 ; 1102 |
                             2300 ; 1103 |
                             2301 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             2302 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             2303 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             2304 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             2305 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             2306 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             2307 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             2308 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             2309 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             2310 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             2311 ; 1114 |
                             2312 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             2313 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             2314 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             2315 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             2316 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             2317 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             2318 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             2319 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             2320 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             2321 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             2322 ; 1125 |
                             2323 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             2324 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             2325 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             2326 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             2327 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             2328 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             2329 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2330 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             2331 ; 1134 |
                             2332 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             2333 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             2334 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             2335 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             2336 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             2337 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             2338 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             2339 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             2340 ; 1143 |
                             2341 ; 1144 |typedef union               
                             2342 ; 1145 |{
                             2343 ; 1146 |    struct {
                             2344 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             2345 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             2346 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             2347 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             2348 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             2349 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             2350 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             2351 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             2352 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             2353 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
                             2354 ; 1157 |    } B;
                             2355 ; 1158 |    int I;
                             2356 ; 1159 |    unsigned int U;
                             2357 ; 1160 |} adc_csr_type;
                             2358 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             2359 ; 1162 |
                             2360 ; 1163 |
                             2361 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             2362 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             2363 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             2364 ; 1167 |
                             2365 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             2366 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             2367 ; 1170 |
                             2368 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             2369 ; 1172 |
                             2370 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             2371 ; 1174 |
                             2372 ; 1175 |typedef union               
                             2373 ; 1176 |{
                             2374 ; 1177 |    struct {
                             2375 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             2376 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             2377 ; 1180 |    } B;
                             2378 ; 1181 |    int I;
                             2379 ; 1182 |    unsigned int U;
                             2380 ; 1183 |} adc_wcr_type;
                             2381 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             2382 ; 1185 |
                             2383 ; 1186 |
                             2384 ; 1187 |
                             2385 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             2386 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             2387 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             2388 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             2389 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             2390 ; 1193 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2391 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             2392 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             2393 ; 1196 |
                             2394 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             2395 ; 1198 |
                             2396 ; 1199 |typedef union               
                             2397 ; 1200 |{
                             2398 ; 1201 |    struct {
                             2399 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             2400 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             2401 ; 1204 |    } B;
                             2402 ; 1205 |    int I;
                             2403 ; 1206 |    unsigned int U;
                             2404 ; 1207 |} adc_bar_type;
                             2405 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             2406 ; 1209 |
                             2407 ; 1210 |
                             2408 ; 1211 |
                             2409 ; 1212 |
                             2410 ; 1213 |
                             2411 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             2412 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             2413 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
                             2414 ; 1217 |
                             2415 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             2416 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             2417 ; 1220 |
                             2418 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             2419 ; 1222 |
                             2420 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             2421 ; 1224 |
                             2422 ; 1225 |typedef union               
                             2423 ; 1226 |{
                             2424 ; 1227 |    struct {
                             2425 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             2426 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             2427 ; 1230 |    } B;
                             2428 ; 1231 |    int I;
                             2429 ; 1232 |    unsigned int U;
                             2430 ; 1233 |} adc_cpr_type;
                             2431 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             2432 ; 1235 |
                             2433 ; 1236 |
                             2434 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             2435 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             2436 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             2437 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             2438 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             2439 ; 1242 |
                             2440 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             2441 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             2442 ; 1245 |
                             2443 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             2444 ; 1247 |
                             2445 ; 1248 |typedef union               
                             2446 ; 1249 |{
                             2447 ; 1250 |    struct {
                             2448 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             2449 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             2450 ; 1253 |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2451 ; 1254 |    int I;
                             2452 ; 1255 |    unsigned int U;
                             2453 ; 1256 |} adc_mr_type;
                             2454 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             2455 ; 1258 |
                             2456 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             2457 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             2458 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             2459 ; 1262 |
                             2460 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             2461 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             2462 ; 1265 |
                             2463 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             2464 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             2465 ; 1268 |
                             2466 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             2467 ; 1270 |
                             2468 ; 1271 |typedef union               
                             2469 ; 1272 |{
                             2470 ; 1273 |    struct {
                             2471 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             2472 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             2473 ; 1276 |    } B;
                             2474 ; 1277 |    int I;
                             2475 ; 1278 |    unsigned int U;
                             2476 ; 1279 |} adc_srr_type;
                             2477 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             2478 ; 1281 |
                             2479 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             2480 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             2481 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             2482 ; 1285 |
                             2483 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             2484 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             2485 ; 1288 |
                             2486 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             2487 ; 1290 |
                             2488 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             2489 ; 1292 |
                             2490 ; 1293 |typedef union               
                             2491 ; 1294 |{
                             2492 ; 1295 |    struct {
                             2493 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             2494 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             2495 ; 1298 |    } B;
                             2496 ; 1299 |    int I;
                             2497 ; 1300 |    unsigned int U;
                             2498 ; 1301 |} adc_icr_type;
                             2499 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             2500 ; 1303 |
                             2501 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             2502 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             2503 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2504 ; 1307 |
                             2505 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             2506 ; 1309 |
                             2507 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             2508 ; 1311 |
                             2509 ; 1312 |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2510 ; 1313 |
                             2511 
                             2513 
                             2514 ; 20   |#include "regsdcdc.h"
                             2515 
                             2517 
                             2518 ; 1    |#if !(defined(regsdcdcinc))
                             2519 ; 2    |
                             2520 ; 3    |#define regssysteminc 1
                             2521 ; 4    |
                             2522 ; 5    |
                             2523 ; 6    |
                             2524 ; 7    |#include "types.h"
                             2525 
                             2527 
                             2528 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             2529 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             2530 ; 3    |//
                             2531 ; 4    |// Filename: types.h
                             2532 ; 5    |// Description: Standard data types
                             2533 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             2534 ; 7    |
                             2535 ; 8    |#ifndef _TYPES_H
                             2536 ; 9    |#define _TYPES_H
                             2537 ; 10   |
                             2538 ; 11   |// TODO:  move this outta here!
                             2539 ; 12   |#if !defined(NOERROR)
                             2540 ; 13   |#define NOERROR 0
                             2541 ; 14   |#define SUCCESS 0
                             2542 ; 15   |#endif 
                             2543 ; 16   |#if !defined(SUCCESS)
                             2544 ; 17   |#define SUCCESS  0
                             2545 ; 18   |#endif
                             2546 ; 19   |#if !defined(ERROR)
                             2547 ; 20   |#define ERROR   -1
                             2548 ; 21   |#endif
                             2549 ; 22   |#if !defined(FALSE)
                             2550 ; 23   |#define FALSE 0
                             2551 ; 24   |#endif
                             2552 ; 25   |#if !defined(TRUE)
                             2553 ; 26   |#define TRUE  1
                             2554 ; 27   |#endif
                             2555 ; 28   |
                             2556 ; 29   |#if !defined(NULL)
                             2557 ; 30   |#define NULL 0
                             2558 ; 31   |#endif
                             2559 ; 32   |
                             2560 ; 33   |#define MAX_INT     0x7FFFFF
                             2561 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             2562 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             2563 ; 36   |#define MAX_ULONG   (-1) 
                             2564 ; 37   |
                             2565 ; 38   |#define WORD_SIZE   24              // word size in bits
                             2566 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             2567 ; 40   |
                             2568 ; 41   |
                             2569 ; 42   |#define BYTE    unsigned char       // btVarName
                             2570 ; 43   |#define CHAR    signed char         // cVarName
                             2571 ; 44   |#define USHORT  unsigned short      // usVarName
                             2572 ; 45   |#define SHORT   unsigned short      // sVarName
                             2573 ; 46   |#define WORD    unsigned int        // wVarName
                             2574 ; 47   |#define INT     signed int          // iVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2575 ; 48   |#define DWORD   unsigned long       // dwVarName
                             2576 ; 49   |#define LONG    signed long         // lVarName
                             2577 ; 50   |#define BOOL    unsigned int        // bVarName
                             2578 ; 51   |#define FRACT   _fract              // frVarName
                             2579 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             2580 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             2581 ; 54   |#define FLOAT   float               // fVarName
                             2582 ; 55   |#define DBL     double              // dVarName
                             2583 ; 56   |#define ENUM    enum                // eVarName
                             2584 ; 57   |#define CMX     _complex            // cmxVarName
                             2585 ; 58   |typedef WORD UCS3;                   // 
                             2586 ; 59   |
                             2587 ; 60   |#define UINT16  unsigned short
                             2588 ; 61   |#define UINT8   unsigned char   
                             2589 ; 62   |#define UINT32  unsigned long
                             2590 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2591 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             2592 ; 65   |#define WCHAR   UINT16
                             2593 ; 66   |
                             2594 ; 67   |//UINT128 is 16 bytes or 6 words
                             2595 ; 68   |typedef struct UINT128_3500 {   
                             2596 ; 69   |    int val[6];     
                             2597 ; 70   |} UINT128_3500;
                             2598 ; 71   |
                             2599 ; 72   |#define UINT128   UINT128_3500
                             2600 ; 73   |
                             2601 ; 74   |// Little endian word packed byte strings:   
                             2602 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2603 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2604 ; 77   |// Little endian word packed byte strings:   
                             2605 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             2606 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             2607 ; 80   |
                             2608 ; 81   |// Declare Memory Spaces To Use When Coding
                             2609 ; 82   |// A. Sector Buffers
                             2610 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             2611 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             2612 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             2613 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             2614 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             2615 ; 88   |// B. Media DDI Memory
                             2616 ; 89   |#define MEDIA_DDI_MEM _Y
                             2617 ; 90   |
                             2618 ; 91   |
                             2619 ; 92   |
                             2620 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             2621 ; 94   |// Examples of circular pointers:
                             2622 ; 95   |//    INT CIRC cpiVarName
                             2623 ; 96   |//    DWORD CIRC cpdwVarName
                             2624 ; 97   |
                             2625 ; 98   |#define RETCODE INT                 // rcVarName
                             2626 ; 99   |
                             2627 ; 100  |// generic bitfield structure
                             2628 ; 101  |struct Bitfield {
                             2629 ; 102  |    unsigned int B0  :1;
                             2630 ; 103  |    unsigned int B1  :1;
                             2631 ; 104  |    unsigned int B2  :1;
                             2632 ; 105  |    unsigned int B3  :1;
                             2633 ; 106  |    unsigned int B4  :1;
                             2634 ; 107  |    unsigned int B5  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2635 ; 108  |    unsigned int B6  :1;
                             2636 ; 109  |    unsigned int B7  :1;
                             2637 ; 110  |    unsigned int B8  :1;
                             2638 ; 111  |    unsigned int B9  :1;
                             2639 ; 112  |    unsigned int B10 :1;
                             2640 ; 113  |    unsigned int B11 :1;
                             2641 ; 114  |    unsigned int B12 :1;
                             2642 ; 115  |    unsigned int B13 :1;
                             2643 ; 116  |    unsigned int B14 :1;
                             2644 ; 117  |    unsigned int B15 :1;
                             2645 ; 118  |    unsigned int B16 :1;
                             2646 ; 119  |    unsigned int B17 :1;
                             2647 ; 120  |    unsigned int B18 :1;
                             2648 ; 121  |    unsigned int B19 :1;
                             2649 ; 122  |    unsigned int B20 :1;
                             2650 ; 123  |    unsigned int B21 :1;
                             2651 ; 124  |    unsigned int B22 :1;
                             2652 ; 125  |    unsigned int B23 :1;
                             2653 ; 126  |};
                             2654 ; 127  |
                             2655 ; 128  |union BitInt {
                             2656 ; 129  |        struct Bitfield B;
                             2657 ; 130  |        int        I;
                             2658 ; 131  |};
                             2659 ; 132  |
                             2660 ; 133  |#define MAX_MSG_LENGTH 10
                             2661 ; 134  |struct CMessage
                             2662 ; 135  |{
                             2663 ; 136  |        unsigned int m_uLength;
                             2664 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             2665 ; 138  |};
                             2666 ; 139  |
                             2667 ; 140  |typedef struct {
                             2668 ; 141  |    WORD m_wLength;
                             2669 ; 142  |    WORD m_wMessage;
                             2670 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             2671 ; 144  |} Message;
                             2672 ; 145  |
                             2673 ; 146  |struct MessageQueueDescriptor
                             2674 ; 147  |{
                             2675 ; 148  |        int *m_pBase;
                             2676 ; 149  |        int m_iModulo;
                             2677 ; 150  |        int m_iSize;
                             2678 ; 151  |        int *m_pHead;
                             2679 ; 152  |        int *m_pTail;
                             2680 ; 153  |};
                             2681 ; 154  |
                             2682 ; 155  |struct ModuleEntry
                             2683 ; 156  |{
                             2684 ; 157  |    int m_iSignaledEventMask;
                             2685 ; 158  |    int m_iWaitEventMask;
                             2686 ; 159  |    int m_iResourceOfCode;
                             2687 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             2688 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             2689 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             2690 ; 163  |    int m_uTimeOutHigh;
                             2691 ; 164  |    int m_uTimeOutLow;
                             2692 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             2693 ; 166  |};
                             2694 ; 167  |
                             2695 ; 168  |union WaitMask{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2696 ; 169  |    struct B{
                             2697 ; 170  |        unsigned int m_bNone     :1;
                             2698 ; 171  |        unsigned int m_bMessage  :1;
                             2699 ; 172  |        unsigned int m_bTimer    :1;
                             2700 ; 173  |        unsigned int m_bButton   :1;
                             2701 ; 174  |    } B;
                             2702 ; 175  |    int I;
                             2703 ; 176  |} ;
                             2704 ; 177  |
                             2705 ; 178  |
                             2706 ; 179  |struct Button {
                             2707 ; 180  |        WORD wButtonEvent;
                             2708 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             2709 ; 182  |};
                             2710 ; 183  |
                             2711 ; 184  |struct Message {
                             2712 ; 185  |        WORD wMsgLength;
                             2713 ; 186  |        WORD wMsgCommand;
                             2714 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             2715 ; 188  |};
                             2716 ; 189  |
                             2717 ; 190  |union EventTypes {
                             2718 ; 191  |        struct CMessage msg;
                             2719 ; 192  |        struct Button Button ;
                             2720 ; 193  |        struct Message Message;
                             2721 ; 194  |};
                             2722 ; 195  |
                             2723 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             2724 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             2725 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             2726 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             2727 ; 200  |
                             2728 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             2729 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             2730 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             2731 ; 204  |
                             2732 ; 205  |#if DEBUG
                             2733 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             2734 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             2735 ; 208  |#else 
                             2736 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             2737 ; 210  |#define DebugBuildAssert(x)    
                             2738 ; 211  |#endif
                             2739 ; 212  |
                             2740 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             2741 ; 214  |//  #pragma asm
                             2742 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             2743 ; 216  |//  #pragma endasm
                             2744 ; 217  |
                             2745 ; 218  |
                             2746 ; 219  |#ifdef COLOR_262K
                             2747 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             2748 ; 221  |#elif defined(COLOR_65K)
                             2749 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             2750 ; 223  |#else
                             2751 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             2752 ; 225  |#endif
                             2753 ; 226  |    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2754 ; 227  |#endif // #ifndef _TYPES_H
                             2755 
                             2757 
                             2758 ; 8    |
                             2759 ; 9    |
                             2760 ; 10   |
                             2761 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2762 ; 12   |
                             2763 ; 13   |//   SYSTEM STMP Registers 
                             2764 ; 14   |//      Last Edited 2.19.2003 M. May
                             2765 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             2766 ; 16   |
                             2767 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             2768 ; 18   |
                             2769 ; 19   |
                             2770 ; 20   |
                             2771 ; 21   |
                             2772 ; 22   |
                             2773 ; 23   |
                             2774 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             2775 ; 25   |
                             2776 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             2777 ; 27   |
                             2778 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
                             2779 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             2780 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             2781 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             2782 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             2783 ; 33   |
                             2784 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             2785 ; 35   |
                             2786 ; 36   |
                             2787 ; 37   |
                             2788 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             2789 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             2790 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             2791 ; 41   |
                             2792 ; 42   |
                             2793 ; 43   |
                             2794 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             2795 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             2796 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                             2797 ; 47   |
                             2798 ; 48   |
                             2799 ; 49   |
                             2800 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             2801 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             2802 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             2803 ; 53   |
                             2804 ; 54   |
                             2805 ; 55   |
                             2806 ; 56   |
                             2807 ; 57   |
                             2808 ; 58   |typedef union               
                             2809 ; 59   |{
                             2810 ; 60   |    struct {
                             2811 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             2812 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             2813 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2814 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             2815 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             2816 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             2817 ; 67   |    } B;
                             2818 ; 68   |    unsigned int I;
                             2819 ; 69   |} dcdc1_ctrl0_type;
                             2820 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             2821 ; 71   |
                             2822 ; 72   |
                             2823 ; 73   |
                             2824 ; 74   |
                             2825 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             2826 ; 76   |
                             2827 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             2828 ; 78   |
                             2829 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             2830 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             2831 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             2832 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             2833 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             2834 ; 84   |
                             2835 ; 85   |
                             2836 ; 86   |
                             2837 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             2838 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             2839 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             2840 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             2841 ; 91   |
                             2842 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             2843 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             2844 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             2845 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             2846 ; 96   |
                             2847 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             2848 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             2849 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             2850 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             2851 ; 101  |
                             2852 ; 102  |
                             2853 ; 103  |typedef union               
                             2854 ; 104  |{
                             2855 ; 105  |    struct {
                             2856 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             2857 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             2858 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2859 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             2860 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             2861 ; 111  |    } B;
                             2862 ; 112  |    unsigned int I;
                             2863 ; 113  |} dcdc1_ctrl1_type;
                             2864 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             2865 ; 115  |
                             2866 ; 116  |
                             2867 ; 117  |
                             2868 ; 118  |
                             2869 ; 119  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2870 ; 120  |
                             2871 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             2872 ; 122  |
                             2873 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             2874 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             2875 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             2876 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             2877 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             2878 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             2879 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             2880 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             2881 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             2882 ; 132  |
                             2883 ; 133  |
                             2884 ; 134  |
                             2885 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             2886 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             2887 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             2888 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             2889 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             2890 ; 140  |
                             2891 ; 141  |
                             2892 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
                             2893 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             2894 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             2895 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             2896 ; 146  |
                             2897 ; 147  |
                             2898 ; 148  |
                             2899 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             2900 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             2901 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                             2902 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             2903 ; 153  |
                             2904 ; 154  |
                             2905 ; 155  |typedef union               
                             2906 ; 156  |{
                             2907 ; 157  |    struct {
                             2908 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             2909 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             2910 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             2911 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             2912 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             2913 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             2914 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             2915 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             2916 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             2917 ; 167  |    } B;
                             2918 ; 168  |    unsigned int I;
                             2919 ; 169  |} dcdc_vddio_type;
                             2920 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             2921 ; 171  |
                             2922 ; 172  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2923 ; 173  |
                             2924 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             2925 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             2926 ; 176  |
                             2927 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             2928 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             2929 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             2930 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             2931 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             2932 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             2933 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             2934 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             2935 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             2936 ; 186  |
                             2937 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             2938 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             2939 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             2940 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             2941 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             2942 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             2943 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
                             2944 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             2945 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             2946 ; 196  |
                             2947 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             2948 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             2949 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             2950 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             2951 ; 201  |
                             2952 ; 202  |typedef union               
                             2953 ; 203  |{
                             2954 ; 204  |    struct {
                             2955 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             2956 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             2957 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             2958 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             2959 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             2960 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             2961 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             2962 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             2963 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             2964 ; 214  |    } B;
                             2965 ; 215  |   unsigned int I;
                             2966 ; 216  |        unsigned U;
                             2967 ; 217  |} dcdc_vddd_type;
                             2968 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             2969 ; 219  |
                             2970 ; 220  |
                             2971 ; 221  |
                             2972 ; 222  |
                             2973 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             2974 ; 224  |
                             2975 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             2976 ; 226  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2977 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             2978 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             2979 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             2980 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             2981 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             2982 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             2983 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             2984 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             2985 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             2986 ; 236  |
                             2987 ; 237  |
                             2988 ; 238  |
                             2989 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             2990 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             2991 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             2992 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             2993 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             2994 ; 244  |
                             2995 ; 245  |
                             2996 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             2997 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
                             2998 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             2999 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             3000 ; 250  |
                             3001 ; 251  |
                             3002 ; 252  |
                             3003 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             3004 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             3005 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             3006 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             3007 ; 257  |
                             3008 ; 258  |
                             3009 ; 259  |typedef union               
                             3010 ; 260  |{
                             3011 ; 261  |    struct {
                             3012 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             3013 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             3014 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             3015 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             3016 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             3017 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             3018 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             3019 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             3020 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             3021 ; 271  |    } B;
                             3022 ; 272  |    unsigned int I;
                             3023 ; 273  |} dcdc_vdda_type;
                             3024 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             3025 ; 275  |
                             3026 ; 276  |
                             3027 ; 277  |
                             3028 ; 278  |
                             3029 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             3030 ; 280  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3031 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             3032 ; 282  |
                             3033 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             3034 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             3035 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             3036 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             3037 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             3038 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             3039 ; 289  |
                             3040 ; 290  |
                             3041 ; 291  |
                             3042 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             3043 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             3044 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             3045 ; 295  |
                             3046 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             3047 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                             3048 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                             3049 ; 299  |
                             3050 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
                             3051 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             3052 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             3053 ; 303  |
                             3054 ; 304  |
                             3055 ; 305  |typedef union               
                             3056 ; 306  |{
                             3057 ; 307  |    struct {
                             3058 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             3059 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             3060 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             3061 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             3062 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             3063 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             3064 ; 314  |    } B;
                             3065 ; 315  |    unsigned int I;
                             3066 ; 316  |} dcdc2_ctrl0_type; 
                             3067 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             3068 ; 318  |
                             3069 ; 319  |
                             3070 ; 320  |
                             3071 ; 321  |
                             3072 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             3073 ; 323  |
                             3074 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             3075 ; 325  |
                             3076 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             3077 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             3078 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             3079 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             3080 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             3081 ; 331  |
                             3082 ; 332  |
                             3083 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             3084 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             3085 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             3086 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             3087 ; 337  |
                             3088 ; 338  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3089 ; 339  |
                             3090 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                             3091 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                             3092 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                             3093 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                             3094 ; 344  |
                             3095 ; 345  |
                             3096 ; 346  |
                             3097 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             3098 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             3099 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             3100 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             3101 ; 351  |
                             3102 ; 352  |
                             3103 ; 353  |typedef union               
                             3104 ; 354  |{
                             3105 ; 355  |    struct {
                             3106 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             3107 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
                             3108 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3109 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             3110 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3111 ; 361  |    } B;
                             3112 ; 362  |    unsigned int I;
                             3113 ; 363  |} dcdc2_ctrl1_type;
                             3114 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                             3115 ; 365  |
                             3116 ; 366  |
                             3117 ; 367  |
                             3118 ; 368  |
                             3119 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             3120 ; 370  |
                             3121 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             3122 ; 372  |
                             3123 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             3124 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             3125 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             3126 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             3127 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             3128 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             3129 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             3130 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             3131 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             3132 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             3133 ; 383  |
                             3134 ; 384  |
                             3135 ; 385  |
                             3136 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             3137 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             3138 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             3139 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             3140 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             3141 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             3142 ; 392  |
                             3143 ; 393  |
                             3144 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3145 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             3146 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             3147 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             3148 ; 398  |
                             3149 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             3150 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             3151 ; 401  |
                             3152 ; 402  |
                             3153 ; 403  |
                             3154 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             3155 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             3156 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             3157 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             3158 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             3159 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             3160 ; 410  |
                             3161 ; 411  |
                             3162 ; 412  |typedef union               
                             3163 ; 413  |{
                             3164 ; 414  |    struct {
                             3165 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             3166 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             3167 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             3168 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             3169 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             3170 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             3171 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             3172 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             3173 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             3174 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             3175 ; 425  |    } B;
                             3176 ; 426  |    unsigned int I;
                             3177 ; 427  |} speed_type;
                             3178 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             3179 ; 429  |
                             3180 ; 430  |
                             3181 ; 431  |
                             3182 ; 432  |
                             3183 ; 433  |
                             3184 ; 434  |
                             3185 ; 435  |
                             3186 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             3187 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             3188 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             3189 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             3190 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             3191 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             3192 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             3193 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             3194 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             3195 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             3196 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             3197 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             3198 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             3199 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             3200 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3201 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             3202 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             3203 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             3204 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             3205 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             3206 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             3207 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             3208 ; 458  |
                             3209 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             3210 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             3211 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             3212 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             3213 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             3214 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             3215 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             3216 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             3217 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             3218 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             3219 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             3220 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             3221 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             3222 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             3223 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
                             3224 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             3225 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             3226 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             3227 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             3228 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             3229 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             3230 ; 480  |
                             3231 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             3232 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             3233 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             3234 ; 484  |
                             3235 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             3236 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             3237 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             3238 ; 488  |
                             3239 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             3240 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             3241 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             3242 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             3243 ; 493  |
                             3244 ; 494  |typedef union               
                             3245 ; 495  |{
                             3246 ; 496  |    struct {
                             3247 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             3248 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             3249 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             3250 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             3251 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             3252 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             3253 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3254 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             3255 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             3256 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             3257 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             3258 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             3259 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             3260 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             3261 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             3262 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             3263 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             3264 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             3265 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             3266 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             3267 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             3268 ; 518  |    } B;
                             3269 ; 519  |    unsigned int I;
                             3270 ; 520  |} usb_dcdctbr_type;
                             3271 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             3272 ; 522  |
                             3273 ; 523  |
                             3274 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             3275 ; 525  |
                             3276 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             3277 ; 527  |
                             3278 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             3279 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             3280 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             3281 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             3282 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             3283 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             3284 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             3285 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             3286 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             3287 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             3288 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             3289 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             3290 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             3291 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             3292 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             3293 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             3294 ; 544  |
                             3295 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             3296 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             3297 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             3298 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             3299 ; 549  |
                             3300 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             3301 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             3302 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             3303 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             3304 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             3305 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             3306 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             3307 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             3308 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             3309 ; 559  |
                             3310 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             3311 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3312 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             3313 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             3314 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             3315 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             3316 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             3317 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             3318 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             3319 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             3320 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             3321 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             3322 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             3323 ; 573  |
                             3324 ; 574  |
                             3325 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             3326 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             3327 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             3328 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             3329 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             3330 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             3331 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             3332 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             3333 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             3334 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             3335 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             3336 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             3337 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             3338 ; 588  |
                             3339 ; 589  |typedef union               
                             3340 ; 590  |{
                             3341 ; 591  |    struct {
                             3342 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             3343 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             3344 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             3345 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             3346 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             3347 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             3348 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             3349 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             3350 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             3351 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3352 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             3353 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             3354 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             3355 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             3356 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             3357 ; 607  |    } B;
                             3358 ; 608  |    unsigned int I;
                             3359 ; 609  |} usb_pwr_charge_type;
                             3360 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             3361 ; 611  |
                             3362 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             3363 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             3364 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             3365 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             3366 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             3367 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             3368 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             3369 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             3370 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             3371 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             3372 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             3373 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
                             3374 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             3375 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             3376 ; 626  |
                             3377 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             3378 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             3379 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             3380 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             3381 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             3382 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             3383 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             3384 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             3385 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             3386 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             3387 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             3388 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             3389 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             3390 ; 640  |
                             3391 ; 641  |typedef union               
                             3392 ; 642  |{
                             3393 ; 643  |    struct {       
                             3394 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             3395 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             3396 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             3397 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             3398 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             3399 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             3400 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             3401 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             3402 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             3403 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             3404 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             3405 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             3406 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             3407 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             3408 ; 658  |    } B;
                             3409 ; 659  |    int I;
                             3410 ; 660  |} usb_dcdcpersist_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3411 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             3412 ; 662  |
                             3413 ; 663  |
                             3414 ; 664  |
                             3415 ; 665  |#endif
                             3416 ; 666  |
                             3417 ; 667  |
                             3418 ; 668  |
                             3419 
                             3421 
                             3422 ; 21   |#include "regsemc.h"
                             3423 
                             3425 
                             3426 ; 1    |#if !(defined(__REGS_EMC_INC))
                             3427 ; 2    |#define __REGS_EMC_INC 1
                             3428 ; 3    |
                             3429 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3430 ; 5    |//   Module base addresses
                             3431 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3432 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             3433 ; 8    |
                             3434 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             3435 ; 10   |//  EMC Registers
                             3436 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             3437 ; 12   |
                             3438 ; 13   |
                             3439 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             3440 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             3441 ; 16   |
                             3442 ; 17   |typedef union               /*Flash Control Register*/
                             3443 ; 18   |{
                             3444 ; 19   |    struct
                             3445 ; 20   |    {
                             3446 ; 21   |    int KICK        :1;
                             3447 ; 22   |    int RW          :1;
                             3448 ; 23   |    int TCIE        :1;
                             3449 ; 24   |    int IRQP        :1;
                             3450 ; 25   |    unsigned MMD    :2;
                             3451 ; 26   |    unsigned NB     :11;
                             3452 ; 27   |    unsigned RSVD   :4;
                             3453 ; 28   |    int SRST        :1;
                             3454 ; 29   |    } B;
                             3455 ; 30   |    int I;
                             3456 ; 31   |} flcr_type;
                             3457 ; 32   |
                             3458 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             3459 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             3460 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             3461 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             3462 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             3463 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             3464 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             3465 ; 40   |
                             3466 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             3467 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             3468 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             3469 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             3470 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             3471 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             3472 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             3473 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3474 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             3475 ; 50   |
                             3476 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             3477 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             3478 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             3479 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             3480 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             3481 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             3482 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             3483 ; 58   |
                             3484 ; 59   |
                             3485 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3486 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             3487 ; 62   |
                             3488 ; 63   |typedef union           /* Flash Start Address Low*/
                             3489 ; 64   |{
                             3490 ; 65   |    struct
                             3491 ; 66   |    {
                             3492 ; 67   |    unsigned XA     : 24;
                             3493 ; 68   |    } B;
                             3494 ; 69   |    int I;
                             3495 ; 70   |} flsalr_type;
                             3496 ; 71   |
                             3497 ; 72   |#define HW_FLSALR_XA_BITPOS 0
                             3498 ; 73   |
                             3499 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             3500 ; 75   |
                             3501 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             3502 ; 77   |
                             3503 ; 78   |
                             3504 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             3505 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             3506 ; 81   |
                             3507 ; 82   |typedef union           /* Flash Start Address High*/
                             3508 ; 83   |{
                             3509 ; 84   |    struct
                             3510 ; 85   |    {
                             3511 ; 86   |    unsigned XA     :8;
                             3512 ; 87   |    unsigned DA     :16;
                             3513 ; 88   |    } B;
                             3514 ; 89   |    int I;
                             3515 ; 90   |} flsahr_type;
                             3516 ; 91   |
                             3517 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             3518 ; 93   |
                             3519 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             3520 ; 95   |
                             3521 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             3522 ; 97   |
                             3523 ; 98   |
                             3524 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             3525 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             3526 ; 101  |
                             3527 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             3528 ; 103  |{
                             3529 ; 104  |    struct
                             3530 ; 105  |    {
                             3531 ; 106  |        int WP          :1;
                             3532 ; 107  |        int CDP         :1;
                             3533 ; 108  |        unsigned SM     :2;
                             3534 ; 109  |        int XATTR       :1;
                             3535 ; 110  |        int CRST        :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3536 ; 111  |        int XWT         :1;
                             3537 ; 112  |        int RI          :1;
                             3538 ; 113  |        int IFCE        :1;
                             3539 ; 114  |        int ISCE        :1;
                             3540 ; 115  |        int INCE        :1;
                             3541 ; 116  |        int IFCS        :1;
                             3542 ; 117  |        int ISCS        :1;
                             3543 ; 118  |        int INCS        :1;
                             3544 ; 119  |        unsigned CFAI   :2;
                             3545 ; 120  |        int XDDI        :1;
                             3546 ; 121  |        unsigned CS     :2;
                             3547 ; 122  |        int CRE         :1;
                             3548 ; 123  |        unsigned VS     :2;
                             3549 ; 124  |        int DASP        :1;
                             3550 ; 125  |        int MODE16      :1; 
                             3551 ; 126  |    } B;
                             3552 ; 127  |    int I;
                             3553 ; 128  |} flcfcr_type;
                             3554 ; 129  |
                             3555 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             3556 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             3557 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             3558 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             3559 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
                             3560 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             3561 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             3562 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             3563 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             3564 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             3565 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             3566 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             3567 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             3568 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             3569 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             3570 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             3571 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             3572 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             3573 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             3574 ; 149  |
                             3575 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             3576 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             3577 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             3578 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             3579 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             3580 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             3581 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             3582 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             3583 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             3584 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             3585 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             3586 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             3587 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             3588 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             3589 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             3590 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             3591 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             3592 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             3593 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             3594 ; 169  |
                             3595 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             3596 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             3597 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3598 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             3599 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             3600 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             3601 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             3602 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             3603 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             3604 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             3605 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             3606 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             3607 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             3608 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             3609 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             3610 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             3611 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             3612 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             3613 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             3614 ; 189  |
                             3615 ; 190  |
                             3616 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             3617 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             3618 ; 193  |
                             3619 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             3620 ; 195  |{
                             3621 ; 196  |    struct
                             3622 ; 197  |    {
                             3623 ; 198  |        unsigned TRWSU  :5;
                             3624 ; 199  |        unsigned TRPW   :7;
                             3625 ; 200  |        unsigned TWPW   :7;
                             3626 ; 201  |        unsigned TRWH   :5;
                             3627 ; 202  |    } B;
                             3628 ; 203  |    int I;
                             3629 ; 204  |} flcftmr1r_type;
                             3630 ; 205  |
                             3631 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             3632 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             3633 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             3634 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             3635 ; 210  |
                             3636 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             3637 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             3638 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             3639 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             3640 ; 215  |
                             3641 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             3642 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             3643 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             3644 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             3645 ; 220  |
                             3646 ; 221  |
                             3647 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             3648 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             3649 ; 224  |
                             3650 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             3651 ; 226  |{
                             3652 ; 227  |    struct
                             3653 ; 228  |    {
                             3654 ; 229  |        unsigned TWW    :4;
                             3655 ; 230  |        unsigned TWTO   :10;
                             3656 ; 231  |        unsigned THW    :5; 
                             3657 ; 232  |        unsigned TRAQ   :5;
                             3658 ; 233  |    } B;
                             3659 ; 234  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3660 ; 235  |} flcftmr2r_type;
                             3661 ; 236  |
                             3662 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             3663 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             3664 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             3665 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             3666 ; 241  |
                             3667 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             3668 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             3669 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             3670 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             3671 ; 246  |
                             3672 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             3673 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             3674 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             3675 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             3676 ; 251  |
                             3677 ; 252  |
                             3678 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             3679 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             3680 ; 255  |
                             3681 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             3682 ; 257  |{
                             3683 ; 258  |    struct
                             3684 ; 259  |    {
                             3685 ; 260  |        unsigned CS     :2;
                             3686 ; 261  |        int SE          :1;
                             3687 ; 262  |        int WP          :1;
                             3688 ; 263  |        int SIZE        :1;
                             3689 ; 264  |        int ICMD        :8;
                             3690 ; 265  |        int TOIE        :1;
                             3691 ; 266  |        int BPIE        :1;
                             3692 ; 267  |        int TOIRQ       :1;
                             3693 ; 268  |        int BPIRQ       :1;
                             3694 ; 269  |    } B;
                             3695 ; 270  |    int I;
                             3696 ; 271  |} flsmcr_type;
                             3697 ; 272  |
                             3698 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             3699 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             3700 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             3701 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             3702 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             3703 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             3704 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             3705 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             3706 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             3707 ; 282  |
                             3708 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             3709 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             3710 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             3711 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             3712 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             3713 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             3714 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             3715 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             3716 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             3717 ; 292  |
                             3718 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             3719 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             3720 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             3721 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3722 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             3723 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             3724 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             3725 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             3726 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             3727 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             3728 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             3729 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             3730 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             3731 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             3732 ; 307  |
                             3733 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             3734 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             3735 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             3736 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             3737 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             3738 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             3739 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             3740 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             3741 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             3742 ; 317  |
                             3743 ; 318  |
                             3744 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             3745 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
                             3746 ; 321  |
                             3747 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             3748 ; 323  |{
                             3749 ; 324  |    struct
                             3750 ; 325  |    {
                             3751 ; 326  |        unsigned TRWSU  :5;
                             3752 ; 327  |        unsigned TRPW   :6;
                             3753 ; 328  |        unsigned TWPW   :6;
                             3754 ; 329  |        unsigned TRWH   :5;
                             3755 ; 330  |    } B;
                             3756 ; 331  |    int I;
                             3757 ; 332  |} flsmtmr1r_type;
                             3758 ; 333  |
                             3759 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             3760 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             3761 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             3762 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             3763 ; 338  |
                             3764 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             3765 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             3766 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             3767 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             3768 ; 343  |
                             3769 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             3770 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             3771 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             3772 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             3773 ; 348  |
                             3774 ; 349  |
                             3775 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             3776 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             3777 ; 352  |
                             3778 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             3779 ; 354  |{
                             3780 ; 355  |    struct
                             3781 ; 356  |    {
                             3782 ; 357  |        unsigned TWT    :6;
                             3783 ; 358  |        unsigned TWTO   :18;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3784 ; 359  |    } B;
                             3785 ; 360  |    int I;
                             3786 ; 361  |} flsmtmr2r_type;
                             3787 ; 362  |
                             3788 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             3789 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             3790 ; 365  |
                             3791 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             3792 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             3793 ; 368  |
                             3794 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             3795 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             3796 ; 371  |
                             3797 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             3798 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             3799 ; 374  |typedef union 
                             3800 ; 375  |{
                             3801 ; 376  |  struct
                             3802 ; 377  |  {
                             3803 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             3804 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers
                                   */
                             3805 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers
                                   */
                             3806 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             3807 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             3808 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             3809 ; 384  |    int PAD0          :17;    
                             3810 ; 385  |  } B;
                             3811 ; 386  |  int I;
                             3812 ; 387  |} flcr2_type;
                             3813 ; 388  |
                             3814 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             3815 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             3816 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             3817 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             3818 ; 393  |
                             3819 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Co
                                  ntrol Register */
                             3820 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash St
                                  art Address Low Register */
                             3821 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash St
                                  art Address High Register */
                             3822 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             3823 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Co
                                  ntrol Register2 */
                             3824 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash Co
                                  mpactFlash Control Register*/
                             3825 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Co
                                  mpact Flash Timer1 Register*/
                             3826 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Co
                                  mpact Flash Timer2 Register*/
                             3827 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash Sm
                                  artMedia Control Register*/
                             3828 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash Sm
                                  artMedia Timer1 Register*/
                             3829 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash Sm
                                  artMedia Timer2 Register*/
                             3830 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             3831 ; 406  |
                             3832 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3833 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             3834 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             3835 ; 410  |
                             3836 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             3837 ; 412  |
                             3838 ; 413  |#endif
                             3839 ; 414  |
                             3840 
                             3842 
                             3843 ; 22   |#include "regsgpio.h"
                             3844 
                             3846 
                             3847 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             3848 ; 2    |#define __REGS_GPIO_INC 1
                             3849 ; 3    |
                             3850 ; 4    |#include "types.h"
                             3851 
                             3853 
                             3854 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3855 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3856 ; 3    |//
                             3857 ; 4    |// Filename: types.h
                             3858 ; 5    |// Description: Standard data types
                             3859 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3860 ; 7    |
                             3861 ; 8    |#ifndef _TYPES_H
                             3862 ; 9    |#define _TYPES_H
                             3863 ; 10   |
                             3864 ; 11   |// TODO:  move this outta here!
                             3865 ; 12   |#if !defined(NOERROR)
                             3866 ; 13   |#define NOERROR 0
                             3867 ; 14   |#define SUCCESS 0
                             3868 ; 15   |#endif 
                             3869 ; 16   |#if !defined(SUCCESS)
                             3870 ; 17   |#define SUCCESS  0
                             3871 ; 18   |#endif
                             3872 ; 19   |#if !defined(ERROR)
                             3873 ; 20   |#define ERROR   -1
                             3874 ; 21   |#endif
                             3875 ; 22   |#if !defined(FALSE)
                             3876 ; 23   |#define FALSE 0
                             3877 ; 24   |#endif
                             3878 ; 25   |#if !defined(TRUE)
                             3879 ; 26   |#define TRUE  1
                             3880 ; 27   |#endif
                             3881 ; 28   |
                             3882 ; 29   |#if !defined(NULL)
                             3883 ; 30   |#define NULL 0
                             3884 ; 31   |#endif
                             3885 ; 32   |
                             3886 ; 33   |#define MAX_INT     0x7FFFFF
                             3887 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3888 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3889 ; 36   |#define MAX_ULONG   (-1) 
                             3890 ; 37   |
                             3891 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3892 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3893 ; 40   |
                             3894 ; 41   |
                             3895 ; 42   |#define BYTE    unsigned char       // btVarName
                             3896 ; 43   |#define CHAR    signed char         // cVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3897 ; 44   |#define USHORT  unsigned short      // usVarName
                             3898 ; 45   |#define SHORT   unsigned short      // sVarName
                             3899 ; 46   |#define WORD    unsigned int        // wVarName
                             3900 ; 47   |#define INT     signed int          // iVarName
                             3901 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3902 ; 49   |#define LONG    signed long         // lVarName
                             3903 ; 50   |#define BOOL    unsigned int        // bVarName
                             3904 ; 51   |#define FRACT   _fract              // frVarName
                             3905 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3906 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3907 ; 54   |#define FLOAT   float               // fVarName
                             3908 ; 55   |#define DBL     double              // dVarName
                             3909 ; 56   |#define ENUM    enum                // eVarName
                             3910 ; 57   |#define CMX     _complex            // cmxVarName
                             3911 ; 58   |typedef WORD UCS3;                   // 
                             3912 ; 59   |
                             3913 ; 60   |#define UINT16  unsigned short
                             3914 ; 61   |#define UINT8   unsigned char   
                             3915 ; 62   |#define UINT32  unsigned long
                             3916 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3917 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3918 ; 65   |#define WCHAR   UINT16
                             3919 ; 66   |
                             3920 ; 67   |//UINT128 is 16 bytes or 6 words
                             3921 ; 68   |typedef struct UINT128_3500 {   
                             3922 ; 69   |    int val[6];     
                             3923 ; 70   |} UINT128_3500;
                             3924 ; 71   |
                             3925 ; 72   |#define UINT128   UINT128_3500
                             3926 ; 73   |
                             3927 ; 74   |// Little endian word packed byte strings:   
                             3928 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3929 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3930 ; 77   |// Little endian word packed byte strings:   
                             3931 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3932 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3933 ; 80   |
                             3934 ; 81   |// Declare Memory Spaces To Use When Coding
                             3935 ; 82   |// A. Sector Buffers
                             3936 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3937 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3938 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3939 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3940 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3941 ; 88   |// B. Media DDI Memory
                             3942 ; 89   |#define MEDIA_DDI_MEM _Y
                             3943 ; 90   |
                             3944 ; 91   |
                             3945 ; 92   |
                             3946 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3947 ; 94   |// Examples of circular pointers:
                             3948 ; 95   |//    INT CIRC cpiVarName
                             3949 ; 96   |//    DWORD CIRC cpdwVarName
                             3950 ; 97   |
                             3951 ; 98   |#define RETCODE INT                 // rcVarName
                             3952 ; 99   |
                             3953 ; 100  |// generic bitfield structure
                             3954 ; 101  |struct Bitfield {
                             3955 ; 102  |    unsigned int B0  :1;
                             3956 ; 103  |    unsigned int B1  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3957 ; 104  |    unsigned int B2  :1;
                             3958 ; 105  |    unsigned int B3  :1;
                             3959 ; 106  |    unsigned int B4  :1;
                             3960 ; 107  |    unsigned int B5  :1;
                             3961 ; 108  |    unsigned int B6  :1;
                             3962 ; 109  |    unsigned int B7  :1;
                             3963 ; 110  |    unsigned int B8  :1;
                             3964 ; 111  |    unsigned int B9  :1;
                             3965 ; 112  |    unsigned int B10 :1;
                             3966 ; 113  |    unsigned int B11 :1;
                             3967 ; 114  |    unsigned int B12 :1;
                             3968 ; 115  |    unsigned int B13 :1;
                             3969 ; 116  |    unsigned int B14 :1;
                             3970 ; 117  |    unsigned int B15 :1;
                             3971 ; 118  |    unsigned int B16 :1;
                             3972 ; 119  |    unsigned int B17 :1;
                             3973 ; 120  |    unsigned int B18 :1;
                             3974 ; 121  |    unsigned int B19 :1;
                             3975 ; 122  |    unsigned int B20 :1;
                             3976 ; 123  |    unsigned int B21 :1;
                             3977 ; 124  |    unsigned int B22 :1;
                             3978 ; 125  |    unsigned int B23 :1;
                             3979 ; 126  |};
                             3980 ; 127  |
                             3981 ; 128  |union BitInt {
                             3982 ; 129  |        struct Bitfield B;
                             3983 ; 130  |        int        I;
                             3984 ; 131  |};
                             3985 ; 132  |
                             3986 ; 133  |#define MAX_MSG_LENGTH 10
                             3987 ; 134  |struct CMessage
                             3988 ; 135  |{
                             3989 ; 136  |        unsigned int m_uLength;
                             3990 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3991 ; 138  |};
                             3992 ; 139  |
                             3993 ; 140  |typedef struct {
                             3994 ; 141  |    WORD m_wLength;
                             3995 ; 142  |    WORD m_wMessage;
                             3996 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3997 ; 144  |} Message;
                             3998 ; 145  |
                             3999 ; 146  |struct MessageQueueDescriptor
                             4000 ; 147  |{
                             4001 ; 148  |        int *m_pBase;
                             4002 ; 149  |        int m_iModulo;
                             4003 ; 150  |        int m_iSize;
                             4004 ; 151  |        int *m_pHead;
                             4005 ; 152  |        int *m_pTail;
                             4006 ; 153  |};
                             4007 ; 154  |
                             4008 ; 155  |struct ModuleEntry
                             4009 ; 156  |{
                             4010 ; 157  |    int m_iSignaledEventMask;
                             4011 ; 158  |    int m_iWaitEventMask;
                             4012 ; 159  |    int m_iResourceOfCode;
                             4013 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4014 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4015 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4016 ; 163  |    int m_uTimeOutHigh;
                             4017 ; 164  |    int m_uTimeOutLow;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4018 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4019 ; 166  |};
                             4020 ; 167  |
                             4021 ; 168  |union WaitMask{
                             4022 ; 169  |    struct B{
                             4023 ; 170  |        unsigned int m_bNone     :1;
                             4024 ; 171  |        unsigned int m_bMessage  :1;
                             4025 ; 172  |        unsigned int m_bTimer    :1;
                             4026 ; 173  |        unsigned int m_bButton   :1;
                             4027 ; 174  |    } B;
                             4028 ; 175  |    int I;
                             4029 ; 176  |} ;
                             4030 ; 177  |
                             4031 ; 178  |
                             4032 ; 179  |struct Button {
                             4033 ; 180  |        WORD wButtonEvent;
                             4034 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4035 ; 182  |};
                             4036 ; 183  |
                             4037 ; 184  |struct Message {
                             4038 ; 185  |        WORD wMsgLength;
                             4039 ; 186  |        WORD wMsgCommand;
                             4040 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4041 ; 188  |};
                             4042 ; 189  |
                             4043 ; 190  |union EventTypes {
                             4044 ; 191  |        struct CMessage msg;
                             4045 ; 192  |        struct Button Button ;
                             4046 ; 193  |        struct Message Message;
                             4047 ; 194  |};
                             4048 ; 195  |
                             4049 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4050 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4051 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4052 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4053 ; 200  |
                             4054 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4055 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4056 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4057 ; 204  |
                             4058 ; 205  |#if DEBUG
                             4059 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4060 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4061 ; 208  |#else 
                             4062 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4063 ; 210  |#define DebugBuildAssert(x)    
                             4064 ; 211  |#endif
                             4065 ; 212  |
                             4066 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4067 ; 214  |//  #pragma asm
                             4068 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4069 ; 216  |//  #pragma endasm
                             4070 ; 217  |
                             4071 ; 218  |
                             4072 ; 219  |#ifdef COLOR_262K
                             4073 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4074 ; 221  |#elif defined(COLOR_65K)
                             4075 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4076 ; 223  |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4077 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4078 ; 225  |#endif
                             4079 ; 226  |    
                             4080 ; 227  |#endif // #ifndef _TYPES_H
                             4081 
                             4083 
                             4084 ; 5    |
                             4085 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4086 ; 7    |//  Interrupt Collector Registers
                             4087 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             4088 ; 9    |
                             4089 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             4090 ; 11   |
                             4091 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             4092 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             4093 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             4094 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             4095 ; 16   |
                             4096 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             4097 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             4098 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             4099 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             4100 ; 21   |
                             4101 ; 22   |#define HW_GPB_GPENR 0
                             4102 ; 23   |#define HW_GPB_GPDOR 1
                             4103 ; 24   |#define HW_GPB_GPDIR 2
                             4104 ; 25   |#define HW_GPB_GPDOER 3
                             4105 ; 26   |#define HW_GPB_GPIPENR 4
                             4106 ; 27   |#define HW_GPB_GPIENR 5
                             4107 ; 28   |#define HW_GPB_GPILVLR 6
                             4108 ; 29   |#define HW_GPB_GPIPOLR 7
                             4109 ; 30   |#define HW_GPB_GPISTATR 8
                             4110 ; 31   |#define HW_GPB_GPPWR 9
                             4111 ; 32   |#define HW_GPB_GP8MA 10
                             4112 ; 33   |
                             4113 ; 34   |
                             4114 ; 35   |
                             4115 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             4116 ; 37   |//  GPIO Register Bit Positions
                             4117 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             4118 ; 39   |{
                             4119 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             4120 ; 41   |    unsigned int I;
                             4121 ; 42   |    unsigned int U;
                             4122 ; 43   |} gpr_type;
                             4123 ; 44   |
                             4124 ; 45   |#define HW_GP_B0_BITPOS 0
                             4125 ; 46   |#define HW_GP_B1_BITPOS 1
                             4126 ; 47   |#define HW_GP_B2_BITPOS 2
                             4127 ; 48   |#define HW_GP_B3_BITPOS 3
                             4128 ; 49   |#define HW_GP_B4_BITPOS 4
                             4129 ; 50   |#define HW_GP_B5_BITPOS 5
                             4130 ; 51   |#define HW_GP_B6_BITPOS 6
                             4131 ; 52   |#define HW_GP_B7_BITPOS 7
                             4132 ; 53   |#define HW_GP_B8_BITPOS 8
                             4133 ; 54   |#define HW_GP_B9_BITPOS 9
                             4134 ; 55   |#define HW_GP_B10_BITPOS 10
                             4135 ; 56   |#define HW_GP_B11_BITPOS 11
                             4136 ; 57   |#define HW_GP_B12_BITPOS 12
                             4137 ; 58   |#define HW_GP_B13_BITPOS 13
                             4138 ; 59   |#define HW_GP_B14_BITPOS 14
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4139 ; 60   |#define HW_GP_B15_BITPOS 15
                             4140 ; 61   |#define HW_GP_B16_BITPOS 16
                             4141 ; 62   |#define HW_GP_B17_BITPOS 17
                             4142 ; 63   |#define HW_GP_B18_BITPOS 18
                             4143 ; 64   |#define HW_GP_B19_BITPOS 19
                             4144 ; 65   |#define HW_GP_B20_BITPOS 20
                             4145 ; 66   |#define HW_GP_B21_BITPOS 21
                             4146 ; 67   |#define HW_GP_B22_BITPOS 22
                             4147 ; 68   |#define HW_GP_B23_BITPOS 23
                             4148 ; 69   |
                             4149 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             4150 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             4151 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             4152 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             4153 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             4154 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             4155 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             4156 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             4157 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             4158 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             4159 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4160 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4161 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4162 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
                             4163 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4164 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4165 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4166 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4167 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4168 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4169 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4170 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4171 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4172 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4173 ; 94   |
                             4174 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4175 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4176 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4177 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4178 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4179 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4180 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4181 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4182 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             4183 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4184 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4185 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4186 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4187 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4188 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4189 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4190 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4191 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4192 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4193 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4194 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             4195 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4196 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4197 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4198 ; 119  |
                             4199 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4200 ; 121  |//  GPIO 8mA Register Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4201 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4202 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4203 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4204 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4205 ; 126  |
                             4206 ; 127  |
                             4207 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4208 ; 129  |//  Logical GPIO numbers
                             4209 ; 130  |#define HW_GPIO_000 0
                             4210 ; 131  |#define HW_GPIO_001 1
                             4211 ; 132  |#define HW_GPIO_002 2
                             4212 ; 133  |#define HW_GPIO_003 3
                             4213 ; 134  |#define HW_GPIO_004 4
                             4214 ; 135  |#define HW_GPIO_005 5
                             4215 ; 136  |#define HW_GPIO_006 6
                             4216 ; 137  |#define HW_GPIO_007 7
                             4217 ; 138  |#define HW_GPIO_008 8
                             4218 ; 139  |#define HW_GPIO_009 9
                             4219 ; 140  |#define HW_GPIO_010 10
                             4220 ; 141  |#define HW_GPIO_011 11
                             4221 ; 142  |#define HW_GPIO_012 12
                             4222 ; 143  |#define HW_GPIO_013 13
                             4223 ; 144  |#define HW_GPIO_014 14
                             4224 ; 145  |#define HW_GPIO_015 15
                             4225 ; 146  |#define HW_GPIO_016 16
                             4226 ; 147  |#define HW_GPIO_017 17
                             4227 ; 148  |#define HW_GPIO_018 18
                             4228 ; 149  |#define HW_GPIO_019 19
                             4229 ; 150  |#define HW_GPIO_020 20
                             4230 ; 151  |#define HW_GPIO_021 21
                             4231 ; 152  |#define HW_GPIO_022 22
                             4232 ; 153  |#define HW_GPIO_023 23
                             4233 ; 154  |#define HW_GPIO_024 24
                             4234 ; 155  |#define HW_GPIO_025 25
                             4235 ; 156  |#define HW_GPIO_026 26
                             4236 ; 157  |#define HW_GPIO_027 27
                             4237 ; 158  |#define HW_GPIO_028 28
                             4238 ; 159  |#define HW_GPIO_029 29
                             4239 ; 160  |#define HW_GPIO_030 30
                             4240 ; 161  |#define HW_GPIO_031 31
                             4241 ; 162  |#define HW_GPIO_032 32
                             4242 ; 163  |#define HW_GPIO_033 33
                             4243 ; 164  |#define HW_GPIO_034 34
                             4244 ; 165  |#define HW_GPIO_035 35
                             4245 ; 166  |#define HW_GPIO_036 36
                             4246 ; 167  |#define HW_GPIO_037 37
                             4247 ; 168  |#define HW_GPIO_038 38
                             4248 ; 169  |#define HW_GPIO_039 39
                             4249 ; 170  |#define HW_GPIO_040 40
                             4250 ; 171  |#define HW_GPIO_041 41
                             4251 ; 172  |#define HW_GPIO_042 42
                             4252 ; 173  |#define HW_GPIO_043 43
                             4253 ; 174  |#define HW_GPIO_044 44
                             4254 ; 175  |#define HW_GPIO_045 45
                             4255 ; 176  |#define HW_GPIO_046 46
                             4256 ; 177  |#define HW_GPIO_047 47
                             4257 ; 178  |#define HW_GPIO_048 48
                             4258 ; 179  |#define HW_GPIO_049 49
                             4259 ; 180  |#define HW_GPIO_050 50
                             4260 ; 181  |#define HW_GPIO_051 51
                             4261 ; 182  |#define HW_GPIO_052 52
                             4262 ; 183  |#define HW_GPIO_053 53
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4263 ; 184  |#define HW_GPIO_054 54
                             4264 ; 185  |#define HW_GPIO_055 55
                             4265 ; 186  |#define HW_GPIO_056 56
                             4266 ; 187  |#define HW_GPIO_057 57
                             4267 ; 188  |#define HW_GPIO_058 58
                             4268 ; 189  |#define HW_GPIO_059 59
                             4269 ; 190  |#define HW_GPIO_060 60
                             4270 ; 191  |#define HW_GPIO_061 61
                             4271 ; 192  |#define HW_GPIO_062 62
                             4272 ; 193  |#define HW_GPIO_063 63
                             4273 ; 194  |#define HW_GPIO_064 64
                             4274 ; 195  |#define HW_GPIO_065 65
                             4275 ; 196  |#define HW_GPIO_066 66
                             4276 ; 197  |#define HW_GPIO_067 67
                             4277 ; 198  |#define HW_GPIO_068 68
                             4278 ; 199  |#define HW_GPIO_069 69
                             4279 ; 200  |#define HW_GPIO_070 70
                             4280 ; 201  |#define HW_GPIO_071 71
                             4281 ; 202  |#define HW_GPIO_072 72
                             4282 ; 203  |#define HW_GPIO_073 73
                             4283 ; 204  |#define HW_GPIO_074 74
                             4284 ; 205  |#define HW_GPIO_075 75
                             4285 ; 206  |#define HW_GPIO_076 76
                             4286 ; 207  |#define HW_GPIO_077 77
                             4287 ; 208  |#define HW_GPIO_078 78
                             4288 ; 209  |#define HW_GPIO_079 79
                             4289 ; 210  |#define HW_GPIO_080 80
                             4290 ; 211  |#define HW_GPIO_081 81
                             4291 ; 212  |#define HW_GPIO_082 82
                             4292 ; 213  |#define HW_GPIO_083 83
                             4293 ; 214  |#define HW_GPIO_084 84
                             4294 ; 215  |#define HW_GPIO_085 85
                             4295 ; 216  |#define HW_GPIO_086 86
                             4296 ; 217  |#define HW_GPIO_087 87
                             4297 ; 218  |#define HW_GPIO_088 88
                             4298 ; 219  |#define HW_GPIO_089 89
                             4299 ; 220  |#define HW_GPIO_090 90
                             4300 ; 221  |#define HW_GPIO_091 91
                             4301 ; 222  |#define HW_GPIO_092 92
                             4302 ; 223  |#define HW_GPIO_093 93
                             4303 ; 224  |#define HW_GPIO_094 94
                             4304 ; 225  |#define HW_GPIO_095 95
                             4305 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4306 ; 227  |
                             4307 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             4308 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             4309 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             4310 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             4311 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             4312 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             4313 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             4314 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             4315 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4316 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4317 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4318 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             4319 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             4320 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             4321 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             4322 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             4323 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             4324 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             4325 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             4326 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             4327 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4328 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
                             4329 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4330 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4331 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4332 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4333 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4334 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4335 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4336 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4337 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4338 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4339 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4340 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4341 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4342 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4343 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4344 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4345 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4346 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4347 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4348 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4349 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4350 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4351 ; 272  |
                             4352 ; 273  |#endif
                             4353 ; 274  |
                             4354 
                             4356 
                             4357 ; 23   |#include "regsi2c.h"
                             4358 
                             4360 
                             4361 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4362 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4363 ; 3    |// Filename: regsI2C.inc
                             4364 ; 4    |// Description: Register definitions for GPFLASH interface
                             4365 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4366 ; 6    |// The following naming conventions are followed in this file.
                             4367 ; 7    |// All registers are named using the format...
                             4368 ; 8    |//     HW_<module>_<regname>
                             4369 ; 9    |// where <module> is the module name which can be any of the following...
                             4370 ; 10   |//     USB20
                             4371 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4372 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4373 ; 13   |// that module)
                             4374 ; 14   |// <regname> is the specific register within that module
                             4375 ; 15   |// We also define the following...
                             4376 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4377 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4378 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4379 ; 19   |// which does something else, and
                             4380 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4381 ; 21   |// which does something else.
                             4382 ; 22   |// Other rules
                             4383 ; 23   |//     All caps
                             4384 ; 24   |//     Numeric identifiers start at 0
                             4385 ; 25   |#if !(defined(regsi2cinc))
                             4386 ; 26   |#define regsi2cinc 1
                             4387 ; 27   |
                             4388 ; 28   |#include "types.h"
                             4389 
                             4391 
                             4392 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4393 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4394 ; 3    |//
                             4395 ; 4    |// Filename: types.h
                             4396 ; 5    |// Description: Standard data types
                             4397 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4398 ; 7    |
                             4399 ; 8    |#ifndef _TYPES_H
                             4400 ; 9    |#define _TYPES_H
                             4401 ; 10   |
                             4402 ; 11   |// TODO:  move this outta here!
                             4403 ; 12   |#if !defined(NOERROR)
                             4404 ; 13   |#define NOERROR 0
                             4405 ; 14   |#define SUCCESS 0
                             4406 ; 15   |#endif 
                             4407 ; 16   |#if !defined(SUCCESS)
                             4408 ; 17   |#define SUCCESS  0
                             4409 ; 18   |#endif
                             4410 ; 19   |#if !defined(ERROR)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4411 ; 20   |#define ERROR   -1
                             4412 ; 21   |#endif
                             4413 ; 22   |#if !defined(FALSE)
                             4414 ; 23   |#define FALSE 0
                             4415 ; 24   |#endif
                             4416 ; 25   |#if !defined(TRUE)
                             4417 ; 26   |#define TRUE  1
                             4418 ; 27   |#endif
                             4419 ; 28   |
                             4420 ; 29   |#if !defined(NULL)
                             4421 ; 30   |#define NULL 0
                             4422 ; 31   |#endif
                             4423 ; 32   |
                             4424 ; 33   |#define MAX_INT     0x7FFFFF
                             4425 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4426 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4427 ; 36   |#define MAX_ULONG   (-1) 
                             4428 ; 37   |
                             4429 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4430 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4431 ; 40   |
                             4432 ; 41   |
                             4433 ; 42   |#define BYTE    unsigned char       // btVarName
                             4434 ; 43   |#define CHAR    signed char         // cVarName
                             4435 ; 44   |#define USHORT  unsigned short      // usVarName
                             4436 ; 45   |#define SHORT   unsigned short      // sVarName
                             4437 ; 46   |#define WORD    unsigned int        // wVarName
                             4438 ; 47   |#define INT     signed int          // iVarName
                             4439 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4440 ; 49   |#define LONG    signed long         // lVarName
                             4441 ; 50   |#define BOOL    unsigned int        // bVarName
                             4442 ; 51   |#define FRACT   _fract              // frVarName
                             4443 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4444 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4445 ; 54   |#define FLOAT   float               // fVarName
                             4446 ; 55   |#define DBL     double              // dVarName
                             4447 ; 56   |#define ENUM    enum                // eVarName
                             4448 ; 57   |#define CMX     _complex            // cmxVarName
                             4449 ; 58   |typedef WORD UCS3;                   // 
                             4450 ; 59   |
                             4451 ; 60   |#define UINT16  unsigned short
                             4452 ; 61   |#define UINT8   unsigned char   
                             4453 ; 62   |#define UINT32  unsigned long
                             4454 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4455 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4456 ; 65   |#define WCHAR   UINT16
                             4457 ; 66   |
                             4458 ; 67   |//UINT128 is 16 bytes or 6 words
                             4459 ; 68   |typedef struct UINT128_3500 {   
                             4460 ; 69   |    int val[6];     
                             4461 ; 70   |} UINT128_3500;
                             4462 ; 71   |
                             4463 ; 72   |#define UINT128   UINT128_3500
                             4464 ; 73   |
                             4465 ; 74   |// Little endian word packed byte strings:   
                             4466 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4467 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4468 ; 77   |// Little endian word packed byte strings:   
                             4469 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4470 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4471 ; 80   |
                             4472 ; 81   |// Declare Memory Spaces To Use When Coding
                             4473 ; 82   |// A. Sector Buffers
                             4474 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4475 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4476 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4477 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4478 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4479 ; 88   |// B. Media DDI Memory
                             4480 ; 89   |#define MEDIA_DDI_MEM _Y
                             4481 ; 90   |
                             4482 ; 91   |
                             4483 ; 92   |
                             4484 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4485 ; 94   |// Examples of circular pointers:
                             4486 ; 95   |//    INT CIRC cpiVarName
                             4487 ; 96   |//    DWORD CIRC cpdwVarName
                             4488 ; 97   |
                             4489 ; 98   |#define RETCODE INT                 // rcVarName
                             4490 ; 99   |
                             4491 ; 100  |// generic bitfield structure
                             4492 ; 101  |struct Bitfield {
                             4493 ; 102  |    unsigned int B0  :1;
                             4494 ; 103  |    unsigned int B1  :1;
                             4495 ; 104  |    unsigned int B2  :1;
                             4496 ; 105  |    unsigned int B3  :1;
                             4497 ; 106  |    unsigned int B4  :1;
                             4498 ; 107  |    unsigned int B5  :1;
                             4499 ; 108  |    unsigned int B6  :1;
                             4500 ; 109  |    unsigned int B7  :1;
                             4501 ; 110  |    unsigned int B8  :1;
                             4502 ; 111  |    unsigned int B9  :1;
                             4503 ; 112  |    unsigned int B10 :1;
                             4504 ; 113  |    unsigned int B11 :1;
                             4505 ; 114  |    unsigned int B12 :1;
                             4506 ; 115  |    unsigned int B13 :1;
                             4507 ; 116  |    unsigned int B14 :1;
                             4508 ; 117  |    unsigned int B15 :1;
                             4509 ; 118  |    unsigned int B16 :1;
                             4510 ; 119  |    unsigned int B17 :1;
                             4511 ; 120  |    unsigned int B18 :1;
                             4512 ; 121  |    unsigned int B19 :1;
                             4513 ; 122  |    unsigned int B20 :1;
                             4514 ; 123  |    unsigned int B21 :1;
                             4515 ; 124  |    unsigned int B22 :1;
                             4516 ; 125  |    unsigned int B23 :1;
                             4517 ; 126  |};
                             4518 ; 127  |
                             4519 ; 128  |union BitInt {
                             4520 ; 129  |        struct Bitfield B;
                             4521 ; 130  |        int        I;
                             4522 ; 131  |};
                             4523 ; 132  |
                             4524 ; 133  |#define MAX_MSG_LENGTH 10
                             4525 ; 134  |struct CMessage
                             4526 ; 135  |{
                             4527 ; 136  |        unsigned int m_uLength;
                             4528 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4529 ; 138  |};
                             4530 ; 139  |
                             4531 ; 140  |typedef struct {
                             4532 ; 141  |    WORD m_wLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4533 ; 142  |    WORD m_wMessage;
                             4534 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4535 ; 144  |} Message;
                             4536 ; 145  |
                             4537 ; 146  |struct MessageQueueDescriptor
                             4538 ; 147  |{
                             4539 ; 148  |        int *m_pBase;
                             4540 ; 149  |        int m_iModulo;
                             4541 ; 150  |        int m_iSize;
                             4542 ; 151  |        int *m_pHead;
                             4543 ; 152  |        int *m_pTail;
                             4544 ; 153  |};
                             4545 ; 154  |
                             4546 ; 155  |struct ModuleEntry
                             4547 ; 156  |{
                             4548 ; 157  |    int m_iSignaledEventMask;
                             4549 ; 158  |    int m_iWaitEventMask;
                             4550 ; 159  |    int m_iResourceOfCode;
                             4551 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4552 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4553 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4554 ; 163  |    int m_uTimeOutHigh;
                             4555 ; 164  |    int m_uTimeOutLow;
                             4556 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4557 ; 166  |};
                             4558 ; 167  |
                             4559 ; 168  |union WaitMask{
                             4560 ; 169  |    struct B{
                             4561 ; 170  |        unsigned int m_bNone     :1;
                             4562 ; 171  |        unsigned int m_bMessage  :1;
                             4563 ; 172  |        unsigned int m_bTimer    :1;
                             4564 ; 173  |        unsigned int m_bButton   :1;
                             4565 ; 174  |    } B;
                             4566 ; 175  |    int I;
                             4567 ; 176  |} ;
                             4568 ; 177  |
                             4569 ; 178  |
                             4570 ; 179  |struct Button {
                             4571 ; 180  |        WORD wButtonEvent;
                             4572 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4573 ; 182  |};
                             4574 ; 183  |
                             4575 ; 184  |struct Message {
                             4576 ; 185  |        WORD wMsgLength;
                             4577 ; 186  |        WORD wMsgCommand;
                             4578 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4579 ; 188  |};
                             4580 ; 189  |
                             4581 ; 190  |union EventTypes {
                             4582 ; 191  |        struct CMessage msg;
                             4583 ; 192  |        struct Button Button ;
                             4584 ; 193  |        struct Message Message;
                             4585 ; 194  |};
                             4586 ; 195  |
                             4587 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4588 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4589 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4590 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4591 ; 200  |
                             4592 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4593 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4594 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4595 ; 204  |
                             4596 ; 205  |#if DEBUG
                             4597 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4598 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4599 ; 208  |#else 
                             4600 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4601 ; 210  |#define DebugBuildAssert(x)    
                             4602 ; 211  |#endif
                             4603 ; 212  |
                             4604 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4605 ; 214  |//  #pragma asm
                             4606 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4607 ; 216  |//  #pragma endasm
                             4608 ; 217  |
                             4609 ; 218  |
                             4610 ; 219  |#ifdef COLOR_262K
                             4611 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4612 ; 221  |#elif defined(COLOR_65K)
                             4613 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4614 ; 223  |#else
                             4615 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4616 ; 225  |#endif
                             4617 ; 226  |    
                             4618 ; 227  |#endif // #ifndef _TYPES_H
                             4619 
                             4621 
                             4622 ; 29   |
                             4623 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             4624 ; 31   |////   I2C STMP Registers
                             4625 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             4626 ; 33   |
                             4627 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             4628 ; 35   |
                             4629 ; 36   |
                             4630 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             4631 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             4632 ; 39   |
                             4633 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             4634 ; 41   |
                             4635 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             4636 ; 43   |
                             4637 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             4638 ; 45   |
                             4639 ; 46   |typedef union               /* I2C Clock Divider Register */
                             4640 ; 47   |{
                             4641 ; 48   |    struct {
                             4642 ; 49   |        int                :1; 
                             4643 ; 50   |        unsigned FACT      :8;
                             4644 ; 51   |    } B;
                             4645 ; 52   |    int I;
                             4646 ; 53   |    unsigned U;
                             4647 ; 54   |} i2cdivr_type;
                             4648 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Re
                                  gisters        */
                             4649 ; 56   |
                             4650 ; 57   |
                             4651 ; 58   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4652 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             4653 ; 60   |
                             4654 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             4655 ; 62   |
                             4656 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             4657 ; 64   |
                             4658 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             4659 ; 66   |
                             4660 ; 67   |typedef union               /* I2C Data Register */
                             4661 ; 68   |{
                             4662 ; 69   |    struct {
                             4663 ; 70   |         unsigned DATA :24; 
                             4664 ; 71   |    } B;
                             4665 ; 72   |    int I;
                             4666 ; 73   |    unsigned U;
                             4667 ; 74   |} i2cdatr_type;
                             4668 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers
                                   (I2CDAT)      */
                             4669 ; 76   |
                             4670 ; 77   |
                             4671 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             4672 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             4673 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             4674 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
                             4675 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             4676 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             4677 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             4678 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             4679 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             4680 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             4681 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             4682 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             4683 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             4684 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             4685 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             4686 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             4687 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             4688 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             4689 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             4690 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             4691 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             4692 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             4693 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             4694 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             4695 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             4696 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             4697 ; 104  |
                             4698 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             4699 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             4700 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             4701 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             4702 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             4703 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             4704 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             4705 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             4706 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             4707 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             4708 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             4709 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             4710 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             4711 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             4712 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4713 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             4714 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             4715 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             4716 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             4717 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             4718 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             4719 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             4720 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             4721 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             4722 ; 129  |
                             4723 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             4724 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             4725 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             4726 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             4727 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             4728 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             4729 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             4730 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             4731 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             4732 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             4733 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             4734 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             4735 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             4736 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
                             4737 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             4738 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             4739 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             4740 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             4741 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             4742 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             4743 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             4744 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             4745 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             4746 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             4747 ; 154  |
                             4748 ; 155  |typedef union               /* I2C Control Register         */
                             4749 ; 156  |{
                             4750 ; 157  |    struct {
                             4751 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             4752 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             4753 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             4754 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             4755 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             4756 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             4757 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             4758 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             4759 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             4760 ; 167  |       unsigned WL     :2; /* Word Length              */
                             4761 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             4762 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             4763 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             4764 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             4765 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             4766 ; 173  |        int LWORD       :1; /* Last Word                */
                             4767 ; 174  |        int SUBA        :1; /* Sub Address              */
                             4768 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             4769 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             4770 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             4771 ; 178  |    } B;
                             4772 ; 179  |    int I;
                             4773 ; 180  |    unsigned U;
                             4774 ; 181  |} i2ccsr_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4775 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status 
                                  Register (I2CCSR) */
                             4776 ; 183  |
                             4777 ; 184  |#endif
                             4778 
                             4780 
                             4781 ; 24   |#include "regsi2s.h"
                             4782 
                             4784 
                             4785 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4786 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4787 ; 3    |// Filename: regsi2s.inc
                             4788 ; 4    |// Description: Register definitions for I2S interface
                             4789 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4790 ; 6    |// The following naming conventions are followed in this file.
                             4791 ; 7    |// All registers are named using the format...
                             4792 ; 8    |//     HW_<module>_<regname>
                             4793 ; 9    |// where <module> is the module name which can be any of the following...
                             4794 ; 10   |//     USB20
                             4795 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4796 ; 12   |// module name includes a number starting from 0 for the first instance of
                             4797 ; 13   |// that module)
                             4798 ; 14   |// <regname> is the specific register within that module
                             4799 ; 15   |// We also define the following...
                             4800 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4801 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4802 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4803 ; 19   |// which does something else, and
                             4804 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4805 ; 21   |// which does something else.
                             4806 ; 22   |// Other rules
                             4807 ; 23   |//     All caps
                             4808 ; 24   |//     Numeric identifiers start at 0
                             4809 ; 25   |#if !(defined(regsi2sinc))
                             4810 ; 26   |#define regsi2sinc 1
                             4811 ; 27   |
                             4812 ; 28   |#include "types.h"
                             4813 
                             4815 
                             4816 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4817 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4818 ; 3    |//
                             4819 ; 4    |// Filename: types.h
                             4820 ; 5    |// Description: Standard data types
                             4821 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4822 ; 7    |
                             4823 ; 8    |#ifndef _TYPES_H
                             4824 ; 9    |#define _TYPES_H
                             4825 ; 10   |
                             4826 ; 11   |// TODO:  move this outta here!
                             4827 ; 12   |#if !defined(NOERROR)
                             4828 ; 13   |#define NOERROR 0
                             4829 ; 14   |#define SUCCESS 0
                             4830 ; 15   |#endif 
                             4831 ; 16   |#if !defined(SUCCESS)
                             4832 ; 17   |#define SUCCESS  0
                             4833 ; 18   |#endif
                             4834 ; 19   |#if !defined(ERROR)
                             4835 ; 20   |#define ERROR   -1
                             4836 ; 21   |#endif
                             4837 ; 22   |#if !defined(FALSE)
                             4838 ; 23   |#define FALSE 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4839 ; 24   |#endif
                             4840 ; 25   |#if !defined(TRUE)
                             4841 ; 26   |#define TRUE  1
                             4842 ; 27   |#endif
                             4843 ; 28   |
                             4844 ; 29   |#if !defined(NULL)
                             4845 ; 30   |#define NULL 0
                             4846 ; 31   |#endif
                             4847 ; 32   |
                             4848 ; 33   |#define MAX_INT     0x7FFFFF
                             4849 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4850 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4851 ; 36   |#define MAX_ULONG   (-1) 
                             4852 ; 37   |
                             4853 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4854 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4855 ; 40   |
                             4856 ; 41   |
                             4857 ; 42   |#define BYTE    unsigned char       // btVarName
                             4858 ; 43   |#define CHAR    signed char         // cVarName
                             4859 ; 44   |#define USHORT  unsigned short      // usVarName
                             4860 ; 45   |#define SHORT   unsigned short      // sVarName
                             4861 ; 46   |#define WORD    unsigned int        // wVarName
                             4862 ; 47   |#define INT     signed int          // iVarName
                             4863 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4864 ; 49   |#define LONG    signed long         // lVarName
                             4865 ; 50   |#define BOOL    unsigned int        // bVarName
                             4866 ; 51   |#define FRACT   _fract              // frVarName
                             4867 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4868 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4869 ; 54   |#define FLOAT   float               // fVarName
                             4870 ; 55   |#define DBL     double              // dVarName
                             4871 ; 56   |#define ENUM    enum                // eVarName
                             4872 ; 57   |#define CMX     _complex            // cmxVarName
                             4873 ; 58   |typedef WORD UCS3;                   // 
                             4874 ; 59   |
                             4875 ; 60   |#define UINT16  unsigned short
                             4876 ; 61   |#define UINT8   unsigned char   
                             4877 ; 62   |#define UINT32  unsigned long
                             4878 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4879 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4880 ; 65   |#define WCHAR   UINT16
                             4881 ; 66   |
                             4882 ; 67   |//UINT128 is 16 bytes or 6 words
                             4883 ; 68   |typedef struct UINT128_3500 {   
                             4884 ; 69   |    int val[6];     
                             4885 ; 70   |} UINT128_3500;
                             4886 ; 71   |
                             4887 ; 72   |#define UINT128   UINT128_3500
                             4888 ; 73   |
                             4889 ; 74   |// Little endian word packed byte strings:   
                             4890 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4891 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4892 ; 77   |// Little endian word packed byte strings:   
                             4893 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4894 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4895 ; 80   |
                             4896 ; 81   |// Declare Memory Spaces To Use When Coding
                             4897 ; 82   |// A. Sector Buffers
                             4898 ; 83   |#define SECTOR_BUFFER_MEM_X _X
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4899 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4900 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4901 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4902 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4903 ; 88   |// B. Media DDI Memory
                             4904 ; 89   |#define MEDIA_DDI_MEM _Y
                             4905 ; 90   |
                             4906 ; 91   |
                             4907 ; 92   |
                             4908 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4909 ; 94   |// Examples of circular pointers:
                             4910 ; 95   |//    INT CIRC cpiVarName
                             4911 ; 96   |//    DWORD CIRC cpdwVarName
                             4912 ; 97   |
                             4913 ; 98   |#define RETCODE INT                 // rcVarName
                             4914 ; 99   |
                             4915 ; 100  |// generic bitfield structure
                             4916 ; 101  |struct Bitfield {
                             4917 ; 102  |    unsigned int B0  :1;
                             4918 ; 103  |    unsigned int B1  :1;
                             4919 ; 104  |    unsigned int B2  :1;
                             4920 ; 105  |    unsigned int B3  :1;
                             4921 ; 106  |    unsigned int B4  :1;
                             4922 ; 107  |    unsigned int B5  :1;
                             4923 ; 108  |    unsigned int B6  :1;
                             4924 ; 109  |    unsigned int B7  :1;
                             4925 ; 110  |    unsigned int B8  :1;
                             4926 ; 111  |    unsigned int B9  :1;
                             4927 ; 112  |    unsigned int B10 :1;
                             4928 ; 113  |    unsigned int B11 :1;
                             4929 ; 114  |    unsigned int B12 :1;
                             4930 ; 115  |    unsigned int B13 :1;
                             4931 ; 116  |    unsigned int B14 :1;
                             4932 ; 117  |    unsigned int B15 :1;
                             4933 ; 118  |    unsigned int B16 :1;
                             4934 ; 119  |    unsigned int B17 :1;
                             4935 ; 120  |    unsigned int B18 :1;
                             4936 ; 121  |    unsigned int B19 :1;
                             4937 ; 122  |    unsigned int B20 :1;
                             4938 ; 123  |    unsigned int B21 :1;
                             4939 ; 124  |    unsigned int B22 :1;
                             4940 ; 125  |    unsigned int B23 :1;
                             4941 ; 126  |};
                             4942 ; 127  |
                             4943 ; 128  |union BitInt {
                             4944 ; 129  |        struct Bitfield B;
                             4945 ; 130  |        int        I;
                             4946 ; 131  |};
                             4947 ; 132  |
                             4948 ; 133  |#define MAX_MSG_LENGTH 10
                             4949 ; 134  |struct CMessage
                             4950 ; 135  |{
                             4951 ; 136  |        unsigned int m_uLength;
                             4952 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4953 ; 138  |};
                             4954 ; 139  |
                             4955 ; 140  |typedef struct {
                             4956 ; 141  |    WORD m_wLength;
                             4957 ; 142  |    WORD m_wMessage;
                             4958 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4959 ; 144  |} Message;
                             4960 ; 145  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4961 ; 146  |struct MessageQueueDescriptor
                             4962 ; 147  |{
                             4963 ; 148  |        int *m_pBase;
                             4964 ; 149  |        int m_iModulo;
                             4965 ; 150  |        int m_iSize;
                             4966 ; 151  |        int *m_pHead;
                             4967 ; 152  |        int *m_pTail;
                             4968 ; 153  |};
                             4969 ; 154  |
                             4970 ; 155  |struct ModuleEntry
                             4971 ; 156  |{
                             4972 ; 157  |    int m_iSignaledEventMask;
                             4973 ; 158  |    int m_iWaitEventMask;
                             4974 ; 159  |    int m_iResourceOfCode;
                             4975 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4976 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4977 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4978 ; 163  |    int m_uTimeOutHigh;
                             4979 ; 164  |    int m_uTimeOutLow;
                             4980 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4981 ; 166  |};
                             4982 ; 167  |
                             4983 ; 168  |union WaitMask{
                             4984 ; 169  |    struct B{
                             4985 ; 170  |        unsigned int m_bNone     :1;
                             4986 ; 171  |        unsigned int m_bMessage  :1;
                             4987 ; 172  |        unsigned int m_bTimer    :1;
                             4988 ; 173  |        unsigned int m_bButton   :1;
                             4989 ; 174  |    } B;
                             4990 ; 175  |    int I;
                             4991 ; 176  |} ;
                             4992 ; 177  |
                             4993 ; 178  |
                             4994 ; 179  |struct Button {
                             4995 ; 180  |        WORD wButtonEvent;
                             4996 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4997 ; 182  |};
                             4998 ; 183  |
                             4999 ; 184  |struct Message {
                             5000 ; 185  |        WORD wMsgLength;
                             5001 ; 186  |        WORD wMsgCommand;
                             5002 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5003 ; 188  |};
                             5004 ; 189  |
                             5005 ; 190  |union EventTypes {
                             5006 ; 191  |        struct CMessage msg;
                             5007 ; 192  |        struct Button Button ;
                             5008 ; 193  |        struct Message Message;
                             5009 ; 194  |};
                             5010 ; 195  |
                             5011 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5012 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5013 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5014 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5015 ; 200  |
                             5016 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5017 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5018 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5019 ; 204  |
                             5020 ; 205  |#if DEBUG
                             5021 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5022 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5023 ; 208  |#else 
                             5024 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5025 ; 210  |#define DebugBuildAssert(x)    
                             5026 ; 211  |#endif
                             5027 ; 212  |
                             5028 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5029 ; 214  |//  #pragma asm
                             5030 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5031 ; 216  |//  #pragma endasm
                             5032 ; 217  |
                             5033 ; 218  |
                             5034 ; 219  |#ifdef COLOR_262K
                             5035 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5036 ; 221  |#elif defined(COLOR_65K)
                             5037 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5038 ; 223  |#else
                             5039 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5040 ; 225  |#endif
                             5041 ; 226  |    
                             5042 ; 227  |#endif // #ifndef _TYPES_H
                             5043 
                             5045 
                             5046 ; 29   |
                             5047 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             5048 ; 31   |////  I2S Registers (SAI)
                             5049 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             5050 ; 33   |
                             5051 ; 34   |
                             5052 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             5053 ; 36   |
                             5054 ; 37   |
                             5055 ; 38   |
                             5056 ; 39   |
                             5057 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             5058 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             5059 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             5060 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             5061 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             5062 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             5063 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             5064 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             5065 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             5066 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             5067 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             5068 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             5069 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             5070 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             5071 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             5072 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             5073 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             5074 ; 57   |
                             5075 ; 58   |
                             5076 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             5077 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             5078 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             5079 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             5080 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5081 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             5082 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             5083 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             5084 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             5085 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             5086 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             5087 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             5088 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             5089 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             5090 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             5091 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             5092 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             5093 ; 76   |
                             5094 ; 77   |
                             5095 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             5096 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             5097 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             5098 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             5099 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                                  
                             5100 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             5101 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             5102 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             5103 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
                             5104 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             5105 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             5106 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             5107 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                                  
                             5108 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             5109 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             5110 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                                  
                             5111 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                                  
                             5112 ; 95   |
                             5113 ; 96   |
                             5114 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             5115 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             5116 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             5117 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             5118 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             5119 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             5120 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             5121 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             5122 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             5123 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             5124 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             5125 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             5126 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             5127 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             5128 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             5129 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             5130 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             5131 ; 114  |
                             5132 ; 115  |typedef union
                             5133 ; 116  |{
                             5134 ; 117  |    struct {
                             5135 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             5136 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             5137 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             5138 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5139 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             5140 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             5141 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             5142 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             5143 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             5144 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             5145 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                                  
                             5146 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             5147 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             5148 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             5149 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             5150 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             5151 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             5152 ; 135  |    } B;
                             5153 ; 136  |    int I;
                             5154 ; 137  |    unsigned U;
                             5155 ; 138  |} saircsr_type;
                             5156 ; 139  |
                             5157 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive C
                                  SR         */
                             5158 ; 141  |
                             5159 ; 142  |typedef union
                             5160 ; 143  |{
                             5161 ; 144  |    struct {
                             5162 ; 145  |        unsigned SAI :24;
                             5163 ; 146  |    } B;
                             5164 ; 147  |    int I;
                             5165 ; 148  |    unsigned U;
                             5166 ; 149  |} saixr_type;
                             5167 ; 150  |
                             5168 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received
                                   data reg 0 */
                             5169 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received
                                   data reg 1 */
                             5170 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received
                                   data reg 2 */
                             5171 ; 154  |
                             5172 ; 155  |
                             5173 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             5174 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             5175 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             5176 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             5177 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             5178 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             5179 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             5180 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             5181 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             5182 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             5183 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             5184 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             5185 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             5186 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             5187 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             5188 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             5189 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             5190 ; 173  |
                             5191 ; 174  |
                             5192 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             5193 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             5194 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             5195 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5196 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             5197 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             5198 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             5199 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             5200 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             5201 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             5202 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             5203 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             5204 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             5205 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             5206 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             5207 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             5208 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             5209 ; 192  |
                             5210 ; 193  |
                             5211 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             5212 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             5213 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             5214 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             5215 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                                  
                             5216 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             5217 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             5218 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
                             5219 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             5220 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             5221 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             5222 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             5223 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                                  
                             5224 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             5225 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             5226 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                                  
                             5227 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                                  
                             5228 ; 211  |
                             5229 ; 212  |
                             5230 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             5231 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             5232 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             5233 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             5234 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             5235 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             5236 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             5237 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             5238 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             5239 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             5240 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             5241 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             5242 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             5243 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             5244 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             5245 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             5246 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             5247 ; 230  |
                             5248 ; 231  |
                             5249 ; 232  |typedef union
                             5250 ; 233  |{
                             5251 ; 234  |    struct {
                             5252 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             5253 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5254 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             5255 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             5256 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             5257 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             5258 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction
                                   
                             5259 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             5260 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             5261 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             5262 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justificat
                                  ion
                             5263 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             5264 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             5265 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             5266 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             5267 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             5268 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             5269 ; 252  |    } B;
                             5270 ; 253  |    int I;
                             5271 ; 254  |    unsigned U;
                             5272 ; 255  |} saitcsr_type;
                             5273 ; 256  |
                             5274 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR 
                                       */
                             5275 ; 258  |
                             5276 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit
                                   data reg 0 */
                             5277 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit
                                   data reg 1 */
                             5278 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit
                                   data reg 2 */
                             5279 ; 262  |
                             5280 ; 263  |#endif
                             5281 
                             5283 
                             5284 ; 25   |#include "regsicoll.h"
                             5285 
                             5287 
                             5288 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             5289 ; 2    |#define __REGS_ICOLL_INC 1
                             5290 ; 3    |
                             5291 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             5292 ; 5    |//  Interrupt Collector Registers
                             5293 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5294 ; 7    |
                             5295 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             5296 ; 9    |
                             5297 ; 10   |
                             5298 ; 11   |
                             5299 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             5300 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             5301 ; 14   |
                             5302 ; 15   |typedef union
                             5303 ; 16   |{
                             5304 ; 17   |    struct {
                             5305 ; 18   |        int SEN0        :1;
                             5306 ; 19   |        int SEN1        :1;
                             5307 ; 20   |        int SEN2        :1;
                             5308 ; 21   |        int SEN3        :1;
                             5309 ; 22   |        int SEN4        :1;
                             5310 ; 23   |        int SEN5        :1;
                             5311 ; 24   |        int SEN6        :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5312 ; 25   |        int SEN7        :1;
                             5313 ; 26   |        int SEN8        :1;
                             5314 ; 27   |        int SEN9        :1;
                             5315 ; 28   |        int SEN10       :1;
                             5316 ; 29   |        int SEN11       :1;
                             5317 ; 30   |        int SEN12       :1;
                             5318 ; 31   |        int SEN13       :1;
                             5319 ; 32   |        int SEN14       :1;
                             5320 ; 33   |        int SEN15       :1;
                             5321 ; 34   |        int SEN16       :1;
                             5322 ; 35   |        int SEN17       :1;
                             5323 ; 36   |        int SEN18       :1;
                             5324 ; 37   |        int SEN19       :1;
                             5325 ; 38   |        int SEN20       :1;
                             5326 ; 39   |        int SEN21       :1;
                             5327 ; 40   |        int SEN22       :1;
                             5328 ; 41   |        int SEN23       :1;
                             5329 ; 42   |    } B;
                             5330 ; 43   |    int I;
                             5331 ; 44   |} iclenable0_type;
                             5332 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                             5333 ; 46   |
                             5334 ; 47   |
                             5335 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             5336 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             5337 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             5338 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             5339 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             5340 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             5341 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             5342 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             5343 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             5344 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             5345 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             5346 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             5347 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             5348 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             5349 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             5350 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             5351 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             5352 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             5353 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             5354 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             5355 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             5356 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             5357 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             5358 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             5359 ; 72   |
                             5360 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             5361 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             5362 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             5363 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             5364 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             5365 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             5366 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             5367 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             5368 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             5369 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             5370 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             5371 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             5372 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5373 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             5374 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             5375 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             5376 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             5377 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             5378 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             5379 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             5380 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             5381 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             5382 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             5383 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             5384 ; 97   |
                             5385 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             5386 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             5387 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             5388 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             5389 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             5390 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             5391 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             5392 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             5393 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             5394 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             5395 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             5396 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
                             5397 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             5398 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             5399 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             5400 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             5401 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             5402 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             5403 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             5404 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             5405 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             5406 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             5407 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             5408 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             5409 ; 122  |
                             5410 ; 123  |
                             5411 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             5412 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             5413 ; 126  |typedef union
                             5414 ; 127  |{
                             5415 ; 128  |    struct {
                             5416 ; 129  |        
                             5417 ; 130  |        int SEN24       :1;
                             5418 ; 131  |        int SEN25       :1;
                             5419 ; 132  |        int SEN26       :1;
                             5420 ; 133  |        int SEN27       :1;
                             5421 ; 134  |        int SEN28       :1;
                             5422 ; 135  |        int SEN29       :1;
                             5423 ; 136  |        int SEN30       :1;
                             5424 ; 137  |        int SEN31       :1;
                             5425 ; 138  |        int SEN32       :1;
                             5426 ; 139  |        int SEN33       :1;
                             5427 ; 140  |    } B;
                             5428 ; 141  |    int I;
                             5429 ; 142  |} iclenable1_type;
                             5430 ; 143  |
                             5431 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                             5432 ; 145  |
                             5433 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5434 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             5435 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             5436 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             5437 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             5438 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             5439 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             5440 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             5441 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             5442 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             5443 ; 156  |
                             5444 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             5445 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             5446 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             5447 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             5448 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             5449 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             5450 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             5451 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             5452 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             5453 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             5454 ; 167  |
                             5455 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             5456 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             5457 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
                             5458 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             5459 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             5460 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             5461 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             5462 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             5463 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             5464 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             5465 ; 178  |
                             5466 ; 179  |
                             5467 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             5468 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             5469 ; 182  |typedef union
                             5470 ; 183  |{
                             5471 ; 184  |    struct {
                             5472 ; 185  |        int SST0        :1;
                             5473 ; 186  |        int SST1        :1;
                             5474 ; 187  |        int SST2        :1;
                             5475 ; 188  |        int SST3        :1;
                             5476 ; 189  |        int SST4        :1;
                             5477 ; 190  |        int SST5        :1;
                             5478 ; 191  |        int SST6        :1;
                             5479 ; 192  |        int SST7        :1;
                             5480 ; 193  |        int SST8        :1;
                             5481 ; 194  |        int SST9        :1;
                             5482 ; 195  |        int SST10       :1;
                             5483 ; 196  |        int SST11       :1;
                             5484 ; 197  |        int SST12       :1;
                             5485 ; 198  |        int SST13       :1;
                             5486 ; 199  |        int SST14       :1;
                             5487 ; 200  |        int SST15       :1;
                             5488 ; 201  |        int SST16       :1;
                             5489 ; 202  |        int SST17       :1;
                             5490 ; 203  |        int SST18       :1;
                             5491 ; 204  |        int SST19       :1;
                             5492 ; 205  |        int SST20       :1;
                             5493 ; 206  |        int SST21       :1;
                             5494 ; 207  |        int SST22       :1;
                             5495 ; 208  |        int SST23       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5496 ; 209  |    } B;
                             5497 ; 210  |    int I;
                             5498 ; 211  |} iclstatus0_type;
                             5499 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                             5500 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             5501 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             5502 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             5503 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             5504 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             5505 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             5506 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             5507 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             5508 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             5509 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             5510 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             5511 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             5512 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             5513 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             5514 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             5515 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             5516 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             5517 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             5518 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
                             5519 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             5520 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             5521 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             5522 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             5523 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             5524 ; 237  |
                             5525 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             5526 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             5527 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             5528 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             5529 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             5530 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             5531 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             5532 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             5533 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             5534 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             5535 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             5536 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             5537 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             5538 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             5539 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             5540 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             5541 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             5542 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             5543 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             5544 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             5545 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             5546 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             5547 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             5548 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             5549 ; 262  |
                             5550 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             5551 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             5552 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             5553 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             5554 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             5555 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             5556 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5557 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             5558 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             5559 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             5560 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             5561 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             5562 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             5563 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             5564 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             5565 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             5566 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             5567 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             5568 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             5569 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             5570 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             5571 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             5572 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             5573 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             5574 ; 287  |
                             5575 ; 288  |
                             5576 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             5577 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             5578 ; 291  |typedef union
                             5579 ; 292  |{
                             5580 ; 293  |    struct {
                             5581 ; 294  |        int SST24       :1;
                             5582 ; 295  |        int SST25       :1;
                             5583 ; 296  |        int SST26       :1;
                             5584 ; 297  |        int SST27       :1;
                             5585 ; 298  |        int SST28       :1;
                             5586 ; 299  |        int SST29       :1;
                             5587 ; 300  |        int SST30       :1;
                             5588 ; 301  |        int SST31       :1;
                             5589 ; 302  |        int SST32       :1;
                             5590 ; 303  |        int SST33       :1;
                             5591 ; 304  |    } B;
                             5592 ; 305  |    int I;
                             5593 ; 306  |} iclstatus1_type;
                             5594 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                             5595 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             5596 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             5597 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             5598 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             5599 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             5600 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             5601 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             5602 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             5603 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             5604 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             5605 ; 318  |
                             5606 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             5607 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             5608 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             5609 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             5610 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             5611 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             5612 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             5613 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             5614 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             5615 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             5616 ; 329  |
                             5617 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5618 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             5619 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             5620 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             5621 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             5622 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             5623 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             5624 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             5625 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             5626 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             5627 ; 340  |
                             5628 ; 341  |
                             5629 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             5630 ; 343  |//  Interrupt Collector Priority Defs
                             5631 ; 344  |typedef union
                             5632 ; 345  |{
                             5633 ; 346  |    struct {
                             5634 ; 347  |        unsigned S0P    :3;
                             5635 ; 348  |        unsigned S1P    :3;
                             5636 ; 349  |        unsigned S2P    :3;
                             5637 ; 350  |        unsigned S3P    :3;
                             5638 ; 351  |        unsigned S4P    :3;
                             5639 ; 352  |        unsigned S5P    :3;
                             5640 ; 353  |        unsigned S6P    :3;
                             5641 ; 354  |        unsigned S7P    :3;
                             5642 ; 355  |    } B;
                             5643 ; 356  |    int I;
                             5644 ; 357  |
                             5645 ; 358  |} iclprior0_type;
                             5646 ; 359  |
                             5647 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                             5648 ; 361  |
                             5649 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             5650 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             5651 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             5652 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             5653 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             5654 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             5655 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             5656 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             5657 ; 370  |
                             5658 ; 371  |
                             5659 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             5660 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             5661 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             5662 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             5663 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             5664 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             5665 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             5666 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             5667 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             5668 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             5669 ; 382  |
                             5670 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             5671 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             5672 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             5673 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             5674 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             5675 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             5676 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             5677 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             5678 ; 391  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5679 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             5680 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             5681 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             5682 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             5683 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             5684 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             5685 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             5686 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             5687 ; 400  |
                             5688 ; 401  |
                             5689 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             5690 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             5691 ; 404  |typedef union
                             5692 ; 405  |{
                             5693 ; 406  |    struct {
                             5694 ; 407  |        unsigned S8P    :3;
                             5695 ; 408  |        unsigned S9P    :3;
                             5696 ; 409  |        unsigned S10P   :3;
                             5697 ; 410  |        unsigned S11P   :3;
                             5698 ; 411  |        unsigned S12P   :3;
                             5699 ; 412  |        unsigned S13P   :3;
                             5700 ; 413  |        unsigned S14P   :3;
                             5701 ; 414  |        unsigned S15P   :3;
                             5702 ; 415  |    } B;
                             5703 ; 416  |    int I;
                             5704 ; 417  |} iclprior1_type;
                             5705 ; 418  |
                             5706 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                             5707 ; 420  |
                             5708 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             5709 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             5710 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             5711 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             5712 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             5713 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             5714 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             5715 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             5716 ; 429  |
                             5717 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             5718 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             5719 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             5720 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             5721 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             5722 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             5723 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             5724 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             5725 ; 438  |
                             5726 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             5727 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             5728 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             5729 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             5730 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             5731 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             5732 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             5733 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             5734 ; 447  |
                             5735 ; 448  |
                             5736 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             5737 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             5738 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             5739 ; 452  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5740 ; 453  |    struct {
                             5741 ; 454  |        unsigned S16P   :3;
                             5742 ; 455  |        unsigned S17P   :3;
                             5743 ; 456  |        unsigned S18P   :3;
                             5744 ; 457  |        unsigned S19P   :3;
                             5745 ; 458  |        unsigned S20P   :3;
                             5746 ; 459  |        unsigned S21P   :3;
                             5747 ; 460  |        unsigned S22P   :3;
                             5748 ; 461  |        unsigned S23P   :3;
                             5749 ; 462  |    } B;
                             5750 ; 463  |    int I;
                             5751 ; 464  |} iclprior2_type;
                             5752 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
                             5753 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             5754 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             5755 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             5756 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             5757 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             5758 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             5759 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             5760 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             5761 ; 474  |
                             5762 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
                             5763 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             5764 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             5765 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             5766 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             5767 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             5768 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             5769 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             5770 ; 483  |
                             5771 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             5772 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             5773 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             5774 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             5775 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             5776 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             5777 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             5778 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             5779 ; 492  |
                             5780 ; 493  |
                             5781 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             5782 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             5783 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5784 ; 497  |{
                             5785 ; 498  |    struct {
                             5786 ; 499  |        unsigned S24P   :3;
                             5787 ; 500  |        unsigned S25P   :3;
                             5788 ; 501  |        unsigned S26P   :3;
                             5789 ; 502  |        unsigned S27P   :3;
                             5790 ; 503  |        unsigned S28P   :3;
                             5791 ; 504  |        unsigned S29P   :3;
                             5792 ; 505  |        unsigned S30P   :3;
                             5793 ; 506  |        unsigned S31P   :3;
                             5794 ; 507  |    } B;
                             5795 ; 508  |    int I;
                             5796 ; 509  |} iclprior3_type;
                             5797 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                             5798 ; 511  |
                             5799 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5800 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             5801 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             5802 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             5803 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             5804 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             5805 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             5806 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             5807 ; 520  |
                             5808 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             5809 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             5810 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             5811 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             5812 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             5813 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             5814 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             5815 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             5816 ; 529  |
                             5817 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             5818 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             5819 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             5820 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             5821 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             5822 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             5823 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
                             5824 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             5825 ; 538  |
                             5826 ; 539  |
                             5827 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             5828 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             5829 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             5830 ; 543  |{
                             5831 ; 544  |    struct {
                             5832 ; 545  |        unsigned S32P   :3;
                             5833 ; 546  |        unsigned S33P   :3;
                             5834 ; 547  |    } B;
                             5835 ; 548  |    int I;
                             5836 ; 549  |} iclprior4_type;
                             5837 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                             5838 ; 551  |
                             5839 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             5840 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             5841 ; 554  |
                             5842 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             5843 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             5844 ; 557  |
                             5845 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             5846 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             5847 ; 560  |
                             5848 ; 561  |
                             5849 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             5850 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             5851 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             5852 ; 565  |{
                             5853 ; 566  |    struct {
                             5854 ; 567  |        unsigned S0S    :2;
                             5855 ; 568  |        unsigned S1S    :2;
                             5856 ; 569  |        unsigned S2S    :2;
                             5857 ; 570  |        unsigned S3S    :2;
                             5858 ; 571  |        unsigned S4S    :2;
                             5859 ; 572  |        unsigned S5S    :2;
                             5860 ; 573  |        unsigned S6S    :2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5861 ; 574  |        unsigned S7S    :2;
                             5862 ; 575  |        unsigned S8S    :2;
                             5863 ; 576  |        unsigned S9S    :2;
                             5864 ; 577  |        unsigned S10S   :2;
                             5865 ; 578  |        unsigned S11S   :2;
                             5866 ; 579  |    } B;
                             5867 ; 580  |    int I;
                             5868 ; 581  |} iclsteer0_type;
                             5869 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                             5870 ; 583  |
                             5871 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             5872 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             5873 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             5874 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             5875 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             5876 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             5877 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             5878 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             5879 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             5880 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             5881 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             5882 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             5883 ; 596  |
                             5884 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             5885 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             5886 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             5887 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             5888 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             5889 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             5890 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             5891 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             5892 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             5893 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             5894 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             5895 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             5896 ; 609  |
                             5897 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             5898 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             5899 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             5900 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             5901 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             5902 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             5903 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             5904 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             5905 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             5906 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             5907 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             5908 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             5909 ; 622  |
                             5910 ; 623  |
                             5911 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             5912 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             5913 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             5914 ; 627  |{
                             5915 ; 628  |    struct {
                             5916 ; 629  |        unsigned S12S   :2;
                             5917 ; 630  |        unsigned S13S   :2;
                             5918 ; 631  |        unsigned S14S   :2;
                             5919 ; 632  |        unsigned S15S   :2;
                             5920 ; 633  |        unsigned S16S   :2;
                             5921 ; 634  |        unsigned S17S   :2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5922 ; 635  |        unsigned S18S   :2;
                             5923 ; 636  |        unsigned S19S   :2;
                             5924 ; 637  |        unsigned S20S   :2;
                             5925 ; 638  |        unsigned S21S   :2;
                             5926 ; 639  |        unsigned S22S   :2;
                             5927 ; 640  |        unsigned S23S   :2;
                             5928 ; 641  |    } B;
                             5929 ; 642  |    int I;
                             5930 ; 643  |} iclsteer1_type;
                             5931 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                             5932 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             5933 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             5934 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             5935 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             5936 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             5937 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             5938 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             5939 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             5940 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             5941 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             5942 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             5943 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             5944 ; 657  |
                             5945 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             5946 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             5947 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             5948 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             5949 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             5950 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             5951 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             5952 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             5953 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             5954 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             5955 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             5956 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             5957 ; 670  |
                             5958 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             5959 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             5960 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             5961 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             5962 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             5963 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             5964 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             5965 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             5966 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             5967 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             5968 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             5969 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             5970 ; 683  |
                             5971 ; 684  |
                             5972 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             5973 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             5974 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             5975 ; 688  |{
                             5976 ; 689  |    struct {
                             5977 ; 690  |        unsigned S24S   :2;
                             5978 ; 691  |        unsigned S25S   :2;
                             5979 ; 692  |        unsigned S26S   :2;
                             5980 ; 693  |        unsigned S27S   :2;
                             5981 ; 694  |        unsigned S28S   :2;
                             5982 ; 695  |        unsigned S29S   :2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5983 ; 696  |        unsigned S30S   :2;
                             5984 ; 697  |        unsigned S31S   :2;
                             5985 ; 698  |        unsigned S32S   :2;
                             5986 ; 699  |        unsigned S33S   :2;
                             5987 ; 700  |    } B;
                             5988 ; 701  |    int I;
                             5989 ; 702  |} iclsteer2_type;
                             5990 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                             5991 ; 704  |
                             5992 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             5993 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             5994 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             5995 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             5996 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             5997 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             5998 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             5999 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             6000 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             6001 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             6002 ; 715  |
                             6003 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             6004 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             6005 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
                             6006 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             6007 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             6008 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             6009 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             6010 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             6011 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             6012 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             6013 ; 726  |
                             6014 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             6015 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             6016 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             6017 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             6018 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             6019 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             6020 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             6021 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             6022 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             6023 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             6024 ; 737  |
                             6025 ; 738  |
                             6026 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             6027 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             6028 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             6029 ; 742  |{
                             6030 ; 743  |    struct {
                             6031 ; 744  |        int S0FV        :1;
                             6032 ; 745  |        int S1FV        :1;
                             6033 ; 746  |        int S2FV        :1;
                             6034 ; 747  |        int S3FV        :1;
                             6035 ; 748  |        int S4FV        :1;
                             6036 ; 749  |        int S5FV        :1;
                             6037 ; 750  |        int S6FV        :1;
                             6038 ; 751  |        int S7FV        :1;
                             6039 ; 752  |        int S8FV        :1;
                             6040 ; 753  |        int S9FV        :1;
                             6041 ; 754  |        int S10FV       :1;
                             6042 ; 755  |        int S11FV       :1;
                             6043 ; 756  |        int S12FV       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6044 ; 757  |        int S13FV       :1;
                             6045 ; 758  |        int S14FV       :1;
                             6046 ; 759  |        int S15FV       :1;
                             6047 ; 760  |        int S16FV       :1;
                             6048 ; 761  |        int S17FV       :1;
                             6049 ; 762  |        int S18FV       :1;
                             6050 ; 763  |        int S19FV       :1;
                             6051 ; 764  |        int S20FV       :1;
                             6052 ; 765  |        int S21FV       :1;
                             6053 ; 766  |        int S22FV       :1;
                             6054 ; 767  |        int S23FV       :1;
                             6055 ; 768  |    } B;
                             6056 ; 769  |    int I;
                             6057 ; 770  |} iclforce0_type;
                             6058 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                             6059 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             6060 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             6061 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             6062 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             6063 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             6064 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             6065 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             6066 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
                             6067 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             6068 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             6069 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             6070 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             6071 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             6072 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             6073 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             6074 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             6075 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             6076 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             6077 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             6078 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             6079 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             6080 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             6081 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             6082 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             6083 ; 796  |
                             6084 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             6085 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             6086 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             6087 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             6088 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             6089 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             6090 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             6091 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             6092 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             6093 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             6094 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             6095 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             6096 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             6097 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             6098 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             6099 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             6100 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             6101 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             6102 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             6103 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             6104 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6105 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             6106 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             6107 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             6108 ; 821  |
                             6109 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             6110 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             6111 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             6112 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             6113 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             6114 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             6115 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             6116 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             6117 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             6118 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             6119 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             6120 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             6121 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             6122 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             6123 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             6124 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             6125 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             6126 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             6127 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             6128 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
                             6129 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             6130 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             6131 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             6132 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             6133 ; 846  |
                             6134 ; 847  |
                             6135 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             6136 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             6137 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             6138 ; 851  |{
                             6139 ; 852  |    struct {
                             6140 ; 853  |        int S24FV       :1;
                             6141 ; 854  |        int S25FV       :1;
                             6142 ; 855  |        int S26FV       :1;
                             6143 ; 856  |        int S27FV       :1;
                             6144 ; 857  |        int S28FV       :1;
                             6145 ; 858  |        int S29FV       :1;
                             6146 ; 859  |        int S30FV       :1;
                             6147 ; 860  |        int S31FV       :1;
                             6148 ; 861  |        int S32FV       :1;
                             6149 ; 862  |        int S33FV       :1;
                             6150 ; 863  |    } B;
                             6151 ; 864  |    int I;
                             6152 ; 865  |} iclforce1_type;
                             6153 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                             6154 ; 867  |
                             6155 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             6156 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             6157 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             6158 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             6159 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             6160 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             6161 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             6162 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             6163 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             6164 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             6165 ; 878  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6166 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             6167 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             6168 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             6169 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             6170 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             6171 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             6172 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             6173 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             6174 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             6175 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             6176 ; 889  |
                             6177 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             6178 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             6179 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             6180 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             6181 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             6182 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             6183 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             6184 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             6185 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             6186 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             6187 ; 900  |
                             6188 ; 901  |
                             6189 ; 902  |/////////////////////////////////////////////////////////////////////////////////
                             6190 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             6191 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             6192 ; 905  |{
                             6193 ; 906  |    struct {
                             6194 ; 907  |        int S0FE        :1;
                             6195 ; 908  |        int S1FE        :1;
                             6196 ; 909  |        int S2FE        :1;
                             6197 ; 910  |        int S3FE        :1;
                             6198 ; 911  |        int S4FE        :1;
                             6199 ; 912  |        int S5FE        :1;
                             6200 ; 913  |        int S6FE        :1;
                             6201 ; 914  |        int S7FE        :1;
                             6202 ; 915  |        int S8FE        :1;
                             6203 ; 916  |        int S9FE        :1;
                             6204 ; 917  |        int S10FE       :1;
                             6205 ; 918  |        int S11FE       :1;
                             6206 ; 919  |        int S12FE       :1;
                             6207 ; 920  |        int S13FE       :1;
                             6208 ; 921  |        int S14FE       :1;
                             6209 ; 922  |        int S15FE       :1;
                             6210 ; 923  |        int S16FE       :1;
                             6211 ; 924  |        int S17FE       :1;
                             6212 ; 925  |        int S18FE       :1;
                             6213 ; 926  |        int S19FE       :1;
                             6214 ; 927  |        int S20FE       :1;
                             6215 ; 928  |        int S21FE       :1;
                             6216 ; 929  |        int S22FE       :1;
                             6217 ; 930  |        int S23FE       :1;
                             6218 ; 931  |    } B;
                             6219 ; 932  |    int I;
                             6220 ; 933  |} iclfenable0_type;
                             6221 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                             6222 ; 935  |
                             6223 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             6224 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             6225 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             6226 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6227 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             6228 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             6229 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             6230 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             6231 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             6232 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             6233 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             6234 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             6235 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             6236 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             6237 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             6238 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             6239 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             6240 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             6241 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             6242 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             6243 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             6244 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             6245 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             6246 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             6247 ; 960  |
                             6248 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             6249 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             6250 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
                             6251 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             6252 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             6253 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             6254 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             6255 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             6256 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             6257 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             6258 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             6259 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             6260 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             6261 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             6262 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             6263 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             6264 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             6265 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             6266 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             6267 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             6268 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             6269 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             6270 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             6271 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             6272 ; 985  |
                             6273 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             6274 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             6275 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             6276 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             6277 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             6278 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             6279 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             6280 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             6281 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             6282 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             6283 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             6284 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             6285 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             6286 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             6287 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             6288 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6289 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             6290 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             6291 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             6292 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             6293 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             6294 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             6295 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             6296 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             6297 ; 1010 |
                             6298 ; 1011 |
                             6299 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             6300 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             6301 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             6302 ; 1015 |{
                             6303 ; 1016 |    struct {
                             6304 ; 1017 |        int S24FE       :1;
                             6305 ; 1018 |        int S25FE       :1;
                             6306 ; 1019 |        int S26FE       :1;
                             6307 ; 1020 |        int S27FE       :1;
                             6308 ; 1021 |        int S28FE       :1;
                             6309 ; 1022 |        int S29FE       :1;
                             6310 ; 1023 |        int S30FE       :1;
                             6311 ; 1024 |        int S31FE       :1;
                             6312 ; 1025 |        int S32FE       :1;
                             6313 ; 1026 |        int S33FE       :1;
                             6314 ; 1027 |    } B;
                             6315 ; 1028 |    int I;
                             6316 ; 1029 |} iclfenable1_type;
                             6317 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                             6318 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             6319 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             6320 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             6321 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             6322 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             6323 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             6324 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             6325 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             6326 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             6327 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             6328 ; 1041 |
                             6329 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             6330 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             6331 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             6332 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             6333 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             6334 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             6335 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             6336 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             6337 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             6338 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             6339 ; 1052 |
                             6340 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             6341 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             6342 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             6343 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             6344 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             6345 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             6346 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             6347 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             6348 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             6349 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6350 ; 1063 |
                             6351 ; 1064 |
                             6352 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             6353 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             6354 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             6355 ; 1068 |{
                             6356 ; 1069 |    struct {
                             6357 ; 1070 |        unsigned RQ     :7;
                             6358 ; 1071 |        unsigned IVA    :7;
                             6359 ; 1072 |        unsigned IVB    :7;
                             6360 ; 1073 |    } B;
                             6361 ; 1074 |    int I;
                             6362 ; 1075 |} iclobsvz0_type;
                             6363 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                             6364 ; 1077 |
                             6365 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             6366 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             6367 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             6368 ; 1081 |
                             6369 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             6370 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             6371 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             6372 ; 1085 |
                             6373 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             6374 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             6375 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             6376 ; 1089 |
                             6377 ; 1090 |
                             6378 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             6379 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             6380 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             6381 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             6382 ; 1095 |
                             6383 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             6384 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             6385 ; 1098 |
                             6386 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             6387 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             6388 ; 1101 |
                             6389 ; 1102 |
                             6390 ; 1103 |
                             6391 ; 1104 |
                             6392 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             6393 ; 1106 |//  Interrupt Vectors
                             6394 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             6395 ; 1108 |// Reset Vector
                             6396 ; 1109 |#define HW_IVECRESET 0x0000           
                             6397 ; 1110 |// Stack Error
                             6398 ; 1111 |#define HW_IVECSTERR 0x0002           
                             6399 ; 1112 |// Trace
                             6400 ; 1113 |#define HW_IVECTRAC 0x0004           
                             6401 ; 1114 |// SWI
                             6402 ; 1115 |#define HW_IVECSWI 0x0006           
                             6403 ; 1116 |// ~IRQA
                             6404 ; 1117 |#define HW_IVECIRQA 0x0008           
                             6405 ; 1118 |// ~IRQB - BROWNOUT
                             6406 ; 1119 |#define HW_IVECIRQB 0x000A           
                             6407 ; 1120 |// Fatal Error
                             6408 ; 1121 |#define HW_IVECERROR 0x000C           
                             6409 ; 1122 |// SPI
                             6410 ; 1123 |#define HW_IVECSPI 0x000E           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6411 ; 1124 |// I2S TX Data Empty
                             6412 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             6413 ; 1126 |// I2S TX Underflow
                             6414 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             6415 ; 1128 |// I2S RX Data Full
                             6416 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             6417 ; 1130 |// I2S RX Overflow
                             6418 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             6419 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                             6420 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
                             6421 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                             6422 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             6423 ; 1136 |// GPIO1
                             6424 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             6425 ; 1138 |// GPIO2
                             6426 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             6427 ; 1140 |// GPIO0
                             6428 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             6429 ; 1142 |// TIMER0
                             6430 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             6431 ; 1144 |// TIMER1
                             6432 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             6433 ; 1146 |// TIMER2
                             6434 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             6435 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                             6436 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                             6437 ; 1150 |// I2C RX Data Ready
                             6438 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             6439 ; 1152 |// I2C RX Overflow
                             6440 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             6441 ; 1154 |// I2C TX Data Empty
                             6442 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             6443 ; 1156 |// I2C TX Underflow
                             6444 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             6445 ; 1158 |// Illegal Instruction
                             6446 ; 1159 |#define HW_IVECILI 0x0038           
                             6447 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                             6448 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             6449 ; 1162 |#define HW_IVECDACE 0x003C           
                             6450 ; 1163 |// DAC Underflow ISR
                             6451 ; 1164 |#define HW_IVECDACUF 0x003E           
                             6452 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                             6453 ; 1166 |// ADC Full ISR
                             6454 ; 1167 |#define HW_IVECADCF 0x0042           
                             6455 ; 1168 |// ADC Overflow ISR
                             6456 ; 1169 |#define HW_IVECADCOF 0x0044           
                             6457 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                             6458 ; 1171 |// TIMER3
                             6459 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             6460 ; 1173 |// GPIO3
                             6461 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             6462 ; 1175 |// SDRAM
                             6463 ; 1176 |#define HW_IVECSDRAM 0x004C           
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6464 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                             6465 ; 1178 |// 5 volt power connected
                             6466 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             6467 ; 1180 |// USB Controller
                             6468 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             6469 ; 1182 |// USB Wakeup 
                             6470 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             6471 ; 1184 |// 5 volt power disconnected
                             6472 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             6473 ; 1186 |// enhanced SPI
                             6474 ; 1187 |#define HW_IVECESPI 0x0058           
                             6475 ; 1188 |// filter coprocessor
                             6476 ; 1189 |#define HW_IVECFILCO 0x005A           
                             6477 ; 1190 |// low res ADC #1
                             6478 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             6479 ; 1192 |// real time clock alarm
                             6480 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             6481 ; 1194 |// low res ADC #2
                             6482 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             6483 ; 1196 |// flash hardware ECC
                             6484 ; 1197 |#define HW_IVECHWECC 0x0062           
                             6485 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                             6486 ; 1199 |// CDSYNC Interrupt
                             6487 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             6488 ; 1201 |// CDSYNC Exception
                             6489 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             6490 ; 1203 |// RS
                             6491 ; 1204 |#define HW_IVECRS 0x006A           
                             6492 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                             6493 ; 1206 |// Flash Done ISR
                             6494 ; 1207 |#define HW_IVECFD 0x006E           
                             6495 ; 1208 |// CompactFlash ISR
                             6496 ; 1209 |#define HW_IVECCF 0x0070           
                             6497 ; 1210 |// SmartMedia Timeout ISR
                             6498 ; 1211 |#define HW_IVECSMTO 0x0072           
                             6499 ; 1212 |// SmartMedia Invalid Programming
                             6500 ; 1213 |#define HW_IVECSMIP 0x0074           
                             6501 ; 1214 |// CompactFlash No Card ISR
                             6502 ; 1215 |#define HW_IVECCFNC 0x0076           
                             6503 ; 1216 |// CompactFlash Status Change ISR
                             6504 ; 1217 |#define HW_IVECCFSC 0x0078           
                             6505 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
                             6506 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                             6507 ; 1220 |// CDI
                             6508 ; 1221 |#define HW_IVECCDI 0x007E           
                             6509 ; 1222 |
                             6510 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             6511 ; 1224 |//  Interrupt Vectors
                             6512 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             6513 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             6514 ; 1227 |#define VECTOR(address,isr) \ 
                             6515 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             6516 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             6517 ; 1230 |
                             6518 ; 1231 |
                             6519 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             6520 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6521 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             6522 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             6523 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             6524 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             6525 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             6526 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             6527 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             6528 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             6529 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             6530 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             6531 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             6532 ; 1245 |
                             6533 ; 1246 |// Interrupt Disabled
                             6534 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             6535 ; 1248 |// Interrupt Priority Level 0
                             6536 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             6537 ; 1250 |// Interrupt Priority Level 1
                             6538 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             6539 ; 1252 |// Interrupt Priority Level 2
                             6540 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             6541 ; 1254 |
                             6542 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             6543 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             6544 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             6545 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
                             6546 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             6547 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             6548 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             6549 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             6550 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             6551 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             6552 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             6553 ; 1266 |
                             6554 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             6555 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             6556 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             6557 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             6558 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             6559 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             6560 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             6561 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             6562 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             6563 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             6564 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             6565 ; 1278 |
                             6566 ; 1279 |// Interrupt Priority register
                             6567 ; 1280 |typedef union               
                             6568 ; 1281 |{
                             6569 ; 1282 |    struct {
                             6570 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             6571 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             6572 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             6573 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             6574 ; 1287 |        int                 :4; /* Reserved */
                             6575 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             6576 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             6577 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             6578 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             6579 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             6580 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             6581 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             6582 ; 1295 |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6583 ; 1296 |
                             6584 ; 1297 |    int I;
                             6585 ; 1298 |
                             6586 ; 1299 |} ipr_type;
                             6587 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             6588 ; 1301 |
                             6589 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             6590 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             6591 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             6592 ; 1305 |
                             6593 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             6594 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             6595 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             6596 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             6597 ; 1310 |
                             6598 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             6599 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6600 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             6601 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             6602 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             6603 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             6604 ; 1317 |
                             6605 ; 1318 |#endif
                             6606 ; 1319 |
                             6607 
                             6609 
                             6610 ; 26   |#include "regslradc.h"
                             6611 
                             6613 
                             6614 ; 1    |#if !(defined(regslradcinc))
                             6615 ; 2    |
                             6616 ; 3    |#define regslradcinc 1
                             6617 ; 4    |
                             6618 ; 5    |#include "types.h"
                             6619 
                             6621 
                             6622 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             6623 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             6624 ; 3    |//
                             6625 ; 4    |// Filename: types.h
                             6626 ; 5    |// Description: Standard data types
                             6627 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             6628 ; 7    |
                             6629 ; 8    |#ifndef _TYPES_H
                             6630 ; 9    |#define _TYPES_H
                             6631 ; 10   |
                             6632 ; 11   |// TODO:  move this outta here!
                             6633 ; 12   |#if !defined(NOERROR)
                             6634 ; 13   |#define NOERROR 0
                             6635 ; 14   |#define SUCCESS 0
                             6636 ; 15   |#endif 
                             6637 ; 16   |#if !defined(SUCCESS)
                             6638 ; 17   |#define SUCCESS  0
                             6639 ; 18   |#endif
                             6640 ; 19   |#if !defined(ERROR)
                             6641 ; 20   |#define ERROR   -1
                             6642 ; 21   |#endif
                             6643 ; 22   |#if !defined(FALSE)
                             6644 ; 23   |#define FALSE 0
                             6645 ; 24   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6646 ; 25   |#if !defined(TRUE)
                             6647 ; 26   |#define TRUE  1
                             6648 ; 27   |#endif
                             6649 ; 28   |
                             6650 ; 29   |#if !defined(NULL)
                             6651 ; 30   |#define NULL 0
                             6652 ; 31   |#endif
                             6653 ; 32   |
                             6654 ; 33   |#define MAX_INT     0x7FFFFF
                             6655 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             6656 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             6657 ; 36   |#define MAX_ULONG   (-1) 
                             6658 ; 37   |
                             6659 ; 38   |#define WORD_SIZE   24              // word size in bits
                             6660 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             6661 ; 40   |
                             6662 ; 41   |
                             6663 ; 42   |#define BYTE    unsigned char       // btVarName
                             6664 ; 43   |#define CHAR    signed char         // cVarName
                             6665 ; 44   |#define USHORT  unsigned short      // usVarName
                             6666 ; 45   |#define SHORT   unsigned short      // sVarName
                             6667 ; 46   |#define WORD    unsigned int        // wVarName
                             6668 ; 47   |#define INT     signed int          // iVarName
                             6669 ; 48   |#define DWORD   unsigned long       // dwVarName
                             6670 ; 49   |#define LONG    signed long         // lVarName
                             6671 ; 50   |#define BOOL    unsigned int        // bVarName
                             6672 ; 51   |#define FRACT   _fract              // frVarName
                             6673 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             6674 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             6675 ; 54   |#define FLOAT   float               // fVarName
                             6676 ; 55   |#define DBL     double              // dVarName
                             6677 ; 56   |#define ENUM    enum                // eVarName
                             6678 ; 57   |#define CMX     _complex            // cmxVarName
                             6679 ; 58   |typedef WORD UCS3;                   // 
                             6680 ; 59   |
                             6681 ; 60   |#define UINT16  unsigned short
                             6682 ; 61   |#define UINT8   unsigned char   
                             6683 ; 62   |#define UINT32  unsigned long
                             6684 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6685 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             6686 ; 65   |#define WCHAR   UINT16
                             6687 ; 66   |
                             6688 ; 67   |//UINT128 is 16 bytes or 6 words
                             6689 ; 68   |typedef struct UINT128_3500 {   
                             6690 ; 69   |    int val[6];     
                             6691 ; 70   |} UINT128_3500;
                             6692 ; 71   |
                             6693 ; 72   |#define UINT128   UINT128_3500
                             6694 ; 73   |
                             6695 ; 74   |// Little endian word packed byte strings:   
                             6696 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6697 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6698 ; 77   |// Little endian word packed byte strings:   
                             6699 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             6700 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             6701 ; 80   |
                             6702 ; 81   |// Declare Memory Spaces To Use When Coding
                             6703 ; 82   |// A. Sector Buffers
                             6704 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             6705 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6706 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             6707 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             6708 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             6709 ; 88   |// B. Media DDI Memory
                             6710 ; 89   |#define MEDIA_DDI_MEM _Y
                             6711 ; 90   |
                             6712 ; 91   |
                             6713 ; 92   |
                             6714 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             6715 ; 94   |// Examples of circular pointers:
                             6716 ; 95   |//    INT CIRC cpiVarName
                             6717 ; 96   |//    DWORD CIRC cpdwVarName
                             6718 ; 97   |
                             6719 ; 98   |#define RETCODE INT                 // rcVarName
                             6720 ; 99   |
                             6721 ; 100  |// generic bitfield structure
                             6722 ; 101  |struct Bitfield {
                             6723 ; 102  |    unsigned int B0  :1;
                             6724 ; 103  |    unsigned int B1  :1;
                             6725 ; 104  |    unsigned int B2  :1;
                             6726 ; 105  |    unsigned int B3  :1;
                             6727 ; 106  |    unsigned int B4  :1;
                             6728 ; 107  |    unsigned int B5  :1;
                             6729 ; 108  |    unsigned int B6  :1;
                             6730 ; 109  |    unsigned int B7  :1;
                             6731 ; 110  |    unsigned int B8  :1;
                             6732 ; 111  |    unsigned int B9  :1;
                             6733 ; 112  |    unsigned int B10 :1;
                             6734 ; 113  |    unsigned int B11 :1;
                             6735 ; 114  |    unsigned int B12 :1;
                             6736 ; 115  |    unsigned int B13 :1;
                             6737 ; 116  |    unsigned int B14 :1;
                             6738 ; 117  |    unsigned int B15 :1;
                             6739 ; 118  |    unsigned int B16 :1;
                             6740 ; 119  |    unsigned int B17 :1;
                             6741 ; 120  |    unsigned int B18 :1;
                             6742 ; 121  |    unsigned int B19 :1;
                             6743 ; 122  |    unsigned int B20 :1;
                             6744 ; 123  |    unsigned int B21 :1;
                             6745 ; 124  |    unsigned int B22 :1;
                             6746 ; 125  |    unsigned int B23 :1;
                             6747 ; 126  |};
                             6748 ; 127  |
                             6749 ; 128  |union BitInt {
                             6750 ; 129  |        struct Bitfield B;
                             6751 ; 130  |        int        I;
                             6752 ; 131  |};
                             6753 ; 132  |
                             6754 ; 133  |#define MAX_MSG_LENGTH 10
                             6755 ; 134  |struct CMessage
                             6756 ; 135  |{
                             6757 ; 136  |        unsigned int m_uLength;
                             6758 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             6759 ; 138  |};
                             6760 ; 139  |
                             6761 ; 140  |typedef struct {
                             6762 ; 141  |    WORD m_wLength;
                             6763 ; 142  |    WORD m_wMessage;
                             6764 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             6765 ; 144  |} Message;
                             6766 ; 145  |
                             6767 ; 146  |struct MessageQueueDescriptor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6768 ; 147  |{
                             6769 ; 148  |        int *m_pBase;
                             6770 ; 149  |        int m_iModulo;
                             6771 ; 150  |        int m_iSize;
                             6772 ; 151  |        int *m_pHead;
                             6773 ; 152  |        int *m_pTail;
                             6774 ; 153  |};
                             6775 ; 154  |
                             6776 ; 155  |struct ModuleEntry
                             6777 ; 156  |{
                             6778 ; 157  |    int m_iSignaledEventMask;
                             6779 ; 158  |    int m_iWaitEventMask;
                             6780 ; 159  |    int m_iResourceOfCode;
                             6781 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             6782 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             6783 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             6784 ; 163  |    int m_uTimeOutHigh;
                             6785 ; 164  |    int m_uTimeOutLow;
                             6786 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             6787 ; 166  |};
                             6788 ; 167  |
                             6789 ; 168  |union WaitMask{
                             6790 ; 169  |    struct B{
                             6791 ; 170  |        unsigned int m_bNone     :1;
                             6792 ; 171  |        unsigned int m_bMessage  :1;
                             6793 ; 172  |        unsigned int m_bTimer    :1;
                             6794 ; 173  |        unsigned int m_bButton   :1;
                             6795 ; 174  |    } B;
                             6796 ; 175  |    int I;
                             6797 ; 176  |} ;
                             6798 ; 177  |
                             6799 ; 178  |
                             6800 ; 179  |struct Button {
                             6801 ; 180  |        WORD wButtonEvent;
                             6802 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             6803 ; 182  |};
                             6804 ; 183  |
                             6805 ; 184  |struct Message {
                             6806 ; 185  |        WORD wMsgLength;
                             6807 ; 186  |        WORD wMsgCommand;
                             6808 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             6809 ; 188  |};
                             6810 ; 189  |
                             6811 ; 190  |union EventTypes {
                             6812 ; 191  |        struct CMessage msg;
                             6813 ; 192  |        struct Button Button ;
                             6814 ; 193  |        struct Message Message;
                             6815 ; 194  |};
                             6816 ; 195  |
                             6817 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             6818 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             6819 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             6820 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             6821 ; 200  |
                             6822 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             6823 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             6824 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             6825 ; 204  |
                             6826 ; 205  |#if DEBUG
                             6827 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             6828 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6829 ; 208  |#else 
                             6830 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             6831 ; 210  |#define DebugBuildAssert(x)    
                             6832 ; 211  |#endif
                             6833 ; 212  |
                             6834 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             6835 ; 214  |//  #pragma asm
                             6836 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             6837 ; 216  |//  #pragma endasm
                             6838 ; 217  |
                             6839 ; 218  |
                             6840 ; 219  |#ifdef COLOR_262K
                             6841 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             6842 ; 221  |#elif defined(COLOR_65K)
                             6843 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             6844 ; 223  |#else
                             6845 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             6846 ; 225  |#endif
                             6847 ; 226  |    
                             6848 ; 227  |#endif // #ifndef _TYPES_H
                             6849 
                             6851 
                             6852 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6853 ; 7    |
                             6854 ; 8    |//   SYSTEM STMP Registers 
                             6855 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             6856 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             6857 ; 11   |
                             6858 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             6859 ; 13   |
                             6860 ; 14   |
                             6861 ; 15   |
                             6862 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             6863 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             6864 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             6865 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             6866 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             6867 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             6868 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             6869 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             6870 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             6871 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             6872 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             6873 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             6874 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             6875 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             6876 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             6877 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             6878 ; 32   |
                             6879 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             6880 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             6881 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             6882 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             6883 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             6884 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             6885 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             6886 ; 40   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6887 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             6888 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             6889 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             6890 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             6891 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             6892 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             6893 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             6894 ; 48   |
                             6895 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             6896 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             6897 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             6898 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             6899 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             6900 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             6901 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             6902 ; 56   |
                             6903 ; 57   |typedef union               
                             6904 ; 58   |{
                             6905 ; 59   |    struct {
                             6906 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             6907 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             6908 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             6909 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             6910 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             6911 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             6912 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             6913 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             6914 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             6915 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             6916 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             6917 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             6918 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             6919 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             6920 ; 74   |    } B;
                             6921 ; 75   |   unsigned int I;
                             6922 ; 76   |        unsigned int U;
                             6923 ; 77   |} lradc_ctrl_type;
                             6924 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             6925 ; 79   |
                             6926 ; 80   |
                             6927 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             6928 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             6929 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             6930 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             6931 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             6932 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             6933 ; 87   |
                             6934 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             6935 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             6936 ; 90   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6937 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             6938 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             6939 ; 93   |
                             6940 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             6941 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             6942 ; 96   |
                             6943 ; 97   |
                             6944 ; 98   |typedef union               
                             6945 ; 99   |{
                             6946 ; 100  |    struct {
                             6947 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             6948 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             6949 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             6950 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             6951 ; 105  |    } B;
                             6952 ; 106  |    unsigned int I;
                             6953 ; 107  |} lradc_thrsh_type;
                             6954 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             6955 ; 109  |
                             6956 ; 110  |
                             6957 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                             6958 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             6959 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             6960 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             6961 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             6962 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             6963 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             6964 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             6965 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             6966 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             6967 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             6968 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             6969 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             6970 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             6971 ; 125  |
                             6972 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             6973 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             6974 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             6975 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             6976 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             6977 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             6978 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             6979 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             6980 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             6981 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             6982 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             6983 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             6984 ; 138  |
                             6985 ; 139  |
                             6986 ; 140  |
                             6987 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             6988 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             6989 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6990 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             6991 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             6992 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             6993 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             6994 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             6995 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             6996 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             6997 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             6998 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             6999 ; 153  |
                             7000 ; 154  |
                             7001 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             7002 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             7003 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             7004 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             7005 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             7006 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             7007 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
                             7008 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             7009 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             7010 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             7011 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             7012 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             7013 ; 167  |
                             7014 ; 168  |typedef union               
                             7015 ; 169  |{
                             7016 ; 170  |    struct {
                             7017 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             7018 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             7019 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             7020 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             7021 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             7022 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             7023 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             7024 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             7025 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             7026 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             7027 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             7028 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             7029 ; 183  |    } B;
                             7030 ; 184  |    unsigned int I;
                             7031 ; 185  |} lradc_result_type;
                             7032 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             7033 ; 187  |
                             7034 ; 188  |
                             7035 ; 189  |
                             7036 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             7037 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             7038 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7039 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             7040 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7041 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             7042 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             7043 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             7044 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             7045 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             7046 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             7047 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             7048 ; 202  |
                             7049 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             7050 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7051 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             7052 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             7053 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             7054 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             7055 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             7056 ; 210  |
                             7057 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             7058 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             7059 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             7060 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
                             7061 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             7062 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             7063 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             7064 ; 218  |
                             7065 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             7066 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             7067 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             7068 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             7069 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             7070 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             7071 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             7072 ; 226  |
                             7073 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             7074 ; 228  |
                             7075 ; 229  |
                             7076 ; 230  |
                             7077 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             7078 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             7079 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7080 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             7081 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7082 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             7083 ; 237  |
                             7084 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7085 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7086 ; 240  |
                             7087 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             7088 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7089 ; 243  |
                             7090 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7091 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7092 ; 246  |
                             7093 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             7094 ; 248  |
                             7095 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             7096 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             7097 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             7098 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             7099 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             7100 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             7101 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             7102 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             7103 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             7104 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             7105 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             7106 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             7107 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             7108 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             7109 ; 263  |
                             7110 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             7111 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
                             7112 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             7113 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             7114 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             7115 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             7116 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             7117 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             7118 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             7119 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             7120 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             7121 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             7122 ; 276  |
                             7123 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             7124 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             7125 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             7126 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             7127 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             7128 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             7129 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             7130 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             7131 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             7132 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             7133 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             7134 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             7135 ; 289  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7136 ; 290  |
                             7137 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             7138 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             7139 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             7140 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             7141 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             7142 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             7143 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             7144 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             7145 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             7146 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             7147 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             7148 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             7149 ; 303  |
                             7150 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             7151 ; 305  |
                             7152 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             7153 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             7154 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             7155 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             7156 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7157 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             7158 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             7159 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             7160 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
                             7161 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             7162 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             7163 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             7164 ; 318  |
                             7165 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             7166 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7167 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             7168 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             7169 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             7170 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             7171 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             7172 ; 326  |
                             7173 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             7174 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             7175 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             7176 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             7177 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             7178 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             7179 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             7180 ; 334  |
                             7181 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             7182 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             7183 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             7184 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             7185 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7186 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             7187 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             7188 ; 342  |
                             7189 ; 343  |
                             7190 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             7191 ; 345  |
                             7192 ; 346  |
                             7193 ; 347  |
                             7194 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             7195 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             7196 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7197 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             7198 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7199 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             7200 ; 354  |
                             7201 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7202 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7203 ; 357  |
                             7204 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             7205 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             7206 ; 360  |
                             7207 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7208 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7209 ; 363  |
                             7210 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             7211 ; 365  |
                             7212 ; 366  |
                             7213 ; 367  |
                             7214 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             7215 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             7216 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             7217 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             7218 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             7219 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             7220 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             7221 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             7222 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             7223 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             7224 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             7225 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             7226 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             7227 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             7228 ; 382  |
                             7229 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             7230 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             7231 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             7232 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             7233 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             7234 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             7235 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             7236 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             7237 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             7238 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             7239 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7240 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             7241 ; 395  |
                             7242 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             7243 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             7244 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             7245 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             7246 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             7247 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             7248 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             7249 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             7250 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             7251 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             7252 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             7253 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
                             7254 ; 408  |
                             7255 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             7256 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             7257 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             7258 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             7259 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             7260 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             7261 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             7262 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             7263 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             7264 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             7265 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             7266 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             7267 ; 421  |
                             7268 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             7269 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7270 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7271 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7272 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7273 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7274 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7275 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7276 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7277 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7278 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7279 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7280 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7281 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7282 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7283 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7284 ; 438  |#define HW_LRADC_RES_REF_7                              258
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7285 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             7286 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             7287 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7288 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7289 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7290 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7291 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7292 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7293 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7294 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7295 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7296 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7297 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7298 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7299 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7300 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             7301 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7302 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             7303 ; 457  |
                             7304 ; 458  |//Needed by button.asm
                             7305 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7306 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7307 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7308 ; 462  |
                             7309 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7310 ; 464  |
                             7311 ; 465  |#endif
                             7312 ; 466  |
                             7313 ; 467  |
                             7314 
                             7316 
                             7317 ; 27   |#include "regspwm.h"
                             7318 
                             7320 
                             7321 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7322 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7323 ; 3    |// Filename: regspwm.inc
                             7324 ; 4    |// Description: Register definitions for PWM interface
                             7325 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7326 ; 6    |// The following naming conventions are followed in this file.
                             7327 ; 7    |// All registers are named using the format...
                             7328 ; 8    |//     HW_<module>_<regname>
                             7329 ; 9    |// where <module> is the module name which can be any of the following...
                             7330 ; 10   |//     USB20
                             7331 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7332 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7333 ; 13   |// that module)
                             7334 ; 14   |// <regname> is the specific register within that module
                             7335 ; 15   |// We also define the following...
                             7336 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7337 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7338 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7339 ; 19   |// which does something else, and
                             7340 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7341 ; 21   |// which does something else.
                             7342 ; 22   |// Other rules
                             7343 ; 23   |//     All caps
                             7344 ; 24   |//     Numeric identifiers start at 0
                             7345 ; 25   |#if !(defined(regspwminc))
                             7346 ; 26   |#define regspwminc 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7347 ; 27   |
                             7348 ; 28   |#include "types.h"
                             7349 
                             7351 
                             7352 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7353 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7354 ; 3    |//
                             7355 ; 4    |// Filename: types.h
                             7356 ; 5    |// Description: Standard data types
                             7357 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7358 ; 7    |
                             7359 ; 8    |#ifndef _TYPES_H
                             7360 ; 9    |#define _TYPES_H
                             7361 ; 10   |
                             7362 ; 11   |// TODO:  move this outta here!
                             7363 ; 12   |#if !defined(NOERROR)
                             7364 ; 13   |#define NOERROR 0
                             7365 ; 14   |#define SUCCESS 0
                             7366 ; 15   |#endif 
                             7367 ; 16   |#if !defined(SUCCESS)
                             7368 ; 17   |#define SUCCESS  0
                             7369 ; 18   |#endif
                             7370 ; 19   |#if !defined(ERROR)
                             7371 ; 20   |#define ERROR   -1
                             7372 ; 21   |#endif
                             7373 ; 22   |#if !defined(FALSE)
                             7374 ; 23   |#define FALSE 0
                             7375 ; 24   |#endif
                             7376 ; 25   |#if !defined(TRUE)
                             7377 ; 26   |#define TRUE  1
                             7378 ; 27   |#endif
                             7379 ; 28   |
                             7380 ; 29   |#if !defined(NULL)
                             7381 ; 30   |#define NULL 0
                             7382 ; 31   |#endif
                             7383 ; 32   |
                             7384 ; 33   |#define MAX_INT     0x7FFFFF
                             7385 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7386 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7387 ; 36   |#define MAX_ULONG   (-1) 
                             7388 ; 37   |
                             7389 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7390 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7391 ; 40   |
                             7392 ; 41   |
                             7393 ; 42   |#define BYTE    unsigned char       // btVarName
                             7394 ; 43   |#define CHAR    signed char         // cVarName
                             7395 ; 44   |#define USHORT  unsigned short      // usVarName
                             7396 ; 45   |#define SHORT   unsigned short      // sVarName
                             7397 ; 46   |#define WORD    unsigned int        // wVarName
                             7398 ; 47   |#define INT     signed int          // iVarName
                             7399 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7400 ; 49   |#define LONG    signed long         // lVarName
                             7401 ; 50   |#define BOOL    unsigned int        // bVarName
                             7402 ; 51   |#define FRACT   _fract              // frVarName
                             7403 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7404 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7405 ; 54   |#define FLOAT   float               // fVarName
                             7406 ; 55   |#define DBL     double              // dVarName
                             7407 ; 56   |#define ENUM    enum                // eVarName
                             7408 ; 57   |#define CMX     _complex            // cmxVarName
                             7409 ; 58   |typedef WORD UCS3;                   // 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7410 ; 59   |
                             7411 ; 60   |#define UINT16  unsigned short
                             7412 ; 61   |#define UINT8   unsigned char   
                             7413 ; 62   |#define UINT32  unsigned long
                             7414 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7415 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7416 ; 65   |#define WCHAR   UINT16
                             7417 ; 66   |
                             7418 ; 67   |//UINT128 is 16 bytes or 6 words
                             7419 ; 68   |typedef struct UINT128_3500 {   
                             7420 ; 69   |    int val[6];     
                             7421 ; 70   |} UINT128_3500;
                             7422 ; 71   |
                             7423 ; 72   |#define UINT128   UINT128_3500
                             7424 ; 73   |
                             7425 ; 74   |// Little endian word packed byte strings:   
                             7426 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7427 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7428 ; 77   |// Little endian word packed byte strings:   
                             7429 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7430 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7431 ; 80   |
                             7432 ; 81   |// Declare Memory Spaces To Use When Coding
                             7433 ; 82   |// A. Sector Buffers
                             7434 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7435 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7436 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7437 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7438 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7439 ; 88   |// B. Media DDI Memory
                             7440 ; 89   |#define MEDIA_DDI_MEM _Y
                             7441 ; 90   |
                             7442 ; 91   |
                             7443 ; 92   |
                             7444 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7445 ; 94   |// Examples of circular pointers:
                             7446 ; 95   |//    INT CIRC cpiVarName
                             7447 ; 96   |//    DWORD CIRC cpdwVarName
                             7448 ; 97   |
                             7449 ; 98   |#define RETCODE INT                 // rcVarName
                             7450 ; 99   |
                             7451 ; 100  |// generic bitfield structure
                             7452 ; 101  |struct Bitfield {
                             7453 ; 102  |    unsigned int B0  :1;
                             7454 ; 103  |    unsigned int B1  :1;
                             7455 ; 104  |    unsigned int B2  :1;
                             7456 ; 105  |    unsigned int B3  :1;
                             7457 ; 106  |    unsigned int B4  :1;
                             7458 ; 107  |    unsigned int B5  :1;
                             7459 ; 108  |    unsigned int B6  :1;
                             7460 ; 109  |    unsigned int B7  :1;
                             7461 ; 110  |    unsigned int B8  :1;
                             7462 ; 111  |    unsigned int B9  :1;
                             7463 ; 112  |    unsigned int B10 :1;
                             7464 ; 113  |    unsigned int B11 :1;
                             7465 ; 114  |    unsigned int B12 :1;
                             7466 ; 115  |    unsigned int B13 :1;
                             7467 ; 116  |    unsigned int B14 :1;
                             7468 ; 117  |    unsigned int B15 :1;
                             7469 ; 118  |    unsigned int B16 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7470 ; 119  |    unsigned int B17 :1;
                             7471 ; 120  |    unsigned int B18 :1;
                             7472 ; 121  |    unsigned int B19 :1;
                             7473 ; 122  |    unsigned int B20 :1;
                             7474 ; 123  |    unsigned int B21 :1;
                             7475 ; 124  |    unsigned int B22 :1;
                             7476 ; 125  |    unsigned int B23 :1;
                             7477 ; 126  |};
                             7478 ; 127  |
                             7479 ; 128  |union BitInt {
                             7480 ; 129  |        struct Bitfield B;
                             7481 ; 130  |        int        I;
                             7482 ; 131  |};
                             7483 ; 132  |
                             7484 ; 133  |#define MAX_MSG_LENGTH 10
                             7485 ; 134  |struct CMessage
                             7486 ; 135  |{
                             7487 ; 136  |        unsigned int m_uLength;
                             7488 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7489 ; 138  |};
                             7490 ; 139  |
                             7491 ; 140  |typedef struct {
                             7492 ; 141  |    WORD m_wLength;
                             7493 ; 142  |    WORD m_wMessage;
                             7494 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7495 ; 144  |} Message;
                             7496 ; 145  |
                             7497 ; 146  |struct MessageQueueDescriptor
                             7498 ; 147  |{
                             7499 ; 148  |        int *m_pBase;
                             7500 ; 149  |        int m_iModulo;
                             7501 ; 150  |        int m_iSize;
                             7502 ; 151  |        int *m_pHead;
                             7503 ; 152  |        int *m_pTail;
                             7504 ; 153  |};
                             7505 ; 154  |
                             7506 ; 155  |struct ModuleEntry
                             7507 ; 156  |{
                             7508 ; 157  |    int m_iSignaledEventMask;
                             7509 ; 158  |    int m_iWaitEventMask;
                             7510 ; 159  |    int m_iResourceOfCode;
                             7511 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7512 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7513 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7514 ; 163  |    int m_uTimeOutHigh;
                             7515 ; 164  |    int m_uTimeOutLow;
                             7516 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7517 ; 166  |};
                             7518 ; 167  |
                             7519 ; 168  |union WaitMask{
                             7520 ; 169  |    struct B{
                             7521 ; 170  |        unsigned int m_bNone     :1;
                             7522 ; 171  |        unsigned int m_bMessage  :1;
                             7523 ; 172  |        unsigned int m_bTimer    :1;
                             7524 ; 173  |        unsigned int m_bButton   :1;
                             7525 ; 174  |    } B;
                             7526 ; 175  |    int I;
                             7527 ; 176  |} ;
                             7528 ; 177  |
                             7529 ; 178  |
                             7530 ; 179  |struct Button {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7531 ; 180  |        WORD wButtonEvent;
                             7532 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7533 ; 182  |};
                             7534 ; 183  |
                             7535 ; 184  |struct Message {
                             7536 ; 185  |        WORD wMsgLength;
                             7537 ; 186  |        WORD wMsgCommand;
                             7538 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7539 ; 188  |};
                             7540 ; 189  |
                             7541 ; 190  |union EventTypes {
                             7542 ; 191  |        struct CMessage msg;
                             7543 ; 192  |        struct Button Button ;
                             7544 ; 193  |        struct Message Message;
                             7545 ; 194  |};
                             7546 ; 195  |
                             7547 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7548 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7549 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7550 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7551 ; 200  |
                             7552 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7553 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7554 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7555 ; 204  |
                             7556 ; 205  |#if DEBUG
                             7557 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7558 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7559 ; 208  |#else 
                             7560 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7561 ; 210  |#define DebugBuildAssert(x)    
                             7562 ; 211  |#endif
                             7563 ; 212  |
                             7564 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7565 ; 214  |//  #pragma asm
                             7566 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7567 ; 216  |//  #pragma endasm
                             7568 ; 217  |
                             7569 ; 218  |
                             7570 ; 219  |#ifdef COLOR_262K
                             7571 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7572 ; 221  |#elif defined(COLOR_65K)
                             7573 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             7574 ; 223  |#else
                             7575 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7576 ; 225  |#endif
                             7577 ; 226  |    
                             7578 ; 227  |#endif // #ifndef _TYPES_H
                             7579 
                             7581 
                             7582 ; 29   |
                             7583 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7584 ; 31   |//   Pulse Width Modulator STMP Registers 
                             7585 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7586 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             7587 ; 34   |
                             7588 ; 35   |
                             7589 ; 36   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7590 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             7591 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             7592 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             7593 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             7594 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             7595 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             7596 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             7597 ; 44   |
                             7598 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             7599 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             7600 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             7601 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             7602 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             7603 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                             7604 ; 51   |
                             7605 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_
                                  BITPOS)
                             7606 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_
                                  BITPOS)
                             7607 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_
                                  BITPOS)
                             7608 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_
                                  BITPOS)
                             7609 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             7610 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_
                                  BITPOS)
                             7611 ; 58   |
                             7612 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             7613 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             7614 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             7615 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             7616 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             7617 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             7618 ; 65   |
                             7619 ; 66   |typedef union               
                             7620 ; 67   |{
                             7621 ; 68   |    struct {
                             7622 ; 69   |        int PWM0_EN                    :1;
                             7623 ; 70   |        int PWM1_EN                    :1;
                             7624 ; 71   |        int PWM2_EN                    :1;
                             7625 ; 72   |        int PWM3_EN                    :1;
                             7626 ; 73   |        int RSVD0                      :4;
                             7627 ; 74   |        int CDIV                       :2;
                             7628 ; 75   |        int RSVD1                      :13;
                             7629 ; 76   |        int MSTR_EN                    :1;
                             7630 ; 77   |    } B;
                             7631 ; 78   |    int I;
                             7632 ; 79   |} pwmcsr_type;
                             7633 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control 
                                  Status Register */
                             7634 ; 81   |
                             7635 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             7636 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             7637 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             7638 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             7639 ; 86   |
                             7640 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             7641 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             7642 ; 89   |
                             7643 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTI
                                  VE_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7644 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_
                                  INACTIVE_BITPOS)
                             7645 ; 92   |
                             7646 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             7647 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             7648 ; 95   |
                             7649 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             7650 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             7651 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             7652 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             7653 ; 100  |
                             7654 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             7655 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             7656 ; 103  |
                             7657 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTI
                                  VE_BITPOS)
                             7658 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_
                                  INACTIVE_BITPOS)
                             7659 ; 106  |
                             7660 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             7661 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             7662 ; 109  |
                             7663 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             7664 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             7665 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             7666 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             7667 ; 114  |
                             7668 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             7669 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             7670 ; 117  |
                             7671 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTI
                                  VE_BITPOS)
                             7672 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_
                                  INACTIVE_BITPOS)
                             7673 ; 120  |
                             7674 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             7675 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             7676 ; 123  |
                             7677 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             7678 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             7679 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             7680 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             7681 ; 128  |
                             7682 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             7683 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             7684 ; 131  |
                             7685 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTI
                                  VE_BITPOS)
                             7686 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_
                                  INACTIVE_BITPOS)
                             7687 ; 134  |
                             7688 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             7689 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             7690 ; 137  |
                             7691 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             7692 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             7693 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             7694 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             7695 ; 142  |
                             7696 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             7697 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             7698 ; 145  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7699 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTI
                                  VE_BITPOS)
                             7700 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_
                                  INACTIVE_BITPOS)
                             7701 ; 148  |
                             7702 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             7703 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             7704 ; 151  |
                             7705 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             7706 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             7707 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             7708 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             7709 ; 156  |
                             7710 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             7711 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             7712 ; 159  |
                             7713 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTI
                                  VE_BITPOS)
                             7714 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_
                                  INACTIVE_BITPOS)
                             7715 ; 162  |
                             7716 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             7717 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             7718 ; 165  |
                             7719 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             7720 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             7721 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
                             7722 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             7723 ; 170  |
                             7724 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             7725 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             7726 ; 173  |
                             7727 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTI
                                  VE_BITPOS)
                             7728 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_
                                  INACTIVE_BITPOS)
                             7729 ; 176  |
                             7730 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             7731 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             7732 ; 179  |
                             7733 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             7734 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             7735 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             7736 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             7737 ; 184  |
                             7738 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             7739 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             7740 ; 187  |
                             7741 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTI
                                  VE_BITPOS)
                             7742 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_
                                  INACTIVE_BITPOS)
                             7743 ; 190  |
                             7744 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             7745 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             7746 ; 193  |
                             7747 ; 194  |typedef union               
                             7748 ; 195  |{
                             7749 ; 196  |    struct {
                             7750 ; 197  |       int ACTIVE                    :12;
                             7751 ; 198  |       int INACTIVE                  :12;
                             7752 ; 199  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7753 ; 200  |    int I;
                             7754 ; 201  |} pwmchan_type;
                             7755 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Cha
                                  nnel 0 A Register */
                             7756 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Cha
                                  nnel 0 B Register */
                             7757 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Cha
                                  nnel 1 A Register */
                             7758 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Cha
                                  nnel 1 B Register */
                             7759 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Cha
                                  nnel 2 A Register */
                             7760 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Cha
                                  nnel 2 B Register */
                             7761 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Cha
                                  nnel 3 A Register */
                             7762 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Cha
                                  nnel 3 B Register */
                             7763 ; 210  |
                             7764 ; 211  |#endif
                             7765 ; 212  |
                             7766 ; 213  |
                             7767 ; 214  |
                             7768 ; 215  |
                             7769 
                             7771 
                             7772 ; 28   |#include "regsrevision.h"
                             7773 
                             7775 
                             7776 ; 1    |#if !(defined(__HW_REVR))
                             7777 ; 2    |#define __HW_REVR 1
                             7778 ; 3    |
                             7779 ; 4    |
                             7780 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             7781 ; 6    |
                             7782 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             7783 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             7784 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             7785 ; 10   |
                             7786 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             7787 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             7788 ; 13   |
                             7789 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                             7790 ; 15   |
                             7791 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             7792 ; 17   |
                             7793 ; 18   |
                             7794 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             7795 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             7796 ; 21   |//  June15 2004: C struct updated to be correct: 
                             7797 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                             7798 ; 23   |typedef union               
                             7799 ; 24   |{
                             7800 ; 25   |    struct {
                             7801 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             7802 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                             7803 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             7804 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             7805 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7806 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             7807 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             7808 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             7809 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             7810 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             7811 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             7812 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             7813 ; 38   |    } B;
                             7814 ; 39   |
                             7815 ; 40   |    int I;
                             7816 ; 41   |
                             7817 ; 42   |} revr_type;
                             7818 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             7819 ; 44   |
                             7820 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             7821 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             7822 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             7823 ; 48   |
                             7824 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             7825 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                             7826 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             7827 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             7828 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             7829 ; 54   |
                             7830 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             7831 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
                             7832 ; 57   |
                             7833 ; 58   |#endif //!@def(__HW_REVR)
                             7834 ; 59   |
                             7835 
                             7837 
                             7838 ; 29   |#include "regsrtc.h"
                             7839 
                             7841 
                             7842 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7843 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7844 ; 3    |// Filename: regsrtc.inc
                             7845 ; 4    |// Description: Register definitions for RTC interface
                             7846 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7847 ; 6    |// The following naming conventions are followed in this file.
                             7848 ; 7    |// All registers are named using the format...
                             7849 ; 8    |//     HW_<module>_<regname>
                             7850 ; 9    |// where <module> is the module name which can be any of the following...
                             7851 ; 10   |//     USB20
                             7852 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7853 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7854 ; 13   |// that module)
                             7855 ; 14   |// <regname> is the specific register within that module
                             7856 ; 15   |// We also define the following...
                             7857 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7858 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7859 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7860 ; 19   |// which does something else, and
                             7861 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7862 ; 21   |// which does something else.
                             7863 ; 22   |// Other rules
                             7864 ; 23   |//     All caps
                             7865 ; 24   |//     Numeric identifiers start at 0
                             7866 ; 25   |#if !(defined(regsrtcinc))
                             7867 ; 26   |#define regsrtcinc 1
                             7868 ; 27   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7869 ; 28   |#include "types.h"
                             7870 
                             7872 
                             7873 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7874 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7875 ; 3    |//
                             7876 ; 4    |// Filename: types.h
                             7877 ; 5    |// Description: Standard data types
                             7878 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7879 ; 7    |
                             7880 ; 8    |#ifndef _TYPES_H
                             7881 ; 9    |#define _TYPES_H
                             7882 ; 10   |
                             7883 ; 11   |// TODO:  move this outta here!
                             7884 ; 12   |#if !defined(NOERROR)
                             7885 ; 13   |#define NOERROR 0
                             7886 ; 14   |#define SUCCESS 0
                             7887 ; 15   |#endif 
                             7888 ; 16   |#if !defined(SUCCESS)
                             7889 ; 17   |#define SUCCESS  0
                             7890 ; 18   |#endif
                             7891 ; 19   |#if !defined(ERROR)
                             7892 ; 20   |#define ERROR   -1
                             7893 ; 21   |#endif
                             7894 ; 22   |#if !defined(FALSE)
                             7895 ; 23   |#define FALSE 0
                             7896 ; 24   |#endif
                             7897 ; 25   |#if !defined(TRUE)
                             7898 ; 26   |#define TRUE  1
                             7899 ; 27   |#endif
                             7900 ; 28   |
                             7901 ; 29   |#if !defined(NULL)
                             7902 ; 30   |#define NULL 0
                             7903 ; 31   |#endif
                             7904 ; 32   |
                             7905 ; 33   |#define MAX_INT     0x7FFFFF
                             7906 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7907 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7908 ; 36   |#define MAX_ULONG   (-1) 
                             7909 ; 37   |
                             7910 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7911 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7912 ; 40   |
                             7913 ; 41   |
                             7914 ; 42   |#define BYTE    unsigned char       // btVarName
                             7915 ; 43   |#define CHAR    signed char         // cVarName
                             7916 ; 44   |#define USHORT  unsigned short      // usVarName
                             7917 ; 45   |#define SHORT   unsigned short      // sVarName
                             7918 ; 46   |#define WORD    unsigned int        // wVarName
                             7919 ; 47   |#define INT     signed int          // iVarName
                             7920 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7921 ; 49   |#define LONG    signed long         // lVarName
                             7922 ; 50   |#define BOOL    unsigned int        // bVarName
                             7923 ; 51   |#define FRACT   _fract              // frVarName
                             7924 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7925 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7926 ; 54   |#define FLOAT   float               // fVarName
                             7927 ; 55   |#define DBL     double              // dVarName
                             7928 ; 56   |#define ENUM    enum                // eVarName
                             7929 ; 57   |#define CMX     _complex            // cmxVarName
                             7930 ; 58   |typedef WORD UCS3;                   // 
                             7931 ; 59   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7932 ; 60   |#define UINT16  unsigned short
                             7933 ; 61   |#define UINT8   unsigned char   
                             7934 ; 62   |#define UINT32  unsigned long
                             7935 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7936 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7937 ; 65   |#define WCHAR   UINT16
                             7938 ; 66   |
                             7939 ; 67   |//UINT128 is 16 bytes or 6 words
                             7940 ; 68   |typedef struct UINT128_3500 {   
                             7941 ; 69   |    int val[6];     
                             7942 ; 70   |} UINT128_3500;
                             7943 ; 71   |
                             7944 ; 72   |#define UINT128   UINT128_3500
                             7945 ; 73   |
                             7946 ; 74   |// Little endian word packed byte strings:   
                             7947 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7948 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7949 ; 77   |// Little endian word packed byte strings:   
                             7950 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7951 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7952 ; 80   |
                             7953 ; 81   |// Declare Memory Spaces To Use When Coding
                             7954 ; 82   |// A. Sector Buffers
                             7955 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7956 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7957 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7958 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7959 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7960 ; 88   |// B. Media DDI Memory
                             7961 ; 89   |#define MEDIA_DDI_MEM _Y
                             7962 ; 90   |
                             7963 ; 91   |
                             7964 ; 92   |
                             7965 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7966 ; 94   |// Examples of circular pointers:
                             7967 ; 95   |//    INT CIRC cpiVarName
                             7968 ; 96   |//    DWORD CIRC cpdwVarName
                             7969 ; 97   |
                             7970 ; 98   |#define RETCODE INT                 // rcVarName
                             7971 ; 99   |
                             7972 ; 100  |// generic bitfield structure
                             7973 ; 101  |struct Bitfield {
                             7974 ; 102  |    unsigned int B0  :1;
                             7975 ; 103  |    unsigned int B1  :1;
                             7976 ; 104  |    unsigned int B2  :1;
                             7977 ; 105  |    unsigned int B3  :1;
                             7978 ; 106  |    unsigned int B4  :1;
                             7979 ; 107  |    unsigned int B5  :1;
                             7980 ; 108  |    unsigned int B6  :1;
                             7981 ; 109  |    unsigned int B7  :1;
                             7982 ; 110  |    unsigned int B8  :1;
                             7983 ; 111  |    unsigned int B9  :1;
                             7984 ; 112  |    unsigned int B10 :1;
                             7985 ; 113  |    unsigned int B11 :1;
                             7986 ; 114  |    unsigned int B12 :1;
                             7987 ; 115  |    unsigned int B13 :1;
                             7988 ; 116  |    unsigned int B14 :1;
                             7989 ; 117  |    unsigned int B15 :1;
                             7990 ; 118  |    unsigned int B16 :1;
                             7991 ; 119  |    unsigned int B17 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7992 ; 120  |    unsigned int B18 :1;
                             7993 ; 121  |    unsigned int B19 :1;
                             7994 ; 122  |    unsigned int B20 :1;
                             7995 ; 123  |    unsigned int B21 :1;
                             7996 ; 124  |    unsigned int B22 :1;
                             7997 ; 125  |    unsigned int B23 :1;
                             7998 ; 126  |};
                             7999 ; 127  |
                             8000 ; 128  |union BitInt {
                             8001 ; 129  |        struct Bitfield B;
                             8002 ; 130  |        int        I;
                             8003 ; 131  |};
                             8004 ; 132  |
                             8005 ; 133  |#define MAX_MSG_LENGTH 10
                             8006 ; 134  |struct CMessage
                             8007 ; 135  |{
                             8008 ; 136  |        unsigned int m_uLength;
                             8009 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8010 ; 138  |};
                             8011 ; 139  |
                             8012 ; 140  |typedef struct {
                             8013 ; 141  |    WORD m_wLength;
                             8014 ; 142  |    WORD m_wMessage;
                             8015 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8016 ; 144  |} Message;
                             8017 ; 145  |
                             8018 ; 146  |struct MessageQueueDescriptor
                             8019 ; 147  |{
                             8020 ; 148  |        int *m_pBase;
                             8021 ; 149  |        int m_iModulo;
                             8022 ; 150  |        int m_iSize;
                             8023 ; 151  |        int *m_pHead;
                             8024 ; 152  |        int *m_pTail;
                             8025 ; 153  |};
                             8026 ; 154  |
                             8027 ; 155  |struct ModuleEntry
                             8028 ; 156  |{
                             8029 ; 157  |    int m_iSignaledEventMask;
                             8030 ; 158  |    int m_iWaitEventMask;
                             8031 ; 159  |    int m_iResourceOfCode;
                             8032 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8033 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8034 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8035 ; 163  |    int m_uTimeOutHigh;
                             8036 ; 164  |    int m_uTimeOutLow;
                             8037 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8038 ; 166  |};
                             8039 ; 167  |
                             8040 ; 168  |union WaitMask{
                             8041 ; 169  |    struct B{
                             8042 ; 170  |        unsigned int m_bNone     :1;
                             8043 ; 171  |        unsigned int m_bMessage  :1;
                             8044 ; 172  |        unsigned int m_bTimer    :1;
                             8045 ; 173  |        unsigned int m_bButton   :1;
                             8046 ; 174  |    } B;
                             8047 ; 175  |    int I;
                             8048 ; 176  |} ;
                             8049 ; 177  |
                             8050 ; 178  |
                             8051 ; 179  |struct Button {
                             8052 ; 180  |        WORD wButtonEvent;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8053 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8054 ; 182  |};
                             8055 ; 183  |
                             8056 ; 184  |struct Message {
                             8057 ; 185  |        WORD wMsgLength;
                             8058 ; 186  |        WORD wMsgCommand;
                             8059 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8060 ; 188  |};
                             8061 ; 189  |
                             8062 ; 190  |union EventTypes {
                             8063 ; 191  |        struct CMessage msg;
                             8064 ; 192  |        struct Button Button ;
                             8065 ; 193  |        struct Message Message;
                             8066 ; 194  |};
                             8067 ; 195  |
                             8068 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8069 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8070 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8071 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8072 ; 200  |
                             8073 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8074 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8075 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8076 ; 204  |
                             8077 ; 205  |#if DEBUG
                             8078 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8079 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8080 ; 208  |#else 
                             8081 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8082 ; 210  |#define DebugBuildAssert(x)    
                             8083 ; 211  |#endif
                             8084 ; 212  |
                             8085 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8086 ; 214  |//  #pragma asm
                             8087 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8088 ; 216  |//  #pragma endasm
                             8089 ; 217  |
                             8090 ; 218  |
                             8091 ; 219  |#ifdef COLOR_262K
                             8092 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8093 ; 221  |#elif defined(COLOR_65K)
                             8094 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8095 ; 223  |#else
                             8096 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8097 ; 225  |#endif
                             8098 ; 226  |    
                             8099 ; 227  |#endif // #ifndef _TYPES_H
                             8100 
                             8102 
                             8103 ; 29   |
                             8104 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8105 ; 31   |
                             8106 ; 32   |//   RTC STMP Registers 
                             8107 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             8108 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8109 ; 35   |
                             8110 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             8111 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8112 ; 38   |
                             8113 ; 39   |
                             8114 ; 40   |
                             8115 ; 41   |
                             8116 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             8117 ; 43   |
                             8118 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             8119 ; 45   |
                             8120 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             8121 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             8122 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             8123 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             8124 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             8125 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             8126 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             8127 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             8128 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             8129 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             8130 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             8131 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             8132 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             8133 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             8134 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             8135 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             8136 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             8137 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
                             8138 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             8139 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             8140 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             8141 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             8142 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             8143 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             8144 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             8145 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             8146 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             8147 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             8148 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             8149 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             8150 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             8151 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             8152 ; 78   |
                             8153 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             8154 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             8155 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             8156 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             8157 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             8158 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             8159 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             8160 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             8161 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             8162 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8163 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             8164 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             8165 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             8166 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             8167 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             8168 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             8169 ; 95   |
                             8170 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             8171 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             8172 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             8173 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             8174 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             8175 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             8176 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             8177 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             8178 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             8179 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             8180 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             8181 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             8182 ; 108  |
                             8183 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             8184 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             8185 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             8186 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             8187 ; 113  |
                             8188 ; 114  |
                             8189 ; 115  |typedef union               
                             8190 ; 116  |{
                             8191 ; 117  |    struct {
                             8192 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             8193 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             8194 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             8195 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             8196 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             8197 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             8198 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             8199 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             8200 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             8201 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             8202 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             8203 ; 129  |    } B;
                             8204 ; 130  |    int I;
                             8205 ; 131  |    unsigned int U;
                             8206 ; 132  |} rtc_csr_type;
                             8207 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             8208 ; 134  |
                             8209 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             8210 ; 136  |
                             8211 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             8212 ; 138  |
                             8213 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             8214 ; 140  |
                             8215 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             8216 ; 142  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8217 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             8218 ; 144  |
                             8219 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             8220 ; 146  |
                             8221 ; 147  |typedef union               
                             8222 ; 148  |{
                             8223 ; 149  |    struct {
                             8224 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             8225 ; 151  |    } B;
                             8226 ; 152  |    int I;
                             8227 ; 153  |    unsigned int U;
                             8228 ; 154  |} rtc_mseconds0_type;
                             8229 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             8230 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             8231 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             8232 ; 158  |
                             8233 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             8234 ; 160  |
                             8235 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             8236 ; 162  |
                             8237 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             8238 ; 164  |
                             8239 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
                             8240 ; 166  |
                             8241 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             8242 ; 168  |
                             8243 ; 169  |typedef union               
                             8244 ; 170  |{
                             8245 ; 171  |    struct {
                             8246 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             8247 ; 173  |    } B;
                             8248 ; 174  |    int I;
                             8249 ; 175  |    unsigned int U;
                             8250 ; 176  |} rtc_mseconds1_type;
                             8251 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             8252 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             8253 ; 179  |
                             8254 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             8255 ; 181  |#define HW_RTC_UP_OFFSET 2
                             8256 ; 182  |
                             8257 ; 183  |
                             8258 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             8259 ; 185  |
                             8260 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             8261 ; 187  |
                             8262 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             8263 ; 189  |
                             8264 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             8265 ; 191  |
                             8266 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             8267 ; 193  |
                             8268 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             8269 ; 195  |
                             8270 ; 196  |typedef union               
                             8271 ; 197  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8272 ; 198  |    struct {
                             8273 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             8274 ; 200  |    } B;
                             8275 ; 201  |    int I;
                             8276 ; 202  |    unsigned int U;
                             8277 ; 203  |} rtc_watchdog_type;
                             8278 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             8279 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             8280 ; 206  |
                             8281 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             8282 ; 208  |
                             8283 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             8284 ; 210  |
                             8285 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             8286 ; 212  |
                             8287 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             8288 ; 214  |
                             8289 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             8290 ; 216  |
                             8291 ; 217  |typedef union               
                             8292 ; 218  |{
                             8293 ; 219  |    struct {
                             8294 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             8295 ; 221  |    } B;
                             8296 ; 222  |    int I;
                             8297 ; 223  |    unsigned int U;
                             8298 ; 224  |} rtc_alarm0_type;
                             8299 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             8300 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             8301 ; 227  |
                             8302 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             8303 ; 229  |
                             8304 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             8305 ; 231  |
                             8306 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             8307 ; 233  |
                             8308 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             8309 ; 235  |
                             8310 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             8311 ; 237  |
                             8312 ; 238  |typedef union               
                             8313 ; 239  |{
                             8314 ; 240  |    struct {
                             8315 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             8316 ; 242  |    } B;
                             8317 ; 243  |    int I;
                             8318 ; 244  |    unsigned int U;
                             8319 ; 245  |} rtc_alarm1_type;
                             8320 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             8321 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             8322 ; 248  |
                             8323 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             8324 ; 250  |
                             8325 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             8326 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             8327 ; 253  |
                             8328 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8329 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             8330 ; 256  |
                             8331 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             8332 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             8333 ; 259  |
                             8334 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             8335 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             8336 ; 262  |
                             8337 ; 263  |typedef union               
                             8338 ; 264  |{
                             8339 ; 265  |    struct {
                             8340 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             8341 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             8342 ; 268  |    } B;
                             8343 ; 269  |    int I;
                             8344 ; 270  |    unsigned int U;
                             8345 ; 271  |} rtc_xtaldivide_type;
                             8346 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             8347 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             8348 ; 274  |
                             8349 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             8350 ; 276  |
                             8351 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             8352 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
                             8353 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             8354 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             8355 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             8356 ; 282  |
                             8357 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             8358 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             8359 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             8360 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             8361 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             8362 ; 288  |
                             8363 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             8364 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             8365 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             8366 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             8367 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             8368 ; 294  |
                             8369 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             8370 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             8371 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             8372 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             8373 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             8374 ; 300  |
                             8375 ; 301  |typedef union               
                             8376 ; 302  |{
                             8377 ; 303  |   struct {
                             8378 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             8379 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8380 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             8381 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             8382 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             8383 ; 309  |   } B;
                             8384 ; 310  |    int I;
                             8385 ; 311  |    unsigned int U;
                             8386 ; 312  |} rtc_PERSISTENT0_type;
                             8387 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             8388 ; 314  |
                             8389 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             8390 ; 316  |
                             8391 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             8392 ; 318  |
                             8393 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             8394 ; 320  |
                             8395 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             8396 ; 322  |
                             8397 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             8398 ; 324  |
                             8399 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             8400 ; 326  |
                             8401 ; 327  |
                             8402 ; 328  |typedef union               
                             8403 ; 329  |{
                             8404 ; 330  |    struct {
                             8405 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             8406 ; 332  |    } B;
                             8407 ; 333  |    int I;
                             8408 ; 334  |    unsigned int U;
                             8409 ; 335  |} rtc_PERSISTENT1_type;
                             8410 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             8411 ; 337  |
                             8412 ; 338  |
                             8413 ; 339  |#endif
                             8414 ; 340  |
                             8415 ; 341  |
                             8416 ; 342  |
                             8417 ; 343  |
                             8418 ; 344  |
                             8419 ; 345  |
                             8420 ; 346  |
                             8421 ; 347  |
                             8422 ; 348  |
                             8423 ; 349  |
                             8424 ; 350  |
                             8425 ; 351  |
                             8426 ; 352  |
                             8427 ; 353  |
                             8428 
                             8430 
                             8431 ; 30   |#include "regsspare.h"
                             8432 
                             8434 
                             8435 ; 1    |#if !(defined(RESGSSPARE_INC))
                             8436 ; 2    |#define RESGSSPARE_INC 1
                             8437 ; 3    |
                             8438 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             8439 ; 5    |
                             8440 ; 6    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8441 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             8442 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             8443 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             8444 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             8445 ; 11   |
                             8446 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             8447 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             8448 ; 14   |
                             8449 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             8450 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             8451 ; 17   |
                             8452 ; 18   |
                             8453 ; 19   |
                             8454 ; 20   |typedef union               
                             8455 ; 21   |{
                             8456 ; 22   |    struct {
                             8457 ; 23   |        int      I2SS       :1;     
                             8458 ; 24   |        int      USBSELECT  :1;     
                             8459 ; 25   |        unsigned            :6;
                             8460 ; 26   |        int      USBPLUGIN  :1;     
                             8461 ; 27   |        int      PSWITCH    :1;     
                             8462 ; 28   |    } B;
                             8463 ; 29   |
                             8464 ; 30   |    int I;
                             8465 ; 31   |
                             8466 ; 32   |} spare_type;
                             8467 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
                             8468 ; 34   |
                             8469 ; 35   |
                             8470 ; 36   |
                             8471 ; 37   |#endif
                             8472 
                             8474 
                             8475 ; 31   |#include "regsspi.h"
                             8476 
                             8478 
                             8479 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8480 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8481 ; 3    |//;; Filename    : regsspi.inc
                             8482 ; 4    |//;; Description : Register definitions for SPI interface
                             8483 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8484 ; 6    |
                             8485 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8486 ; 8    |// The following naming conventions are followed in this file.
                             8487 ; 9    |// All registers are named using the format...
                             8488 ; 10   |//     HW_<module>_<regname>
                             8489 ; 11   |// where <module> is the module name which can be any of the following...
                             8490 ; 12   |//     USB20
                             8491 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8492 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8493 ; 15   |// that module)
                             8494 ; 16   |// <regname> is the specific register within that module
                             8495 ; 17   |// We also define the following...
                             8496 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8497 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8498 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8499 ; 21   |// which does something else, and
                             8500 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8501 ; 23   |// which does something else.
                             8502 ; 24   |// Other rules
                             8503 ; 25   |//     All caps
                             8504 ; 26   |//     Numeric identifiers start at 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8505 ; 27   |#if !(defined(regsspiinc))
                             8506 ; 28   |#define regsspiinc 1
                             8507 ; 29   |
                             8508 ; 30   |#include "types.h"
                             8509 
                             8511 
                             8512 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8513 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8514 ; 3    |//
                             8515 ; 4    |// Filename: types.h
                             8516 ; 5    |// Description: Standard data types
                             8517 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8518 ; 7    |
                             8519 ; 8    |#ifndef _TYPES_H
                             8520 ; 9    |#define _TYPES_H
                             8521 ; 10   |
                             8522 ; 11   |// TODO:  move this outta here!
                             8523 ; 12   |#if !defined(NOERROR)
                             8524 ; 13   |#define NOERROR 0
                             8525 ; 14   |#define SUCCESS 0
                             8526 ; 15   |#endif 
                             8527 ; 16   |#if !defined(SUCCESS)
                             8528 ; 17   |#define SUCCESS  0
                             8529 ; 18   |#endif
                             8530 ; 19   |#if !defined(ERROR)
                             8531 ; 20   |#define ERROR   -1
                             8532 ; 21   |#endif
                             8533 ; 22   |#if !defined(FALSE)
                             8534 ; 23   |#define FALSE 0
                             8535 ; 24   |#endif
                             8536 ; 25   |#if !defined(TRUE)
                             8537 ; 26   |#define TRUE  1
                             8538 ; 27   |#endif
                             8539 ; 28   |
                             8540 ; 29   |#if !defined(NULL)
                             8541 ; 30   |#define NULL 0
                             8542 ; 31   |#endif
                             8543 ; 32   |
                             8544 ; 33   |#define MAX_INT     0x7FFFFF
                             8545 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8546 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8547 ; 36   |#define MAX_ULONG   (-1) 
                             8548 ; 37   |
                             8549 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8550 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8551 ; 40   |
                             8552 ; 41   |
                             8553 ; 42   |#define BYTE    unsigned char       // btVarName
                             8554 ; 43   |#define CHAR    signed char         // cVarName
                             8555 ; 44   |#define USHORT  unsigned short      // usVarName
                             8556 ; 45   |#define SHORT   unsigned short      // sVarName
                             8557 ; 46   |#define WORD    unsigned int        // wVarName
                             8558 ; 47   |#define INT     signed int          // iVarName
                             8559 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8560 ; 49   |#define LONG    signed long         // lVarName
                             8561 ; 50   |#define BOOL    unsigned int        // bVarName
                             8562 ; 51   |#define FRACT   _fract              // frVarName
                             8563 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8564 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8565 ; 54   |#define FLOAT   float               // fVarName
                             8566 ; 55   |#define DBL     double              // dVarName
                             8567 ; 56   |#define ENUM    enum                // eVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8568 ; 57   |#define CMX     _complex            // cmxVarName
                             8569 ; 58   |typedef WORD UCS3;                   // 
                             8570 ; 59   |
                             8571 ; 60   |#define UINT16  unsigned short
                             8572 ; 61   |#define UINT8   unsigned char   
                             8573 ; 62   |#define UINT32  unsigned long
                             8574 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8575 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8576 ; 65   |#define WCHAR   UINT16
                             8577 ; 66   |
                             8578 ; 67   |//UINT128 is 16 bytes or 6 words
                             8579 ; 68   |typedef struct UINT128_3500 {   
                             8580 ; 69   |    int val[6];     
                             8581 ; 70   |} UINT128_3500;
                             8582 ; 71   |
                             8583 ; 72   |#define UINT128   UINT128_3500
                             8584 ; 73   |
                             8585 ; 74   |// Little endian word packed byte strings:   
                             8586 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8587 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8588 ; 77   |// Little endian word packed byte strings:   
                             8589 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8590 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8591 ; 80   |
                             8592 ; 81   |// Declare Memory Spaces To Use When Coding
                             8593 ; 82   |// A. Sector Buffers
                             8594 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8595 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8596 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8597 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8598 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8599 ; 88   |// B. Media DDI Memory
                             8600 ; 89   |#define MEDIA_DDI_MEM _Y
                             8601 ; 90   |
                             8602 ; 91   |
                             8603 ; 92   |
                             8604 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8605 ; 94   |// Examples of circular pointers:
                             8606 ; 95   |//    INT CIRC cpiVarName
                             8607 ; 96   |//    DWORD CIRC cpdwVarName
                             8608 ; 97   |
                             8609 ; 98   |#define RETCODE INT                 // rcVarName
                             8610 ; 99   |
                             8611 ; 100  |// generic bitfield structure
                             8612 ; 101  |struct Bitfield {
                             8613 ; 102  |    unsigned int B0  :1;
                             8614 ; 103  |    unsigned int B1  :1;
                             8615 ; 104  |    unsigned int B2  :1;
                             8616 ; 105  |    unsigned int B3  :1;
                             8617 ; 106  |    unsigned int B4  :1;
                             8618 ; 107  |    unsigned int B5  :1;
                             8619 ; 108  |    unsigned int B6  :1;
                             8620 ; 109  |    unsigned int B7  :1;
                             8621 ; 110  |    unsigned int B8  :1;
                             8622 ; 111  |    unsigned int B9  :1;
                             8623 ; 112  |    unsigned int B10 :1;
                             8624 ; 113  |    unsigned int B11 :1;
                             8625 ; 114  |    unsigned int B12 :1;
                             8626 ; 115  |    unsigned int B13 :1;
                             8627 ; 116  |    unsigned int B14 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8628 ; 117  |    unsigned int B15 :1;
                             8629 ; 118  |    unsigned int B16 :1;
                             8630 ; 119  |    unsigned int B17 :1;
                             8631 ; 120  |    unsigned int B18 :1;
                             8632 ; 121  |    unsigned int B19 :1;
                             8633 ; 122  |    unsigned int B20 :1;
                             8634 ; 123  |    unsigned int B21 :1;
                             8635 ; 124  |    unsigned int B22 :1;
                             8636 ; 125  |    unsigned int B23 :1;
                             8637 ; 126  |};
                             8638 ; 127  |
                             8639 ; 128  |union BitInt {
                             8640 ; 129  |        struct Bitfield B;
                             8641 ; 130  |        int        I;
                             8642 ; 131  |};
                             8643 ; 132  |
                             8644 ; 133  |#define MAX_MSG_LENGTH 10
                             8645 ; 134  |struct CMessage
                             8646 ; 135  |{
                             8647 ; 136  |        unsigned int m_uLength;
                             8648 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8649 ; 138  |};
                             8650 ; 139  |
                             8651 ; 140  |typedef struct {
                             8652 ; 141  |    WORD m_wLength;
                             8653 ; 142  |    WORD m_wMessage;
                             8654 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8655 ; 144  |} Message;
                             8656 ; 145  |
                             8657 ; 146  |struct MessageQueueDescriptor
                             8658 ; 147  |{
                             8659 ; 148  |        int *m_pBase;
                             8660 ; 149  |        int m_iModulo;
                             8661 ; 150  |        int m_iSize;
                             8662 ; 151  |        int *m_pHead;
                             8663 ; 152  |        int *m_pTail;
                             8664 ; 153  |};
                             8665 ; 154  |
                             8666 ; 155  |struct ModuleEntry
                             8667 ; 156  |{
                             8668 ; 157  |    int m_iSignaledEventMask;
                             8669 ; 158  |    int m_iWaitEventMask;
                             8670 ; 159  |    int m_iResourceOfCode;
                             8671 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8672 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8673 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8674 ; 163  |    int m_uTimeOutHigh;
                             8675 ; 164  |    int m_uTimeOutLow;
                             8676 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8677 ; 166  |};
                             8678 ; 167  |
                             8679 ; 168  |union WaitMask{
                             8680 ; 169  |    struct B{
                             8681 ; 170  |        unsigned int m_bNone     :1;
                             8682 ; 171  |        unsigned int m_bMessage  :1;
                             8683 ; 172  |        unsigned int m_bTimer    :1;
                             8684 ; 173  |        unsigned int m_bButton   :1;
                             8685 ; 174  |    } B;
                             8686 ; 175  |    int I;
                             8687 ; 176  |} ;
                             8688 ; 177  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8689 ; 178  |
                             8690 ; 179  |struct Button {
                             8691 ; 180  |        WORD wButtonEvent;
                             8692 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8693 ; 182  |};
                             8694 ; 183  |
                             8695 ; 184  |struct Message {
                             8696 ; 185  |        WORD wMsgLength;
                             8697 ; 186  |        WORD wMsgCommand;
                             8698 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8699 ; 188  |};
                             8700 ; 189  |
                             8701 ; 190  |union EventTypes {
                             8702 ; 191  |        struct CMessage msg;
                             8703 ; 192  |        struct Button Button ;
                             8704 ; 193  |        struct Message Message;
                             8705 ; 194  |};
                             8706 ; 195  |
                             8707 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8708 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8709 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8710 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8711 ; 200  |
                             8712 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8713 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8714 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8715 ; 204  |
                             8716 ; 205  |#if DEBUG
                             8717 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8718 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8719 ; 208  |#else 
                             8720 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8721 ; 210  |#define DebugBuildAssert(x)    
                             8722 ; 211  |#endif
                             8723 ; 212  |
                             8724 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8725 ; 214  |//  #pragma asm
                             8726 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8727 ; 216  |//  #pragma endasm
                             8728 ; 217  |
                             8729 ; 218  |
                             8730 ; 219  |#ifdef COLOR_262K
                             8731 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8732 ; 221  |#elif defined(COLOR_65K)
                             8733 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8734 ; 223  |#else
                             8735 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8736 ; 225  |#endif
                             8737 ; 226  |    
                             8738 ; 227  |#endif // #ifndef _TYPES_H
                             8739 
                             8741 
                             8742 ; 31   |
                             8743 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8744 ; 33   |
                             8745 ; 34   |//   SPI STMP3500 Registers 
                             8746 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             8747 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8748 ; 37   |
                             8749 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             8750 ; 39   |
                             8751 ; 40   |
                             8752 ; 41   |
                             8753 ; 42   |// /////////////////////////////////////////////
                             8754 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             8755 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             8756 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             8757 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             8758 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             8759 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             8760 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             8761 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             8762 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             8763 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             8764 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             8765 ; 54   |
                             8766 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             8767 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             8768 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             8769 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             8770 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             8771 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             8772 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             8773 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             8774 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
                             8775 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             8776 ; 65   |
                             8777 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             8778 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             8779 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             8780 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             8781 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             8782 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             8783 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             8784 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             8785 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             8786 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             8787 ; 76   |
                             8788 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             8789 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             8790 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             8791 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             8792 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             8793 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             8794 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             8795 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             8796 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             8797 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             8798 ; 87   |
                             8799 ; 88   |typedef union               
                             8800 ; 89   |{
                             8801 ; 90   |    struct {
                             8802 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             8803 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             8804 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             8805 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             8806 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             8807 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             8808 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             8809 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8810 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             8811 ; 100  |    } B;
                             8812 ; 101  |
                             8813 ; 102  |    int I;
                             8814 ; 103  |    unsigned int U;
                             8815 ; 104  |} spcsr_type;
                             8816 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / S
                                  tatus Register */
                             8817 ; 106  |
                             8818 ; 107  |// /////////////////////////////////////////////
                             8819 ; 108  |// //  SPI Data Register Bit Definitions
                             8820 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             8821 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             8822 ; 111  |
                             8823 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             8824 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             8825 ; 114  |
                             8826 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             8827 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             8828 ; 117  |
                             8829 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             8830 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             8831 ; 120  |
                             8832 ; 121  |typedef union               
                             8833 ; 122  |{
                             8834 ; 123  |    struct {
                             8835 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
                             8836 ; 125  |    } B;
                             8837 ; 126  |
                             8838 ; 127  |    int I;
                             8839 ; 128  |    unsigned int U;
                             8840 ; 129  |} spdr_type;
                             8841 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Regist
                                  er */
                             8842 ; 131  |
                             8843 ; 132  |
                             8844 ; 133  |#endif
                             8845 ; 134  |
                             8846 ; 135  |
                             8847 
                             8849 
                             8850 ; 32   |#include "regsswizzle.h"
                             8851 
                             8853 
                             8854 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8855 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8856 ; 3    |//;; Filename    : regsswizzle.inc
                             8857 ; 4    |//;; Description : Register definitions for Swizzle interface
                             8858 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8859 ; 6    |
                             8860 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8861 ; 8    |// The following naming conventions are followed in this file.
                             8862 ; 9    |// All registers are named using the format...
                             8863 ; 10   |//     HW_<module>_<regname>
                             8864 ; 11   |// where <module> is the module name which can be any of the following...
                             8865 ; 12   |//     USB20
                             8866 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8867 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8868 ; 15   |// that module)
                             8869 ; 16   |// <regname> is the specific register within that module
                             8870 ; 17   |// We also define the following...
                             8871 ; 18   |//     HW_<module>_<regname>_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8872 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8873 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8874 ; 21   |// which does something else, and
                             8875 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8876 ; 23   |// which does something else.
                             8877 ; 24   |// Other rules
                             8878 ; 25   |//     All caps
                             8879 ; 26   |//     Numeric identifiers start at 0
                             8880 ; 27   |#if !(defined(regsswizzleinc))
                             8881 ; 28   |#define regsswizzleinc 1
                             8882 ; 29   |
                             8883 ; 30   |#include "types.h"
                             8884 
                             8886 
                             8887 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8888 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8889 ; 3    |//
                             8890 ; 4    |// Filename: types.h
                             8891 ; 5    |// Description: Standard data types
                             8892 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8893 ; 7    |
                             8894 ; 8    |#ifndef _TYPES_H
                             8895 ; 9    |#define _TYPES_H
                             8896 ; 10   |
                             8897 ; 11   |// TODO:  move this outta here!
                             8898 ; 12   |#if !defined(NOERROR)
                             8899 ; 13   |#define NOERROR 0
                             8900 ; 14   |#define SUCCESS 0
                             8901 ; 15   |#endif 
                             8902 ; 16   |#if !defined(SUCCESS)
                             8903 ; 17   |#define SUCCESS  0
                             8904 ; 18   |#endif
                             8905 ; 19   |#if !defined(ERROR)
                             8906 ; 20   |#define ERROR   -1
                             8907 ; 21   |#endif
                             8908 ; 22   |#if !defined(FALSE)
                             8909 ; 23   |#define FALSE 0
                             8910 ; 24   |#endif
                             8911 ; 25   |#if !defined(TRUE)
                             8912 ; 26   |#define TRUE  1
                             8913 ; 27   |#endif
                             8914 ; 28   |
                             8915 ; 29   |#if !defined(NULL)
                             8916 ; 30   |#define NULL 0
                             8917 ; 31   |#endif
                             8918 ; 32   |
                             8919 ; 33   |#define MAX_INT     0x7FFFFF
                             8920 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8921 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8922 ; 36   |#define MAX_ULONG   (-1) 
                             8923 ; 37   |
                             8924 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8925 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8926 ; 40   |
                             8927 ; 41   |
                             8928 ; 42   |#define BYTE    unsigned char       // btVarName
                             8929 ; 43   |#define CHAR    signed char         // cVarName
                             8930 ; 44   |#define USHORT  unsigned short      // usVarName
                             8931 ; 45   |#define SHORT   unsigned short      // sVarName
                             8932 ; 46   |#define WORD    unsigned int        // wVarName
                             8933 ; 47   |#define INT     signed int          // iVarName
                             8934 ; 48   |#define DWORD   unsigned long       // dwVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8935 ; 49   |#define LONG    signed long         // lVarName
                             8936 ; 50   |#define BOOL    unsigned int        // bVarName
                             8937 ; 51   |#define FRACT   _fract              // frVarName
                             8938 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8939 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8940 ; 54   |#define FLOAT   float               // fVarName
                             8941 ; 55   |#define DBL     double              // dVarName
                             8942 ; 56   |#define ENUM    enum                // eVarName
                             8943 ; 57   |#define CMX     _complex            // cmxVarName
                             8944 ; 58   |typedef WORD UCS3;                   // 
                             8945 ; 59   |
                             8946 ; 60   |#define UINT16  unsigned short
                             8947 ; 61   |#define UINT8   unsigned char   
                             8948 ; 62   |#define UINT32  unsigned long
                             8949 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8950 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8951 ; 65   |#define WCHAR   UINT16
                             8952 ; 66   |
                             8953 ; 67   |//UINT128 is 16 bytes or 6 words
                             8954 ; 68   |typedef struct UINT128_3500 {   
                             8955 ; 69   |    int val[6];     
                             8956 ; 70   |} UINT128_3500;
                             8957 ; 71   |
                             8958 ; 72   |#define UINT128   UINT128_3500
                             8959 ; 73   |
                             8960 ; 74   |// Little endian word packed byte strings:   
                             8961 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8962 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8963 ; 77   |// Little endian word packed byte strings:   
                             8964 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8965 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8966 ; 80   |
                             8967 ; 81   |// Declare Memory Spaces To Use When Coding
                             8968 ; 82   |// A. Sector Buffers
                             8969 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8970 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             8971 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8972 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8973 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8974 ; 88   |// B. Media DDI Memory
                             8975 ; 89   |#define MEDIA_DDI_MEM _Y
                             8976 ; 90   |
                             8977 ; 91   |
                             8978 ; 92   |
                             8979 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8980 ; 94   |// Examples of circular pointers:
                             8981 ; 95   |//    INT CIRC cpiVarName
                             8982 ; 96   |//    DWORD CIRC cpdwVarName
                             8983 ; 97   |
                             8984 ; 98   |#define RETCODE INT                 // rcVarName
                             8985 ; 99   |
                             8986 ; 100  |// generic bitfield structure
                             8987 ; 101  |struct Bitfield {
                             8988 ; 102  |    unsigned int B0  :1;
                             8989 ; 103  |    unsigned int B1  :1;
                             8990 ; 104  |    unsigned int B2  :1;
                             8991 ; 105  |    unsigned int B3  :1;
                             8992 ; 106  |    unsigned int B4  :1;
                             8993 ; 107  |    unsigned int B5  :1;
                             8994 ; 108  |    unsigned int B6  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8995 ; 109  |    unsigned int B7  :1;
                             8996 ; 110  |    unsigned int B8  :1;
                             8997 ; 111  |    unsigned int B9  :1;
                             8998 ; 112  |    unsigned int B10 :1;
                             8999 ; 113  |    unsigned int B11 :1;
                             9000 ; 114  |    unsigned int B12 :1;
                             9001 ; 115  |    unsigned int B13 :1;
                             9002 ; 116  |    unsigned int B14 :1;
                             9003 ; 117  |    unsigned int B15 :1;
                             9004 ; 118  |    unsigned int B16 :1;
                             9005 ; 119  |    unsigned int B17 :1;
                             9006 ; 120  |    unsigned int B18 :1;
                             9007 ; 121  |    unsigned int B19 :1;
                             9008 ; 122  |    unsigned int B20 :1;
                             9009 ; 123  |    unsigned int B21 :1;
                             9010 ; 124  |    unsigned int B22 :1;
                             9011 ; 125  |    unsigned int B23 :1;
                             9012 ; 126  |};
                             9013 ; 127  |
                             9014 ; 128  |union BitInt {
                             9015 ; 129  |        struct Bitfield B;
                             9016 ; 130  |        int        I;
                             9017 ; 131  |};
                             9018 ; 132  |
                             9019 ; 133  |#define MAX_MSG_LENGTH 10
                             9020 ; 134  |struct CMessage
                             9021 ; 135  |{
                             9022 ; 136  |        unsigned int m_uLength;
                             9023 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9024 ; 138  |};
                             9025 ; 139  |
                             9026 ; 140  |typedef struct {
                             9027 ; 141  |    WORD m_wLength;
                             9028 ; 142  |    WORD m_wMessage;
                             9029 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9030 ; 144  |} Message;
                             9031 ; 145  |
                             9032 ; 146  |struct MessageQueueDescriptor
                             9033 ; 147  |{
                             9034 ; 148  |        int *m_pBase;
                             9035 ; 149  |        int m_iModulo;
                             9036 ; 150  |        int m_iSize;
                             9037 ; 151  |        int *m_pHead;
                             9038 ; 152  |        int *m_pTail;
                             9039 ; 153  |};
                             9040 ; 154  |
                             9041 ; 155  |struct ModuleEntry
                             9042 ; 156  |{
                             9043 ; 157  |    int m_iSignaledEventMask;
                             9044 ; 158  |    int m_iWaitEventMask;
                             9045 ; 159  |    int m_iResourceOfCode;
                             9046 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9047 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9048 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9049 ; 163  |    int m_uTimeOutHigh;
                             9050 ; 164  |    int m_uTimeOutLow;
                             9051 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9052 ; 166  |};
                             9053 ; 167  |
                             9054 ; 168  |union WaitMask{
                             9055 ; 169  |    struct B{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9056 ; 170  |        unsigned int m_bNone     :1;
                             9057 ; 171  |        unsigned int m_bMessage  :1;
                             9058 ; 172  |        unsigned int m_bTimer    :1;
                             9059 ; 173  |        unsigned int m_bButton   :1;
                             9060 ; 174  |    } B;
                             9061 ; 175  |    int I;
                             9062 ; 176  |} ;
                             9063 ; 177  |
                             9064 ; 178  |
                             9065 ; 179  |struct Button {
                             9066 ; 180  |        WORD wButtonEvent;
                             9067 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9068 ; 182  |};
                             9069 ; 183  |
                             9070 ; 184  |struct Message {
                             9071 ; 185  |        WORD wMsgLength;
                             9072 ; 186  |        WORD wMsgCommand;
                             9073 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9074 ; 188  |};
                             9075 ; 189  |
                             9076 ; 190  |union EventTypes {
                             9077 ; 191  |        struct CMessage msg;
                             9078 ; 192  |        struct Button Button ;
                             9079 ; 193  |        struct Message Message;
                             9080 ; 194  |};
                             9081 ; 195  |
                             9082 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9083 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9084 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9085 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9086 ; 200  |
                             9087 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9088 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9089 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9090 ; 204  |
                             9091 ; 205  |#if DEBUG
                             9092 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9093 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9094 ; 208  |#else 
                             9095 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9096 ; 210  |#define DebugBuildAssert(x)    
                             9097 ; 211  |#endif
                             9098 ; 212  |
                             9099 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9100 ; 214  |//  #pragma asm
                             9101 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9102 ; 216  |//  #pragma endasm
                             9103 ; 217  |
                             9104 ; 218  |
                             9105 ; 219  |#ifdef COLOR_262K
                             9106 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9107 ; 221  |#elif defined(COLOR_65K)
                             9108 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9109 ; 223  |#else
                             9110 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9111 ; 225  |#endif
                             9112 ; 226  |    
                             9113 ; 227  |#endif // #ifndef _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9114 
                             9116 
                             9117 ; 31   |
                             9118 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9119 ; 33   |
                             9120 ; 34   |//   SWIZZLE STMP3500 Registers 
                             9121 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             9122 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9123 ; 37   |
                             9124 ; 38   |
                             9125 ; 39   |
                             9126 ; 40   |
                             9127 ; 41   |
                             9128 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                             9129 ; 43   |
                             9130 ; 44   |
                             9131 ; 45   |
                             9132 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                             9133 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             9134 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                             9135 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             9136 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             9137 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             9138 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             9139 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             9140 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             9141 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
                             9142 ; 56   |
                             9143 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             9144 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             9145 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             9146 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             9147 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             9148 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             9149 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             9150 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             9151 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             9152 ; 66   |
                             9153 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITP
                                  OS)
                             9154 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITP
                                  OS)
                             9155 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_B
                                  ITPOS)
                             9156 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIG
                                  N_BITPOS)
                             9157 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_S
                                  HIFT_BITPOS)
                             9158 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_B
                                  ITPOS)
                             9159 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECS
                                  R1_CLK_OFF_BITPOS)
                             9160 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1
                                  _NEWADD_BITPOS)
                             9161 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSV
                                  D_BITPOS)
                             9162 ; 76   |
                             9163 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             9164 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             9165 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             9166 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             9167 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9168 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             9169 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             9170 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             9171 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             9172 ; 86   |
                             9173 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             9174 ; 88   |//  Bit Manipulation Unit Registers
                             9175 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             9176 ; 90   |typedef union
                             9177 ; 91   |{
                             9178 ; 92   |    struct
                             9179 ; 93   |    {
                             9180 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             9181 ; 95   |    int LA      :1;     /* Left Align Data                          */
                             9182 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             9183 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             9184 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             9185 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                             9186 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             9187 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             9188 ; 102  |    } B;
                             9189 ; 103  |    int I;
                             9190 ; 104  |    unsigned U;
                             9191 ; 105  |} swizzlecsr1_type;
                             9192 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             9193 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* S
                                  wizzle Control & Status Register 1 */
                             9194 ; 108  |
                             9195 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             9196 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             9197 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             9198 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             9199 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             9200 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             9201 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             9202 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             9203 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             9204 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             9205 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             9206 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             9207 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             9208 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                             9209 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             9210 ; 124  |
                             9211 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             9212 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             9213 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             9214 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             9215 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             9216 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             9217 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             9218 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             9219 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             9220 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             9221 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             9222 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             9223 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             9224 ; 138  |
                             9225 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KIC
                                  K_BITPOS)
                             9226 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_S
                                  ASEL_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9227 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECS
                                  R2_DESASEL_BITPOS)
                             9228 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIG
                                  E_BITPOS)
                             9229 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _BITREV_BITPOS)
                             9230 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLS
                                  B_BITPOS)
                             9231 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMS
                                  B_BITPOS)
                             9232 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  L_BITPOS)
                             9233 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  I_BITPOS)
                             9234 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_B
                                  S_EN_BITPOS)
                             9235 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZ
                                  LECSR2_SBYTEDEST_BITPOS)
                             9236 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _UNKICK_BITPOS)
                             9237 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSV
                                  D_BITPOS)
                             9238 ; 152  |
                             9239 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             9240 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             9241 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             9242 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
                             9243 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             9244 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             9245 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             9246 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                             9247 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                             9248 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                             9249 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                             9250 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                             9251 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                             9252 ; 166  |
                             9253 ; 167  |///////////////////////////////////////////////////////////////////////////////
                             9254 ; 168  |typedef union
                             9255 ; 169  |{
                             9256 ; 170  |    struct
                             9257 ; 171  |    {
                             9258 ; 172  |    int KICK    :1;         /* Start transfer                      */
                             9259 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                             9260 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                             9261 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                             9262 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                             9263 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                             9264 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                             9265 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                             9266 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                             9267 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                             9268 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                             9269 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                             9270 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                             9271 ; 185  |    } B;
                             9272 ; 186  |    unsigned int I;
                             9273 ; 187  |    unsigned int U;
                             9274 ; 188  |} swizzlecsr2_type;
                             9275 ; 189  |///////////////////////////////////////////////////////////////////////////////
                             9276 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* S
                                  wizzle Control & Status Register 2 */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9277 ; 191  |
                             9278 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                             9279 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                             9280 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                             9281 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                             9282 ; 196  |
                             9283 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                             9284 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                             9285 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                             9286 ; 200  |
                             9287 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  SIZE_BITPOS)
                             9288 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWI
                                  ZZLESIZER_NEW_SHIFT_BITPOS)
                             9289 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  RSVD_BITPOS)
                             9290 ; 204  |
                             9291 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                             9292 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                             9293 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                             9294 ; 208  |
                             9295 ; 209  |///////////////////////////////////////////////////////////////////////////////
                             9296 ; 210  |typedef union
                             9297 ; 211  |{
                             9298 ; 212  |    struct
                             9299 ; 213  |    {
                             9300 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
                             9301 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                             9302 ; 216  |    } B;
                             9303 ; 217  |    int I;
                             9304 ; 218  |    unsigned U;
                             9305 ; 219  |} swizzlesizer_type;
                             9306 ; 220  |///////////////////////////////////////////////////////////////////////////////
                             9307 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))       
                                   /* Swizzle Transfer Size Register */
                             9308 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* S
                                  wizzle Source Address Register */
                             9309 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* S
                                  wizzle Data1 Register */
                             9310 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* S
                                  wizzle Data2 Register */
                             9311 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* S
                                  wizzle Destination Address Register */
                             9312 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* S
                                  wizzle Big Endian Register */
                             9313 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* S
                                  wizzle BITREV Register */
                             9314 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* S
                                  wizzle Pass Least Significant Byte Register */
                             9315 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* S
                                  wizzle Pass Intermediate Byte Register */
                             9316 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* S
                                  wizzle Pass Most Significant Byte Register */
                             9317 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* S
                                  wizzle Pass Least Significant Word Register */
                             9318 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* S
                                  wizzle Pass Intermediate Significant Word Register */
                             9319 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* S
                                  wizzle Pass Most Significant Word Register */
                             9320 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Sw
                                  izzle Barrel Shift Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9321 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swi
                                  zzle Divide By 3 Lower Register */
                             9322 ; 236  |
                             9323 ; 237  |
                             9324 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                             9325 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                             9326 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                             9327 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                             9328 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                             9329 ; 243  |
                             9330 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                             9331 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                             9332 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                             9333 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                             9334 ; 248  |
                             9335 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW
                                  _SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                             9336 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD0_BITPOS)
                             9337 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_S
                                  WIZZLEDIV3UR_REMAINDER_BITPOS)
                             9338 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD1_BITPOS)
                             9339 ; 253  |
                             9340 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                             9341 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                             9342 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                             9343 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
                             9344 ; 258  |
                             9345 ; 259  |///////////////////////////////////////////////////////////////////////////////
                             9346 ; 260  |typedef union
                             9347 ; 261  |{
                             9348 ; 262  |    struct
                             9349 ; 263  |    {
                             9350 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                             9351 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                             9352 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                             9353 ; 267  |    } B;
                             9354 ; 268  |    int I;
                             9355 ; 269  |    unsigned U;
                             9356 ; 270  |} swizzlediv3ur_type;
                             9357 ; 271  |///////////////////////////////////////////////////////////////////////////////
                             9358 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    
                                  /* Swizzle Divide By 3 Upper Register */
                             9359 ; 273  |
                             9360 ; 274  |#endif
                             9361 ; 275  |
                             9362 
                             9364 
                             9365 ; 33   |#include "regssdram.h"
                             9366 
                             9368 
                             9369 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9370 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             9371 ; 3    |//;  File        : regssdram.inc
                             9372 ; 4    |//;  Description : Mixed Signal IP Register definition
                             9373 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9374 ; 6    |
                             9375 ; 7    |// The following naming conventions are followed in this file.
                             9376 ; 8    |// All registers are named using the format...
                             9377 ; 9    |//     HW_<module>_<regname>
                             9378 ; 10   |// where <module> is the module name which can be any of the following...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9379 ; 11   |//     SYSTEM
                             9380 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             9381 ; 13   |// module name includes a number starting from 0 for the first instance of
                             9382 ; 14   |// that module)
                             9383 ; 15   |// <regname> is the specific register within that module
                             9384 ; 16   |// We also define the following...
                             9385 ; 17   |//     HW_<module>_<regname>_BITPOS
                             9386 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9387 ; 19   |//     HW_<module>_<regname>_SETMASK
                             9388 ; 20   |// which does something else, and
                             9389 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             9390 ; 22   |// which does something else.
                             9391 ; 23   |// Other rules
                             9392 ; 24   |//     All caps
                             9393 ; 25   |//     Numeric identifiers start at 0
                             9394 ; 26   |
                             9395 ; 27   |#if !(defined(regssdraminc))
                             9396 ; 28   |#define regssdraminc 1
                             9397 ; 29   |
                             9398 ; 30   |#include "types.h"
                             9399 
                             9401 
                             9402 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9403 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9404 ; 3    |//
                             9405 ; 4    |// Filename: types.h
                             9406 ; 5    |// Description: Standard data types
                             9407 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9408 ; 7    |
                             9409 ; 8    |#ifndef _TYPES_H
                             9410 ; 9    |#define _TYPES_H
                             9411 ; 10   |
                             9412 ; 11   |// TODO:  move this outta here!
                             9413 ; 12   |#if !defined(NOERROR)
                             9414 ; 13   |#define NOERROR 0
                             9415 ; 14   |#define SUCCESS 0
                             9416 ; 15   |#endif 
                             9417 ; 16   |#if !defined(SUCCESS)
                             9418 ; 17   |#define SUCCESS  0
                             9419 ; 18   |#endif
                             9420 ; 19   |#if !defined(ERROR)
                             9421 ; 20   |#define ERROR   -1
                             9422 ; 21   |#endif
                             9423 ; 22   |#if !defined(FALSE)
                             9424 ; 23   |#define FALSE 0
                             9425 ; 24   |#endif
                             9426 ; 25   |#if !defined(TRUE)
                             9427 ; 26   |#define TRUE  1
                             9428 ; 27   |#endif
                             9429 ; 28   |
                             9430 ; 29   |#if !defined(NULL)
                             9431 ; 30   |#define NULL 0
                             9432 ; 31   |#endif
                             9433 ; 32   |
                             9434 ; 33   |#define MAX_INT     0x7FFFFF
                             9435 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9436 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9437 ; 36   |#define MAX_ULONG   (-1) 
                             9438 ; 37   |
                             9439 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9440 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9441 ; 40   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9442 ; 41   |
                             9443 ; 42   |#define BYTE    unsigned char       // btVarName
                             9444 ; 43   |#define CHAR    signed char         // cVarName
                             9445 ; 44   |#define USHORT  unsigned short      // usVarName
                             9446 ; 45   |#define SHORT   unsigned short      // sVarName
                             9447 ; 46   |#define WORD    unsigned int        // wVarName
                             9448 ; 47   |#define INT     signed int          // iVarName
                             9449 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9450 ; 49   |#define LONG    signed long         // lVarName
                             9451 ; 50   |#define BOOL    unsigned int        // bVarName
                             9452 ; 51   |#define FRACT   _fract              // frVarName
                             9453 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9454 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9455 ; 54   |#define FLOAT   float               // fVarName
                             9456 ; 55   |#define DBL     double              // dVarName
                             9457 ; 56   |#define ENUM    enum                // eVarName
                             9458 ; 57   |#define CMX     _complex            // cmxVarName
                             9459 ; 58   |typedef WORD UCS3;                   // 
                             9460 ; 59   |
                             9461 ; 60   |#define UINT16  unsigned short
                             9462 ; 61   |#define UINT8   unsigned char   
                             9463 ; 62   |#define UINT32  unsigned long
                             9464 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9465 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9466 ; 65   |#define WCHAR   UINT16
                             9467 ; 66   |
                             9468 ; 67   |//UINT128 is 16 bytes or 6 words
                             9469 ; 68   |typedef struct UINT128_3500 {   
                             9470 ; 69   |    int val[6];     
                             9471 ; 70   |} UINT128_3500;
                             9472 ; 71   |
                             9473 ; 72   |#define UINT128   UINT128_3500
                             9474 ; 73   |
                             9475 ; 74   |// Little endian word packed byte strings:   
                             9476 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9477 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9478 ; 77   |// Little endian word packed byte strings:   
                             9479 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9480 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9481 ; 80   |
                             9482 ; 81   |// Declare Memory Spaces To Use When Coding
                             9483 ; 82   |// A. Sector Buffers
                             9484 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9485 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9486 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9487 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9488 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9489 ; 88   |// B. Media DDI Memory
                             9490 ; 89   |#define MEDIA_DDI_MEM _Y
                             9491 ; 90   |
                             9492 ; 91   |
                             9493 ; 92   |
                             9494 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9495 ; 94   |// Examples of circular pointers:
                             9496 ; 95   |//    INT CIRC cpiVarName
                             9497 ; 96   |//    DWORD CIRC cpdwVarName
                             9498 ; 97   |
                             9499 ; 98   |#define RETCODE INT                 // rcVarName
                             9500 ; 99   |
                             9501 ; 100  |// generic bitfield structure
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9502 ; 101  |struct Bitfield {
                             9503 ; 102  |    unsigned int B0  :1;
                             9504 ; 103  |    unsigned int B1  :1;
                             9505 ; 104  |    unsigned int B2  :1;
                             9506 ; 105  |    unsigned int B3  :1;
                             9507 ; 106  |    unsigned int B4  :1;
                             9508 ; 107  |    unsigned int B5  :1;
                             9509 ; 108  |    unsigned int B6  :1;
                             9510 ; 109  |    unsigned int B7  :1;
                             9511 ; 110  |    unsigned int B8  :1;
                             9512 ; 111  |    unsigned int B9  :1;
                             9513 ; 112  |    unsigned int B10 :1;
                             9514 ; 113  |    unsigned int B11 :1;
                             9515 ; 114  |    unsigned int B12 :1;
                             9516 ; 115  |    unsigned int B13 :1;
                             9517 ; 116  |    unsigned int B14 :1;
                             9518 ; 117  |    unsigned int B15 :1;
                             9519 ; 118  |    unsigned int B16 :1;
                             9520 ; 119  |    unsigned int B17 :1;
                             9521 ; 120  |    unsigned int B18 :1;
                             9522 ; 121  |    unsigned int B19 :1;
                             9523 ; 122  |    unsigned int B20 :1;
                             9524 ; 123  |    unsigned int B21 :1;
                             9525 ; 124  |    unsigned int B22 :1;
                             9526 ; 125  |    unsigned int B23 :1;
                             9527 ; 126  |};
                             9528 ; 127  |
                             9529 ; 128  |union BitInt {
                             9530 ; 129  |        struct Bitfield B;
                             9531 ; 130  |        int        I;
                             9532 ; 131  |};
                             9533 ; 132  |
                             9534 ; 133  |#define MAX_MSG_LENGTH 10
                             9535 ; 134  |struct CMessage
                             9536 ; 135  |{
                             9537 ; 136  |        unsigned int m_uLength;
                             9538 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9539 ; 138  |};
                             9540 ; 139  |
                             9541 ; 140  |typedef struct {
                             9542 ; 141  |    WORD m_wLength;
                             9543 ; 142  |    WORD m_wMessage;
                             9544 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9545 ; 144  |} Message;
                             9546 ; 145  |
                             9547 ; 146  |struct MessageQueueDescriptor
                             9548 ; 147  |{
                             9549 ; 148  |        int *m_pBase;
                             9550 ; 149  |        int m_iModulo;
                             9551 ; 150  |        int m_iSize;
                             9552 ; 151  |        int *m_pHead;
                             9553 ; 152  |        int *m_pTail;
                             9554 ; 153  |};
                             9555 ; 154  |
                             9556 ; 155  |struct ModuleEntry
                             9557 ; 156  |{
                             9558 ; 157  |    int m_iSignaledEventMask;
                             9559 ; 158  |    int m_iWaitEventMask;
                             9560 ; 159  |    int m_iResourceOfCode;
                             9561 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9562 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9563 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9564 ; 163  |    int m_uTimeOutHigh;
                             9565 ; 164  |    int m_uTimeOutLow;
                             9566 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9567 ; 166  |};
                             9568 ; 167  |
                             9569 ; 168  |union WaitMask{
                             9570 ; 169  |    struct B{
                             9571 ; 170  |        unsigned int m_bNone     :1;
                             9572 ; 171  |        unsigned int m_bMessage  :1;
                             9573 ; 172  |        unsigned int m_bTimer    :1;
                             9574 ; 173  |        unsigned int m_bButton   :1;
                             9575 ; 174  |    } B;
                             9576 ; 175  |    int I;
                             9577 ; 176  |} ;
                             9578 ; 177  |
                             9579 ; 178  |
                             9580 ; 179  |struct Button {
                             9581 ; 180  |        WORD wButtonEvent;
                             9582 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9583 ; 182  |};
                             9584 ; 183  |
                             9585 ; 184  |struct Message {
                             9586 ; 185  |        WORD wMsgLength;
                             9587 ; 186  |        WORD wMsgCommand;
                             9588 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9589 ; 188  |};
                             9590 ; 189  |
                             9591 ; 190  |union EventTypes {
                             9592 ; 191  |        struct CMessage msg;
                             9593 ; 192  |        struct Button Button ;
                             9594 ; 193  |        struct Message Message;
                             9595 ; 194  |};
                             9596 ; 195  |
                             9597 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9598 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9599 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9600 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9601 ; 200  |
                             9602 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9603 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9604 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9605 ; 204  |
                             9606 ; 205  |#if DEBUG
                             9607 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9608 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9609 ; 208  |#else 
                             9610 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9611 ; 210  |#define DebugBuildAssert(x)    
                             9612 ; 211  |#endif
                             9613 ; 212  |
                             9614 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9615 ; 214  |//  #pragma asm
                             9616 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9617 ; 216  |//  #pragma endasm
                             9618 ; 217  |
                             9619 ; 218  |
                             9620 ; 219  |#ifdef COLOR_262K
                             9621 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9622 ; 221  |#elif defined(COLOR_65K)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9623 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9624 ; 223  |#else
                             9625 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9626 ; 225  |#endif
                             9627 ; 226  |    
                             9628 ; 227  |#endif // #ifndef _TYPES_H
                             9629 
                             9631 
                             9632 ; 31   |
                             9633 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                             9634 ; 33   |
                             9635 ; 34   |
                             9636 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                             9637 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                             9638 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                             9639 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                             9640 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                             9641 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                             9642 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                             9643 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                             9644 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                             9645 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                             9646 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                             9647 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                             9648 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                             9649 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
                             9650 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                             9651 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                             9652 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                             9653 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                             9654 ; 53   |
                             9655 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                             9656 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                             9657 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                             9658 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                             9659 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                             9660 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                             9661 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                             9662 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                             9663 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                             9664 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                             9665 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                             9666 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                             9667 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                             9668 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                             9669 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                             9670 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                             9671 ; 70   |
                             9672 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SD
                                  RAMEN_BITPOS)
                             9673 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                             9674 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS
                                  )
                             9675 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BIT
                                  POS)
                             9676 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                             9677 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_
                                  BITPOS)
                             9678 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BIT
                                  POS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9679 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_
                                  BITPOS)
                             9680 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS
                                  )
                             9681 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BIT
                                  POS)
                             9682 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_
                                  BITPOS)
                             9683 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_
                                  BITPOS)
                             9684 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS
                                  )
                             9685 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_
                                  BITPOS)
                             9686 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_
                                  BITPOS)
                             9687 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BIT
                                  POS)
                             9688 ; 87   |
                             9689 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                             9690 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                             9691 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                             9692 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                             9693 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                             9694 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                             9695 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                             9696 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                             9697 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
                             9698 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                             9699 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                             9700 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                             9701 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                             9702 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                             9703 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                             9704 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                             9705 ; 104  |
                             9706 ; 105  |typedef union               
                             9707 ; 106  |{
                             9708 ; 107  |    struct {
                             9709 ; 108  |        int SDRAMEN                     :1;
                             9710 ; 109  |        int IE                          :1;
                             9711 ; 110  |        int RNW                         :1;
                             9712 ; 111  |        int KICK                        :1;
                             9713 ; 112  |        int LM                          :1;
                             9714 ; 113  |        int ISTAT                       :1;
                             9715 ; 114  |        int PWDN                        :1;
                             9716 ; 115  |        int RSVD                        :1;
                             9717 ; 116  |        int SBYTE                       :2;
                             9718 ; 117  |        int MEM                         :2;
                             9719 ; 118  |        int BIGE                        :1;
                             9720 ; 119  |        int ASIZE                       :3;
                             9721 ; 120  |        int UKICK                       :1;
                             9722 ; 121  |        int DIV                         :4;
                             9723 ; 122  |        int MULTI                       :1;
                             9724 ; 123  |        int SDRAM                       :1;
                             9725 ; 124  |        int SIGN                        :1;
                             9726 ; 125  |    } B;
                             9727 ; 126  |    int I;
                             9728 ; 127  |} sdramcsr_type;
                             9729 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                             9730 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                             9731 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9732 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                             9733 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                             9734 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                             9735 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                             9736 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                             9737 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                             9738 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                             9739 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                             9740 ; 139  |
                             9741 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                             9742 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                             9743 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                             9744 ; 143  |
                             9745 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                             9746 ; 145  |
                             9747 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                             9748 ; 147  |
                             9749 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                             9750 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                             9751 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                             9752 ; 151  |
                             9753 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                             9754 ; 153  |
                             9755 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                             9756 ; 155  |
                             9757 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                             9758 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                             9759 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
                             9760 ; 159  |
                             9761 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                             9762 ; 161  |
                             9763 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                             9764 ; 163  |
                             9765 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                             9766 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                             9767 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                             9768 ; 167  |
                             9769 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                             9770 ; 169  |
                             9771 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                             9772 ; 171  |
                             9773 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                             9774 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                             9775 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                             9776 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                             9777 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                             9778 ; 177  |
                             9779 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                             9780 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                             9781 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                             9782 ; 181  |
                             9783 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _INIT_BITPOS)
                             9784 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_T
                                  RP_BITPOS)
                             9785 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _TRFC_BITPOS)
                             9786 ; 185  |
                             9787 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                             9788 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                             9789 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                             9790 ; 189  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9791 ; 190  |typedef union               
                             9792 ; 191  |{
                             9793 ; 192  |    struct {
                             9794 ; 193  |        int INIT                :16;
                             9795 ; 194  |        int TRP                 :4;
                             9796 ; 195  |        int TRFC                :4;
                             9797 ; 196  |    } B;
                             9798 ; 197  |    int I;
                             9799 ; 198  |} sdramtimer1_type;
                             9800 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                             9801 ; 200  |
                             9802 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                             9803 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                             9804 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                             9805 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                             9806 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                             9807 ; 206  |
                             9808 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                             9809 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                             9810 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                             9811 ; 210  |
                             9812 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TXSR_BITPOS)
                             9813 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TREF_BITPOS)
                             9814 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TRCD_BITPOS)
                             9815 ; 214  |
                             9816 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                             9817 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                             9818 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                             9819 ; 218  |
                             9820 ; 219  |typedef union               
                             9821 ; 220  |{
                             9822 ; 221  |    struct {
                             9823 ; 222  |        int TXSR                :4;
                             9824 ; 223  |        int TREF                :12;
                             9825 ; 224  |        int TRCD                :4;
                             9826 ; 225  |        int RSVD                :4; 
                             9827 ; 226  |    } B;
                             9828 ; 227  |    int I;
                             9829 ; 228  |} sdramtimer2_type;
                             9830 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                             9831 ; 230  |
                             9832 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             9833 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                             9834 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                             9835 ; 234  |
                             9836 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                             9837 ; 236  |
                             9838 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                             9839 ; 238  |
                             9840 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                             9841 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                             9842 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                             9843 ; 242  |
                             9844 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                             9845 ; 244  |
                             9846 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                             9847 ; 246  |
                             9848 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             9849 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9850 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                             9851 ; 250  |
                             9852 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                             9853 ; 252  |
                             9854 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS
                                  )
                             9855 ; 254  |
                             9856 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                             9857 ; 256  |
                             9858 ; 257  |typedef union               
                             9859 ; 258  |{
                             9860 ; 259  |    struct {
                             9861 ; 260  |        int VALUE               :14;
                             9862 ; 261  |        int RSVD                :10; 
                             9863 ; 262  |    } B;
                             9864 ; 263  |    int I;
                             9865 ; 264  |} sdrammode_type;
                             9866 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                             9867 ; 266  |
                             9868 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                             9869 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                             9870 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                             9871 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                             9872 ; 271  |
                             9873 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                             9874 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                             9875 ; 274  |
                             9876 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_COLWIDTH_BITPOS)
                             9877 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_ROWWIDTH_BITPOS)
                             9878 ; 277  |
                             9879 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                             9880 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                             9881 ; 280  |
                             9882 ; 281  |typedef union               
                             9883 ; 282  |{
                             9884 ; 283  |    struct {
                             9885 ; 284  |        int COLWIDTH               :4;
                             9886 ; 285  |        int ROWWIDTH               :4; 
                             9887 ; 286  |    } B;
                             9888 ; 287  |    int I;
                             9889 ; 288  |} sdramtype_type;
                             9890 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                             9891 ; 290  |
                             9892 ; 291  |#endif
                             9893 ; 292  |
                             9894 ; 293  |
                             9895 ; 294  |
                             9896 ; 295  |
                             9897 ; 296  |
                             9898 ; 297  |
                             9899 
                             9901 
                             9902 ; 34   |#include "regstb.h"
                             9903 
                             9905 
                             9906 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             9907 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             9908 ; 3    |// Filename: regstb.inc
                             9909 ; 4    |// Description: Register definitions for Trace Buffer
                             9910 ; 5    |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9911 ; 6    |// The following naming conventions are followed in this file.
                             9912 ; 7    |// All registers are named using the format...
                             9913 ; 8    |//     HW_<module>_<regname>
                             9914 ; 9    |// where <module> is the module name which can be any of the following...
                             9915 ; 10   |//     USB20
                             9916 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             9917 ; 12   |// module name includes a number starting from 0 for the first instance of
                             9918 ; 13   |// that module)
                             9919 ; 14   |// <regname> is the specific register within that module
                             9920 ; 15   |// We also define the following...
                             9921 ; 16   |//     HW_<module>_<regname>_BITPOS
                             9922 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9923 ; 18   |//     HW_<module>_<regname>_SETMASK
                             9924 ; 19   |// which does something else, and
                             9925 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             9926 ; 21   |// which does something else.
                             9927 ; 22   |// Other rules
                             9928 ; 23   |//     All caps
                             9929 ; 24   |//     Numeric identifiers start at 0
                             9930 ; 25   |#if !(defined(regstbinc))
                             9931 ; 26   |#define regstbinc 1
                             9932 ; 27   |
                             9933 ; 28   |#include "types.h"
                             9934 
                             9936 
                             9937 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9938 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9939 ; 3    |//
                             9940 ; 4    |// Filename: types.h
                             9941 ; 5    |// Description: Standard data types
                             9942 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9943 ; 7    |
                             9944 ; 8    |#ifndef _TYPES_H
                             9945 ; 9    |#define _TYPES_H
                             9946 ; 10   |
                             9947 ; 11   |// TODO:  move this outta here!
                             9948 ; 12   |#if !defined(NOERROR)
                             9949 ; 13   |#define NOERROR 0
                             9950 ; 14   |#define SUCCESS 0
                             9951 ; 15   |#endif 
                             9952 ; 16   |#if !defined(SUCCESS)
                             9953 ; 17   |#define SUCCESS  0
                             9954 ; 18   |#endif
                             9955 ; 19   |#if !defined(ERROR)
                             9956 ; 20   |#define ERROR   -1
                             9957 ; 21   |#endif
                             9958 ; 22   |#if !defined(FALSE)
                             9959 ; 23   |#define FALSE 0
                             9960 ; 24   |#endif
                             9961 ; 25   |#if !defined(TRUE)
                             9962 ; 26   |#define TRUE  1
                             9963 ; 27   |#endif
                             9964 ; 28   |
                             9965 ; 29   |#if !defined(NULL)
                             9966 ; 30   |#define NULL 0
                             9967 ; 31   |#endif
                             9968 ; 32   |
                             9969 ; 33   |#define MAX_INT     0x7FFFFF
                             9970 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9971 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9972 ; 36   |#define MAX_ULONG   (-1) 
                             9973 ; 37   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9974 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9975 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9976 ; 40   |
                             9977 ; 41   |
                             9978 ; 42   |#define BYTE    unsigned char       // btVarName
                             9979 ; 43   |#define CHAR    signed char         // cVarName
                             9980 ; 44   |#define USHORT  unsigned short      // usVarName
                             9981 ; 45   |#define SHORT   unsigned short      // sVarName
                             9982 ; 46   |#define WORD    unsigned int        // wVarName
                             9983 ; 47   |#define INT     signed int          // iVarName
                             9984 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9985 ; 49   |#define LONG    signed long         // lVarName
                             9986 ; 50   |#define BOOL    unsigned int        // bVarName
                             9987 ; 51   |#define FRACT   _fract              // frVarName
                             9988 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9989 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9990 ; 54   |#define FLOAT   float               // fVarName
                             9991 ; 55   |#define DBL     double              // dVarName
                             9992 ; 56   |#define ENUM    enum                // eVarName
                             9993 ; 57   |#define CMX     _complex            // cmxVarName
                             9994 ; 58   |typedef WORD UCS3;                   // 
                             9995 ; 59   |
                             9996 ; 60   |#define UINT16  unsigned short
                             9997 ; 61   |#define UINT8   unsigned char   
                             9998 ; 62   |#define UINT32  unsigned long
                             9999 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10000 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10001 ; 65   |#define WCHAR   UINT16
                            10002 ; 66   |
                            10003 ; 67   |//UINT128 is 16 bytes or 6 words
                            10004 ; 68   |typedef struct UINT128_3500 {   
                            10005 ; 69   |    int val[6];     
                            10006 ; 70   |} UINT128_3500;
                            10007 ; 71   |
                            10008 ; 72   |#define UINT128   UINT128_3500
                            10009 ; 73   |
                            10010 ; 74   |// Little endian word packed byte strings:   
                            10011 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10012 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10013 ; 77   |// Little endian word packed byte strings:   
                            10014 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10015 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10016 ; 80   |
                            10017 ; 81   |// Declare Memory Spaces To Use When Coding
                            10018 ; 82   |// A. Sector Buffers
                            10019 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10020 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10021 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10022 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10023 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10024 ; 88   |// B. Media DDI Memory
                            10025 ; 89   |#define MEDIA_DDI_MEM _Y
                            10026 ; 90   |
                            10027 ; 91   |
                            10028 ; 92   |
                            10029 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10030 ; 94   |// Examples of circular pointers:
                            10031 ; 95   |//    INT CIRC cpiVarName
                            10032 ; 96   |//    DWORD CIRC cpdwVarName
                            10033 ; 97   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10034 ; 98   |#define RETCODE INT                 // rcVarName
                            10035 ; 99   |
                            10036 ; 100  |// generic bitfield structure
                            10037 ; 101  |struct Bitfield {
                            10038 ; 102  |    unsigned int B0  :1;
                            10039 ; 103  |    unsigned int B1  :1;
                            10040 ; 104  |    unsigned int B2  :1;
                            10041 ; 105  |    unsigned int B3  :1;
                            10042 ; 106  |    unsigned int B4  :1;
                            10043 ; 107  |    unsigned int B5  :1;
                            10044 ; 108  |    unsigned int B6  :1;
                            10045 ; 109  |    unsigned int B7  :1;
                            10046 ; 110  |    unsigned int B8  :1;
                            10047 ; 111  |    unsigned int B9  :1;
                            10048 ; 112  |    unsigned int B10 :1;
                            10049 ; 113  |    unsigned int B11 :1;
                            10050 ; 114  |    unsigned int B12 :1;
                            10051 ; 115  |    unsigned int B13 :1;
                            10052 ; 116  |    unsigned int B14 :1;
                            10053 ; 117  |    unsigned int B15 :1;
                            10054 ; 118  |    unsigned int B16 :1;
                            10055 ; 119  |    unsigned int B17 :1;
                            10056 ; 120  |    unsigned int B18 :1;
                            10057 ; 121  |    unsigned int B19 :1;
                            10058 ; 122  |    unsigned int B20 :1;
                            10059 ; 123  |    unsigned int B21 :1;
                            10060 ; 124  |    unsigned int B22 :1;
                            10061 ; 125  |    unsigned int B23 :1;
                            10062 ; 126  |};
                            10063 ; 127  |
                            10064 ; 128  |union BitInt {
                            10065 ; 129  |        struct Bitfield B;
                            10066 ; 130  |        int        I;
                            10067 ; 131  |};
                            10068 ; 132  |
                            10069 ; 133  |#define MAX_MSG_LENGTH 10
                            10070 ; 134  |struct CMessage
                            10071 ; 135  |{
                            10072 ; 136  |        unsigned int m_uLength;
                            10073 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10074 ; 138  |};
                            10075 ; 139  |
                            10076 ; 140  |typedef struct {
                            10077 ; 141  |    WORD m_wLength;
                            10078 ; 142  |    WORD m_wMessage;
                            10079 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10080 ; 144  |} Message;
                            10081 ; 145  |
                            10082 ; 146  |struct MessageQueueDescriptor
                            10083 ; 147  |{
                            10084 ; 148  |        int *m_pBase;
                            10085 ; 149  |        int m_iModulo;
                            10086 ; 150  |        int m_iSize;
                            10087 ; 151  |        int *m_pHead;
                            10088 ; 152  |        int *m_pTail;
                            10089 ; 153  |};
                            10090 ; 154  |
                            10091 ; 155  |struct ModuleEntry
                            10092 ; 156  |{
                            10093 ; 157  |    int m_iSignaledEventMask;
                            10094 ; 158  |    int m_iWaitEventMask;
                            10095 ; 159  |    int m_iResourceOfCode;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 172

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10096 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10097 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10098 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10099 ; 163  |    int m_uTimeOutHigh;
                            10100 ; 164  |    int m_uTimeOutLow;
                            10101 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10102 ; 166  |};
                            10103 ; 167  |
                            10104 ; 168  |union WaitMask{
                            10105 ; 169  |    struct B{
                            10106 ; 170  |        unsigned int m_bNone     :1;
                            10107 ; 171  |        unsigned int m_bMessage  :1;
                            10108 ; 172  |        unsigned int m_bTimer    :1;
                            10109 ; 173  |        unsigned int m_bButton   :1;
                            10110 ; 174  |    } B;
                            10111 ; 175  |    int I;
                            10112 ; 176  |} ;
                            10113 ; 177  |
                            10114 ; 178  |
                            10115 ; 179  |struct Button {
                            10116 ; 180  |        WORD wButtonEvent;
                            10117 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10118 ; 182  |};
                            10119 ; 183  |
                            10120 ; 184  |struct Message {
                            10121 ; 185  |        WORD wMsgLength;
                            10122 ; 186  |        WORD wMsgCommand;
                            10123 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10124 ; 188  |};
                            10125 ; 189  |
                            10126 ; 190  |union EventTypes {
                            10127 ; 191  |        struct CMessage msg;
                            10128 ; 192  |        struct Button Button ;
                            10129 ; 193  |        struct Message Message;
                            10130 ; 194  |};
                            10131 ; 195  |
                            10132 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10133 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10134 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10135 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10136 ; 200  |
                            10137 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10138 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10139 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10140 ; 204  |
                            10141 ; 205  |#if DEBUG
                            10142 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10143 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10144 ; 208  |#else 
                            10145 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10146 ; 210  |#define DebugBuildAssert(x)    
                            10147 ; 211  |#endif
                            10148 ; 212  |
                            10149 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10150 ; 214  |//  #pragma asm
                            10151 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10152 ; 216  |//  #pragma endasm
                            10153 ; 217  |
                            10154 ; 218  |
                            10155 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 173

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10156 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10157 ; 221  |#elif defined(COLOR_65K)
                            10158 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10159 ; 223  |#else
                            10160 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10161 ; 225  |#endif
                            10162 ; 226  |    
                            10163 ; 227  |#endif // #ifndef _TYPES_H
                            10164 
                            10166 
                            10167 ; 29   |
                            10168 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10169 ; 31   |
                            10170 ; 32   |//   Trace Buffer STMP Registers 
                            10171 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            10172 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10173 ; 35   |
                            10174 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            10175 ; 37   |
                            10176 ; 38   |
                            10177 ; 39   |
                            10178 ; 40   |
                            10179 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            10180 ; 42   |
                            10181 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            10182 ; 44   |
                            10183 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            10184 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            10185 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            10186 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            10187 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            10188 ; 50   |
                            10189 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            10190 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            10191 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            10192 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            10193 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            10194 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            10195 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            10196 ; 58   |
                            10197 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_E
                                  NABLE_BITPOS) 
                            10198 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS
                                  ) 
                            10199 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            10200 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_
                                  BITPOS) 
                            10201 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_
                                  EVENT_BITPOS) 
                            10202 ; 64   |
                            10203 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            10204 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            10205 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            10206 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            10207 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            10208 ; 70   |
                            10209 ; 71   |typedef union               
                            10210 ; 72   |{
                            10211 ; 73   |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 174

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10212 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            10213 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            10214 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            10215 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            10216 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            10217 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            10218 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            10219 ; 81   |    } B;
                            10220 ; 82   |    int I;
                            10221 ; 83   |    unsigned int U;
                            10222 ; 84   |} tb_cfg_type;
                            10223 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer
                                   Configuration Register */
                            10224 ; 86   |
                            10225 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            10226 ; 88   |
                            10227 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            10228 ; 90   |
                            10229 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            10230 ; 92   |
                            10231 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            10232 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            10233 ; 95   |
                            10234 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BIT
                                  POS) 
                            10235 ; 97   |
                            10236 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
                            10237 ; 99   |
                            10238 ; 100  |typedef union               
                            10239 ; 101  |{
                            10240 ; 102  |    struct {
                            10241 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            10242 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            10243 ; 105  |    } B;
                            10244 ; 106  |    int I;
                            10245 ; 107  |    unsigned int U;
                            10246 ; 108  |} tb_bar_type;
                            10247 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer
                                   Base Address Register */
                            10248 ; 110  |
                            10249 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10250 ; 112  |
                            10251 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            10252 ; 114  |
                            10253 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            10254 ; 116  |
                            10255 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            10256 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            10257 ; 119  |
                            10258 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BIT
                                  POS) 
                            10259 ; 121  |
                            10260 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            10261 ; 123  |
                            10262 ; 124  |typedef union               
                            10263 ; 125  |{
                            10264 ; 126  |    struct {
                            10265 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            10266 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            10267 ; 129  |    } B;
                            10268 ; 130  |    int I;
                            10269 ; 131  |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 175

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10270 ; 132  |} tb_mod_type;
                            10271 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer
                                   Modulus Register */
                            10272 ; 134  |
                            10273 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10274 ; 136  |
                            10275 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            10276 ; 138  |
                            10277 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            10278 ; 140  |
                            10279 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            10280 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            10281 ; 143  |
                            10282 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            10283 ; 145  |
                            10284 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            10285 ; 147  |
                            10286 ; 148  |typedef union               
                            10287 ; 149  |{
                            10288 ; 150  |    struct {
                            10289 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            10290 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            10291 ; 153  |    } B;
                            10292 ; 154  |    int I;
                            10293 ; 155  |    unsigned int U;
                            10294 ; 156  |} tb_cir_type;
                            10295 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer
                                   Current Index Register */
                            10296 ; 158  |
                            10297 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            10298 ; 160  |
                            10299 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            10300 ; 162  |
                            10301 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            10302 ; 164  |
                            10303 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            10304 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            10305 ; 167  |
                            10306 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            10307 ; 169  |
                            10308 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            10309 ; 171  |
                            10310 ; 172  |typedef union               
                            10311 ; 173  |{
                            10312 ; 174  |    struct {
                            10313 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            10314 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            10315 ; 177  |    } B;
                            10316 ; 178  |    int I;
                            10317 ; 179  |    unsigned int U;
                            10318 ; 180  |} tb_obc_type;
                            10319 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer
                                   one byte code Register */
                            10320 ; 182  |
                            10321 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            10322 ; 184  |
                            10323 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            10324 ; 186  |
                            10325 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            10326 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            10327 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            10328 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 176

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10329 ; 191  |
                            10330 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            10331 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            10332 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            10333 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            10334 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            10335 ; 197  |
                            10336 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STY
                                  LE_BITPOS) 
                            10337 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLA
                                  SS_BITPOS) 
                            10338 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLA
                                  SS_BITPOS) 
                            10339 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS
                                  ) 
                            10340 ; 202  |
                            10341 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            10342 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            10343 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            10344 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            10345 ; 207  |
                            10346 ; 208  |typedef union               
                            10347 ; 209  |{
                            10348 ; 210  |    struct {
                            10349 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            10350 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
                            10351 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            10352 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            10353 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            10354 ; 216  |    } B;
                            10355 ; 217  |    int I;
                            10356 ; 218  |    unsigned int U;
                            10357 ; 219  |} tb_tcs_type;
                            10358 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffe
                                  r Trigger Command Register */
                            10359 ; 221  |
                            10360 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10361 ; 223  |
                            10362 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            10363 ; 225  |
                            10364 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            10365 ; 227  |
                            10366 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            10367 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            10368 ; 230  |
                            10369 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH
                                  _ADDR_BITPOS) 
                            10370 ; 232  |
                            10371 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            10372 ; 234  |
                            10373 ; 235  |typedef union               
                            10374 ; 236  |{
                            10375 ; 237  |    struct {
                            10376 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            10377 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            10378 ; 240  |    } B;
                            10379 ; 241  |    int I;
                            10380 ; 242  |    unsigned int U;
                            10381 ; 243  |} tb_tvr_type;
                            10382 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffe
                                  r Trigger Value Register */
                            10383 ; 245  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 177

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10384 ; 246  |
                            10385 ; 247  |
                            10386 ; 248  |#endif
                            10387 ; 249  |
                            10388 ; 250  |
                            10389 ; 251  |
                            10390 ; 252  |
                            10391 ; 253  |
                            10392 ; 254  |
                            10393 ; 255  |
                            10394 ; 256  |
                            10395 ; 257  |
                            10396 ; 258  |
                            10397 ; 259  |
                            10398 ; 260  |
                            10399 ; 261  |
                            10400 ; 262  |
                            10401 ; 263  |
                            10402 ; 264  |
                            10403 ; 265  |
                            10404 
                            10406 
                            10407 ; 35   |#include "regstimer.h"
                            10408 
                            10410 
                            10411 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10412 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            10413 ; 3    |// Filename: regstimer.inc
                            10414 ; 4    |// Description: Register definitions for  Timers interface
                            10415 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10416 ; 6    |// The following naming conventions are followed in this file.
                            10417 ; 7    |// All registers are named using the format...
                            10418 ; 8    |//     HW_<module>_<regname>
                            10419 ; 9    |// where <module> is the module name which can be any of the following...
                            10420 ; 10   |//     USB20
                            10421 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10422 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10423 ; 13   |// that module)
                            10424 ; 14   |// <regname> is the specific register within that module
                            10425 ; 15   |// We also define the following...
                            10426 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10427 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10428 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10429 ; 19   |// which does something else, and
                            10430 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10431 ; 21   |// which does something else.
                            10432 ; 22   |// Other rules
                            10433 ; 23   |//     All caps
                            10434 ; 24   |//     Numeric identifiers start at 0
                            10435 ; 25   |#if !(defined(regstimerinc))
                            10436 ; 26   |#define regstimerinc 1
                            10437 ; 27   |
                            10438 ; 28   |#include "types.h"
                            10439 
                            10441 
                            10442 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10443 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10444 ; 3    |//
                            10445 ; 4    |// Filename: types.h
                            10446 ; 5    |// Description: Standard data types
                            10447 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10448 ; 7    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 178

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10449 ; 8    |#ifndef _TYPES_H
                            10450 ; 9    |#define _TYPES_H
                            10451 ; 10   |
                            10452 ; 11   |// TODO:  move this outta here!
                            10453 ; 12   |#if !defined(NOERROR)
                            10454 ; 13   |#define NOERROR 0
                            10455 ; 14   |#define SUCCESS 0
                            10456 ; 15   |#endif 
                            10457 ; 16   |#if !defined(SUCCESS)
                            10458 ; 17   |#define SUCCESS  0
                            10459 ; 18   |#endif
                            10460 ; 19   |#if !defined(ERROR)
                            10461 ; 20   |#define ERROR   -1
                            10462 ; 21   |#endif
                            10463 ; 22   |#if !defined(FALSE)
                            10464 ; 23   |#define FALSE 0
                            10465 ; 24   |#endif
                            10466 ; 25   |#if !defined(TRUE)
                            10467 ; 26   |#define TRUE  1
                            10468 ; 27   |#endif
                            10469 ; 28   |
                            10470 ; 29   |#if !defined(NULL)
                            10471 ; 30   |#define NULL 0
                            10472 ; 31   |#endif
                            10473 ; 32   |
                            10474 ; 33   |#define MAX_INT     0x7FFFFF
                            10475 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10476 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10477 ; 36   |#define MAX_ULONG   (-1) 
                            10478 ; 37   |
                            10479 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10480 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10481 ; 40   |
                            10482 ; 41   |
                            10483 ; 42   |#define BYTE    unsigned char       // btVarName
                            10484 ; 43   |#define CHAR    signed char         // cVarName
                            10485 ; 44   |#define USHORT  unsigned short      // usVarName
                            10486 ; 45   |#define SHORT   unsigned short      // sVarName
                            10487 ; 46   |#define WORD    unsigned int        // wVarName
                            10488 ; 47   |#define INT     signed int          // iVarName
                            10489 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10490 ; 49   |#define LONG    signed long         // lVarName
                            10491 ; 50   |#define BOOL    unsigned int        // bVarName
                            10492 ; 51   |#define FRACT   _fract              // frVarName
                            10493 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10494 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10495 ; 54   |#define FLOAT   float               // fVarName
                            10496 ; 55   |#define DBL     double              // dVarName
                            10497 ; 56   |#define ENUM    enum                // eVarName
                            10498 ; 57   |#define CMX     _complex            // cmxVarName
                            10499 ; 58   |typedef WORD UCS3;                   // 
                            10500 ; 59   |
                            10501 ; 60   |#define UINT16  unsigned short
                            10502 ; 61   |#define UINT8   unsigned char   
                            10503 ; 62   |#define UINT32  unsigned long
                            10504 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10505 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10506 ; 65   |#define WCHAR   UINT16
                            10507 ; 66   |
                            10508 ; 67   |//UINT128 is 16 bytes or 6 words
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 179

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10509 ; 68   |typedef struct UINT128_3500 {   
                            10510 ; 69   |    int val[6];     
                            10511 ; 70   |} UINT128_3500;
                            10512 ; 71   |
                            10513 ; 72   |#define UINT128   UINT128_3500
                            10514 ; 73   |
                            10515 ; 74   |// Little endian word packed byte strings:   
                            10516 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10517 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10518 ; 77   |// Little endian word packed byte strings:   
                            10519 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10520 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10521 ; 80   |
                            10522 ; 81   |// Declare Memory Spaces To Use When Coding
                            10523 ; 82   |// A. Sector Buffers
                            10524 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10525 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10526 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10527 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10528 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10529 ; 88   |// B. Media DDI Memory
                            10530 ; 89   |#define MEDIA_DDI_MEM _Y
                            10531 ; 90   |
                            10532 ; 91   |
                            10533 ; 92   |
                            10534 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10535 ; 94   |// Examples of circular pointers:
                            10536 ; 95   |//    INT CIRC cpiVarName
                            10537 ; 96   |//    DWORD CIRC cpdwVarName
                            10538 ; 97   |
                            10539 ; 98   |#define RETCODE INT                 // rcVarName
                            10540 ; 99   |
                            10541 ; 100  |// generic bitfield structure
                            10542 ; 101  |struct Bitfield {
                            10543 ; 102  |    unsigned int B0  :1;
                            10544 ; 103  |    unsigned int B1  :1;
                            10545 ; 104  |    unsigned int B2  :1;
                            10546 ; 105  |    unsigned int B3  :1;
                            10547 ; 106  |    unsigned int B4  :1;
                            10548 ; 107  |    unsigned int B5  :1;
                            10549 ; 108  |    unsigned int B6  :1;
                            10550 ; 109  |    unsigned int B7  :1;
                            10551 ; 110  |    unsigned int B8  :1;
                            10552 ; 111  |    unsigned int B9  :1;
                            10553 ; 112  |    unsigned int B10 :1;
                            10554 ; 113  |    unsigned int B11 :1;
                            10555 ; 114  |    unsigned int B12 :1;
                            10556 ; 115  |    unsigned int B13 :1;
                            10557 ; 116  |    unsigned int B14 :1;
                            10558 ; 117  |    unsigned int B15 :1;
                            10559 ; 118  |    unsigned int B16 :1;
                            10560 ; 119  |    unsigned int B17 :1;
                            10561 ; 120  |    unsigned int B18 :1;
                            10562 ; 121  |    unsigned int B19 :1;
                            10563 ; 122  |    unsigned int B20 :1;
                            10564 ; 123  |    unsigned int B21 :1;
                            10565 ; 124  |    unsigned int B22 :1;
                            10566 ; 125  |    unsigned int B23 :1;
                            10567 ; 126  |};
                            10568 ; 127  |
                            10569 ; 128  |union BitInt {
                            10570 ; 129  |        struct Bitfield B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 180

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10571 ; 130  |        int        I;
                            10572 ; 131  |};
                            10573 ; 132  |
                            10574 ; 133  |#define MAX_MSG_LENGTH 10
                            10575 ; 134  |struct CMessage
                            10576 ; 135  |{
                            10577 ; 136  |        unsigned int m_uLength;
                            10578 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10579 ; 138  |};
                            10580 ; 139  |
                            10581 ; 140  |typedef struct {
                            10582 ; 141  |    WORD m_wLength;
                            10583 ; 142  |    WORD m_wMessage;
                            10584 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10585 ; 144  |} Message;
                            10586 ; 145  |
                            10587 ; 146  |struct MessageQueueDescriptor
                            10588 ; 147  |{
                            10589 ; 148  |        int *m_pBase;
                            10590 ; 149  |        int m_iModulo;
                            10591 ; 150  |        int m_iSize;
                            10592 ; 151  |        int *m_pHead;
                            10593 ; 152  |        int *m_pTail;
                            10594 ; 153  |};
                            10595 ; 154  |
                            10596 ; 155  |struct ModuleEntry
                            10597 ; 156  |{
                            10598 ; 157  |    int m_iSignaledEventMask;
                            10599 ; 158  |    int m_iWaitEventMask;
                            10600 ; 159  |    int m_iResourceOfCode;
                            10601 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10602 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10603 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10604 ; 163  |    int m_uTimeOutHigh;
                            10605 ; 164  |    int m_uTimeOutLow;
                            10606 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10607 ; 166  |};
                            10608 ; 167  |
                            10609 ; 168  |union WaitMask{
                            10610 ; 169  |    struct B{
                            10611 ; 170  |        unsigned int m_bNone     :1;
                            10612 ; 171  |        unsigned int m_bMessage  :1;
                            10613 ; 172  |        unsigned int m_bTimer    :1;
                            10614 ; 173  |        unsigned int m_bButton   :1;
                            10615 ; 174  |    } B;
                            10616 ; 175  |    int I;
                            10617 ; 176  |} ;
                            10618 ; 177  |
                            10619 ; 178  |
                            10620 ; 179  |struct Button {
                            10621 ; 180  |        WORD wButtonEvent;
                            10622 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10623 ; 182  |};
                            10624 ; 183  |
                            10625 ; 184  |struct Message {
                            10626 ; 185  |        WORD wMsgLength;
                            10627 ; 186  |        WORD wMsgCommand;
                            10628 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10629 ; 188  |};
                            10630 ; 189  |
                            10631 ; 190  |union EventTypes {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 181

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10632 ; 191  |        struct CMessage msg;
                            10633 ; 192  |        struct Button Button ;
                            10634 ; 193  |        struct Message Message;
                            10635 ; 194  |};
                            10636 ; 195  |
                            10637 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10638 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10639 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10640 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10641 ; 200  |
                            10642 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10643 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10644 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10645 ; 204  |
                            10646 ; 205  |#if DEBUG
                            10647 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10648 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10649 ; 208  |#else 
                            10650 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10651 ; 210  |#define DebugBuildAssert(x)    
                            10652 ; 211  |#endif
                            10653 ; 212  |
                            10654 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10655 ; 214  |//  #pragma asm
                            10656 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10657 ; 216  |//  #pragma endasm
                            10658 ; 217  |
                            10659 ; 218  |
                            10660 ; 219  |#ifdef COLOR_262K
                            10661 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10662 ; 221  |#elif defined(COLOR_65K)
                            10663 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10664 ; 223  |#else
                            10665 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10666 ; 225  |#endif
                            10667 ; 226  |    
                            10668 ; 227  |#endif // #ifndef _TYPES_H
                            10669 
                            10671 
                            10672 ; 29   |
                            10673 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10674 ; 31   |//   TIMER STMP Registers 
                            10675 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10676 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            10677 ; 34   |
                            10678 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            10679 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            10680 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            10681 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            10682 ; 39   |
                            10683 ; 40   |#define HW_TIMER_NUMBER_0 0
                            10684 ; 41   |#define HW_TIMER_NUMBER_1 1
                            10685 ; 42   |#define HW_TIMER_NUMBER_2 2
                            10686 ; 43   |#define HW_TIMER_NUMBER_3 3
                            10687 ; 44   |
                            10688 ; 45   |#define HW_TMRCSR 0
                            10689 ; 46   |#define HW_TMRCNTR 1
                            10690 ; 47   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 182

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10691 ; 48   |
                            10692 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            10693 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            10694 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            10695 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            10696 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            10697 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            10698 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            10699 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            10700 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            10701 ; 58   |
                            10702 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            10703 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            10704 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            10705 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            10706 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            10707 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            10708 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            10709 ; 66   |
                            10710 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_ENABLE_BITPOS)
                            10711 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_INT_EN_BITPOS)
                            10712 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BIT
                                  POS)
                            10713 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0
                                  CSR_TIMER_CONTROL_BITPOS)
                            10714 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_STATUS_BITPOS)
                            10715 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TI
                                  MER_MODE_BITPOS)
                            10716 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS
                                  )
                            10717 ; 74   |
                            10718 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            10719 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            10720 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            10721 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            10722 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            10723 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            10724 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            10725 ; 82   |
                            10726 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            10727 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            10728 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            10729 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            10730 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            10731 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            10732 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            10733 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            10734 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            10735 ; 92   |
                            10736 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            10737 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            10738 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            10739 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            10740 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            10741 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            10742 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            10743 ; 100  |
                            10744 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_ENABLE_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 183

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10745 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_INT_EN_BITPOS)
                            10746 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BIT
                                  POS)
                            10747 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1
                                  CSR_TIMER_CONTROL_BITPOS)
                            10748 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_STATUS_BITPOS)
                            10749 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TI
                                  MER_MODE_BITPOS)
                            10750 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS
                                  )
                            10751 ; 108  |
                            10752 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            10753 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            10754 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            10755 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            10756 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            10757 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            10758 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            10759 ; 116  |
                            10760 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            10761 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            10762 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            10763 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
                            10764 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            10765 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            10766 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            10767 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            10768 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            10769 ; 126  |
                            10770 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            10771 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            10772 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            10773 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            10774 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            10775 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            10776 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            10777 ; 134  |
                            10778 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_ENABLE_BITPOS)
                            10779 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_INT_EN_BITPOS)
                            10780 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BIT
                                  POS)
                            10781 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2
                                  CSR_TIMER_CONTROL_BITPOS)
                            10782 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_STATUS_BITPOS)
                            10783 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TI
                                  MER_MODE_BITPOS)
                            10784 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS
                                  )
                            10785 ; 142  |
                            10786 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            10787 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            10788 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            10789 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            10790 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            10791 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            10792 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            10793 ; 150  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 184

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10794 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            10795 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            10796 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            10797 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            10798 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            10799 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            10800 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            10801 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            10802 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            10803 ; 160  |
                            10804 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            10805 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            10806 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            10807 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            10808 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            10809 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            10810 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            10811 ; 168  |
                            10812 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_ENABLE_BITPOS)
                            10813 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_INT_EN_BITPOS)
                            10814 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BIT
                                  POS)
                            10815 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3
                                  CSR_TIMER_CONTROL_BITPOS)
                            10816 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_STATUS_BITPOS)
                            10817 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TI
                                  MER_MODE_BITPOS)
                            10818 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS
                                  )
                            10819 ; 176  |
                            10820 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            10821 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            10822 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            10823 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            10824 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            10825 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            10826 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            10827 ; 184  |
                            10828 ; 185  |typedef union               
                            10829 ; 186  |{
                            10830 ; 187  |    struct {
                            10831 ; 188  |       int TIMER_ENABLE              :1;
                            10832 ; 189  |       int TIMER_INT_EN              :1;
                            10833 ; 190  |       int INVERT                    :1;
                            10834 ; 191  |       int TIMER_CONTROL             :3;
                            10835 ; 192  |       int RSVD0                     :1;
                            10836 ; 193  |       int TIMER_STATUS              :1;
                            10837 ; 194  |       int TIMER_MODE                :2;
                            10838 ; 195  |       int RSVD1                     :13;
                            10839 ; 196  |       int CLKGT                     :1;
                            10840 ; 197  |    } B;
                            10841 ; 198  |    int I;
                            10842 ; 199  |} timercsr_type;
                            10843 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /*
                                   Timer0 Control Status Register */
                            10844 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /*
                                   Timer1 Control Status Register */
                            10845 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /*
                                   Timer2 Control Status Register */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 185

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10846 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /*
                                   Timer3 Control Status Register */
                            10847 ; 204  |
                            10848 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            10849 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            10850 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            10851 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            10852 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BIT
                                  POS)
                            10853 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            10854 ; 211  |
                            10855 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            10856 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            10857 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            10858 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            10859 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BIT
                                  POS)
                            10860 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            10861 ; 218  |
                            10862 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            10863 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            10864 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            10865 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
                            10866 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BIT
                                  POS)
                            10867 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            10868 ; 225  |
                            10869 ; 226  |typedef union               
                            10870 ; 227  |{
                            10871 ; 228  |    struct {
                            10872 ; 229  |       int COUNT                    :24;
                            10873 ; 230  |    } B;
                            10874 ; 231  |    int I;
                            10875 ; 232  |} tmrcntr_type;
                            10876 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /
                                  * Timer0 Count Register */
                            10877 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /
                                  * Timer1 Count Register */
                            10878 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /
                                  * Timer2 Count Register */
                            10879 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /
                                  * Timer3 Count Register */
                            10880 ; 237  |
                            10881 ; 238  |
                            10882 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            10883 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            10884 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            10885 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            10886 ; 243  |
                            10887 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            10888 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            10889 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            10890 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            10891 ; 248  |
                            10892 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            10893 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            10894 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            10895 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            10896 ; 253  |
                            10897 ; 254  |// Timer enable
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 186

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10898 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            10899 ; 256  |// Timer clock gating control
                            10900 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            10901 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            10902 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            10903 ; 260  |#endif
                            10904 ; 261  |
                            10905 ; 262  |
                            10906 ; 263  |
                            10907 ; 264  |
                            10908 
                            10910 
                            10911 ; 36   |#include "regsusb20.h"
                            10912 
                            10914 
                            10915 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10916 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            10917 ; 3    |//;  File        : regsusb20ip.inc
                            10918 ; 4    |//;  Description : USB20 IP Register definition
                            10919 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10920 ; 6    |
                            10921 ; 7    |// The following naming conventions are followed in this file.
                            10922 ; 8    |// All registers are named using the format...
                            10923 ; 9    |//     HW_<module>_<regname>
                            10924 ; 10   |// where <module> is the module name which can be any of the following...
                            10925 ; 11   |//     USB20
                            10926 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            10927 ; 13   |// module name includes a number starting from 0 for the first instance of
                            10928 ; 14   |// that module)
                            10929 ; 15   |// <regname> is the specific register within that module
                            10930 ; 16   |// We also define the following...
                            10931 ; 17   |//     HW_<module>_<regname>_BITPOS
                            10932 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10933 ; 19   |//     HW_<module>_<regname>_SETMASK
                            10934 ; 20   |// which does something else, and
                            10935 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            10936 ; 22   |// which does something else.
                            10937 ; 23   |// Other rules
                            10938 ; 24   |//     All caps
                            10939 ; 25   |//     Numeric identifiers start at 0
                            10940 ; 26   |
                            10941 ; 27   |#if !(defined(regsusb20inc))
                            10942 ; 28   |#define regsusb20inc 1
                            10943 ; 29   |
                            10944 ; 30   |#include "types.h"
                            10945 
                            10947 
                            10948 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10949 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10950 ; 3    |//
                            10951 ; 4    |// Filename: types.h
                            10952 ; 5    |// Description: Standard data types
                            10953 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10954 ; 7    |
                            10955 ; 8    |#ifndef _TYPES_H
                            10956 ; 9    |#define _TYPES_H
                            10957 ; 10   |
                            10958 ; 11   |// TODO:  move this outta here!
                            10959 ; 12   |#if !defined(NOERROR)
                            10960 ; 13   |#define NOERROR 0
                            10961 ; 14   |#define SUCCESS 0
                            10962 ; 15   |#endif 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 187

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10963 ; 16   |#if !defined(SUCCESS)
                            10964 ; 17   |#define SUCCESS  0
                            10965 ; 18   |#endif
                            10966 ; 19   |#if !defined(ERROR)
                            10967 ; 20   |#define ERROR   -1
                            10968 ; 21   |#endif
                            10969 ; 22   |#if !defined(FALSE)
                            10970 ; 23   |#define FALSE 0
                            10971 ; 24   |#endif
                            10972 ; 25   |#if !defined(TRUE)
                            10973 ; 26   |#define TRUE  1
                            10974 ; 27   |#endif
                            10975 ; 28   |
                            10976 ; 29   |#if !defined(NULL)
                            10977 ; 30   |#define NULL 0
                            10978 ; 31   |#endif
                            10979 ; 32   |
                            10980 ; 33   |#define MAX_INT     0x7FFFFF
                            10981 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10982 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10983 ; 36   |#define MAX_ULONG   (-1) 
                            10984 ; 37   |
                            10985 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10986 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10987 ; 40   |
                            10988 ; 41   |
                            10989 ; 42   |#define BYTE    unsigned char       // btVarName
                            10990 ; 43   |#define CHAR    signed char         // cVarName
                            10991 ; 44   |#define USHORT  unsigned short      // usVarName
                            10992 ; 45   |#define SHORT   unsigned short      // sVarName
                            10993 ; 46   |#define WORD    unsigned int        // wVarName
                            10994 ; 47   |#define INT     signed int          // iVarName
                            10995 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10996 ; 49   |#define LONG    signed long         // lVarName
                            10997 ; 50   |#define BOOL    unsigned int        // bVarName
                            10998 ; 51   |#define FRACT   _fract              // frVarName
                            10999 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11000 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11001 ; 54   |#define FLOAT   float               // fVarName
                            11002 ; 55   |#define DBL     double              // dVarName
                            11003 ; 56   |#define ENUM    enum                // eVarName
                            11004 ; 57   |#define CMX     _complex            // cmxVarName
                            11005 ; 58   |typedef WORD UCS3;                   // 
                            11006 ; 59   |
                            11007 ; 60   |#define UINT16  unsigned short
                            11008 ; 61   |#define UINT8   unsigned char   
                            11009 ; 62   |#define UINT32  unsigned long
                            11010 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11011 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11012 ; 65   |#define WCHAR   UINT16
                            11013 ; 66   |
                            11014 ; 67   |//UINT128 is 16 bytes or 6 words
                            11015 ; 68   |typedef struct UINT128_3500 {   
                            11016 ; 69   |    int val[6];     
                            11017 ; 70   |} UINT128_3500;
                            11018 ; 71   |
                            11019 ; 72   |#define UINT128   UINT128_3500
                            11020 ; 73   |
                            11021 ; 74   |// Little endian word packed byte strings:   
                            11022 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 188

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11023 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11024 ; 77   |// Little endian word packed byte strings:   
                            11025 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11026 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11027 ; 80   |
                            11028 ; 81   |// Declare Memory Spaces To Use When Coding
                            11029 ; 82   |// A. Sector Buffers
                            11030 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11031 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11032 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11033 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11034 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11035 ; 88   |// B. Media DDI Memory
                            11036 ; 89   |#define MEDIA_DDI_MEM _Y
                            11037 ; 90   |
                            11038 ; 91   |
                            11039 ; 92   |
                            11040 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11041 ; 94   |// Examples of circular pointers:
                            11042 ; 95   |//    INT CIRC cpiVarName
                            11043 ; 96   |//    DWORD CIRC cpdwVarName
                            11044 ; 97   |
                            11045 ; 98   |#define RETCODE INT                 // rcVarName
                            11046 ; 99   |
                            11047 ; 100  |// generic bitfield structure
                            11048 ; 101  |struct Bitfield {
                            11049 ; 102  |    unsigned int B0  :1;
                            11050 ; 103  |    unsigned int B1  :1;
                            11051 ; 104  |    unsigned int B2  :1;
                            11052 ; 105  |    unsigned int B3  :1;
                            11053 ; 106  |    unsigned int B4  :1;
                            11054 ; 107  |    unsigned int B5  :1;
                            11055 ; 108  |    unsigned int B6  :1;
                            11056 ; 109  |    unsigned int B7  :1;
                            11057 ; 110  |    unsigned int B8  :1;
                            11058 ; 111  |    unsigned int B9  :1;
                            11059 ; 112  |    unsigned int B10 :1;
                            11060 ; 113  |    unsigned int B11 :1;
                            11061 ; 114  |    unsigned int B12 :1;
                            11062 ; 115  |    unsigned int B13 :1;
                            11063 ; 116  |    unsigned int B14 :1;
                            11064 ; 117  |    unsigned int B15 :1;
                            11065 ; 118  |    unsigned int B16 :1;
                            11066 ; 119  |    unsigned int B17 :1;
                            11067 ; 120  |    unsigned int B18 :1;
                            11068 ; 121  |    unsigned int B19 :1;
                            11069 ; 122  |    unsigned int B20 :1;
                            11070 ; 123  |    unsigned int B21 :1;
                            11071 ; 124  |    unsigned int B22 :1;
                            11072 ; 125  |    unsigned int B23 :1;
                            11073 ; 126  |};
                            11074 ; 127  |
                            11075 ; 128  |union BitInt {
                            11076 ; 129  |        struct Bitfield B;
                            11077 ; 130  |        int        I;
                            11078 ; 131  |};
                            11079 ; 132  |
                            11080 ; 133  |#define MAX_MSG_LENGTH 10
                            11081 ; 134  |struct CMessage
                            11082 ; 135  |{
                            11083 ; 136  |        unsigned int m_uLength;
                            11084 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 189

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11085 ; 138  |};
                            11086 ; 139  |
                            11087 ; 140  |typedef struct {
                            11088 ; 141  |    WORD m_wLength;
                            11089 ; 142  |    WORD m_wMessage;
                            11090 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11091 ; 144  |} Message;
                            11092 ; 145  |
                            11093 ; 146  |struct MessageQueueDescriptor
                            11094 ; 147  |{
                            11095 ; 148  |        int *m_pBase;
                            11096 ; 149  |        int m_iModulo;
                            11097 ; 150  |        int m_iSize;
                            11098 ; 151  |        int *m_pHead;
                            11099 ; 152  |        int *m_pTail;
                            11100 ; 153  |};
                            11101 ; 154  |
                            11102 ; 155  |struct ModuleEntry
                            11103 ; 156  |{
                            11104 ; 157  |    int m_iSignaledEventMask;
                            11105 ; 158  |    int m_iWaitEventMask;
                            11106 ; 159  |    int m_iResourceOfCode;
                            11107 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11108 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11109 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11110 ; 163  |    int m_uTimeOutHigh;
                            11111 ; 164  |    int m_uTimeOutLow;
                            11112 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11113 ; 166  |};
                            11114 ; 167  |
                            11115 ; 168  |union WaitMask{
                            11116 ; 169  |    struct B{
                            11117 ; 170  |        unsigned int m_bNone     :1;
                            11118 ; 171  |        unsigned int m_bMessage  :1;
                            11119 ; 172  |        unsigned int m_bTimer    :1;
                            11120 ; 173  |        unsigned int m_bButton   :1;
                            11121 ; 174  |    } B;
                            11122 ; 175  |    int I;
                            11123 ; 176  |} ;
                            11124 ; 177  |
                            11125 ; 178  |
                            11126 ; 179  |struct Button {
                            11127 ; 180  |        WORD wButtonEvent;
                            11128 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11129 ; 182  |};
                            11130 ; 183  |
                            11131 ; 184  |struct Message {
                            11132 ; 185  |        WORD wMsgLength;
                            11133 ; 186  |        WORD wMsgCommand;
                            11134 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11135 ; 188  |};
                            11136 ; 189  |
                            11137 ; 190  |union EventTypes {
                            11138 ; 191  |        struct CMessage msg;
                            11139 ; 192  |        struct Button Button ;
                            11140 ; 193  |        struct Message Message;
                            11141 ; 194  |};
                            11142 ; 195  |
                            11143 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11144 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11145 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 190

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11146 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11147 ; 200  |
                            11148 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11149 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11150 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11151 ; 204  |
                            11152 ; 205  |#if DEBUG
                            11153 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11154 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11155 ; 208  |#else 
                            11156 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11157 ; 210  |#define DebugBuildAssert(x)    
                            11158 ; 211  |#endif
                            11159 ; 212  |
                            11160 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11161 ; 214  |//  #pragma asm
                            11162 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11163 ; 216  |//  #pragma endasm
                            11164 ; 217  |
                            11165 ; 218  |
                            11166 ; 219  |#ifdef COLOR_262K
                            11167 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11168 ; 221  |#elif defined(COLOR_65K)
                            11169 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11170 ; 223  |#else
                            11171 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11172 ; 225  |#endif
                            11173 ; 226  |    
                            11174 ; 227  |#endif // #ifndef _TYPES_H
                            11175 
                            11177 
                            11178 ; 31   |
                            11179 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11180 ; 33   |//   USB2.0 STMP Registers 
                            11181 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11182 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            11183 ; 36   |
                            11184 ; 37   |
                            11185 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            11186 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            11187 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            11188 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            11189 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            11190 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            11191 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            11192 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            11193 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            11194 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            11195 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            11196 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            11197 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            11198 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            11199 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            11200 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            11201 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            11202 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            11203 ; 56   |
                            11204 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 191

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11205 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            11206 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            11207 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            11208 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            11209 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            11210 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            11211 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            11212 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            11213 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            11214 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            11215 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            11216 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            11217 ; 70   |
                            11218 ; 71   |
                            11219 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            11220 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            11221 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            11222 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            11223 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            11224 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            11225 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            11226 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
                            11227 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            11228 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            11229 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            11230 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            11231 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            11232 ; 85   |
                            11233 ; 86   |typedef union               
                            11234 ; 87   |{
                            11235 ; 88   |    struct {
                            11236 ; 89   |        int USBEN          :1;
                            11237 ; 90   |        int WAKEUPIRQ      :1;
                            11238 ; 91   |        int WAKEUPIE       :1;
                            11239 ; 92   |        int VBUSCXIRQ      :1;
                            11240 ; 93   |        int VBUSCXIE       :1;
                            11241 ; 94   |        int VBUSDISCXIRQ   :1;
                            11242 ; 95   |        int VBUSDISCXIE    :1;
                            11243 ; 96   |        int CLKOFF         :1;
                            11244 ; 97   |        int SUSP           :1;
                            11245 ; 98   |        int SUSPF          :1;
                            11246 ; 99   |        int UTMITST        :1;
                            11247 ; 100  |        int ARCCONNECT     :1;
                            11248 ; 101  |        int PLUGGEDIN_EN   :1;
                            11249 ; 102  |        int PLUGGEDIN      :1;
                            11250 ; 103  |        int                :8;
                            11251 ; 104  |        int HOSTDISCONNECT :1;
                            11252 ; 105  |        int VBUSSENSE      :1;
                            11253 ; 106  |    } B;
                            11254 ; 107  |    int I;
                            11255 ; 108  |} usbcsr_type;
                            11256 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                            11257 ; 110  |
                            11258 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            11259 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            11260 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            11261 ; 114  |
                            11262 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            11263 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            11264 ; 117  |
                            11265 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 192

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11266 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            11267 ; 120  |
                            11268 ; 121  |typedef union               
                            11269 ; 122  |{
                            11270 ; 123  |    struct {
                            11271 ; 124  |        int ADD            :16;
                            11272 ; 125  |        int MEM            :2;
                            11273 ; 126  |        int                :6;
                            11274 ; 127  |    } B;
                            11275 ; 128  |    int I;
                            11276 ; 129  |} usbdmaoff_type;
                            11277 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            11278 ; 131  |
                            11279 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            11280 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            11281 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            11282 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            11283 ; 136  |
                            11284 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11285 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11286 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11287 ; 140  |
                            11288 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11289 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11290 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11291 ; 144  |
                            11292 ; 145  |typedef union               
                            11293 ; 146  |{
                            11294 ; 147  |    struct {
                            11295 ; 148  |        int ADD            :9;
                            11296 ; 149  |        int                :7;
                            11297 ; 150  |        int RWB            :1;
                            11298 ; 151  |        int                :14;
                            11299 ; 152  |        int KICK           :1;
                            11300 ; 153  |    } B;
                            11301 ; 154  |    int I;
                            11302 ; 155  |} usbarcaccess_type;
                            11303 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11304 ; 157  |
                            11305 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            11306 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11307 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11308 ; 161  |
                            11309 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11310 ; 163  |
                            11311 ; 164  |typedef union               
                            11312 ; 165  |{
                            11313 ; 166  |    struct {
                            11314 ; 167  |        int DATA           :16;
                            11315 ; 168  |        int                :8;
                            11316 ; 169  |    } B;
                            11317 ; 170  |    int I;
                            11318 ; 171  |} usbarcdatalow_type;
                            11319 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                            11320 ; 173  |
                            11321 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11322 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11323 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11324 ; 177  |
                            11325 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11326 ; 179  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 193

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11327 ; 180  |typedef union               
                            11328 ; 181  |{
                            11329 ; 182  |    struct {
                            11330 ; 183  |        int DATA           :16;
                            11331 ; 184  |        int                :8;
                            11332 ; 185  |    } B;
                            11333 ; 186  |    int I;
                            11334 ; 187  |} usbarcdatahigh_type;
                            11335 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                            11336 ; 189  |
                            11337 ; 190  |
                            11338 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11339 ; 192  |//   USB2.0 ARC Registers 
                            11340 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11341 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11342 ; 195  |
                            11343 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            11344 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11345 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11346 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11347 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
                            11348 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11349 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11350 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11351 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11352 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11353 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11354 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11355 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11356 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11357 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11358 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11359 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11360 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11361 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11362 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11363 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11364 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11365 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            11366 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11367 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11368 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11369 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11370 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11371 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11372 ; 225  |
                            11373 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11374 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11375 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11376 ; 229  |
                            11377 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11378 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11379 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            11380 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11381 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11382 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11383 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11384 ; 237  |
                            11385 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11386 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11387 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 194

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11388 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11389 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11390 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11391 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11392 ; 245  |
                            11393 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11394 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            11395 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            11396 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11397 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11398 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11399 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11400 ; 253  |
                            11401 ; 254  |typedef union               
                            11402 ; 255  |{
                            11403 ; 256  |    struct {
                            11404 ; 257  |        int N_PORTS         :4;
                            11405 ; 258  |        int PPC             :1;
                            11406 ; 259  |        int                 :3;
                            11407 ; 260  |        int N_PCC           :4;
                            11408 ; 261  |        int N_CC            :4;
                            11409 ; 262  |        int PI              :1;
                            11410 ; 263  |        int                 :3;
                            11411 ; 264  |        int N_PTT           :4;
                            11412 ; 265  |        int N_TT            :4;
                            11413 ; 266  |        int                 :20;
                            11414 ; 267  |    } B;
                            11415 ; 268  |    DWORD I;
                            11416 ; 269  |} hcsparams_type;
                            11417 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11418 ; 271  |
                            11419 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11420 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11421 ; 274  |
                            11422 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11423 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11424 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11425 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11426 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11427 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            11428 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11429 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11430 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11431 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11432 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11433 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11434 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11435 ; 288  |
                            11436 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11437 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11438 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11439 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11440 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11441 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11442 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11443 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11444 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11445 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11446 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11447 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11448 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11449 ; 302  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 195

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11450 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11451 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11452 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11453 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11454 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11455 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11456 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11457 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11458 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11459 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11460 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11461 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11462 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11463 ; 316  |
                            11464 ; 317  |typedef union               
                            11465 ; 318  |{
                            11466 ; 319  |    struct {
                            11467 ; 320  |        int RS              :1;
                            11468 ; 321  |        int RST             :1;
                            11469 ; 322  |        int FS0             :1;
                            11470 ; 323  |        int FS1             :1;
                            11471 ; 324  |        int PSE             :1;
                            11472 ; 325  |        int ASE             :1;
                            11473 ; 326  |        int IAA             :1;
                            11474 ; 327  |        int LR              :1;
                            11475 ; 328  |        int ASP0            :1;
                            11476 ; 329  |        int ASP1            :1;
                            11477 ; 330  |        int                 :1;
                            11478 ; 331  |        int ASPE            :1;
                            11479 ; 332  |        int                 :3;
                            11480 ; 333  |        int FS2             :1;
                            11481 ; 334  |        int ITC             :8;
                            11482 ; 335  |        int                 :24;
                            11483 ; 336  |    } B;
                            11484 ; 337  |    DWORD I;
                            11485 ; 338  |} usbcmd_type;
                            11486 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11487 ; 340  |
                            11488 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11489 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            11490 ; 343  |
                            11491 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11492 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11493 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11494 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11495 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11496 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11497 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11498 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11499 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11500 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11501 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11502 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11503 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11504 ; 357  |
                            11505 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11506 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11507 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11508 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11509 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11510 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11511 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 196

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11512 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11513 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11514 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11515 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11516 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11517 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11518 ; 371  |
                            11519 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11520 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11521 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11522 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11523 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11524 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11525 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11526 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            11527 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            11528 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            11529 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            11530 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            11531 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            11532 ; 385  |
                            11533 ; 386  |
                            11534 ; 387  |typedef union               
                            11535 ; 388  |{
                            11536 ; 389  |    struct {
                            11537 ; 390  |        int UI              :1;
                            11538 ; 391  |        int UEI             :1;
                            11539 ; 392  |        int PCI             :1;
                            11540 ; 393  |        int FRI             :1;
                            11541 ; 394  |        int SEI             :1;
                            11542 ; 395  |        int AAI             :1;
                            11543 ; 396  |        int URI             :1;
                            11544 ; 397  |        int STI             :1;
                            11545 ; 398  |        int SLI             :1;
                            11546 ; 399  |        int                 :3;
                            11547 ; 400  |        int HCH             :1;
                            11548 ; 401  |        int RCL             :1;
                            11549 ; 402  |        int PS              :1;
                            11550 ; 403  |        int AS              :1;
                            11551 ; 404  |        int                 :24;
                            11552 ; 405  |    } B;
                            11553 ; 406  |    DWORD I;
                            11554 ; 407  |} usbsts_type;
                            11555 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            11556 ; 409  |
                            11557 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            11558 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            11559 ; 412  |
                            11560 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            11561 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            11562 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            11563 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            11564 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            11565 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            11566 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            11567 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            11568 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            11569 ; 422  |
                            11570 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            11571 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            11572 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            11573 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 197

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11574 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            11575 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            11576 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            11577 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            11578 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            11579 ; 432  |
                            11580 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            11581 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            11582 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            11583 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            11584 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            11585 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            11586 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            11587 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            11588 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            11589 ; 442  |
                            11590 ; 443  |
                            11591 ; 444  |typedef union               
                            11592 ; 445  |{
                            11593 ; 446  |    struct {
                            11594 ; 447  |        int UE              :1;
                            11595 ; 448  |        int UEE             :1;
                            11596 ; 449  |        int PCE             :1;
                            11597 ; 450  |        int FRE             :1;
                            11598 ; 451  |        int SEE             :1;
                            11599 ; 452  |        int AAE             :1;
                            11600 ; 453  |        int URE             :1;
                            11601 ; 454  |        int STE             :1;
                            11602 ; 455  |        int SLE             :1;
                            11603 ; 456  |        int                 :39;
                            11604 ; 457  |    } B;
                            11605 ; 458  |    DWORD I;
                            11606 ; 459  |} usbintr_type;
                            11607 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            11608 ; 461  |
                            11609 ; 462  |
                            11610 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            11611 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            11612 ; 465  |
                            11613 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            11614 ; 467  |
                            11615 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            11616 ; 469  |
                            11617 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            11618 ; 471  |
                            11619 ; 472  |typedef union               
                            11620 ; 473  |{
                            11621 ; 474  |    struct {
                            11622 ; 475  |        int                 :25;
                            11623 ; 476  |        int ADD             :7;
                            11624 ; 477  |        int                 :16;
                            11625 ; 478  |    } B;
                            11626 ; 479  |    DWORD I;
                            11627 ; 480  |} devaddr_type;
                            11628 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            11629 ; 482  |
                            11630 ; 483  |
                            11631 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            11632 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            11633 ; 486  |
                            11634 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            11635 ; 488  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 198

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11636 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            11637 ; 490  |
                            11638 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            11639 ; 492  |
                            11640 ; 493  |typedef union               
                            11641 ; 494  |{
                            11642 ; 495  |    struct {
                            11643 ; 496  |        int                 :10;
                            11644 ; 497  |        int ADD             :22;
                            11645 ; 498  |        int                 :16;
                            11646 ; 499  |    } B;
                            11647 ; 500  |    DWORD I;
                            11648 ; 501  |} endptlistaddr_type;
                            11649 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                            11650 ; 503  |
                            11651 ; 504  |
                            11652 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            11653 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            11654 ; 507  |
                            11655 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            11656 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
                            11657 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            11658 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            11659 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            11660 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            11661 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            11662 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            11663 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            11664 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            11665 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            11666 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            11667 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            11668 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            11669 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            11670 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            11671 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            11672 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            11673 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            11674 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            11675 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            11676 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            11677 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            11678 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            11679 ; 532  |
                            11680 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            11681 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            11682 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            11683 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            11684 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            11685 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            11686 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            11687 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            11688 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            11689 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            11690 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            11691 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            11692 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            11693 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            11694 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            11695 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            11696 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 199

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11697 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            11698 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            11699 ; 552  |
                            11700 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            11701 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            11702 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            11703 ; 556  |
                            11704 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            11705 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            11706 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            11707 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            11708 ; 561  |
                            11709 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            11710 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            11711 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            11712 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            11713 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            11714 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            11715 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            11716 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            11717 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            11718 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
                            11719 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            11720 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            11721 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            11722 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            11723 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            11724 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            11725 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            11726 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            11727 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            11728 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            11729 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            11730 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            11731 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            11732 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            11733 ; 586  |
                            11734 ; 587  |typedef union               
                            11735 ; 588  |{
                            11736 ; 589  |    struct {
                            11737 ; 590  |        int CCS             :1;
                            11738 ; 591  |        int CSC             :1;
                            11739 ; 592  |        int PE              :1;
                            11740 ; 593  |        int PEC             :1;
                            11741 ; 594  |        int OCA             :1;
                            11742 ; 595  |        int OCC             :1;
                            11743 ; 596  |        int FPR             :1;
                            11744 ; 597  |        int SUSP            :1;
                            11745 ; 598  |        int PR              :1;
                            11746 ; 599  |        int HSP             :1;
                            11747 ; 600  |        int LS              :2;
                            11748 ; 601  |        int PP              :1;
                            11749 ; 602  |        int PO              :1;
                            11750 ; 603  |        int PIC             :2;
                            11751 ; 604  |        int PTC             :4;
                            11752 ; 605  |        int WKCN            :1;
                            11753 ; 606  |        int WKDS            :1;
                            11754 ; 607  |        int WKOC            :1;
                            11755 ; 608  |        int PHCD            :1;
                            11756 ; 609  |        int PFSC            :1;
                            11757 ; 610  |        int                 :1;
                            11758 ; 611  |        int PSPD            :2;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 200

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11759 ; 612  |        int                 :1;
                            11760 ; 613  |        int PTW             :1;
                            11761 ; 614  |        int STS             :1;
                            11762 ; 615  |        int PTS             :1;
                            11763 ; 616  |        int                 :16;
                            11764 ; 617  |    } B;
                            11765 ; 618  |    DWORD I;
                            11766 ; 619  |} portsc1_type;
                            11767 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            11768 ; 621  |
                            11769 ; 622  |
                            11770 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            11771 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            11772 ; 625  |
                            11773 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            11774 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            11775 ; 628  |
                            11776 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            11777 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            11778 ; 631  |
                            11779 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            11780 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
                            11781 ; 634  |
                            11782 ; 635  |typedef union               
                            11783 ; 636  |{
                            11784 ; 637  |    struct {
                            11785 ; 638  |        int CM              :2;
                            11786 ; 639  |        int ES              :1;
                            11787 ; 640  |        int                 :46;
                            11788 ; 641  |    } B;
                            11789 ; 642  |    DWORD I;
                            11790 ; 643  |} usbmode_type;
                            11791 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            11792 ; 645  |
                            11793 ; 646  |
                            11794 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            11795 ; 648  |//  The following endpoint equates are common for the following registers
                            11796 ; 649  |
                            11797 ; 650  |#define ENDPOINT0_BITPOS (0)
                            11798 ; 651  |#define ENDPOINT1_BITPOS (1)
                            11799 ; 652  |#define ENDPOINT2_BITPOS (2)
                            11800 ; 653  |#define ENDPOINT3_BITPOS (3)
                            11801 ; 654  |#define ENDPOINT4_BITPOS (4)
                            11802 ; 655  |#define ENDPOINT5_BITPOS (5)
                            11803 ; 656  |#define ENDPOINT6_BITPOS (6)
                            11804 ; 657  |#define ENDPOINT7_BITPOS (7)
                            11805 ; 658  |#define ENDPOINT8_BITPOS (8)
                            11806 ; 659  |#define ENDPOINT9_BITPOS (9)
                            11807 ; 660  |#define ENDPOINT10_BITPOS (10)
                            11808 ; 661  |#define ENDPOINT11_BITPOS (11)
                            11809 ; 662  |#define ENDPOINT12_BITPOS (12)
                            11810 ; 663  |#define ENDPOINT13_BITPOS (13)
                            11811 ; 664  |#define ENDPOINT14_BITPOS (14)
                            11812 ; 665  |#define ENDPOINT15_BITPOS (15)
                            11813 ; 666  |
                            11814 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            11815 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            11816 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            11817 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            11818 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            11819 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            11820 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 201

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11821 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            11822 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            11823 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            11824 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            11825 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            11826 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            11827 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            11828 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            11829 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            11830 ; 683  |
                            11831 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            11832 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            11833 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            11834 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            11835 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            11836 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            11837 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            11838 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            11839 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            11840 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            11841 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            11842 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
                            11843 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            11844 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            11845 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            11846 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            11847 ; 700  |
                            11848 ; 701  |typedef union               
                            11849 ; 702  |{
                            11850 ; 703  |    struct {
                            11851 ; 704  |        int EP0              :1;
                            11852 ; 705  |        int EP1              :1;
                            11853 ; 706  |        int EP2              :1;
                            11854 ; 707  |        int EP3              :1;
                            11855 ; 708  |        int EP4              :1;
                            11856 ; 709  |        int EP5              :1;
                            11857 ; 710  |        int EP6              :1;
                            11858 ; 711  |        int EP7              :1;
                            11859 ; 712  |        int EP8              :1;
                            11860 ; 713  |        int EP9              :1;
                            11861 ; 714  |        int EP10             :1;
                            11862 ; 715  |        int EP11             :1;
                            11863 ; 716  |        int EP12             :1;
                            11864 ; 717  |        int EP13             :1;
                            11865 ; 718  |        int EP14             :1;
                            11866 ; 719  |        int EP15             :1;
                            11867 ; 720  |        int                  :32;
                            11868 ; 721  |    } B;
                            11869 ; 722  |    DWORD I;
                            11870 ; 723  |} endpsetupstat_type;
                            11871 ; 724  |
                            11872 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                            11873 ; 726  |
                            11874 ; 727  |typedef union               
                            11875 ; 728  |{
                            11876 ; 729  |    struct {
                            11877 ; 730  |        int EP0              :1;
                            11878 ; 731  |        int EP1              :1;
                            11879 ; 732  |        int EP2              :1;
                            11880 ; 733  |        int EP3              :1;
                            11881 ; 734  |        int EP4              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 202

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11882 ; 735  |        int EP5              :1;
                            11883 ; 736  |        int EP6              :1;
                            11884 ; 737  |        int EP7              :1;
                            11885 ; 738  |        int EP8              :1;
                            11886 ; 739  |        int EP9              :1;
                            11887 ; 740  |        int EP10             :1;
                            11888 ; 741  |        int EP11             :1;
                            11889 ; 742  |        int EP12             :1;
                            11890 ; 743  |        int EP13             :1;
                            11891 ; 744  |        int EP14             :1;
                            11892 ; 745  |        int EP15             :1;
                            11893 ; 746  |        int                  :8;
                            11894 ; 747  |    } B;
                            11895 ; 748  |    WORD I;
                            11896 ; 749  |} endpt_type;
                            11897 
                            11935 
                            11936 ; 750  |
                            11937 ; 751  |typedef union
                            11938 ; 752  |{
                            11939 ; 753  |   struct {
                            11940 ; 754  |       endpt_type  RX;
                            11941 ; 755  |       endpt_type  TX;
                            11942 ; 756  |   } W;
                            11943 ; 757  |   DWORD DW;
                            11944 ; 758  |} endptrxtx_type;
                            11945 ; 759  |
                            11946 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
                            11947 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                            11948 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                            11949 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                            11950 ; 764  |
                            11951 ; 765  |
                            11952 ; 766  |
                            11953 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            11954 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            11955 ; 769  |
                            11956 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            11957 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            11958 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            11959 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            11960 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            11961 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            11962 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            11963 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            11964 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            11965 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            11966 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            11967 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            11968 ; 782  |
                            11969 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            11970 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            11971 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            11972 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            11973 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            11974 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            11975 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            11976 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 203

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11977 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            11978 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            11979 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            11980 ; 794  |
                            11981 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            11982 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11983 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            11984 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            11985 ; 799  |
                            11986 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            11987 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            11988 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            11989 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            11990 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            11991 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            11992 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            11993 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            11994 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            11995 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            11996 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            11997 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            11998 ; 812  |
                            11999 ; 813  |
                            12000 ; 814  |typedef union               
                            12001 ; 815  |{
                            12002 ; 816  |    struct {
                            12003 ; 817  |        int RXS             :1;
                            12004 ; 818  |        int RXD             :1;
                            12005 ; 819  |        int RXT             :2;
                            12006 ; 820  |        int                 :1;
                            12007 ; 821  |        int RXI             :1;
                            12008 ; 822  |        int RXR             :1;
                            12009 ; 823  |        int RXE             :1;
                            12010 ; 824  |        int                 :8;
                            12011 ; 825  |        int TXS             :1;
                            12012 ; 826  |        int TXD             :1;
                            12013 ; 827  |        int TXT             :2;
                            12014 ; 828  |        int                 :1;
                            12015 ; 829  |        int TXI             :1;
                            12016 ; 830  |        int TXR             :1;
                            12017 ; 831  |        int TXE             :1;
                            12018 ; 832  |        int                 :24;
                            12019 ; 833  |    } B;
                            12020 ; 834  |    DWORD I;
                            12021 ; 835  |} endptctrl_type;
                            12022 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                            12023 ; 837  |
                            12024 ; 838  |#endif
                            12025 ; 839  |
                            12026 ; 840  |
                            12027 
                            12029 
                            12030 ; 37   |#include "regsusb20phy.h"
                            12031 
                            12033 
                            12034 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12035 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            12036 ; 3    |//;  File        : regsusbphy.inc
                            12037 ; 4    |//;  Description : USB20 PHY Register definition
                            12038 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            12039 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 204

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12040 ; 7    |
                            12041 ; 8    |// The following naming conventions are followed in this file.
                            12042 ; 9    |// All registers are named using the format...
                            12043 ; 10   |//     HW_<module>_<regname>
                            12044 ; 11   |// where <module> is the module name which can be any of the following...
                            12045 ; 12   |//     USB20
                            12046 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            12047 ; 14   |// module name includes a number starting from 0 for the first instance of
                            12048 ; 15   |// that module)
                            12049 ; 16   |// <regname> is the specific register within that module
                            12050 ; 17   |// We also define the following...
                            12051 ; 18   |//     HW_<module>_<regname>_BITPOS
                            12052 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12053 ; 20   |//     HW_<module>_<regname>_SETMASK
                            12054 ; 21   |// which does something else, and
                            12055 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            12056 ; 23   |// which does something else.
                            12057 ; 24   |// Other rules
                            12058 ; 25   |//     All caps
                            12059 ; 26   |//     Numeric identifiers start at 0
                            12060 ; 27   |
                            12061 ; 28   |#if !(defined(regsusbphyinc))
                            12062 ; 29   |#define regsusbphyinc 1
                            12063 ; 30   |
                            12064 ; 31   |#include "types.h"
                            12065 
                            12067 
                            12068 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12069 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12070 ; 3    |//
                            12071 ; 4    |// Filename: types.h
                            12072 ; 5    |// Description: Standard data types
                            12073 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12074 ; 7    |
                            12075 ; 8    |#ifndef _TYPES_H
                            12076 ; 9    |#define _TYPES_H
                            12077 ; 10   |
                            12078 ; 11   |// TODO:  move this outta here!
                            12079 ; 12   |#if !defined(NOERROR)
                            12080 ; 13   |#define NOERROR 0
                            12081 ; 14   |#define SUCCESS 0
                            12082 ; 15   |#endif 
                            12083 ; 16   |#if !defined(SUCCESS)
                            12084 ; 17   |#define SUCCESS  0
                            12085 ; 18   |#endif
                            12086 ; 19   |#if !defined(ERROR)
                            12087 ; 20   |#define ERROR   -1
                            12088 ; 21   |#endif
                            12089 ; 22   |#if !defined(FALSE)
                            12090 ; 23   |#define FALSE 0
                            12091 ; 24   |#endif
                            12092 ; 25   |#if !defined(TRUE)
                            12093 ; 26   |#define TRUE  1
                            12094 ; 27   |#endif
                            12095 ; 28   |
                            12096 ; 29   |#if !defined(NULL)
                            12097 ; 30   |#define NULL 0
                            12098 ; 31   |#endif
                            12099 ; 32   |
                            12100 ; 33   |#define MAX_INT     0x7FFFFF
                            12101 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12102 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 205

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12103 ; 36   |#define MAX_ULONG   (-1) 
                            12104 ; 37   |
                            12105 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12106 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12107 ; 40   |
                            12108 ; 41   |
                            12109 ; 42   |#define BYTE    unsigned char       // btVarName
                            12110 ; 43   |#define CHAR    signed char         // cVarName
                            12111 ; 44   |#define USHORT  unsigned short      // usVarName
                            12112 ; 45   |#define SHORT   unsigned short      // sVarName
                            12113 ; 46   |#define WORD    unsigned int        // wVarName
                            12114 ; 47   |#define INT     signed int          // iVarName
                            12115 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12116 ; 49   |#define LONG    signed long         // lVarName
                            12117 ; 50   |#define BOOL    unsigned int        // bVarName
                            12118 ; 51   |#define FRACT   _fract              // frVarName
                            12119 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12120 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12121 ; 54   |#define FLOAT   float               // fVarName
                            12122 ; 55   |#define DBL     double              // dVarName
                            12123 ; 56   |#define ENUM    enum                // eVarName
                            12124 ; 57   |#define CMX     _complex            // cmxVarName
                            12125 ; 58   |typedef WORD UCS3;                   // 
                            12126 ; 59   |
                            12127 ; 60   |#define UINT16  unsigned short
                            12128 ; 61   |#define UINT8   unsigned char   
                            12129 ; 62   |#define UINT32  unsigned long
                            12130 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12131 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12132 ; 65   |#define WCHAR   UINT16
                            12133 ; 66   |
                            12134 ; 67   |//UINT128 is 16 bytes or 6 words
                            12135 ; 68   |typedef struct UINT128_3500 {   
                            12136 ; 69   |    int val[6];     
                            12137 ; 70   |} UINT128_3500;
                            12138 ; 71   |
                            12139 ; 72   |#define UINT128   UINT128_3500
                            12140 ; 73   |
                            12141 ; 74   |// Little endian word packed byte strings:   
                            12142 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12143 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12144 ; 77   |// Little endian word packed byte strings:   
                            12145 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12146 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12147 ; 80   |
                            12148 ; 81   |// Declare Memory Spaces To Use When Coding
                            12149 ; 82   |// A. Sector Buffers
                            12150 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12151 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12152 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12153 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12154 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12155 ; 88   |// B. Media DDI Memory
                            12156 ; 89   |#define MEDIA_DDI_MEM _Y
                            12157 ; 90   |
                            12158 ; 91   |
                            12159 ; 92   |
                            12160 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12161 ; 94   |// Examples of circular pointers:
                            12162 ; 95   |//    INT CIRC cpiVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 206

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12163 ; 96   |//    DWORD CIRC cpdwVarName
                            12164 ; 97   |
                            12165 ; 98   |#define RETCODE INT                 // rcVarName
                            12166 ; 99   |
                            12167 ; 100  |// generic bitfield structure
                            12168 ; 101  |struct Bitfield {
                            12169 ; 102  |    unsigned int B0  :1;
                            12170 ; 103  |    unsigned int B1  :1;
                            12171 ; 104  |    unsigned int B2  :1;
                            12172 ; 105  |    unsigned int B3  :1;
                            12173 ; 106  |    unsigned int B4  :1;
                            12174 ; 107  |    unsigned int B5  :1;
                            12175 ; 108  |    unsigned int B6  :1;
                            12176 ; 109  |    unsigned int B7  :1;
                            12177 ; 110  |    unsigned int B8  :1;
                            12178 ; 111  |    unsigned int B9  :1;
                            12179 ; 112  |    unsigned int B10 :1;
                            12180 ; 113  |    unsigned int B11 :1;
                            12181 ; 114  |    unsigned int B12 :1;
                            12182 ; 115  |    unsigned int B13 :1;
                            12183 ; 116  |    unsigned int B14 :1;
                            12184 ; 117  |    unsigned int B15 :1;
                            12185 ; 118  |    unsigned int B16 :1;
                            12186 ; 119  |    unsigned int B17 :1;
                            12187 ; 120  |    unsigned int B18 :1;
                            12188 ; 121  |    unsigned int B19 :1;
                            12189 ; 122  |    unsigned int B20 :1;
                            12190 ; 123  |    unsigned int B21 :1;
                            12191 ; 124  |    unsigned int B22 :1;
                            12192 ; 125  |    unsigned int B23 :1;
                            12193 ; 126  |};
                            12194 ; 127  |
                            12195 ; 128  |union BitInt {
                            12196 ; 129  |        struct Bitfield B;
                            12197 ; 130  |        int        I;
                            12198 ; 131  |};
                            12199 ; 132  |
                            12200 ; 133  |#define MAX_MSG_LENGTH 10
                            12201 ; 134  |struct CMessage
                            12202 ; 135  |{
                            12203 ; 136  |        unsigned int m_uLength;
                            12204 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12205 ; 138  |};
                            12206 ; 139  |
                            12207 ; 140  |typedef struct {
                            12208 ; 141  |    WORD m_wLength;
                            12209 ; 142  |    WORD m_wMessage;
                            12210 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12211 ; 144  |} Message;
                            12212 ; 145  |
                            12213 ; 146  |struct MessageQueueDescriptor
                            12214 ; 147  |{
                            12215 ; 148  |        int *m_pBase;
                            12216 ; 149  |        int m_iModulo;
                            12217 ; 150  |        int m_iSize;
                            12218 ; 151  |        int *m_pHead;
                            12219 ; 152  |        int *m_pTail;
                            12220 ; 153  |};
                            12221 ; 154  |
                            12222 ; 155  |struct ModuleEntry
                            12223 ; 156  |{
                            12224 ; 157  |    int m_iSignaledEventMask;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 207

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12225 ; 158  |    int m_iWaitEventMask;
                            12226 ; 159  |    int m_iResourceOfCode;
                            12227 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12228 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            12229 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12230 ; 163  |    int m_uTimeOutHigh;
                            12231 ; 164  |    int m_uTimeOutLow;
                            12232 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12233 ; 166  |};
                            12234 ; 167  |
                            12235 ; 168  |union WaitMask{
                            12236 ; 169  |    struct B{
                            12237 ; 170  |        unsigned int m_bNone     :1;
                            12238 ; 171  |        unsigned int m_bMessage  :1;
                            12239 ; 172  |        unsigned int m_bTimer    :1;
                            12240 ; 173  |        unsigned int m_bButton   :1;
                            12241 ; 174  |    } B;
                            12242 ; 175  |    int I;
                            12243 ; 176  |} ;
                            12244 ; 177  |
                            12245 ; 178  |
                            12246 ; 179  |struct Button {
                            12247 ; 180  |        WORD wButtonEvent;
                            12248 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12249 ; 182  |};
                            12250 ; 183  |
                            12251 ; 184  |struct Message {
                            12252 ; 185  |        WORD wMsgLength;
                            12253 ; 186  |        WORD wMsgCommand;
                            12254 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12255 ; 188  |};
                            12256 ; 189  |
                            12257 ; 190  |union EventTypes {
                            12258 ; 191  |        struct CMessage msg;
                            12259 ; 192  |        struct Button Button ;
                            12260 ; 193  |        struct Message Message;
                            12261 ; 194  |};
                            12262 ; 195  |
                            12263 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12264 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12265 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12266 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            12267 ; 200  |
                            12268 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12269 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12270 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12271 ; 204  |
                            12272 ; 205  |#if DEBUG
                            12273 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12274 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12275 ; 208  |#else 
                            12276 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            12277 ; 210  |#define DebugBuildAssert(x)    
                            12278 ; 211  |#endif
                            12279 ; 212  |
                            12280 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12281 ; 214  |//  #pragma asm
                            12282 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12283 ; 216  |//  #pragma endasm
                            12284 ; 217  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 208

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12285 ; 218  |
                            12286 ; 219  |#ifdef COLOR_262K
                            12287 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            12288 ; 221  |#elif defined(COLOR_65K)
                            12289 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            12290 ; 223  |#else
                            12291 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            12292 ; 225  |#endif
                            12293 ; 226  |    
                            12294 ; 227  |#endif // #ifndef _TYPES_H
                            12295 
                            12297 
                            12298 ; 32   |
                            12299 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12300 ; 34   |//   USB2.0 PHY STMP Registers 
                            12301 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12302 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            12303 ; 37   |
                            12304 ; 38   |
                            12305 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            12306 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            12307 ; 41   |
                            12308 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            12309 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            12310 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            12311 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            12312 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            12313 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            12314 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            12315 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            12316 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            12317 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            12318 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            12319 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            12320 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            12321 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            12322 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            12323 ; 57   |
                            12324 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            12325 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            12326 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            12327 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            12328 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            12329 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            12330 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            12331 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            12332 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            12333 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            12334 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            12335 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            12336 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            12337 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            12338 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            12339 ; 73   |
                            12340 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            12341 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            12342 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            12343 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            12344 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 209

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12345 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            12346 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            12347 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            12348 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            12349 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            12350 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            12351 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            12352 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            12353 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            12354 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            12355 ; 89   |
                            12356 ; 90   |typedef union               
                            12357 ; 91   |{
                            12358 ; 92   |    struct {
                            12359 ; 93   |        int RSVD0          :5;
                            12360 ; 94   |        int TXDISCON1500   :1;
                            12361 ; 95   |        int PLLVCOPWD      :1;
                            12362 ; 96   |        int PLLVCPPWD      :1;
                            12363 ; 97   |        int RSVD1          :2;
                            12364 ; 98   |        int TXPWDFS        :1;
                            12365 ; 99   |        int TXPWDIBIAS     :1;
                            12366 ; 100  |        int TXPWDV2I       :1;
                            12367 ; 101  |        int TXPWDVBG       :1;
                            12368 ; 102  |        int TXPWDCOMP      :1;
                            12369 ; 103  |        int RSVD2          :1;
                            12370 ; 104  |        int RXPWDDISCONDET :1;
                            12371 ; 105  |        int RXPWDENV       :1;
                            12372 ; 106  |        int RXPWD1PT1      :1;
                            12373 ; 107  |        int RXPWDDIFF      :1;
                            12374 ; 108  |        int RXPWDRX        :1;
                            12375 ; 109  |        int RSVD3          :1;
                            12376 ; 110  |        int PWDIBIAS       :1;
                            12377 ; 111  |        int REGRESET       :1;
                            12378 ; 112  |    } B;
                            12379 ; 113  |    int I;
                            12380 ; 114  |} usbphypwd_type;
                            12381 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                            12382 ; 116  |
                            12383 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12384 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            12385 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            12386 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            12387 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            12388 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            12389 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            12390 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            12391 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            12392 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            12393 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            12394 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            12395 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            12396 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            12397 ; 131  |
                            12398 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            12399 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            12400 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            12401 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            12402 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            12403 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            12404 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            12405 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 210

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12406 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            12407 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            12408 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            12409 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            12410 ; 144  |
                            12411 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                            12412 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                            12413 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                            12414 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                            12415 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                            12416 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
                            12417 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                            12418 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
                            12419 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                            12420 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                            12421 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                            12422 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                            12423 ; 157  |
                            12424 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            12425 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            12426 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            12427 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            12428 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            12429 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            12430 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            12431 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            12432 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            12433 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            12434 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            12435 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            12436 ; 170  |
                            12437 ; 171  |typedef union               
                            12438 ; 172  |{
                            12439 ; 173  |    struct {
                            12440 ; 174  |        int TXCAL1500          :4;
                            12441 ; 175  |        int RSVD0              :1;
                            12442 ; 176  |        int TXENCAL1500        :1;
                            12443 ; 177  |        int TXHSXCVR           :1;
                            12444 ; 178  |        int TXCALIBRATE        :1;
                            12445 ; 179  |        int TXCAL45DN          :4;
                            12446 ; 180  |        int RSVD1              :1;
                            12447 ; 181  |        int TXENCAL45DN        :1;
                            12448 ; 182  |        int TXHSTERM           :1;
                            12449 ; 183  |        int TXSKEW             :1;
                            12450 ; 184  |        int TXCAL45DP          :4;
                            12451 ; 185  |        int RSVD2              :1;
                            12452 ; 186  |        int TXENCAL45DP        :1;
                            12453 ; 187  |        int TXFSHIZ            :1;
                            12454 ; 188  |        int TXCOMPOUT          :1;
                            12455 ; 189  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 211

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12456 ; 190  |    int I;
                            12457 ; 191  |} usbphytx_type;
                            12458 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            12459 ; 193  |
                            12460 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            12461 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            12462 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            12463 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            12464 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            12465 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            12466 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            12467 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            12468 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            12469 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            12470 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            12471 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            12472 ; 206  |
                            12473 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            12474 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            12475 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            12476 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
                            12477 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            12478 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            12479 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            12480 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            12481 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            12482 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            12483 ; 217  |
                            12484 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                            12485 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                            12486 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                            12487 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                            12488 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                            12489 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                            12490 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                            12491 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            12492 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                            12493 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            12494 ; 228  |
                            12495 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            12496 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            12497 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            12498 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            12499 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            12500 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            12501 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            12502 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            12503 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            12504 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            12505 ; 239  |
                            12506 ; 240  |typedef union               
                            12507 ; 241  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 212

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12508 ; 242  |    struct {
                            12509 ; 243  |        int PLLV2ISEL        :4;
                            12510 ; 244  |        int RSVD0            :1;
                            12511 ; 245  |        int PLLCPDBLIP       :1;
                            12512 ; 246  |        int PLLVCOCLK2       :1;
                            12513 ; 247  |        int PLLVCOCLK24      :1;
                            12514 ; 248  |        int PLLCPNSEL        :4;
                            12515 ; 249  |        int PLLCLKDIVSEL     :4;
                            12516 ; 250  |        int RSVD1            :4;
                            12517 ; 251  |        int PLLPFDRST        :1;
                            12518 ; 252  |        int PLLCPSHORTLFR    :1;
                            12519 ; 253  |        int PLLVCOKSTART     :1;
                            12520 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            12521 ; 255  |    } B;
                            12522 ; 256  |    int I;
                            12523 ; 257  |} usbphypll_type;
                            12524 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            12525 ; 259  |
                            12526 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            12527 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            12528 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
                            12529 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            12530 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            12531 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            12532 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            12533 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            12534 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            12535 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            12536 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            12537 ; 271  |
                            12538 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            12539 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            12540 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            12541 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            12542 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            12543 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            12544 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            12545 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            12546 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            12547 ; 281  |
                            12548 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            12549 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                            12550 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                            12551 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                            12552 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                            12553 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            12554 ; 288  |//              480Mhz/7 =68.57Mhz
                            12555 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            12556 ; 290  |
                            12557 ; 291  |//              480Mhz/8 ~60Mhz
                            12558 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            12559 ; 293  |
                            12560 ; 294  |//              480Mhz/9 =53.3Mhz
                            12561 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            12562 ; 296  |
                            12563 ; 297  |//              480Mhz/10 =48Mhz
                            12564 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 213

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12565 ; 299  |
                            12566 ; 300  |
                            12567 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                            12568 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                            12569 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                            12570 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                            12571 ; 305  |
                            12572 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            12573 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            12574 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            12575 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            12576 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            12577 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            12578 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            12579 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            12580 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            12581 ; 315  |
                            12582 ; 316  |typedef union               
                            12583 ; 317  |{
                            12584 ; 318  |    struct {
                            12585 ; 319  |     int ENVADJ               :4;
                            12586 ; 320  |     int DISCONADJ            :4;
                            12587 ; 321  |     int DEBUGMODE            :4;
                            12588 ; 322  |     int PLLLKTIMECTL         :4;
                            12589 ; 323  |     int PLLCKDIVCTL          :4;
                            12590 ; 324  |     int HOSTMODETEST         :1;
                            12591 ; 325  |     int FSCKSOURCESEL        :1;
                            12592 ; 326  |     int REGRXDBYPASS         :1;
                            12593 ; 327  |     int PLLLOCKED            :1;
                            12594 ; 328  |    } B;
                            12595 ; 329  |    int I;
                            12596 ; 330  |} usbphyrx_type;
                            12597 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            12598 ; 332  |
                            12599 ; 333  |#endif
                            12600 ; 334  |
                            12601 
                            12603 
                            12604 ; 38   |
                            12605 ; 39   |
                            12606 ; 40   |#endif // if (!@def(hwequ))
                            12607 ; 41   |
                            12608 
                            12610 
                            12611 ; 12   |#else 
                            12612 ; 13   |//include "regscodec.inc"
                            12613 ; 14   |#endif
                            12614 ; 15   |
                            12615 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            12616 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            12617 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            12618 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            12619 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 214

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12620 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            12621 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            12622 ; 23   |
                            12623 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            12624 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            12625 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            12626 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            12627 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            12628 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            12629 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            12630 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                            12631 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            12632 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            12633 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            12634 ; 35   |
                            12635 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            12636 ; 37   |// MEDIA DEFINITIONS
                            12637 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            12638 ; 39   |
                            12639 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            12640 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            12641 ; 42   |#if defined(NAND1)
                            12642 ; 43   |#define SM_INTERNAL_CHIPS 1
                            12643 ; 44   |#else 
                            12644 ; 45   |#if defined(NAND2)
                            12645 ; 46   |#define SM_INTERNAL_CHIPS 2
                            12646 ; 47   |#else 
                            12647 ; 48   |#if defined(NAND3)
                            12648 ; 49   |#define SM_INTERNAL_CHIPS 3
                            12649 ; 50   |#else 
                            12650 ; 51   |#if defined(NAND4)
                            12651 ; 52   |#define SM_INTERNAL_CHIPS 4
                            12652 ; 53   |#else 
                            12653 ; 54   |#define SM_INTERNAL_CHIPS 1
                            12654 ; 55   |#endif
                            12655 ; 56   |#endif
                            12656 ; 57   |#endif
                            12657 ; 58   |#endif
                            12658 ; 59   |
                            12659 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            12660 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            12661 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            12662 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            12663 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            12664 ; 65   |//*** comment out if active high ****
                            12665 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            12666 ; 67   |
                            12667 ; 68   |#if defined(SMEDIA)
                            12668 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            12669 ; 70   |#define NUM_SM_EXTERNAL 1
                            12670 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12671 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            12672 ; 73   |#else 
                            12673 ; 74   |#if defined(MMC)
                            12674 ; 75   |#define NUM_REMOVABLE_MEDIA 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 215

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12675 ; 76   |#define NUM_SM_EXTERNAL 0
                            12676 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            12677 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            12678 ; 79   |#else 
                            12679 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            12680 ; 81   |#define NUM_SM_EXTERNAL 0
                            12681 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            12682 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            12683 ; 84   |#endif
                            12684 ; 85   |#endif
                            12685 ; 86   |
                            12686 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            12687 ; 88   |// Mass Storage Class definitions
                            12688 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            12689 ; 90   |// Set to 0 if Composite Device build is desired.    
                            12690 ; 91   |#define MULTI_LUN_BUILD 1   
                            12691 ; 92   |
                            12692 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            12693 ; 94   |//  SCSI
                            12694 ; 95   |#if (MULTI_LUN_BUILD==0)
                            12695 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12696 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            12697 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12698 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            12699 ; 100  |  #else
                            12700 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            12701 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            12702 ; 103  |  #endif
                            12703 ; 104  |#else
                            12704 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            12705 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            12706 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            12707 ; 108  |  #else
                            12708 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            12709 ; 110  |  #endif
                            12710 ; 111  |#endif
                            12711 ; 112  |
                            12712 ; 113  |
                            12713 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            12714 ; 115  |
                            12715 ; 116  |
                            12716 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            12717 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            12718 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            12719 ; 120  |#ifdef MMC
                            12720 ; 121  |#ifdef MTP_BUILD
                            12721 ; 122  |// --------------------
                            12722 ; 123  |// MTP and MMC
                            12723 ; 124  |// --------------------
                            12724 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            12725 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            12726 ; 127  |#else  // ifndef MTP_BUILD
                            12727 ; 128  |#ifdef STMP_BUILD_PLAYER
                            12728 ; 129  |// --------------------
                            12729 ; 130  |// Player and MMC
                            12730 ; 131  |// --------------------
                            12731 ; 132  |#else
                            12732 ; 133  |// --------------------
                            12733 ; 134  |// USBMSC and MMC
                            12734 ; 135  |// --------------------
                            12735 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            12736 ; 137  |#define NUM_LOGICAL_DRIVES      8
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 216

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12737 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            12738 ; 139  |#endif // ifdef MTP_BUILD
                            12739 ; 140  |#else  // ifndef MMC
                            12740 ; 141  |#ifdef MTP_BUILD
                            12741 ; 142  |// --------------------
                            12742 ; 143  |// MTP and NAND only
                            12743 ; 144  |// --------------------
                            12744 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            12745 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            12746 ; 147  |#else  // ifndef MTP_BUILD
                            12747 ; 148  |#ifdef STMP_BUILD_PLAYER
                            12748 ; 149  |// --------------------
                            12749 ; 150  |// Player and NAND only
                            12750 ; 151  |// --------------------
                            12751 ; 152  |#else
                            12752 ; 153  |// --------------------
                            12753 ; 154  |// USBMSC and NAND only
                            12754 ; 155  |// --------------------
                            12755 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            12756 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            12757 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            12758 ; 159  |#endif // ifdef MTP_BUILD
                            12759 ; 160  |#endif // ifdef MMC 
                            12760 ; 161  |
                            12761 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            12762 ; 163  |#if (defined(MTP_BUILD))
                            12763 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            12764 ; 165  |
                            12765 ; 166  |////!
                            12766 ; 167  |////! This varible holds the watchdog count for the store flush.
                            12767 ; 168  |////!
                            12768 ; 169  |///
                            12769 ; 170  |#include <types.h>
                            12770 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            12771 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            12772 ; 173  |#endif
                            12773 ; 174  |
                            12774 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            12775 ; 176  |// These are needed here for Mass Storage Class
                            12776 ; 177  |// Needs to be cleaned up
                            12777 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            12778 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            12779 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            12780 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            12781 ; 182  |
                            12782 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            12783 ; 184  |
                            12784 ; 185  |#endif
                            12785 ; 186  |
                            12786 ; 187  |
                            12787 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            12788 ; 189  |// SmartMedia/NAND defs
                            12789 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12790 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            12791 ; 192  |
                            12792 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            12793 ; 194  |// Sysloadresources defs
                            12794 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            12795 ; 196  |
                            12796 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            12797 ; 198  |// MMC defs
                            12798 ; 199  |#define MMC_MAX_PARTITIONS 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 217

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12799 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            12800 ; 201  |
                            12801 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            12802 ; 203  |// SPI defs
                            12803 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            12804 ; 205  |
                            12805 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            12806 ; 207  |// Global media defs
                            12807 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            12808 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            12809 ; 210  |
                            12810 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            12811 ; 212  |// DO NOT CHANGE THESE!!!
                            12812 ; 213  |#define SM_MAX_PARTITIONS 4
                            12813 ; 214  |#define MAX_HANDLES 2
                            12814 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            12815 ; 216  |
                            12816 ; 217  |
                            12817 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            12818 ; 219  |// Battery LRADC Values 
                            12819 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            12820 ; 221  |// brownout trip point in mV (moved by RS)
                            12821 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            12822 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            12823 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            12824 ; 225  |//     audio recording to media.
                            12825 ; 226  |#define BATT_SAFETY_MARGIN 10
                            12826 ; 227  |
                            12827 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            12828 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            12829 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            12830 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            12831 ; 232  |
                            12832 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            12833 ; 234  |
                            12834 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            12835 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            12836 ; 237  |#if (!defined(CLCD))
                            12837 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            12838 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            12839 ; 240  |#else 
                            12840 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            12841 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            12842 ; 243  |#endif
                            12843 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            12844 ; 245  |
                            12845 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            12846 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            12847 ; 248  |// See mp3 encoder overlay.
                            12848 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            12849 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            12850 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            12851 ; 252  |
                            12852 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            12853 ; 254  |// Voice recording filenames
                            12854 ; 255  |// number of digits in filename Vxxx.wav
                            12855 ; 256  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 218

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12856 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            12857 ; 258  |
                            12858 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            12859 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            12860 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            12861 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            12862 ; 263  |#if defined(DEVICE_3500)
                            12863 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            12864 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            12865 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            12866 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            12867 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12868 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            12869 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            12870 ; 271  |
                            12871 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            12872 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            12873 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                            12874 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            12875 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            12876 ; 277  |
                            12877 ; 278  |#else 
                            12878 ; 279  |// STMP3410
                            12879 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            12880 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            12881 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            12882 ; 283  |#endif
                            12883 ; 284  |
                            12884 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            12885 ; 286  |// Number of available soft timers
                            12886 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            12887 ; 288  |#if defined(SYNC_LYRICS)
                            12888 ; 289  |#define SOFT_TIMERS 10
                            12889 ; 290  |#else 
                            12890 ; 291  |#if defined(JPEG_DECODER)
                            12891 ; 292  |#define SOFT_TIMERS 10
                            12892 ; 293  |#else 
                            12893 ; 294  |#define SOFT_TIMERS 9
                            12894 ; 295  |#endif
                            12895 ; 296  |#endif
                            12896 ; 297  |
                            12897 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            12898 ; 299  |//  sizes
                            12899 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            12900 ; 301  |#if defined(MMC)
                            12901 ; 302  |#if defined(USE_PLAYLIST5)
                            12902 ; 303  |#define MENU_STACK_SIZE 1500
                            12903 ; 304  |#else 
                            12904 ; 305  |#define MENU_STACK_SIZE 1250
                            12905 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            12906 ; 307  |#else 
                            12907 ; 308  |#if defined(USE_PLAYLIST5)
                            12908 ; 309  |#define MENU_STACK_SIZE 1500
                            12909 ; 310  |#else 
                            12910 ; 311  |#define MENU_STACK_SIZE 1250
                            12911 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            12912 ; 313  |#endif //if @def('MMC')
                            12913 ; 314  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 219

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12914 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            12915 ; 316  |// 
                            12916 ; 317  |#define STACK_L1_SIZE 750
                            12917 ; 318  |#define STACK_L2_SIZE 100
                            12918 ; 319  |#define STACK_L3_SIZE 160
                            12919 ; 320  |
                            12920 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            12921 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            12922 ; 323  |// is ok with switching code.
                            12923 ; 324  |#if defined(MTP_BUILD)
                            12924 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            12925 ; 326  |#endif
                            12926 ; 327  |
                            12927 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            12928 ; 329  |// maximum number of nested funclets 
                            12929 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            12930 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            12931 ; 332  |
                            12932 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            12933 ; 334  |//    LCD DEFINITIONS
                            12934 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            12935 ; 336  |
                            12936 ; 337  |#define SPACE_CHAR 0x000020          
                            12937 ; 338  |#define ZERO_CHAR 0x000030
                            12938 ; 339  |#define COLON_CHAR 0x00003A
                            12939 ; 340  |#define PERIOD_CHAR 0x00002E
                            12940 ; 341  |
                            12941 ; 342  |#if (defined(S6B33B0A_LCD))
                            12942 ; 343  |#define LCD_X_SIZE 128
                            12943 ; 344  |#define LCD_Y_SIZE 159
                            12944 ; 345  |#endif
                            12945 ; 346  |
                            12946 ; 347  |#if (defined(SED15XX_LCD))
                            12947 ; 348  |#define LCD_X_SIZE 128
                            12948 ; 349  |#define LCD_Y_SIZE 64
                            12949 ; 350  |#endif
                            12950 ; 351  |
                            12951 ; 352  |
                            12952 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            12953 ; 354  |//   Details on Customizing Contrast
                            12954 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            12955 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            12956 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            12957 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            12958 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            12959 ; 360  |//   unless the ezact sequence is remembered.
                            12960 ; 361  |//   To find out what range your player supports: 
                            12961 ; 362  |//   change these equs to full range or comment out (full range is default)
                            12962 ; 363  |//;;;;;;
                            12963 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            12964 ; 365  |// recommended calibration using player -- uncomment 
                            12965 ; 366  |//;;;;;;
                            12966 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            12967 ; 368  |////////////////////////////
                            12968 ; 369  |#if (defined(DEMO_HW))
                            12969 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            12970 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            12971 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            12972 ; 373  |#else 
                            12973 ; 374  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 220

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12974 ; 375  |#if (defined(S6B33B0A_LCD))
                            12975 ; 376  |#define LCD_MAX_CONTRAST 210
                            12976 ; 377  |#define LCD_MIN_CONTRAST 160    
                            12977 ; 378  |#endif
                            12978 ; 379  |
                            12979 ; 380  |#if (defined(SED15XX_LCD))
                            12980 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            12981 ; 382  |// Engineering board regs support range [17-37].
                            12982 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            12983 ; 384  |//   One default contrast range [24-42] works for both.
                            12984 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            12985 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            12986 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            12987 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            12988 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            12989 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            12990 ; 391  |
                            12991 ; 392  |#if (defined(NEWSHINGYIH))
                            12992 ; 393  |#define LCD_MAX_CONTRAST 250
                            12993 ; 394  |#define LCD_MIN_CONTRAST 0
                            12994 ; 395  |#else 
                            12995 ; 396  |//-----
                            12996 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            12997 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            12998 ; 399  |#define LCD_MAX_CONTRAST 250
                            12999 ; 400  |#define LCD_MIN_CONTRAST 0
                            13000 ; 401  |
                            13001 ; 402  |//=====
                            13002 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            13003 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            13004 ; 405  |//LCD_MAX_CONTRAST equ 42
                            13005 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            13006 ; 407  |
                            13007 ; 408  |#endif
                            13008 ; 409  |#endif
                            13009 ; 410  |
                            13010 ; 411  |#endif
                            13011 ; 412  |
                            13012 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            13013 ; 414  |// The default value of the lcd contrast in % of range
                            13014 ; 415  |//   the default value is used when no settings.dat is available
                            13015 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            13016 ; 417  |
                            13017 ; 418  |#if (defined(S6B33B0A_LCD))
                            13018 ; 419  |// 60% of range is default value
                            13019 ; 420  |#define DEFAULT_CONTRAST 50 
                            13020 ; 421  |#endif
                            13021 ; 422  |
                            13022 ; 423  |#if (defined(SED15XX_LCD))
                            13023 ; 424  |// % of range is default value (was 60%)
                            13024 ; 425  |#define DEFAULT_CONTRAST 50 
                            13025 ; 426  |#endif
                            13026 ; 427  |
                            13027 ; 428  |
                            13028 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            13029 ; 430  |// make lower when doing calibration
                            13030 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            13031 ; 432  |
                            13032 ; 433  |
                            13033 ; 434  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 221

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13034 ; 435  |// For FFWD and RWND
                            13035 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            13036 ; 437  |#define SECONDS_TO_SKIP 1
                            13037 ; 438  |#define SECONDS_TO_SKIP1 3
                            13038 ; 439  |#define SECONDS_TO_SKIP2 6
                            13039 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            13040 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            13041 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13042 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            13043 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13044 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            13045 ; 446  |
                            13046 ; 447  |// For audible FFW/RWD
                            13047 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            13048 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            13049 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            13050 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            13051 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13052 ; 453  |#define LEVEL1_BOUNDARY 17 
                            13053 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13054 ; 455  |#define LEVEL2_BOUNDARY 33 
                            13055 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13056 ; 457  |#define LEVEL3_BOUNDARY 50 
                            13057 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            13058 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            13059 ; 460  |// Short Song Time, songs too short to play.
                            13060 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            13061 ; 462  |
                            13062 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            13063 ; 464  |// MP3 Sync Values
                            13064 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            13065 ; 466  |// # bytes to look for sync before marking it bad
                            13066 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            13067 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            13068 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            13069 ; 470  |// once we have sync'd, the isr should be called this frequently
                            13070 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            13071 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            13072 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            13073 ; 474  |
                            13074 ; 475  |
                            13075 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            13076 ; 477  |//// Multi-Stage Volume Control Definitions
                            13077 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            13078 ; 479  |//// Use Multi-Stage Volume
                            13079 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            13080 ; 481  |
                            13081 ; 482  |//// Master Volume definitions
                            13082 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            13083 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            13084 ; 485  |
                            13085 ; 486  |//// DAC-Mode definitions
                            13086 ; 487  |//// Adjusts 0dB point
                            13087 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            13088 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            13089 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            13090 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            13091 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            13092 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 222

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13093 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            13094 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            13095 ; 496  |
                            13096 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            13097 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            13098 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            13099 ; 500  |
                            13100 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            13101 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            13102 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            13103 ; 504  |
                            13104 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            13105 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            13106 ; 507  |
                            13107 ; 508  |
                            13108 ; 509  |//// Line In definitions (used for Line-In 1)
                            13109 ; 510  |//// 0dB point of the Line In
                            13110 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            13111 ; 512  |//// Minimum volume of Line In
                            13112 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            13113 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            13114 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            13115 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            13116 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            13117 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            13118 ; 519  |
                            13119 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            13120 ; 521  |//// 0dB point of the Line In
                            13121 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            13122 ; 523  |//// Minimum volume of Line In
                            13123 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            13124 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            13125 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            13126 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            13127 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            13128 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            13129 ; 530  |
                            13130 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            13131 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            13132 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            13133 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            13134 ; 535  |
                            13135 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            13136 ; 537  |////
                            13137 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            13138 ; 539  |////
                            13139 ; 540  |///
                            13140 ; 541  |#include <types.h>
                            13141 ; 542  |extern volatile WORD g_wActivityState;
                            13142 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            13143 ; 544  |
                            13144 ; 545  |void _reentrant Init5VSense(void);
                            13145 ; 546  |void _reentrant ServiceDCDC(void);
                            13146 ; 547  |
                            13147 ; 548  |////////////////////////////////////////////////////////////////////////////
                            13148 ; 549  |//// JPEG Thumbnail Mode Setting
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 223

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13149 ; 550  |//// number of column in thumbnail mode
                            13150 ; 551  |#define THUMBNAIL_X 2           
                            13151 ; 552  |//// number of row in  thumbnail mode
                            13152 ; 553  |#define THUMBNAIL_Y 2           
                            13153 ; 554  |//// thumbnail boundary offset x
                            13154 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            13155 ; 556  |//// thumbnail boundary offset y
                            13156 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            13157 ; 558  |
                            13158 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            13159 ; 560  |
                            13160 
                            13162 
                            13163 ; 23   |
                            13164 ; 24   |#define MAX_BITMAP_SIZE 10000
                            13165 ; 25   |
                            13166 ; 26   |//comment this out to put the frame buffer in Y
                            13167 ; 27   |
                            13168 ; 28   |#ifndef LCD_X_SIZE     
                            13169 ; 29   |#define LCD_X_SIZE          98
                            13170 ; 30   |#endif
                            13171 ; 31   |
                            13172 ; 32   |#ifndef LCD_Y_SIZE
                            13173 ; 33   |#define LCD_Y_SIZE          64
                            13174 ; 34   |#endif
                            13175 ; 35   |
                            13176 ; 36   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                            13177 ; 37   |
                            13178 ; 38   |typedef union
                            13179 ; 39   |{
                            13180 ; 40   |    struct
                            13181 ; 41   |    {
                            13182 ; 42   |        INT m_Resource:21;
                            13183 ; 43   |        INT m_Type :3;
                            13184 ; 44   |    } Complex;
                            13185 ; 45   |    WORD I;
                            13186 ; 46   |} COMPLEX_RESOURCE;
                            13187 ; 47   |
                            13188 ; 48   |#define RESOURCE_TYPE_SIMPLE    0
                            13189 ; 49   |#define RESOURCE_TYPE_NESTED    1
                            13190 ; 50   |#define RESOURCE_TYPE_UNICODE   2
                            13191 ; 51   |
                            13192 ; 52   |
                            13193 ; 53   |typedef struct 
                            13194 ; 54   |{
                            13195 ; 55   |    INT m_iMaskLeft;
                            13196 ; 56   |    INT m_iMaskTop;
                            13197 ; 57   |    INT m_iMaskRight;
                            13198 ; 58   |    INT m_iMaskBottom;
                            13199 ; 59   |}   MASK;
                            13200 ; 60   |
                            13201 ; 61   |typedef struct 
                            13202 ; 62   |{
                            13203 ; 63   |    INT m_iWidth;
                            13204 ; 64   |    INT m_iHeight;
                            13205 ; 65   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                            13206 ; 66   |} BITMAP;
                            13207 ; 67   |
                            13208 ; 68   |
                            13209 ; 69   |typedef struct 
                            13210 ; 70   |{
                            13211 ; 71   |    INT m_iWidth;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 224

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13212 ; 72   |    INT m_iHeight;
                            13213 ; 73   |} BITMAPHEADER;
                            13214 ; 74   |
                            13215 ; 75   |#define DISPLAY_NORMAL  0
                            13216 ; 76   |#define DISPLAY_INVERT  1
                            13217 ; 77   |#define DISPLAY_CLEAR   2 
                            13218 ; 78   |
                            13219 ; 79   |void _reentrant DisplayInit(void);
                            13220 
                            13227 
                            13228 ; 80   |
                            13229 ; 81   |
                            13230 ; 82   |_reentrant void DisplayHandleMessage(Message *);
                            13231 ; 83   |
                            13232 ; 84   |_reentrant void DisplayUpdateDisplay(void);
                            13233 ; 85   |
                            13234 ; 86   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                            13235 ; 87   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            13236 ; 88   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            13237 ; 89   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                            13238 ; 90   |_reentrant void DisplaySetFont(INT);
                            13239 ; 91   |_reentrant void DisplayPrintBitmapAddress(INT x,INT y,BITMAP *pBitmap,INT bInvert);
                            13240 
                            13247 
                            13248 ; 92   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInver
                                  t);
                            13249 ; 93   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert
                                  );
                            13250 ; 94   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFill
                                  er    ,INT bInvert);
                            13251 ; 95   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds             
                                        ,INT bInvert);
                            13252 ; 96   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeco
                                  nds   ,INT bInvert);
                            13253 ; 97   |_reentrant void DisplaySetFont(INT iFont);
                            13254 ; 98   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                            13255 ; 99   |
                            13256 ; 100  |
                            13257 ; 101  |#endif
                            13258 
                            13260 
                            13261 ; 10   |#include "unicode.h"
                            13262 
                            13264 
                            13265 ; 1    |#ifndef UNICODE_H
                            13266 ; 2    |#define UNICODE_H
                            13267 ; 3    |
                            13268 ; 4    |//#include "displaydrv.h"
                            13269 ; 5    |
                            13270 ; 6    |// Exported functions
                            13271 ; 7    |_reentrant BITMAP *  GetUnicodeCharacterBitmap(WORD c) ;
                            13272 ; 8    |
                            13273 ; 9    |void _reentrant CLcdPrintStringAddress(WORD x, WORD y, WORD *string, WORD bInverted);
                            13274 ; 10   |#ifndef USBMSC_BUILD
                            13275 ; 11   |void _reentrant LCDSetFont(WORD fontNum);
                            13276 ; 12   |#else
                            13277 ; 13   |void LCDSetFont(WORD fontNum);
                            13278 ; 14   |#endif
                            13279 ; 15   |
                            13280 ; 16   |#endif
                            13281 
                            13283 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 225

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13284 ; 11   |#include "resource.h"
                            13285 
                            13287 
                            13288 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                            13289 ; 2    |//  Do not edit it directly.
                            13290 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                            13291 ; 4    |
                            13292 ; 5    |
                            13293 ; 6    |
                            13294 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                            13295 ; 8    |//  Do not edit it directly.
                            13296 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                            13297 ; 10   |
                            13298 ; 11   |
                            13299 ; 12   |
                            13300 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13301 ; 14   |//  Do not edit it directly.
                            13302 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                            13303 ; 16   |
                            13304 ; 17   |
                            13305 ; 18   |
                            13306 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13307 ; 20   |//  Do not edit it directly.
                            13308 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                            13309 ; 22   |
                            13310 ; 23   |
                            13311 ; 24   |
                            13312 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13313 ; 26   |//  Do not edit it directly.
                            13314 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                            13315 ; 28   |
                            13316 ; 29   |
                            13317 ; 30   |
                            13318 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13319 ; 32   |//  Do not edit it directly.
                            13320 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                            13321 ; 34   |
                            13322 ; 35   |
                            13323 ; 36   |
                            13324 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13325 ; 38   |//  Do not edit it directly.
                            13326 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                            13327 ; 40   |
                            13328 ; 41   |
                            13329 ; 42   |
                            13330 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13331 ; 44   |//  Do not edit it directly.
                            13332 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
                            13333 ; 46   |
                            13334 ; 47   |
                            13335 ; 48   |
                            13336 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13337 ; 50   |//  Do not edit it directly.
                            13338 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                            13339 ; 52   |
                            13340 ; 53   |
                            13341 ; 54   |
                            13342 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13343 ; 56   |//  Do not edit it directly.
                            13344 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                            13345 ; 58   |
                            13346 ; 59   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 226

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13347 ; 60   |
                            13348 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13349 ; 62   |//  Do not edit it directly.
                            13350 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                            13351 ; 64   |
                            13352 ; 65   |
                            13353 ; 66   |
                            13354 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13355 ; 68   |//  Do not edit it directly.
                            13356 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
                            13357 ; 70   |
                            13358 ; 71   |
                            13359 ; 72   |
                            13360 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13361 ; 74   |//  Do not edit it directly.
                            13362 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                            13363 ; 76   |
                            13364 ; 77   |
                            13365 ; 78   |
                            13366 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13367 ; 80   |//  Do not edit it directly.
                            13368 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                            13369 ; 82   |
                            13370 ; 83   |
                            13371 ; 84   |
                            13372 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13373 ; 86   |//  Do not edit it directly.
                            13374 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                            13375 ; 88   |
                            13376 ; 89   |
                            13377 ; 90   |
                            13378 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13379 ; 92   |//  Do not edit it directly.
                            13380 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                            13381 ; 94   |
                            13382 ; 95   |
                            13383 ; 96   |
                            13384 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13385 ; 98   |//  Do not edit it directly.
                            13386 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                            13387 ; 100  |
                            13388 ; 101  |
                            13389 ; 102  |
                            13390 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13391 ; 104  |//  Do not edit it directly.
                            13392 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                            13393 ; 106  |
                            13394 ; 107  |
                            13395 ; 108  |
                            13396 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13397 ; 110  |//  Do not edit it directly.
                            13398 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                            13399 ; 112  |
                            13400 ; 113  |
                            13401 ; 114  |
                            13402 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13403 ; 116  |//  Do not edit it directly.
                            13404 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                            13405 ; 118  |
                            13406 ; 119  |
                            13407 ; 120  |
                            13408 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 227

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13409 ; 122  |//  Do not edit it directly.
                            13410 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                            13411 ; 124  |
                            13412 ; 125  |
                            13413 ; 126  |
                            13414 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                            13415 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                            13416 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
                            13417 ; 130  |// LCD example resource listing
                            13418 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                            13419 ; 132  |
                            13420 ; 133  |#if (!defined(resources))
                            13421 ; 134  |#define resources 1
                            13422 ; 135  |
                            13423 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                            13424 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                            13425 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            13426 ; 139  |
                            13427 ; 140  |#define VERSION_MAJOR 3
                            13428 ; 141  |#define VERSION_MIDDLE 200
                            13429 ; 142  |#define VERSION_MINOR 910
                            13430 ; 143  |
                            13431 ; 144  |#define LCD_SEG_OFFSET 0x000000
                            13432 ; 145  |#define NUMBER_OF_PRESETS 10
                            13433 ; 146  |
                            13434 ; 147  |
                            13435 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            13436 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
                            13437 ; 150  |//  the resource index cache if it was added.
                            13438 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                            13439 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            13440 ; 153  |
                            13441 ; 154  |//$FILENAME searchdirectory.src
                            13442 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                            13443 ; 156  |//$FILENAME shortdirmatch.src
                            13444 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                            13445 ; 158  |//$FILENAME fopen.src
                            13446 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                            13447 ; 160  |//$FILENAME musicmenu.src
                            13448 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                            13449 ; 162  |//$FILENAME changepath.src
                            13450 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                            13451 ; 164  |//$FILENAME _openandverifyslot.src
                            13452 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                            13453 ; 166  |//$FILENAME _loadslot.src
                            13454 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                            13455 ; 168  |//$FILENAME getname.src
                            13456 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
                            13457 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                            13458 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                            13459 ; 172  |//$FILENAME sethandleforsearch.src
                            13460 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                            13461 ; 174  |//$FILENAME wmaWrap.src
                            13462 ; 175  |#define RSRC_WMADEC_CODE 11    
                            13463 ; 176  |//$FILENAME extractfilename.src
                            13464 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                            13465 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                            13466 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                            13467 ; 180  |//$FILENAME SoftTimerMod.src
                            13468 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                            13469 ; 182  |//$FILENAME GetShortfilename.src
                            13470 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 228

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13471 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
                            13472 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                            13473 ; 186  |//$FILENAME playerstatemachine.src
                            13474 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                            13475 ; 188  |//$FILENAME SysMod.src
                            13476 ; 189  |#define RSRC_SYSMOD_CODE 18    
                            13477 ; 190  |//$FILENAME drm_b64_decodew.src
                            13478 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
                            13479 ; 192  |//$FILENAME discardtrailigperiods.src
                            13480 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
                            13481 ; 194  |//$FILENAME uppercase.src
                            13482 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                            13483 ; 196  |//$FILENAME strlength.src
                            13484 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                            13485 ; 198  |//$FILENAME ConverToShortname.src
                            13486 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                            13487 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                            13488 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                            13489 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                            13490 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                            13491 ; 204  |//$FILENAME drm_sst_closekey.src
                            13492 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                            13493 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                            13494 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                            13495 ; 208  |//$FILENAME freehandle.src
                            13496 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                            13497 ; 210  |//$FILENAME searchfreehandleallocate.src
                            13498 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                            13499 ; 212  |//$FILENAME _parselicenseattributes.src
                            13500 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                            13501 ; 214  |//$FILENAME variablesecstategetorset.src
                            13502 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                            13503 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                            13504 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                            13505 ; 218  |//$FILENAME drm_mgr_initialize.src
                            13506 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                            13507 ; 220  |//$FILENAME display.src
                            13508 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                            13509 ; 222  |//$FILENAME DisplayModule.src
                            13510 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                            13511 ; 224  |//$FILENAME extractpath.src
                            13512 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                            13513 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                            13514 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                            13515 ; 228  |//$FILENAME _getprivatekey.src
                            13516 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                            13517 ; 230  |//$FILENAME drm_hds_opennamespace.src
                            13518 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
                            13519 ; 232  |//$FILENAME drm_hds_openslot.src
                            13520 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                            13521 ; 234  |//$FILENAME fclose.src
                            13522 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                            13523 ; 236  |//$FILENAME drm_cphr_init.src
                            13524 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                            13525 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                            13526 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                            13527 ; 240  |//$FILENAME drm_mgr_bind.src
                            13528 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                            13529 ; 242  |//$FILENAME _decryptcontentkey.src
                            13530 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                            13531 ; 244  |//$FILENAME drm_mac_inv32.src
                            13532 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 229

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13533 ; 246  |//$FILENAME drm_lic_getattribute.src
                            13534 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                            13535 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                            13536 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                            13537 ; 250  |//$FILENAME drm_dcp_getattribute.src
                            13538 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                            13539 ; 252  |//$FILENAME effectsmodules.src
                            13540 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
                            13541 ; 254  |//$FILENAME janusx.src
                            13542 ; 255  |#define RSRC_JANUSX_CODE 51    
                            13543 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                            13544 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                            13545 ; 258  |//$FILENAME eval.src
                            13546 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                            13547 ; 260  |//$FILENAME _verifyslothash.src
                            13548 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                            13549 ; 262  |//$FILENAME januscommon.src
                            13550 ; 263  |#define RSRC_JANUS_COMMON 55    
                            13551 ; 264  |//$FILENAME changecase.src
                            13552 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                            13553 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                            13554 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                            13555 ; 268  |//$FILENAME _loadlicenseattributes.src
                            13556 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                            13557 ; 270  |//$FILENAME drm_hds_slotseek.src
                            13558 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                            13559 ; 272  |//$FILENAME drm_hds_slotwrite.src
                            13560 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                            13561 ; 274  |//$FILENAME drm_levl_performoperations.src
                            13562 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                            13563 ; 276  |//$FILENAME drm_lic_verifysignature.src
                            13564 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                            13565 ; 278  |//$FILENAME drm_lst_getlicense.src
                            13566 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                            13567 ; 280  |//$FILENAME drm_utl_numbertostring.src
                            13568 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                            13569 ; 282  |//$FILENAME oem_writefile.src
                            13570 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                            13571 ; 284  |//$FILENAME drm_sst_getdata.src
                            13572 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                            13573 ; 286  |//$FILENAME updatehandlemode.src
                            13574 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
                            13575 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                            13576 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                            13577 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                            13578 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                            13579 ; 292  |//$FILENAME doplay_p.src
                            13580 ; 293  |#define RSRC_DOPLAY_P 70    
                            13581 ; 294  |//$FILENAME fatwritep.src
                            13582 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                            13583 ; 296  |//$FILENAME findfirst.src
                            13584 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                            13585 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                            13586 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                            13587 ; 300  |//$FILENAME changetorootdirectory.src
                            13588 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                            13589 ; 302  |//$FILENAME _findkeypair.src
                            13590 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                            13591 ; 304  |//$FILENAME variablemachinegetorset.src
                            13592 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                            13593 ; 306  |//$FILENAME _hdsslotenumnext.src
                            13594 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 230

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13595 ; 308  |//$FILENAME getlspubkey.src
                            13596 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                            13597 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                            13598 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                            13599 ; 312  |//$FILENAME drm_utl_decodekid.src
                            13600 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                            13601 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                            13602 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
                            13603 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
                            13604 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
                            13605 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                            13606 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                            13607 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                            13608 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                            13609 ; 322  |//$FILENAME aes_enc.src
                            13610 ; 323  |#define RSRC_AES_ENC 85    
                            13611 ; 324  |//$FILENAME getprivkey.src
                            13612 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                            13613 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                            13614 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                            13615 ; 328  |//$FILENAME playlist_codebank.src
                            13616 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                            13617 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                            13618 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                            13619 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                            13620 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                            13621 ; 334  |//$FILENAME _getdevicecert.src
                            13622 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                            13623 ; 336  |//$FILENAME drm_lic_reportactions.src
                            13624 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                            13625 ; 338  |//$FILENAME drmcrt_wcsntol.src
                            13626 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                            13627 ; 340  |//$FILENAME _basicheaderchecks.src
                            13628 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                            13629 ; 342  |//$FILENAME drm_hdr_getattribute.src
                            13630 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                            13631 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                            13632 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                            13633 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                            13634 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                            13635 ; 348  |//$FILENAME drm_lst_open.src
                            13636 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                            13637 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                            13638 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                            13639 ; 352  |//$FILENAME _verifysymmerticsignature.src
                            13640 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                            13641 ; 354  |//$FILENAME oem_openfile.src
                            13642 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
                            13643 ; 356  |//$FILENAME _getdrmfullpathname.src
                            13644 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                            13645 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                            13646 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                            13647 ; 360  |//$FILENAME _applydiffstostore.src
                            13648 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                            13649 ; 362  |//$FILENAME drm_sst_setdata.src
                            13650 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                            13651 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                            13652 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                            13653 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                            13654 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                            13655 ; 368  |//$FILENAME playerlib_extra.src
                            13656 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 231

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13657 ; 370  |//$FILENAME wmaCommon.src
                            13658 ; 371  |#define RSRC_WMA_COMMON 109    
                            13659 ; 372  |//$FILENAME wmainit.src
                            13660 ; 373  |#define RSRC_WMA_INIT 110    
                            13661 ; 374  |//$FILENAME playlist2traverse_codebank.src
                            13662 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                            13663 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                            13664 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
                            13665 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                            13666 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
                            13667 ; 380  |//$FILENAME drm_hds_closestore.src
                            13668 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                            13669 ; 382  |//$FILENAME _hdsloadsrn.src
                            13670 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                            13671 ; 384  |//$FILENAME _loadproritizedlist.src
                            13672 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                            13673 ; 386  |//$FILENAME drm_lst_initenum.src
                            13674 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                            13675 ; 388  |//$FILENAME _loadattributesintocache.src
                            13676 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                            13677 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                            13678 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                            13679 ; 392  |
                            13680 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                            13681 ; 394  |//  Menu Modules (codebanks)
                            13682 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                            13683 ; 396  |//$FILENAME mainmenu.src
                            13684 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                            13685 ; 398  |//$FILENAME displaylists.src
                            13686 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                            13687 ; 400  |
                            13688 ; 401  |//$FILENAME voicemenu.src
                            13689 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                            13690 ; 403  |//$FILENAME fmtunermenu.src
                            13691 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                            13692 ; 405  |//$FILENAME recorderstatemachine.src
                            13693 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                            13694 ; 407  |
                            13695 ; 408  |//$FILENAME eqmenu.src
                            13696 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                            13697 ; 410  |//$FILENAME playmodemenu.src
                            13698 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                            13699 ; 412  |//$FILENAME contrastmenu.src
                            13700 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                            13701 ; 414  |//$FILENAME pwrsettingsmenu.src
                            13702 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                            13703 ; 416  |//$FILENAME timedatemenu.src
                            13704 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
                            13705 ; 418  |//$FILENAME settimemenu.src
                            13706 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                            13707 ; 420  |//$FILENAME setdatemenu.src
                            13708 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                            13709 ; 422  |//$FILENAME settingsmenu.src
                            13710 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                            13711 ; 424  |//$FILENAME string_system_menu.src
                            13712 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                            13713 ; 426  |//$FILENAME deletemenu.src
                            13714 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                            13715 ; 428  |//$FILENAME aboutmenu.src
                            13716 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                            13717 ; 430  |
                            13718 ; 431  |//$FILENAME spectrogram.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 232

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13719 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
                            13720 ; 433  |
                            13721 ; 434  |//$FILENAME motionvideomenu.src
                            13722 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                            13723 ; 436  |//$FILENAME motionvideomenuinitstate.src
                            13724 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                            13725 ; 438  |//$FILENAME jpegdisplaymenu.src
                            13726 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
                            13727 ; 440  |//$FILENAME jpegmanualmenu.src
                            13728 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
                            13729 ; 442  |//$FILENAME jpegthumbnailmenu.src
                            13730 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                            13731 ; 444  |//$FILENAME jpegslideshowmenu.src
                            13732 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                            13733 ; 446  |//$FILENAME albumartmenu.src
                            13734 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                            13735 ; 448  |//$FILENAME jpegfileutilextra.src
                            13736 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                            13737 ; 450  |
                            13738 ; 451  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13739 ; 452  |// General Modules
                            13740 ; 453  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13741 ; 454  |//$FILENAME MixMod.src
                            13742 ; 455  |#define RSRC_MIXMOD_CODE 145    
                            13743 ; 456  |//$FILENAME TunerModule.src
                            13744 ; 457  |#define RSRC_TUNER_MODULE 146    
                            13745 ; 458  |//$FILENAME geqoverlay.src
                            13746 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                            13747 ; 460  |
                            13748 ; 461  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13749 ; 462  |// Decoders/Encoders
                            13750 ; 463  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13751 ; 464  |//$FILENAME DecMod.src
                            13752 ; 465  |#define RSRC_DECMOD_CODE 148    
                            13753 ; 466  |//$FILENAME mp3p.src
                            13754 ; 467  |#define RSRC_MP3P_CODE 149    
                            13755 ; 468  |//$FILENAME mp3x.src
                            13756 ; 469  |#define RSRC_MP3X_CODE 150    
                            13757 ; 470  |//$FILENAME mp3y.src
                            13758 ; 471  |#define RSRC_MP3Y_CODE 151    
                            13759 ; 472  |//$FILENAME janusp.src
                            13760 ; 473  |#define RSRC_JANUSP_CODE 152    
                            13761 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                            13762 ; 475  |
                            13763 ; 476  |//$FILENAME decadpcmimamod.src
                            13764 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                            13765 ; 478  |//$FILENAME dec_adpcmp.src
                            13766 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                            13767 ; 480  |//$FILENAME dec_adpcmx.src
                            13768 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                            13769 ; 482  |//$FILENAME dec_adpcmy.src
                            13770 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                            13771 ; 484  |
                            13772 ; 485  |//$FILENAME decadpcmsmvmod.src
                            13773 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                            13774 ; 487  |//$FILENAME dec_smvadpcmp.src
                            13775 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                            13776 ; 489  |//$FILENAME dec_smvadpcmx.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 233

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13777 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
                            13778 ; 491  |//$FILENAME dec_smvadpcmy.src
                            13779 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                            13780 ; 493  |
                            13781 ; 494  |//$FILENAME encadpcmimamod.src
                            13782 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                            13783 ; 496  |//$FILENAME enc_adpcmp.src
                            13784 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
                            13785 ; 498  |//$FILENAME enc_adpcmx.src
                            13786 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
                            13787 ; 500  |//$FILENAME enc_adpcmy.src
                            13788 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                            13789 ; 502  |
                            13790 ; 503  |//$FILENAME jpeg_p.src
                            13791 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                            13792 ; 505  |//$FILENAME jpeg_x.src
                            13793 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                            13794 ; 507  |//$FILENAME jpeg_y.src
                            13795 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                            13796 ; 509  |//$FILENAME jpeg2_y.src
                            13797 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                            13798 ; 511  |//$FILENAME bmp2_y.src
                            13799 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                            13800 ; 513  |//$FILENAME bmp_p.src
                            13801 ; 514  |#define RSRC_BMP_DECODER_P 170    
                            13802 ; 515  |
                            13803 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                            13804 ; 517  |//$FILENAME smvjpeg_x.src
                            13805 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                            13806 ; 519  |//$FILENAME smvjpeg_y.src
                            13807 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                            13808 ; 521  |
                            13809 ; 522  |
                            13810 ; 523  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13811 ; 524  |// System Settings
                            13812 ; 525  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13813 ; 526  |//$FILENAME settings.src
                            13814 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                            13815 ; 528  |
                            13816 ; 529  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13817 ; 530  |// Media Device Drivers
                            13818 ; 531  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13819 ; 532  |//This resource is filled with garbage unless it is the MMC build
                            13820 ; 533  |//$FILENAME null.src
                            13821 ; 534  |#define RSRC_MMCDD_CODE 174    
                            13822 ; 535  |//$FILENAME null.src
                            13823 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                            13824 ; 537  |
                            13825 ; 538  |/////////////////////////////////////////////////////////////////////////////////
                            13826 ; 539  |//  PlayState resources
                            13827 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            13828 ; 541  |//$FILENAME play_icon_with_border.src
                            13829 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                            13830 ; 543  |//$FILENAME pause_icon_with_border.src
                            13831 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                            13832 ; 545  |//$FILENAME stop_icon_with_border.src
                            13833 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                            13834 ; 547  |//$FILENAME record_icon_with_border.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 234

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13835 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
                            13836 ; 549  |//$FILENAME paused_record_icon_with_border.src
                            13837 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                            13838 ; 551  |//$FILENAME ffwd_icon_with_border.src
                            13839 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                            13840 ; 553  |//$FILENAME rwnd_icon_with_border.src
                            13841 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                            13842 ; 555  |
                            13843 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                            13844 ; 557  |//  PlayMode resources
                            13845 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                            13846 ; 559  |//$FILENAME repeatall_icon.src
                            13847 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                            13848 ; 561  |//$FILENAME repeatsong_icon.src
                            13849 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                            13850 ; 563  |//$FILENAME shuffle_icon.src
                            13851 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                            13852 ; 565  |//$FILENAME random_icon.src
                            13853 ; 566  |#define RSRC_RANDOM_ICON 186    
                            13854 ; 567  |//$FILENAME repeatallclear_icon.src
                            13855 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                            13856 ; 569  |//$FILENAME repeatsongclear_icon.src
                            13857 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                            13858 ; 571  |//$FILENAME shuffleclear_icon.src
                            13859 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                            13860 ; 573  |
                            13861 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                            13862 ; 575  |//  Battery Status
                            13863 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                            13864 ; 577  |//$FILENAME battery_00.src
                            13865 ; 578  |#define RSRC_BATTERY_00 190    
                            13866 ; 579  |//$FILENAME battery_01.src
                            13867 ; 580  |#define RSRC_BATTERY_01 191    
                            13868 ; 581  |//$FILENAME battery_02.src
                            13869 ; 582  |#define RSRC_BATTERY_02 192    
                            13870 ; 583  |//$FILENAME battery_03.src
                            13871 ; 584  |#define RSRC_BATTERY_03 193    
                            13872 ; 585  |//$FILENAME battery_04.src
                            13873 ; 586  |#define RSRC_BATTERY_04 194    
                            13874 ; 587  |//$FILENAME battery_05.src
                            13875 ; 588  |#define RSRC_BATTERY_05 195    
                            13876 ; 589  |//$FILENAME battery_06.src
                            13877 ; 590  |#define RSRC_BATTERY_06 196    
                            13878 ; 591  |//$FILENAME battery_07.src
                            13879 ; 592  |#define RSRC_BATTERY_07 197    
                            13880 ; 593  |//$FILENAME battery_08.src
                            13881 ; 594  |#define RSRC_BATTERY_08 198    
                            13882 ; 595  |//$FILENAME battery_09.src
                            13883 ; 596  |#define RSRC_BATTERY_09 199    
                            13884 ; 597  |//$FILENAME battery_10.src
                            13885 ; 598  |#define RSRC_BATTERY_10 200    
                            13886 ; 599  |
                            13887 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                            13888 ; 601  |//  System Icons
                            13889 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                            13890 ; 603  |//$FILENAME disk_small.src
                            13891 ; 604  |#define RSRC_DISK_ICON 201    
                            13892 ; 605  |//$FILENAME lock_small.src
                            13893 ; 606  |#define RSRC_LOCK_ICON 202    
                            13894 ; 607  |//$FILENAME icon_music_mode.src
                            13895 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                            13896 ; 609  |//$FILENAME icon_voice_mode.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 235

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13897 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
                            13898 ; 611  |
                            13899 ; 612  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13900 ; 613  |// Volume Bitmaps
                            13901 ; 614  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            13902 ; 615  |//$FILENAME icon_vol_00.src
                            13903 ; 616  |#define RSRC_ICON_VOL_00 205    
                            13904 ; 617  |//$FILENAME icon_vol_01.src
                            13905 ; 618  |#define RSRC_ICON_VOL_01 206    
                            13906 ; 619  |//$FILENAME icon_vol_02.src
                            13907 ; 620  |#define RSRC_ICON_VOL_02 207    
                            13908 ; 621  |//$FILENAME icon_vol_03.src
                            13909 ; 622  |#define RSRC_ICON_VOL_03 208    
                            13910 ; 623  |//$FILENAME icon_vol_04.src
                            13911 ; 624  |#define RSRC_ICON_VOL_04 209    
                            13912 ; 625  |//$FILENAME icon_vol_05.src
                            13913 ; 626  |#define RSRC_ICON_VOL_05 210    
                            13914 ; 627  |//$FILENAME icon_vol_06.src
                            13915 ; 628  |#define RSRC_ICON_VOL_06 211    
                            13916 ; 629  |//$FILENAME icon_vol_07.src
                            13917 ; 630  |#define RSRC_ICON_VOL_07 212    
                            13918 ; 631  |//$FILENAME icon_vol_08.src
                            13919 ; 632  |#define RSRC_ICON_VOL_08 213    
                            13920 ; 633  |//$FILENAME icon_vol_09.src
                            13921 ; 634  |#define RSRC_ICON_VOL_09 214    
                            13922 ; 635  |//$FILENAME icon_vol_10.src
                            13923 ; 636  |#define RSRC_ICON_VOL_10 215    
                            13924 ; 637  |//$FILENAME icon_vol_11.src
                            13925 ; 638  |#define RSRC_ICON_VOL_11 216    
                            13926 ; 639  |//$FILENAME icon_vol_12.src
                            13927 ; 640  |#define RSRC_ICON_VOL_12 217    
                            13928 ; 641  |//$FILENAME icon_vol_13.src
                            13929 ; 642  |#define RSRC_ICON_VOL_13 218    
                            13930 ; 643  |//$FILENAME icon_vol_14.src
                            13931 ; 644  |#define RSRC_ICON_VOL_14 219    
                            13932 ; 645  |//$FILENAME icon_vol_15.src
                            13933 ; 646  |#define RSRC_ICON_VOL_15 220    
                            13934 ; 647  |//$FILENAME icon_vol_16.src
                            13935 ; 648  |#define RSRC_ICON_VOL_16 221    
                            13936 ; 649  |//$FILENAME icon_vol_17.src
                            13937 ; 650  |#define RSRC_ICON_VOL_17 222    
                            13938 ; 651  |//$FILENAME icon_vol_18.src
                            13939 ; 652  |#define RSRC_ICON_VOL_18 223    
                            13940 ; 653  |//$FILENAME icon_vol_19.src
                            13941 ; 654  |#define RSRC_ICON_VOL_19 224    
                            13942 ; 655  |//$FILENAME icon_vol_20.src
                            13943 ; 656  |#define RSRC_ICON_VOL_20 225    
                            13944 ; 657  |//$FILENAME icon_vol_21.src
                            13945 ; 658  |#define RSRC_ICON_VOL_21 226    
                            13946 ; 659  |//$FILENAME icon_vol_22.src
                            13947 ; 660  |#define RSRC_ICON_VOL_22 227    
                            13948 ; 661  |//$FILENAME icon_vol_23.src
                            13949 ; 662  |#define RSRC_ICON_VOL_23 228    
                            13950 ; 663  |//$FILENAME icon_vol_24.src
                            13951 ; 664  |#define RSRC_ICON_VOL_24 229    
                            13952 ; 665  |//$FILENAME icon_vol_25.src
                            13953 ; 666  |#define RSRC_ICON_VOL_25 230    
                            13954 ; 667  |//$FILENAME icon_vol_26.src
                            13955 ; 668  |#define RSRC_ICON_VOL_26 231    
                            13956 ; 669  |//$FILENAME icon_vol_27.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 236

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13957 ; 670  |#define RSRC_ICON_VOL_27 232    
                            13958 ; 671  |//$FILENAME icon_vol_28.src
                            13959 ; 672  |#define RSRC_ICON_VOL_28 233    
                            13960 ; 673  |//$FILENAME icon_vol_29.src
                            13961 ; 674  |#define RSRC_ICON_VOL_29 234    
                            13962 ; 675  |//$FILENAME icon_vol_30.src
                            13963 ; 676  |#define RSRC_ICON_VOL_30 235    
                            13964 ; 677  |//$FILENAME icon_vol_31.src
                            13965 ; 678  |#define RSRC_ICON_VOL_31 236    
                            13966 ; 679  |
                            13967 ; 680  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            13968 ; 681  |// Splash Screen Stuff
                            13969 ; 682  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            13970 ; 683  |//$FILENAME st_bw1.src
                            13971 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                            13972 ; 685  |//$FILENAME siglogo1.src
                            13973 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                            13974 ; 687  |//$FILENAME siglogo2.src
                            13975 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                            13976 ; 689  |//$FILENAME siglogo3.src
                            13977 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                            13978 ; 691  |//$FILENAME siglogo4.src
                            13979 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                            13980 ; 693  |//$FILENAME siglogo5.src
                            13981 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                            13982 ; 695  |//$FILENAME siglogo6.src
                            13983 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                            13984 ; 697  |//$FILENAME siglogo7.src
                            13985 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                            13986 ; 699  |//$FILENAME siglogo8.src
                            13987 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                            13988 ; 701  |//$FILENAME siglogo9.src
                            13989 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                            13990 ; 703  |//$FILENAME siglogo10.src
                            13991 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                            13992 ; 705  |//$FILENAME siglogo11.src
                            13993 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                            13994 ; 707  |//$FILENAME siglogo12.src
                            13995 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                            13996 ; 709  |//$FILENAME siglogo13.src
                            13997 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                            13998 ; 711  |//$FILENAME siglogo.src
                            13999 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                            14000 ; 713  |
                            14001 ; 714  |//$FILENAME locked.src
                            14002 ; 715  |#define RSRC_LOCKED_SCREEN 252    
                            14003 ; 716  |
                            14004 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                            14005 ; 718  |//  Shutdown
                            14006 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                            14007 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                            14008 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                            14009 ; 722  |//$FILENAME status_16_6_steps_0.src
                            14010 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                            14011 ; 724  |//$FILENAME status_16_6_steps_1.src
                            14012 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                            14013 ; 726  |//$FILENAME status_16_6_steps_2.src
                            14014 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                            14015 ; 728  |//$FILENAME status_16_6_steps_3.src
                            14016 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 237

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14017 ; 730  |//$FILENAME status_16_6_steps_4.src
                            14018 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                            14019 ; 732  |//$FILENAME status_16_6_steps_5.src
                            14020 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                            14021 ; 734  |//$FILENAME status_16_6_steps_6.src
                            14022 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                            14023 ; 736  |
                            14024 ; 737  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14025 ; 738  |// EQ
                            14026 ; 739  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14027 ; 740  |//$FILENAME eq_clear_icon.src
                            14028 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                            14029 ; 742  |//$FILENAME rock_icon.src
                            14030 ; 743  |#define RSRC_ROCK_ICON 262    
                            14031 ; 744  |//$FILENAME jazz_icon.src
                            14032 ; 745  |#define RSRC_JAZZ_ICON 263    
                            14033 ; 746  |//$FILENAME classic_icon.src
                            14034 ; 747  |#define RSRC_CLASSIC_ICON 264    
                            14035 ; 748  |//$FILENAME pop_icon.src
                            14036 ; 749  |#define RSRC_POP_ICON 265    
                            14037 ; 750  |//$FILENAME custom_icon.src
                            14038 ; 751  |#define RSRC_CUSTOM_ICON 266    
                            14039 ; 752  |
                            14040 ; 753  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14041 ; 754  |// AB
                            14042 ; 755  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14043 ; 756  |//$FILENAME ab_mark_a.src
                            14044 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                            14045 ; 758  |//$FILENAME ab_mark_b.src
                            14046 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                            14047 ; 760  |
                            14048 ; 761  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14049 ; 762  |// Menu Display Resources
                            14050 ; 763  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14051 ; 764  |//$FILENAME string_music_menu.src
                            14052 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                            14053 ; 766  |//$FILENAME string_mvideo_menu.src
                            14054 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                            14055 ; 768  |//$FILENAME string_jpeg_display_menu.src
                            14056 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                            14057 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                            14058 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
                            14059 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                            14060 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                            14061 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                            14062 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                            14063 ; 776  |//$FILENAME string_voice_menu.src
                            14064 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                            14065 ; 778  |//$FILENAME string_audible_menu.src
                            14066 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                            14067 ; 780  |//$FILENAME string_fmtuner_menu.src
                            14068 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                            14069 ; 782  |//$FILENAME string_settings_menu.src
                            14070 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                            14071 ; 784  |//$FILENAME string_eq_menu.src
                            14072 ; 785  |#define RSRC_STRING_EQ_MENU 279    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 238

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14073 ; 786  |//$FILENAME string_playmode_menu.src
                            14074 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                            14075 ; 788  |//$FILENAME string_contrast_menu.src
                            14076 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
                            14077 ; 790  |//$FILENAME string_pwrsavings_menu.src
                            14078 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                            14079 ; 792  |//$FILENAME string_time_date_menu.src
                            14080 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                            14081 ; 794  |//$FILENAME string_set_time_menu.src
                            14082 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
                            14083 ; 796  |//$FILENAME string_set_date_menu.src
                            14084 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                            14085 ; 798  |//$FILENAME string_exit_menu.src
                            14086 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                            14087 ; 800  |//$FILENAME string_rock_menu.src
                            14088 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                            14089 ; 802  |//$FILENAME string_pop_menu.src
                            14090 ; 803  |#define RSRC_STRING_POP_MENU 288    
                            14091 ; 804  |//$FILENAME string_classic_menu.src
                            14092 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                            14093 ; 806  |//$FILENAME string_normal_menu.src
                            14094 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                            14095 ; 808  |//$FILENAME string_jazz_menu.src
                            14096 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                            14097 ; 810  |//$FILENAME string_repeat1_menu.src
                            14098 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                            14099 ; 812  |//$FILENAME string_repeatall_menu.src
                            14100 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                            14101 ; 814  |//$FILENAME string_shuffle_menu.src
                            14102 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                            14103 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                            14104 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
                            14105 ; 818  |//$FILENAME string_disable_menu.src
                            14106 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                            14107 ; 820  |//$FILENAME string_1min_menu.src
                            14108 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                            14109 ; 822  |//$FILENAME string_2min_menu.src
                            14110 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                            14111 ; 824  |//$FILENAME string_5min_menu.src
                            14112 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                            14113 ; 826  |//$FILENAME string_10min_menu.src
                            14114 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                            14115 ; 828  |//$FILENAME string_system_menu.src
                            14116 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                            14117 ; 830  |//$FILENAME string_about_menu.src
                            14118 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                            14119 ; 832  |//$FILENAME string_delete_menu.src
                            14120 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
                            14121 ; 834  |//$FILENAME string_record_menu.src
                            14122 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                            14123 ; 836  |//$FILENAME string_spectrogram_menu.src
                            14124 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                            14125 ; 838  |
                            14126 ; 839  |//$FILENAME string_end_of_slide_show.src
                            14127 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                            14128 ; 841  |
                            14129 ; 842  |//$FILENAME string_mb.src
                            14130 ; 843  |#define RSRC_STRING_MB 307    
                            14131 ; 844  |
                            14132 ; 845  |//$FILENAME internal_media.src
                            14133 ; 846  |#define RSRC_INT_MEDIA 308    
                            14134 ; 847  |//$FILENAME external_media.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 239

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14135 ; 848  |#define RSRC_EXT_MEDIA 309    
                            14136 ; 849  |
                            14137 ; 850  |//$FILENAME about_title.src
                            14138 ; 851  |#define RSRC_ABOUT_TITLE 310    
                            14139 ; 852  |//$FILENAME player_name.src
                            14140 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                            14141 ; 854  |
                            14142 ; 855  |//$FILENAME settings_title.src
                            14143 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                            14144 ; 857  |//$FILENAME jpeg_display_title.src
                            14145 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                            14146 ; 859  |//$FILENAME erase_title.src
                            14147 ; 860  |#define RSRC_ERASE_TITLE 314    
                            14148 ; 861  |
                            14149 ; 862  |//$FILENAME del_warning_no.src
                            14150 ; 863  |#define RSRC_DELETE_NO 315    
                            14151 ; 864  |//$FILENAME del_warning_yes.src
                            14152 ; 865  |#define RSRC_DELETE_YES 316    
                            14153 ; 866  |//$FILENAME del_warning_line1.src
                            14154 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                            14155 ; 868  |//$FILENAME del_warning_line2.src
                            14156 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                            14157 ; 870  |//$FILENAME lowbattery.src
                            14158 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                            14159 ; 872  |//$FILENAME vbr.src
                            14160 ; 873  |#define RSRC_VBR_BITMAP 320    
                            14161 ; 874  |
                            14162 ; 875  |//$FILENAME string_song.src
                            14163 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                            14164 ; 877  |//$FILENAME string_voice.src
                            14165 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                            14166 ; 879  |
                            14167 ; 880  |//$FILENAME time_date_title.src
                            14168 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                            14169 ; 882  |//$FILENAME set_time_title.src
                            14170 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                            14171 ; 884  |//$FILENAME set_date_title.src
                            14172 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                            14173 ; 886  |//$FILENAME string_searching.src
                            14174 ; 887  |#define RSRC_STRING_SEARCHING 326    
                            14175 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                            14176 ; 889  |//  Save Changes
                            14177 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                            14178 ; 891  |//$FILENAME save_changes_yes.src
                            14179 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                            14180 ; 893  |//$FILENAME save_changes_no.src
                            14181 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                            14182 ; 895  |//$FILENAME save_changes_cancel.src
                            14183 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                            14184 ; 897  |//$FILENAME save_changes_clear.src
                            14185 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                            14186 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                            14187 ; 900  |//  Contrast
                            14188 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                            14189 ; 902  |//$FILENAME contrast_title.src
                            14190 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                            14191 ; 904  |//$FILENAME contrast_frame.src
                            14192 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                            14193 ; 906  |//$FILENAME contrast_level0.src
                            14194 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                            14195 ; 908  |//$FILENAME contrast_level1.src
                            14196 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 240

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14197 ; 910  |//$FILENAME contrast_level2.src
                            14198 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                            14199 ; 912  |//$FILENAME contrast_level3.src
                            14200 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                            14201 ; 914  |//$FILENAME contrast_level4.src
                            14202 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                            14203 ; 916  |//$FILENAME contrast_level5.src
                            14204 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                            14205 ; 918  |//$FILENAME contrast_level6.src
                            14206 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
                            14207 ; 920  |//$FILENAME contrast_level7.src
                            14208 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                            14209 ; 922  |//$FILENAME contrast_level8.src
                            14210 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                            14211 ; 924  |//$FILENAME contrast_level9.src
                            14212 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                            14213 ; 926  |//$FILENAME contrast_level10.src
                            14214 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                            14215 ; 928  |
                            14216 ; 929  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14217 ; 930  |// Funclets
                            14218 ; 931  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14219 ; 932  |//$FILENAME Funclet_SetRTC.src
                            14220 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                            14221 ; 934  |//$FILENAME Funclet_InitRTC.src
                            14222 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                            14223 ; 936  |//$FILENAME Funclet_ReadRTC.src
                            14224 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                            14225 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                            14226 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                            14227 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                            14228 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                            14229 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                            14230 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                            14231 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                            14232 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                            14233 ; 946  |//$FILENAME Funclet_AnalogInit.src
                            14234 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                            14235 ; 948  |//$FILENAME Funclet_UsbConnected.src
                            14236 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                            14237 ; 950  |//$FILENAME Funclet_ButtonInit.src
                            14238 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                            14239 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                            14240 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                            14241 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                            14242 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
                            14243 ; 956  |//$FILENAME Funclet_StartProject.src
                            14244 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                            14245 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                            14246 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                            14247 ; 960  |//$FILENAME null.src
                            14248 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                            14249 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                            14250 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                            14251 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                            14252 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                            14253 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                            14254 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                            14255 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                            14256 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 241

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14257 ; 970  |//$FILENAME null.src
                            14258 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                            14259 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                            14260 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                            14261 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                            14262 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                            14263 ; 976  |//$FILENAME null.src
                            14264 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                            14265 ; 978  |//$FILENAME null.src
                            14266 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
                            14267 ; 980  |//$FILENAME null.src
                            14268 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                            14269 ; 982  |//$FILENAME null.src
                            14270 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                            14271 ; 984  |//$FILENAME null.src
                            14272 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                            14273 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                            14274 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                            14275 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                            14276 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                            14277 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                            14278 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                            14279 ; 992  |//$FILENAME null.src
                            14280 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                            14281 ; 994  |//$FILENAME null.src
                            14282 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                            14283 ; 996  |//$FILENAME Funclet_SaveSettings.src
                            14284 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                            14285 ; 998  |//$FILENAME Funclet_LoadSettings.src
                            14286 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                            14287 ; 1000 |///////////////////////////////////////////////////////////////
                            14288 ; 1001 |// Sanyo FM Tuner Fuclet
                            14289 ; 1002 |///////////////////////////////////////////////////////////////
                            14290 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                                  
                            14291 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations
                                  .src
                            14292 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.
                                  src
                            14293 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoSte
                                  reo.src
                            14294 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                                  
                            14295 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                            14296 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.s
                                  rc
                            14297 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
                            14298 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.sr
                                  c
                            14299 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFiel
                                  dStrength.src
                            14300 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapO
                                  sc.src
                            14301 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmSt
                                  ation.src
                            14302 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPre
                                  set.src
                            14303 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                            14304 ; 1017 |
                            14305 ; 1018 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14306 ; 1019 |// WMA Resources
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 242

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14307 ; 1020 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14308 ; 1021 |//$FILENAME wmaCore.src
                            14309 ; 1022 |#define RSRC_WMA_CORE 378    
                            14310 ; 1023 |//$FILENAME wmaMidLow.src
                            14311 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                            14312 ; 1025 |//$FILENAME wmaHigh.src
                            14313 ; 1026 |#define RSRC_WMA_HIGH 380    
                            14314 ; 1027 |//$FILENAME wmaHighMid.src
                            14315 ; 1028 |#define RSRC_WMA_HIGHMID 381    
                            14316 ; 1029 |//$FILENAME wmaMid.src
                            14317 ; 1030 |#define RSRC_WMA_MID 382    
                            14318 ; 1031 |//$FILENAME wmaLow.src
                            14319 ; 1032 |#define RSRC_WMA_LOW 383    
                            14320 ; 1033 |//$FILENAME wmaX1mem.src
                            14321 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                            14322 ; 1035 |//$FILENAME wmaYmem.src
                            14323 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                            14324 ; 1037 |//$FILENAME wmaLXmem.src
                            14325 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                            14326 ; 1039 |//$FILENAME wmaLYmem.src
                            14327 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
                            14328 ; 1041 |//$FILENAME wmaHuff44Qb.src
                            14329 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                            14330 ; 1043 |//$FILENAME wmaHuff44Ob.src
                            14331 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                            14332 ; 1045 |//$FILENAME wmaHuff16Ob.src
                            14333 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                            14334 ; 1047 |//$FILENAME drmpdcommon.src
                            14335 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                            14336 ; 1049 |//$FILENAME januswmasupport.src
                            14337 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                            14338 ; 1051 |//$FILENAME wmalicenseinit.src
                            14339 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                            14340 ; 1053 |//$FILENAME wma_tables.src
                            14341 ; 1054 |#define RSRC_WMA_TABLES 394    
                            14342 ; 1055 |//$FILENAME janus_tables.src
                            14343 ; 1056 |#define RSRC_JANUS_TABLES 395    
                            14344 ; 1057 |//$FILENAME wma_constants.src
                            14345 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                            14346 ; 1059 |//$FILENAME janus_constants.src
                            14347 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                            14348 ; 1061 |//$FILENAME janus_xmem.src
                            14349 ; 1062 |#define RSRC_JANUS_X 398    
                            14350 ; 1063 |//$FILENAME janusy_data.src
                            14351 ; 1064 |#define RSRC_JANUSY_DATA 399    
                            14352 ; 1065 |
                            14353 ; 1066 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14354 ; 1067 |// Fonts -- these are last because they are very large
                            14355 ; 1068 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14356 ; 1069 |//$FILENAME font_table.src
                            14357 ; 1070 |#define RSRC_FONT_TABLE 400    
                            14358 ; 1071 |//$FILENAME font_PGM.src
                            14359 ; 1072 |#define RSRC_PGM_8 401    
                            14360 ; 1073 |//$FILENAME font_SGMs.src
                            14361 ; 1074 |#define RSRC_SGMS_8 402    
                            14362 ; 1075 |//$FILENAME font_script_00.src
                            14363 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                            14364 ; 1077 |//$FILENAME font_scripts.src
                            14365 ; 1078 |#define RSRC_SCRIPTS_8 404    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 243

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14366 ; 1079 |//$FILENAME font_PDM.src
                            14367 ; 1080 |#define RSRC_PDM 405    
                            14368 ; 1081 |//$FILENAME font_SDMs.src
                            14369 ; 1082 |#define RSRC_SDMS 406    
                            14370 ; 1083 |//$FILENAME bitmap_warning.src
                            14371 ; 1084 |#define RSRC_WARNING 407    
                            14372 ; 1085 |//$FILENAME bitmap_device_full.src
                            14373 ; 1086 |#define RSRC_DEVICE_FULL 408    
                            14374 ; 1087 |
                            14375 ; 1088 |
                            14376 ; 1089 |//$FILENAME lcd_controller_init.src
                            14377 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                            14378 ; 1091 |
                            14379 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                            14380 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                            14381 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                            14382 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                            14383 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                            14384 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                            14385 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                            14386 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                            14387 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                            14388 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                            14389 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                            14390 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                            14391 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                            14392 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                            14393 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                            14394 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                            14395 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                            14396 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                            14397 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                            14398 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                            14399 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                            14400 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                            14401 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                            14402 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                            14403 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                            14404 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                            14405 ; 1118 |
                            14406 ; 1119 |
                            14407 ; 1120 |//$FILENAME sysrecord.src
                            14408 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                            14409 ; 1122 |
                            14410 ; 1123 |//$FILENAME string_record_settings.src
                            14411 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                            14412 ; 1125 |//$FILENAME string_sample_rate.src
                            14413 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                            14414 ; 1127 |//$FILENAME string_encoder.src
                            14415 ; 1128 |#define RSRC_STRING_ENCODER 426    
                            14416 ; 1129 |//$FILENAME string_adpcm.src
                            14417 ; 1130 |#define RSRC_STRING_ADPCM 427    
                            14418 ; 1131 |//$FILENAME string_msadpcm.src
                            14419 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                            14420 ; 1133 |//$FILENAME string_imadpcm.src
                            14421 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                            14422 ; 1135 |//$FILENAME string_pcm.src
                            14423 ; 1136 |#define RSRC_STRING_PCM 430    
                            14424 ; 1137 |//$FILENAME string_internal.src
                            14425 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                            14426 ; 1139 |//$FILENAME string_external.src
                            14427 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 244

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14428 ; 1141 |//$FILENAME string_device.src
                            14429 ; 1142 |#define RSRC_STRING_DEVICE 433    
                            14430 ; 1143 |//$FILENAME string_source.src
                            14431 ; 1144 |#define RSRC_STRING_SOURCE 434    
                            14432 ; 1145 |//$FILENAME string_microphone.src
                            14433 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                            14434 ; 1147 |//$FILENAME string_linein.src
                            14435 ; 1148 |#define RSRC_STRING_LINEIN 436    
                            14436 ; 1149 |//$FILENAME string_bits.src
                            14437 ; 1150 |#define RSRC_STRING_BITS 437    
                            14438 ; 1151 |//$FILENAME string_4.src
                            14439 ; 1152 |#define RSRC_STRING_4 438    
                            14440 ; 1153 |//$FILENAME string_8.src
                            14441 ; 1154 |#define RSRC_STRING_8 439    
                            14442 ; 1155 |//$FILENAME string_16.src
                            14443 ; 1156 |#define RSRC_STRING_16 440    
                            14444 ; 1157 |//$FILENAME string_24.src
                            14445 ; 1158 |#define RSRC_STRING_24 441    
                            14446 ; 1159 |//$FILENAME string_fm.src
                            14447 ; 1160 |#define RSRC_STRING_FM 442    
                            14448 ; 1161 |//$FILENAME string_mono.src
                            14449 ; 1162 |#define RSRC_STRING_MONO 443    
                            14450 ; 1163 |//$FILENAME string_stereo.src
                            14451 ; 1164 |#define RSRC_STRING_STEREO 444    
                            14452 ; 1165 |//$FILENAME string_8000hz.src
                            14453 ; 1166 |#define RSRC_STRING_8000HZ 445    
                            14454 ; 1167 |//$FILENAME string_11025hz.src
                            14455 ; 1168 |#define RSRC_STRING_11025HZ 446    
                            14456 ; 1169 |//$FILENAME string_16000hz.src
                            14457 ; 1170 |#define RSRC_STRING_16000HZ 447    
                            14458 ; 1171 |//$FILENAME string_22050hz.src
                            14459 ; 1172 |#define RSRC_STRING_22050HZ 448    
                            14460 ; 1173 |//$FILENAME string_32000hz.src
                            14461 ; 1174 |#define RSRC_STRING_32000HZ 449    
                            14462 ; 1175 |//$FILENAME string_44100hz.src
                            14463 ; 1176 |#define RSRC_STRING_44100HZ 450    
                            14464 ; 1177 |//$FILENAME string_48000hz.src
                            14465 ; 1178 |#define RSRC_STRING_48000HZ 451    
                            14466 ; 1179 |//$FILENAME string_channels.src
                            14467 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                            14468 ; 1181 |//$FILENAME string_spaces.src
                            14469 ; 1182 |#define RSRC_STRING_SPACES 453    
                            14470 ; 1183 |//$FILENAME slider_bar.src
                            14471 ; 1184 |#define RSRC_SLIDER_BAR 454    
                            14472 ; 1185 |//$FILENAME slider_bar_inv.src
                            14473 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                            14474 ; 1187 |//$FILENAME slider_track.src
                            14475 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                            14476 ; 1189 |//$FILENAME string_no_files.src
                            14477 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                            14478 ; 1191 |
                            14479 ; 1192 |/////////////////////////////////////////////////////////////////////
                            14480 ; 1193 |//  Time and Date Resource Strings
                            14481 ; 1194 |/////////////////////////////////////////////////////////////////////
                            14482 ; 1195 |//$FILENAME string_sunday.src
                            14483 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                            14484 ; 1197 |//$FILENAME string_monday.src
                            14485 ; 1198 |#define RSRC_STRING_MONDAY 459    
                            14486 ; 1199 |//$FILENAME string_tuesday.src
                            14487 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                            14488 ; 1201 |//$FILENAME string_wednesday.src
                            14489 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 245

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14490 ; 1203 |//$FILENAME string_thursday.src
                            14491 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                            14492 ; 1205 |//$FILENAME string_friday.src
                            14493 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                            14494 ; 1207 |//$FILENAME string_saturday.src
                            14495 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                            14496 ; 1209 |//$FILENAME string_am.src
                            14497 ; 1210 |#define RSRC_STRING_AM 465    
                            14498 ; 1211 |//$FILENAME string_pm.src
                            14499 ; 1212 |#define RSRC_STRING_PM 466    
                            14500 ; 1213 |//$FILENAME string_amclear.src
                            14501 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                            14502 ; 1215 |//$FILENAME string_slash.src
                            14503 ; 1216 |#define RSRC_STRING_SLASH 468    
                            14504 ; 1217 |//$FILENAME string_colon.src
                            14505 ; 1218 |#define RSRC_STRING_COLON 469    
                            14506 ; 1219 |//$FILENAME string_12hour.src
                            14507 ; 1220 |#define RSRC_STRING_12HOUR 470    
                            14508 ; 1221 |//$FILENAME string_24hour.src
                            14509 ; 1222 |#define RSRC_STRING_24HOUR 471    
                            14510 ; 1223 |//$FILENAME string_format.src
                            14511 ; 1224 |#define RSRC_STRING_FORMAT 472    
                            14512 ; 1225 |//$FILENAME string_mmddyyyy.src
                            14513 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                            14514 ; 1227 |//$FILENAME string_ddmmyyyy.src
                            14515 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                            14516 ; 1229 |//$FILENAME string_yyyymmdd.src
                            14517 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                            14518 ; 1231 |//$FILENAME string_ok.src
                            14519 ; 1232 |#define RSRC_STRING_OK 476    
                            14520 ; 1233 |//$FILENAME string_cancel.src
                            14521 ; 1234 |#define RSRC_STRING_CANCEL 477    
                            14522 ; 1235 |//$FILENAME negative_sign.src
                            14523 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                            14524 ; 1237 |//$FILENAME string_dec_pt5.src
                            14525 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                            14526 ; 1239 |//$FILENAME string_dec_pt0.src
                            14527 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                            14528 ; 1241 |//$FILENAME string_db.src
                            14529 ; 1242 |#define RSRC_DB_STRING 481    
                            14530 ; 1243 |//$FILENAME string_hz2.src
                            14531 ; 1244 |#define RSRC_HZ2_STRING 482    
                            14532 ; 1245 |
                            14533 ; 1246 |
                            14534 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                            14535 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                            14536 ; 1249 |//$FILENAME metadata_codebank.src
                            14537 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                            14538 ; 1251 |//$FILENAME mp3metadata_codebank.src
                            14539 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                            14540 ; 1253 |//$FILENAME wmametadata_codebank.src
                            14541 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                            14542 ; 1255 |//$FILENAME wavmetadata_codebank.src
                            14543 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                            14544 ; 1257 |//$FILENAME smvmetadata_codebank.src
                            14545 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                            14546 ; 1259 |//$FILENAME playlist2init_codebank.src
                            14547 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                            14548 ; 1261 |
                            14549 ; 1262 |//$FILENAME delete_successful.src
                            14550 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                            14551 ; 1264 |//$FILENAME delete_error.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 246

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14552 ; 1265 |#define RSRC_DELETE_ERROR 491    
                            14553 ; 1266 |//$FILENAME lic_expired.src
                            14554 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                            14555 ; 1268 |//$FILENAME id3v2_codebank.src
                            14556 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                            14557 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                            14558 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
                            14559 ; 1272 |//$FILENAME lyrics3_codebank.src
                            14560 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                            14561 ; 1274 |//$FILENAME lrc_codebank.src
                            14562 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                            14563 ; 1276 |//$FILENAME lyrics_api_codebank.src
                            14564 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                            14565 ; 1278 |//$FILENAME wmalyrics_codebank.src
                            14566 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                            14567 ; 1280 |//$FILENAME apicframe_codebank.src
                            14568 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                            14569 ; 1282 |
                            14570 ; 1283 |//$FILENAME exmediaerror1.src
                            14571 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                            14572 ; 1285 |//$FILENAME exmediaerror2.src
                            14573 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                            14574 ; 1287 |//$FILENAME inmediaerror1.src
                            14575 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                            14576 ; 1289 |
                            14577 ; 1290 |//$FILENAME backlight_title.src
                            14578 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
                            14579 ; 1292 |//$FILENAME backlight_state_on.src
                            14580 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                            14581 ; 1294 |//$FILENAME backlight_state_off.src
                            14582 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                            14583 ; 1296 |//$FILENAME backlightmenu.src
                            14584 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                            14585 ; 1298 |//$FILENAME string_backlight_menu.src
                            14586 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                            14587 ; 1300 |
                            14588 ; 1301 |//$FILENAME enc_mp3mod.src
                            14589 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                            14590 ; 1303 |//$FILENAME enc_mp3p.src
                            14591 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                            14592 ; 1305 |//$FILENAME enc_mp3x.src
                            14593 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                            14594 ; 1307 |//$FILENAME enc_mp3y.src
                            14595 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                            14596 ; 1309 |//$FILENAME mp3_implementation.src
                            14597 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                            14598 ; 1311 |//$FILENAME string_mp3.src
                            14599 ; 1312 |#define RSRC_STRING_MP3 513    
                            14600 ; 1313 |//$FILENAME string_all.src
                            14601 ; 1314 |#define RSRC_STRING_ALL 514    
                            14602 ; 1315 |
                            14603 ; 1316 |//$FILENAME mediastartup.src
                            14604 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                            14605 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                            14606 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                            14607 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
                            14608 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                            14609 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                            14610 ; 1323 |
                            14611 ; 1324 |//$FILENAME nanddatadriveinit.src
                            14612 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                            14613 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 247

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14614 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                            14615 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                            14616 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                            14617 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                            14618 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                            14619 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                            14620 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
                            14621 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                            14622 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                            14623 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
                            14624 ; 1337 |
                            14625 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                            14626 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                            14627 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                            14628 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                            14629 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                            14630 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                            14631 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                            14632 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                            14633 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                            14634 ; 1347 |
                            14635 ; 1348 |//$FILENAME vbr_codebank.src
                            14636 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                            14637 ; 1350 |
                            14638 ; 1351 |//$FILENAME string_recordtest_menu.src
                            14639 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                            14640 ; 1353 |//$FILENAME string_recordtest_duration.src
                            14641 ; 1354 |#define RSRC_STRING_DURATION 520    
                            14642 ; 1355 |//$FILENAME string_recordtest_time5.src
                            14643 ; 1356 |#define RSRC_STRING_TIME5 521    
                            14644 ; 1357 |//$FILENAME string_recordtest_time10.src
                            14645 ; 1358 |#define RSRC_STRING_TIME10 522    
                            14646 ; 1359 |//$FILENAME string_recordtest_time30.src
                            14647 ; 1360 |#define RSRC_STRING_TIME30 523    
                            14648 ; 1361 |//$FILENAME string_recordtest_time60.src
                            14649 ; 1362 |#define RSRC_STRING_TIME60 524    
                            14650 ; 1363 |//$FILENAME string_recordtest_time300.src
                            14651 ; 1364 |#define RSRC_STRING_TIME300 525    
                            14652 ; 1365 |//$FILENAME string_recordtest_time600.src
                            14653 ; 1366 |#define RSRC_STRING_TIME600 526    
                            14654 ; 1367 |
                            14655 ; 1368 |//$FILENAME test_title.src
                            14656 ; 1369 |#define RSRC_TEST_TITLE 527    
                            14657 ; 1370 |//$FILENAME testmenu.src
                            14658 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                            14659 ; 1372 |
                            14660 ; 1373 |
                            14661 ; 1374 |//$FILENAME mmcmediastartup.src
                            14662 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                            14663 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                            14664 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                            14665 ; 1378 |//$FILENAME mmcinfo.src
                            14666 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                            14667 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                            14668 ; 1381 |//$FILENAME mmcerase.src
                            14669 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                            14670 ; 1383 |
                            14671 ; 1384 |
                            14672 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                            14673 ; 1386 |
                            14674 ; 1387 |//$FILENAME mmcenumerate.src
                            14675 ; 1388 |#define RSRC_MMCENUMERATE 532    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 248

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14676 ; 1389 |//$FILENAME mmcresetdevice.src
                            14677 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                            14678 ; 1391 |//$FILENAME mmcprocesscsd.src
                            14679 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                            14680 ; 1393 |//$FILENAME mmcprocesscid.src
                            14681 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                            14682 ; 1395 |//$FILENAME mmcprocesscid2.src
                            14683 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                            14684 ; 1397 |//$FILENAME mmcdetectpresence.src
                            14685 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
                            14686 ; 1399 |//$FILENAME mmcserialnumberinit.src
                            14687 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                            14688 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                            14689 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
                            14690 ; 1403 |
                            14691 ; 1404 |//$FILENAME mmcread.src
                            14692 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                            14693 ; 1406 |//$FILENAME mmcmediainit.src
                            14694 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                            14695 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                            14696 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                            14697 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                            14698 ; 1411 |//$FILENAME mmcdatadriveerase.src
                            14699 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                            14700 ; 1413 |
                            14701 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                            14702 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                            14703 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                            14704 ; 1417 |
                            14705 ; 1418 |
                            14706 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                            14707 ; 1420 |//  File system
                            14708 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                            14709 ; 1422 |//$FILENAME arrangefilename.src
                            14710 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                            14711 ; 1424 |//$FILENAME clearcluster.src
                            14712 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                            14713 ; 1426 |//$FILENAME createdirectory.src
                            14714 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                            14715 ; 1428 |//$FILENAME deletecontent.src
                            14716 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                            14717 ; 1430 |//$FILENAME deleterecord.src
                            14718 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                            14719 ; 1432 |//$FILENAME fastopen.src
                            14720 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                            14721 ; 1434 |//$FILENAME fcreate.src
                            14722 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
                            14723 ; 1436 |//$FILENAME filegetattrib.src
                            14724 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                            14725 ; 1438 |//$FILENAME filegetdate.src
                            14726 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                            14727 ; 1440 |//$FILENAME filesetattrib.src
                            14728 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                            14729 ; 1442 |//$FILENAME filesetdate.src
                            14730 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                            14731 ; 1444 |//$FILENAME fsinit.src
                            14732 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                            14733 ; 1446 |//$FILENAME fsshutdown.src
                            14734 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                            14735 ; 1448 |//$FILENAME readdevicerecord.src
                            14736 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                            14737 ; 1450 |//$FILENAME checkspaceinrootdir.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 249

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14738 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                            14739 ; 1452 |//$FILENAME setcwdhandle.src
                            14740 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                            14741 ; 1454 |//$FILENAME fsdriveinit.src
                            14742 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                            14743 ; 1456 |//$FILENAME fsclearBuf.src
                            14744 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
                            14745 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                            14746 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.s
                                  rc
                            14747 ; 1460 |//$FILENAME fgetfasthandle.src
                            14748 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                            14749 ; 1462 |//$FILENAME ishandlewriteallocated.src
                            14750 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                            14751 ; 1464 |//$FILENAME isfileopen.src
                            14752 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                            14753 ; 1466 |//$FILENAME iscurrworkdir.src
                            14754 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                            14755 ; 1468 |//$FILENAME chdir.src
                            14756 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                            14757 ; 1470 |//$FILENAME chdirFromOffset.src
                            14758 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                            14759 ; 1472 |//$FILENAME deletetree.src
                            14760 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                            14761 ; 1474 |//$FILENAME deleteallrecords.src
                            14762 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                            14763 ; 1476 |//$FILENAME cleardata.src
                            14764 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                            14765 ; 1478 |//$FILENAME changetolowleveldir.src
                            14766 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                            14767 ; 1480 |//$FILENAME getrecordnumber.src
                            14768 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                            14769 ; 1482 |//$FILENAME fileremove.src
                            14770 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                            14771 ; 1484 |//$FILENAME charactersearch.src
                            14772 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                            14773 ; 1486 |//$FILENAME stringcompare.src
                            14774 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                            14775 ; 1488 |//$FILENAME fopenw.src
                            14776 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                            14777 ; 1490 |//$FILENAME fremove.src
                            14778 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                            14779 ; 1492 |//$FILENAME fremovew.src
                            14780 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                            14781 ; 1494 |//$FILENAME mkdir.src
                            14782 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                            14783 ; 1496 |//$FILENAME mkdirw.src
                            14784 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                            14785 ; 1498 |//$FILENAME rmdir.src
                            14786 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                            14787 ; 1500 |//$FILENAME rmdirw.src
                            14788 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                            14789 ; 1502 |//$FILENAME fgetc.src
                            14790 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                            14791 ; 1504 |//$FILENAME fgets.src
                            14792 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                            14793 ; 1506 |//$FILENAME fputc.src
                            14794 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                            14795 ; 1508 |//$FILENAME fputs.src
                            14796 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                            14797 ; 1510 |//$FILENAME arrangelongfilename.src
                            14798 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 250

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14799 ; 1512 |//$FILENAME convert_itoa.src
                            14800 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                            14801 ; 1514 |//$FILENAME createdirrecord.src
                            14802 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                            14803 ; 1516 |//$FILENAME chksum.src
                            14804 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                            14805 ; 1518 |//$FILENAME createshortdirrecord.src
                            14806 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                            14807 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                            14808 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
                            14809 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                            14810 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                            14811 ; 1524 |//$FILENAME extractfilenamew.src
                            14812 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                            14813 ; 1526 |//$FILENAME extractpathw.src
                            14814 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                            14815 ; 1528 |//$FILENAME findfreerecord.src
                            14816 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                            14817 ; 1530 |//$FILENAME getnamew.src
                            14818 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                            14819 ; 1532 |//$FILENAME isdirectoryempty.src
                            14820 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                            14821 ; 1534 |//$FILENAME isshortnamevalid.src
                            14822 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                            14823 ; 1536 |//$FILENAME longdirmatch.src
                            14824 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                            14825 ; 1538 |//$FILENAME unicodetooem.src
                            14826 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                            14827 ; 1540 |//$FILENAME matchdirrecordw.src
                            14828 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                            14829 ; 1542 |//$FILENAME setcwd.src
                            14830 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                            14831 ; 1544 |//$FILENAME setshortfilename.src
                            14832 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                            14833 ; 1546 |//$FILENAME generatefilenametail.src
                            14834 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                            14835 ; 1548 |//$FILENAME dbcstounicode.src
                            14836 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                            14837 ; 1550 |//$FILENAME strcpy.src
                            14838 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                            14839 ; 1552 |//$FILENAME strcpyw.src
                            14840 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                            14841 ; 1554 |//$FILENAME strlengthw.src
                            14842 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                            14843 ; 1556 |//$FILENAME filesystempresent.src
                            14844 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                            14845 ; 1558 |//$FILENAME DataDriveInit.src
                            14846 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                            14847 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                            14848 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                            14849 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                            14850 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                            14851 ; 1564 |//$FILENAME DataDriveGetSize.src
                            14852 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                            14853 ; 1566 |//$FILENAME ConstructLongFileName.src
                            14854 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                            14855 ; 1568 |//$FILENAME strcpyucs3_2.src
                            14856 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                            14857 ; 1570 |//$FILENAME getvolumelabel.src
                            14858 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
                            14859 ; 1572 |//$FILENAME setvolumelabel.src
                            14860 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 251

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14861 ; 1574 |//$FILENAME disk_full.src
                            14862 ; 1575 |#define RSRC_DISK_FULL 619    
                            14863 ; 1576 |//$FILENAME chkdskstartup.src
                            14864 ; 1577 |#define RSRC_CHECKDISK 620    
                            14865 ; 1578 |//$FILENAME chkdskstartupy.src
                            14866 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                            14867 ; 1580 |//$FILENAME low_level_pwr_line1.src
                            14868 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                            14869 ; 1582 |//$FILENAME low_level_pwr_line2.src
                            14870 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
                            14871 ; 1584 |//$FILENAME string_bit_rate.src
                            14872 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                            14873 ; 1586 |//$FILENAME string_96000hz.src
                            14874 ; 1587 |#define RSRC_STRING_96KBPS 625    
                            14875 ; 1588 |//$FILENAME string_112000hz.src
                            14876 ; 1589 |#define RSRC_STRING_112KBPS 626    
                            14877 ; 1590 |//$FILENAME string_128000hz.src
                            14878 ; 1591 |#define RSRC_STRING_128KBPS 627    
                            14879 ; 1592 |//$FILENAME string_160000hz.src
                            14880 ; 1593 |#define RSRC_STRING_160KBPS 628    
                            14881 ; 1594 |//$FILENAME string_192000hz.src
                            14882 ; 1595 |#define RSRC_STRING_192KBPS 629    
                            14883 ; 1596 |//$FILENAME string_224000hz.src
                            14884 ; 1597 |#define RSRC_STRING_224KBPS 630    
                            14885 ; 1598 |//$FILENAME string_256000hz.src
                            14886 ; 1599 |#define RSRC_STRING_256KBPS 631    
                            14887 ; 1600 |//$FILENAME string_320000hz.src
                            14888 ; 1601 |#define RSRC_STRING_320KBPS 632    
                            14889 ; 1602 |//$FILENAME string_hz.src
                            14890 ; 1603 |#define RSRC_STRING_HZ 633    
                            14891 ; 1604 |//$FILENAME EncCommonp.src
                            14892 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                            14893 ; 1606 |//$FILENAME adc_adcx.src
                            14894 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                            14895 ; 1608 |//$FILENAME adc_adcy.src
                            14896 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                            14897 ; 1610 |//$FILENAME Funclet_encodercommon.src
                            14898 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                            14899 ; 1612 |//$FILENAME string_album.src
                            14900 ; 1613 |#define RSRC_STRING_ALBUM 638    
                            14901 ; 1614 |//$FILENAME string_encoder_song.src
                            14902 ; 1615 |#define RSRC_STRING_SONG 639    
                            14903 ; 1616 |//$FILENAME string_mode.src
                            14904 ; 1617 |#define RSRC_STRING_MODE 640    
                            14905 ; 1618 |
                            14906 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                            14907 ; 1620 |// display related
                            14908 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                            14909 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                            14910 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                            14911 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                            14912 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                            14913 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                            14914 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                            14915 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                            14916 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                            14917 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                            14918 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                            14919 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                            14920 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                            14921 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                            14922 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 252

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14923 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                            14924 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                            14925 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                            14926 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                            14927 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                            14928 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                            14929 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
                            14930 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                            14931 ; 1644 |
                            14932 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
                            14933 ; 1646 |//WMDRM Related
                            14934 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                            14935 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                            14936 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                            14937 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                            14938 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                            14939 ; 1652 |//$FILENAME drm_bbx_initialize.src
                            14940 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
                            14941 ; 1654 |//$FILENAME drm_bbx_canbind.src
                            14942 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
                            14943 ; 1656 |//$FILENAME verifychecksum.src
                            14944 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                            14945 ; 1658 |//$FILENAME drm_b64_encodew.src
                            14946 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                            14947 ; 1660 |//$FILENAME _performactions.src
                            14948 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                            14949 ; 1662 |//$FILENAME _processendofchain.src
                            14950 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                            14951 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                            14952 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                            14953 ; 1666 |//$FILENAME drmcrt_towlower.src
                            14954 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                            14955 ; 1668 |//$FILENAME drmcrt_wcslen.src
                            14956 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                            14957 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                            14958 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                            14959 ; 1672 |//$FILENAME drmcrt_memmove.src
                            14960 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                            14961 ; 1674 |//$FILENAME performoperation_part1.src
                            14962 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                            14963 ; 1676 |//$FILENAME performoperation_part2.src
                            14964 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                            14965 ; 1678 |//$FILENAME performoperation_part3.src
                            14966 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                            14967 ; 1680 |//$FILENAME performoperation_part4.src
                            14968 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                            14969 ; 1682 |//$FILENAME performoperation_part5.src
                            14970 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                            14971 ; 1684 |//$FILENAME performoperation_part6.src
                            14972 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                            14973 ; 1686 |//$FILENAME isvalidfunction.src
                            14974 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                            14975 ; 1688 |//$FILENAME functiongetvalue.src
                            14976 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                            14977 ; 1690 |//$FILENAME globalsetvariable.src
                            14978 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                            14979 ; 1692 |//$FILENAME variabledrmkgetorset.src
                            14980 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                            14981 ; 1694 |//$FILENAME variabledrmgetorset.src
                            14982 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                            14983 ; 1696 |//$FILENAME variableappgetorset.src
                            14984 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 253

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14985 ; 1698 |//$FILENAME variablelicensegetorset.src
                            14986 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                            14987 ; 1700 |//$FILENAME variablecontentgetorset.src
                            14988 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                            14989 ; 1702 |//$FILENAME variabledevicegetorset.src
                            14990 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                            14991 ; 1704 |//$FILENAME variablepmlicensegetorset.src
                            14992 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                            14993 ; 1706 |//$FILENAME drm_hds_createstore.src
                            14994 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
                            14995 ; 1708 |//$FILENAME drm_hds_init.src
                            14996 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                            14997 ; 1710 |//$FILENAME drm_hds_uninit.src
                            14998 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                            14999 ; 1712 |//$FILENAME drm_hds_openstore.src
                            15000 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                            15001 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                            15002 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                            15003 ; 1716 |//$FILENAME drm_hds_slotresize.src
                            15004 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                            15005 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                            15006 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                            15007 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                            15008 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                            15009 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                            15010 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                            15011 ; 1724 |//$FILENAME _hdscopychildpayload.src
                            15012 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                            15013 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                            15014 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                            15015 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                            15016 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                            15017 ; 1730 |//$FILENAME _hdscleanupstore.src
                            15018 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                            15019 ; 1732 |//$FILENAME drm_lst_clean.src
                            15020 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                            15021 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                            15022 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                            15023 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                            15024 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                            15025 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                            15026 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                            15027 ; 1740 |//$FILENAME _hdscreatenamespace.src
                            15028 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                            15029 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                            15030 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                            15031 ; 1744 |//$FILENAME _writesrn.src
                            15032 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                            15033 ; 1746 |//$FILENAME _writecommonblockheader.src
                            15034 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                            15035 ; 1748 |//$FILENAME _writechildblockheader.src
                            15036 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                            15037 ; 1750 |//$FILENAME _readdatablockheader.src
                            15038 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                            15039 ; 1752 |//$FILENAME _writedatablockheader.src
                            15040 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                            15041 ; 1754 |//$FILENAME _hdsexpandstore.src
                            15042 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                            15043 ; 1756 |//$FILENAME _hdsallocblock.src
                            15044 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                            15045 ; 1758 |//$FILENAME _hdsfreeblock.src
                            15046 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 254

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15047 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                            15048 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                            15049 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                            15050 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                            15051 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                            15052 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                            15053 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
                            15054 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                            15055 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                            15056 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
                            15057 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                            15058 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                            15059 ; 1772 |//$FILENAME _hdsremoveslot.src
                            15060 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                            15061 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                            15062 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                            15063 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                            15064 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                            15065 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                            15066 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                            15067 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                            15068 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                            15069 ; 1782 |//$FILENAME _hdsslotresize.src
                            15070 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                            15071 ; 1784 |//$FILENAME _isnull.src
                            15072 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                            15073 ; 1786 |//$FILENAME _hdsgensrnhash.src
                            15074 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                            15075 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                            15076 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                            15077 ; 1790 |//$FILENAME _readsrn.src
                            15078 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                            15079 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                            15080 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
                            15081 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                            15082 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                            15083 ; 1796 |//$FILENAME _hdsslotwrite.src
                            15084 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                            15085 ; 1798 |//$FILENAME _hdsinitslotenum.src
                            15086 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                            15087 ; 1800 |//$FILENAME drm_lst_close.src
                            15088 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                            15089 ; 1802 |//$FILENAME drm_lst_enumnext.src
                            15090 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                            15091 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                            15092 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                            15093 ; 1806 |//$FILENAME _processextensions.src
                            15094 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                            15095 ; 1808 |//$FILENAME _processidlist.src
                            15096 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                            15097 ; 1810 |//$FILENAME _processexclusions.src
                            15098 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                            15099 ; 1812 |//$FILENAME _processinclusions.src
                            15100 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                            15101 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                            15102 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                            15103 ; 1816 |//$FILENAME _getopllevel.src
                            15104 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                            15105 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                            15106 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                            15107 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                            15108 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 255

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15109 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
                            15110 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                            15111 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                            15112 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                            15113 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                            15114 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                            15115 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
                            15116 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                            15117 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                            15118 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
                            15119 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                            15120 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                            15121 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                            15122 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                            15123 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                            15124 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                            15125 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                            15126 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                            15127 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                            15128 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                            15129 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                            15130 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                            15131 ; 1844 |//$FILENAME overlappingdates.src
                            15132 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                            15133 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                            15134 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                            15135 ; 1848 |//$FILENAME neginfdate.src
                            15136 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                            15137 ; 1850 |//$FILENAME infdate.src
                            15138 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                            15139 ; 1852 |//$FILENAME isexpired.src
                            15140 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                            15141 ; 1854 |//$FILENAME getsecstateattr.src
                            15142 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                            15143 ; 1856 |//$FILENAME setexpirycategory.src
                            15144 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                            15145 ; 1858 |//$FILENAME getv2licenseinfo.src
                            15146 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                            15147 ; 1860 |//$FILENAME getnextlicense.src
                            15148 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                            15149 ; 1862 |//$FILENAME aggregate.src
                            15150 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                            15151 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                            15152 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                            15153 ; 1866 |//$FILENAME _scannodeforattributew.src
                            15154 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                            15155 ; 1868 |//$FILENAME _getxmlnodecdataw.src
                            15156 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                            15157 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                            15158 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                            15159 ; 1872 |//$FILENAME _createdevicestore.src
                            15160 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                            15161 ; 1874 |//$FILENAME _mapdrmerror.src
                            15162 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                            15163 ; 1876 |//$FILENAME _comparemachineid.src
                            15164 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                            15165 ; 1878 |//$FILENAME initmgrcontext.src
                            15166 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                            15167 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                            15168 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                            15169 ; 1882 |//$FILENAME drm_mgr_commit.src
                            15170 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 256

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15171 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                            15172 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                            15173 ; 1886 |//$FILENAME januscleandatastore.src
                            15174 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                            15175 ; 1888 |//$FILENAME drm_mtr_openid.src
                            15176 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                            15177 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
                            15178 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                            15179 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                            15180 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
                            15181 ; 1894 |//$FILENAME oem_setendoffile.src
                            15182 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                            15183 ; 1896 |//$FILENAME oem_genrandombytes.src
                            15184 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                            15185 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                            15186 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                            15187 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                            15188 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                            15189 ; 1902 |//$FILENAME oem_setdevicecert.src
                            15190 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                            15191 ; 1904 |//$FILENAME oem_getclockresetstate.src
                            15192 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                            15193 ; 1906 |//$FILENAME oem_setclockresetstate.src
                            15194 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                            15195 ; 1908 |//$FILENAME oem_getuniqueid.src
                            15196 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                            15197 ; 1910 |//$FILENAME oem_getdevicecert.src
                            15198 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                            15199 ; 1912 |//$FILENAME drm_snc_openstore.src
                            15200 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                            15201 ; 1914 |//$FILENAME drm_snc_closestore.src
                            15202 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                            15203 ; 1916 |//$FILENAME _setkidstoredata.src
                            15204 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                            15205 ; 1918 |//$FILENAME drm_snc_deletekid.src
                            15206 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                            15207 ; 1920 |//$FILENAME drm_snc_updatekid.src
                            15208 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                            15209 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                            15210 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                            15211 ; 1924 |//$FILENAME functiongetvalue_part1.src
                            15212 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                            15213 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                            15214 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                            15215 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                            15216 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                            15217 ; 1930 |//$FILENAME drm_hds_createstore2.src
                            15218 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                            15219 ; 1932 |//$FILENAME drm_hds_openstore2.src
                            15220 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                            15221 ; 1934 |//$FILENAME _hdsprealloc.src
                            15222 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                            15223 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                            15224 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                            15225 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                            15226 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                            15227 ; 1940 |//$FILENAME gendevicecertificate.src
                            15228 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                            15229 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                            15230 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                            15231 ; 1944 |//$FILENAME copyhdsdtore.src
                            15232 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 257

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15233 ; 1946 |//$FILENAME generatedevicecert.src
                            15234 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                            15235 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                            15236 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                            15237 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                            15238 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                            15239 ; 1952 |//$FILENAME _hdsupdatesrn.src
                            15240 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                            15241 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                            15242 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
                            15243 ; 1956 |//$FILENAME _checksecureclock.src
                            15244 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                            15245 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                            15246 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                            15247 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                            15248 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                            15249 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                            15250 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                            15251 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                            15252 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                            15253 ; 1966 |//$FILENAME strtol.src
                            15254 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                            15255 ; 1968 |//$FILENAME mktime.src
                            15256 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                            15257 ; 1970 |//$FILENAME gmtime.src
                            15258 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                            15259 ; 1972 |//$FILENAME localtime.src
                            15260 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                            15261 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                            15262 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                            15263 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                            15264 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                            15265 ; 1978 |//$FILENAME _systemtimetotime_t.src
                            15266 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                            15267 ; 1980 |//$FILENAME oem_setsystemtime.src
                            15268 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                            15269 ; 1982 |//$FILENAME const_pkcrypto.src
                            15270 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                            15271 ; 1984 |//$FILENAME const_y.src
                            15272 ; 1985 |#define RSRC_CONST_Y 820    
                            15273 ; 1986 |//$FILENAME aes_dec_table.src
                            15274 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                            15275 ; 1988 |//$FILENAME aes_key_table.src
                            15276 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                            15277 ; 1990 |//$FILENAME aes_enc_table.src
                            15278 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                            15279 ; 1992 |//$FILENAME device_cert.src
                            15280 ; 1993 |#define RSRC_DEVCERT 824    
                            15281 ; 1994 |//$FILENAME devcert_template.src
                            15282 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                            15283 ; 1996 |//$FILENAME getbase64decodedkey.src
                            15284 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                            15285 ; 1998 |//$FILENAME _initslot.src
                            15286 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                            15287 ; 2000 |//$FILENAME hdsimplcommon.src
                            15288 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                            15289 ; 2002 |//$FILENAME hdsimpl_p.src
                            15290 ; 2003 |#define RSRC_HDSIMPL_P 829    
                            15291 ; 2004 |
                            15292 ; 2005 |
                            15293 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                            15294 ; 2007 |//pkcrypto Related
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 258

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15295 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                            15296 ; 2009 |//$FILENAME two_adic_inverse.src
                            15297 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                            15298 ; 2011 |//$FILENAME mp_shift.src
                            15299 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                            15300 ; 2013 |//$FILENAME mp_significant_bit_count.src
                            15301 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
                            15302 ; 2015 |//$FILENAME set_immediate.src
                            15303 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                            15304 ; 2017 |//$FILENAME multiply_immediate.src
                            15305 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                            15306 ; 2019 |//$FILENAME multiply.src
                            15307 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                            15308 ; 2021 |//$FILENAME divide_precondition_1.src
                            15309 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                            15310 ; 2023 |//$FILENAME divide_immediate.src
                            15311 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                            15312 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                            15313 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                            15314 ; 2027 |//$FILENAME ecaffine_table_construction.src
                            15315 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                            15316 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                            15317 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                            15318 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                            15319 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                            15320 ; 2033 |//$FILENAME ecaffine_on_curve.src
                            15321 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                            15322 ; 2035 |//$FILENAME ecaffine_addition.src
                            15323 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                            15324 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                            15325 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                            15326 ; 2039 |//$FILENAME ecaffine_attributes2.src
                            15327 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                            15328 ; 2041 |//$FILENAME kfdesc_initialize.src
                            15329 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                            15330 ; 2043 |//$FILENAME kimmediate.src
                            15331 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
                            15332 ; 2045 |//$FILENAME kprime_immediater.src
                            15333 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                            15334 ; 2047 |//$FILENAME kprime_sqrter.src
                            15335 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                            15336 ; 2049 |//$FILENAME kinitialize_prime.src
                            15337 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                            15338 ; 2051 |//$FILENAME mod_lucasuv.src
                            15339 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                            15340 ; 2053 |//$FILENAME mod_lucas.src
                            15341 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
                            15342 ; 2055 |//$FILENAME bucket_multiply.src
                            15343 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                            15344 ; 2057 |//$FILENAME mod_exp2000.src
                            15345 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                            15346 ; 2059 |//$FILENAME mod_exp.src
                            15347 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                            15348 ; 2061 |//$FILENAME modmul_choices1.src
                            15349 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                            15350 ; 2063 |//$FILENAME mod_sqrt.src
                            15351 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                            15352 ; 2065 |//$FILENAME create_modulus.src
                            15353 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                            15354 ; 2067 |//$FILENAME from_modular.src
                            15355 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                            15356 ; 2069 |//$FILENAME add_immediate.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 259

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15357 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                            15358 ; 2071 |//$FILENAME add_diff.src
                            15359 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
                            15360 ; 2073 |//$FILENAME add_full.src
                            15361 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                            15362 ; 2075 |//$FILENAME compare_sum_same.src
                            15363 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
                            15364 ; 2077 |//$FILENAME sub_immediate.src
                            15365 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                            15366 ; 2079 |//$FILENAME mp_initialization.src
                            15367 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                            15368 ; 2081 |//$FILENAME new_random_bytes.src
                            15369 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                            15370 ; 2083 |//$FILENAME new_random_dword_interval.src
                            15371 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                            15372 ; 2085 |//$FILENAME new_random_digit_interval.src
                            15373 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                            15374 ; 2087 |//$FILENAME new_random_mod.src
                            15375 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                            15376 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                            15377 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                            15378 ; 2091 |//$FILENAME new_random_digits.src
                            15379 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                            15380 ; 2093 |//$FILENAME words_to_ecaffine.src
                            15381 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                            15382 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                            15383 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                            15384 ; 2097 |//$FILENAME _threadunsafepkinit.src
                            15385 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                            15386 ; 2099 |//$FILENAME pkinit.src
                            15387 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                            15388 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                            15389 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                            15390 ; 2103 |//$FILENAME drm_pk_encrypt.src
                            15391 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                            15392 ; 2105 |//$FILENAME drm_pk_decrypt.src
                            15393 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                            15394 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                            15395 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                            15396 ; 2109 |//$FILENAME fe2ipmod.src
                            15397 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                            15398 ; 2111 |//$FILENAME drm_pk_sign.src
                            15399 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                            15400 ; 2113 |//$FILENAME drm_pk_verify.src
                            15401 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                            15402 ; 2115 |//$FILENAME random_bytes.src
                            15403 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
                            15404 ; 2117 |//$FILENAME mp_gcdex.src
                            15405 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                            15406 ; 2119 |//$FILENAME mp_gcdex_split1.src
                            15407 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                            15408 ; 2121 |//$FILENAME pkcrypto_p.src
                            15409 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                            15410 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                            15411 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                            15412 ; 2125 |//$FILENAME del_all_warning_line2.src
                            15413 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                            15414 ; 2127 |//$FILENAME del_all_file_star.src
                            15415 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                            15416 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                            15417 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                            15418 ; 2131 |//$FILENAME Funclet_Init5VSense.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 260

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15419 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                            15420 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                            15421 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                            15422 ; 2135 |//$FILENAME Funclet_changeplayset.src
                            15423 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                            15424 ; 2137 |
                            15425 ; 2138 |//$FILENAME Funclet_mmctesterase.src
                            15426 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                            15427 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                            15428 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
                            15429 ; 2142 |
                            15430 ; 2143 |
                            15431 ; 2144 |// Added to allow rechargeable battery configurations to build
                            15432 ; 2145 |//$FILENAME battery_charging.src
                            15433 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                            15434 ; 2147 |//$FILENAME batterychargecodebank.src
                            15435 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                            15436 ; 2149 |//$FILENAME updatevolume.src
                            15437 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                            15438 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                            15439 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                            15440 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                            15441 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                            15442 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
                            15443 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                            15444 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
                            15445 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                            15446 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                            15447 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                            15448 ; 2161 |//$FILENAME _iscachedevent.src
                            15449 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                            15450 ; 2163 |//$FILENAME setcountedexpirycategory.src
                            15451 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                            15452 ; 2165 |//$FILENAME oem_data.src
                            15453 ; 2166 |#define RSRC_OEM_DATA 906    
                            15454 ; 2167 |//$FILENAME gpk_p.src
                            15455 ; 2168 |#define RSRC_GPK_P 907    
                            15456 ; 2169 |//$FILENAME key_data.src
                            15457 ; 2170 |#define RSRC_KEY_DATA 908    
                            15458 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                            15459 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                            15460 ; 2173 |//$FILENAME string_working.src
                            15461 ; 2174 |#define RSRC_STRING_WORKING 910    
                            15462 ; 2175 |//$FILENAME Funclet_loadusertime.src
                            15463 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                            15464 ; 2177 |//$FILENAME Funclet_saveusertime.src
                            15465 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
                            15466 ; 2179 |
                            15467 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                            15468 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                            15469 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                            15470 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                            15471 ; 2184 |
                            15472 ; 2185 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15473 ; 2186 |// Audible ACELP Resources
                            15474 ; 2187 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15475 ; 2188 |//$FILENAME AudibleAcelpDec.src
                            15476 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                            15477 ; 2190 |//$FILENAME AudibleAcelpP.src
                            15478 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 261

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15479 ; 2192 |//$FILENAME AudibleAcelpX.src
                            15480 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                            15481 ; 2194 |//$FILENAME AudibleAcelpY.src
                            15482 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                            15483 ; 2196 |
                            15484 ; 2197 |//$FILENAME AudibleDecMod.src
                            15485 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
                            15486 ; 2199 |//$FILENAME audiblemp3p.src
                            15487 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                            15488 ; 2201 |//$FILENAME audiblemp3x.src
                            15489 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                            15490 ; 2203 |//$FILENAME audiblemp3y.src
                            15491 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                            15492 ; 2205 |
                            15493 ; 2206 |//$FILENAME audiblemetadata_p.src
                            15494 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                            15495 ; 2208 |//$FILENAME audiblemetadata_y.src
                            15496 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                            15497 ; 2210 |//$FILENAME audiblesongposition_p.src
                            15498 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                            15499 ; 2212 |//$FILENAME audibletargetcheck_p.src
                            15500 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                            15501 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                            15502 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                            15503 ; 2216 |//$FILENAME audibledsa_p.src
                            15504 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                            15505 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                            15506 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                            15507 ; 2220 |//$FILENAME audiblemetastrings_p.src
                            15508 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                            15509 ; 2222 |//$FILENAME aaactivationrecords_p.src
                            15510 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                            15511 ; 2224 |
                            15512 ; 2225 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15513 ; 2226 |// Effects and SRS Resources
                            15514 ; 2227 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15515 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                            15516 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                            15517 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                            15518 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                            15519 ; 2232 |//$FILENAME wowctrl.src
                            15520 ; 2233 |#define RSRC_WOW_CTRL 934    
                            15521 ; 2234 |
                            15522 ; 2235 |//$FILENAME wowmenu.src
                            15523 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
                            15524 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                            15525 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                            15526 ; 2239 |//$FILENAME string_wow_menu.src
                            15527 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                            15528 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                            15529 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                            15530 ; 2243 |//$FILENAME string_wowvolume_menu.src
                            15531 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                            15532 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                            15533 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                            15534 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                            15535 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                            15536 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                            15537 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                            15538 ; 2251 |//$FILENAME wow_icon.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 262

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15539 ; 2252 |#define RSRC_WOW_ICON 943    
                            15540 ; 2253 |
                            15541 ; 2254 |//$FILENAME wow16k.src
                            15542 ; 2255 |#define RSRC_WOW16K 944    
                            15543 ; 2256 |//$FILENAME wow32k.src
                            15544 ; 2257 |#define RSRC_WOW32K 945    
                            15545 ; 2258 |//$FILENAME wow8k.src
                            15546 ; 2259 |#define RSRC_WOW8K 946    
                            15547 ; 2260 |//$FILENAME wow11k.src
                            15548 ; 2261 |#define RSRC_WOW11K 947    
                            15549 ; 2262 |//$FILENAME wow22k.src
                            15550 ; 2263 |#define RSRC_WOW22K 948    
                            15551 ; 2264 |//$FILENAME wow24k.src
                            15552 ; 2265 |#define RSRC_WOW24K 949    
                            15553 ; 2266 |//$FILENAME wow44k.src
                            15554 ; 2267 |#define RSRC_WOW44K 950    
                            15555 ; 2268 |//$FILENAME wow48k.src
                            15556 ; 2269 |#define RSRC_WOW48K 951    
                            15557 ; 2270 |
                            15558 ; 2271 |//$FILENAME wow16k_Y.src
                            15559 ; 2272 |#define RSRC_WOW16K_Y 952    
                            15560 ; 2273 |//$FILENAME wow32k_Y.src
                            15561 ; 2274 |#define RSRC_WOW32K_Y 953    
                            15562 ; 2275 |//$FILENAME wow8k_Y.src
                            15563 ; 2276 |#define RSRC_WOW8K_Y 954    
                            15564 ; 2277 |//$FILENAME wow11k_Y.src
                            15565 ; 2278 |#define RSRC_WOW11K_Y 955    
                            15566 ; 2279 |//$FILENAME wow22k_Y.src
                            15567 ; 2280 |#define RSRC_WOW22K_Y 956    
                            15568 ; 2281 |//$FILENAME wow24k_Y.src
                            15569 ; 2282 |#define RSRC_WOW24K_Y 957    
                            15570 ; 2283 |//$FILENAME wow44k_Y.src
                            15571 ; 2284 |#define RSRC_WOW44K_Y 958    
                            15572 ; 2285 |//$FILENAME wow48k_Y.src
                            15573 ; 2286 |#define RSRC_WOW48K_Y 959    
                            15574 ; 2287 |
                            15575 ; 2288 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15576 ; 2289 |// Audible Section Navigation
                            15577 ; 2290 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15578 ; 2291 |//$FILENAME audible_secnav.src
                            15579 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                            15580 ; 2293 |
                            15581 ; 2294 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15582 ; 2295 |// PLAYLIST3 and Music Library
                            15583 ; 2296 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15584 ; 2297 |
                            15585 ; 2298 |//$FILENAME build_ml.src
                            15586 ; 2299 |#define RSRC_BUILD_ML 961    
                            15587 ; 2300 |//$FILENAME build_ml_warning.src
                            15588 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                            15589 ; 2302 |//$FILENAME build_ml_warning2.src
                            15590 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                            15591 ; 2304 |//$FILENAME build_flash1.src
                            15592 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                            15593 ; 2306 |//$FILENAME build_flash2.src
                            15594 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                            15595 ; 2308 |//$FILENAME build_flash3.src
                            15596 ; 2309 |#define RSRC_BUILD_FLASH3 966    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 263

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15597 ; 2310 |//$FILENAME build_sd1.src
                            15598 ; 2311 |#define RSRC_BUILD_SD1 967    
                            15599 ; 2312 |//$FILENAME build_sd2.src
                            15600 ; 2313 |#define RSRC_BUILD_SD2 968    
                            15601 ; 2314 |//$FILENAME build_sd3.src
                            15602 ; 2315 |#define RSRC_BUILD_SD3 969    
                            15603 ; 2316 |//$FILENAME build_newmusic.src
                            15604 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                            15605 ; 2318 |//$FILENAME sdmd.src
                            15606 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
                            15607 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                            15608 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                            15609 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                            15610 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
                            15611 ; 2324 |//$FILENAME MusicLibBuildModule.src
                            15612 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                            15613 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                            15614 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                            15615 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                            15616 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                            15617 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                            15618 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                            15619 ; 2332 |//$FILENAME MusicLibPlayModule.src
                            15620 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                            15621 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                            15622 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                            15623 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                            15624 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                            15625 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                            15626 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                            15627 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                            15628 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                            15629 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                            15630 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                            15631 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                            15632 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                            15633 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                            15634 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                            15635 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                            15636 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                            15637 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                            15638 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                            15639 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                            15640 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                            15641 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                            15642 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                            15643 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
                            15644 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                            15645 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                            15646 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                            15647 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                            15648 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                            15649 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                            15650 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                            15651 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                            15652 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                            15653 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                            15654 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                            15655 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                            15656 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                            15657 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                            15658 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 264

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15659 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                            15660 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                            15661 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                            15662 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                            15663 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                            15664 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                            15665 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
                            15666 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                            15667 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                            15668 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
                            15669 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                            15670 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                            15671 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                            15672 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                            15673 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                            15674 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                            15675 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                            15676 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                            15677 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                            15678 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                            15679 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                            15680 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                            15681 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                            15682 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                            15683 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                            15684 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                            15685 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                            15686 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                            15687 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                            15688 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                            15689 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                            15690 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                            15691 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                            15692 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                            15693 ; 2406 |//$FILENAME MusicLibMergeFunction.src
                            15694 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                            15695 ; 2408 |//$FILENAME MusicLibMergeModule.src
                            15696 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                            15697 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                            15698 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                            15699 ; 2412 |//$FILENAME playmusicmenu.src
                            15700 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                            15701 ; 2414 |//$FILENAME browsemenu.src
                            15702 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                            15703 ; 2416 |//$FILENAME browsemenu_extra.src
                            15704 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                            15705 ; 2418 |//$FILENAME string_play_all.src
                            15706 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                            15707 ; 2420 |//$FILENAME string_play.src
                            15708 ; 2421 |#define RSRC_STRING_PLAY 1022    
                            15709 ; 2422 |//$FILENAME string_unknown_year.src
                            15710 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                            15711 ; 2424 |//$FILENAME string_year_width.src
                            15712 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                            15713 ; 2426 |//$FILENAME string_artist.src
                            15714 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                            15715 ; 2428 |//$FILENAME string_songs.src
                            15716 ; 2429 |#define RSRC_STRING_SONGS 1026    
                            15717 ; 2430 |//$FILENAME string_on_the_fly.src
                            15718 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                            15719 ; 2432 |//$FILENAME string_new_music.src
                            15720 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 265

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15721 ; 2434 |//$FILENAME string_genre.src
                            15722 ; 2435 |#define RSRC_STRING_GENRE 1029    
                            15723 ; 2436 |//$FILENAME string_year.src
                            15724 ; 2437 |#define RSRC_STRING_YEAR 1030    
                            15725 ; 2438 |//$FILENAME string_playlist.src
                            15726 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                            15727 ; 2440 |//$FILENAME string_fm_rec.src
                            15728 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                            15729 ; 2442 |//$FILENAME string_linein_rec.src
                            15730 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
                            15731 ; 2444 |//$FILENAME string_play_music.src
                            15732 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                            15733 ; 2446 |//$FILENAME highlight_back.src
                            15734 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                            15735 ; 2448 |//$FILENAME newmusicmenu.src
                            15736 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                            15737 ; 2450 |//$FILENAME string_1_day.src
                            15738 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                            15739 ; 2452 |//$FILENAME string_1_week.src
                            15740 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                            15741 ; 2454 |//$FILENAME string_1_month.src
                            15742 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                            15743 ; 2456 |//$FILENAME on_the_fly_full.src
                            15744 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                            15745 ; 2458 |//$FILENAME on_the_fly_free1.src
                            15746 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                            15747 ; 2460 |//$FILENAME on_the_fly_free2.src
                            15748 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                            15749 ; 2462 |//$FILENAME on_the_fly_delete1.src
                            15750 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                            15751 ; 2464 |//$FILENAME on_the_fly_delete2.src
                            15752 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                            15753 ; 2466 |//$FILENAME empty_favourite.src
                            15754 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                            15755 ; 2468 |//$FILENAME sd_remove.src
                            15756 ; 2469 |#define RSRC_SD_REMOVE 1046    
                            15757 ; 2470 |//$FILENAME sd_insert.src
                            15758 ; 2471 |#define RSRC_SD_INSERT 1047    
                            15759 ; 2472 |//$FILENAME check_disk_1.src
                            15760 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                            15761 ; 2474 |//$FILENAME check_disk_2.src
                            15762 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                            15763 ; 2476 |//$FILENAME check_disk_3.src
                            15764 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                            15765 ; 2478 |//$FILENAME flash_error.src
                            15766 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                            15767 ; 2480 |
                            15768 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15769 ; 2482 |// STFM1000 Tuner funclet
                            15770 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15771 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                            15772 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                            15773 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                            15774 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                            15775 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                            15776 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                            15777 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                            15778 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                            15779 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                            15780 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                            15781 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                            15782 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 266

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15783 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                            15784 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                            15785 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                            15786 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                            15787 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                            15788 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                            15789 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
                            15790 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                            15791 ; 2504 |//$FILENAME decstfmmod.src
                            15792 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
                            15793 ; 2506 |//$FILENAME dec_stfmp.src
                            15794 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                            15795 ; 2508 |//$FILENAME dec_stfmx.src
                            15796 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                            15797 ; 2510 |//$FILENAME dec_stfmy.src
                            15798 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                            15799 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                            15800 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                            15801 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                            15802 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                            15803 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                            15804 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                            15805 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                            15806 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                            15807 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                            15808 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                            15809 ; 2522 |//$FILENAME Funclet_I2CReset.src
                            15810 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                            15811 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                            15812 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                            15813 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                            15814 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                            15815 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                            15816 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                            15817 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                            15818 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                            15819 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                            15820 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                            15821 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                            15822 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                            15823 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaB
                                  ias.src
                            15824 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookF
                                  orPilot.src
                            15825 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                            15826 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                            15827 ; 2540 |// for RestoreDriveFromBackup
                            15828 ; 2541 |//$FILENAME restoresysdrive.src
                            15829 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                            15830 ; 2543 |
                            15831 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15832 ; 2545 |// Playlist5 sources
                            15833 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15834 ; 2547 |//$FILENAME playlist5_browsemenu.src
                            15835 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                            15836 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                            15837 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                            15838 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                            15839 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                            15840 ; 2553 |//$FILENAME playlist5_playback_module.src
                            15841 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                            15842 ; 2555 |//$FILENAME playlist5_browse_module.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 267

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15843 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                            15844 ; 2557 |
                            15845 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                            15846 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                            15847 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                            15848 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                            15849 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
                            15850 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                            15851 ; 2564 |
                            15852 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15853 ; 2566 |// DanhNguyen added bitmaps
                            15854 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            15855 ; 2568 |//$FILENAME icon_folder.src
                            15856 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                            15857 ; 2570 |//$FILENAME icon_song.src
                            15858 ; 2571 |#define RSRC_ICON_SONG 1089    
                            15859 ; 2572 |
                            15860 ; 2573 |//$FILENAME menu_music.src
                            15861 ; 2574 |#define RSRC_MENU_MUSIC 1090    
                            15862 ; 2575 |//$FILENAME vie_menu_music.src
                            15863 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                            15864 ; 2577 |
                            15865 ; 2578 |//$FILENAME menu_voice.src
                            15866 ; 2579 |#define RSRC_MENU_VOICE 1092    
                            15867 ; 2580 |//$FILENAME vie_menu_voice.src
                            15868 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                            15869 ; 2582 |
                            15870 ; 2583 |//$FILENAME menu_fmtuner.src
                            15871 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                            15872 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                            15873 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                            15874 ; 2587 |
                            15875 ; 2588 |//$FILENAME menu_record.src
                            15876 ; 2589 |#define RSRC_MENU_RECORD 1096    
                            15877 ; 2590 |//$FILENAME vie_menu_record.src
                            15878 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                            15879 ; 2592 |
                            15880 ; 2593 |//$FILENAME menu_settings.src
                            15881 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                            15882 ; 2595 |//$FILENAME vie_menu_settings.src
                            15883 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                            15884 ; 2597 |
                            15885 ; 2598 |//$FILENAME menu_shutdown.src
                            15886 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                            15887 ; 2600 |//$FILENAME vie_menu_shutdown.src
                            15888 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                            15889 ; 2602 |
                            15890 ; 2603 |//$FILENAME menu_clock.src
                            15891 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                            15892 ; 2605 |//$FILENAME vie_menu_clock.src
                            15893 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                            15894 ; 2607 |
                            15895 ; 2608 |//$FILENAME menu_ab.src
                            15896 ; 2609 |#define RSRC_MENU_AB 1104    
                            15897 ; 2610 |//$FILENAME vie_menu_ab.src
                            15898 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                            15899 ; 2612 |
                            15900 ; 2613 |//$FILENAME menu_delete.src
                            15901 ; 2614 |#define RSRC_MENU_DELETE 1106    
                            15902 ; 2615 |//$FILENAME vie_menu_delete.src
                            15903 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                            15904 ; 2617 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 268

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15905 ; 2618 |//$FILENAME menu_about.src
                            15906 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                            15907 ; 2620 |//$FILENAME vie_menu_about.src
                            15908 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                            15909 ; 2622 |
                            15910 ; 2623 |//$FILENAME menu_exit.src
                            15911 ; 2624 |#define RSRC_MENU_EXIT 1110    
                            15912 ; 2625 |//$FILENAME vie_menu_exit.src
                            15913 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                            15914 ; 2627 |
                            15915 ; 2628 |//$FILENAME music_play_all.src
                            15916 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                            15917 ; 2630 |//$FILENAME vie_music_play_all.src
                            15918 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                            15919 ; 2632 |
                            15920 ; 2633 |//$FILENAME music_folder_internal.src
                            15921 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                            15922 ; 2635 |//$FILENAME vie_music_folder_internal.src
                            15923 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                            15924 ; 2637 |
                            15925 ; 2638 |//$FILENAME music_folder_external.src
                            15926 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                            15927 ; 2640 |//$FILENAME vie_music_folder_external.src
                            15928 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                            15929 ; 2642 |
                            15930 ; 2643 |//$FILENAME music_songs.src
                            15931 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                            15932 ; 2645 |//$FILENAME vie_music_songs.src
                            15933 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                            15934 ; 2647 |
                            15935 ; 2648 |//$FILENAME music_favorites.src
                            15936 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                            15937 ; 2650 |//$FILENAME vie_music_favorites.src
                            15938 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                            15939 ; 2652 |
                            15940 ; 2653 |//$FILENAME music_fm_record.src
                            15941 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                            15942 ; 2655 |//$FILENAME vie_music_fm_record.src
                            15943 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                            15944 ; 2657 |
                            15945 ; 2658 |//$FILENAME music_exit.src
                            15946 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
                            15947 ; 2660 |//$FILENAME vie_music_exit.src
                            15948 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                            15949 ; 2662 |
                            15950 ; 2663 |//$FILENAME browse_music_folder_internal.src
                            15951 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
                            15952 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                            15953 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                            15954 ; 2667 |
                            15955 ; 2668 |//$FILENAME browse_music_folder_external.src
                            15956 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                            15957 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                            15958 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                            15959 ; 2672 |
                            15960 ; 2673 |//$FILENAME browse_music_list_songs.src
                            15961 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                            15962 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                            15963 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                            15964 ; 2677 |
                            15965 ; 2678 |//$FILENAME browse_music_favourites.src
                            15966 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 269

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15967 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                            15968 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                            15969 ; 2682 |
                            15970 ; 2683 |//$FILENAME browse_music_fm_files.src
                            15971 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                            15972 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                            15973 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
                            15974 ; 2687 |
                            15975 ; 2688 |//$FILENAME browse_voice.src
                            15976 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
                            15977 ; 2690 |//$FILENAME vie_browse_voice.src
                            15978 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                            15979 ; 2692 |
                            15980 ; 2693 |//$FILENAME favourites_list_add.src
                            15981 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                            15982 ; 2695 |//$FILENAME vie_favourites_list_add.src
                            15983 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                            15984 ; 2697 |
                            15985 ; 2698 |//$FILENAME favourites_list_remove.src
                            15986 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                            15987 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                            15988 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                            15989 ; 2702 |
                            15990 ; 2703 |//$FILENAME favourites_list_is_full.src
                            15991 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                            15992 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                            15993 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                            15994 ; 2707 |
                            15995 ; 2708 |//$FILENAME about_screen_1.src
                            15996 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                            15997 ; 2710 |//$FILENAME vie_about_screen_1.src
                            15998 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                            15999 ; 2712 |
                            16000 ; 2713 |//$FILENAME about_screen_2.src
                            16001 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                            16002 ; 2715 |//$FILENAME vie_about_screen_2.src
                            16003 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                            16004 ; 2717 |
                            16005 ; 2718 |//$FILENAME about_screen_3.src
                            16006 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                            16007 ; 2720 |//$FILENAME vie_about_screen_3.src
                            16008 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                            16009 ; 2722 |
                            16010 ; 2723 |//$FILENAME about_screen_4.src
                            16011 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                            16012 ; 2725 |//$FILENAME vie_about_screen_4.src
                            16013 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
                            16014 ; 2727 |
                            16015 ; 2728 |//$FILENAME time_date_exit_title.src
                            16016 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                            16017 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                            16018 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                            16019 ; 2732 |
                            16020 ; 2733 |//$FILENAME time_clean_desktop.src
                            16021 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                            16022 ; 2735 |//$FILENAME time_dash.src
                            16023 ; 2736 |#define RSRC_TIME_DASH 1155    
                            16024 ; 2737 |
                            16025 ; 2738 |//$FILENAME time_day_7.src
                            16026 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                            16027 ; 2740 |//$FILENAME vie_time_day_7.src
                            16028 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 270

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16029 ; 2742 |//$FILENAME time_day_cn.src
                            16030 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                            16031 ; 2744 |//$FILENAME vie_time_day_cn.src
                            16032 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                            16033 ; 2746 |//$FILENAME time_day_2.src
                            16034 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                            16035 ; 2748 |//$FILENAME vie_time_day_2.src
                            16036 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                            16037 ; 2750 |//$FILENAME time_day_3.src
                            16038 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
                            16039 ; 2752 |//$FILENAME vie_time_day_3.src
                            16040 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                            16041 ; 2754 |//$FILENAME time_day_4.src
                            16042 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                            16043 ; 2756 |//$FILENAME vie_time_day_4.src
                            16044 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                            16045 ; 2758 |//$FILENAME time_day_5.src
                            16046 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                            16047 ; 2760 |//$FILENAME vie_time_day_5.src
                            16048 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                            16049 ; 2762 |//$FILENAME time_day_6.src
                            16050 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                            16051 ; 2764 |//$FILENAME vie_time_day_6.src
                            16052 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                            16053 ; 2766 |
                            16054 ; 2767 |//$FILENAME time_month_1.src
                            16055 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                            16056 ; 2769 |//$FILENAME vie_time_month_1.src
                            16057 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                            16058 ; 2771 |//$FILENAME time_month_2.src
                            16059 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                            16060 ; 2773 |//$FILENAME vie_time_month_2.src
                            16061 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                            16062 ; 2775 |//$FILENAME time_month_3.src
                            16063 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                            16064 ; 2777 |//$FILENAME vie_time_month_3.src
                            16065 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                            16066 ; 2779 |//$FILENAME time_month_4.src
                            16067 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                            16068 ; 2781 |//$FILENAME vie_time_month_4.src
                            16069 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                            16070 ; 2783 |//$FILENAME time_month_5.src
                            16071 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                            16072 ; 2785 |//$FILENAME vie_time_month_5.src
                            16073 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                            16074 ; 2787 |//$FILENAME time_month_6.src
                            16075 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
                            16076 ; 2789 |//$FILENAME vie_time_month_6.src
                            16077 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                            16078 ; 2791 |//$FILENAME time_month_7.src
                            16079 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                            16080 ; 2793 |//$FILENAME vie_time_month_7.src
                            16081 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                            16082 ; 2795 |//$FILENAME time_month_8.src
                            16083 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                            16084 ; 2797 |//$FILENAME vie_time_month_8.src
                            16085 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                            16086 ; 2799 |//$FILENAME time_month_9.src
                            16087 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                            16088 ; 2801 |//$FILENAME vie_time_month_9.src
                            16089 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                            16090 ; 2803 |//$FILENAME time_month_10.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 271

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16091 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                            16092 ; 2805 |//$FILENAME vie_time_month_10.src
                            16093 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                            16094 ; 2807 |//$FILENAME time_month_11.src
                            16095 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                            16096 ; 2809 |//$FILENAME vie_time_month_11.src
                            16097 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
                            16098 ; 2811 |//$FILENAME time_month_12.src
                            16099 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                            16100 ; 2813 |//$FILENAME vie_time_month_12.src
                            16101 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                            16102 ; 2815 |
                            16103 ; 2816 |//$FILENAME time_num_am.src
                            16104 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                            16105 ; 2818 |//$FILENAME time_num_am.src
                            16106 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                            16107 ; 2820 |//$FILENAME settime_format_12h.src
                            16108 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                            16109 ; 2822 |//$FILENAME settime_format_24h.src
                            16110 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                            16111 ; 2824 |//$FILENAME setdate_format_dmy.src
                            16112 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
                            16113 ; 2826 |//$FILENAME setdate_format_mdy.src
                            16114 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                            16115 ; 2828 |//$FILENAME setdate_format_ymd.src
                            16116 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                            16117 ; 2830 |
                            16118 ; 2831 |//$FILENAME time_num_large_0.src
                            16119 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                            16120 ; 2833 |//$FILENAME time_num_large_1.src
                            16121 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                            16122 ; 2835 |//$FILENAME time_num_large_2.src
                            16123 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                            16124 ; 2837 |//$FILENAME time_num_large_3.src
                            16125 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                            16126 ; 2839 |//$FILENAME time_num_large_4.src
                            16127 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                            16128 ; 2841 |//$FILENAME time_num_large_5.src
                            16129 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                            16130 ; 2843 |//$FILENAME time_num_large_6.src
                            16131 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                            16132 ; 2845 |//$FILENAME time_num_large_7.src
                            16133 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                            16134 ; 2847 |//$FILENAME time_num_large_8.src
                            16135 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                            16136 ; 2849 |//$FILENAME time_num_large_9.src
                            16137 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
                            16138 ; 2851 |
                            16139 ; 2852 |//$FILENAME time_num_medium_0.src
                            16140 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                            16141 ; 2854 |//$FILENAME time_num_medium_1.src
                            16142 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                            16143 ; 2856 |//$FILENAME time_num_medium_2.src
                            16144 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                            16145 ; 2858 |//$FILENAME time_num_medium_3.src
                            16146 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                            16147 ; 2860 |//$FILENAME time_num_medium_4.src
                            16148 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                            16149 ; 2862 |//$FILENAME time_num_medium_5.src
                            16150 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                            16151 ; 2864 |//$FILENAME time_num_medium_6.src
                            16152 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 272

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16153 ; 2866 |//$FILENAME time_num_medium_7.src
                            16154 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                            16155 ; 2868 |//$FILENAME time_num_medium_8.src
                            16156 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                            16157 ; 2870 |//$FILENAME time_num_medium_9.src
                            16158 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                            16159 ; 2872 |
                            16160 ; 2873 |//$FILENAME time_colon.src
                            16161 ; 2874 |#define RSRC_TIME_COLON 1221    
                            16162 ; 2875 |
                            16163 ; 2876 |//$FILENAME settings_backlight_title.src
                            16164 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                            16165 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                            16166 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                            16167 ; 2880 |//$FILENAME settings_playmode_title.src
                            16168 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                            16169 ; 2882 |
                            16170 ; 2883 |//$FILENAME settings_contrast_title.src
                            16171 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                            16172 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                            16173 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                            16174 ; 2887 |
                            16175 ; 2888 |//$FILENAME settings_eq_title.src
                            16176 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                            16177 ; 2890 |//$FILENAME vie_settings_eq_title.src
                            16178 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                            16179 ; 2892 |
                            16180 ; 2893 |//$FILENAME settings_exit_title.src
                            16181 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                            16182 ; 2895 |//$FILENAME vie_settings_exit_title.src
                            16183 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                            16184 ; 2897 |
                            16185 ; 2898 |//$FILENAME settings_set_date_title.src
                            16186 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                            16187 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                            16188 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                            16189 ; 2902 |
                            16190 ; 2903 |//$FILENAME settings_set_time_title.src
                            16191 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                            16192 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                            16193 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                            16194 ; 2907 |
                            16195 ; 2908 |//$FILENAME settings_playmode_normal.src
                            16196 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                            16197 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
                            16198 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                            16199 ; 2912 |
                            16200 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                            16201 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                            16202 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                            16203 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                            16204 ; 2917 |
                            16205 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                            16206 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                            16207 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                            16208 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                            16209 ; 2922 |
                            16210 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                            16211 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                            16212 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                            16213 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                            16214 ; 2927 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 273

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16215 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                            16216 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                            16217 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                            16218 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                            16219 ; 2932 |
                            16220 ; 2933 |//$FILENAME settings_backlight_on.src
                            16221 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
                            16222 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                            16223 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                            16224 ; 2937 |
                            16225 ; 2938 |//$FILENAME settings_backlight_10s.src
                            16226 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                            16227 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                            16228 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                            16229 ; 2942 |
                            16230 ; 2943 |//$FILENAME settings_backlight_20s.src
                            16231 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                            16232 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                            16233 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                            16234 ; 2947 |
                            16235 ; 2948 |//$FILENAME settings_backlight_30s.src
                            16236 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                            16237 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                            16238 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                            16239 ; 2952 |
                            16240 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                            16241 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                            16242 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                            16243 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                            16244 ; 2957 |
                            16245 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                            16246 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                            16247 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                            16248 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                            16249 ; 2962 |
                            16250 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                            16251 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                            16252 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                            16253 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                            16254 ; 2967 |
                            16255 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                            16256 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                            16257 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                            16258 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                            16259 ; 2972 |
                            16260 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                            16261 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
                            16262 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                            16263 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                            16264 ; 2977 |
                            16265 ; 2978 |//$FILENAME settings_languages_eng.src
                            16266 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                            16267 ; 2980 |//$FILENAME settings_languages_vie.src
                            16268 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                            16269 ; 2982 |
                            16270 ; 2983 |//$FILENAME fraction_dot.src
                            16271 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                            16272 ; 2985 |
                            16273 ; 2986 |//$FILENAME fm_background.src
                            16274 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                            16275 ; 2988 |//$FILENAME vie_fm_background.src
                            16276 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 274

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16277 ; 2990 |
                            16278 ; 2991 |//$FILENAME searching_please_wait.src
                            16279 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                            16280 ; 2993 |//$FILENAME vie_searching_please_wait.src
                            16281 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                            16282 ; 2995 |
                            16283 ; 2996 |//$FILENAME fm_auto_search.src
                            16284 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                            16285 ; 2998 |//$FILENAME vie_fm_auto_search.src
                            16286 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
                            16287 ; 3000 |
                            16288 ; 3001 |//$FILENAME jvj_shutdown_player.src
                            16289 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                            16290 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                            16291 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                            16292 ; 3005 |
                            16293 ; 3006 |#endif //IF (!@def(resources))
                            16294 ; 3007 |
                            16295 
                            16297 
                            16298 ; 12   |#include "project.h"
                            16299 
                            16301 
                            16302 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            16303 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                            16304 ; 3    |//  Filename: project.inc
                            16305 ; 4    |//  Description: 
                            16306 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            16307 ; 6    |
                            16308 ; 7    |#if (!defined(_PROJECT_INC))
                            16309 ; 8    |#define _PROJECT_INC 1
                            16310 ; 9    |
                            16311 ; 10   |#if defined(STMP_BUILD_PLAYER)
                            16312 ; 11   |#include "hwequ.h"
                            16313 ; 12   |#else 
                            16314 ; 13   |//include "regscodec.inc"
                            16315 ; 14   |#endif
                            16316 ; 15   |
                            16317 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            16318 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            16319 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            16320 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            16321 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            16322 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            16323 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            16324 ; 23   |
                            16325 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            16326 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            16327 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            16328 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            16329 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            16330 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            16331 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            16332 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 275

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16333 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            16334 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            16335 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            16336 ; 35   |
                            16337 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            16338 ; 37   |// MEDIA DEFINITIONS
                            16339 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            16340 ; 39   |
                            16341 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            16342 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            16343 ; 42   |#if defined(NAND1)
                            16344 ; 43   |#define SM_INTERNAL_CHIPS 1
                            16345 ; 44   |#else 
                            16346 ; 45   |#if defined(NAND2)
                            16347 ; 46   |#define SM_INTERNAL_CHIPS 2
                            16348 ; 47   |#else 
                            16349 ; 48   |#if defined(NAND3)
                            16350 ; 49   |#define SM_INTERNAL_CHIPS 3
                            16351 ; 50   |#else 
                            16352 ; 51   |#if defined(NAND4)
                            16353 ; 52   |#define SM_INTERNAL_CHIPS 4
                            16354 ; 53   |#else 
                            16355 ; 54   |#define SM_INTERNAL_CHIPS 1
                            16356 ; 55   |#endif
                            16357 ; 56   |#endif
                            16358 ; 57   |#endif
                            16359 ; 58   |#endif
                            16360 ; 59   |
                            16361 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            16362 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            16363 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            16364 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            16365 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            16366 ; 65   |//*** comment out if active high ****
                            16367 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            16368 ; 67   |
                            16369 ; 68   |#if defined(SMEDIA)
                            16370 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            16371 ; 70   |#define NUM_SM_EXTERNAL 1
                            16372 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            16373 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            16374 ; 73   |#else 
                            16375 ; 74   |#if defined(MMC)
                            16376 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            16377 ; 76   |#define NUM_SM_EXTERNAL 0
                            16378 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            16379 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            16380 ; 79   |#else 
                            16381 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            16382 ; 81   |#define NUM_SM_EXTERNAL 0
                            16383 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            16384 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            16385 ; 84   |#endif
                            16386 ; 85   |#endif
                            16387 ; 86   |
                            16388 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            16389 ; 88   |// Mass Storage Class definitions
                            16390 ; 89   |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 276

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16391 ; 90   |// Set to 0 if Composite Device build is desired.    
                            16392 ; 91   |#define MULTI_LUN_BUILD 1   
                            16393 ; 92   |
                            16394 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            16395 ; 94   |//  SCSI
                            16396 ; 95   |#if (MULTI_LUN_BUILD==0)
                            16397 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16398 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            16399 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16400 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            16401 ; 100  |  #else
                            16402 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            16403 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16404 ; 103  |  #endif
                            16405 ; 104  |#else
                            16406 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            16407 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16408 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            16409 ; 108  |  #else
                            16410 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            16411 ; 110  |  #endif
                            16412 ; 111  |#endif
                            16413 ; 112  |
                            16414 ; 113  |
                            16415 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            16416 ; 115  |
                            16417 ; 116  |
                            16418 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            16419 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            16420 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            16421 ; 120  |#ifdef MMC
                            16422 ; 121  |#ifdef MTP_BUILD
                            16423 ; 122  |// --------------------
                            16424 ; 123  |// MTP and MMC
                            16425 ; 124  |// --------------------
                            16426 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            16427 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            16428 ; 127  |#else  // ifndef MTP_BUILD
                            16429 ; 128  |#ifdef STMP_BUILD_PLAYER
                            16430 ; 129  |// --------------------
                            16431 ; 130  |// Player and MMC
                            16432 ; 131  |// --------------------
                            16433 ; 132  |#else
                            16434 ; 133  |// --------------------
                            16435 ; 134  |// USBMSC and MMC
                            16436 ; 135  |// --------------------
                            16437 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            16438 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            16439 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            16440 ; 139  |#endif // ifdef MTP_BUILD
                            16441 ; 140  |#else  // ifndef MMC
                            16442 ; 141  |#ifdef MTP_BUILD
                            16443 ; 142  |// --------------------
                            16444 ; 143  |// MTP and NAND only
                            16445 ; 144  |// --------------------
                            16446 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            16447 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            16448 ; 147  |#else  // ifndef MTP_BUILD
                            16449 ; 148  |#ifdef STMP_BUILD_PLAYER
                            16450 ; 149  |// --------------------
                            16451 ; 150  |// Player and NAND only
                            16452 ; 151  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 277

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16453 ; 152  |#else
                            16454 ; 153  |// --------------------
                            16455 ; 154  |// USBMSC and NAND only
                            16456 ; 155  |// --------------------
                            16457 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            16458 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            16459 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            16460 ; 159  |#endif // ifdef MTP_BUILD
                            16461 ; 160  |#endif // ifdef MMC 
                            16462 ; 161  |
                            16463 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            16464 ; 163  |#if (defined(MTP_BUILD))
                            16465 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            16466 ; 165  |
                            16467 ; 166  |////!
                            16468 ; 167  |////! This varible holds the watchdog count for the store flush.
                            16469 ; 168  |////!
                            16470 ; 169  |///
                            16471 ; 170  |#include <types.h>
                            16472 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            16473 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            16474 ; 173  |#endif
                            16475 ; 174  |
                            16476 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            16477 ; 176  |// These are needed here for Mass Storage Class
                            16478 ; 177  |// Needs to be cleaned up
                            16479 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            16480 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            16481 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            16482 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            16483 ; 182  |
                            16484 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            16485 ; 184  |
                            16486 ; 185  |#endif
                            16487 ; 186  |
                            16488 ; 187  |
                            16489 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            16490 ; 189  |// SmartMedia/NAND defs
                            16491 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16492 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            16493 ; 192  |
                            16494 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            16495 ; 194  |// Sysloadresources defs
                            16496 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16497 ; 196  |
                            16498 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            16499 ; 198  |// MMC defs
                            16500 ; 199  |#define MMC_MAX_PARTITIONS 1
                            16501 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            16502 ; 201  |
                            16503 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            16504 ; 203  |// SPI defs
                            16505 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            16506 ; 205  |
                            16507 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            16508 ; 207  |// Global media defs
                            16509 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            16510 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            16511 ; 210  |
                            16512 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            16513 ; 212  |// DO NOT CHANGE THESE!!!
                            16514 ; 213  |#define SM_MAX_PARTITIONS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 278

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16515 ; 214  |#define MAX_HANDLES 2
                            16516 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            16517 ; 216  |
                            16518 ; 217  |
                            16519 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            16520 ; 219  |// Battery LRADC Values 
                            16521 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            16522 ; 221  |// brownout trip point in mV (moved by RS)
                            16523 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            16524 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            16525 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            16526 ; 225  |//     audio recording to media.
                            16527 ; 226  |#define BATT_SAFETY_MARGIN 10
                            16528 ; 227  |
                            16529 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            16530 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            16531 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            16532 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            16533 ; 232  |
                            16534 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            16535 ; 234  |
                            16536 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            16537 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            16538 ; 237  |#if (!defined(CLCD))
                            16539 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            16540 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            16541 ; 240  |#else 
                            16542 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            16543 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            16544 ; 243  |#endif
                            16545 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            16546 ; 245  |
                            16547 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            16548 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            16549 ; 248  |// See mp3 encoder overlay.
                            16550 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            16551 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            16552 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            16553 ; 252  |
                            16554 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            16555 ; 254  |// Voice recording filenames
                            16556 ; 255  |// number of digits in filename Vxxx.wav
                            16557 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            16558 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            16559 ; 258  |
                            16560 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            16561 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            16562 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            16563 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            16564 ; 263  |#if defined(DEVICE_3500)
                            16565 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            16566 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            16567 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            16568 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            16569 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16570 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 279

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16571 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            16572 ; 271  |
                            16573 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            16574 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            16575 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                            16576 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            16577 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            16578 ; 277  |
                            16579 ; 278  |#else 
                            16580 ; 279  |// STMP3410
                            16581 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            16582 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16583 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            16584 ; 283  |#endif
                            16585 ; 284  |
                            16586 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            16587 ; 286  |// Number of available soft timers
                            16588 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            16589 ; 288  |#if defined(SYNC_LYRICS)
                            16590 ; 289  |#define SOFT_TIMERS 10
                            16591 ; 290  |#else 
                            16592 ; 291  |#if defined(JPEG_DECODER)
                            16593 ; 292  |#define SOFT_TIMERS 10
                            16594 ; 293  |#else 
                            16595 ; 294  |#define SOFT_TIMERS 9
                            16596 ; 295  |#endif
                            16597 ; 296  |#endif
                            16598 ; 297  |
                            16599 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            16600 ; 299  |//  sizes
                            16601 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            16602 ; 301  |#if defined(MMC)
                            16603 ; 302  |#if defined(USE_PLAYLIST5)
                            16604 ; 303  |#define MENU_STACK_SIZE 1500
                            16605 ; 304  |#else 
                            16606 ; 305  |#define MENU_STACK_SIZE 1250
                            16607 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            16608 ; 307  |#else 
                            16609 ; 308  |#if defined(USE_PLAYLIST5)
                            16610 ; 309  |#define MENU_STACK_SIZE 1500
                            16611 ; 310  |#else 
                            16612 ; 311  |#define MENU_STACK_SIZE 1250
                            16613 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            16614 ; 313  |#endif //if @def('MMC')
                            16615 ; 314  |
                            16616 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            16617 ; 316  |// 
                            16618 ; 317  |#define STACK_L1_SIZE 750
                            16619 ; 318  |#define STACK_L2_SIZE 100
                            16620 ; 319  |#define STACK_L3_SIZE 160
                            16621 ; 320  |
                            16622 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            16623 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            16624 ; 323  |// is ok with switching code.
                            16625 ; 324  |#if defined(MTP_BUILD)
                            16626 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            16627 ; 326  |#endif
                            16628 ; 327  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 280

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16629 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            16630 ; 329  |// maximum number of nested funclets 
                            16631 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            16632 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            16633 ; 332  |
                            16634 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            16635 ; 334  |//    LCD DEFINITIONS
                            16636 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            16637 ; 336  |
                            16638 ; 337  |#define SPACE_CHAR 0x000020          
                            16639 ; 338  |#define ZERO_CHAR 0x000030
                            16640 ; 339  |#define COLON_CHAR 0x00003A
                            16641 ; 340  |#define PERIOD_CHAR 0x00002E
                            16642 ; 341  |
                            16643 ; 342  |#if (defined(S6B33B0A_LCD))
                            16644 ; 343  |#define LCD_X_SIZE 128
                            16645 ; 344  |#define LCD_Y_SIZE 159
                            16646 ; 345  |#endif
                            16647 ; 346  |
                            16648 ; 347  |#if (defined(SED15XX_LCD))
                            16649 ; 348  |#define LCD_X_SIZE 128
                            16650 ; 349  |#define LCD_Y_SIZE 64
                            16651 ; 350  |#endif
                            16652 ; 351  |
                            16653 ; 352  |
                            16654 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            16655 ; 354  |//   Details on Customizing Contrast
                            16656 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            16657 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            16658 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            16659 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            16660 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            16661 ; 360  |//   unless the ezact sequence is remembered.
                            16662 ; 361  |//   To find out what range your player supports: 
                            16663 ; 362  |//   change these equs to full range or comment out (full range is default)
                            16664 ; 363  |//;;;;;;
                            16665 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            16666 ; 365  |// recommended calibration using player -- uncomment 
                            16667 ; 366  |//;;;;;;
                            16668 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            16669 ; 368  |////////////////////////////
                            16670 ; 369  |#if (defined(DEMO_HW))
                            16671 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            16672 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            16673 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            16674 ; 373  |#else 
                            16675 ; 374  |
                            16676 ; 375  |#if (defined(S6B33B0A_LCD))
                            16677 ; 376  |#define LCD_MAX_CONTRAST 210
                            16678 ; 377  |#define LCD_MIN_CONTRAST 160    
                            16679 ; 378  |#endif
                            16680 ; 379  |
                            16681 ; 380  |#if (defined(SED15XX_LCD))
                            16682 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            16683 ; 382  |// Engineering board regs support range [17-37].
                            16684 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            16685 ; 384  |//   One default contrast range [24-42] works for both.
                            16686 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            16687 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            16688 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            16689 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 281

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16690 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            16691 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            16692 ; 391  |
                            16693 ; 392  |#if (defined(NEWSHINGYIH))
                            16694 ; 393  |#define LCD_MAX_CONTRAST 250
                            16695 ; 394  |#define LCD_MIN_CONTRAST 0
                            16696 ; 395  |#else 
                            16697 ; 396  |//-----
                            16698 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            16699 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            16700 ; 399  |#define LCD_MAX_CONTRAST 250
                            16701 ; 400  |#define LCD_MIN_CONTRAST 0
                            16702 ; 401  |
                            16703 ; 402  |//=====
                            16704 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            16705 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            16706 ; 405  |//LCD_MAX_CONTRAST equ 42
                            16707 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            16708 ; 407  |
                            16709 ; 408  |#endif
                            16710 ; 409  |#endif
                            16711 ; 410  |
                            16712 ; 411  |#endif
                            16713 ; 412  |
                            16714 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            16715 ; 414  |// The default value of the lcd contrast in % of range
                            16716 ; 415  |//   the default value is used when no settings.dat is available
                            16717 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            16718 ; 417  |
                            16719 ; 418  |#if (defined(S6B33B0A_LCD))
                            16720 ; 419  |// 60% of range is default value
                            16721 ; 420  |#define DEFAULT_CONTRAST 50 
                            16722 ; 421  |#endif
                            16723 ; 422  |
                            16724 ; 423  |#if (defined(SED15XX_LCD))
                            16725 ; 424  |// % of range is default value (was 60%)
                            16726 ; 425  |#define DEFAULT_CONTRAST 50 
                            16727 ; 426  |#endif
                            16728 ; 427  |
                            16729 ; 428  |
                            16730 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            16731 ; 430  |// make lower when doing calibration
                            16732 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            16733 ; 432  |
                            16734 ; 433  |
                            16735 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            16736 ; 435  |// For FFWD and RWND
                            16737 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            16738 ; 437  |#define SECONDS_TO_SKIP 1
                            16739 ; 438  |#define SECONDS_TO_SKIP1 3
                            16740 ; 439  |#define SECONDS_TO_SKIP2 6
                            16741 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            16742 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            16743 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16744 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            16745 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16746 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            16747 ; 446  |
                            16748 ; 447  |// For audible FFW/RWD
                            16749 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 282

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16750 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            16751 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            16752 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            16753 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16754 ; 453  |#define LEVEL1_BOUNDARY 17 
                            16755 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16756 ; 455  |#define LEVEL2_BOUNDARY 33 
                            16757 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            16758 ; 457  |#define LEVEL3_BOUNDARY 50 
                            16759 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            16760 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            16761 ; 460  |// Short Song Time, songs too short to play.
                            16762 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            16763 ; 462  |
                            16764 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            16765 ; 464  |// MP3 Sync Values
                            16766 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            16767 ; 466  |// # bytes to look for sync before marking it bad
                            16768 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            16769 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            16770 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            16771 ; 470  |// once we have sync'd, the isr should be called this frequently
                            16772 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            16773 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            16774 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            16775 ; 474  |
                            16776 ; 475  |
                            16777 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            16778 ; 477  |//// Multi-Stage Volume Control Definitions
                            16779 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            16780 ; 479  |//// Use Multi-Stage Volume
                            16781 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            16782 ; 481  |
                            16783 ; 482  |//// Master Volume definitions
                            16784 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            16785 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            16786 ; 485  |
                            16787 ; 486  |//// DAC-Mode definitions
                            16788 ; 487  |//// Adjusts 0dB point
                            16789 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            16790 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            16791 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            16792 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            16793 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            16794 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            16795 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            16796 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            16797 ; 496  |
                            16798 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            16799 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            16800 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            16801 ; 500  |
                            16802 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            16803 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            16804 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            16805 ; 504  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 283

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16806 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            16807 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            16808 ; 507  |
                            16809 ; 508  |
                            16810 ; 509  |//// Line In definitions (used for Line-In 1)
                            16811 ; 510  |//// 0dB point of the Line In
                            16812 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            16813 ; 512  |//// Minimum volume of Line In
                            16814 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            16815 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            16816 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            16817 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            16818 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            16819 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            16820 ; 519  |
                            16821 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            16822 ; 521  |//// 0dB point of the Line In
                            16823 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            16824 ; 523  |//// Minimum volume of Line In
                            16825 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            16826 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            16827 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            16828 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            16829 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            16830 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            16831 ; 530  |
                            16832 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            16833 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            16834 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            16835 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            16836 ; 535  |
                            16837 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            16838 ; 537  |////
                            16839 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            16840 ; 539  |////
                            16841 ; 540  |///
                            16842 ; 541  |#include <types.h>
                            16843 ; 542  |extern volatile WORD g_wActivityState;
                            16844 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            16845 ; 544  |
                            16846 ; 545  |void _reentrant Init5VSense(void);
                            16847 ; 546  |void _reentrant ServiceDCDC(void);
                            16848 ; 547  |
                            16849 ; 548  |////////////////////////////////////////////////////////////////////////////
                            16850 ; 549  |//// JPEG Thumbnail Mode Setting
                            16851 ; 550  |//// number of column in thumbnail mode
                            16852 ; 551  |#define THUMBNAIL_X 2           
                            16853 ; 552  |//// number of row in  thumbnail mode
                            16854 ; 553  |#define THUMBNAIL_Y 2           
                            16855 ; 554  |//// thumbnail boundary offset x
                            16856 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            16857 ; 556  |//// thumbnail boundary offset y
                            16858 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            16859 ; 558  |
                            16860 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            16861 ; 560  |
                            16862 
                            16864 
                            16865 ; 13   |#include "stringlib.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 284

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16866 
                            16868 
                            16869 ; 1    |#ifndef STRINGLIB_H
                            16870 ; 2    |#define STRINGLIB_H
                            16871 
                            16873 
                            16874 ; 3    |_asmfunc int pack_string(UCS3 _Y * _Y pUnpacked, _packed BYTE _Y * _Y pPacked);
                            16875 ; 4    |_asmfunc int unpack_string( _packed BYTE _Y * _Y pPacked,  UCS3 _Y * _Y pUnpacked);
                            16876 ; 5    |_asmfunc int unpack_data( _packed BYTE _Y * _Y pPacked,  BYTE _Y * _Y pUnpacked, INT iCoun
                                  t);
                            16877 ; 6    |
                            16878 ; 7    |_asmfunc BYTE GetByteFromArrayInX( void _X * p,int n);
                            16879 ; 8    |_asmfunc void PutByteInArrayInX( void _X * p,int n, int newchar);
                            16880 ; 9    |_asmfunc BYTE GetByteFromArrayInY( void _Y * p,int n);
                            16881 ; 10   |_asmfunc void PutByteInArrayInY( void _Y * p,int n, int newchar);
                            16882 ; 11   |
                            16883 ; 12   |_asmfunc BYTE packed_get( _packed BYTE _Y * p,int n);
                            16884 ; 13   |_asmfunc void packed_set( _packed BYTE _Y * p,int n, int newchar);
                            16885 ; 14   |
                            16886 ; 15   |_asmfunc int packed_strlen( _packed BYTE _Y * _Y p);
                            16887 ; 16   |
                            16888 ; 17   |_asmfunc _packed BYTE _Y * packed_strncpy( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc, int iCount);
                            16889 ; 18   |_asmfunc _packed BYTE _Y * packed_strcpy ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y
                                   pSrc);
                            16890 ; 19   |
                            16891 ; 20   |
                            16892 ; 21   |_asmfunc int packed_strncmp( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight, int i
                                  Count);
                            16893 ; 22   |_asmfunc int packed_strcmp ( _packed BYTE _Y * _Y pLeft,_packed BYTE _Y * _Y pRight);
                            16894 ; 23   |
                            16895 ; 24   |_asmfunc int packed_strncat( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource, int 
                                  iCount);
                            16896 ; 25   |_asmfunc int packed_strcat ( _packed BYTE _Y * _Y pDest,_packed BYTE _Y * _Y pSource);
                            16897 ; 26   |
                            16898 ; 27   |
                            16899 ; 28   |_asmfunc int strlen(UCS3 _Y * _Y p);
                            16900 ; 29   |
                            16901 ; 30   |_asmfunc UCS3 *strchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                            16902 ; 31   |_asmfunc UCS3 *strrchr(UCS3 _Y * _Y pUnpacked, UCS3 CharToFind);
                            16903 ; 32   |
                            16904 ; 33   |_asmfunc void strncpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, BYTE iCount);
                            16905 ; 34   |_asmfunc void strcpy(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                            16906 ; 35   |
                            16907 ; 36   |_asmfunc char *strncat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                            16908 ; 37   |_asmfunc char *strcat(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                            16909 ; 38   |
                            16910 ; 39   |_asmfunc int strncmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource, int iCount);
                            16911 ; 40   |_asmfunc int strcmp(UCS3 _Y * _Y pDest, UCS3 _Y * _Y pSource);
                            16912 ; 41   |
                            16913 ; 42   |#endif
                            16914 
                            16916 
                            16917 ; 14   |#include "dbcs.h"
                            16918 
                            16920 
                            16921 ; 1    |#ifndef DBCS_H
                            16922 ; 2    |#define DBCS_H
                            16923 ; 3    |
                            16924 ; 4    |
                            16925 ; 5    |_reentrant void DBCSToUnicode(_packed unsigned char *pDBCS, WORD *pUnicode,INT iLength);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 285

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16926 ; 6    |_reentrant void DBCSToUnicodeDstXSrcY(_packed unsigned char *pDBCS, WORD _X * _X pUnicode,
                                   INT iLength);
                            16927 ; 7    |
                            16928 ; 8    |#endif
                            16929 
                            16931 
                            16932 ; 15   |#include "sysresourceapi.h"
                            16933 
                            16935 
                            16936 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16937 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2003
                            16938 ; 3    |//
                            16939 ; 4    |// File : SysResourceApi.h
                            16940 ; 5    |// Description : Structures and Functions Definitions for System Resource API
                            16941 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16942 ; 7    |
                            16943 ; 8    |#ifndef __SysResourceApi_h__
                            16944 ; 9    |#define __SysResourceApi_h__ 1
                            16945 ; 10   |
                            16946 ; 11   |#include "types.h"
                            16947 
                            16949 
                            16950 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            16951 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            16952 ; 3    |//
                            16953 ; 4    |// Filename: types.h
                            16954 ; 5    |// Description: Standard data types
                            16955 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            16956 ; 7    |
                            16957 ; 8    |#ifndef _TYPES_H
                            16958 ; 9    |#define _TYPES_H
                            16959 ; 10   |
                            16960 ; 11   |// TODO:  move this outta here!
                            16961 ; 12   |#if !defined(NOERROR)
                            16962 ; 13   |#define NOERROR 0
                            16963 ; 14   |#define SUCCESS 0
                            16964 ; 15   |#endif 
                            16965 ; 16   |#if !defined(SUCCESS)
                            16966 ; 17   |#define SUCCESS  0
                            16967 ; 18   |#endif
                            16968 ; 19   |#if !defined(ERROR)
                            16969 ; 20   |#define ERROR   -1
                            16970 ; 21   |#endif
                            16971 ; 22   |#if !defined(FALSE)
                            16972 ; 23   |#define FALSE 0
                            16973 ; 24   |#endif
                            16974 ; 25   |#if !defined(TRUE)
                            16975 ; 26   |#define TRUE  1
                            16976 ; 27   |#endif
                            16977 ; 28   |
                            16978 ; 29   |#if !defined(NULL)
                            16979 ; 30   |#define NULL 0
                            16980 ; 31   |#endif
                            16981 ; 32   |
                            16982 ; 33   |#define MAX_INT     0x7FFFFF
                            16983 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            16984 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            16985 ; 36   |#define MAX_ULONG   (-1) 
                            16986 ; 37   |
                            16987 ; 38   |#define WORD_SIZE   24              // word size in bits
                            16988 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            16989 ; 40   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 286

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16990 ; 41   |
                            16991 ; 42   |#define BYTE    unsigned char       // btVarName
                            16992 ; 43   |#define CHAR    signed char         // cVarName
                            16993 ; 44   |#define USHORT  unsigned short      // usVarName
                            16994 ; 45   |#define SHORT   unsigned short      // sVarName
                            16995 ; 46   |#define WORD    unsigned int        // wVarName
                            16996 ; 47   |#define INT     signed int          // iVarName
                            16997 ; 48   |#define DWORD   unsigned long       // dwVarName
                            16998 ; 49   |#define LONG    signed long         // lVarName
                            16999 ; 50   |#define BOOL    unsigned int        // bVarName
                            17000 ; 51   |#define FRACT   _fract              // frVarName
                            17001 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17002 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17003 ; 54   |#define FLOAT   float               // fVarName
                            17004 ; 55   |#define DBL     double              // dVarName
                            17005 ; 56   |#define ENUM    enum                // eVarName
                            17006 ; 57   |#define CMX     _complex            // cmxVarName
                            17007 ; 58   |typedef WORD UCS3;                   // 
                            17008 ; 59   |
                            17009 ; 60   |#define UINT16  unsigned short
                            17010 ; 61   |#define UINT8   unsigned char   
                            17011 ; 62   |#define UINT32  unsigned long
                            17012 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17013 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17014 ; 65   |#define WCHAR   UINT16
                            17015 ; 66   |
                            17016 ; 67   |//UINT128 is 16 bytes or 6 words
                            17017 ; 68   |typedef struct UINT128_3500 {   
                            17018 ; 69   |    int val[6];     
                            17019 ; 70   |} UINT128_3500;
                            17020 ; 71   |
                            17021 ; 72   |#define UINT128   UINT128_3500
                            17022 ; 73   |
                            17023 ; 74   |// Little endian word packed byte strings:   
                            17024 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17025 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17026 ; 77   |// Little endian word packed byte strings:   
                            17027 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17028 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17029 ; 80   |
                            17030 ; 81   |// Declare Memory Spaces To Use When Coding
                            17031 ; 82   |// A. Sector Buffers
                            17032 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17033 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17034 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17035 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17036 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17037 ; 88   |// B. Media DDI Memory
                            17038 ; 89   |#define MEDIA_DDI_MEM _Y
                            17039 ; 90   |
                            17040 ; 91   |
                            17041 ; 92   |
                            17042 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17043 ; 94   |// Examples of circular pointers:
                            17044 ; 95   |//    INT CIRC cpiVarName
                            17045 ; 96   |//    DWORD CIRC cpdwVarName
                            17046 ; 97   |
                            17047 ; 98   |#define RETCODE INT                 // rcVarName
                            17048 ; 99   |
                            17049 ; 100  |// generic bitfield structure
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 287

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17050 ; 101  |struct Bitfield {
                            17051 ; 102  |    unsigned int B0  :1;
                            17052 ; 103  |    unsigned int B1  :1;
                            17053 ; 104  |    unsigned int B2  :1;
                            17054 ; 105  |    unsigned int B3  :1;
                            17055 ; 106  |    unsigned int B4  :1;
                            17056 ; 107  |    unsigned int B5  :1;
                            17057 ; 108  |    unsigned int B6  :1;
                            17058 ; 109  |    unsigned int B7  :1;
                            17059 ; 110  |    unsigned int B8  :1;
                            17060 ; 111  |    unsigned int B9  :1;
                            17061 ; 112  |    unsigned int B10 :1;
                            17062 ; 113  |    unsigned int B11 :1;
                            17063 ; 114  |    unsigned int B12 :1;
                            17064 ; 115  |    unsigned int B13 :1;
                            17065 ; 116  |    unsigned int B14 :1;
                            17066 ; 117  |    unsigned int B15 :1;
                            17067 ; 118  |    unsigned int B16 :1;
                            17068 ; 119  |    unsigned int B17 :1;
                            17069 ; 120  |    unsigned int B18 :1;
                            17070 ; 121  |    unsigned int B19 :1;
                            17071 ; 122  |    unsigned int B20 :1;
                            17072 ; 123  |    unsigned int B21 :1;
                            17073 ; 124  |    unsigned int B22 :1;
                            17074 ; 125  |    unsigned int B23 :1;
                            17075 ; 126  |};
                            17076 ; 127  |
                            17077 ; 128  |union BitInt {
                            17078 ; 129  |        struct Bitfield B;
                            17079 ; 130  |        int        I;
                            17080 ; 131  |};
                            17081 ; 132  |
                            17082 ; 133  |#define MAX_MSG_LENGTH 10
                            17083 ; 134  |struct CMessage
                            17084 ; 135  |{
                            17085 ; 136  |        unsigned int m_uLength;
                            17086 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17087 ; 138  |};
                            17088 ; 139  |
                            17089 ; 140  |typedef struct {
                            17090 ; 141  |    WORD m_wLength;
                            17091 ; 142  |    WORD m_wMessage;
                            17092 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            17093 ; 144  |} Message;
                            17094 ; 145  |
                            17095 ; 146  |struct MessageQueueDescriptor
                            17096 ; 147  |{
                            17097 ; 148  |        int *m_pBase;
                            17098 ; 149  |        int m_iModulo;
                            17099 ; 150  |        int m_iSize;
                            17100 ; 151  |        int *m_pHead;
                            17101 ; 152  |        int *m_pTail;
                            17102 ; 153  |};
                            17103 ; 154  |
                            17104 ; 155  |struct ModuleEntry
                            17105 ; 156  |{
                            17106 ; 157  |    int m_iSignaledEventMask;
                            17107 ; 158  |    int m_iWaitEventMask;
                            17108 ; 159  |    int m_iResourceOfCode;
                            17109 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17110 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 288

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17111 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17112 ; 163  |    int m_uTimeOutHigh;
                            17113 ; 164  |    int m_uTimeOutLow;
                            17114 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17115 ; 166  |};
                            17116 ; 167  |
                            17117 ; 168  |union WaitMask{
                            17118 ; 169  |    struct B{
                            17119 ; 170  |        unsigned int m_bNone     :1;
                            17120 ; 171  |        unsigned int m_bMessage  :1;
                            17121 ; 172  |        unsigned int m_bTimer    :1;
                            17122 ; 173  |        unsigned int m_bButton   :1;
                            17123 ; 174  |    } B;
                            17124 ; 175  |    int I;
                            17125 ; 176  |} ;
                            17126 ; 177  |
                            17127 ; 178  |
                            17128 ; 179  |struct Button {
                            17129 ; 180  |        WORD wButtonEvent;
                            17130 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17131 ; 182  |};
                            17132 ; 183  |
                            17133 ; 184  |struct Message {
                            17134 ; 185  |        WORD wMsgLength;
                            17135 ; 186  |        WORD wMsgCommand;
                            17136 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17137 ; 188  |};
                            17138 ; 189  |
                            17139 ; 190  |union EventTypes {
                            17140 ; 191  |        struct CMessage msg;
                            17141 ; 192  |        struct Button Button ;
                            17142 ; 193  |        struct Message Message;
                            17143 ; 194  |};
                            17144 ; 195  |
                            17145 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17146 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17147 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17148 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17149 ; 200  |
                            17150 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17151 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17152 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17153 ; 204  |
                            17154 ; 205  |#if DEBUG
                            17155 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17156 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17157 ; 208  |#else 
                            17158 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            17159 ; 210  |#define DebugBuildAssert(x)    
                            17160 ; 211  |#endif
                            17161 ; 212  |
                            17162 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17163 ; 214  |//  #pragma asm
                            17164 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17165 ; 216  |//  #pragma endasm
                            17166 ; 217  |
                            17167 ; 218  |
                            17168 ; 219  |#ifdef COLOR_262K
                            17169 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            17170 ; 221  |#elif defined(COLOR_65K)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 289

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17171 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            17172 ; 223  |#else
                            17173 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            17174 ; 225  |#endif
                            17175 ; 226  |    
                            17176 ; 227  |#endif // #ifndef _TYPES_H
                            17177 
                            17179 
                            17180 ; 12   |
                            17181 ; 13   |#define RSRC_TYPE_STRING                1
                            17182 ; 14   |#define RSRC_TYPE_DATA                  2
                            17183 ; 15   |#define RSRC_TYPE_BITMAP                3
                            17184 ; 16   |#define RSRC_TYPE_NESTED_RESOURCE       9
                            17185 ; 17   |
                            17186 ; 18   |#define MAX_NESTED_RSC      10           // Included Root Resource
                            17187 ; 19   |#define FREE_RSC_HANDLE     0xffffff    // Code for free handle
                            17188 ; 20   |
                            17189 ; 21   |#define RS_ROOT_HANDLE                      0           // Pass this handle to open
                            17190 ; 22   |                                                        // from the root.
                            17191 ; 23   |
                            17192 ; 24   |#define RSC_MAX_HANDLE_REACHED              0x800001    // No more Nested Handles free
                            17193 ; 25   |                                                        // Maximum allocated nested resour
                                  ce handle reached
                            17194 ; 26   |                                                        // To correct error increase the n
                                  umber of MAX_NESTED_RSC
                            17195 ; 27   |#define RSC_INVALID_NESTED_HANDLE           0x800002    // The Nested Resource Handle is I
                                  nvalid
                            17196 ; 28   |                                                        // Handle >= MAX_NESTED_RSC 
                            17197 ; 29   |#define RSC_INVALID_NESTED_NOT_ITIALIZED    0x800003    // The Nested Resource Handle is n
                                  ot initialized
                            17198 ; 30   |                                                        // element RscNumber of Struct_Han
                                  dle_Nested_Rsc 
                            17199 ; 31   |                                                        // is FREE_RSC_HANDLE in 
                            17200 ; 32   |#define RSC_INVALID_RSC                     0x800004    // Resource is invalid. Resource H
                                  eader does not
                            17201 ; 33   |#define RSC_INVALID_MEM_SPACE               0x800005    // Memory Space for resource is in
                                  valid. Valid spaces are X, Y or P.
                            17202 ; 34   |#define RSC_ERROR_READING_RSC               0x800006
                            17203 ; 35   |
                            17204 ; 36   |#define TARGET_MEM_X                        0x800000
                            17205 ; 37   |#define TARGET_MEM_Y                        0x400000
                            17206 ; 38   |#define TARGET_MEM_L                        0x200000
                            17207 ; 39   |#define TARGET_MEM_P                        0x100000
                            17208 ; 40   |
                            17209 ; 41   |typedef struct {
                            17210 ; 42   |    WORD    wRscNumber;             // Nested resource number
                            17211 ; 43   |                                    // 0x00 = Root Resource
                            17212 ; 44   |                                    // 0xffff = Free Handle
                            17213 ; 45   |    WORD    wStartPosition;         // Start position data section (in bytes)
                            17214 ; 46   |    WORD    wCurrentPosition;       // Current position (in bytes)
                            17215 ; 47   |} Struct_Handle_Nested_Rsc, * pStruct_Handle_Nested_Rsc;
                            17216 ; 48   |
                            17217 ; 49   |RETCODE _reentrant SysOpenResource(WORD wRscNum, BYTE btHandleNestedParentRsc);
                            17218 ; 50   |RETCODE _reentrant SysCloseResource(BYTE btHandleNestedRsc);
                            17219 ; 51   |RETCODE _reentrant SysLoadResource(WORD wRscNum, BYTE btHandleNestedRsc, WORD wRscType,
                            17220 ; 52   |                        WORD *pwTargetBuffer, WORD wTargetSpace, WORD wMaxSize);
                            17221 ; 53   |RETCODE _reentrant SysResourceFileRead(BYTE btHandleNestedRsc, WORD wNumBytes, 
                            17222 ; 54   |                            WORD wTargetSpace, WORD *pwTargetBuffer);
                            17223 ; 55   |RETCODE _reentrant SysResourceFileSeek(BYTE btHandleNestedRsc, WORD wNumWords);           
                                               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 290

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17224 ; 56   |WORD _reentrant SysResourceFileTell(BYTE btHandleNestedRsc);
                            17225 ; 57   |void _reentrant SysSetResourceTag(WORD wTag);
                            17226 ; 58   |                   
                            17227 ; 59   |extern WORD wResourceTag;
                            17228 ; 60   |#define SysGetResourceTag(void) (wResourceTag)
                            17229 ; 61   |
                            17230 ; 62   |extern void EnterNonReentrantSection(void);
                            17231 ; 63   |extern void LeaveNonReentrantSection(void);
                            17232 ; 64   |
                            17233 ; 65   |#endif
                            17234 
                            17236 
                            17237 ; 16   |
                            17238 ; 17   |#ifdef STMP_BUILD_PLAYER
                            17239 ; 18   |#include "sysmem.h"
                            17240 
                            17242 
                            17243 ; 1    |//;******************************************************************************
                            17244 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                            17245 ; 3    |//; File: sysmem.h
                            17246 ; 4    |//; ST System Memory Externs
                            17247 ; 5    |//;******************************************************************************
                            17248 ; 6    |
                            17249 ; 7    |#ifndef SYSMEM_XREF_C
                            17250 ; 8    |#define SYSMEM_XREF_C
                            17251 ; 9    |
                            17252 ; 10   |// Variables in X
                            17253 ; 11   |extern unsigned int _X g_wDecoderCSR;
                            17254 ; 12   |extern unsigned int _X g_wDecoderSR;
                            17255 ; 13   |extern unsigned int _X g_wDecoderCSR2;  // DECODE2EOF
                            17256 ; 14   |extern unsigned int _X g_wEncoderSR;
                            17257 ; 15   |extern unsigned int _X g_wEncoderCSR;
                            17258 ; 16   |extern unsigned int _X g_wRecStartTimeHigh;
                            17259 ; 17   |extern unsigned int _X g_wRecStartTimeLow;
                            17260 ; 18   |extern unsigned int _X g_wSysError;
                            17261 ; 19   |#ifdef TRACEBUF_EN
                            17262 ; 20   |extern unsigned int _X g_wTraceBuffer; //Disabled by default.   
                            17263 ; 21   |extern unsigned int _X g_wTracePointer;
                            17264 ; 22   |#endif
                            17265 ; 23   |extern unsigned int _X g_wUserScratchX[];
                            17266 ; 24   |extern unsigned int _X g_wNextVoiceNumValue;
                            17267 ; 25   |extern unsigned int _X g_wEncAdpcmSave_r7;
                            17268 ; 26   |extern unsigned int _X g_wEncAdpcmSave_m7;
                            17269 ; 27   |extern unsigned int _X g_wEncModuleState;
                            17270 ; 28   |extern unsigned int _X g_wEncoderIsrSR;
                            17271 ; 29   |extern unsigned int _X g_bAudibleNeedFileSize;          // 10/12/04 mmiu - Added for AA fi
                                  le navigation
                            17272 ; 30   |extern unsigned int _X g_bAudiblePlayThrough;           // 11/1/04 mmiu - Added for file p
                                  osition play-through indicator
                            17273 ; 31   |extern unsigned int _X g_wSongStartOffsetHigh;          // 11/1/04 mmiu - Added until conf
                                  irmed we can use g_wSongByteTotalConsumedHigh/Low
                            17274 ; 32   |extern unsigned int _X g_wSongStartOffsetLow;
                            17275 ; 33   |
                            17276 ; 34   |// Variables in Y
                            17277 ; 35   |extern int          _Y g_VolumeBias;
                            17278 ; 36   |extern unsigned int _Y g_wCurrentRoutinePtr;
                            17279 ; 37   |extern unsigned int _Y g_wSystemFileHandle;
                            17280 ; 38   |extern unsigned int _Y g_wSongByteTotalHigh;
                            17281 ; 39   |extern unsigned int _Y g_wSongByteTotalLow; 
                            17282 ; 40   |extern unsigned int _Y g_wSongByteLengthHigh;
                            17283 ; 41   |extern unsigned int _Y g_wSongByteLengthLow;
                            17284 ; 42   |extern unsigned int _Y g_wInvSampleRate;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 291

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17285 ; 43   |extern unsigned int _Y g_wCurrentSongBad;
                            17286 ; 44   |extern unsigned int _Y g_iSongType;
                            17287 ; 45   |extern _packed BYTE _Y g_CurrentSongName[];
                            17288 ; 46   |extern unsigned int _Y g_wCurrentDirDevId;
                            17289 ; 47   |extern unsigned int _Y g_wSongInvBitRatePtr;
                            17290 ; 48   |extern unsigned int _Y g_wUserScratchXDescriptor;
                            17291 ; 49   |extern unsigned int _Y g_wUserScratchYDescriptor;
                            17292 ; 50   |extern _packed BYTE _Y g_EncFileNameString[];
                            17293 ; 51   |extern unsigned int _Y g_wEncFileHandle;
                            17294 ; 52   |extern unsigned int _Y g_wEncAdpcmOvlSave_sp;
                            17295 ; 53   |extern unsigned int _Y g_wRootDirectory;
                            17296 ; 54   |extern unsigned int _Y g_wUserScratchY[];
                            17297 ; 55   |extern unsigned int _Y g_wPrevInvBitRatePtr;
                            17298 ; 56   |
                            17299 ; 57   |#endif  // SYSMEM_XREF_C
                            17300 
                            17302 
                            17303 ; 19   |#include "sysequ.h"
                            17304 
                            17306 
                            17307 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            17308 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                            17309 ; 3    |// System defs
                            17310 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            17311 ; 5    |
                            17312 ; 6    |#if (!defined(SYSEQU_INC))
                            17313 ; 7    |#define SYSEQU_INC 1
                            17314 ; 8    |
                            17315 ; 9    |#define SOFTTIMER_CONTINUOUS_EVENT 0
                            17316 ; 10   |
                            17317 ; 11   |
                            17318 ; 12   |#define HOLD_BUTTON_REPORTED_BITMASK 4
                            17319 ; 13   |
                            17320 ; 14   |
                            17321 ; 15   |// Decoder types
                            17322 ; 16   |#define DECODER_TYPE_MP3 0
                            17323 ; 17   |#define DECODER_TYPE_WMA 1
                            17324 ; 18   |#define DECODER_TYPE_AAC 2
                            17325 ; 19   |#define DECODER_TYPE_ADPCM_IMA 3
                            17326 ; 20   |#define DECODER_TYPE_ADPCM_MS 4
                            17327 ; 21   |#define DECODER_TYPE_PCM 5
                            17328 ; 22   |#define DECODER_TYPE_STFM 6
                            17329 ; 23   |
                            17330 ; 24   |// Encoder types
                            17331 ; 25   |#define ENCODER_TYPE_ADPCM_IMA 0
                            17332 ; 26   |#define ENCODER_TYPE_PCM 1
                            17333 ; 27   |#define ENCODER_TYPE_MP3 2
                            17334 ; 28   |
                            17335 ; 29   |// EncoderSR/EncoderCSR bit equates.  Also uses Stop & Play below.
                            17336 ; 30   |#define EncNotEnoughSpace 0
                            17337 ; 31   |#define EncRanOutOfSpace 1
                            17338 ; 32   |#define EncRecordError 2
                            17339 ; 33   |#define EncToldToStop 3
                            17340 ; 34   |#define EncAlreadyRecording 4
                            17341 ; 35   |// ENCODER_STOPPED       equ     6   ; As RecorderStateMachine.h
                            17342 ; 36   |#define EncWarnLowSpace 7
                            17343 ; 37   |#define EncWarningSent 8
                            17344 ; 38   |// ENCODER_RECORDING     equ     12
                            17345 ; 39   |
                            17346 ; 40   |// DecoderSR/DecoderCSR bit equates
                            17347 ; 41   |//  This bit is set when the decoder sends a message to the parser and is 
                            17348 ; 42   |#define DecoderIgnoreMessages 0   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 292

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17349 ; 43   |//  waiting for a response.
                            17350 ; 44   |#define VBRFlag 1
                            17351 ; 45   |#define RepeatSong 2
                            17352 ; 46   |#define RepeatAll 3
                            17353 ; 47   |#define Random 4
                            17354 ; 48   |#define Pause 5
                            17355 ; 49   |#define Stop 6
                            17356 ; 50   |#define Rwnd 7
                            17357 ; 51   |#define Ffwd 8
                            17358 ; 52   |#define TimeMode 9
                            17359 ; 53   |// set when Fstatus_o = 1 for mp3 
                            17360 ; 54   |#define DecSync 10    
                            17361 ; 55   |#define Play 12
                            17362 ; 56   |// starting with sdk2.105: changed to set when decoder done instead of when file reads don
                                  e 
                            17363 ; 57   |#define EndOfSong 13    
                            17364 ; 58   |#define EndOfList 14
                            17365 ; 59   |#define SongInfo 15
                            17366 ; 60   |// set when a song file is currently opened by the decoder
                            17367 ; 61   |#define FileIsOpen 16    
                            17368 ; 62   |// used by parser
                            17369 ; 63   |#define SkipBlockHeader 17    
                            17370 ; 64   |#define ABMode_A 18
                            17371 ; 65   |#define ABMode_B 19
                            17372 ; 66   |#define ABQuiet 20
                            17373 ; 67   |// set if bad file encountered
                            17374 ; 68   |#define BadFile 21    
                            17375 ; 69   |// mp3 decoder looking for sync
                            17376 ; 70   |#define SyncWait 22    
                            17377 ; 71   |// error reading file, duh
                            17378 ; 72   |#define FileReadError 23    
                            17379 ; 73   |
                            17380 ; 74   |// DecoderCSR2 bit equates
                            17381 ; 75   |//Set when EOF reached, prevent freads beyond EOF 
                            17382 ; 76   |#define EndOfFileReached 0  
                            17383 ; 77   |// Set when need to allow LCD to update time
                            17384 ; 78   |#define TimeNeedsUpdate 1  
                            17385 ; 79   |
                            17386 ; 80   |
                            17387 ; 81   |// ParserVoiceCSR bits (specific to voice files)
                            17388 ; 82   |// repeat playing current file
                            17389 ; 83   |#define RepeatOneFile 0     
                            17390 ; 84   |// continuously loop through files
                            17391 ; 85   |#define RepeatAllFiles 1     
                            17392 ; 86   |// start at current file, play all files, then stop
                            17393 ; 87   |#define LoopOnce 2     
                            17394 ; 88   |
                            17395 ; 89   |// DecAdpcmFlags bits (used by ADPCM decoders)
                            17396 ; 90   |// Set to '1' when header unpacked, cleared during StopCurrentSong
                            17397 ; 91   |#define WaveHeaderFound 0       
                            17398 ; 92   |
                            17399 ; 93   |#if (defined(TRACEBUF_EN))
                            17400 ; 94   |// Trace buffer words.  Not ENabled by default.
                            17401 ; 95   |#define TRACE_BUFF_SIZE 256
                            17402 ; 96   |#define TRACE_BUFF_MODULO TRACE_BUFF_SIZE-1 
                            17403 ; 97   |#endif
                            17404 ; 98   |
                            17405 ; 99   |// Scratch area stuff
                            17406 ; 100  |#if defined(STMP_BUILD_PLAYER)
                            17407 ; 101  |#define SCRATCH_USER_Y_SIZE 512
                            17408 ; 102  |#define SCRATCH_USER_X_SIZE 256
                            17409 ; 103  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 293

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17410 ; 104  |#if defined(FAT32TEST)
                            17411 ; 105  |#define SCRATCH_USER_Y_SIZE 683
                            17412 ; 106  |#define SCRATCH_USER_X_SIZE 128
                            17413 ; 107  |#else 
                            17414 ; 108  |#define SCRATCH_USER_Y_SIZE 128
                            17415 ; 109  |#define SCRATCH_USER_X_SIZE 128
                            17416 ; 110  |#endif
                            17417 ; 111  |#endif
                            17418 ; 112  |
                            17419 ; 113  |#define SCRATCH_USER_X_SIZE_BYTES SCRATCH_USER_X_SIZE*3
                            17420 ; 114  |#define SCRATCH_USER_X_MODULO SCRATCH_USER_X_SIZE-1
                            17421 ; 115  |#define SCRATCH_USER_Y_SIZE_BYTES SCRATCH_USER_Y_SIZE*3
                            17422 ; 116  |#define SCRATCH_USER_Y_MODULO SCRATCH_USER_Y_SIZE-1
                            17423 ; 117  |
                            17424 ; 118  |// Boot ROM execute location
                            17425 ; 119  |#define BootExecuteCommand 0x012B
                            17426 ; 120  |
                            17427 ; 121  |#define BOOT_USB 0x000002
                            17428 ; 122  |#define BOOT_SMARTMEDIA 0x000004
                            17429 ; 123  |#define BOOT_COMPACTFLASH 0x000005
                            17430 ; 124  |#define BOOT_I2C_SLAVE 0x000009
                            17431 ; 125  |#define BOOT_I2C_MASTER 0x00000A
                            17432 ; 126  |#define BOOT_SPI_SLAVE 0x00000B
                            17433 ; 127  |#define BOOT_SPI_MASTER 0x00000C
                            17434 ; 128  |#define BOOT_HOSTPORT 0x00000D
                            17435 ; 129  |#define BOOT_BURNIN 0x00000F
                            17436 ; 130  |
                            17437 ; 131  |// Numerical constants
                            17438 ; 132  |//PI              equ     3.141592654
                            17439 ; 133  |
                            17440 ; 134  |// Buffer Descriptor offsets
                            17441 ; 135  |#define BD_BufferBaseAddress 0
                            17442 ; 136  |#define BD_BufferModulo 1
                            17443 ; 137  |#define BD_BufferSize 2
                            17444 ; 138  |#define BD_HdPtr 3
                            17445 ; 139  |#define BD_TailPtr 4
                            17446 ; 140  |
                            17447 ; 141  |// Size of a buffer descriptor
                            17448 ; 142  |#define BUFF_DESC_SIZE 5
                            17449 ; 143  |
                            17450 ; 144  |// Mp3 Song Table Descriptor Offsets
                            17451 ; 145  |// number of elements for each song
                            17452 ; 146  |#define MST_ELEMENT_COUNT 7        
                            17453 ; 147  |#define MST_CARD_NUMBER 0
                            17454 ; 148  |#define MST_ADDR_LOW 1
                            17455 ; 149  |#define MST_ADDR_HIGH 2
                            17456 ; 150  |#define MST_BYTES_LOW 3
                            17457 ; 151  |#define MST_BYTES_HIGH 4
                            17458 ; 152  |#define MST_SAMPLE_RATE 5
                            17459 ; 153  |#define MST_SONG_TYPE 6
                            17460 ; 154  |
                            17461 ; 155  |// Data Format Descriptor offsets
                            17462 ; 156  |#define DF_NumChannels 0
                            17463 ; 157  |#define DF_SampleRate 1
                            17464 ; 158  |#define DF_BitsPerSample 2
                            17465 ; 159  |
                            17466 ; 160  |
                            17467 ; 161  |// Timer Descriptor Offset
                            17468 ; 162  |#define TD_TimerNumber 0
                            17469 ; 163  |#define TD_ControlValue 1
                            17470 ; 164  |#define TD_CountValue 2
                            17471 ; 165  |#define TD_ControlRegister 3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 294

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17472 ; 166  |#define TD_CountRegister 4
                            17473 ; 167  |
                            17474 ; 168  |
                            17475 ; 169  |// File IO defines
                            17476 ; 170  |#define FileInPort 0x8000
                            17477 ; 171  |#define FileOutPort 0x8001
                            17478 ; 172  |#define OnceInPort 0x8000
                            17479 ; 173  |#define OnceOutPort 0x8001
                            17480 ; 174  |#define SmFakeInPort 0x8002
                            17481 ; 175  |#define SmFakeOutPort 0x8003
                            17482 ; 176  |#define UsbFakeInPort 0x8004
                            17483 ; 177  |#define UsbFakeOutPort 0x8005
                            17484 ; 178  |
                            17485 ; 179  |// Target memory stuff
                            17486 ; 180  |#define TARGET_MEM_MASK 0xF00000
                            17487 ; 181  |#define TARGET_MEM_X 0x800000
                            17488 ; 182  |#define TARGET_MEM_Y 0x400000
                            17489 ; 183  |#define TARGET_MEM_L 0x200000
                            17490 ; 184  |#define TARGET_MEM_P 0x100000
                            17491 ; 185  |
                            17492 ; 186  |#define TARGET_MEM_X_BITPOS 23
                            17493 ; 187  |#define TARGET_MEM_Y_BITPOS 22
                            17494 ; 188  |#define TARGET_MEM_L_BITPOS 21
                            17495 ; 189  |#define TARGET_MEM_P_BITPOS 20
                            17496 ; 190  |
                            17497 ; 191  |
                            17498 ; 192  |// File System Stuff
                            17499 ; 193  |// assume 3 deep max with 8.3 format (38 bytes inc. /'s)
                            17500 ; 194  |#define MaxDirCount 13         
                            17501 ; 195  |
                            17502 ; 196  |// Error Codes
                            17503 ; 197  |//      Value           Error
                            17504 ; 198  |//      --------------------------------------------
                            17505 ; 199  |//      $000000         Reserved - no error
                            17506 ; 200  |//      $000001         SmartMedia Bad Programming Error
                            17507 ; 201  |//      $000002         SmartMedia Read Timeout
                            17508 ; 202  |//      $000003         USB PLL Lock Timeout
                            17509 ; 203  |//       $000010         GetNumSongs returned an error
                            17510 ; 204  |//       $000011         fopen failed to open file number (in x:TrackNum)
                            17511 ; 205  |//       $000012         fread failed when attempting to read page
                            17512 ; 206  |//       $000013         fread failed to read correct number of bytes
                            17513 ; 207  |#define NO_ERROR 0x000000
                            17514 ; 208  |#define ERROR_PLL_LOCK_TIMEOUT 0x000001
                            17515 ; 209  |
                            17516 ; 210  |#define ERROR_SM_BADP 0x000100
                            17517 ; 211  |#define ERROR_SM_TIMEOUT 0x000101
                            17518 ; 212  |#define ERROR_SM_INVALID_BLOCK 0x000102
                            17519 ; 213  |#define ERROR_SM_INVALID_DATA 0x000103
                            17520 ; 214  |#define ERROR_SM_ECC 0x000104
                            17521 ; 215  |#define ERROR_SM_BLOCK_ERASE_FAILED 0x000105
                            17522 ; 216  |#define ERROR_SM_CARD_NOT_FOUND 0x000106
                            17523 ; 217  |#define ERROR_SM_BUSY_TIMEOUT 0x000107
                            17524 ; 218  |#define ERROR_SM_WRITE_FAILED 0x000108
                            17525 ; 219  |#define ERROR_SM_DEVICE_ID 0x000109
                            17526 ; 220  |
                            17527 ; 221  |#define ERROR_NUM_SONGS 0x000200
                            17528 ; 222  |#define ERROR_FOPEN_FILENUM 0x000201
                            17529 ; 223  |#define ERROR_FREAD_PAGE 0x000202
                            17530 ; 224  |#define ERROR_FREAD_BYTE_COUNT 0x000203
                            17531 ; 225  |#define ERROR_CREATING_VOICE_DIR 0x000204 
                            17532 ; 226  |
                            17533 ; 227  |#define ERROR_USB_DISCONNECTED 0x000300
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 295

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17534 ; 228  |
                            17535 ; 229  |#define ERROR_DECODER_PLAYING 0x000400
                            17536 ; 230  |// Attempted to set position past the end of file
                            17537 ; 231  |#define ERROR_DECODER_SETPOS 0x000401             
                            17538 ; 232  |
                            17539 ; 233  |// PLL defs
                            17540 ; 234  |// According to Mike May, the PLL takes about 200us to stabalize, worst-case.
                            17541 ; 235  |//   PLL lock delay is $000000001388 = 5000. We're always using the xtal at
                            17542 ; 236  |//   24.576MHz, so this delay is 5000/(24.576MHz) = 203.5us.  We'll do this 5000
                            17543 ; 237  |//   times for a total of 1.017s.
                            17544 ; 238  |#define PLL_LOCK_DELAY_HIGH 0x000000
                            17545 ; 239  |#define PLL_LOCK_DELAY_LOW 0x001388
                            17546 ; 240  |#define PLL_TIMEOUT 0x001388
                            17547 ; 241  |
                            17548 ; 242  |// Generic wait defs
                            17549 ; 243  |#define WAIT_10_MS 245760/2
                            17550 ; 244  |
                            17551 ; 245  |//Those equates are used in the DCC/USBMSC
                            17552 ; 246  |//Low battery detection bit
                            17553 ; 247  |#define LOW_BATTERY_DETECTED_BITPOS 0
                            17554 ; 248  |
                            17555 ; 249  |#endif // IF (!@def(SYSEQU_INC))
                            17556 ; 250  |
                            17557 ; 251  |
                            17558 
                            17560 
                            17561 ; 20   |#else
                            17562 ; 21   |#include "kernel.h"
                            17563 ; 22   |#include "system.h"
                            17564 ; 23   |#endif
                            17565 ; 24   |
                            17566 ; 25   |#define MBC_FLAG 0x010000
                            17567 ; 26   |#define SGM_MASK 0x00ffff
                            17568 ; 27   |
                            17569 ; 28   |#pragma optimize 1
                            17571 ; 29   |
                            17572 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                            17573 ; 31   |// Private permanent storage - these should not be in overlay space!
                            17574 ; 32   |
                            17575 ; 33   | WORD S_currentFont_PGM;
                            17576 ; 34   | WORD S_currentFont_SGMs;
                            17577 ; 35   | WORD S_currentFont_Scripts;
                            17578 ; 36   | WORD S_currentFont_Script_00;
                            17579 ; 37   |
                            17580 ; 38   |
                            17581 ; 39   |    BYTE g_btHandlePGM = 0;
                            17582 
                            17583 
Y:0000                      17584         org     y,".ydataunicode",init:
                            17585 Fg_btHandlePGM:
Y:0000 000000               17586         dc      $00
                            17589 
                            17590 ; 40   |    BYTE g_btHandleSGMs = 0;
                            17591 
                            17592 Fg_btHandleSGMs:
Y:0001 000000               17593         dc      $00
                            17596 
                            17597 ; 41   |    BYTE g_btHandleScript00 = 0;
                            17598 
                            17599 Fg_btHandleScript00:
Y:0002 000000               17600         dc      $00
                            17603 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 296

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17604 ; 42   |
                            17605 ; 43   |/////////////////////////////////////////////////////////////////////////////////
                            17606 ; 44   |//> Name: LookupPrimaryGlyphMapEntry
                            17607 ; 45   |//
                            17608 ; 46   |//  Type: Function
                            17609 ; 47   |//  Description:
                            17610 ; 48   |//  Prototype:          WORD _reentrant LookupPrimaryGlyphMapEntry(WORD c); 
                            17611 ; 49   |//  Inputs: 
                            17612 ; 50   |//  Outputs: 
                            17613 ; 51   |//  Notes: 
                            17614 ; 52   |//<
                            17615 ; 53   |/////////////////////////////////////////////////////////////////////////////////
                            17616 ; 54   |static WORD _reentrant LookupPrimaryGlyphMapEntry(WORD c) {
                            17617 
P:0000                      17618         org     p,".ptextunicode":
                            17622 FLookupPrimaryGlyphMapEntry:
                            17633 
                            17634 ; 55   |  WORD highByte = (c>>8) & 0x0000ff;
                            17635 
P:0000 055F7C         2    217623         movec   ssh,y:(r7)+
P:0001 218F00         2    417637         move    a1,b
P:0002 205F00         2    617626         move    (r7)+
P:0003 205F00         2    817627         move    (r7)+
P:0004 20002B         2   1017640         lsr     b
P:0005 20002B         2   1217640         lsr     b
P:0006 20002B         2   1417640         lsr     b
P:0007 20002B         2   1617640         lsr     b
P:0008 20002B         2   1817640         lsr     b
P:0009 20002B         2   2017640         lsr     b
P:000A 20002B         2   2217640         lsr     b
P:000B 20002B         2   2417640         lsr     b
                            17642 L4:
                            17653 
                            17654 ; 56   |  WORD GlyphMapEntry;
                            17655 ; 57   |  int offset;
                            17656 ; 58   |
                            17657 ; 59   |  offset = highByte + 3;                            // 1 word per entry + skip over PGM RS
                                  RC header
                            17658 
                            17667 
                            17668 ; 60   |
                            17669 ; 61   |  if (g_btHandlePGM > 0) {
                            17670 
P:000C 045FA0         2   2617663         movec   m0,n7
P:000D 46F400 0000FF  3   2917647         move    #>$FF,y0
P:000F 45F45E 000003  3   3217648         and     y0,b	                #>3,x1
P:0011 200068         2   3417661         add     x1,b
P:0012 5D6F00         4   3817665         move    b1,y:(r7+n7)
P:0013 5EF000 rrrrrr  3   4117672         move    y:Fg_btHandlePGM,a
P:0015 200003         2   4317673         tst     a
P:0016 0AF0A7 rrrrrr  6   4917674         jgt     L3
                            17675 
                            17676 ; 62   |    // do nothing
                            17677 ; 63   |  }
                            17678 ; 64   |  else {
                            17679 ; 65   |
                            17680 ; 66   |    g_btHandlePGM = (BYTE) SysOpenResource(S_currentFont_PGM, RS_ROOT_HANDLE);
                            17681 
P:0018 5EF01B rrrrrr  3   5217684         clr     b	                y:FS_currentFont_PGM,a
P:001A 0BF080 rrrrrr  6   5817685         jsr     FSysOpenResource
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 297

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17687 
                            17688 ; 67   |
                            17689 ; 68   |  }
                            17690 ; 69   |    
                            17691 ; 70   |  SysResourceFileSeek(g_btHandlePGM, 0);
                            17692 
P:001C 5E7000 rrrrrr  3   6117686         move    a,y:Fg_btHandlePGM
                            17694 L3:
P:001E 5EF01B rrrrrr  3   6417695         clr     b	                y:Fg_btHandlePGM,a
P:0020 0BF080 rrrrrr  6   7017696         jsr     FSysResourceFileSeek
                            17697 
                            17698 ; 71   |  SysResourceFileSeek(g_btHandlePGM, offset);
                            17699 
P:0022 045FA0         2   7217702         movec   m0,n7
P:0023 5EF000 rrrrrr  3   7517701         move    y:Fg_btHandlePGM,a
P:0025 5FEF00         4   7917704         move    y:(r7+n7),b
P:0026 0BF080 rrrrrr  6   8517708         jsr     FSysResourceFileSeek
                            17709 
                            17710 ; 72   |  SysResourceFileRead(g_btHandlePGM, 3, TARGET_MEM_Y, &GlyphMapEntry);
                            17711 
P:0028 77F400 FFFFFE  3   8817714         move    #-2,n7
P:002A 244000         2   9017717         move    #<$40,x0
P:002B 044F10         4   9417716         lua     (r7)+n7,r0
P:002C 5EF000 rrrrrr  3   9717713         move    y:Fg_btHandlePGM,a
P:002E 57F400 000003  3  10017718         move    #>3,b
P:0030 0BF080 rrrrrr  6  10617719         jsr     FSysResourceFileRead
                            17720 
                            17721 ; 73   |
                            17722 ; 74   |  return(GlyphMapEntry);
                            17723 
                            17728 
                            17729 ; 75   |}
                            17730 
P:0032 77F400 FFFFFE  3  10917725         move    #-2,n7
P:0034 000000         2  11117725         nop             ; (inserted)
P:0035 5EEF00         4  11517727         move    y:(r7+n7),a
P:0036 204F00         2  11717732         move    (r7)+n7
P:0037 05FF7C         4  12117734         movec   y:-(r7),ssh
P:0038 000000         2  12317734         nop             ; (inserted)
P:0039 00000C         4  12717738         rts
                            17740 
                            17741 ; 76   |
                            17742 ; 77   |/////////////////////////////////////////////////////////////////////////////////
                            17743 ; 78   |//> Name: LookupSecondaryGlyphMapEntry
                            17744 ; 79   |//
                            17745 ; 80   |//  Type: Function
                            17746 ; 81   |//  Description:
                            17747 ; 82   |//  Prototype:          WORD _reentrant LookupSecondaryGlyphMapEntry(WORD SecondaryMapInde
                                  x, WORD c); 
                            17748 ; 83   |//  Inputs: 
                            17749 ; 84   |//  Outputs: 
                            17750 ; 85   |//  Notes: 
                            17751 ; 86   |//<
                            17752 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            17753 ; 88   |static WORD _reentrant LookupSecondaryGlyphMapEntry(WORD SecondaryMapIndex, WORD c) {
                            17754 
                            17758 FLookupSecondaryGlyphMapEntry:
                            17773 
                            17774 ; 89   |  WORD GlyphMapEntry;
                            17775 ; 90   |  WORD glyph_index = c & 0x0000ff;
                            17776 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 298

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17792 
                            17793 ; 91   |  WORD rscNum = glyph_index + 1;
                            17794 ; 92   |  WORD SecondaryMapNumber = SecondaryMapIndex + 1;
                            17795 ; 93   |  int SGM_size;
                            17796 ; 94   |  int offset;
                            17797 ; 95   |  BYTE btHandle;
                            17798 ; 96   |
                            17799 ; 97   |  SGM_size = 3 + 256;                                   // 3 words for each SGM RSRC hdr +
                                  
                            17800 ; 98   |                                                        // 1 word for each of 256 SGM entr
                                  ies in RSRC
                            17801 ; 99   |
                            17802 ; 100  |  offset = 3 +                                        // 3 words for SGM header
                            17803 ; 101  |    SecondaryMapIndex * SGM_size +                      // Skip over other SGMs
                            17804 ; 102  |    glyph_index;                                    // Skip to desired glyph entry
                            17805 
                            17823 
                            17824 ; 103  |
                            17825 ; 104  |
                            17826 ; 105  | if (g_btHandleSGMs > 0) {
                            17827 
P:003A 055F7C         2  12917759         movec   ssh,y:(r7)+
P:003B 46F400 0000FF  3  13217778         move    #>$FF,y0
P:003D 21875E         2  13417779         and     y0,b	                a1,y1
P:003E 21A900         2  13617808         move    b1,b0
P:003F 46F400 000003  3  13917816         move    #>3,y0
P:0041 45F43A 000103  3  14217810         asl     b	                #259,x1
P:0043 3F03FA         2  14417811         mac     y1,x1,b	                #3,n7
P:0044 000000         2  14617811         nop             ; (inserted)
P:0045 204F2A         2  14817812         asr     b	                (r7)+n7
P:0046 212F00         2  15017817         move    b0,b
P:0047 77F458 FFFFFE  3  15317818         add     y0,b	                #-2,n7
P:0049 000000         2  15517818         nop             ; (inserted)
P:004A 5D6F00         4  15917821         move    b1,y:(r7+n7)
P:004B 5FF000 rrrrrr  3  16217829         move    y:Fg_btHandleSGMs,b
P:004D 20000B         2  16417830         tst     b
P:004E 0AF0A7 rrrrrr  6  17017831         jgt     L8
                            17832 
                            17833 ; 106  |    // nothing to do
                            17834 ; 107  |
                            17835 ; 108  | }
                            17836 ; 109  | else 
                            17837 ; 110  | {
                            17838 ; 111  |   btHandle = (BYTE)SysOpenResource(S_currentFont_SGMs, RS_ROOT_HANDLE); 
                            17839 
P:0050 5EF01B rrrrrr  3  17317842         clr     b	                y:FS_currentFont_SGMs,a
P:0052 0BF080 rrrrrr  6  17917843         jsr     FSysOpenResource
                            17847 
                            17848 ; 112  |   g_btHandleSGMs = (BYTE)SysOpenResource(1, btHandle);
                            17849 
P:0054 045FA0         2  18117851         movec   m0,n7
P:0055 56F409 000001  3  18417845         tfr     a,b	                #>1,a
P:0057 5D6F00         4  18817853         move    b1,y:(r7+n7)
P:0058 0BF080 rrrrrr  6  19417859         jsr     FSysOpenResource
                            17863 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 299

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17864 ; 113  |   SysCloseResource(btHandle);
                            17865 
P:005A 045FA0         2  19617867         movec   m0,n7
P:005B 5E7000 rrrrrr  3  19917862         move    a,y:Fg_btHandleSGMs
P:005D 5EEF00         4  20317869         move    y:(r7+n7),a
P:005E 0BF080 rrrrrr  6  20917870         jsr     FSysCloseResource
                            17874 
                            17875 ; 114  |
                            17876 ; 115  | }
                            17877 ; 116  |
                            17878 ; 117  | SysResourceFileSeek(g_btHandleSGMs, 0);
                            17879 
                            17881 L8:
P:0060 5EF01B rrrrrr  3  21217882         clr     b	                y:Fg_btHandleSGMs,a
P:0062 0BF080 rrrrrr  6  21817883         jsr     FSysResourceFileSeek
                            17884 
                            17885 ; 118  | SysResourceFileSeek(g_btHandleSGMs, offset);
                            17886 
P:0064 77F400 FFFFFE  3  22117889         move    #-2,n7
P:0066 5EF000 rrrrrr  3  22417888         move    y:Fg_btHandleSGMs,a
P:0068 5FEF00         4  22817891         move    y:(r7+n7),b
P:0069 0BF080 rrrrrr  6  23417895         jsr     FSysResourceFileSeek
                            17896 
                            17897 ; 119  | if (SysResourceFileRead(g_btHandleSGMs,3, TARGET_MEM_Y, &GlyphMapEntry) != SUCCESS)
                            17898 
P:006B 77F400 FFFFFD  3  23717901         move    #-3,n7
P:006D 244000         2  23917904         move    #<$40,x0
P:006E 044F10         4  24317903         lua     (r7)+n7,r0
P:006F 5EF000 rrrrrr  3  24617900         move    y:Fg_btHandleSGMs,a
P:0071 57F400 000003  3  24917905         move    #>3,b
P:0073 0BF080 rrrrrr  6  25517906         jsr     FSysResourceFileRead
P:0075 200003         2  25717907         tst     a
P:0076 0AF0AA rrrrrr  6  26317908         jeq     L9
                            17909 
                            17910 ; 120  |   return(0);
                            17911 
P:0078 2E0000         2  26517913         move    #0,a
P:0079 0AF080 rrrrrr  6  27117914         jmp     L10
                            17915 
                            17916 ; 121  | else
                            17917 ; 122  |   return(GlyphMapEntry);
                            17918 
                            17920 L9:
                            17923 
                            17924 ; 123  |     
                            17925 ; 124  |}
                            17926 
P:007B 77F400 FFFFFD  3  27417920         move    #-3,n7
P:007D 000000         2  27617920         nop             ; (inserted)
P:007E 5EEF00         4  28017922         move    y:(r7+n7),a
                            17928 L10:
P:007F 77F400 FFFFFC  3  28317928         move    #-4,n7
P:0081 000000         2  28517928         nop             ; (inserted)
P:0082 05EF7C         4  28917930         movec   y:(r7+n7),ssh
P:0083 204F00         2  29117932         move    (r7)+n7
P:0084 00000C         4  29517934         rts
                            17936 
                            17937 ; 125  |
                            17938 ; 126  |/////////////////////////////////////////////////////////////////////////////////
                            17939 ; 127  |//> Name: LoadGlyph
                            17940 ; 128  |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 300

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17941 ; 129  |//  Type: Function
                            17942 ; 130  |//  Description: 
                            17943 ; 131  |//  Prototype:          void _reentrant LoadGlyph(WORD ScriptIndex, WORD GlyphIndex, BITMA
                                  P_STRUCT *pBitmap);
                            17944 ; 132  |//  Inputs: 
                            17945 ; 133  |//  Outputs: 
                            17946 ; 134  |//  Notes: 
                            17947 ; 135  |//<
                            17948 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                            17949 ; 137  |static void _reentrant LoadGlyph(WORD ScriptIndex, WORD GlyphIndex, BITMAP *pBitmap, WORD 
                                  maxSize) {
                            17950 
                            17956 FLoadGlyph:
                            17976 
                            17977 ; 138  |
                            17978 ; 139  |  BYTE btHandle;
                            17979 ; 140  |  BYTE btHandleScript;
                            17980 
                            17997 
                            17998 ; 141  |  
                            17999 ; 142  |  if (ScriptIndex == 0)
                            18000 
P:0085 055F7C         2  29717957         movec   ssh,y:(r7)+
P:0086 3F0600         2  29917960         move    #6,n7
P:0087 2A0000         2  30118002         move    #0,a2
P:0088 204F03         2  30318003         tst     a	                (r7)+n7
P:0089 77F400 FFFFFD  3  30617982         move    #-3,n7
P:008B 000000         2  30817982         nop             ; (inserted)
P:008C 4C6F00         4  31217984         move    x0,y:(r7+n7)
P:008D 77F400 FFFFFC  3  31517987         move    #-4,n7
P:008F 000000         2  31717987         nop             ; (inserted)
P:0090 686F00         4  32117989         move    r0,y:(r7+n7)
P:0091 77F400 FFFFFB  3  32417992         move    #-5,n7
P:0093 000000         2  32617992         nop             ; (inserted)
P:0094 5D6F00         4  33017994         move    b1,y:(r7+n7)
P:0095 0AF0A2 rrrrrr  6  33618004         jne     L12
                            18005 
                            18006 ; 143  |  {                                 // Script_00 is separate, for speed
                            18007 ; 144  |        if (g_btHandleScript00 > 0)
                            18008 
P:0097 5EF01B rrrrrr  3  33918012         clr     b	                y:Fg_btHandleScript00,a
P:0099 200003         2  34118013         tst     a
P:009A 0AF0A7 rrrrrr  6  34718014         jgt     L11
                            18015 
                            18016 ; 145  |        {
                            18017 ; 146  |          // do nothing
                            18018 ; 147  |        }
                            18019 ; 148  |        else 
                            18020 ; 149  |        {
                            18021 ; 150  |          g_btHandleScript00 = (BYTE) SysOpenResource(S_currentFont_Script_00, RS_ROOT_HAN
                                  DLE);
                            18022 
P:009C 5EF000 rrrrrr  3  35018024         move    y:FS_currentFont_Script_00,a
P:009E 0BF080 rrrrrr  6  35618025         jsr     FSysOpenResource
                            18027 
                            18028 ; 151  |        }
                            18029 ; 152  |
                            18030 ; 153  |        SysLoadResource(GlyphIndex+1, g_btHandleScript00, RSRC_TYPE_BITMAP, (WORD *) pBitm
                                  ap, 
                            18031 ; 154  |                           TARGET_MEM_Y, maxSize);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 301

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18032 
P:00A0 5E7000 rrrrrr  3  35918026         move    a,y:Fg_btHandleScript00
                            18034 L11:
P:00A2 77F400 FFFFFB  3  36218034         move    #-5,n7
P:00A4 57F400 000001  3  36518037         move    #>1,b
P:00A6 44F400 000003  3  36818049         move    #>3,x0
P:00A8 5EEF00         4  37218036         move    y:(r7+n7),a
P:00A9 77F400 FFFFFC  3  37518043         move    #-4,n7
P:00AB 264010         2  37718038         add     b,a	                #<$40,y0
P:00AC 68EF00         4  38118045         move    y:(r7+n7),r0
P:00AD 77F400 FFFFFD  3  38418050         move    #-3,n7
P:00AF 5FF000 rrrrrr  3  38718042         move    y:Fg_btHandleScript00,b
P:00B1 4DEF00         4  39118052         move    y:(r7+n7),x1
P:00B2 0BF080 rrrrrr  6  39718054         jsr     FSysLoadResource
                            18058 
                            18059 ; 155  |
                            18060 ; 156  |  }
                            18061 
P:00B4 0AF080 rrrrrr  6  40318063         jmp     L13
                            18064 L12:
                            18074 
                            18075 ; 157  |  else 
                            18076 ; 158  |  {
                            18077 ; 159  |        btHandle = (BYTE)SysOpenResource(S_currentFont_Scripts, RS_ROOT_HANDLE); 
                            18078 
P:00B6 77F41B FFFFFA  3  40618081         clr     b	                #-6,n7
P:00B8 000000         2  40818081         nop             ; (inserted)
P:00B9 5C6F00         4  41218071         move    a1,y:(r7+n7)
P:00BA 5EF000 rrrrrr  3  41518080         move    y:FS_currentFont_Scripts,a
P:00BC 0BF080 rrrrrr  6  42118082         jsr     FSysOpenResource
                            18085 
                            18086 ; 160  |
                            18087 ; 161  |        btHandleScript = (BYTE)SysOpenResource(ScriptIndex+1, btHandle);
                            18088 
P:00BE 77F409 FFFFFA  3  42418083         tfr     a,b	                #-6,n7
P:00C0 45F400 000001  3  42718093         move    #>1,x1
P:00C2 5EEF00         4  43118092         move    y:(r7+n7),a
P:00C3 77F460 FFFFFE  3  43418094         add     x1,a	                #-2,n7
P:00C5 000000         2  43618094         nop             ; (inserted)
P:00C6 5D6F00         4  44018100         move    b1,y:(r7+n7)
P:00C7 0BF080 rrrrrr  6  44618105         jsr     FSysOpenResource
                            18110 
                            18111 ; 162  |
                            18112 ; 163  |      SysLoadResource(GlyphIndex+1, btHandleScript, RSRC_TYPE_BITMAP, (WORD *) pBitmap, 
                            18113 ; 164  |                           TARGET_MEM_Y, maxSize);
                            18114 
P:00C9 77F409 FFFFFB  3  44918108         tfr     a,b	                #-5,n7
P:00CB 46F400 000001  3  45218119         move    #>1,y0
P:00CD 44F400 000003  3  45518141         move    #>3,x0
P:00CF 5EEF00         4  45918118         move    y:(r7+n7),a
P:00D0 77F450 FFFFFC  3  46218120         add     y0,a	                #-4,n7
P:00D2 264000         2  46418140         move    #<$40,y0
P:00D3 68EF00         4  46818126         move    y:(r7+n7),r0
P:00D4 045FA0         2  47018130         movec   m0,n7
P:00D5 000000         2  47218130         nop             ; (inserted)
P:00D6 5D6F00         4  47618132         move    b1,y:(r7+n7)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 302

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00D7 77F400 FFFFFD  3  47918137         move    #-3,n7
P:00D9 000000         2  48118137         nop             ; (inserted)
P:00DA 4DEF00         4  48518139         move    y:(r7+n7),x1
P:00DB 0BF080 rrrrrr  6  49118142         jsr     FSysLoadResource
                            18148 
                            18149 ; 165  |                    
                            18150 ; 166  |      SysCloseResource(btHandle);                           
                            18151 
P:00DD 77F400 FFFFFE  3  49418153         move    #-2,n7
P:00DF 000000         2  49618153         nop             ; (inserted)
P:00E0 5EEF00         4  50018155         move    y:(r7+n7),a
P:00E1 0BF080 rrrrrr  6  50618156         jsr     FSysCloseResource
                            18160 
                            18161 ; 167  |      SysCloseResource(btHandleScript);                           
                            18162 
P:00E3 045FA0         2  50818164         movec   m0,n7
P:00E4 000000         2  51018164         nop             ; (inserted)
P:00E5 5EEF00         4  51418166         move    y:(r7+n7),a
P:00E6 0BF080 rrrrrr  6  52018167         jsr     FSysCloseResource
                            18171 
                            18172 ; 168  |  }
                            18173 
                            18175 L13:
                            18176 
                            18177 ; 169  |  
                            18178 ; 170  |}
                            18179 
P:00E8 77F400 FFFFF9  3  52318181         move    #-7,n7
P:00EA 000000         2  52518181         nop             ; (inserted)
P:00EB 05EF7C         4  52918183         movec   y:(r7+n7),ssh
P:00EC 204F00         2  53118185         move    (r7)+n7
P:00ED 00000C         4  53518187         rts
                            18189 
                            18190 ; 171  |
                            18191 ; 172  |
                            18192 ; 173  |/////////////////////////////////////////////////////////////////////////////////
                            18193 ; 174  |//> Name: GetUnicodeCharacterFramebuffer
                            18194 ; 175  |//
                            18195 ; 176  |//  Type: Function
                            18196 ; 177  |//  Description: Display the specified Unicode character at the specified location
                            18197 ; 178  |//               on the LCD.
                            18198 ; 179  |//  Prototype:   WORD _reentrant LcdPrintUnicodeChar(WORD c);
                            18199 ; 180  |//  Inputs:      A  = Unicode character value
                            18200 ; 181  |//  Outputs:     r0 = new FRAMEBUFFER pointer.
                            18201 ; 182  |//  Notes: 
                            18202 ; 183  |//<
                            18203 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                            18204 ; 185  |
                            18205 ; 186  |_reentrant BITMAP *  InternalGetUnicodeCharacterBitmap(WORD c) {
                            18206 
                            18211 FInternalGetUnicodeCharacterBitmap:
                            18231 
                            18232 ; 187  |
                            18233 ; 188  |    INT iSize;
                            18234 ; 189  |    BITMAP *pBitmap;
                            18235 ; 190  |    
                            18236 ; 191  |    WORD GlyphMapEntry;
                            18237 ; 192  |    WORD ScriptIndex;
                            18238 ; 193  |    WORD GlyphIndex;
                            18239 ; 194  |    WORD nextX;
                            18240 ; 195  |
                            18241 ; 196  |    if (c > 255) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 303

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18242 
P:00EE 055F7C         2  53718212         movec   ssh,y:(r7)+
P:00EF 045FA0         2  53918244         movec   m0,n7
P:00F0 2A0000         2  54118248         move    #0,a2
P:00F1 46F400 0000FF  3  54418247         move    #>$FF,y0
P:00F3 205F00         2  54618215         move    (r7)+
P:00F4 5C6F55         4  55018249         cmp     y0,a	                a1,y:(r7+n7)
P:00F5 0AF0AF rrrrrr  6  55618252         jle     L17
                            18256 
                            18257 ; 197  |    {
                            18258 ; 198  |        GlyphMapEntry = LookupPrimaryGlyphMapEntry(c);  // SGMs > 00
                            18259 
P:00F7 218E00         2  55818253         move    a1,a
P:00F8 0BF080 rrrrrr  6  56418261         jsr     FLookupPrimaryGlyphMapEntry
                            18266 
                            18267 ; 199  |    }
                            18268 
P:00FA 218D00         2  56618264         move    a1,b1
P:00FB 0AF080 rrrrrr  6  57218270         jmp     L18
                            18271 
                            18272 ; 200  |    else
                            18273 ; 201  |    {
                            18274 ; 202  |        GlyphMapEntry = MBC_FLAG;            // SGM_00 is ALWAYS present
                            18275 
                            18277 L17:
                            18278 
                            18279 ; 203  |    }
                            18280 ; 204  |
                            18281 ; 205  |
                            18282 ; 206  |    if (GlyphMapEntry & MBC_FLAG) 
                            18283 
P:00FD 55F400 010000  3  57518277         move    #$10000,b1
P:00FF 0ACD10 rrrrrr  6  58118285 L18:    jclr    #16,b1,L19
                            18286 
                            18287 ; 207  |    {
                            18288 ; 208  |        GlyphMapEntry = LookupSecondaryGlyphMapEntry(GlyphMapEntry & SGM_MASK, c);
                            18289 
P:0101 47F400 00FFFF  3  58418291         move    #$FFFF,y1
P:0103 20FF7E         2  58618292         and     y1,b	                y1,n7
P:0104 21AE00         2  58818294         move    b1,a
P:0105 5FEF00         4  59218297         move    y:(r7+n7),b
P:0106 0BF080 rrrrrr  6  59818298         jsr     FLookupSecondaryGlyphMapEntry
                            18304 
                            18305 ; 209  |    }
                            18306 ; 210  |
                            18307 ; 211  |    ScriptIndex = (GlyphMapEntry >> 8) & 0x0000ff;
                            18308 
P:0108 218D00         2  60018302         move    a1,b1
P:0109 21AE00         2  60218310 L19:    move    b1,a
P:010A 200023         2  60418313         lsr     a
P:010B 200023         2  60618313         lsr     a
P:010C 200023         2  60818313         lsr     a
P:010D 200023         2  61018313         lsr     a
P:010E 200023         2  61218313         lsr     a
P:010F 200023         2  61418313         lsr     a
P:0110 200023         2  61618313         lsr     a
P:0111 200023         2  61818313         lsr     a
                            18315 L20:
                            18320 
                            18321 ; 212  |    GlyphIndex = GlyphMapEntry & 0x0000ff;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 304

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18322 
                            18327 
                            18328 ; 213  |
                            18329 ; 214  |    pBitmap = (BITMAP *)&g_wUserScratchY;
                            18330 
                            18334 
                            18335 ; 215  |    iSize = SCRATCH_USER_Y_SIZE;
                            18336 ; 216  |
                            18337 ; 217  |    LoadGlyph(ScriptIndex, GlyphIndex, pBitmap, iSize);
                            18338 
P:0112 045FA0         2  62018340         movec   m0,n7
P:0113 45F400 0000FF  3  62318317         move    #>$FF,x1
P:0115 60F466 rrrrrr  3  62618318         and     x1,a	                #Fg_wUserScratchY,r0
P:0117 44F46E 000200  3  62918324         and     x1,b	                #$200,x0
P:0119 686F00         4  63318342         move    r0,y:(r7+n7)
P:011A 21AF00         2  63518348         move    b1,b
P:011B 0BF080 rrrrrr  6  64118349         jsr     FLoadGlyph
                            18354 
                            18355 ; 218  |
                            18356 ; 219  |    return pBitmap;
                            18357 
                            18364 
                            18365 ; 220  |}
                            18366 
P:011D 045FA0         2  64318359         movec   m0,n7
P:011E 000000         2  64518359         nop             ; (inserted)
P:011F 68EF00         4  64918361         move    y:(r7+n7),r0
P:0120 204F00         2  65118368         move    (r7)+n7
P:0121 05FF7C         4  65518370         movec   y:-(r7),ssh
P:0122 000000         2  65718370         nop             ; (inserted)
P:0123 00000C         4  66118374         rts
                            18377 
                            18378 ; 221  |
                            18379 ; 222  |
                            18380 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                            18381 ; 224  |/////////////////////////////////////////////////////////////////////////////////
                            18382 ; 225  |/////////////////////////////////////////////////////////////////////////////////
                            18383 ; 226  |
                            18384 ; 227  |_reentrant WORD InternalGetTextWidthAddressUnicode(WORD *pUnicodeString)
                            18385 ; 228  |{
                            18386 
                            18393 FInternalGetTextWidthAddressUnicode:
                            18404 
                            18405 ; 229  |    INT x=0;
                            18406 
                            18412 
                            18413 ; 230  |    BITMAP *pBITMAP;
                            18414 ; 231  |    while(1)
                            18415 ; 232  |    {
                            18416 ; 233  |        if(*pUnicodeString)
                            18417 
P:0124 055F7C         2  66318394         movec   ssh,y:(r7)+
P:0125 205F13         2  66518408         clr     a	                (r7)+
P:0126 205F00         2  66718398         move    (r7)+
P:0127 5FE000         2  66918419 L21:    move    y:(r0),b
P:0128 2B0000         2  67118420         move    #0,b2
P:0129 20000B         2  67318421         tst     b
P:012A 0AF0AA rrrrrr  6  67918422         jeq     L22
                            18428 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 305

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18429 ; 234  |        {
                            18430 ; 235  |            pBITMAP = InternalGetUnicodeCharacterBitmap(*pUnicodeString++);
                            18431 
P:012C 045FA0         2  68118423         movec   m0,n7
P:012D 000000         2  68318423         nop             ; (inserted)
P:012E 5C6F00         4  68718425         move    a1,y:(r7+n7)
P:012F 77F400 FFFFFE  3  69018433         move    #-2,n7
P:0131 000000         2  69218433         nop             ; (inserted)
P:0132 686F00         4  69618435         move    r0,y:(r7+n7)
P:0133 5EE000         2  69818436         move    y:(r0),a
P:0134 0BF080 rrrrrr  6  70418439         jsr     FInternalGetUnicodeCharacterBitmap
                            18452 
                            18453 ; 236  |            x+= pBITMAP->m_iWidth;
                            18454 
P:0136 221200         2  70618440         move    r0,r2
P:0137 77F400 FFFFFE  3  70918442         move    #-2,n7
P:0139 5FE200         2  71118456         move    y:(r2),b
P:013A 6EEF00         4  71518444         move    y:(r7+n7),r6
P:013B 045FA0         2  71718457         movec   m0,n7
P:013C 205E00         2  71918446         move    (r6)+
P:013D 5EEF00         4  72318459         move    y:(r7+n7),a
P:013E 22D010         2  72518460         add     b,a	                r6,r0
P:013F 0AF080 rrrrrr  6  73118464         jmp     L21
                            18465 
                            18466 ; 237  |        }
                            18467 ; 238  |        else
                            18468 ; 239  |        {
                            18469 ; 240  |            break;
                            18470 ; 241  |        }
                            18471 ; 242  |    }
                            18472 
                            18474 L22:
                            18475 
                            18476 ; 243  |    return x;
                            18477 ; 244  |}
                            18478 
P:0141 205700         2  73318480         move    (r7)-
P:0142 205700         2  73518481         move    (r7)-
P:0143 05FF7C         4  73918483         movec   y:-(r7),ssh
P:0144 000000         2  74118483         nop             ; (inserted)
P:0145 00000C         4  74518487         rts
                            18492 
                            18493 ; 245  |
                            18494 
                            18498 
                            18501 
Y:0000                      18502         org     y,".ybssunicode",bss:
                            18503 FS_currentFont_SGMs:
Y:0000 RESERVED             18504         ds      1
Y:0000
                            18507 FS_currentFont_PGM:
Y:0001 RESERVED             18508         ds      1
Y:0001
                            18513 FS_currentFont_Script_00:
Y:0002 RESERVED             18514         ds      1
Y:0002
                            18525 FS_currentFont_Scripts:
Y:0003 RESERVED             18526         ds      1
Y:0003
                            18527 
                            18528         extern  FSysCloseResource, FSysLoadResource, FSysOpenResource
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 306

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18529         extern  FSysResourceFileRead, FSysResourceFileSeek
                            18530         extern  y:Fg_wUserScratchY
                            18531 
                            18532         global  FInternalGetTextWidthAddressUnicode
                            18533         global  FInternalGetUnicodeCharacterBitmap, FS_currentFont_PGM
                            18534         global  FS_currentFont_SGMs, FS_currentFont_Script_00
                            18535         global  FS_currentFont_Scripts, Fg_btHandlePGM, Fg_btHandleSGMs
                            18536         global  Fg_btHandleScript00
                            18537 
                            18538         local   FLoadGlyph, FLookupPrimaryGlyphMapEntry
                            18539         local   FLookupSecondaryGlyphMapEntry, L3, L4, L8, L9, L10, L11
                            18540         local   L12, L13, L17, L18, L19, L20, L21, L22
                            18541 
                            18542         calls   "InternalGetTextWidthAddressUnicode", "InternalGetUnicodeCharacterBitmap"
                            18543         calls   "InternalGetUnicodeCharacterBitmap", "unicode.LoadGlyph"
                            18544         calls   "InternalGetUnicodeCharacterBitmap", "unicode.LookupPrimaryGlyphMapEntry"
                            18545         calls   "InternalGetUnicodeCharacterBitmap", "unicode.LookupSecondaryGlyphMapEntry"
                            18546         calls   "unicode.LoadGlyph", "SysCloseResource", "SysLoadResource"
                            18547         calls   "unicode.LoadGlyph", "SysOpenResource"
                            18548         calls   "unicode.LookupPrimaryGlyphMapEntry", "SysOpenResource"
                            18549         calls   "unicode.LookupPrimaryGlyphMapEntry", "SysResourceFileRead"
                            18550         calls   "unicode.LookupPrimaryGlyphMapEntry", "SysResourceFileSeek"
                            18551         calls   "unicode.LookupSecondaryGlyphMapEntry", "SysCloseResource"
                            18552         calls   "unicode.LookupSecondaryGlyphMapEntry", "SysOpenResource"
                            18553         calls   "unicode.LookupSecondaryGlyphMapEntry", "SysResourceFileRead"
                            18554         calls   "unicode.LookupSecondaryGlyphMapEntry", "SysResourceFileSeek"
                            18555 
