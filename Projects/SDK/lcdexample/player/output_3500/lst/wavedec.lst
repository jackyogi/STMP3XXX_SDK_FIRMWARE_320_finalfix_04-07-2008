TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfcc2db.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;      wavedec.c:
                               96 ; 1    |/*;;***********************************************************************
                               97 ; 2    |;SigmaTel, Inc
                               98 ; 3    |;$Archive: $
                               99 ; 4    |;$Revision:  $
                              100 ; 5    |;$Date: $
                              101 ; 6    |;Description: 
                              102 ; 7    |;***********************************************************************/
                              103 ; 8    |
                              104 ; 9    |#ifdef ADPCMTEST
                              105 ; 10   |#include <stdio.h>
                              106 ; 11   |#endif
                              107 ; 12   |#include "defs.h"
                              108 
                              110 
                              111 ; 1    |typedef long DWORD;
                              112 ; 2    |typedef int WORD;
                              113 ; 3    |typedef int BYTE;
                              114 ; 4    |
                              115 
                              117 
                              118 ; 13   |#include "wavedefs.h"
                              119 
                              121 
                              122 ; 1    |// Supported algorithms
                              123 ; 2    |#define         WAVE_FORMAT_PCM             0x01
                              124 ; 3    |#define         WAVE_FORMAT_ADPCM               0x02
                              125 ; 4    |#define         WAVE_FORMAT_IMA_ADPCM   0x11
                              126 ; 5    |#define         WAVE_FORMAT_G721_ADPCM  0x40
                              127 ; 6    |
                              128 ; 7    |// Supported chunk types
                              129 ; 8    |#define         RIFF_CKID               0
                              130 ; 9    |#define         WAVE_CKID               1
                              131 ; 10   |#define         FMT_CKID                2
                              132 ; 11   |#define         FACT_CKID               3
                              133 ; 12   |#define         DATA_CKID               4
                              134 ; 13   |// Add more Ckids here
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              135 ; 14   |
                              136 ; 15   |#define         UNKNOWN_CKID    5
                              137 ; 16   |#define         TOTAL_CKID              5
                              138 ; 17   |
                              139 ; 18   |
                              140 ; 19   |#define     ADPCM_SOURCE_BUF_SIZE    2048
                              141 
                              143 
                              144 ; 14   |#include "bitstreamwave.h"
                              145 
                              147 
                              148 ; 1    |
                              149 ; 2    |#ifndef ADPCMTEST
                              150 ; 3    |
                              151 ; 4    |extern _asmfunc char GetByte(void);
                              152 ; 5    |extern _asmfunc int GetWord();
                              153 ; 6    |extern _asmfunc int GetSWord();
                              154 ; 7    |extern _asmfunc long GetDWord();
                              155 ; 8    |extern _asmfunc void WriteByte(char byte);
                              156 ; 9    |extern _asmfunc void WriteWord(int word);
                              157 ; 10   |extern _asmfunc void WriteDWord(long int word);
                              158 ; 11   |extern _asmfunc void Wave_Fill_Input_Bitstream_Buffer(int size);
                              159 ; 12   |extern _asmfunc void Wave_Flush_Encoded_Bitstream_Buffer();
                              160 ; 13   |extern _asmfunc long Get_file_offset();
                              161 ; 14   |extern _asmfunc void Seek_data_offset(long offset);
                              162 ; 15   |extern _asmfunc void Seek_to_zero();
                              163 ; 16   |extern _asmfunc void SkipData(long amount);
                              164 ; 17   |
                              165 ; 18   |#else
                              166 ; 19   |
                              167 ; 20   |char GetByte();
                              168 ; 21   |int GetWord();
                              169 ; 22   |int GetSWord();
                              170 ; 23   |long GetDWord();
                              171 ; 24   |void WriteByte(char byte);
                              172 ; 25   |void WriteWord(int word);
                              173 ; 26   |void WriteDWord(long int word);
                              174 ; 27   |void Wave_Fill_Input_Bitstream_Buffer(int size);
                              175 ; 28   |void Wave_Flush_Encoded_Bitstream_Buffer();
                              176 ; 29   |long int Get_file_offset();
                              177 ; 30   |void Seek_data_offset(long int offset);
                              178 ; 31   |void Seek_to_zero();
                              179 ; 32   |void SkipData(long int amount);
                              180 ; 33   |
                              181 ; 34   |#endif
                              182 
                              184 
                              185 ; 15   |#include "wavedata.h"
                              186 
                              189 
                              190 ; 1    |extern DWORD g_Wave_dwWavDuration;
                              191 
                              193 
                              194 ; 2    |extern WORD  g_Wave_wFormatTag;         
                              195 ; 3    |extern WORD  g_Wave_wChannels;          
                              196 ; 4    |extern DWORD g_Wave_dwSamplesPerSec;
                              197 ; 5    |extern DWORD g_Wave_dwAvgBytesPerSec;
                              198 ; 6    |extern WORD  g_Wave_wBlockAlign;        
                              199 ; 7    |extern DWORD g_Wave_wMegicWord; 
                              200 ; 8    |extern long int g_Wave_datachunksize;
                              201 ; 9    |extern long int g_Wave_riffsize;
                              202 ; 10   |extern long int g_Wave_wavesize;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              203 ; 11   |extern long int g_Wave_datasize;
                              204 ; 12   |extern long int g_Wave_data_offset;
                              205 ; 13   |extern long int ckidlist[TOTAL_CKID];
                              206 ; 14   |extern long int DataSize[5];            // Stores Nested Chunk sizes. Upto 5 levels allowe
                                  d
                              207 ; 15   |extern WORD TotalSamplesPerBlock;
                              208 ; 16   |extern int riff_file_flag;
                              209 ; 17   |extern WORD  g_Wave_wBitsPerSample;
                              210 ; 18   |extern WORD  g_Wave_wnSamplesPerBlock;
                              211 ; 19   |#ifdef MS_ADPCM
                              212 ; 20   |extern WORD  g_Wave_wcbSize;
                              213 ; 21   |extern WORD  g_Wave_wnNumCoef;
                              214 ; 22   |extern short  g_Wave_wCoef1[10];                // Provision for 10 coefficient sets. Sign
                                  ed data.
                              215 ; 23   |extern short  g_Wave_wCoef2[10];
                              216 ; 24   |// Keep these constants separate, from above buffer
                              217 ; 25   |extern short g_Wave_iCoef1Array[7];
                              218 ; 26   |extern short g_Wave_iCoef2Array[7]; 
                              219 ; 27   |#endif
                              220 ; 28   |
                              221 ; 29   |extern long int list_ckid;
                              222 ; 30   |extern long int info_ckid;
                              223 ; 31   |extern long int isft_ckid;
                              224 ; 32   |extern short int sigmatel[5];
                              225 ; 33   |
                              226 ; 34   |
                              227 ; 35   |#ifdef IMA_ADPCM
                              228 ; 36   |extern WORD  g_Wave_wcbSize;
                              229 ; 37   |#endif
                              230 ; 38   |
                              231 ; 39   |// Function Declarations
                              232 ; 40   |extern int Initialize_Wave_Header(int formattag, int num_channels, int SamplingRate,int Nu
                                  mberOfBits);
                              233 ; 41   |void Write_Wave_Header(void);
                              234 ; 42   |void Decode_ADPCM(int FormatTag);
                              235 ; 43   |void Encode_ADPCM(int FormatTag, int numChannels);
                              236 ; 44   |extern void Init_IMA_ADPCM_States(void);
                              237 
                              239 
                              240 ; 16   |
                              241 ; 17   |#ifdef ADPCMTEST
                              242 ; 18   |extern int _X BitBuf[];
                              243 ; 19   |extern int _Y SampleBuf[];
                              244 ; 20   |extern FILE *in,*out;
                              245 ; 21   |#endif
                              246 ; 22   |
                              247 ; 23   |//----------------------------------------------------------------------
                              248 ; 24   |// Function Declarations for C
                              249 ; 25   |int ProcessChunk(int ckIDval, long int *cksize);
                              250 ; 26   |int GetckID(void);
                              251 ; 27   |void Process_Common_Fmt_Header(void);
                              252 ; 28   |extern _asmfunc long GetDWord(void);
                              253 ; 29   |extern _asmfunc int GetWord(void);
                              254 ; 30   |extern _asmfunc int GetSWord(void);
                              255 ; 31   |extern _asmfunc long Get_file_offset(void);
                              256 ; 32   |int waveparser(void);
                              257 ; 33   |
                              258 ; 34   |#ifdef MS_ADPCM
                              259 ; 35   |void Decode_MS_ADPCM_header(long int *cksize);
                              260 ; 36   |#endif
                              261 ; 37   |
                              262 ; 38   |#ifdef IMA_ADPCM
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              263 ; 39   |int Decode_IMA_ADPCM_header(void);
                              264 ; 40   |#endif
                              265 ; 41   |
                              266 ; 42   |#ifdef WINDOWS_PCM
                              267 ; 43   |int Decode_PCM_header(void);
                              268 ; 44   |#endif
                              269 ; 45   |
                              270 ; 46   |//---------------------------------------------------------------------
                              271 ; 47   |// Function Declarations for assembly code.
                              272 ; 48   |#ifdef MS_ADPCM
                              273 ; 49   |extern _asmfunc void Decode_MS_ADPCM_Block();
                              274 ; 50   |#endif
                              275 ; 51   |
                              276 ; 52   |#ifdef IMA_ADPCM
                              277 ; 53   |extern _asmfunc void Decode_MS_ADPCM_Block();
                              278 ; 54   |#endif
                              279 ; 55   |
                              280 ; 56   |#ifdef WINDOWS_PCM
                              281 ; 57   |extern _asmfunc void Decode_PCM_Block();
                              282 ; 58   |#endif
                              283 ; 59   |
                              284 ; 60   |
                              285 ; 61   |
                              286 ; 62   |/* 
                              287 ; 63   |///////////////////////////////////////////////////////////////////////////////
                              288 ; 64   |;
                              289 ; 65   |;>   Name:  waveparser
                              290 ; 66   |;
                              291 ; 67   |;    Type:      Function
                              292 ; 68   |;
                              293 ; 69   |;       int waveparser()
                              294 ; 70   |;
                              295 ; 71   |;    Description:       Parses up to Data chunk.
                              296 ; 72   |;
                              297 ; 73   |;    Inputs:            
                              298 ; 74   |;                       void
                              299 ; 75   |;           
                              300 ; 76   |;    Outputs:           
                              301 ; 77   |;                       retval is 0, if Success
                              302 ; 78   |;    Notes: Can be overlaid
                              303 ; 79   |;////////////////////////////////////////////////////////////////////////////// 
                              304 ; 80   |*/
                              305 ; 81   |int waveparser()
                              306 ; 82   |{
                              307 
P:0000                        308         org     p,".ptextwavedec":
                              313 Fwaveparser:
P:0000 05707C rrrrrr  4    4  314         movec   ssh,y:ss_waveparser
                              323 
                              324 ; 83   |        int ret_val;
                              325 ; 84   |        int ckIDval=0;
                              326 ; 85   |        long int ckSize;
                              327 ; 86   |        int chunklevel = 0;
                              328 
P:0002 200013         2    6  330         clr     a   
P:0003 20001B         2    8  331         clr     b   
                              333 
                              334 ; 87   |    riff_file_flag=0;
                              335 
P:0004 5E7000 rrrrrr  3   11  337         move    a,y:Friff_file_flag
                              338 
                              339 ; 88   |        while((ckIDval = GetckID())>=0)         // Returns -1 on error
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              340 
P:0006 66F400 rrrrrr  3   14  342         move    #FDataSize,r6
P:0008 0AF080 rrrrrr  6   20  343         jmp     L38
                              344 L32:
P:000A 5C7000 rrrrrr  3   23  346         move    a1,y:ss_waveparser+4
P:000C 5D7000 rrrrrr  3   26  349         move    b1,y:ss_waveparser+3
                              352 
                              353 ; 89   |        {
                              354 ; 90   |                ckSize = GetDWord();
                              355 
P:000E 0BF080 rrrrrr  6   32  357         jsr     GetDWord
P:0010 5C7000 rrrrrr  3   35  358         move    a1,y:ss_waveparser+2
P:0012 587000 rrrrrr  3   38  359         move    a0,y:ss_waveparser+1
                              360 
                              361 ; 91   |                // Subtract this chunk size from the current level
                              362 ; 92   |                DataSize[chunklevel] -= (ckSize + 8);
                              363 
P:0014 5FF000 rrrrrr  3   41  365         move    y:ss_waveparser+3,b
P:0016 21E500         2   43  366         move    b,x1
P:0017 20003B         2   45  367         lsl     b
P:0018 21BD00         2   47  370         move    b1,n5
P:0019 65F400 rrrrrr  3   50  371         move    #FDataSize,r5
P:001B 000000         2   52  372         nop
P:001C 044D16         4   56  373         lua     (r5)+n5,r6
P:001D 000000         2   58  374         nop
P:001E 205E00         2   60  375         move    (r6)+
P:001F 5FD600         2   62  376         move    y:(r6)-,b
P:0020 59E600         2   64  377         move    y:(r6),b0
P:0021 270000         2   66  378         move    #0,y1
P:0022 46F400 000008  3   69  379         move    #>8,y0
P:0024 200030         2   71  380         add     y,a
P:0025 20001C         2   73  381         sub     a,b
P:0026 595E00         2   75  382         move    b0,y:(r6)+
P:0027 5D5600         2   77  383         move    b1,y:(r6)-
                              384 
                              385 ; 93   |                // Skip unknown chunks
                              386 ; 94   |                if (ckIDval == UNKNOWN_CKID)
                              387 
P:0028 5EF000 rrrrrr  3   80  389         move    y:ss_waveparser+4,a
P:002A 44F400 000005  3   83  390         move    #>5,x0
P:002C 200045         2   85  391         cmp     x0,a
P:002D 0AF0AA rrrrrr  6   91  394         jeq     L34
                              397 
                              398 ; 95   |                {
                              399 ; 96   |                        SkipData(ckSize);       // Align the file reads correctly.
                              400 ; 97   |                }
                              401 ; 98   |                else
                              402 ; 99   |                {
                              403 ; 100  |                        ret_val = ProcessChunk(ckIDval, &ckSize);
                              404 
P:002F 60F400 rrrrrr  3   94  406         move    #ss_waveparser+1,r0
P:0031 0BF080 rrrrrr  6  100  407         jsr     FProcessChunk
                              410 
                              411 ; 101  |                        if(ret_val == 1)
                              412 
P:0033 57F400 000001  3  103  414         move    #>1,b
P:0035 200005         2  105  415         cmp     b,a
P:0036 47F400 000002  3  108  416         move    #>2,y1
P:0038 0AF0A2 rrrrrr  6  114  417         jne     L33
                              418 
                              419 ; 102  |                        {
                              420 ; 103  |                                // Contains nested chunks. Go one level up.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              421 ; 104  |                                chunklevel++;
                              422 
P:003A 5EF000 rrrrrr  3  117  424         move    y:ss_waveparser+3,a
P:003C 21E600         2  119  425         move    b,y0
P:003D 200050         2  121  426         add     y0,a
                              432 
                              433 ; 105  |                                DataSize[chunklevel] = ckSize;
                              434 
P:003E 4CF000 rrrrrr  3  124  436         move    y:ss_waveparser+1,x0
P:0040 4DF000 rrrrrr  3  127  437         move    y:ss_waveparser+2,x1
P:0042 5C7000 rrrrrr  3  130  438         move    a1,y:ss_waveparser+3
P:0044 200033         2  132  439         lsl     a
P:0045 219C00         2  134  442         move    a1,n4
P:0046 64F400 rrrrrr  3  137  443         move    #FDataSize,r4
P:0048 000000         2  139  444         nop
P:0049 044C16         4  143  445         lua     (r4)+n4,r6
P:004A 000000         2  145  446         nop
P:004B 4C5E00         2  147  447         move    x0,y:(r6)+
P:004C 4D5600         2  149  448         move    x1,y:(r6)-
                              449 
                              450 ; 106  |                        }
                              451 
P:004D 0AF080 rrrrrr  6  155  453         jmp     L36
                              454 
                              455 ; 107  |            else if(ret_val == 2)
                              456 
P:004F 200075         2  157  458 L33:    cmp     y1,a
P:0050 0AF0AA rrrrrr  6  163  459         jeq     L41
                              460 
                              461 ; 108  |            {
                              462 ; 109  |                        return 0;       // Found Data chunk. Our header ends here.
                              463 ; 110  |            }
                              464 ; 111  |                        else if (ret_val < 0)
                              465 
P:0052 200003         2  165  467         tst     a
P:0053 0AF0A1 rrrrrr  6  171  468         jge     L36
                              469 
                              470 ; 112  |                                return 1; // Failed,  Inform the top level module.
                              471 
P:0055 200001         2  173  473         tfr     b,a
P:0056 0AF080 rrrrrr  6  179  474         jmp     L43
                              476 L34:
P:0058 4D7000 rrrrrr  3  182  479         move    x1,y:ss_waveparser+3
P:005A 5EF000 rrrrrr  3  185  482         move    y:ss_waveparser+2,a
P:005C 58F000 rrrrrr  3  188  483         move    y:ss_waveparser+1,a0
P:005E 0BF080 rrrrrr  6  194  484         jsr     SkipData
                              485 
                              486 ; 113  |                }
                              487 ; 114  |                
                              488 ; 115  |                // Check whether all the data at this level is exhausted
                              489 ; 116  |                // chunklevel 0 will always contain negative value.
                              490 ; 117  |                if(DataSize[chunklevel] <= 0)
                              491 
P:0060 5EF000 rrrrrr  3  197  493 L36:    move    y:ss_waveparser+3,a
P:0062 200009         2  199  494         tfr     a,b
P:0063 200033         2  201  495         lsl     a
P:0064 219E00         2  203  498         move    a1,n6
P:0065 66F400 rrrrrr  3  206  499         move    #FDataSize,r6
P:0067 000000         2  208  500         nop
P:0068 044E15         4  212  501         lua     (r6)+n6,r5
P:0069 000000         2  214  502         nop
P:006A 205D00         2  216  503         move    (r5)+
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
P:006B 5ED500         2  218  504         move    y:(r5)-,a
P:006C 58E500         2  220  505         move    y:(r5),a0
P:006D 200003         2  222  506         tst     a
P:006E 0AF0A7 rrrrrr  6  228  507         jgt     L38
                              508 
                              509 ; 118  |                {
                              510 ; 119  |                        // Go down one level
                              511 ; 120  |                        chunklevel--;
                              512 
P:0070 44F400 000001  3  231  514         move    #>1,x0
P:0072 20004C         2  233  515         sub     x0,b
                              516 
                              517 ; 121  |                        if (chunklevel<=0)
                              518 
P:0073 0AF0AF rrrrrr  6  239  520         jle     L39
P:0075 5D7000 rrrrrr  3  242  522 L38:    move    b1,y:ss_waveparser+3
P:0077 0BF080 rrrrrr  6  248  525         jsr     FGetckID
P:0079 200003         2  250  527         tst     a
P:007A 5FF000 rrrrrr  3  253  528         move    y:ss_waveparser+3,b
P:007C 46F400 rrrrrr  3  256  531         move    #FDataSize,y0
P:007E 47F400 000002  3  259  532         move    #>2,y1
P:0080 0AF0A1 rrrrrr  6  265  533         jge     L32
                              534 
                              535 ; 122  |            {
                              536 ; 123  |                Seek_data_offset(g_Wave_data_offset);
                              537 ; 124  |                                return 0;                       // Done!
                              538 ; 125  |            }
                              539 ; 126  |                }
                              540 ; 127  |        }
                              541 ; 128  |    // The file is completely screwed up. Could'nt find the riff chunk
                              542 ; 129  |    if (riff_file_flag == 0)
                              543 
P:0082 5FF000 rrrrrr  3  268  545         move    y:Friff_file_flag,b
P:0084 20000B         2  270  547         tst     b
P:0085 0AF0A2 rrrrrr  6  276  548         jne     L41
                              549 
                              550 ; 130  |        return -1;
                              551 
P:0087 56F400 FFFFFF  3  279  553         move    #>-1,a
P:0089 0AF080 rrrrrr  6  285  555         jmp     L43
P:008B 5EF000 rrrrrr  3  288  557 L39:    move    y:Fg_Wave_data_offset+1,a
P:008D 58F000 rrrrrr  3  291  558         move    y:Fg_Wave_data_offset,a0
P:008F 0BF080 rrrrrr  6  297  559         jsr     Seek_data_offset
                              560 
                              561 ; 131  |    
                              562 ; 132  |    
                              563 ; 133  |        
                              564 ; 134  |    return 0;    
                              565 
P:0091 200013         2  299  567 L41:    clr     a   
                              568 
                              569 ; 135  |}
                              570 
P:0092 05F07C rrrrrr  4  303  572 L43:    movec   y:ss_waveparser,ssh
P:0094 000000         2  305  574         nop
P:0095 00000C         4  309  575         rts
                              576 
Y:0000                        577         org     y,".yovlwavedec@waveparser",overlay:
                              578 ss_waveparser:
Y:0000                        579         ds      6
   |   RESERVED                   
Y:0005
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              580 
P:0096                        581         org     p,".ptextwavedec":
                              583 
                              584 ; 136  |
                              585 ; 137  |
                              586 ; 138  |/* 
                              587 ; 139  |///////////////////////////////////////////////////////////////////////////////
                              588 ; 140  |;
                              589 ; 141  |;>   Name:  ProcessChunk
                              590 ; 142  |;
                              591 ; 143  |;    Type:      Function
                              592 ; 144  |;
                              593 ; 145  |;       int ProcessChunk(int ckIDval, long int *cksize)
                              594 ; 146  |;
                              595 ; 147  |;    Description:       Processes a chunk
                              596 ; 148  |;
                              597 ; 149  |;    Inputs:            
                              598 ; 150  |;                       chunk id value, chunk size
                              599 ; 151  |;           
                              600 ; 152  |;    Outputs:           
                              601 ; 153  |;                       0 = if there are no nested chunks.
                              602 ; 154  |;           1 = if there are nested chunks
                              603 ; 155  |;           2 = if it is a Data chunk
                              604 ; 156  |;           -1 = FAILED
                              605 ; 157  |;    Notes: Can be overlaid
                              606 ; 158  |;////////////////////////////////////////////////////////////////////////////// 
                              607 ; 159  |*/
                              608 ; 160  |
                              609 ; 161  |int ProcessChunk(int ckIDval, long int *cksize)
                              610 ; 162  |{
                              611 
                              618 FProcessChunk:
P:0096 05707C rrrrrr  4  313  619         movec   ssh,y:ss_ProcessChunk
                              629 
                              630 ; 163  |int i;
                              631 ; 164  |int ret_val = 0;
                              632 
P:0098 218F00         2  315  634         move    a1,b
P:0099 200013         2  317  637         clr     a   
                              639 
                              640 ; 165  |        switch(ckIDval)
                              641 
P:009A 66F40B rrrrrr  3  320  643         tst     b       #L83,r6
P:009C 0AF0AB rrrrrr  6  326  644         jmi     L77
P:009E 46F400 000004  3  329  645         move    #>4,y0
P:00A0 21FE5D         2  331  646         cmp     y0,b    b,n6
P:00A1 0AF0A7 rrrrrr  6  337  647         jgt     L77
P:00A3 07EE96         8  345  648         movem   p:(r6+n6),r6
P:00A4 000000         2  347  649         nop
P:00A5 0AE680         4  351  650         jmp     (r6)
                              651 
P:00A6 rrrrrr                 652 L83:    dc      L64     ; case 0:
P:00A7 rrrrrr                 653         dc      L77     ; default:
P:00A8 rrrrrr                 654         dc      L66     ; case 2:
P:00A9 rrrrrr                 655         dc      L76     ; case 3:
P:00AA rrrrrr                 656         dc      L75     ; case 4:
                              657 
                              658 
                              659 ; 166  |        {
                              660 ; 167  |        case RIFF_CKID:
                              661 
P:00AB 687000 rrrrrr  3  354  663 L64:    move    r0,y:ss_ProcessChunk+1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              666 
                              667 ; 168  |        // This is an extended Ckid
                              668 ; 169  |                // check if 'W','A','V','E' is present.
                              669 ; 170  |                // We suppport only wave files.
                              670 ; 171  |                ckIDval = GetckID();
                              671 
P:00AD 0BF080 rrrrrr  6  360  673         jsr     FGetckID
                              677 
                              678 ; 172  |                if (ckIDval == WAVE_CKID)
                              679 
P:00AF 44F400 000001  3  363  681         move    #>1,x0
P:00B1 200045         2  365  682         cmp     x0,a
P:00B2 0AF0A2 rrrrrr  6  371  683         jne     L65
                              684 
                              685 ; 173  |                {
                              686 ; 174  |                        *cksize -= 4;
                              687 
P:00B4 6EF000 rrrrrr  3  374  689         move    y:ss_ProcessChunk+1,r6
P:00B6 000000         2  376  690         nop
P:00B7 205E00         2  378  691         move    (r6)+
P:00B8 5ED600         2  380  692         move    y:(r6)-,a
P:00B9 58E600         2  382  693         move    y:(r6),a0
P:00BA 20001B         2  384  697         clr     b   
P:00BB 290400         2  386  698         move    #4,b0
P:00BC 200014         2  388  699         sub     b,a
P:00BD 585E00         2  390  700         move    a0,y:(r6)+
P:00BE 5C5600         2  392  701         move    a1,y:(r6)-
                              702 
                              703 ; 175  |                        ret_val = 1;
                              704 
P:00BF 4C7000 rrrrrr  3  395  706         move    x0,y:ss_ProcessChunk+2
                              708 
                              709 ; 176  |            riff_file_flag = 1;
                              710 
P:00C1 4C7000 rrrrrr  3  398  712         move    x0,y:Friff_file_flag
                              713 
                              714 ; 177  |                }
                              715 
P:00C3 0AF080 rrrrrr  6  404  717         jmp     L82
                              718 
                              719 ; 178  |                else
                              720 ; 179  |                        ret_val = -1;
                              721 
P:00C5 55F400 FFFFFF  3  407  723 L65:    move    #-1,b1
P:00C7 5D7000 rrrrrr  3  410  726         move    b1,y:ss_ProcessChunk+2
                              729 
                              730 ; 180  |                break;
                              731 
P:00C9 0AF080 rrrrrr  6  416  733         jmp     L82
                              734 
                              735 ; 181  |
                              736 ; 182  |        case FMT_CKID:
                              737 
                              739 L66:
P:00CB 5C7000 rrrrrr  3  419  744         move    a1,y:ss_ProcessChunk+2
P:00CD 687000 rrrrrr  3  422  747         move    r0,y:ss_ProcessChunk+1
                              750 
                              751 ; 183  |                Process_Common_Fmt_Header();
                              752 
P:00CF 0BF080 rrrrrr  6  428  754         jsr     FProcess_Common_Fmt_Header
                              755 
                              756 ; 184  |        *cksize -= 14;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              757 
P:00D1 6EF000 rrrrrr  3  431  759         move    y:ss_ProcessChunk+1,r6
P:00D3 000000         2  433  760         nop
P:00D4 205E00         2  435  761         move    (r6)+
P:00D5 5FD600         2  437  762         move    y:(r6)-,b
P:00D6 59E600         2  439  763         move    y:(r6),b0
P:00D7 270000         2  441  766         move    #0,y1
P:00D8 46F400 00000E  3  444  767         move    #>14,y0
P:00DA 20003C         2  446  768         sub     y,b
P:00DB 595E00         2  448  769         move    b0,y:(r6)+
P:00DC 5D5600         2  450  770         move    b1,y:(r6)-
                              773 
                              774 ; 185  |#ifdef MS_ADPCM
                              775 ; 186  |                if (g_Wave_wFormatTag == WAVE_FORMAT_ADPCM)
                              776 
P:00DD 5FF000 rrrrrr  3  453  778         move    y:Fg_Wave_wFormatTag,b
P:00DF 44F400 000002  3  456  779         move    #>2,x0
P:00E1 20004D         2  458  780         cmp     x0,b
P:00E2 0AF0A2 rrrrrr  6  464  781         jne     L67
P:00E4 68F000 rrrrrr  3  467  782         move    y:ss_ProcessChunk+1,r0
                              785 
                              786 ; 187  |                        Decode_MS_ADPCM_header(cksize);
                              787 
P:00E6 0BF080 rrrrrr  6  473  789         jsr     FDecode_MS_ADPCM_header
P:00E8 0AF080 rrrrrr  6  479  792         jmp     L72
                              793 
                              794 ; 188  |                else 
                              795 ; 189  |#endif
                              796 ; 190  |#ifdef IMA_ADPCM
                              797 ; 191  |        if (g_Wave_wFormatTag == WAVE_FORMAT_IMA_ADPCM)
                              798 
P:00EA 5FF000 rrrrrr  3  482  800 L67:    move    y:Fg_Wave_wFormatTag,b
P:00EC 56F400 000011  3  485  801         move    #>17,a
P:00EE 20000D         2  487  802         cmp     a,b
P:00EF 0AF0A2 rrrrrr  6  493  803         jne     L68
                              804 
                              805 ; 192  |        {
                              806 ; 193  |                        ret_val = Decode_IMA_ADPCM_header();
                              807 
P:00F1 0BF080 rrrrrr  6  499  809         jsr     FDecode_IMA_ADPCM_header
P:00F3 5E7000 rrrrrr  3  502  810         move    a,y:ss_ProcessChunk+2
                              811 
                              812 ; 194  |            *cksize -= 6;
                              813 
P:00F5 6EF000 rrrrrr  3  505  815         move    y:ss_ProcessChunk+1,r6
P:00F7 000000         2  507  816         nop
P:00F8 205E00         2  509  817         move    (r6)+
P:00F9 5ED600         2  511  818         move    y:(r6)-,a
P:00FA 58E600         2  513  819         move    y:(r6),a0
P:00FB 20001B         2  515  822         clr     b   
P:00FC 290600         2  517  823         move    #6,b0
P:00FD 200014         2  519  824         sub     b,a
P:00FE 585E00         2  521  825         move    a0,y:(r6)+
P:00FF 5C5600         2  523  826         move    a1,y:(r6)-
                              829 
                              830 ; 195  |        }
                              831 
P:0100 0AF080 rrrrrr  6  529  833         jmp     L72
                              834 
                              835 ; 196  |                else
                              836 ; 197  |#endif
                              837 ; 198  |#ifdef G721_ADPCM
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              838 ; 199  |                if (g_Wave_wFormatTag == WAVE_FORMAT_G721_ADPCM)
                              839 ; 200  |                        Decode_G721_ADPCM_header();
                              840 ; 201  |                else
                              841 ; 202  |#endif
                              842 ; 203  |#ifdef WINDOWS_PCM
                              843 ; 204  |                if (g_Wave_wFormatTag == WAVE_FORMAT_PCM)
                              844 
P:0102 5FF000 rrrrrr  3  532  846 L68:    move    y:Fg_Wave_wFormatTag,b
P:0104 46F400 000001  3  535  847         move    #>1,y0
P:0106 20005D         2  537  848         cmp     y0,b
P:0107 0AF0A2 rrrrrr  6  543  849         jne     L69
                              850 
                              851 ; 205  |        {
                              852 ; 206  |                        ret_val = Decode_PCM_header();
                              853 
P:0109 0BF080 rrrrrr  6  549  855         jsr     FDecode_PCM_header
P:010B 5E7000 rrrrrr  3  552  856         move    a,y:ss_ProcessChunk+2
                              857 
                              858 ; 207  |            *cksize -= 2;
                              859 
P:010D 6EF000 rrrrrr  3  555  861         move    y:ss_ProcessChunk+1,r6
P:010F 000000         2  557  862         nop
P:0110 205E00         2  559  863         move    (r6)+
P:0111 5FD600         2  561  864         move    y:(r6)-,b
P:0112 59E600         2  563  865         move    y:(r6),b0
P:0113 250000         2  565  868         move    #0,x1
P:0114 44F400 000002  3  568  869         move    #>2,x0
P:0116 20002C         2  570  870         sub     x,b
P:0117 595E00         2  572  871         move    b0,y:(r6)+
P:0118 5D5600         2  574  872         move    b1,y:(r6)-
                              875 
                              876 ; 208  |        }
                              877 
P:0119 0AF080 rrrrrr  6  580  879         jmp     L72
                              880 
                              881 ; 209  |                else
                              882 ; 210  |#endif
                              883 ; 211  |
                              884 ; 212  |                        ret_val = -1;   // Unknown algo.
                              885 
P:011B 57F400 FFFFFF  3  583  887 L69:    move    #>-1,b
P:011D 5F7000 rrrrrr  3  586  890         move    b,y:ss_ProcessChunk+2
                              893 
                              894 ; 213  |        
                              895 ; 214  |        if (*cksize > 0)
                              896 
P:011F 6EF000 rrrrrr  3  589  898 L72:    move    y:ss_ProcessChunk+1,r6
P:0121 000000         2  591  899         nop
P:0122 205E00         2  593  900         move    (r6)+
P:0123 5FD600         2  595  901         move    y:(r6)-,b
P:0124 59E600         2  597  902         move    y:(r6),b0
P:0125 20000B         2  599  903         tst     b
P:0126 0AF0AF rrrrrr  6  605  904         jle     L82
                              905 
                              906 ; 215  |        {   
                              907 ; 216  |            for(i = 0; i < *cksize; i++)
                              908 
P:0128 20001B         2  607  910         clr     b   
P:0129 0AF080 rrrrrr  6  613  912         jmp     L74
                              913 L73:
P:012B 4E7000 rrrrrr  3  616  916         move    y0,y:ss_ProcessChunk+3
                              919 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              920 ; 217  |            {
                              921 ; 218  |                GetByte();
                              922 
P:012D 0BF080 rrrrrr  6  622  924         jsr     GetByte
P:012F 5EF000 rrrrrr  3  625  926         move    y:ss_ProcessChunk+3,a
P:0131 47F400 000001  3  628  927         move    #>1,y1
P:0133 200070         2  630  928         add     y1,a
P:0134 218F00         2  632  931         move    a1,b
P:0135 21A600         2  634  934 L74:    move    b1,y0
P:0136 216E00         2  636  935         move    b2,a
P:0137 21A800         2  638  936         move    b1,a0
P:0138 6EF000 rrrrrr  3  641  939         move    y:ss_ProcessChunk+1,r6
P:013A 000000         2  643  940         nop
P:013B 205E00         2  645  941         move    (r6)+
P:013C 5FD600         2  647  942         move    y:(r6)-,b
P:013D 59E600         2  649  943         move    y:(r6),b0
P:013E 200005         2  651  944         cmp     b,a
P:013F 0AF0A9 rrrrrr  6  657  945         jlt     L73
                              946 
                              947 ; 219  |            }
                              948 ; 220  |        }
                              949 ; 221  |                break;
                              950 
P:0141 0AF080 rrrrrr  6  663  952         jmp     L82
                              953 
                              954 ; 222  |
                              955 ; 223  |        case FACT_CKID:
                              956 ; 224  |                g_Wave_dwWavDuration = GetDWord();
                              957 ; 225  |                ret_val = 0;
                              958 ; 226  |                break;
                              959 ; 227  |
                              960 ; 228  |        case DATA_CKID:
                              961 
                              963 L75:
P:0143 687000 rrrrrr  3  666  966         move    r0,y:ss_ProcessChunk+1
                              969 
                              970 ; 229  |                g_Wave_data_offset = Get_file_offset(); // Store the offset to be passed t
                                  o the algo.
                              971 
P:0145 0BF080 rrrrrr  6  672  973         jsr     Get_file_offset
P:0147 5C7000 rrrrrr  3  675  975         move    a1,y:Fg_Wave_data_offset+1
P:0149 587000 rrrrrr  3  678  976         move    a0,y:Fg_Wave_data_offset
                              977 
                              978 ; 230  |                g_Wave_datachunksize = *cksize;
                              979 
P:014B 6EF000 rrrrrr  3  681  981         move    y:ss_ProcessChunk+1,r6
P:014D 000000         2  683  982         nop
P:014E 205E00         2  685  983         move    (r6)+
P:014F 5ED600         2  687  984         move    y:(r6)-,a
P:0150 58E600         2  689  985         move    y:(r6),a0
P:0151 5C7000 rrrrrr  3  692  988         move    a1,y:Fg_Wave_datachunksize+1
P:0153 587000 rrrrrr  3  695  989         move    a0,y:Fg_Wave_datachunksize
                              990 
                              991 ; 231  |                ret_val = 2;
                              992 
P:0155 280200         2  697  994         move    #2,a0
P:0156 587000 rrrrrr  3  700  997         move    a0,y:ss_ProcessChunk+2
                             1000 
                             1001 ; 232  |                break;
                             1002 
P:0158 0AF080 rrrrrr  6  706 1004         jmp     L82
P:015A 0BF080 rrrrrr  6  712 1006 L76:    jsr     GetDWord
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
P:015C 5C7000 rrrrrr  3  715 1008         move    a1,y:Fg_Wave_dwWavDuration+1
P:015E 587000 rrrrrr  3  718 1009         move    a0,y:Fg_Wave_dwWavDuration
                             1010 
                             1011 ; 233  |        default:
                             1012 ; 234  |                ret_val = 0;
                             1013 
P:0160 2C0000         2  720 1015 L77:    move    #0,a1
P:0161 5C7000 rrrrrr  3  723 1018         move    a1,y:ss_ProcessChunk+2
                             1021 
                             1022 ; 235  |                break;
                             1023 ; 236  |
                             1024 ; 237  |        }
                             1025 ; 238  |        return ret_val;
                             1026 
P:0163 5EF000 rrrrrr  3  726 1028 L82:    move    y:ss_ProcessChunk+2,a
                             1031 
                             1032 ; 239  |}
                             1033 
P:0165 05F07C rrrrrr  4  730 1035         movec   y:ss_ProcessChunk,ssh
P:0167 000000         2  732 1037         nop
P:0168 00000C         4  736 1038         rts
                             1040 
Y:0000                       1041         org     y,".yovlwavedec@ProcessChunk",overlay:
                             1042 ss_ProcessChunk:
Y:0000                       1043         ds      5
   |   RESERVED                   
Y:0004
                             1044 
P:0169                       1045         org     p,".ptextwavedec":
                             1047 
                             1048 ; 240  |
                             1049 ; 241  |
                             1050 ; 242  |
                             1051 ; 243  |/* 
                             1052 ; 244  |///////////////////////////////////////////////////////////////////////////////
                             1053 ; 245  |;
                             1054 ; 246  |;>   Name:  GetckID
                             1055 ; 247  |;
                             1056 ; 248  |;    Type:      Function
                             1057 ; 249  |;
                             1058 ; 250  |;       int GetckID()
                             1059 ; 251  |;
                             1060 ; 252  |;    Description:       Find the chunk id
                             1061 ; 253  |;
                             1062 ; 254  |;    Inputs:            
                             1063 ; 255  |;                       void
                             1064 ; 256  |;           
                             1065 ; 257  |;    Outputs: Returns ckid
                             1066 ; 258  |;    Notes: Can be overlaid
                             1067 ; 259  |;////////////////////////////////////////////////////////////////////////////// 
                             1068 ; 260  |*/
                             1069 ; 261  |int GetckID()
                             1070 ; 262  |{
                             1071 
                             1076 FGetckID:
P:0169 05707C rrrrrr  4  740 1077         movec   ssh,y:ss_GetckID
                             1083 
                             1084 ; 263  |        int i;
                             1085 ; 264  |        long int word = GetDWord();
                             1086 
P:016B 0BF080 rrrrrr  6  746 1088         jsr     GetDWord
                             1092 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1093 ; 265  |        // Default to unknown
                             1094 ; 266  |        int ckid = UNKNOWN_CKID;
                             1095 
P:016D 44F400 000005  3  749 1097         move    #>5,x0
                             1099 
                             1100 ; 267  |        for (i = 0; i < TOTAL_CKID; i++)
                             1101 
P:016F 200049         2  751 1103         tfr     x0,b
P:0170 270000         2  753 1104         move    #0,y1
P:0171 66F400 rrrrrr  3  756 1106         move    #Fckidlist,r6
P:0173 46F400 000001  3  759 1107         move    #>1,y0
P:0175 20000B         2  761 1108         tst     b
P:0176 0AF0AA rrrrrr  6  767 1109         jeq     L87
P:0178 06CD00 rrrrrr  6  773 1110         do      b1,L87
                             1112 
                             1113 ; 268  |        {
                             1114 ; 269  |                if (word == ckidlist[i])
                             1115 
P:017A 205E00         2  775 1117         move    (r6)+
P:017B 5FD600         2  777 1118         move    y:(r6)-,b
P:017C 59E600         2  779 1119         move    y:(r6),b0
P:017D 200005         2  781 1120         cmp     b,a
P:017E 0AF0A2 rrrrrr  6  787 1121         jne     L85
                             1122 
                             1123 ; 270  |                {
                             1124 ; 271  |                        ckid = i;
                             1125 
P:0180 20E400         2  789 1127         move    y1,x0
                             1128 
                             1129 ; 272  |                        break;
                             1130 
P:0181 00008C         2  791 1132         enddo
P:0182 0AF080 rrrrrr  6  797 1134         jmp     L86
                             1135 
                             1136 ; 273  |                }
                             1137 
                             1139 L85:
P:0184 3E0200         2  799 1142         move    #2,n6
P:0185 000000         2  801 1143         nop
P:0186 204E00         2  803 1144         move    (r6)+n6
P:0187 200079         2  805 1145         tfr     y1,b
P:0188 200058         2  807 1146         add     y0,b
P:0189 21A700         2  809 1149         move    b1,y1
                        (36) 1152 L87:
                             1154 
                             1155 ; 274  |        }
                             1156 ; 275  |        return ckid;
                             1157 
P:018A 200041         2  811 1159 L86:    tfr     x0,a
                             1162 
                             1163 ; 276  |}
                             1164 
P:018B 05F07C rrrrrr  4  815 1166         movec   y:ss_GetckID,ssh
P:018D 000000         2  817 1168         nop
P:018E 00000C         4  821 1169         rts
                             1172 
Y:0000                       1173         org     y,".yovlwavedec@GetckID",overlay:
                             1174 ss_GetckID:
Y:0000 RESERVED              1175         ds      1
Y:0000
                             1176 
P:018F                       1177         org     p,".ptextwavedec":
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1179 
                             1180 ; 277  |
                             1181 ; 278  |/* 
                             1182 ; 279  |///////////////////////////////////////////////////////////////////////////////
                             1183 ; 280  |;
                             1184 ; 281  |;>   Name:  Process_Common_Fmt_Header
                             1185 ; 282  |;
                             1186 ; 283  |;    Type:      Function
                             1187 ; 284  |;
                             1188 ; 285  |;       void Process_Common_Fmt_Header()
                             1189 ; 286  |;
                             1190 ; 287  |;    Description:       Processes Fmt header (common part)
                             1191 ; 288  |;
                             1192 ; 289  |;    Inputs:            
                             1193 ; 290  |;                       void
                             1194 ; 291  |;           
                             1195 ; 292  |;    Outputs:           
                             1196 ; 293  |;    Notes: Can be overlaid
                             1197 ; 294  |;////////////////////////////////////////////////////////////////////////////// 
                             1198 ; 295  |*/
                             1199 ; 296  |
                             1200 ; 297  |void Process_Common_Fmt_Header()
                             1201 ; 298  |{
                             1202 
                             1207 FProcess_Common_Fmt_Header:
P:018F 05707C rrrrrr  4  825 1208         movec   ssh,y:ss_Process_Common_Fmt_Header
                             1210 
                             1211 ; 299  |        g_Wave_wFormatTag                       = GetWord();
                             1212 
P:0191 0BF080 rrrrrr  6  831 1214         jsr     GetWord
P:0193 5E7000 rrrrrr  3  834 1215         move    a,y:Fg_Wave_wFormatTag
                             1216 
                             1217 ; 300  |        g_Wave_wChannels                        = GetWord();
                             1218 
P:0195 0BF080 rrrrrr  6  840 1220         jsr     GetWord
P:0197 5E7000 rrrrrr  3  843 1221         move    a,y:Fg_Wave_wChannels
                             1222 
                             1223 ; 301  |        g_Wave_dwSamplesPerSec  = GetDWord();
                             1224 
P:0199 0BF080 rrrrrr  6  849 1226         jsr     GetDWord
P:019B 5C7000 rrrrrr  3  852 1227         move    a1,y:Fg_Wave_dwSamplesPerSec+1
P:019D 587000 rrrrrr  3  855 1228         move    a0,y:Fg_Wave_dwSamplesPerSec
                             1229 
                             1230 ; 302  |        g_Wave_dwAvgBytesPerSec = GetDWord();
                             1231 
P:019F 0BF080 rrrrrr  6  861 1233         jsr     GetDWord
P:01A1 5C7000 rrrrrr  3  864 1234         move    a1,y:Fg_Wave_dwAvgBytesPerSec+1
P:01A3 587000 rrrrrr  3  867 1235         move    a0,y:Fg_Wave_dwAvgBytesPerSec
                             1236 
                             1237 ; 303  |        g_Wave_wBlockAlign              = GetWord();
                             1238 
P:01A5 0BF080 rrrrrr  6  873 1240         jsr     GetWord
P:01A7 5E7000 rrrrrr  3  876 1241         move    a,y:Fg_Wave_wBlockAlign
                             1242 
                             1243 ; 304  |}
                             1244 
P:01A9 05F07C rrrrrr  4  880 1246         movec   y:ss_Process_Common_Fmt_Header,ssh
P:01AB 000000         2  882 1248         nop
P:01AC 00000C         4  886 1249         rts
                             1250 
Y:0000                       1251         org     y,".yovlwavedec@Process_Common_Fmt_Header",overlay:
                             1252 ss_Process_Common_Fmt_Header:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:0000 RESERVED              1253         ds      1
Y:0000
                             1254 
P:01AD                       1255         org     p,".ptextwavedec":
                             1257 
                             1258 ; 305  |
                             1259 ; 306  |
                             1260 ; 307  |/* 
                             1261 ; 308  |///////////////////////////////////////////////////////////////////////////////
                             1262 ; 309  |;
                             1263 ; 310  |;>   Name:  Decode_MS_ADPCM_header
                             1264 ; 311  |;
                             1265 ; 312  |;    Type:      Function
                             1266 ; 313  |;
                             1267 ; 314  |;       void Decode_MS_ADPCM_header()
                             1268 ; 315  |;
                             1269 ; 316  |;    Description:       Processes MS ADPCM header 
                             1270 ; 317  |;
                             1271 ; 318  |;    Inputs:            
                             1272 ; 319  |;                       void
                             1273 ; 320  |;           
                             1274 ; 321  |;    Outputs:           
                             1275 ; 322  |;    Notes: Can be overlaid
                             1276 ; 323  |;////////////////////////////////////////////////////////////////////////////// 
                             1277 ; 324  |*/
                             1278 ; 325  |#ifdef MS_ADPCM
                             1279 ; 326  |void Decode_MS_ADPCM_header(long int *cksize)
                             1280 ; 327  |{
                             1281 
                             1286 FDecode_MS_ADPCM_header:
P:01AD 05707C rrrrrr  4  890 1287         movec   ssh,y:ss_Decode_MS_ADPCM_header
                             1293 
                             1294 ; 328  |        int i;
                             1295 
P:01AF 687000 rrrrrr  3  893 1297         move    r0,y:ss_Decode_MS_ADPCM_header+1
                             1300 
                             1301 ; 329  |        g_Wave_wBitsPerSample                   = GetWord();
                             1302 
P:01B1 0BF080 rrrrrr  6  899 1304         jsr     GetWord
P:01B3 5E7000 rrrrrr  3  902 1305         move    a,y:Fg_Wave_wBitsPerSample
                             1306 
                             1307 ; 330  |        g_Wave_wcbSize                                  = GetWord();
                             1308 
P:01B5 0BF080 rrrrrr  6  908 1310         jsr     GetWord
P:01B7 5E7000 rrrrrr  3  911 1311         move    a,y:Fg_Wave_wcbSize
                             1312 
                             1313 ; 331  |        g_Wave_wnSamplesPerBlock                = GetWord();
                             1314 
P:01B9 0BF080 rrrrrr  6  917 1316         jsr     GetWord
P:01BB 5E7000 rrrrrr  3  920 1317         move    a,y:Fg_Wave_wnSamplesPerBlock
                             1318 
                             1319 ; 332  |        g_Wave_wnNumCoef                                = GetWord();
                             1320 
P:01BD 0BF080 rrrrrr  6  926 1322         jsr     GetWord
P:01BF 5E7000 rrrrrr  3  929 1323         move    a,y:Fg_Wave_wnNumCoef
                             1324 
                             1325 ; 333  |    *cksize -= 8;
                             1326 
P:01C1 6EF000 rrrrrr  3  932 1328         move    y:ss_Decode_MS_ADPCM_header+1,r6
P:01C3 000000         2  934 1329         nop
P:01C4 205E00         2  936 1330         move    (r6)+
P:01C5 5FD600         2  938 1331         move    y:(r6)-,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
P:01C6 59E600         2  940 1332         move    y:(r6),b0
P:01C7 270000         2  942 1333         move    #0,y1
P:01C8 46F400 000008  3  945 1334         move    #>8,y0
P:01CA 20003C         2  947 1335         sub     y,b
P:01CB 6CF000 rrrrrr  3  950 1336         move    y:ss_Decode_MS_ADPCM_header+1,r4
P:01CD 000000         2  952 1337         nop
P:01CE 595C00         2  954 1338         move    b0,y:(r4)+
P:01CF 5D5400         2  956 1339         move    b1,y:(r4)-
                             1342 
                             1343 ; 334  |        for (i = 0; i < g_Wave_wnNumCoef; i++)
                             1344 
P:01D0 20001B         2  958 1346         clr     b   
P:01D1 66F400 rrrrrr  3  961 1348         move    #Fg_Wave_wCoef1,r6
P:01D3 65F400 rrrrrr  3  964 1349         move    #Fg_Wave_wCoef2,r5
P:01D5 46F400 000001  3  967 1350         move    #>1,y0
P:01D7 0AF080 rrrrrr  6  973 1351         jmp     L89
P:01D9 6D7000 rrrrrr  3  976 1352 L88:    move    r5,y:ss_Decode_MS_ADPCM_header+4
P:01DB 6E7000 rrrrrr  3  979 1353         move    r6,y:ss_Decode_MS_ADPCM_header+3
P:01DD 5D7000 rrrrrr  3  982 1354         move    b1,y:ss_Decode_MS_ADPCM_header+2
P:01DF 6C7000 rrrrrr  3  985 1357         move    r4,y:ss_Decode_MS_ADPCM_header+1
                             1360 
                             1361 ; 335  |        {
                             1362 ; 336  |                g_Wave_wCoef1[i]        = GetSWord();
                             1363 
P:01E1 0BF080 rrrrrr  6  991 1365         jsr     GetSWord
P:01E3 6EF000 rrrrrr  3  994 1366         move    y:ss_Decode_MS_ADPCM_header+3,r6
P:01E5 000000         2  996 1367         nop
P:01E6 5E6600         2  998 1368         move    a,y:(r6)
                             1369 
                             1370 ; 337  |                g_Wave_wCoef2[i]        = GetSWord();
                             1371 
P:01E7 0BF080 rrrrrr  6 1004 1373         jsr     GetSWord
P:01E9 6EF000 rrrrrr  3 1007 1374         move    y:ss_Decode_MS_ADPCM_header+4,r6
P:01EB 000000         2 1009 1375         nop
P:01EC 5E5E00         2 1011 1376         move    a,y:(r6)+
                             1377 
                             1378 ; 338  |        *cksize -= 4;
                             1379 
P:01ED 6DF000 rrrrrr  3 1014 1381         move    y:ss_Decode_MS_ADPCM_header+1,r5
P:01EF 22B400         2 1016 1382         move    r5,r4
P:01F0 205D00         2 1018 1383         move    (r5)+
P:01F1 5ED500         2 1020 1384         move    y:(r5)-,a
P:01F2 58E500         2 1022 1385         move    y:(r5),a0
P:01F3 20001B         2 1024 1388         clr     b   
P:01F4 290400         2 1026 1389         move    #4,b0
P:01F5 200014         2 1028 1390         sub     b,a
P:01F6 585C00         2 1030 1391         move    a0,y:(r4)+
P:01F7 5C5400         2 1032 1392         move    a1,y:(r4)-
P:01F8 46F400 000001  3 1035 1394         move    #>1,y0
P:01FA 22D500         2 1037 1395         move    r6,r5
P:01FB 6EF000 rrrrrr  3 1040 1396         move    y:ss_Decode_MS_ADPCM_header+3,r6
P:01FD 000000         2 1042 1397         nop
P:01FE 205E00         2 1044 1398         move    (r6)+
P:01FF 5FF000 rrrrrr  3 1047 1399         move    y:ss_Decode_MS_ADPCM_header+2,b
P:0201 200058         2 1049 1400         add     y0,b
P:0202 4FF000 rrrrrr  3 1052 1403 L89:    move    y:Fg_Wave_wnNumCoef,y1
P:0204 20007D         2 1054 1404         cmp     y1,b
P:0205 0AF0A9 rrrrrr  6 1060 1405         jlt     L88
                             1406 
                             1407 ; 339  |        }
                             1408 ; 340  |    
                             1409 ; 341  |}       
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1410 
P:0207 05F07C rrrrrr  4 1064 1412         movec   y:ss_Decode_MS_ADPCM_header,ssh
P:0209 000000         2 1066 1414         nop
P:020A 00000C         4 1070 1415         rts
                             1418 
Y:0000                       1419         org     y,".yovlwavedec@Decode_MS_ADPCM_header",overlay:
                             1420 ss_Decode_MS_ADPCM_header:
Y:0000                       1421         ds      6
   |   RESERVED                   
Y:0005
                             1422 
P:020B                       1423         org     p,".ptextwavedec":
                             1425 
                             1426 ; 342  |
                             1427 ; 343  |#endif
                             1428 ; 344  |
                             1429 ; 345  |
                             1430 ; 346  |/* 
                             1431 ; 347  |///////////////////////////////////////////////////////////////////////////////
                             1432 ; 348  |;
                             1433 ; 349  |;>   Name:  Decode_IMA_ADPCM_header
                             1434 ; 350  |;
                             1435 ; 351  |;    Type:      Function
                             1436 ; 352  |;
                             1437 ; 353  |;       void Decode_IMA_ADPCM_header()
                             1438 ; 354  |;
                             1439 ; 355  |;    Description:       Processes IMA ADPCM header 
                             1440 ; 356  |;
                             1441 ; 357  |;    Inputs:            
                             1442 ; 358  |;                       void
                             1443 ; 359  |;           
                             1444 ; 360  |;    Outputs:           
                             1445 ; 361  |;    Notes: Can be overlaid
                             1446 ; 362  |;////////////////////////////////////////////////////////////////////////////// 
                             1447 ; 363  |*/
                             1448 ; 364  |#ifdef IMA_ADPCM
                             1449 ; 365  |int Decode_IMA_ADPCM_header()
                             1450 ; 366  |{
                             1451 
                             1456 FDecode_IMA_ADPCM_header:
P:020B 05707C rrrrrr  4 1074 1457         movec   ssh,y:ss_Decode_IMA_ADPCM_header
                             1459 
                             1460 ; 367  |        g_Wave_wBitsPerSample                   = GetWord();
                             1461 
P:020D 0BF080 rrrrrr  6 1080 1463         jsr     GetWord
P:020F 5E7000 rrrrrr  3 1083 1464         move    a,y:Fg_Wave_wBitsPerSample
                             1465 
                             1466 ; 368  |        g_Wave_wcbSize                                  = GetWord();
                             1467 
P:0211 0BF080 rrrrrr  6 1089 1469         jsr     GetWord
P:0213 5E7000 rrrrrr  3 1092 1470         move    a,y:Fg_Wave_wcbSize
                             1471 
                             1472 ; 369  |        g_Wave_wnSamplesPerBlock                = GetWord();
                             1473 
P:0215 0BF080 rrrrrr  6 1098 1475         jsr     GetWord
P:0217 5E7000 rrrrrr  3 1101 1476         move    a,y:Fg_Wave_wnSamplesPerBlock
                             1477 
                             1478 ; 370  |    if(g_Wave_wBitsPerSample == 4)
                             1479 
P:0219 5FF000 rrrrrr  3 1104 1481         move    y:Fg_Wave_wBitsPerSample,b
P:021B 46F400 000004  3 1107 1482         move    #>4,y0
P:021D 20005D         2 1109 1483         cmp     y0,b
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1484 
                             1485 ; 371  |       return 0;
                             1486 ; 372  |    else
                             1487 ; 373  |       return -1;
                             1488 
P:021E 56F400 FFFFFF  3 1112 1490         move    #>-1,a
P:0220 0AF0A2 rrrrrr  6 1118 1492         jne     L91
P:0222 200013         2 1120 1494         clr     a   
                             1495 
                             1496 ; 374  |}
                             1497 
P:0223 05F07C rrrrrr  4 1124 1499 L91:    movec   y:ss_Decode_IMA_ADPCM_header,ssh
P:0225 000000         2 1126 1501         nop
P:0226 00000C         4 1130 1502         rts
                             1503 
Y:0000                       1504         org     y,".yovlwavedec@Decode_IMA_ADPCM_header",overlay:
                             1505 ss_Decode_IMA_ADPCM_header:
Y:0000 RESERVED              1506         ds      1
Y:0000
                             1507 
P:0227                       1508         org     p,".ptextwavedec":
                             1510 
                             1511 ; 375  |#endif
                             1512 ; 376  |
                             1513 ; 377  |/* 
                             1514 ; 378  |///////////////////////////////////////////////////////////////////////////////
                             1515 ; 379  |;
                             1516 ; 380  |;>   Name:  Decode_G721_ADPCM_header
                             1517 ; 381  |;
                             1518 ; 382  |;    Type:      Function
                             1519 ; 383  |;
                             1520 ; 384  |;       void Decode_G721_ADPCM_header()
                             1521 ; 385  |;
                             1522 ; 386  |;    Description:       Processes G721 ADPCM header 
                             1523 ; 387  |;
                             1524 ; 388  |;    Inputs:            
                             1525 ; 389  |;                       void
                             1526 ; 390  |;           
                             1527 ; 391  |;    Outputs:           
                             1528 ; 392  |;    Notes: Can be overlaid
                             1529 ; 393  |;////////////////////////////////////////////////////////////////////////////// 
                             1530 ; 394  |*/
                             1531 ; 395  |#ifdef G721_ADPCM
                             1532 ; 396  |void Decode_G721_ADPCM_header()
                             1533 ; 397  |{
                             1534 ; 398  |        g_Wave_wBitsPerSample                   = GetWord();
                             1535 ; 399  |        g_Wave_wcbSize                                  = GetWord();
                             1536 ; 400  |        g_Wave_wnAuxBlockSize                   = GetWord();
                             1537 ; 401  |}
                             1538 ; 402  |#endif
                             1539 ; 403  |
                             1540 ; 404  |/* 
                             1541 ; 405  |///////////////////////////////////////////////////////////////////////////////
                             1542 ; 406  |;
                             1543 ; 407  |;>   Name:  Decode_PCM_header
                             1544 ; 408  |;
                             1545 ; 409  |;    Type:      Function
                             1546 ; 410  |;
                             1547 ; 411  |;       void Decode_PCM_header()
                             1548 ; 412  |;
                             1549 ; 413  |;    Description:       Processes PCM Wave header 
                             1550 ; 414  |;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1551 ; 415  |;    Inputs:            
                             1552 ; 416  |;                       void
                             1553 ; 417  |;           
                             1554 ; 418  |;    Outputs:           
                             1555 ; 419  |;    Notes: Can be overlaid
                             1556 ; 420  |;////////////////////////////////////////////////////////////////////////////// 
                             1557 ; 421  |*/
                             1558 ; 422  |#ifdef WINDOWS_PCM
                             1559 ; 423  |int Decode_PCM_header()
                             1560 ; 424  |{
                             1561 
                             1566 FDecode_PCM_header:
P:0227 05707C rrrrrr  4 1134 1567         movec   ssh,y:ss_Decode_PCM_header
                             1569 
                             1570 ; 425  |        g_Wave_wBitsPerSample                   = GetWord();
                             1571 
P:0229 0BF080 rrrrrr  6 1140 1573         jsr     GetWord
P:022B 5E7000 rrrrrr  3 1143 1574         move    a,y:Fg_Wave_wBitsPerSample
                             1575 
                             1576 ; 426  |    // Fudge the Block Align to process more samples, simultaneously, so rest of the proce
                                  ssing is unchanged
                             1577 ; 427  |    g_Wave_wBlockAlign              = 504; // This ensures that we can process both 24 bit
                                   and 16 bit sample blocks
                             1578 
P:022D 44F400 0001F8  3 1146 1580         move    #$1F8,x0
P:022F 4C7000 rrrrrr  3 1149 1581         move    x0,y:Fg_Wave_wBlockAlign
                             1582 
                             1583 ; 428  |    // Dummy variable below for processing blocks of data.
                             1584 ; 429  |    if (g_Wave_wBitsPerSample == 16)
                             1585 
P:0231 46F400 000010  3 1152 1587         move    #>16,y0
P:0233 200055         2 1154 1588         cmp     y0,a
P:0234 0AF0A2 rrrrrr  6 1160 1589         jne     L92
                             1590 
                             1591 ; 430  |        g_Wave_wnSamplesPerBlock        = (252>>(g_Wave_wChannels-1));
                             1592 
P:0236 5EF000 rrrrrr  3 1163 1594         move    y:Fg_Wave_wChannels,a
P:0238 47F400 000001  3 1166 1595         move    #>1,y1
P:023A 200074         2 1168 1596         sub     y1,a
P:023B 57F400 0000FC  3 1171 1597         move    #>$FC,b
P:023D 0AF0AF rrrrrr  6 1177 1598         jle     L98
P:023F 06CC00 rrrrrr  6 1183 1599         do      a1,L98
P:0241 20002A         2 1185 1601         asr     b
P:0242 000000         2 1187 1602         nop
                         (4) 1603 L98:
P:0243 5D7000 rrrrrr  3 1190 1605         move    b1,y:Fg_Wave_wnSamplesPerBlock
P:0245 0AF080 rrrrrr  6 1196 1606         jmp     L95
                             1607 
                             1608 ; 431  |    else if (g_Wave_wBitsPerSample == 24)
                             1609 
P:0247 45F400 000018  3 1199 1611 L92:    move    #>24,x1
P:0249 200065         2 1201 1612         cmp     x1,a
P:024A 0AF0A2 rrrrrr  6 1207 1613         jne     L93
                             1614 
                             1615 ; 432  |        g_Wave_wnSamplesPerBlock        = (168>>(g_Wave_wChannels-1));
                             1616 
P:024C 5FF000 rrrrrr  3 1210 1618         move    y:Fg_Wave_wChannels,b
P:024E 46F400 000001  3 1213 1619         move    #>1,y0
P:0250 20005C         2 1215 1620         sub     y0,b
P:0251 56F400 0000A8  3 1218 1621         move    #>168,a
P:0253 0AF0AF rrrrrr  6 1224 1622         jle     L99
P:0255 06CD00 rrrrrr  6 1230 1623         do      b1,L99
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0257 200022         2 1232 1625         asr     a
P:0258 000000         2 1234 1626         nop
                         (4) 1627 L99:
P:0259 5C7000 rrrrrr  3 1237 1629         move    a1,y:Fg_Wave_wnSamplesPerBlock
P:025B 0AF080 rrrrrr  6 1243 1630         jmp     L95
                             1631 
                             1632 ; 433  |    else
                             1633 ; 434  |        g_Wave_wnSamplesPerBlock        = (504>>(g_Wave_wChannels-1)); // Got to be 8 bit 
                                  PCM
                             1634 
P:025D 5FF000 rrrrrr  3 1246 1636 L93:    move    y:Fg_Wave_wChannels,b
P:025F 47F400 000001  3 1249 1637         move    #>1,y1
P:0261 20007C         2 1251 1638         sub     y1,b
P:0262 200041         2 1253 1639         tfr     x0,a
P:0263 20000B         2 1255 1640         tst     b
P:0264 0AF0AF rrrrrr  6 1261 1641         jle     L100
P:0266 06CD00 rrrrrr  6 1267 1642         do      b1,L100
P:0268 200022         2 1269 1644         asr     a
P:0269 000000         2 1271 1645         nop
                         (4) 1646 L100:
P:026A 5C7000 rrrrrr  3 1274 1648         move    a1,y:Fg_Wave_wnSamplesPerBlock
                             1649 
                             1650 ; 435  |
                             1651 ; 436  |    // Not supported high data rates.
                             1652 ; 437  |    g_Wave_wMegicWord = ((g_Wave_dwAvgBytesPerSec) >> 1) + ((g_Wave_dwSamplesPerSec) << 1)
                                  ;
                             1653 
P:026C 5FF000 rrrrrr  3 1277 1655 L95:    move    y:Fg_Wave_dwAvgBytesPerSec+1,b
P:026E 59F000 rrrrrr  3 1280 1656         move    y:Fg_Wave_dwAvgBytesPerSec,b0
P:0270 20002A         2 1282 1657         asr     b
P:0271 5EF000 rrrrrr  3 1285 1658         move    y:Fg_Wave_dwSamplesPerSec+1,a
P:0273 58F000 rrrrrr  3 1288 1659         move    y:Fg_Wave_dwSamplesPerSec,a0
P:0275 200032         2 1290 1660         asl     a
P:0276 200018         2 1292 1661         add     a,b
P:0277 5D7000 rrrrrr  3 1295 1662         move    b1,y:Fg_Wave_wMegicWord+1
P:0279 597000 rrrrrr  3 1298 1663         move    b0,y:Fg_Wave_wMegicWord
                             1664 
                             1665 ; 438  |    if(g_Wave_wMegicWord > 190000)
                             1666 
P:027B 200013         2 1300 1668         clr     a   
P:027C 50F400 02E630  3 1303 1669         move    #190000,a0
P:027E 2B0000         2 1305 1670         move    #0,b2
P:027F 0ACD17 rrrrrr  6 1311 1671         jclr    #23,b1,L101
P:0281 044BA0         2 1313 1672         movec   m0,b2
P:0282 20000D         2 1315 1673 L101:   cmp     a,b
                             1674 
                             1675 ; 439  |        return -1;
                             1676 
P:0283 56F400 FFFFFF  3 1318 1678         move    #>-1,a
P:0285 0AF0A7 rrrrrr  6 1324 1679         jgt     L97
                             1680 
                             1681 ; 440  |        
                             1682 ; 441  |    return 0;
                             1683 
P:0287 200013         2 1326 1685         clr     a   
                             1686 
                             1687 ; 442  |
                             1688 ; 443  |}
                             1689 
P:0288 05F07C rrrrrr  4 1330 1691 L97:    movec   y:ss_Decode_PCM_header,ssh
P:028A 000000         2 1332 1693         nop
P:028B 00000C         4 1336 1694         rts
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1695 
Y:0000                       1696         org     y,".yovlwavedec@Decode_PCM_header",overlay:
                             1697 ss_Decode_PCM_header:
Y:0000 RESERVED              1698         ds      1
Y:0000
                             1699 
P:028C                       1700         org     p,".ptextwavedec":
                             1702 
                             1703 ; 444  |#endif
                             1704 ; 445  |
                             1705 ; 446  |
                             1706 ; 447  |/* 
                             1707 ; 448  |///////////////////////////////////////////////////////////////////////////////
                             1708 ; 449  |;
                             1709 ; 450  |;>   Name:  GetSamplestoDecode
                             1710 ; 451  |;
                             1711 ; 452  |;    Type:      Function
                             1712 ; 453  |;
                             1713 ; 454  |;       int GetSamplestoDecode()
                             1714 ; 455  |;
                             1715 ; 456  |;    Description:       Gets Samples to Process for a normal block
                             1716 ; 457  |;
                             1717 ; 458  |;    Inputs:            
                             1718 ; 459  |;                       Format Tag
                             1719 ; 460  |;           
                             1720 ; 461  |;    Outputs: Samples to Process
                             1721 ; 462  |;    Notes: Can be overlaid. NOT USED
                             1722 ; 463  |;////////////////////////////////////////////////////////////////////////////// 
                             1723 ; 464  |*/
                             1724 ; 465  |int GetSamplestoDecode(int FormatTag)
                             1725 ; 466  |{
                             1726 
                             1731 FGetSamplestoDecode:
                             1736 
                             1737 ; 467  |    int ret_val = 0;
                             1738 
P:028C 218F00         2 1338 1740         move    a1,b
P:028D 200013         2 1340 1743         clr     a   
                             1745 
                             1746 ; 468  |    if (FormatTag == WAVE_FORMAT_ADPCM)
                             1747 
P:028E 47F400 000002  3 1343 1749         move    #>2,y1
P:0290 20007D         2 1345 1750         cmp     y1,b
P:0291 0AF0A2 rrrrrr  6 1351 1751         jne     L102
                             1752 
                             1753 ; 469  |    {
                             1754 ; 470  |        ret_val =  g_Wave_wnSamplesPerBlock - 2;
                             1755 
P:0293 5EF000 rrrrrr  3 1354 1757         move    y:Fg_Wave_wnSamplesPerBlock,a
P:0295 200074         2 1356 1759         sub     y1,a
                             1761 
                             1762 ; 471  |    }
                             1763 
                             1765 L102:
                             1766 
                             1767 ; 472  |    return ret_val;
                             1768 ; 473  |}
                             1769 
P:0296 00000C         4 1360 1771         rts
                             1775 
                             1776 ; 474  |
                             1777 ; 475  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1778 ; 476  |/* 
                             1779 ; 477  |///////////////////////////////////////////////////////////////////////////////
                             1780 ; 478  |;
                             1781 ; 479  |;>   Name:  GetSamplestoDecodeLastBlock
                             1782 ; 480  |;
                             1783 ; 481  |;    Type:      Function
                             1784 ; 482  |;
                             1785 ; 483  |;       int GetSamplestoDecodeLastBlock()
                             1786 ; 484  |;
                             1787 ; 485  |;    Description:       Gets Samples to Process for the last block
                             1788 ; 486  |;
                             1789 ; 487  |;    Inputs:            
                             1790 ; 488  |;                       Format Tag
                             1791 ; 489  |;           
                             1792 ; 490  |;    Outputs: Samples to Process
                             1793 ; 491  |;    Notes: Can be overlaid
                             1794 ; 492  |;////////////////////////////////////////////////////////////////////////////// 
                             1795 ; 493  |*/
                             1796 ; 494  |int GetSamplestoDecodeLastBlock(int FormatTag, long int g_Wave_datachunksize)
                             1797 ; 495  |{
                             1798 
                             1803 FGetSamplestoDecodeLastBlock:
                             1810 
                             1811 ; 496  |    int SamplestoDecode = 0;
                             1812 
P:0297 250000         2 1362 1814         move    #0,x1
                             1816 
                             1817 ; 497  |    if (FormatTag == WAVE_FORMAT_ADPCM)
                             1818 
P:0298 47F400 000002  3 1365 1820         move    #>2,y1
P:029A 20007D         2 1367 1821         cmp     y1,b
P:029B 0AF0A2 rrrrrr  6 1373 1822         jne     L104
                             1823 
                             1824 ; 498  |    {
                             1825 ; 499  |        if (g_Wave_wChannels == 1)
                             1826 
P:029D 5FF000 rrrrrr  3 1376 1828         move    y:Fg_Wave_wChannels,b
P:029F 45F400 000001  3 1379 1830         move    #>1,x1
P:02A1 20006D         2 1381 1831         cmp     x1,b
P:02A2 0AF0A2 rrrrrr  6 1387 1833         jne     L103
                             1834 
                             1835 ; 500  |            SamplestoDecode = 2*(g_Wave_wBlockAlign + g_Wave_datachunksize) - 12;
                             1836 
P:02A4 5FF000 rrrrrr  3 1390 1838         move    y:Fg_Wave_wBlockAlign,b
P:02A6 21A900         2 1392 1839         move    b1,b0
P:02A7 216D00         2 1394 1840         move    b2,b1
P:02A8 200010         2 1396 1841         add     b,a
P:02A9 200032         2 1398 1843         asl     a
P:02AA 270000         2 1400 1844         move    #0,y1
P:02AB 46F400 00000C  3 1403 1845         move    #>12,y0
P:02AD 200034         2 1405 1846         sub     y,a
P:02AE 210500         2 1407 1847         move    a0,x1
P:02AF 0AF080 rrrrrr  6 1413 1849         jmp     L115
                             1850 
                             1851 ; 501  |        else // Two channels
                             1852 ; 502  |                        SamplestoDecode = g_Wave_wBlockAlign + g_Wave_datachunksize - 12;
                             1853 
                             1855 L103:
P:02B1 5FF000 rrrrrr  3 1416 1857         move    y:Fg_Wave_wBlockAlign,b
P:02B3 21A400         2 1418 1858         move    b1,x0
P:02B4 216500         2 1420 1859         move    b2,x1
P:02B5 200020         2 1422 1861         add     x,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
P:02B6 270000         2 1424 1863         move    #0,y1
P:02B7 46F400 00000C  3 1427 1864         move    #>12,y0
P:02B9 200034         2 1429 1865         sub     y,a
P:02BA 210500         2 1431 1866         move    a0,x1
                             1868 
                             1869 ; 503  |    }
                             1870 
P:02BB 0AF080 rrrrrr  6 1437 1872         jmp     L115
                             1873 
                             1874 ; 504  |    else if (FormatTag == WAVE_FORMAT_IMA_ADPCM)
                             1875 
                             1877 L104:
P:02BD 46F400 000011  3 1440 1880         move    #>17,y0
P:02BF 20005D         2 1442 1881         cmp     y0,b
P:02C0 0AF0A2 rrrrrr  6 1448 1882         jne     L106
                             1883 
                             1884 ; 505  |    {
                             1885 ; 506  |        if (g_Wave_wChannels == 1)
                             1886 
P:02C2 5FF000 rrrrrr  3 1451 1888         move    y:Fg_Wave_wChannels,b
P:02C4 47F400 000001  3 1454 1890         move    #>1,y1
P:02C6 20007D         2 1456 1891         cmp     y1,b
P:02C7 0AF0A2 rrrrrr  6 1462 1892         jne     L105
                             1893 
                             1894 ; 507  |            SamplestoDecode = 2*(g_Wave_wBlockAlign + g_Wave_datachunksize) - 7;
                             1895 
P:02C9 5FF000 rrrrrr  3 1465 1897         move    y:Fg_Wave_wBlockAlign,b
P:02CB 21A900         2 1467 1898         move    b1,b0
P:02CC 216D00         2 1469 1899         move    b2,b1
P:02CD 200010         2 1471 1900         add     b,a
P:02CE 200032         2 1473 1902         asl     a
P:02CF 270000         2 1475 1903         move    #0,y1
P:02D0 46F400 000007  3 1478 1904         move    #>7,y0
P:02D2 200034         2 1480 1905         sub     y,a
P:02D3 210500         2 1482 1906         move    a0,x1
P:02D4 0AF080 rrrrrr  6 1488 1907         jmp     L115
                             1908 
                             1909 ; 508  |        else // Two channels
                             1910 ; 509  |                        SamplestoDecode = g_Wave_wBlockAlign + g_Wave_datachunksize - 7;
                             1911 
                             1913 L105:
P:02D6 5FF000 rrrrrr  3 1491 1915         move    y:Fg_Wave_wBlockAlign,b
P:02D8 21A400         2 1493 1916         move    b1,x0
P:02D9 216500         2 1495 1917         move    b2,x1
P:02DA 200020         2 1497 1919         add     x,a
P:02DB 270000         2 1499 1921         move    #0,y1
P:02DC 46F400 000007  3 1502 1922         move    #>7,y0
P:02DE 200034         2 1504 1923         sub     y,a
P:02DF 210500         2 1506 1924         move    a0,x1
                             1926 
                             1927 ; 510  |    }
                             1928 
P:02E0 0AF080 rrrrrr  6 1512 1930         jmp     L115
                             1931 
                             1932 ; 511  |#ifdef WINDOWS_PCM
                             1933 ; 512  |    else if (FormatTag == WAVE_FORMAT_PCM)
                             1934 
                             1936 L106:
P:02E2 46F400 000001  3 1515 1939         move    #>1,y0
P:02E4 20005D         2 1517 1940         cmp     y0,b
P:02E5 0AF0A2 rrrrrr  6 1523 1941         jne     L115
                             1942 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1943 ; 513  |    {
                             1944 ; 514  |         SamplestoDecode = g_Wave_wBlockAlign + g_Wave_datachunksize;
                             1945 
P:02E7 5FF000 rrrrrr  3 1526 1947         move    y:Fg_Wave_wBlockAlign,b
P:02E9 21A400         2 1528 1949         move    b1,x0
P:02EA 216500         2 1530 1950         move    b2,x1
P:02EB 200020         2 1532 1952         add     x,a
P:02EC 210600         2 1534 1954         move    a0,y0
P:02ED 218700         2 1536 1955         move    a1,y1
P:02EE 200051         2 1538 1956         tfr     y0,a
                             1958 
                             1959 ; 515  |        if (g_Wave_wBitsPerSample == 16)
                             1960 
P:02EF 5FF000 rrrrrr  3 1541 1962         move    y:Fg_Wave_wBitsPerSample,b
P:02F1 44F400 000010  3 1544 1963         move    #>16,x0
P:02F3 20004D         2 1546 1964         cmp     x0,b
P:02F4 0AF0A2 rrrrrr  6 1552 1965         jne     L107
                             1966 
                             1967 ; 516  |            SamplestoDecode        = (SamplestoDecode>>g_Wave_wChannels);
                             1968 
P:02F6 5EF000 rrrrrr  3 1555 1970         move    y:Fg_Wave_wChannels,a
P:02F8 200059         2 1557 1972         tfr     y0,b
P:02F9 200003         2 1559 1973         tst     a
P:02FA 0AF0AF rrrrrr  6 1565 1974         jle     L116
P:02FC 06CC00 rrrrrr  6 1571 1975         do      a1,L116
P:02FE 20002A         2 1573 1977         asr     b
P:02FF 000000         2 1575 1978         nop
                         (4) 1979 L116:
P:0300 21A500         2 1577 1981         move    b1,x1
P:0301 0AF080 rrrrrr  6 1583 1983         jmp     L115
                             1984 
                             1985 ; 517  |        else if (g_Wave_wBitsPerSample == 24)
                             1986 
                             1988 L107:
P:0303 45F400 000018  3 1586 1991         move    #>24,x1
P:0305 20006D         2 1588 1992         cmp     x1,b
P:0306 0AF0A2 rrrrrr  6 1594 1993         jne     L108
                             1994 
                             1995 ; 518  |            SamplestoDecode        = ((SamplestoDecode/3)>>(g_Wave_wChannels-1));
                             1996 
P:0308 44F400 000003  3 1597 1998         move    #>3,x0
P:030A 0BF080 rrrrrr  6 1603 1999         jsr     Rdiv_iii
P:030C 5FF000 rrrrrr  3 1606 2001         move    y:Fg_Wave_wChannels,b
P:030E 46F400 000001  3 1609 2002         move    #>1,y0
P:0310 20005C         2 1611 2003         sub     y0,b
P:0311 0AF0AF rrrrrr  6 1617 2004         jle     L117
P:0313 06CD00 rrrrrr  6 1623 2005         do      b1,L117
P:0315 200022         2 1625 2007         asr     a
P:0316 000000         2 1627 2008         nop
                         (4) 2009 L117:
P:0317 218500         2 1629 2011         move    a1,x1
P:0318 0AF080 rrrrrr  6 1635 2013         jmp     L115
                             2014 
                             2015 ; 519  |        else
                             2016 ; 520  |            SamplestoDecode        = (SamplestoDecode>>(g_Wave_wChannels-1)); // Got to be
                                   8 bit PCM
                             2017 
                             2019 L108:
P:031A 5FF000 rrrrrr  3 1638 2022         move    y:Fg_Wave_wChannels,b
P:031C 46F400 000001  3 1641 2023         move    #>1,y0
P:031E 20005C         2 1643 2024         sub     y0,b
P:031F 0AF0AF rrrrrr  6 1649 2025         jle     L118
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0321 06CD00 rrrrrr  6 1655 2026         do      b1,L118
P:0323 200022         2 1657 2028         asr     a
P:0324 000000         2 1659 2029         nop
                         (4) 2030 L118:
P:0325 218500         2 1661 2034         move    a1,x1
                             2037 
                             2038 ; 521  |    }
                             2039 ; 522  |#endif
                             2040 ; 523  |    return SamplestoDecode;
                             2041 
P:0326 200061         2 1663 2043 L115:   tfr     x1,a
                             2046 
                             2047 ; 524  |}
                             2048 
P:0327 00000C         4 1667 2050         rts
                             2053 
                             2054 ; 525  |
                             2055 ; 526  |                                  
                             2056 ; 527  |
                             2057 ; 528  |#ifdef ADPCMTEST
                             2058 ; 529  |void Flush_OutPut_PCM_Buffer(int size)
                             2059 ; 530  |{
                             2060 ; 531  |        fwrite(SampleBuf,1,size,out);
                             2061 ; 532  |}
                             2062 ; 533  |
                             2063 ; 534  |/* 
                             2064 ; 535  |///////////////////////////////////////////////////////////////////////////////
                             2065 ; 536  |;
                             2066 ; 537  |;>   Name:  Decode_ADPCM
                             2067 ; 538  |;
                             2068 ; 539  |;    Type:      Function
                             2069 ; 540  |;
                             2070 ; 541  |;       int Decode_ADPCM()
                             2071 ; 542  |;
                             2072 ; 543  |;    Description:       Decodes for stand-alone version of the decoder
                             2073 ; 544  |;
                             2074 ; 545  |;    Inputs:            
                             2075 ; 546  |;                       Format Tag
                             2076 ; 547  |;           
                             2077 ; 548  |;    Outputs: void
                             2078 ; 549  |;    Notes: Used by the Test code.
                             2079 ; 550  |;////////////////////////////////////////////////////////////////////////////// 
                             2080 ; 551  |*/
                             2081 ; 552  |
                             2082 ; 553  |void Decode_ADPCM(int FormatTag)
                             2083 ; 554  |{
                             2084 ; 555  |        int Last_block_flag = 0;
                             2085 ; 556  |        
                             2086 ; 557  |        // Default processing sizes.
                             2087 ; 558  |        int SamplestoDecode = g_Wave_wnSamplesPerBlock;
                             2088 ; 559  |        int     inputbufsize = g_Wave_wBlockAlign;
                             2089 ; 560  |#ifdef IMA_ADPCM
                             2090 ; 561  |    Init_IMA_ADPCM_States();
                             2091 ; 562  |#endif
                             2092 ; 563  |        // Start real time processing now. Set the file pointers correctly.
                             2093 ; 564  |        Seek_data_offset(g_Wave_data_offset);
                             2094 ; 565  |        while(g_Wave_datachunksize>0)
                             2095 ; 566  |        {
                             2096 ; 567  |                // Subtract block align and move forward into the buffer. so padding is av
                                  oided
                             2097 ; 568  |                g_Wave_datachunksize -= g_Wave_wBlockAlign;     
                             2098 ; 569  |                if (g_Wave_datachunksize <= 0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2099 ; 570  |                {
                             2100 ; 571  |                        Last_block_flag = 1;
                             2101 ; 572  |            
                             2102 ; 573  |                        SamplestoDecode = GetSamplestoDecodeLastBlock(FormatTag, g_Wave_da
                                  tachunksize);
                             2103 ; 574  |                        inputbufsize = g_Wave_wBlockAlign + g_Wave_datachunksize;
                             2104 ; 575  |                }
                             2105 ; 576  |                
                             2106 ; 577  |                Wave_Fill_Input_Bitstream_Buffer(inputbufsize);
                             2107 ; 578  |                
                             2108 ; 579  |#ifdef MS_ADPCM
                             2109 ; 580  |        if (FormatTag == WAVE_FORMAT_ADPCM)
                             2110 ; 581  |                Decode_MS_ADPCM_Block(SamplestoDecode);
                             2111 ; 582  |        else 
                             2112 ; 583  |#endif
                             2113 ; 584  |#ifdef IMA_ADPCM
                             2114 ; 585  |        if (FormatTag == WAVE_FORMAT_IMA_ADPCM)
                             2115 ; 586  |        {
                             2116 ; 587  |                Decode_IMA_ADPCM_Block(SamplestoDecode);
                             2117 ; 588  |        }
                             2118 ; 589  |            else
                             2119 ; 590  |#endif
                             2120 ; 591  |#ifdef G721_ADPCM
                             2121 ; 592  |        if (FormatTag == WAVE_FORMAT_G721_ADPCM)
                             2122 ; 593  |                Decode_G721_ADPCM_Block(SamplestoDecode);
                             2123 ; 594  |            else
                             2124 ; 595  |#endif
                             2125 ; 596  |#ifdef WINDOWS_PCM
                             2126 ; 597  |        if (FormatTag == WAVE_FORMAT_PCM)
                             2127 ; 598  |        {
                             2128 ; 599  |                Decode_PCM_Block(SamplestoDecode);
                             2129 ; 600  |        }
                             2130 ; 601  |            else
                             2131 ; 602  |#endif
                             2132 ; 603  |        return;
                             2133 ; 604  |                
                             2134 ; 605  |                Flush_OutPut_PCM_Buffer(SamplestoDecode*g_Wave_wChannels); // Just push th
                                  is out to the DAC.
                             2135 ; 606  |                
                             2136 ; 607  |                // Check if no more data to process
                             2137 ; 608  |                if (Last_block_flag == 1)
                             2138 ; 609  |                        return;
                             2139 ; 610  |        }
                             2140 ; 611  |}
                             2141 ; 612  |#endif
                             2142 ; 613  |
                             2143 ; 614  |
                             2144 
                             2166 
                             2167         extern  GetByte, GetDWord, GetSWord, GetWord, Get_file_offset
                             2168         extern  Rdiv_iii, Seek_data_offset, SkipData, y:FDataSize
                             2169         extern  y:Fckidlist, y:Fg_Wave_data_offset
                             2170         extern  y:Fg_Wave_datachunksize, y:Fg_Wave_dwAvgBytesPerSec
                             2171         extern  y:Fg_Wave_dwSamplesPerSec, y:Fg_Wave_dwWavDuration
                             2172         extern  y:Fg_Wave_wBitsPerSample, y:Fg_Wave_wBlockAlign
                             2173         extern  y:Fg_Wave_wChannels, y:Fg_Wave_wCoef1, y:Fg_Wave_wCoef2
                             2174         extern  y:Fg_Wave_wFormatTag, y:Fg_Wave_wMegicWord
                             2175         extern  y:Fg_Wave_wcbSize, y:Fg_Wave_wnNumCoef
                             2176         extern  y:Fg_Wave_wnSamplesPerBlock, y:Friff_file_flag
                             2177 
                             2178         global  FDecode_IMA_ADPCM_header, FDecode_MS_ADPCM_header
                             2179         global  FDecode_PCM_header, FGetSamplestoDecode
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2180         global  FGetSamplestoDecodeLastBlock, FGetckID, FProcessChunk
                             2181         global  FProcess_Common_Fmt_Header, Fwaveparser
                             2182 
                             2183         local   L32, L33, L34, L36, L38, L39, L41, L43, L64, L65, L66, L67
                             2184         local   L68, L69, L72, L73, L74, L75, L76, L77, L82, L83, L85, L86
                             2185         local   L87, L88, L89, L91, L92, L93, L95, L97, L98, L99, L100
                             2186         local   L101, L102, L103, L104, L105, L106, L107, L108, L115, L116
                             2187         local   L117, L118, ss_Decode_IMA_ADPCM_header
                             2188         local   ss_Decode_MS_ADPCM_header, ss_Decode_PCM_header, ss_GetckID
                             2189         local   ss_ProcessChunk, ss_Process_Common_Fmt_Header
                             2190         local   ss_waveparser
                             2191 
                             2192         calls   "Decode_IMA_ADPCM_header", "GetWord"
                             2193         calls   "Decode_MS_ADPCM_header", "GetSWord", "GetWord"
                             2194         calls   "Decode_PCM_header", "GetWord"
                             2195         calls   "GetSamplestoDecodeLastBlock", "Rdiv_iii"
                             2196         calls   "GetckID", "GetDWord"
                             2197         calls   "ProcessChunk", "Decode_IMA_ADPCM_header"
                             2198         calls   "ProcessChunk", "Decode_MS_ADPCM_header"
                             2199         calls   "ProcessChunk", "Decode_PCM_header", "GetByte", "GetDWord"
                             2200         calls   "ProcessChunk", "Get_file_offset", "GetckID"
                             2201         calls   "ProcessChunk", "Process_Common_Fmt_Header"
                             2202         calls   "Process_Common_Fmt_Header", "GetDWord", "GetWord"
                             2203         calls   "waveparser", "GetDWord", "GetckID", "ProcessChunk"
                             2204         calls   "waveparser", "Seek_data_offset", "SkipData"
                             2205 
