TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   1
C:\STMP3XXX_SDK_FIRMWARE_320_finalfix\Projects\SDK\lcdexample\player\make\ccfd197b.src
M:ADDR CODE           CYCLES LINE SOURCELINE
                                1 ; TASKING DSP2410 C compiler v1.5r1 Build 208 SN 00100122
                                2 ; options: -OG -si -DPLAYER -DALL -DD3500 -DMMC -DLIION -DPL3_FB
                                3 ;          -DSTMP_BUILD_PLAYER -DPLAYER_BUILD -DPLAYER -DSTFM1000_LCD
                                4 ;          -DFULL_PLAYER_KERNEL -DDCDC_POWER_TRANSFER -DBACKLIGHT
                                5 ;          -DWMAAPI_NO_DRM -DREVB_ENGR_BD -DSED15XX_LCD -DSYNC_LYRICS
                                6 ;          -DTUNER_STFM1000 -DFM_EUROPE_REGION -DSD_USE_100KHZ_TUNING_GRID
                                7 ;          -DNEWSHINGYIH -DREAL_I2S_DATA -DFUNCLET
                                8 ;          -DMEDIA_DDI_COUNT_HIDDEN_SYSTEM_BLOCKS -DFMTUNER -DMP3_ENCODE
                                9 ;          -DCHKDSK -DFAT16 -DDEBUG -DDEVICE_3500 -DSDK2400 -DENGR_BD
                               10 ;          -DUSE_PLAYLIST3 -DBATTERY_TYPE_LI_ION -DBATTERY_CHARGE -w68 -w66
                               11 ;          -I..\output_3500\include
                               12 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player
                               13 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Menus -I..\..
                               14 ;          -I..\..\..\..\..\inc -I..\..\..\..\..\System\Common
                               15 ;          -I..\..\..\..\..\System\Common\symbols
                               16 ;          -I..\..\..\..\..\Projects\sdk\lcdexample\Player\Display
                               17 ;          -I..\..\..\..\..\Algorithms\DRM\janus\src\h
                               18 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               19 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               20 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               21 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               22 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand -I -I
                               23 ;          -I..\..\..\..\..\system\common\resourcemanager -I..\..\..\..\..\inc
                               24 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               25 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive\include
                               26 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               27 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               28 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\DataDrive
                               29 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               30 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               31 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               32 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               33 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               34 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               35 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               36 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               37 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               38 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               39 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common
                               40 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               41 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive\include
                               42 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               43 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               44 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\SystemDrive
                               45 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\include
                               46 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media\include
                               47 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               48 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\HAL\include
                               49 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Media
                               50 ;          -I..\..\..\..\..\devicedriver\media\include
                               51 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               52 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               53 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\Common\include
                               54 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeNAND\DDI\include
                               55 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL
                               56 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               57 ;          -I..\..\..\..\..\DeviceDriver\Media\include
                               58 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash\include
                               59 ;          -I..\..\..\..\..\DeviceDriver\Media\PortHIL\GPFlash
                               60 ;          -I..\..\..\..\..\devicedriver\media\ddildl
                               61 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               62 ;          -I..\..\..\..\..\libsource\sysserialnumber
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   2

M:ADDR CODE           CYCLES LINE SOURCELINE
                               63 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               64 ;          -I..\..\..\..\..\devicedriver\media\ddildl\include
                               65 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\include
                               66 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\DDI\Media
                               67 ;          -I..\..\..\..\..\devicedriver\media\MediaTypeMMC\HAL\include
                               68 ;          -I..\..\..\..\..\FileSystem\Fat32\h
                               69 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_stdtype
                               70 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_debug
                               71 ;          -I..\..\..\..\..\FileSystem\Fat32\cmp\cmp_file_system
                               72 ;          -I..\..\..\..\..\DeviceDriver\Media\cmp\cmp_media_nand
                               73 ;          -I..\..\..\..\..\DeviceDriver\Media\MediaTypeNAND\HAL\include
                               74 ;          -I..\..\..\..\..\System\MsgModules\Software\Effects\srswow
                               75 ;          -I..\..\..\..\..\System\Common\rtcaccess
                               76 ;          -I..\..\..\..\..\System\Common\playlist3
                               77 ;          -I..\..\..\..\..\System\Common\record
                               78 ;          -I..\..\..\..\..\System\Common\mp3filename
                               79 ;          -I..\..\..\..\..\FileSystem\chkdsk\include
                               80 ;          -I..\..\..\..\..\FileSystem\Fat32\h -DFULL_PLAYER_KERNEL
                               81 ;          -DSYNC_LYRICS -DMP3_ENCODE -DBATTERY_TYPE_LI_ION -Dk_opt_single_fat
                               82 ;          -DPL3_FB -g -O2 -R -Cs -DMS_ADPCM -DIMA_ADPCM -DWINDOWS_PCM
                               83 ;          -I..\..\..\..\..\System\MsgModules\Software\musiclib\ghdr
                               84 ;          -I..\..\..\..\..\devicedriver\display
                               85 ;          -I..\..\..\..\..\System\MsgModules\Hardware\Display -MmyL
                               86 
                               94 
                               95 ;  framebuffer.c:
                               96 ; 1    |#include "types.h"
                               97 
                               99 
                              100 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              101 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              102 ; 3    |//
                              103 ; 4    |// Filename: types.h
                              104 ; 5    |// Description: Standard data types
                              105 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              106 ; 7    |
                              107 ; 8    |#ifndef _TYPES_H
                              108 ; 9    |#define _TYPES_H
                              109 ; 10   |
                              110 ; 11   |// TODO:  move this outta here!
                              111 ; 12   |#if !defined(NOERROR)
                              112 ; 13   |#define NOERROR 0
                              113 ; 14   |#define SUCCESS 0
                              114 ; 15   |#endif 
                              115 ; 16   |#if !defined(SUCCESS)
                              116 ; 17   |#define SUCCESS  0
                              117 ; 18   |#endif
                              118 ; 19   |#if !defined(ERROR)
                              119 ; 20   |#define ERROR   -1
                              120 ; 21   |#endif
                              121 ; 22   |#if !defined(FALSE)
                              122 ; 23   |#define FALSE 0
                              123 ; 24   |#endif
                              124 ; 25   |#if !defined(TRUE)
                              125 ; 26   |#define TRUE  1
                              126 ; 27   |#endif
                              127 ; 28   |
                              128 ; 29   |#if !defined(NULL)
                              129 ; 30   |#define NULL 0
                              130 ; 31   |#endif
                              131 ; 32   |
                              132 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   3

M:ADDR CODE           CYCLES LINE SOURCELINE
                              133 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              134 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              135 ; 36   |#define MAX_ULONG   (-1) 
                              136 ; 37   |
                              137 ; 38   |#define WORD_SIZE   24              // word size in bits
                              138 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              139 ; 40   |
                              140 ; 41   |
                              141 ; 42   |#define BYTE    unsigned char       // btVarName
                              142 ; 43   |#define CHAR    signed char         // cVarName
                              143 ; 44   |#define USHORT  unsigned short      // usVarName
                              144 ; 45   |#define SHORT   unsigned short      // sVarName
                              145 ; 46   |#define WORD    unsigned int        // wVarName
                              146 ; 47   |#define INT     signed int          // iVarName
                              147 ; 48   |#define DWORD   unsigned long       // dwVarName
                              148 ; 49   |#define LONG    signed long         // lVarName
                              149 ; 50   |#define BOOL    unsigned int        // bVarName
                              150 ; 51   |#define FRACT   _fract              // frVarName
                              151 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              152 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              153 ; 54   |#define FLOAT   float               // fVarName
                              154 ; 55   |#define DBL     double              // dVarName
                              155 ; 56   |#define ENUM    enum                // eVarName
                              156 ; 57   |#define CMX     _complex            // cmxVarName
                              157 ; 58   |typedef WORD UCS3;                   // 
                              158 ; 59   |
                              159 ; 60   |#define UINT16  unsigned short
                              160 ; 61   |#define UINT8   unsigned char   
                              161 ; 62   |#define UINT32  unsigned long
                              162 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              163 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              164 ; 65   |#define WCHAR   UINT16
                              165 ; 66   |
                              166 ; 67   |//UINT128 is 16 bytes or 6 words
                              167 ; 68   |typedef struct UINT128_3500 {   
                              168 ; 69   |    int val[6];     
                              169 ; 70   |} UINT128_3500;
                              170 ; 71   |
                              171 ; 72   |#define UINT128   UINT128_3500
                              172 ; 73   |
                              173 ; 74   |// Little endian word packed byte strings:   
                              174 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              175 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              176 ; 77   |// Little endian word packed byte strings:   
                              177 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              178 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              179 ; 80   |
                              180 ; 81   |// Declare Memory Spaces To Use When Coding
                              181 ; 82   |// A. Sector Buffers
                              182 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              183 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              184 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              185 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              186 
                              188 
                              189 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              190 ; 88   |// B. Media DDI Memory
                              191 ; 89   |#define MEDIA_DDI_MEM _Y
                              192 ; 90   |
                              193 ; 91   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   4

M:ADDR CODE           CYCLES LINE SOURCELINE
                              194 ; 92   |
                              195 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              196 ; 94   |// Examples of circular pointers:
                              197 ; 95   |//    INT CIRC cpiVarName
                              198 ; 96   |//    DWORD CIRC cpdwVarName
                              199 ; 97   |
                              200 ; 98   |#define RETCODE INT                 // rcVarName
                              201 ; 99   |
                              202 ; 100  |// generic bitfield structure
                              203 ; 101  |struct Bitfield {
                              204 ; 102  |    unsigned int B0  :1;
                              205 ; 103  |    unsigned int B1  :1;
                              206 ; 104  |    unsigned int B2  :1;
                              207 ; 105  |    unsigned int B3  :1;
                              208 ; 106  |    unsigned int B4  :1;
                              209 ; 107  |    unsigned int B5  :1;
                              210 ; 108  |    unsigned int B6  :1;
                              211 ; 109  |    unsigned int B7  :1;
                              212 ; 110  |    unsigned int B8  :1;
                              213 ; 111  |    unsigned int B9  :1;
                              214 ; 112  |    unsigned int B10 :1;
                              215 ; 113  |    unsigned int B11 :1;
                              216 ; 114  |    unsigned int B12 :1;
                              217 ; 115  |    unsigned int B13 :1;
                              218 ; 116  |    unsigned int B14 :1;
                              219 ; 117  |    unsigned int B15 :1;
                              220 ; 118  |    unsigned int B16 :1;
                              221 ; 119  |    unsigned int B17 :1;
                              222 ; 120  |    unsigned int B18 :1;
                              223 ; 121  |    unsigned int B19 :1;
                              224 ; 122  |    unsigned int B20 :1;
                              225 ; 123  |    unsigned int B21 :1;
                              226 ; 124  |    unsigned int B22 :1;
                              227 ; 125  |    unsigned int B23 :1;
                              228 ; 126  |};
                              229 ; 127  |
                              230 ; 128  |union BitInt {
                              231 ; 129  |        struct Bitfield B;
                              232 ; 130  |        int        I;
                              233 ; 131  |};
                              234 ; 132  |
                              235 ; 133  |#define MAX_MSG_LENGTH 10
                              236 ; 134  |struct CMessage
                              237 ; 135  |{
                              238 ; 136  |        unsigned int m_uLength;
                              239 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                              240 ; 138  |};
                              241 ; 139  |
                              242 ; 140  |typedef struct {
                              243 ; 141  |    WORD m_wLength;
                              244 ; 142  |    WORD m_wMessage;
                              245 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                              246 ; 144  |} Message;
                              247 ; 145  |
                              248 ; 146  |struct MessageQueueDescriptor
                              249 ; 147  |{
                              250 ; 148  |        int *m_pBase;
                              251 ; 149  |        int m_iModulo;
                              252 ; 150  |        int m_iSize;
                              253 ; 151  |        int *m_pHead;
                              254 ; 152  |        int *m_pTail;
                              255 ; 153  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   5

M:ADDR CODE           CYCLES LINE SOURCELINE
                              256 ; 154  |
                              257 ; 155  |struct ModuleEntry
                              258 ; 156  |{
                              259 ; 157  |    int m_iSignaledEventMask;
                              260 ; 158  |    int m_iWaitEventMask;
                              261 ; 159  |    int m_iResourceOfCode;
                              262 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                              263 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                              264 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                              265 ; 163  |    int m_uTimeOutHigh;
                              266 ; 164  |    int m_uTimeOutLow;
                              267 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                              268 ; 166  |};
                              269 ; 167  |
                              270 ; 168  |union WaitMask{
                              271 ; 169  |    struct B{
                              272 ; 170  |        unsigned int m_bNone     :1;
                              273 ; 171  |        unsigned int m_bMessage  :1;
                              274 ; 172  |        unsigned int m_bTimer    :1;
                              275 ; 173  |        unsigned int m_bButton   :1;
                              276 ; 174  |    } B;
                              277 ; 175  |    int I;
                              278 ; 176  |} ;
                              279 ; 177  |
                              280 ; 178  |
                              281 ; 179  |struct Button {
                              282 ; 180  |        WORD wButtonEvent;
                              283 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                              284 ; 182  |};
                              285 ; 183  |
                              286 ; 184  |struct Message {
                              287 ; 185  |        WORD wMsgLength;
                              288 ; 186  |        WORD wMsgCommand;
                              289 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                              290 ; 188  |};
                              291 ; 189  |
                              292 ; 190  |union EventTypes {
                              293 ; 191  |        struct CMessage msg;
                              294 ; 192  |        struct Button Button ;
                              295 ; 193  |        struct Message Message;
                              296 ; 194  |};
                              297 ; 195  |
                              298 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                              299 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                              300 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                              301 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                              302 ; 200  |
                              303 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                              304 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                              305 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                              306 ; 204  |
                              307 ; 205  |#if DEBUG
                              308 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                              309 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                              310 ; 208  |#else 
                              311 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                              312 ; 210  |#define DebugBuildAssert(x)    
                              313 ; 211  |#endif
                              314 ; 212  |
                              315 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   6

M:ADDR CODE           CYCLES LINE SOURCELINE
                              316 ; 214  |//  #pragma asm
                              317 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                              318 ; 216  |//  #pragma endasm
                              319 ; 217  |
                              320 ; 218  |
                              321 ; 219  |#ifdef COLOR_262K
                              322 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                              323 ; 221  |#elif defined(COLOR_65K)
                              324 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                              325 ; 223  |#else
                              326 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                              327 ; 225  |#endif
                              328 ; 226  |    
                              329 ; 227  |#endif // #ifndef _TYPES_H
                              330 
                              332 
                              333 ; 2    |#include "messages.h"
                              334 
                              336 
                              337 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              338 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                              339 ; 3    |// Message defs
                              340 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                              341 ; 5    |
                              342 ; 6    |#if (!defined(MSGEQU_INC))
                              343 ; 7    |#define MSGEQU_INC 1
                              344 ; 8    |
                              345 ; 9    |
                              346 ; 10   |#define MAX_MODULE_SIZE   (lc_u_eP_Module_overlay-lc_u_bP_Module_overlay)*3
                              347 ; 11   |
                              348 ; 12   |
                              349 ; 13   |#define MSG_TYPE_DECODER 0x000000
                              350 ; 14   |#define MSG_TYPE_ENCODER 0x010000
                              351 ; 15   |#define MSG_TYPE_PARSER 0x020000
                              352 ; 16   |#define MSG_TYPE_LCD 0x030000
                              353 ; 17   |#define MSG_TYPE_MIXER 0x040000
                              354 ; 18   |#define MSG_TYPE_SYSTEM 0x050000
                              355 ; 19   |#define MSG_TYPE_MENU 0x060000
                              356 ; 20   |#define MSG_TYPE_LED 0x070000
                              357 ; 21   |#define MSG_TYPE_TUNER 0x080000
                              358 ; 22   |#define MSG_TYPE_CHARLCD 0x030000
                              359 ; 23   |#define MSG_TYPE_SOFT_TIMER 0x090000
                              360 ; 24   |// Equalizer and other effects
                              361 ; 25   |#define MSG_TYPE_GEQ 0x0a0000             
                              362 ; 26   |#if (defined(USE_PLAYLIST3))
                              363 ; 27   |#define MSG_TYPE_MUSICLIB_PLAY 0x0b0000
                              364 ; 28   |#define MSG_TYPE_MUSICLIB_BROWSE 0x0c0000
                              365 ; 29   |#define MSG_TYPE_MUSICLIB_PLAYALLNEXT 0x0d0000
                              366 ; 30   |#define MSG_TYPE_MUSICLIB_PLAYALLPREV 0x0e0000
                              367 ; 31   |#define MSG_TYPE_MUSICLIB_SHUFFLE 0x0f0000
                              368 ; 32   |#define MSG_TYPE_MUSICLIB_VOICE 0x100000
                              369 ; 33   |#define MSG_TYPE_MUSICLIB_VOICEPLAY 0x110000
                              370 ; 34   |#define MSG_TYPE_MUSICLIB_MERGE 0x120000
                              371 ; 35   |#endif // IF (@def(USE_PLAYLIST3))
                              372 ; 36   |#if defined(USE_PLAYLIST5)
                              373 ; 37   |#define MSG_TYPE_PL5_PLAYBACK 0x0b0000
                              374 ; 38   |#define MSG_TYPE_PL5_BROWSE 0x0c0000
                              375 ; 39   |#endif // if @def('USE_PLAYLIST5')
                              376 ; 40   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   7

M:ADDR CODE           CYCLES LINE SOURCELINE
                              377 ; 41   |// Message Structure Offsets
                              378 ; 42   |#define MSG_Length 0
                              379 ; 43   |#define MSG_ID 1
                              380 ; 44   |#define MSG_Argument1 2
                              381 ; 45   |#define MSG_Argument2 3
                              382 ; 46   |#define MSG_Argument3 4
                              383 ; 47   |#define MSG_Argument4 5
                              384 ; 48   |#define MSG_Argument5 6
                              385 ; 49   |#define MSG_Argument6 7
                              386 ; 50   |
                              387 ; 51   |
                              388 ; 52   |
                              389 ; 53   |// LCD Message IDs
                              390 ; 54   |#define LCD_FIRST_MSG_ID MSG_TYPE_LCD+0
                              391 ; 55   |#define LCD_CLEAR_RANGE MSG_TYPE_LCD+0
                              392 ; 56   |#define LCD_PRINT_RANGE_RSRC MSG_TYPE_LCD+1
                              393 ; 57   |#define LCD_PRINT_RANGE_ADDR MSG_TYPE_LCD+2
                              394 ; 58   |#define LCD_PRINT_RANGE_INV_RSRC MSG_TYPE_LCD+3
                              395 ; 59   |#define LCD_PRINT_RANGE_INV_ADDR MSG_TYPE_LCD+4
                              396 ; 60   |#define LCD_PRINT_RANGE_FILE MSG_TYPE_LCD+5
                              397 ; 61   |#define LCD_PRINT_RANGE_INV_FILE MSG_TYPE_LCD+6
                              398 ; 62   |#define LCD_PRINT_STRING_RSRC MSG_TYPE_LCD+7
                              399 ; 63   |#define LCD_PRINT_STRING_ADDR MSG_TYPE_LCD+8
                              400 ; 64   |#define LCD_PRINT_STRING_INV_RSRC MSG_TYPE_LCD+9
                              401 ; 65   |#define LCD_PRINT_STRING_INV_ADDR MSG_TYPE_LCD+10
                              402 ; 66   |#define LCD_SCROLL_DISPLAY MSG_TYPE_LCD+11
                              403 ; 67   |#define LCD_READ_LCD_ADDR MSG_TYPE_LCD+12
                              404 ; 68   |#define LCD_SET_CONTRAST MSG_TYPE_LCD+13
                              405 ; 69   |#define LCD_INC_CONTRAST MSG_TYPE_LCD+14
                              406 ; 70   |#define LCD_DEC_CONTRAST MSG_TYPE_LCD+15
                              407 ; 71   |#define LCD_BACKLIGHT_ON MSG_TYPE_LCD+16
                              408 ; 72   |#define LCD_BACKLIGHT_OFF MSG_TYPE_LCD+17
                              409 ; 73   |#define LCD_SET_FONT MSG_TYPE_LCD+18
                              410 ; 74   |#define LCD_PRINT_NUMBER MSG_TYPE_LCD+19
                              411 ; 75   |#define LCD_PRINT_TIME MSG_TYPE_LCD+20
                              412 ; 76   |#define LCD_PRINT_TIME_LONG MSG_TYPE_LCD+21
                              413 ; 77   |#define LCD_PRINT_STRING_UNICODE_INV_ADDR MSG_TYPE_LCD+22
                              414 ; 78   |#define LCD_PRINT_STRING_UNICODE_ADDR MSG_TYPE_LCD+23
                              415 ; 79   |#define LCD_PRINT_STRING_UNICODE_INV_RSRC MSG_TYPE_LCD+24
                              416 ; 80   |#define LCD_PRINT_STRING_UNICODE_RSRC MSG_TYPE_LCD+25
                              417 ; 81   |#define LCD_BEGIN_FRAME MSG_TYPE_LCD+26
                              418 ; 82   |#define LCD_END_FRAME MSG_TYPE_LCD+27
                              419 ; 83   |#define LCD_PRINT_NUMBER_INV MSG_TYPE_LCD+28
                              420 ; 84   |#define LCD_PRINT_TIME_INV MSG_TYPE_LCD+29
                              421 ; 85   |#define LCD_PRINT_TIME_LONG_INV MSG_TYPE_LCD+30
                              422 ; 86   |#define LCD_SET_FRAMEBUFFER MSG_TYPE_LCD+31
                              423 ; 87   |//send a NULL as Param1 to return to root frame buffer
                              424 ; 88   |#define LCD_PUSH_MASK MSG_TYPE_LCD+32
                              425 ; 89   |//Param1 = left
                              426 ; 90   |//Param2 = top
                              427 ; 91   |//Param3 = right
                              428 ; 92   |//Param4 = bottom
                              429 ; 93   |#define LCD_POP_MASK MSG_TYPE_LCD+33
                              430 ; 94   |#define LCD_PRINT_UNICODE_CHAR MSG_TYPE_LCD+34
                              431 ; 95   |#define LCD_PRINT_UNICODE_CHAR_INV MSG_TYPE_LCD+35
                              432 ; 96   |#define LCD_DISPLAY_HISTOGRAM MSG_TYPE_LCD+36
                              433 ; 97   |#define LCD_PRINT_TIME_L_1DIG_HR MSG_TYPE_LCD+37
                              434 ; 98   |#define LCD_SET_ICON MSG_TYPE_LCD+38
                              435 ; 99   |
                              436 ; 100  |#define LCD_CLEAR_RANGE_BUFFER MSG_TYPE_LCD+39
                              437 ; 101  |#define LCD_PRINT_RANGE_RSRC_BUFFER MSG_TYPE_LCD+40
                              438 ; 102  |#define LCD_PRINT_RANGE_INV_RSRC_BUFFER MSG_TYPE_LCD+41
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   8

M:ADDR CODE           CYCLES LINE SOURCELINE
                              439 ; 103  |#define LCD_PRINT_RANGE_ADDR_BUFFER MSG_TYPE_LCD+42
                              440 ; 104  |#define LCD_PRINT_RANGE_INV_ADDR_BUFFER MSG_TYPE_LCD+43
                              441 ; 105  |#define LCD_PRINT_STRING_RSRC_BUFFER MSG_TYPE_LCD+44
                              442 ; 106  |#define LCD_PRINT_STRING_INV_RSRC_BUFFER MSG_TYPE_LCD+45
                              443 ; 107  |#define LCD_PRINT_STRING_ADDR_BUFFER MSG_TYPE_LCD+46
                              444 ; 108  |#define LCD_PRINT_STRING_INV_ADDR_BUFFER MSG_TYPE_LCD+47
                              445 ; 109  |#define LCD_PRINT_NUMBER_BUFFER MSG_TYPE_LCD+48
                              446 ; 110  |#define LCD_PRINT_NUMBER_INV_BUFFER MSG_TYPE_LCD+49
                              447 ; 111  |#define LCD_PRINT_TIME_BUFFER MSG_TYPE_LCD+50
                              448 ; 112  |#define LCD_PRINT_TIME_INV_BUFFER MSG_TYPE_LCD+51
                              449 ; 113  |#define LCD_PRINT_TIME_LONG_BUFFER MSG_TYPE_LCD+52
                              450 ; 114  |#define LCD_PRINT_TIME_LONG_INV_BUFFER MSG_TYPE_LCD+53
                              451 ; 115  |#define LCD_PRINT_STRING_UNICODE_ADDR_BUFFER MSG_TYPE_LCD+54
                              452 ; 116  |#define LCD_PRINT_STRING_UNICODE_INV_ADDR_BUFFER MSG_TYPE_LCD+55
                              453 ; 117  |#define LCD_PRINT_STRING_UNICODE_RSRC_BUFFER MSG_TYPE_LCD+56
                              454 ; 118  |#define LCD_PRINT_STRING_UNICODE_INV_RSRC_BUFFER MSG_TYPE_LCD+57
                              455 ; 119  |#define LCD_PRINT_UNICODE_CHAR_BUFFER MSG_TYPE_LCD+58
                              456 ; 120  |#define LCD_PRINT_UNICODE_CHAR_INV_BUFFER MSG_TYPE_LCD+59
                              457 ; 121  |#define LCD_PRINT_TIME_L_1DIG_HR_BUFFER MSG_TYPE_LCD+60
                              458 ; 122  |#define LCD_SET_BUFFER_COLOR MSG_TYPE_LCD+61
                              459 ; 123  |#define LCD_FORCE_BUFFER_UPDATE MSG_TYPE_LCD+62
                              460 ; 124  |#define LCD_SET_BUFFER_WINDOW MSG_TYPE_LCD+63
                              461 ; 125  |#define LCD_SET_COLOR MSG_TYPE_LCD+64
                              462 ; 126  |#define LCD_SET_BUFFER_POSITION MSG_TYPE_LCD+65
                              463 ; 127  |
                              464 ; 128  |#define LCD_TEMP_CONTRAST MSG_TYPE_LCD+66
                              465 ; 129  |
                              466 ; 130  |#if defined(CLCD_16BIT)
                              467 ; 131  |#define LCD_16BIT_ON MSG_TYPE_LCD+67
                              468 ; 132  |#define LCD_16BIT_OFF MSG_TYPE_LCD+68
                              469 ; 133  |
                              470 ; 134  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+68
                              471 ; 135  |#else 
                              472 ; 136  |#define LCD_LAST_MSG_ID MSG_TYPE_LCD+66
                              473 ; 137  |#endif
                              474 ; 138  |
                              475 ; 139  |// If you change the LCD message ID's then you must
                              476 ; 140  |// also change the jump table in lcdapi.asm
                              477 ; 141  |
                              478 ; 142  |// Character LCD Message IDs
                              479 ; 143  |#define CHARLCD_FIRST_MSG_ID MSG_TYPE_CHARLCD+0
                              480 ; 144  |#define CHARLCD_CLEAR_RANGE MSG_TYPE_CHARLCD+0
                              481 ; 145  |#define CHARLCD_PRINT_RSRC MSG_TYPE_CHARLCD+1
                              482 ; 146  |#define CHARLCD_PRINT_INV_RSRC MSG_TYPE_CHARLCD+2
                              483 ; 147  |#define CHARLCD_PRINT_ASCII_CHAR MSG_TYPE_CHARLCD+3
                              484 ; 148  |#define CHARLCD_PRINT_ASCII_INV_CHAR MSG_TYPE_CHARLCD+4
                              485 ; 149  |#define CHARLCD_PRINT_STRING_RSRC MSG_TYPE_CHARLCD+5
                              486 ; 150  |#define CHARLCD_PRINT_STRING_INV_RSRC MSG_TYPE_CHARLCD+6
                              487 ; 151  |#define CHARLCD_PRINT_STRING_ADDR MSG_TYPE_CHARLCD+7
                              488 ; 152  |#define CHARLCD_PRINT_STRING_INV_ADDR MSG_TYPE_CHARLCD+8
                              489 ; 153  |#define CHARLCD_SCROLL_DISPLAY MSG_TYPE_CHARLCD+9
                              490 ; 154  |#define CHARLCD_READ_LCD_ADDR MSG_TYPE_CHARLCD+10
                              491 ; 155  |#define CHARLCD_SET_CURSOR MSG_TYPE_CHARLCD+11
                              492 ; 156  |#define CHARLCD_SET_FONT MSG_TYPE_CHARLCD+12
                              493 ; 157  |#define CHARLCD_PRINT_NUMBER MSG_TYPE_CHARLCD+13
                              494 ; 158  |#define CHARLCD_PRINT_TIME MSG_TYPE_CHARLCD+14
                              495 ; 159  |#define CHARLCD_SET_BATTERY MSG_TYPE_CHARLCD+15
                              496 ; 160  |#define CHARLCD_SET_EQ MSG_TYPE_CHARLCD+16
                              497 ; 161  |#define CHARLCD_SET_ICON MSG_TYPE_CHARLCD+17
                              498 ; 162  |#define CHARLCD_SET_PLAYMODE MSG_TYPE_CHARLCD+18
                              499 ; 163  |#define CHARLCD_SET_PLAYSTATE MSG_TYPE_CHARLCD+19
                              500 ; 164  |#define CHARLCD_SET_VOLUME MSG_TYPE_CHARLCD+20
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page   9

M:ADDR CODE           CYCLES LINE SOURCELINE
                              501 ; 165  |#define CHARLCD_CLEAR_DISPLAY MSG_TYPE_CHARLCD+21
                              502 ; 166  |#define CHARLCD_LAST_MSG_ID MSG_TYPE_CHARLCD+21
                              503 ; 167  |// If you change the cHARACTER LCD message ID's then you must
                              504 ; 168  |// also change the jump table in lcdapi.asm
                              505 ; 169  |
                              506 ; 170  |// Decoder Message IDs
                              507 ; 171  |#define DECODER_FIRST_MSG_ID MSG_TYPE_DECODER+0
                              508 ; 172  |#define DECODER_RESET MSG_TYPE_DECODER+0
                              509 ; 173  |#define DECODER_SET_DIR MSG_TYPE_DECODER+1
                              510 ; 174  |#define DECODER_PLAY MSG_TYPE_DECODER+2
                              511 ; 175  |#define DECODER_STOP MSG_TYPE_DECODER+3
                              512 ; 176  |#define DECODER_FFWD MSG_TYPE_DECODER+4
                              513 ; 177  |#define DECODER_RWND MSG_TYPE_DECODER+5
                              514 ; 178  |#define DECODER_NEXT_SONG MSG_TYPE_DECODER+6
                              515 ; 179  |#define DECODER_PREV_SONG MSG_TYPE_DECODER+7
                              516 ; 180  |#define DECODER_TIME_MODE MSG_TYPE_DECODER+8
                              517 ; 181  |#define DECODER_AB_MODE MSG_TYPE_DECODER+9
                              518 ; 182  |#define DECODER_SET_EQ MSG_TYPE_DECODER+10
                              519 ; 183  |#define DECODER_GET_SONG_INFO MSG_TYPE_DECODER+11
                              520 ; 184  |#define DECODER_NEXT_CHAPTER MSG_TYPE_DECODER+12
                              521 ; 185  |#define DECODER_PREV_CHAPTER MSG_TYPE_DECODER+13
                              522 ; 186  |#define DECODER_LAST_MSG_ID MSG_TYPE_DECODER+13
                              523 ; 187  |// If you change the Decoder message ID's, then you must
                              524 ; 188  |// also change the jump table in decoder_overlay.asm
                              525 ; 189  |// and in dec_adpcm_overlay.asm.
                              526 ; 190  |
                              527 ; 191  |// Encoder Message IDs
                              528 ; 192  |#define ENCODER_FIRST_MSG_ID MSG_TYPE_ENCODER+0
                              529 ; 193  |#define ENCODER_RECORD MSG_TYPE_ENCODER+0
                              530 ; 194  |#define ENCODER_STOP MSG_TYPE_ENCODER+1
                              531 ; 195  |#define ENCODER_TIME_MODE MSG_TYPE_ENCODER+2
                              532 ; 196  |#define ENCODER_LAST_MSG_ID MSG_TYPE_ENCODER+3
                              533 ; 197  |// If you change the Encoder message ID's, then you must
                              534 ; 198  |// also change the jump table in all encoder overlay modules.
                              535 ; 199  |
                              536 ; 200  |// Parser Message IDs
                              537 ; 201  |#define PARSER_FIRST_MSG_ID MSG_TYPE_PARSER+0
                              538 ; 202  |#define PARSER_NEXT_SONG MSG_TYPE_PARSER+0
                              539 ; 203  |#define PARSER_PREV_SONG MSG_TYPE_PARSER+1
                              540 ; 204  |#define PARSER_REPEAT MSG_TYPE_PARSER+2
                              541 ; 205  |#define PARSER_RANDOM MSG_TYPE_PARSER+3
                              542 ; 206  |#define PARSER_STOP MSG_TYPE_PARSER+4
                              543 ; 207  |#define PARSER_DEVICE_ENUMERATE MSG_TYPE_PARSER+5
                              544 ; 208  |#define PARSER_SET_CURRENT_SONG MSG_TYPE_PARSER+6
                              545 ; 209  |#define PARSER_LAST_MSG_ID MSG_TYPE_PARSER+6
                              546 ; 210  |// If you change the Parser message ID's, then you must
                              547 ; 211  |// also change the jump table in parser.asm
                              548 ; 212  |
                              549 ; 213  |// Button Message IDs
                              550 ; 214  |//BUTTON_FIRST_MSG_ID      equ     MSG_TYPE_BUTTON+0
                              551 ; 215  |//BUTTON_BUTTONS_ON        equ     MSG_TYPE_BUTTON+0
                              552 ; 216  |//BUTTON_BUTTONS_OFF       equ     MSG_TYPE_BUTTON+1
                              553 ; 217  |//BUTTON_HOLD              equ     MSG_TYPE_BUTTON+2
                              554 ; 218  |//BUTTON_HOLD_RELEASE      equ     MSG_TYPE_BUTTON+3
                              555 ; 219  |//BUTTON_LAST_MSG_ID       equ     MSG_TYPE_BUTTON+3
                              556 ; 220  |
                              557 ; 221  |// Mixer Message IDs
                              558 ; 222  |#define MIXER_FIRST_MSG_ID MSG_TYPE_MIXER+0
                              559 ; 223  |#define MIXER_MASTER_INCR MSG_TYPE_MIXER+0
                              560 ; 224  |#define MIXER_MASTER_DECR MSG_TYPE_MIXER+1
                              561 ; 225  |#define MIXER_MASTER_SETLVL MSG_TYPE_MIXER+2
                              562 ; 226  |#define MIXER_MASTER_MUTE MSG_TYPE_MIXER+3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  10

M:ADDR CODE           CYCLES LINE SOURCELINE
                              563 ; 227  |#define MIXER_MASTER_UNMUTE MSG_TYPE_MIXER+4
                              564 ; 228  |#define MIXER_MASTER_FADE_OUT MSG_TYPE_MIXER+5
                              565 ; 229  |#define MIXER_MASTER_FADE_IN MSG_TYPE_MIXER+6
                              566 ; 230  |#define MIXER_MASTER_BAL_RIGHT MSG_TYPE_MIXER+7
                              567 ; 231  |#define MIXER_MASTER_BAL_LEFT MSG_TYPE_MIXER+8
                              568 ; 232  |#define MIXER_MIC_INCR MSG_TYPE_MIXER+9
                              569 ; 233  |#define MIXER_MIC_DECR MSG_TYPE_MIXER+10
                              570 ; 234  |#define MIXER_MIC_SETLVL MSG_TYPE_MIXER+11
                              571 ; 235  |#define MIXER_MIC_MUTE MSG_TYPE_MIXER+12
                              572 ; 236  |#define MIXER_MIC_UNMUTE MSG_TYPE_MIXER+13
                              573 ; 237  |#define MIXER_MIC_BOOST MSG_TYPE_MIXER+14
                              574 ; 238  |#define MIXER_MIC_UNBOOST MSG_TYPE_MIXER+15
                              575 ; 239  |#define MIXER_LINE_INCR MSG_TYPE_MIXER+16
                              576 ; 240  |#define MIXER_LINE_DECR MSG_TYPE_MIXER+17
                              577 ; 241  |#define MIXER_LINE_SETLVL MSG_TYPE_MIXER+18
                              578 ; 242  |#define MIXER_LINE_MUTE MSG_TYPE_MIXER+19
                              579 ; 243  |#define MIXER_LINE_UNMUTE MSG_TYPE_MIXER+20
                              580 ; 244  |#define MIXER_FM_INCR MSG_TYPE_MIXER+21
                              581 ; 245  |#define MIXER_FM_DECR MSG_TYPE_MIXER+22
                              582 ; 246  |#define MIXER_FM_SETLVL MSG_TYPE_MIXER+23
                              583 ; 247  |#define MIXER_FM_MUTE MSG_TYPE_MIXER+24
                              584 ; 248  |#define MIXER_FM_UNMUTE MSG_TYPE_MIXER+25
                              585 ; 249  |#define MIXER_DAC_INCR MSG_TYPE_MIXER+26
                              586 ; 250  |#define MIXER_DAC_DECR MSG_TYPE_MIXER+27
                              587 ; 251  |#define MIXER_DAC_SETLVL MSG_TYPE_MIXER+28
                              588 ; 252  |#define MIXER_DAC_MUTE MSG_TYPE_MIXER+29
                              589 ; 253  |#define MIXER_DAC_UNMUTE MSG_TYPE_MIXER+30
                              590 ; 254  |#define MIXER_ADC_SELECT MSG_TYPE_MIXER+31
                              591 ; 255  |#define MIXER_ADC_INCR MSG_TYPE_MIXER+32
                              592 ; 256  |#define MIXER_ADC_DECR MSG_TYPE_MIXER+33
                              593 ; 257  |#define MIXER_ADC_SETLVL MSG_TYPE_MIXER+34
                              594 ; 258  |#define MIXER_ADC_MUTE MSG_TYPE_MIXER+35
                              595 ; 259  |#define MIXER_ADC_UNMUTE MSG_TYPE_MIXER+36
                              596 ; 260  |#define MIXER_REC_SELECT MSG_TYPE_MIXER+37
                              597 ; 261  |#define MIXER_POWER_DOWN MSG_TYPE_MIXER+38
                              598 ; 262  |#define ENABLE_RIGHT_CH MSG_TYPE_MIXER+39
                              599 ; 263  |#define DISABLE_RIGHT_CH MSG_TYPE_MIXER+40
                              600 ; 264  |#define MIXER_LAST_MSG_ID MSG_TYPE_MIXER+40
                              601 ; 265  |// If you change the mixer message ID's then you must
                              602 ; 266  |// also change the jump table in mixer.asm
                              603 ; 267  |#define MIXER_ON 0
                              604 ; 268  |#define MIXER_OFF 1
                              605 ; 269  |
                              606 ; 270  |
                              607 ; 271  |// System Message IDs
                              608 ; 272  |#define SYSTEM_FIRST_MSG_ID MSG_TYPE_SYSTEM+0
                              609 ; 273  |#define SYSTEM_SHUTDOWN MSG_TYPE_SYSTEM+0
                              610 ; 274  |#define SYSTEM_SHUTDOWN_FALSE MSG_TYPE_SYSTEM+1
                              611 ; 275  |#define SYSTEM_SHUTDOWN_FINAL MSG_TYPE_SYSTEM+2
                              612 ; 276  |#define SYSTEM_LAST_MSG_ID MSG_TYPE_SYSTEM+2
                              613 ; 277  |// If you change the system message ID's then you must
                              614 ; 278  |// also change the jump table in systemapi.asm
                              615 ; 279  |
                              616 ; 280  |// Menu IDs
                              617 ; 281  |#define MENU_FIRST_MSG_ID MSG_TYPE_MENU+0
                              618 ; 282  |#define MENU_BUTTON_EVENT MSG_TYPE_MENU+0
                              619 ; 283  |#define MENU_DECODER_STATE_CHNG MSG_TYPE_MENU+1
                              620 ; 284  |#define MENU_RECORDER_STATE_CHNG MSG_TYPE_MENU+2
                              621 ; 285  |//sub parameters for this message:
                              622 ; 286  |#define RECORDER_START 0
                              623 ; 287  |#define RECORDER_PAUSE 0x2000
                              624 ; 288  |#define RECORDER_RESUME 0x4000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  11

M:ADDR CODE           CYCLES LINE SOURCELINE
                              625 ; 289  |#define RECORDER_STOP_NORMAL 0x8000
                              626 ; 290  |#define RECORDER_STOP_FILE_ERROR 0x8001
                              627 ; 291  |#define RECORDER_STOP_OUT_OF_SPACE 0x8002
                              628 ; 292  |#define RECORDER_STOP_LOW_BATTERY 0x8003
                              629 ; 293  |#define MENU_SONG_TIME_CHNG MSG_TYPE_MENU+3
                              630 ; 294  |#define MENU_AB_MODE_OFF MSG_TYPE_MENU+4
                              631 ; 295  |#define MENU_BATTERY_CHNG MSG_TYPE_MENU+5
                              632 ; 296  |#define MENU_SCROLL_TITLE MSG_TYPE_MENU+6
                              633 ; 297  |#define MENU_AUTO_SHUTDOWN MSG_TYPE_MENU+7
                              634 ; 298  |#define MENU_MSG_MEDIA_CHANGED MSG_TYPE_MENU+8
                              635 ; 299  |#define MENU_MSG_MEDIA_OVER_CUR MSG_TYPE_MENU+9
                              636 ; 300  |#define MENU_TUNER_TUNED MSG_TYPE_MENU+10
                              637 ; 301  |#define MENU_MSG_ENC_LOW_SPACE MSG_TYPE_MENU+11
                              638 ; 302  |#define MENU_MSG_EQ_SETTINGS MSG_TYPE_MENU+12
                              639 ; 303  |#define MENU_RECORDER_WRITE_DATA MSG_TYPE_MENU+13
                              640 ; 304  |#define MENU_SONG_TRACK_CHNG MSG_TYPE_MENU+14
                              641 ; 305  |#define MENU_SET_SONG_POSITION MSG_TYPE_MENU+15
                              642 ; 306  |#define MENU_UPDATE_CHAPTER_INFO MSG_TYPE_MENU+16
                              643 ; 307  |#define MENU_USB_CONNECTED MSG_TYPE_MENU+17
                              644 ; 308  |#define MENU_MSG_LYRICS_SYNC_AB MSG_TYPE_MENU+18
                              645 ; 309  |#define MENU_MSG_LYRICS_UPDATE MSG_TYPE_MENU+19
                              646 ; 310  |#define MENU_TUNER_REFRESH_DISPLAY MSG_TYPE_MENU+20
                              647 ; 311  |#define MENU_TUNER_DIRTY_FLASH MSG_TYPE_MENU+21
                              648 ; 312  |#define MENU_LAST_MSG_ID MSG_TYPE_MENU+21
                              649 ; 313  |
                              650 ; 314  |// Note that other versions of this file have different msg equates.
                              651 ; 315  |// If you change the system message ID's then you must
                              652 ; 316  |// also change the jump table in all menu *.asm
                              653 ; 317  |
                              654 ; 318  |// LED Message IDs
                              655 ; 319  |#define LED_FIRST_MSG_ID MSG_TYPE_LED+0
                              656 ; 320  |#define LED_CONTROL MSG_TYPE_LED+0
                              657 ; 321  |#define LED_RESET MSG_TYPE_LED+1
                              658 ; 322  |#define LED_DLY_ON_CONTROL MSG_TYPE_LED+2
                              659 ; 323  |#define LED_LAST_MSG_ID MSG_TYPE_LED+2
                              660 ; 324  |// If you change the LeD message ID's then you must
                              661 ; 325  |// also change the jump table in ledapi.asm
                              662 ; 326  |
                              663 ; 327  |#if (!defined(REMOVE_FM))
                              664 ; 328  |// FM Tuner Message IDs
                              665 ; 329  |#define TUNER_FIRST_MSG_ID MSG_TYPE_TUNER+0
                              666 ; 330  |#define TUNER_TUNE_FREQUENCY MSG_TYPE_TUNER+0
                              667 ; 331  |#define TUNER_TUNE_MANUAL_UP MSG_TYPE_TUNER+1
                              668 ; 332  |#define TUNER_TUNE_MANUAL_DOWN MSG_TYPE_TUNER+2
                              669 ; 333  |#define TUNER_TUNE_SEARCH_UP MSG_TYPE_TUNER+3
                              670 ; 334  |#define TUNER_TUNE_SEARCH_DOWN MSG_TYPE_TUNER+4
                              671 ; 335  |#define TUNER_FORCED_MONO MSG_TYPE_TUNER+5
                              672 ; 336  |#define TUNER_RESET MSG_TYPE_TUNER+6
                              673 ; 337  |#define TUNER_POWER_ON MSG_TYPE_TUNER+7
                              674 ; 338  |#define TUNER_POWER_OFF MSG_TYPE_TUNER+8
                              675 ; 339  |#define TUNER_SET_SENSITIVITY MSG_TYPE_TUNER+9
                              676 ; 340  |//one parameter--the sensitivity in uV
                              677 ; 341  |#define TUNER_GET_STATES MSG_TYPE_TUNER+10
                              678 ; 342  |#define TUNER_MUTE_OUTPUTS MSG_TYPE_TUNER+11
                              679 ; 343  |#define TUNER_PRESET_STATION MSG_TYPE_TUNER+12
                              680 ; 344  |#define TUNER_TUNE_TO_PRESET MSG_TYPE_TUNER+13
                              681 ; 345  |#define TUNER_SET_PRESET MSG_TYPE_TUNER+14
                              682 ; 346  |#define TUNER_ERASE_PRESET MSG_TYPE_TUNER+15
                              683 ; 347  |#define TUNER_LAST_MSG_ID MSG_TYPE_TUNER+15
                              684 ; 348  |#endif
                              685 ; 349  |
                              686 ; 350  |#define SOFT_TIMER_FIRST_MSG_ID MSG_TYPE_SOFT_TIMER+0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  12

M:ADDR CODE           CYCLES LINE SOURCELINE
                              687 ; 351  |#define SOFT_TIMER_SET_TIMER MSG_TYPE_SOFT_TIMER+1
                              688 ; 352  |#define SOFT_TIMER_KILL_TIMER MSG_TYPE_SOFT_TIMER+2
                              689 ; 353  |#define SOFT_TIMER_LAST_MSG_ID MSG_TYPE_SOFT_TIMER+2
                              690 ; 354  |
                              691 ; 355  |
                              692 ; 356  |#define GEQ_FIRST_MSG_ID MSG_TYPE_GEQ+0
                              693 ; 357  |#define GEQ_SET_EQ MSG_TYPE_GEQ+0
                              694 ; 358  |#define GEQ_SET_EQ_LEGACY MSG_TYPE_GEQ+1
                              695 ; 359  |#define GEQ_SET_ALL_BAND_GAINS MSG_TYPE_GEQ+2
                              696 ; 360  |#define GEQ_SET_GAIN MSG_TYPE_GEQ+3
                              697 ; 361  |#define GEQ_SET_COEFFICIENTS MSG_TYPE_GEQ+4
                              698 ; 362  |#define GEQ_SET_PARAM MSG_TYPE_GEQ+5
                              699 ; 363  |#define GEQ_GET_SETTINGS MSG_TYPE_GEQ+6
                              700 ; 364  |#define GEQ_LAST_MSG_ID MSG_TYPE_GEQ+6
                              701 ; 365  |
                              702 ; 366  |#if (defined(USE_PLAYLIST3))
                              703 ; 367  |// Music Library
                              704 ; 368  |#define MUSICLIB_PLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+0
                              705 ; 369  |#define MUSICLIB_START_PLAY_SONG MSG_TYPE_MUSICLIB_PLAY+0
                              706 ; 370  |#define MUSICLIB_START_PLAY_ALL_SONG MSG_TYPE_MUSICLIB_PLAY+1
                              707 ; 371  |#define MUSICLIB_PLAY_SETSHUFFLE MSG_TYPE_MUSICLIB_PLAY+2
                              708 ; 372  |#define MUSICLIB_PLAY_RESUME MSG_TYPE_MUSICLIB_PLAY+3
                              709 ; 373  |#define MUSICLIB_PLAY_CURRENT_SIZE MSG_TYPE_MUSICLIB_PLAY+4
                              710 ; 374  |#define MUSICLIB_PLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAY+4
                              711 ; 375  |
                              712 ; 376  |#define MUSICLIB_BROWSE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+0
                              713 ; 377  |#define MUSICLIB_BROWSE_SETROOT MSG_TYPE_MUSICLIB_BROWSE+0
                              714 ; 378  |#define MUSICLIB_BROWSE_BROWSEMENU MSG_TYPE_MUSICLIB_BROWSE+1
                              715 ; 379  |#define MUSICLIB_BROWSE_DOWNLIST MSG_TYPE_MUSICLIB_BROWSE+2
                              716 ; 380  |#define MUSICLIB_BROWSE_UPLIST MSG_TYPE_MUSICLIB_BROWSE+3
                              717 ; 381  |#define MUSICLIB_BROWSE_UPMENU MSG_TYPE_MUSICLIB_BROWSE+4
                              718 ; 382  |#define MUSICLIB_BROWSE_SONGNUMBER MSG_TYPE_MUSICLIB_BROWSE+5
                              719 ; 383  |#define MUSICLIB_BROWSE_ON_THE_FLY_GET_STATUS MSG_TYPE_MUSICLIB_BROWSE+6
                              720 ; 384  |#define MUSICLIB_BROWSE_ON_THE_FLY_ADD_ITEM MSG_TYPE_MUSICLIB_BROWSE+7
                              721 ; 385  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ITEM MSG_TYPE_MUSICLIB_BROWSE+8
                              722 ; 386  |#define MUSICLIB_BROWSE_ON_THE_FLY_DELETE_ALL MSG_TYPE_MUSICLIB_BROWSE+9
                              723 ; 387  |#define MUSICLIB_BROWSE_LAST_MSG_ID MSG_TYPE_MUSICLIB_BROWSE+9
                              724 ; 388  |
                              725 ; 389  |#define MUSICLIB_PLAYALLNEXT_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                              726 ; 390  |#define MUSICLIB_PLAYNEXTSONG MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                              727 ; 391  |#define MUSICLIB_PLAYALLNEXT_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLNEXT+0
                              728 ; 392  |
                              729 ; 393  |#define MUSICLIB_PLAYALLPREV_FIRST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                              730 ; 394  |#define MUSICLIB_PLAYPREVIOUSSONG MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                              731 ; 395  |#define MUSICLIB_PLAYALLPREV_LAST_MSG_ID MSG_TYPE_MUSICLIB_PLAYALLPREV+0
                              732 ; 396  |
                              733 ; 397  |#define MUSICLIB_SHUFFLE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                              734 ; 398  |#define MUSICLIB_SHUFFLE_NEXT MSG_TYPE_MUSICLIB_SHUFFLE+0
                              735 ; 399  |#define MUSICLIB_SHUFFLE_LAST_MSG_ID MSG_TYPE_MUSICLIB_SHUFFLE+0
                              736 ; 400  |
                              737 ; 401  |#define MUSICLIB_VOICE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+0
                              738 ; 402  |#define MUSICLIB_VOICE_BROWSEMENU MSG_TYPE_MUSICLIB_VOICE+0
                              739 ; 403  |#define MUSICLIB_VOICE_DOWNLIST MSG_TYPE_MUSICLIB_VOICE+1
                              740 ; 404  |#define MUSICLIB_VOICE_UPLIST MSG_TYPE_MUSICLIB_VOICE+2
                              741 ; 405  |#define MUSICLIB_VOICE_UPMENU MSG_TYPE_MUSICLIB_VOICE+3
                              742 ; 406  |#define MUSICLIB_VOICE_VOICENUMBER MSG_TYPE_MUSICLIB_VOICE+4
                              743 ; 407  |#define MUSICLIB_VOICE_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICE+4
                              744 ; 408  |
                              745 ; 409  |#define MUSICLIB_VOICEPLAY_FIRST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                              746 ; 410  |#define MUSICLIB_START_PLAY_VOICE MSG_TYPE_MUSICLIB_VOICEPLAY+0
                              747 ; 411  |#define MUSICLIB_VOICEPLAY_LAST_MSG_ID MSG_TYPE_MUSICLIB_VOICEPLAY+0
                              748 ; 412  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  13

M:ADDR CODE           CYCLES LINE SOURCELINE
                              749 ; 413  |#define MUSICLIB_MERGE_FIRST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+0
                              750 ; 414  |#define MUSICLIB_MERGE_SONG MSG_TYPE_MUSICLIB_MERGE+0
                              751 ; 415  |#define MUSICLIB_MERGE_ALL_SONG MSG_TYPE_MUSICLIB_MERGE+1
                              752 ; 416  |#define MUSICLIB_MERGE_RESUME MSG_TYPE_MUSICLIB_MERGE+2
                              753 ; 417  |#define MUSICLIB_MERGE_LAST_MSG_ID MSG_TYPE_MUSICLIB_MERGE+2
                              754 ; 418  |#endif // IF (@def(USE_PLAYLIST3))
                              755 ; 419  |
                              756 ; 420  |#if defined(USE_PLAYLIST5)
                              757 ; 421  |#define PL5_PL_FIRST_MSG_ID MSG_TYPE_PL5_PLAYBACK+0
                              758 ; 422  |#define PL5_PL_MSG_RESET MSG_TYPE_PL5_PLAYBACK+0
                              759 ; 423  |#define PL5_PL_MSG_CDSEARCHING MSG_TYPE_PL5_PLAYBACK+1
                              760 ; 424  |#define PL5_PL_MSG_START MSG_TYPE_PL5_PLAYBACK+2
                              761 ; 425  |#define PL5_PL_MSG_STOP MSG_TYPE_PL5_PLAYBACK+3
                              762 ; 426  |#define PL5_PL_MSG_PAUSE MSG_TYPE_PL5_PLAYBACK+4
                              763 ; 427  |#define PL5_PL_MSG_RESUME MSG_TYPE_PL5_PLAYBACK+5
                              764 ; 428  |#define PL5_PL_MSG_DELETE MSG_TYPE_PL5_PLAYBACK+6
                              765 ; 429  |#define PL5_PL_MSG_PLAY MSG_TYPE_PL5_PLAYBACK+7
                              766 ; 430  |#define PL5_PL_MSG_DISCNT MSG_TYPE_PL5_PLAYBACK+8
                              767 ; 431  |#define PL5_PL_MSG_ENACNT MSG_TYPE_PL5_PLAYBACK+9
                              768 ; 432  |#define PL5_PL_LAST_MSG_ID MSG_TYPE_PL5_PLAYBACK+9
                              769 ; 433  |
                              770 ; 434  |#define PL5_BR_FIRST_MSG_ID MSG_TYPE_PL5_BROWSE+0
                              771 ; 435  |#define PL5_BR_MSG_RESET MSG_TYPE_PL5_BROWSE+0
                              772 ; 436  |#define PL5_BR_MSG_CDBROWSING MSG_TYPE_PL5_BROWSE+1
                              773 ; 437  |#define PL5_BR_MSG_START MSG_TYPE_PL5_BROWSE+2
                              774 ; 438  |#define PL5_BR_MSG_STOP MSG_TYPE_PL5_BROWSE+3
                              775 ; 439  |#define PL5_BR_MSG_PAUSE MSG_TYPE_PL5_BROWSE+4
                              776 ; 440  |#define PL5_BR_MSG_RESUME MSG_TYPE_PL5_BROWSE+5
                              777 ; 441  |#define PL5_BR_MSG_DELETE MSG_TYPE_PL5_BROWSE+6
                              778 ; 442  |#define PL5_BR_LAST_MSG_ID MSG_TYPE_PL5_BROWSE+6
                              779 ; 443  |#endif // if @def('USE_PLAYLIST5')
                              780 ; 444  |// Events
                              781 ; 445  |// No event
                              782 ; 446  |#define EVENT_NONE 0x000001   
                              783 ; 447  |// A message has been posted
                              784 ; 448  |#define EVENT_MESSAGE 0x000002   
                              785 ; 449  |// Run if wait time elapsed
                              786 ; 450  |#define EVENT_TIMER 0x000004   
                              787 ; 451  |// Run if a button event occured
                              788 ; 452  |#define EVENT_BUTTON 0x000008   
                              789 ; 453  |// Run if a background event occured
                              790 ; 454  |#define EVENT_BACKGROUND 0x000010   
                              791 ; 455  |// The executive should immediately repeat this module
                              792 ; 456  |#define EVENT_REPEAT 0x000020   
                              793 ; 457  |// Run the module's init routine
                              794 ; 458  |#define EVENT_INIT 0x800000   
                              795 ; 459  |
                              796 ; 460  |#define EVENT_NONE_BITPOS 0
                              797 ; 461  |#define EVENT_MESSAGE_BITPOS 1
                              798 ; 462  |#define EVENT_TIMER_BITPOS 2
                              799 ; 463  |#define EVENT_BUTTON_BITPOS 3
                              800 ; 464  |#define EVENT_BACKGROUND_BITPOS 4
                              801 ; 465  |#define EVENT_REPEAT_BITPOS 5
                              802 ; 466  |#define EVENT_INIT_BITPOS 23
                              803 ; 467  |
                              804 ; 468  |// Parser Message Buffers
                              805 ; 469  |#define ParserPlayBit 0
                              806 ; 470  |#define ButtonPressBit 1
                              807 ; 471  |#define ParserRwndBit 1
                              808 ; 472  |#define ParserFfwdBit 2
                              809 ; 473  |
                              810 ; 474  |//NextSong Message Parameters
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  14

M:ADDR CODE           CYCLES LINE SOURCELINE
                              811 ; 475  |// ButtonPressBit1 set to denote button was pressed.
                              812 ; 476  |#define NEXT_SONG 2             
                              813 ; 477  |// ButtonPressBit1 cleared
                              814 ; 478  |#define NEXT_SONG_PLAY_EOF 1          
                              815 ; 479  |// ButtonPressBit1 set
                              816 ; 480  |#define NEXT_SONG_PLAY_BUTTON 3          
                              817 ; 481  |// NextSong + Ffwd
                              818 ; 482  |#define NEXT_SONG_FFWD 4          
                              819 ; 483  |
                              820 ; 484  |//PrevSong Message Parameters
                              821 ; 485  |// PrevSong + Stopped
                              822 ; 486  |#define PREV_SONG 0          
                              823 ; 487  |// PrevSong + Play
                              824 ; 488  |#define PREV_SONG_PLAY 1          
                              825 ; 489  |// PrevSong + Rwnd
                              826 ; 490  |#define PREV_SONG_RWND 2          
                              827 ; 491  |
                              828 ; 492  |
                              829 ; 493  |
                              830 ; 494  |
                              831 ; 495  |#endif // IF (!@def(MSGEQU_INC))
                              832 ; 496  |
                              833 ; 497  |
                              834 
                              836 
                              837 ; 3    |#include "project.h"
                              838 
                              840 
                              841 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              842 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                              843 ; 3    |//  Filename: project.inc
                              844 ; 4    |//  Description: 
                              845 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              846 ; 6    |
                              847 ; 7    |#if (!defined(_PROJECT_INC))
                              848 ; 8    |#define _PROJECT_INC 1
                              849 ; 9    |
                              850 ; 10   |#if defined(STMP_BUILD_PLAYER)
                              851 ; 11   |#include "hwequ.h"
                              852 
                              854 
                              855 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                              856 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2001
                              857 ; 3    |//  File        : hwequ.inc
                              858 ; 4    |//  Description : STMP Hardware Constants
                              859 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                              860 ; 6    |
                              861 ; 7    |// ////////////////////////////////////////////////////////////////////////////////
                              862 ; 8    |// hwequ is being eliminated for SDK3XXX.  For SDK2.5XX it will now reside in the   
                              863 ; 9    |// local folder instead of ..\inc.  All register includes are converted to .h by 
                              864 ; 10   |// registers.mk placed in the ..\lcdexample\player\output_XXXX folder.
                              865 ; 11   |// ////////////////////////////////////////////////////////////////////////////////
                              866 ; 12   |
                              867 ; 13   |#if (!defined(HWEQU_INC))
                              868 ; 14   |#define HWEQU_INC 1
                              869 ; 15   |
                              870 ; 16   |#include "types.h"
                              871 
                              873 
                              874 ; 1    |////////////////////////////////////////////////////////////////////////////////
                              875 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                              876 ; 3    |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  15

M:ADDR CODE           CYCLES LINE SOURCELINE
                              877 ; 4    |// Filename: types.h
                              878 ; 5    |// Description: Standard data types
                              879 ; 6    |////////////////////////////////////////////////////////////////////////////////
                              880 ; 7    |
                              881 ; 8    |#ifndef _TYPES_H
                              882 ; 9    |#define _TYPES_H
                              883 ; 10   |
                              884 ; 11   |// TODO:  move this outta here!
                              885 ; 12   |#if !defined(NOERROR)
                              886 ; 13   |#define NOERROR 0
                              887 ; 14   |#define SUCCESS 0
                              888 ; 15   |#endif 
                              889 ; 16   |#if !defined(SUCCESS)
                              890 ; 17   |#define SUCCESS  0
                              891 ; 18   |#endif
                              892 ; 19   |#if !defined(ERROR)
                              893 ; 20   |#define ERROR   -1
                              894 ; 21   |#endif
                              895 ; 22   |#if !defined(FALSE)
                              896 ; 23   |#define FALSE 0
                              897 ; 24   |#endif
                              898 ; 25   |#if !defined(TRUE)
                              899 ; 26   |#define TRUE  1
                              900 ; 27   |#endif
                              901 ; 28   |
                              902 ; 29   |#if !defined(NULL)
                              903 ; 30   |#define NULL 0
                              904 ; 31   |#endif
                              905 ; 32   |
                              906 ; 33   |#define MAX_INT     0x7FFFFF
                              907 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                              908 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                              909 ; 36   |#define MAX_ULONG   (-1) 
                              910 ; 37   |
                              911 ; 38   |#define WORD_SIZE   24              // word size in bits
                              912 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                              913 ; 40   |
                              914 ; 41   |
                              915 ; 42   |#define BYTE    unsigned char       // btVarName
                              916 ; 43   |#define CHAR    signed char         // cVarName
                              917 ; 44   |#define USHORT  unsigned short      // usVarName
                              918 ; 45   |#define SHORT   unsigned short      // sVarName
                              919 ; 46   |#define WORD    unsigned int        // wVarName
                              920 ; 47   |#define INT     signed int          // iVarName
                              921 ; 48   |#define DWORD   unsigned long       // dwVarName
                              922 ; 49   |#define LONG    signed long         // lVarName
                              923 ; 50   |#define BOOL    unsigned int        // bVarName
                              924 ; 51   |#define FRACT   _fract              // frVarName
                              925 ; 52   |#define LFRACT  long _fract         // lfrVarName
                              926 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                              927 ; 54   |#define FLOAT   float               // fVarName
                              928 ; 55   |#define DBL     double              // dVarName
                              929 ; 56   |#define ENUM    enum                // eVarName
                              930 ; 57   |#define CMX     _complex            // cmxVarName
                              931 ; 58   |typedef WORD UCS3;                   // 
                              932 ; 59   |
                              933 ; 60   |#define UINT16  unsigned short
                              934 ; 61   |#define UINT8   unsigned char   
                              935 ; 62   |#define UINT32  unsigned long
                              936 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  16

M:ADDR CODE           CYCLES LINE SOURCELINE
                              937 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                              938 ; 65   |#define WCHAR   UINT16
                              939 ; 66   |
                              940 ; 67   |//UINT128 is 16 bytes or 6 words
                              941 ; 68   |typedef struct UINT128_3500 {   
                              942 ; 69   |    int val[6];     
                              943 ; 70   |} UINT128_3500;
                              944 ; 71   |
                              945 ; 72   |#define UINT128   UINT128_3500
                              946 ; 73   |
                              947 ; 74   |// Little endian word packed byte strings:   
                              948 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              949 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              950 ; 77   |// Little endian word packed byte strings:   
                              951 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                              952 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                              953 ; 80   |
                              954 ; 81   |// Declare Memory Spaces To Use When Coding
                              955 ; 82   |// A. Sector Buffers
                              956 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                              957 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                              958 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                              959 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                              960 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                              961 ; 88   |// B. Media DDI Memory
                              962 ; 89   |#define MEDIA_DDI_MEM _Y
                              963 ; 90   |
                              964 ; 91   |
                              965 ; 92   |
                              966 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                              967 ; 94   |// Examples of circular pointers:
                              968 ; 95   |//    INT CIRC cpiVarName
                              969 ; 96   |//    DWORD CIRC cpdwVarName
                              970 ; 97   |
                              971 ; 98   |#define RETCODE INT                 // rcVarName
                              972 ; 99   |
                              973 ; 100  |// generic bitfield structure
                              974 ; 101  |struct Bitfield {
                              975 ; 102  |    unsigned int B0  :1;
                              976 ; 103  |    unsigned int B1  :1;
                              977 ; 104  |    unsigned int B2  :1;
                              978 ; 105  |    unsigned int B3  :1;
                              979 ; 106  |    unsigned int B4  :1;
                              980 ; 107  |    unsigned int B5  :1;
                              981 ; 108  |    unsigned int B6  :1;
                              982 ; 109  |    unsigned int B7  :1;
                              983 ; 110  |    unsigned int B8  :1;
                              984 ; 111  |    unsigned int B9  :1;
                              985 ; 112  |    unsigned int B10 :1;
                              986 ; 113  |    unsigned int B11 :1;
                              987 ; 114  |    unsigned int B12 :1;
                              988 ; 115  |    unsigned int B13 :1;
                              989 ; 116  |    unsigned int B14 :1;
                              990 ; 117  |    unsigned int B15 :1;
                              991 ; 118  |    unsigned int B16 :1;
                              992 ; 119  |    unsigned int B17 :1;
                              993 ; 120  |    unsigned int B18 :1;
                              994 ; 121  |    unsigned int B19 :1;
                              995 ; 122  |    unsigned int B20 :1;
                              996 ; 123  |    unsigned int B21 :1;
                              997 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  17

M:ADDR CODE           CYCLES LINE SOURCELINE
                              998 ; 125  |    unsigned int B23 :1;
                              999 ; 126  |};
                             1000 ; 127  |
                             1001 ; 128  |union BitInt {
                             1002 ; 129  |        struct Bitfield B;
                             1003 ; 130  |        int        I;
                             1004 ; 131  |};
                             1005 ; 132  |
                             1006 ; 133  |#define MAX_MSG_LENGTH 10
                             1007 ; 134  |struct CMessage
                             1008 ; 135  |{
                             1009 ; 136  |        unsigned int m_uLength;
                             1010 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1011 ; 138  |};
                             1012 ; 139  |
                             1013 ; 140  |typedef struct {
                             1014 ; 141  |    WORD m_wLength;
                             1015 ; 142  |    WORD m_wMessage;
                             1016 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1017 ; 144  |} Message;
                             1018 ; 145  |
                             1019 ; 146  |struct MessageQueueDescriptor
                             1020 ; 147  |{
                             1021 ; 148  |        int *m_pBase;
                             1022 ; 149  |        int m_iModulo;
                             1023 ; 150  |        int m_iSize;
                             1024 ; 151  |        int *m_pHead;
                             1025 ; 152  |        int *m_pTail;
                             1026 ; 153  |};
                             1027 ; 154  |
                             1028 ; 155  |struct ModuleEntry
                             1029 ; 156  |{
                             1030 ; 157  |    int m_iSignaledEventMask;
                             1031 ; 158  |    int m_iWaitEventMask;
                             1032 ; 159  |    int m_iResourceOfCode;
                             1033 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1034 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1035 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1036 ; 163  |    int m_uTimeOutHigh;
                             1037 ; 164  |    int m_uTimeOutLow;
                             1038 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1039 ; 166  |};
                             1040 ; 167  |
                             1041 ; 168  |union WaitMask{
                             1042 ; 169  |    struct B{
                             1043 ; 170  |        unsigned int m_bNone     :1;
                             1044 ; 171  |        unsigned int m_bMessage  :1;
                             1045 ; 172  |        unsigned int m_bTimer    :1;
                             1046 ; 173  |        unsigned int m_bButton   :1;
                             1047 ; 174  |    } B;
                             1048 ; 175  |    int I;
                             1049 ; 176  |} ;
                             1050 ; 177  |
                             1051 ; 178  |
                             1052 ; 179  |struct Button {
                             1053 ; 180  |        WORD wButtonEvent;
                             1054 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1055 ; 182  |};
                             1056 ; 183  |
                             1057 ; 184  |struct Message {
                             1058 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  18

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1059 ; 186  |        WORD wMsgCommand;
                             1060 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1061 ; 188  |};
                             1062 ; 189  |
                             1063 ; 190  |union EventTypes {
                             1064 ; 191  |        struct CMessage msg;
                             1065 ; 192  |        struct Button Button ;
                             1066 ; 193  |        struct Message Message;
                             1067 ; 194  |};
                             1068 ; 195  |
                             1069 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1070 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1071 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1072 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1073 ; 200  |
                             1074 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1075 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1076 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1077 ; 204  |
                             1078 ; 205  |#if DEBUG
                             1079 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1080 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1081 ; 208  |#else 
                             1082 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1083 ; 210  |#define DebugBuildAssert(x)    
                             1084 ; 211  |#endif
                             1085 ; 212  |
                             1086 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1087 ; 214  |//  #pragma asm
                             1088 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1089 ; 216  |//  #pragma endasm
                             1090 ; 217  |
                             1091 ; 218  |
                             1092 ; 219  |#ifdef COLOR_262K
                             1093 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1094 ; 221  |#elif defined(COLOR_65K)
                             1095 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1096 ; 223  |#else
                             1097 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1098 ; 225  |#endif
                             1099 ; 226  |    
                             1100 ; 227  |#endif // #ifndef _TYPES_H
                             1101 
                             1103 
                             1104 ; 17   |#include "regsclkctrl.h"
                             1105 
                             1107 
                             1108 ; 1    |#if !(defined(__REGS_CLK_CONTROL_INC))
                             1109 ; 2    |#define __REGS_CLK_CONTROL_INC 1
                             1110 ; 3    |
                             1111 ; 4    |
                             1112 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1113 ; 6    |//  Clock Control Register (HW_CCR) Bit Positions
                             1114 ; 7    |#define HW_CCR_CKRST_BITPOS 0
                             1115 ; 8    |#define HW_CCR_LTC_BITPOS 1
                             1116 ; 9    |#define HW_CCR_PLLEN_BITPOS 2
                             1117 ; 10   |#define HW_CCR_XTLEN_BITPOS 3
                             1118 ; 11   |#define HW_CCR_PLL_SOURCE_SEL_BITPOS 4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  19

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1119 ; 12   |#define HW_CCR_ADIV_B0_BITPOS 5
                             1120 ; 13   |#define HW_CCR_ADIV_B1_BITPOS 6
                             1121 ; 14   |#define HW_CCR_ADIV_B2_BITPOS 7
                             1122 ; 15   |#define HW_CCR_CKSRC_BITPOS 8
                             1123 ; 16   |#define HW_CCR_DDIV_BITPOS 9
                             1124 ; 17   |#define HW_CCR_DDIV_B0_BITPOS 9
                             1125 ; 18   |#define HW_CCR_DDIV_B1_BITPOS 10
                             1126 ; 19   |#define HW_CCR_DDIV_B2_BITPOS 11
                             1127 ; 20   |#define HW_CCR_PDIV_BITPOS 12
                             1128 ; 21   |#define HW_CCR_PDIV_B0_BITPOS 12
                             1129 ; 22   |#define HW_CCR_PDIV_B1_BITPOS 13
                             1130 ; 23   |#define HW_CCR_PDIV_B2_BITPOS 14
                             1131 ; 24   |#define HW_CCR_PDIV_B3_BITPOS 15
                             1132 ; 25   |#define HW_CCR_PDIV_B4_BITPOS 16
                             1133 ; 26   |#define HW_CCR_PWDN_BITPOS 17
                             1134 ; 27   |#define HW_CCR_ACKEN_BITPOS 18
                             1135 ; 28   |#define HW_CCR_LOCK_BITPOS 19
                             1136 ; 29   |#define HW_CCR_DACDIV_BITPOS 20
                             1137 ; 30   |#define HW_CCR_ADIV1_B0_BITPOS 20
                             1138 ; 31   |#define HW_CCR_ADIV1_B1_BITPOS 21
                             1139 ; 32   |#define HW_CCR_ADIV1_B2_BITPOS 22
                             1140 ; 33   |#define HW_CCR_DDIV_MSB_BITPOS 23
                             1141 ; 34   |
                             1142 ; 35   |#define HW_CCR_CKRST_SETMASK 1<<HW_CCR_CKRST_BITPOS
                             1143 ; 36   |#define HW_CCR_LTC_SETMASK 1<<HW_CCR_LTC_BITPOS
                             1144 ; 37   |#define HW_CCR_PLLEN_SETMASK 1<<HW_CCR_PLLEN_BITPOS
                             1145 ; 38   |#define HW_CCR_XTLEN_SETMASK 1<<HW_CCR_XTLEN_BITPOS
                             1146 ; 39   |#define HW_CCR_ADCDIV_SETMASK 0x7<<HW_CCR_ADIV_B0_BITPOS
                             1147 ; 40   |#define HW_CCR_CKSRC_SETMASK 1<<HW_CCR_CKSRC_BITPOS
                             1148 ; 41   |#define HW_CCR_DDIV_SETMASK 0x7<<HW_CCR_DDIV_BITPOS
                             1149 ; 42   |#define HW_CCR_PDIV_SETMASK 0x1F<<HW_CCR_PDIV_BITPOS
                             1150 ; 43   |#define HW_CCR_PWDN_SETMASK 1<<HW_CCR_PWDN_BITPOS
                             1151 ; 44   |#define HW_CCR_ACKEN_SETMASK 1<<HW_CCR_ACKEN_BITPOS
                             1152 ; 45   |#define HW_CCR_LOCK_SETMASK 1<<HW_CCR_LOCK_BITPOS
                             1153 ; 46   |#define HW_CCR_DACDIV_SETMASK 0x7<<HW_CCR_DACDIV_BITPOS
                             1154 ; 47   |
                             1155 ; 48   |#define HW_CCR_CKRST_CLRMASK ~(WORD)HW_CCR_CKRST_SETMASK
                             1156 ; 49   |#define HW_CCR_LTC_CLRMASK ~(WORD)HW_CCR_LTC_SETMASK
                             1157 ; 50   |#define HW_CCR_PLLEN_CLRMASK ~(WORD)HW_CCR_PLLEN_SETMASK
                             1158 ; 51   |#define HW_CCR_XTLEN_CLRMASK ~(WORD)HW_CCR_XTLEN_SETMASK
                             1159 ; 52   |#define HW_CCR_ADCDIV_CLRMASK ~(WORD)HW_CCR_ADCDIV_SETMASK
                             1160 ; 53   |#define HW_CCR_CKSRC_CLRMASK ~(WORD)HW_CCR_CKSRC_SETMASK
                             1161 ; 54   |#define HW_CCR_DDIV_CLRMASK ~(WORD)HW_CCR_DDIV_SETMASK
                             1162 ; 55   |#define HW_CCR_PDIV_CLRMASK ~(WORD)HW_CCR_PDIV_SETMASK
                             1163 ; 56   |#define HW_CCR_PWDN_CLRMASK ~(WORD)HW_CCR_PWDN_SETMASK
                             1164 ; 57   |#define HW_CCR_ACKEN_CLRMASK ~(WORD)HW_CCR_ACKEN_SETMASK
                             1165 ; 58   |#define HW_CCR_LOCK_CLRMASK ~(WORD)HW_CCR_LOCK_SETMASK
                             1166 ; 59   |#define HW_CCR_DACDIV_CLRMASK ~(WORD)HW_CCR_DACDIV_SETMASK
                             1167 ; 60   |
                             1168 ; 61   |typedef union               
                             1169 ; 62   |{
                             1170 ; 63   |    struct
                             1171 ; 64   |    {
                             1172 ; 65   |        int CKRST       :1; // Clock Reset
                             1173 ; 66   |        int LTC         :1;
                             1174 ; 67   |        int PLLEN       :1;
                             1175 ; 68   |        int XTLEN       :1;
                             1176 ; 69   |        int FLB         :1;
                             1177 ; 70   |        unsigned ADIV   :3;
                             1178 ; 71   |        int CKSRC       :1;
                             1179 ; 72   |        unsigned DDIV   :3;
                             1180 ; 73   |        unsigned PDIV   :5;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  20

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1181 ; 74   |        int PWDN        :1;
                             1182 ; 75   |        int ACKEN       :1;
                             1183 ; 76   |        int LOCK        :1;
                             1184 ; 77   |        unsigned ADIV1  :3;
                             1185 ; 78   |        unsigned DDIV_MSB:1;
                             1186 ; 79   |    } B;
                             1187 ; 80   |
                             1188 ; 81   |    int I;
                             1189 ; 82   |    unsigned int U;
                             1190 ; 83   |
                             1191 ; 84   |} ccr_type;
                             1192 ; 85   |#define HW_CCR     (*(volatile ccr_type _X*) (0xFA00))
                             1193 ; 86   |
                             1194 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                             1195 ; 88   |//  Reset Control Register (HW_RCR) Bit Positions
                             1196 ; 89   |#define HW_RCR_STKLVL_BITPOS 0
                             1197 ; 90   |#define HW_RCR_SRST_BITPOS 4
                             1198 ; 91   |#define HW_RCR_IRQA_BITPOS 8
                             1199 ; 92   |#define HW_RCR_IRQB_BITPOS 9
                             1200 ; 93   |#define HW_RCR_NMI_BITPOS 10
                             1201 ; 94   |#define HW_RCR_SUNFLLVL_BITPOS 11
                             1202 ; 95   |#define HW_RCR_SUNFLEN_BITPOS 15
                             1203 ; 96   |#define HW_RCR_SOVFLLVL_BITPOS 16
                             1204 ; 97   |#define HW_RCR_SOVFLEN_BITPOS 20
                             1205 ; 98   |#define HW_RCR_IRQB2NMI_BITPOS 21
                             1206 ; 99   |#define HW_RCR_SUNFL_BITPOS 22
                             1207 ; 100  |#define HW_RCR_SOVFL_BITPOS 23
                             1208 ; 101  |
                             1209 ; 102  |#define HW_RCR_STKLVL_WIDTH (4)
                             1210 ; 103  |#define HW_RCR_SRST_WIDTH (4)
                             1211 ; 104  |#define HW_RCR_IRQA_WIDTH (1)
                             1212 ; 105  |#define HW_RCR_IRQB_WIDTH (1)
                             1213 ; 106  |#define HW_RCR_NMI_WIDTH (1)
                             1214 ; 107  |#define HW_RCR_SUNFLLVL_WIDTH (4)
                             1215 ; 108  |#define HW_RCR_SUNFLEN_WIDTH (1)
                             1216 ; 109  |#define HW_RCR_SOVFLLVL_WIDTH (4)
                             1217 ; 110  |#define HW_RCR_SOVFLEN_WIDTH (1)
                             1218 ; 111  |#define HW_RCR_IRQB2NMI_WIDTH (1)
                             1219 ; 112  |#define HW_RCR_SUNFL_WIDTH (1)
                             1220 ; 113  |#define HW_RCR_SOVFL_WIDTH (1)
                             1221 ; 114  |
                             1222 ; 115  |#define HW_RCR_STKLVL_SETMASK (((1<<HW_RCR_STKLVL_WIDTH)-1)<<HW_RCR_STKLVL_BITPOS)
                             1223 ; 116  |#define HW_RCR_SRST_SETMASK (((1<<HW_RCR_SRST_WIDTH)-1)<<HW_RCR_SRST_BITPOS)
                             1224 ; 117  |#define HW_RCR_IRQA_SETMASK (((1<<HW_RCR_IRQA_WIDTH)-1)<<HW_RCR_IRQA_BITPOS)
                             1225 ; 118  |#define HW_RCR_IRQB_SETMASK (((1<<HW_RCR_IRQB_WIDTH)-1)<<HW_RCR_IRQB_BITPOS)
                             1226 ; 119  |#define HW_RCR_NMI_SETMASK (((1<<HW_RCR_NMI_WIDTH)-1)<<HW_RCR_NMI_BITPOS)
                             1227 ; 120  |#define HW_RCR_SUNFLLVL_SETMASK (((1<<HW_RCR_SUNFLLVL_WIDTH)-1)<<HW_RCR_SUNFLLVL_BITPOS)
                             1228 ; 121  |#define HW_RCR_SUNFLEN_SETMASK (((1<<HW_RCR_SUNFLEN_WIDTH)-1)<<HW_RCR_SUNFLEN_BITPOS)
                             1229 ; 122  |#define HW_RCR_SOVFLLVL_SETMASK (((1<<HW_RCR_SOVFLLVL_WIDTH)-1)<<HW_RCR_SOVFLLVL_BITPOS)
                             1230 ; 123  |#define HW_RCR_SOVFLEN_SETMASK (((1<<HW_RCR_SOVFLEN_WIDTH)-1)<<HW_RCR_SOVFLEN_BITPOS)
                             1231 ; 124  |#define HW_RCR_IRQB2NMI_SETMASK (((1<<HW_RCR_IRQB2NMI_WIDTH)-1)<<HW_RCR_IRQB2NMI_BITPOS)
                             1232 ; 125  |#define HW_RCR_SUNFL_SETMASK (((1<<HW_RCR_SUNFL_WIDTH)-1)<<HW_RCR_SUNFL_BITPOS)
                             1233 ; 126  |#define HW_RCR_SOVFL_SETMASK (((1<<HW_RCR_SOVFL_WIDTH)-1)<<HW_RCR_SOVFL_BITPOS)
                             1234 ; 127  |
                             1235 ; 128  |#define HW_RCR_STKLVL_CLRMASK ~(WORD)HW_RCR_STKLVL_SETMASK
                             1236 ; 129  |#define HW_RCR_SRST_CLRMASK ~(WORD)HW_RCR_SRST_SETMASK
                             1237 ; 130  |#define HW_RCR_IRQA_CLRMASK ~(WORD)HW_RCR_IRQA_SETMASK
                             1238 ; 131  |#define HW_RCR_IRQB_CLRMASK ~(WORD)HW_RCR_IRQB_SETMASK
                             1239 ; 132  |#define HW_RCR_NMI_CLRMASK ~(WORD)HW_RCR_NMI_SETMASK
                             1240 ; 133  |#define HW_RCR_SUNFLLVL_CLRMASK ~(WORD)HW_RCR_SUNFLLVL_SETMASK
                             1241 ; 134  |#define HW_RCR_SUNFLEN_CLRMASK ~(WORD)HW_RCR_SUNFLEN_SETMASK
                             1242 ; 135  |#define HW_RCR_SOVFLLVL_CLRMASK ~(WORD)HW_RCR_SOVFLLVL_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  21

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1243 ; 136  |#define HW_RCR_SOVFLEN_CLRMASK ~(WORD)HW_RCR_SOVFLEN_SETMASK
                             1244 ; 137  |#define HW_RCR_IRQB2NMI_CLRMASK ~(WORD)HW_RCR_IRQB2NMI_SETMASK
                             1245 ; 138  |#define HW_RCR_SUNFL_CLRMASK ~(WORD)HW_RCR_SUNFL_SETMASK
                             1246 ; 139  |#define HW_RCR_SOVFL_CLRMASK ~(WORD)HW_RCR_SOVFL_SETMASK
                             1247 ; 140  |
                             1248 ; 141  |typedef union               
                             1249 ; 142  |{
                             1250 ; 143  |    struct
                             1251 ; 144  |   {
                             1252 ; 145  |        int STKLVL   : HW_RCR_STKLVL_WIDTH;
                             1253 ; 146  |        int SRST     : HW_RCR_SRST_WIDTH;
                             1254 ; 147  |        int IRQA     : HW_RCR_IRQA_WIDTH;
                             1255 ; 148  |        int IRQB     : HW_RCR_IRQB_WIDTH;
                             1256 ; 149  |        int NMI      : HW_RCR_NMI_WIDTH;
                             1257 ; 150  |        int SUNFLLVL : HW_RCR_SUNFLLVL_WIDTH;
                             1258 ; 151  |        int SUNFLEN  : HW_RCR_SUNFLEN_WIDTH;
                             1259 ; 152  |        int SOVFLLVL : HW_RCR_SOVFLLVL_WIDTH;
                             1260 ; 153  |        int SOVFLEN  : HW_RCR_SOVFLEN_WIDTH;
                             1261 ; 154  |        int IRQB2NMI : HW_RCR_IRQB2NMI_WIDTH;
                             1262 ; 155  |        int SUNFL    : HW_RCR_SUNFL_WIDTH;
                             1263 ; 156  |        int SOVFL    : HW_RCR_SOVFL_WIDTH;
                             1264 ; 157  |    } B;
                             1265 ; 158  |
                             1266 ; 159  |    int I;
                             1267 ; 160  |    unsigned int U;
                             1268 ; 161  |
                             1269 ; 162  |} rcr_type;
                             1270 ; 163  |#define HW_RCR     (*(volatile rcr_type _X*) (0xFA01))
                             1271 ; 164  |
                             1272 ; 165  |
                             1273 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             1274 ; 167  |//  DCLK Count Lower register (HW_DCLKCNTL) Bit Positions
                             1275 ; 168  |#define HW_DCLKCNTL_LOW_BITPOS 0
                             1276 ; 169  |
                             1277 ; 170  |#define HW_DCLKCNTL_LOW_WIDTH (24)        
                             1278 ; 171  |
                             1279 ; 172  |#define HW_DCLKCNTL_LOW_SETMASK (((1<<HW_DCLKCNTL_LOW_WIDTH)-1)<<HW_DCLKCNTL_LOW_BITPOS) 
                             1280 ; 173  |#define HW_DCLKCNTL_LOW_CLRMASK ~(WORD)HW_DCLKCNTL_LOW_SETMASK
                             1281 ; 174  |typedef union               
                             1282 ; 175  |{
                             1283 ; 176  |    struct
                             1284 ; 177  |   {
                             1285 ; 178  |        int LOW;
                             1286 ; 179  |    } B;
                             1287 ; 180  |
                             1288 ; 181  |    int I;
                             1289 ; 182  |    unsigned int U;
                             1290 ; 183  |
                             1291 ; 184  |} dclkcntl_type;
                             1292 ; 185  |#define HW_DCLKCNTL (*(volatile dclkcntl_type _X*) (0xFFEA))
                             1293 ; 186  |
                             1294 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                             1295 ; 188  |//  DCLK Count UPPER register (HW_DCLKCNTU) Bit Positions
                             1296 ; 189  |#define HW_DCLKCNTU_HIGH_BITPOS 0
                             1297 ; 190  |
                             1298 ; 191  |#define HW_DCLKCNTU_HIGH_WIDTH (24)        
                             1299 ; 192  |
                             1300 ; 193  |#define HW_DCLKCNTU_HIGH_SETMASK (((1<<HW_DCLKCNTU_HIGH_WIDTH)-1)<<HW_DCLKCNTU_HIGH_BITPOS
                                  ) 
                             1301 ; 194  |#define HW_DCLKCNTU_HIGH_CLRMASK ~(WORD)HW_DCLKCNTU_HIGH_SETMASK
                             1302 ; 195  |typedef union               
                             1303 ; 196  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  22

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1304 ; 197  |    struct
                             1305 ; 198  |   {
                             1306 ; 199  |        int HIGH;
                             1307 ; 200  |    } B;
                             1308 ; 201  |
                             1309 ; 202  |    int I;
                             1310 ; 203  |    unsigned int U;
                             1311 ; 204  |
                             1312 ; 205  |} dclkcntu_type;
                             1313 ; 206  |#define HW_DCLKCNTU (*(volatile dclkcntu_type _X*) (0xFFEB))
                             1314 ; 207  |
                             1315 ; 208  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             1316 ; 209  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             1317 ; 210  |// to update the actual files. Only the defines needed to build SDK2.400 were added. 
                             1318 ; 211  |
                             1319 ; 212  |// Clock count register (lower)
                             1320 ; 213  |#define HW_CLK_CNT_L 0x00FFEA         
                             1321 ; 214  |// Clock count register (upper)
                             1322 ; 215  |#define HW_CLK_CNT_U 0x00FFEB         
                             1323 ; 216  |// Cycle steal count register
                             1324 ; 217  |#define HW_CYC_STEAL 0x00FFEC         
                             1325 ; 218  |
                             1326 ; 219  |#endif
                             1327 ; 220  |
                             1328 ; 221  |
                             1329 
                             1331 
                             1332 ; 18   |#include "regscore.h"
                             1333 
                             1335 
                             1336 ; 1    |#if !(defined(__REGS_STATUS_INC))
                             1337 ; 2    |#define __REGS_STATUS_INC 1
                             1338 ; 3    |
                             1339 ; 4    |
                             1340 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             1341 ; 6    |//  OMR Register (HW_OMR) Bit Positions
                             1342 ; 7    |#define HW_OMR_MA_BITPOS 0
                             1343 ; 8    |#define HW_OMR_MB_BITPOS 1
                             1344 ; 9    |#define HW_OMR_DE_BITPOS 2
                             1345 ; 10   |#define HW_OMR_YE_BITPOS 3
                             1346 ; 11   |#define HW_OMR_MC_BITPOS 4
                             1347 ; 12   |#define HW_OMR_SD_BITPOS 6
                             1348 ; 13   |
                             1349 ; 14   |#define HW_OMR_MA_SETMASK 1<<HW_OMR_MA_BITPOS
                             1350 ; 15   |#define HW_OMR_MB_SETMASK 1<<HW_OMR_MB_BITPOS
                             1351 ; 16   |#define HW_OMR_DE_SETMASK 1<<HW_OMR_DE_BITPOS
                             1352 ; 17   |#define HW_OMR_YE_SETMASK 1<<HW_OMR_YE_BITPOS
                             1353 ; 18   |#define HW_OMR_MC_SETMASK 1<<HW_OMR_MC_BITPOS
                             1354 ; 19   |#define HW_OMR_SD_SETMASK 1<<HW_OMR_SD_BITPOS
                             1355 ; 20   |
                             1356 ; 21   |#define HW_OMR_MA_CLRMASK ~(WORD)HW_OMR_MA_SETMASK
                             1357 ; 22   |#define HW_OMR_MB_CLRMASK ~(WORD)HW_OMR_MB_SETMASK
                             1358 ; 23   |#define HW_OMR_DE_CLRMASK ~(WORD)HW_OMR_DE_SETMASK
                             1359 ; 24   |#define HW_OMR_YE_CLRMASK ~(WORD)HW_OMR_YE_SETMASK
                             1360 ; 25   |#define HW_OMR_MC_CLRMASK ~(WORD)HW_OMR_MC_SETMASK
                             1361 ; 26   |#define HW_OMR_SD_CLRMASK ~(WORD)HW_OMR_SD_SETMASK
                             1362 ; 27   |
                             1363 ; 28   |
                             1364 ; 29   |/////////////////////////////////////////////////////////////////////////////////
                             1365 ; 30   |//  Status Register (HW_SR) Bit Positions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  23

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1366 ; 31   |#define HW_SR_C_BITPOS 0
                             1367 ; 32   |#define HW_SR_O_BITPOS 1
                             1368 ; 33   |#define HW_SR_Z_BITPOS 2
                             1369 ; 34   |#define HW_SR_N_BITPOS 3
                             1370 ; 35   |#define HW_SR_U_BITPOS 4
                             1371 ; 36   |#define HW_SR_E_BITPOS 5
                             1372 ; 37   |#define HW_SR_L_BITPOS 6
                             1373 ; 38   |#define HW_SR_IM_BITPOS 8
                             1374 ; 39   |#define HW_SR_IM0_BITPOS 8
                             1375 ; 40   |#define HW_SR_IM1_BITPOS 9
                             1376 ; 41   |#define HW_SR_SM_BITPOS 10
                             1377 ; 42   |#define HW_SR_SM0_BITPOS 10
                             1378 ; 43   |#define HW_SR_SM1_BITPOS 11
                             1379 ; 44   |#define HW_SR_TM_BITPOS 13
                             1380 ; 45   |#define HW_SR_DP_BITPOS 14
                             1381 ; 46   |#define HW_SR_LOOP_BITPOS 15
                             1382 ; 47   |
                             1383 ; 48   |#define HW_SR_C_SETMASK 1<<HW_SR_C_BITPOS
                             1384 ; 49   |#define HW_SR_O_SETMASK 1<<HW_SR_O_BITPOS
                             1385 ; 50   |#define HW_SR_Z_SETMASK 1<<HW_SR_Z_BITPOS
                             1386 ; 51   |#define HW_SR_N_SETMASK 1<<HW_SR_N_BITPOS
                             1387 ; 52   |#define HW_SR_U_SETMASK 1<<HW_SR_U_BITPOS
                             1388 ; 53   |#define HW_SR_E_SETMASK 1<<HW_SR_E_BITPOS
                             1389 ; 54   |#define HW_SR_L_SETMASK 1<<HW_SR_L_BITPOS
                             1390 ; 55   |#define HW_SR_IM_SETMASK 3<<HW_SR_IM_BITPOS
                             1391 ; 56   |#define HW_SR_IM0_SETMASK 1<<HW_SR_IM0_BITPOS
                             1392 ; 57   |#define HW_SR_IM1_SETMASK 1<<HW_SR_IM1_BITPOS
                             1393 ; 58   |#define HW_SR_IM_L0_SETMASK 0<<HW_SR_IM_BITPOS
                             1394 ; 59   |#define HW_SR_IM_L1_SETMASK 1<<HW_SR_IM_BITPOS
                             1395 ; 60   |#define HW_SR_IM_L2_SETMASK 2<<HW_SR_IM_BITPOS
                             1396 ; 61   |#define HW_SR_IM_L3_SETMASK 3<<HW_SR_IM_BITPOS
                             1397 ; 62   |#define HW_SR_SM_SETMASK 3<<HW_SR_SM_BITPOS
                             1398 ; 63   |#define HW_SR_SM0_SETMASK 1<<HW_SR_SM0_BITPOS
                             1399 ; 64   |#define HW_SR_SM1_SETMASK 1<<HW_SR_SM1_BITPOS
                             1400 ; 65   |#define HW_SR_TM_SETMASK 1<<HW_SR_TM_BITPOS
                             1401 ; 66   |#define HW_SR_DP_SETMASK 1<<HW_SR_DP_BITPOS
                             1402 ; 67   |#define HW_SR_LOOP_SETMASK 1<<HW_SR_LOOP_BITPOS
                             1403 ; 68   |
                             1404 ; 69   |#define HW_SR_C_CLRMASK ~(WORD)HW_SR_C_SETMASK
                             1405 ; 70   |#define HW_SR_O_CLRMASK ~(WORD)HW_SR_O_SETMASK
                             1406 ; 71   |#define HW_SR_Z_CLRMASK ~(WORD)HW_SR_Z_SETMASK
                             1407 ; 72   |#define HW_SR_N_CLRMASK ~(WORD)HW_SR_N_SETMASK
                             1408 ; 73   |#define HW_SR_U_CLRMASK ~(WORD)HW_SR_U_SETMASK
                             1409 ; 74   |#define HW_SR_E_CLRMASK ~(WORD)HW_SR_E_SETMASK
                             1410 ; 75   |#define HW_SR_L_CLRMASK ~(WORD)HW_SR_L_SETMASK
                             1411 ; 76   |#define HW_SR_IM_CLRMASK (0x00FFFF)&(~(WORD)HW_SR_IM_SETMASK)
                             1412 ; 77   |#define HW_SR_IM0_CLRMASK ~(WORD)HW_SR_IM0_SETMASK
                             1413 ; 78   |#define HW_SR_IM1_CLRMASK ~(WORD)HW_SR_IM1_SETMASK
                             1414 ; 79   |#define HW_SR_SM_CLRMASK ~(WORD)HW_SR_SM_SETMASK
                             1415 ; 80   |#define HW_SR_SM0_CLRMASK ~(WORD)HW_SR_SM0_SETMASK
                             1416 ; 81   |#define HW_SR_SM1_CLRMASK ~(WORD)HW_SR_SM1_SETMASK
                             1417 ; 82   |#define HW_SR_TM_CLRMASK ~(WORD)HW_SR_TM_SETMASK
                             1418 ; 83   |#define HW_SR_DP_CLRMASK ~(WORD)HW_SR_DP_SETMASK
                             1419 ; 84   |#define HW_SR_LOOP_CLRMASK ~(WORD)HW_SR_LOOP_SETMASK
                             1420 ; 85   |
                             1421 ; 86   |/////////////////////////////////////////////////////////////////////////////////
                             1422 ; 87   |//  RAM/ROM Config Register Bit Positions
                             1423 ; 88   |#define HW_RAM_ROM_CFG_ROM_IMAGE_EN_BITPOS 18
                             1424 ; 89   |#define HW_RAM_ROM_CFG_ROM_CLK_EN_BITPOS 19
                             1425 ; 90   |#define HW_RAM_ROM_CFG_PXRAM_CLK_EN_BITPOS 20
                             1426 ; 91   |#define HW_RAM_ROM_CFG_PYRAM_CLK_EN_BITPOS 21
                             1427 ; 92   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  24

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1428 ; 93   |
                             1429 ; 94   |
                             1430 
                             1432 
                             1433 ; 19   |#include "regscodec.h"
                             1434 
                             1436 
                             1437 ; 1    |#if !(defined(regscodecinc))
                             1438 ; 2    |#define regscodecinc 1
                             1439 ; 3    |
                             1440 ; 4    |
                             1441 ; 5    |
                             1442 ; 6    |#include "types.h"
                             1443 
                             1445 
                             1446 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             1447 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             1448 ; 3    |//
                             1449 ; 4    |// Filename: types.h
                             1450 ; 5    |// Description: Standard data types
                             1451 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             1452 ; 7    |
                             1453 ; 8    |#ifndef _TYPES_H
                             1454 ; 9    |#define _TYPES_H
                             1455 ; 10   |
                             1456 ; 11   |// TODO:  move this outta here!
                             1457 ; 12   |#if !defined(NOERROR)
                             1458 ; 13   |#define NOERROR 0
                             1459 ; 14   |#define SUCCESS 0
                             1460 ; 15   |#endif 
                             1461 ; 16   |#if !defined(SUCCESS)
                             1462 ; 17   |#define SUCCESS  0
                             1463 ; 18   |#endif
                             1464 ; 19   |#if !defined(ERROR)
                             1465 ; 20   |#define ERROR   -1
                             1466 ; 21   |#endif
                             1467 ; 22   |#if !defined(FALSE)
                             1468 ; 23   |#define FALSE 0
                             1469 ; 24   |#endif
                             1470 ; 25   |#if !defined(TRUE)
                             1471 ; 26   |#define TRUE  1
                             1472 ; 27   |#endif
                             1473 ; 28   |
                             1474 ; 29   |#if !defined(NULL)
                             1475 ; 30   |#define NULL 0
                             1476 ; 31   |#endif
                             1477 ; 32   |
                             1478 ; 33   |#define MAX_INT     0x7FFFFF
                             1479 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             1480 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             1481 ; 36   |#define MAX_ULONG   (-1) 
                             1482 ; 37   |
                             1483 ; 38   |#define WORD_SIZE   24              // word size in bits
                             1484 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             1485 ; 40   |
                             1486 ; 41   |
                             1487 ; 42   |#define BYTE    unsigned char       // btVarName
                             1488 ; 43   |#define CHAR    signed char         // cVarName
                             1489 ; 44   |#define USHORT  unsigned short      // usVarName
                             1490 ; 45   |#define SHORT   unsigned short      // sVarName
                             1491 ; 46   |#define WORD    unsigned int        // wVarName
                             1492 ; 47   |#define INT     signed int          // iVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  25

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1493 ; 48   |#define DWORD   unsigned long       // dwVarName
                             1494 ; 49   |#define LONG    signed long         // lVarName
                             1495 ; 50   |#define BOOL    unsigned int        // bVarName
                             1496 ; 51   |#define FRACT   _fract              // frVarName
                             1497 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             1498 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             1499 ; 54   |#define FLOAT   float               // fVarName
                             1500 ; 55   |#define DBL     double              // dVarName
                             1501 ; 56   |#define ENUM    enum                // eVarName
                             1502 ; 57   |#define CMX     _complex            // cmxVarName
                             1503 ; 58   |typedef WORD UCS3;                   // 
                             1504 ; 59   |
                             1505 ; 60   |#define UINT16  unsigned short
                             1506 ; 61   |#define UINT8   unsigned char   
                             1507 ; 62   |#define UINT32  unsigned long
                             1508 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1509 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             1510 ; 65   |#define WCHAR   UINT16
                             1511 ; 66   |
                             1512 ; 67   |//UINT128 is 16 bytes or 6 words
                             1513 ; 68   |typedef struct UINT128_3500 {   
                             1514 ; 69   |    int val[6];     
                             1515 ; 70   |} UINT128_3500;
                             1516 ; 71   |
                             1517 ; 72   |#define UINT128   UINT128_3500
                             1518 ; 73   |
                             1519 ; 74   |// Little endian word packed byte strings:   
                             1520 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1521 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1522 ; 77   |// Little endian word packed byte strings:   
                             1523 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             1524 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             1525 ; 80   |
                             1526 ; 81   |// Declare Memory Spaces To Use When Coding
                             1527 ; 82   |// A. Sector Buffers
                             1528 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             1529 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             1530 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             1531 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             1532 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             1533 ; 88   |// B. Media DDI Memory
                             1534 ; 89   |#define MEDIA_DDI_MEM _Y
                             1535 ; 90   |
                             1536 ; 91   |
                             1537 ; 92   |
                             1538 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             1539 ; 94   |// Examples of circular pointers:
                             1540 ; 95   |//    INT CIRC cpiVarName
                             1541 ; 96   |//    DWORD CIRC cpdwVarName
                             1542 ; 97   |
                             1543 ; 98   |#define RETCODE INT                 // rcVarName
                             1544 ; 99   |
                             1545 ; 100  |// generic bitfield structure
                             1546 ; 101  |struct Bitfield {
                             1547 ; 102  |    unsigned int B0  :1;
                             1548 ; 103  |    unsigned int B1  :1;
                             1549 ; 104  |    unsigned int B2  :1;
                             1550 ; 105  |    unsigned int B3  :1;
                             1551 ; 106  |    unsigned int B4  :1;
                             1552 ; 107  |    unsigned int B5  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  26

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1553 ; 108  |    unsigned int B6  :1;
                             1554 ; 109  |    unsigned int B7  :1;
                             1555 ; 110  |    unsigned int B8  :1;
                             1556 ; 111  |    unsigned int B9  :1;
                             1557 ; 112  |    unsigned int B10 :1;
                             1558 ; 113  |    unsigned int B11 :1;
                             1559 ; 114  |    unsigned int B12 :1;
                             1560 ; 115  |    unsigned int B13 :1;
                             1561 ; 116  |    unsigned int B14 :1;
                             1562 ; 117  |    unsigned int B15 :1;
                             1563 ; 118  |    unsigned int B16 :1;
                             1564 ; 119  |    unsigned int B17 :1;
                             1565 ; 120  |    unsigned int B18 :1;
                             1566 ; 121  |    unsigned int B19 :1;
                             1567 ; 122  |    unsigned int B20 :1;
                             1568 ; 123  |    unsigned int B21 :1;
                             1569 ; 124  |    unsigned int B22 :1;
                             1570 ; 125  |    unsigned int B23 :1;
                             1571 ; 126  |};
                             1572 ; 127  |
                             1573 ; 128  |union BitInt {
                             1574 ; 129  |        struct Bitfield B;
                             1575 ; 130  |        int        I;
                             1576 ; 131  |};
                             1577 ; 132  |
                             1578 ; 133  |#define MAX_MSG_LENGTH 10
                             1579 ; 134  |struct CMessage
                             1580 ; 135  |{
                             1581 ; 136  |        unsigned int m_uLength;
                             1582 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             1583 ; 138  |};
                             1584 ; 139  |
                             1585 ; 140  |typedef struct {
                             1586 ; 141  |    WORD m_wLength;
                             1587 ; 142  |    WORD m_wMessage;
                             1588 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             1589 ; 144  |} Message;
                             1590 ; 145  |
                             1591 ; 146  |struct MessageQueueDescriptor
                             1592 ; 147  |{
                             1593 ; 148  |        int *m_pBase;
                             1594 ; 149  |        int m_iModulo;
                             1595 ; 150  |        int m_iSize;
                             1596 ; 151  |        int *m_pHead;
                             1597 ; 152  |        int *m_pTail;
                             1598 ; 153  |};
                             1599 ; 154  |
                             1600 ; 155  |struct ModuleEntry
                             1601 ; 156  |{
                             1602 ; 157  |    int m_iSignaledEventMask;
                             1603 ; 158  |    int m_iWaitEventMask;
                             1604 ; 159  |    int m_iResourceOfCode;
                             1605 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             1606 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             1607 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             1608 ; 163  |    int m_uTimeOutHigh;
                             1609 ; 164  |    int m_uTimeOutLow;
                             1610 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             1611 ; 166  |};
                             1612 ; 167  |
                             1613 ; 168  |union WaitMask{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  27

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1614 ; 169  |    struct B{
                             1615 ; 170  |        unsigned int m_bNone     :1;
                             1616 ; 171  |        unsigned int m_bMessage  :1;
                             1617 ; 172  |        unsigned int m_bTimer    :1;
                             1618 ; 173  |        unsigned int m_bButton   :1;
                             1619 ; 174  |    } B;
                             1620 ; 175  |    int I;
                             1621 ; 176  |} ;
                             1622 ; 177  |
                             1623 ; 178  |
                             1624 ; 179  |struct Button {
                             1625 ; 180  |        WORD wButtonEvent;
                             1626 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             1627 ; 182  |};
                             1628 ; 183  |
                             1629 ; 184  |struct Message {
                             1630 ; 185  |        WORD wMsgLength;
                             1631 ; 186  |        WORD wMsgCommand;
                             1632 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             1633 ; 188  |};
                             1634 ; 189  |
                             1635 ; 190  |union EventTypes {
                             1636 ; 191  |        struct CMessage msg;
                             1637 ; 192  |        struct Button Button ;
                             1638 ; 193  |        struct Message Message;
                             1639 ; 194  |};
                             1640 ; 195  |
                             1641 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             1642 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             1643 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             1644 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             1645 ; 200  |
                             1646 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             1647 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             1648 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             1649 ; 204  |
                             1650 ; 205  |#if DEBUG
                             1651 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             1652 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             1653 ; 208  |#else 
                             1654 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             1655 ; 210  |#define DebugBuildAssert(x)    
                             1656 ; 211  |#endif
                             1657 ; 212  |
                             1658 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             1659 ; 214  |//  #pragma asm
                             1660 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             1661 ; 216  |//  #pragma endasm
                             1662 ; 217  |
                             1663 ; 218  |
                             1664 ; 219  |#ifdef COLOR_262K
                             1665 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             1666 ; 221  |#elif defined(COLOR_65K)
                             1667 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             1668 ; 223  |#else
                             1669 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             1670 ; 225  |#endif
                             1671 ; 226  |    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  28

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1672 ; 227  |#endif // #ifndef _TYPES_H
                             1673 
                             1675 
                             1676 ; 7    |
                             1677 ; 8    |
                             1678 ; 9    |
                             1679 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1680 ; 11   |
                             1681 ; 12   |//   SYSTEM STMP Registers 
                             1682 ; 13   |//      Last Edited 7.17.2003 M. Henson
                             1683 ; 14   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             1684 ; 15   |
                             1685 ; 16   |#define HW_CODEC_BASEADDR (0xFA00)
                             1686 ; 17   |
                             1687 ; 18   |
                             1688 ; 19   |
                             1689 ; 20   |
                             1690 ; 21   |
                             1691 ; 22   |
                             1692 ; 23   |/////////////////////////////////////////////////////////////////////////////////
                             1693 ; 24   |//   Headphone Control Register (HW_HPCTRL) Bit Definitions
                             1694 ; 25   |#define HW_HPCTRL_TESTIALL_BITPOS 0
                             1695 ; 26   |#define HW_HPCTRL_TESTI1_BITPOS 2
                             1696 ; 27   |#define HW_HPCTRL_POP0_BITPOS 4
                             1697 ; 28   |#define HW_HPCTRL_POP1_BITPOS 5
                             1698 ; 29   |#define HW_HPCTRL_POP2_BITPOS 6
                             1699 ; 30   |#define HW_HPCTRL_RSVD0_BITPOS 7
                             1700 ; 31   |#define HW_HPCTRL_HPPWD_BITPOS 8
                             1701 ; 32   |#define HW_HPCTRL_HPCLASSAB_BITPOS 9
                             1702 ; 33   |#define HW_HPCTRL_CAPLESS_BITPOS 10
                             1703 ; 34   |#define HW_HPCTRL_RSRVD1_BITPOS 11
                             1704 ; 35   |#define HW_HPCTRL_SHORTMODE_LR_BITPOS 12
                             1705 ; 36   |#define HW_HPCTRL_SHORTMODE_CM_BITPOS 14
                             1706 ; 37   |#define HW_HPCTRL_SHORT_LVLADJ_BITPOS 16
                             1707 ; 38   |#define HW_HPCTRL_RSRVD2_BITPOS 19
                             1708 ; 39   |#define HW_HPCTRL_CHOP_CLK_BITPOS 20
                             1709 ; 40   |#define HW_HPCTRL_SHORT_LR_BITPOS 22
                             1710 ; 41   |#define HW_HPCTRL_SHORT_CM_BITPOS 23
                             1711 ; 42   |
                             1712 ; 43   |#define HW_HPCTRL_TESTIALL_WIDTH 2
                             1713 ; 44   |#define HW_HPCTRL_TESTI1_WIDTH 2
                             1714 ; 45   |#define HW_HPCTRL_POP0_WIDTH 1
                             1715 ; 46   |#define HW_HPCTRL_POP1_WIDTH 1
                             1716 ; 47   |#define HW_HPCTRL_POP2_WIDTH 1
                             1717 ; 48   |#define HW_HPCTRL_RSVD0_WIDTH 1
                             1718 ; 49   |#define HW_HPCTRL_HPPWD_WIDTH 1
                             1719 ; 50   |#define HW_HPCTRL_HPCLASSAB_WIDTH 1
                             1720 ; 51   |#define HW_HPCTRL_CAPLESS_WIDTH 1
                             1721 ; 52   |#define HW_HPCTRL_RSRVD1_WIDTH 1
                             1722 ; 53   |#define HW_HPCTRL_SHORTMODE_LR_WIDTH 2
                             1723 ; 54   |#define HW_HPCTRL_SHORTMODE_CM_WIDTH 2
                             1724 ; 55   |#define HW_HPCTRL_SHORT_LVLADJ_WIDTH 3
                             1725 ; 56   |#define HW_HPCTRL_RSRVD2_WIDTH 1
                             1726 ; 57   |#define HW_HPCTRL_CHOP_CLK_WIDTH 2
                             1727 ; 58   |#define HW_HPCTRL_SHORT_LR_WIDTH 1
                             1728 ; 59   |#define HW_HPCTRL_SHORT_CM_WIDTH 1
                             1729 ; 60   |
                             1730 ; 61   |#define HW_HPCTRL_POP_SETMASK 0x7<<HW_HPCTRL_POP0_BITPOS
                             1731 ; 62   |#define HW_HPCTRL_POP_CLRMASK ~(WORD)HW_HPCTRL_POP_SETMASK
                             1732 ; 63   |
                             1733 ; 64   |#define HW_HPCTRL_SHORT_LVLADJ_0_25X_SETMASK 0x3<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1734 ; 65   |#define HW_HPCTRL_SHORT_LVLADJ_0_50X_SETMASK 0x2<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  29

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1735 ; 66   |#define HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK 0x1<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1736 ; 67   |#define HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK 0x0<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1737 ; 68   |#define HW_HPCTRL_SHORT_LVLADJ_1_25X_SETMASK 0x4<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1738 ; 69   |#define HW_HPCTRL_SHORT_LVLADJ_1_50X_SETMASK 0x5<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1739 ; 70   |#define HW_HPCTRL_SHORT_LVLADJ_1_75X_SETMASK 0x6<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1740 ; 71   |#define HW_HPCTRL_SHORT_LVLADJ_2_00X_SETMASK 0x7<<HW_HPCTRL_SHORT_LVLADJ_BITPOS
                             1741 ; 72   |
                             1742 ; 73   |#if defined(CAPLESS_HP)
                             1743 ; 74   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_0_75X_SETMASK
                             1744 ; 75   |#else 
                             1745 ; 76   |#define HP_SHORT_TRIP_POINT HW_HPCTRL_SHORT_LVLADJ_1_00X_SETMASK
                             1746 ; 77   |#endif
                             1747 ; 78   |
                             1748 ; 79   |// Headphone control register
                             1749 ; 80   |#define HW_HPCTRL (*(volatile hpctrl_type _X*)(HW_GLUE_BASEADDR+21))
                             1750 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             1751 ; 82   |//   Headphone Conrol Volume Register (HW_HPCTRL) Bit Definitions
                             1752 ; 83   |typedef union               
                             1753 ; 84   |{
                             1754 ; 85   |    struct {
                             1755 ; 86   |        unsigned TESTIALL :HW_HPCTRL_TESTIALL_WIDTH;
                             1756 ; 87   |        unsigned TESTI1 :HW_HPCTRL_TESTI1_WIDTH;
                             1757 ; 88   |        unsigned POP0 :HW_HPCTRL_POP0_WIDTH; 
                             1758 ; 89   |        unsigned POP1 :HW_HPCTRL_POP1_WIDTH; 
                             1759 ; 90   |        unsigned POP2 :HW_HPCTRL_POP2_WIDTH; 
                             1760 ; 91   |        unsigned RSVD0 :HW_HPCTRL_RSVD0_WIDTH;
                             1761 ; 92   |        unsigned HPPWD :HW_HPCTRL_HPPWD_WIDTH;
                             1762 ; 93   |        unsigned HPCLASSAB :HW_HPCTRL_HPCLASSAB_WIDTH;
                             1763 ; 94   |        unsigned CAPLESS :HW_HPCTRL_CAPLESS_WIDTH; 
                             1764 ; 95   |        unsigned RSRVD1 :HW_HPCTRL_RSRVD1_WIDTH;
                             1765 ; 96   |        unsigned SHORTMODE_LR :HW_HPCTRL_SHORTMODE_LR_WIDTH; 
                             1766 ; 97   |        unsigned SHORTMODE_CM :HW_HPCTRL_SHORTMODE_CM_WIDTH;
                             1767 ; 98   |        unsigned SHORT_LVLADJ :HW_HPCTRL_SHORT_LVLADJ_WIDTH; 
                             1768 ; 99   |        unsigned RSRVD2 :HW_HPCTRL_RSRVD2_WIDTH;
                             1769 ; 100  |        unsigned CHOP_CLK :HW_HPCTRL_CHOP_CLK_WIDTH; 
                             1770 ; 101  |        unsigned SHORT_LR :HW_HPCTRL_SHORT_LR_WIDTH;
                             1771 ; 102  |        unsigned SHORT_CM :HW_HPCTRL_SHORT_CM_WIDTH;
                             1772 ; 103  |    } B;
                             1773 ; 104  |    int I;
                             1774 ; 105  |    unsigned int U;
                             1775 ; 106  |} hpctrl_type;
                             1776 ; 107  |// Headphone control short mode 2 bit values for above short bitfield.
                             1777 ; 108  |#define HW_AUTO_HEADAMP_SHUTDOWN_HOLD_RESET   0
                             1778 ; 109  |#define HW_AUTO_HEADAMP_SHUTDOWN_EN           1 
                             1779 ; 110  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIS          2
                             1780 ; 111  |#define HW_AUTO_HEADAMP_SHUTDOWN_DIRECT       3
                             1781 ; 112  |
                             1782 ; 113  |
                             1783 ; 114  |/////////////////////////////////////////////////////////////////////////////////
                             1784 ; 115  |/////////////////////////////////////////////////////////////////////////////////
                             1785 ; 116  |/////////////////////////////////////////////////////////////////////////////////
                             1786 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                             1787 ; 118  |///////   MIXER REGISTERS ///////////////////////////////////////////////////////
                             1788 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             1789 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             1790 ; 121  |/////////////////////////////////////////////////////////////////////////////////
                             1791 ; 122  |
                             1792 ; 123  |
                             1793 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             1794 ; 125  |//   Codec/Mixer Test Register (HW_MIXTBR) Bit Definitions 
                             1795 ; 126  |#define HW_MIXTBR_INV_USB_CLK_BITPOS 0
                             1796 ; 127  |#define HW_MIXTBR_USB_DFF_BYPASS_BITPOS 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  30

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1797 ; 128  |#define HW_MIXTBR_HOLD_GND_BITPOS 2
                             1798 ; 129  |#define HW_MIXTBR_ACKI_BITPOS 3
                             1799 ; 130  |#define HW_MIXTBR_ASD2X_BITPOS 4
                             1800 ; 131  |#define HW_MIXTBR_PCPCU_BITPOS 5
                             1801 ; 132  |#define HW_MIXTBR_PCPCD_BITPOS 6
                             1802 ; 133  |#define HW_MIXTBR_DCKI_BITPOS 7
                             1803 ; 134  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS 8
                             1804 ; 135  |#define HW_MIXTBR_PSRN_BITPOS 9
                             1805 ; 136  |#define HW_MIXTBR_FX2_BITPOS 10
                             1806 ; 137  |#define HW_MIXTBR_VCOS_BITPOS 11
                             1807 ; 138  |#define HW_MIXTBR_XBCO_BITPOS 12
                             1808 ; 139  |#define HW_MIXTBR_XBGC_BITPOS 13
                             1809 ; 140  |#define HW_MIXTBR_ADTHD_BITPOS 14
                             1810 ; 141  |#define HW_MIXTBR_MICBIAS_LSBITPOS 15
                             1811 ; 142  |#define HW_MIXTBR_PWDADC_BITPOS 16
                             1812 ; 143  |#define HW_MIXTBR_MICBIAS1_BITPOS 17
                             1813 ; 144  |#define HW_MIXTBR_EZD_BITPOS 18
                             1814 ; 145  |#define HW_MIXTBR_DZCDA_BITPOS 19
                             1815 ; 146  |#define HW_MIXTBR_DZCFM_BITPOS 20
                             1816 ; 147  |#define HW_MIXTBR_DZCLI_BITPOS 21
                             1817 ; 148  |#define HW_MIXTBR_DZCMI_BITPOS 22
                             1818 ; 149  |#define HW_MIXTBR_DZCMA_BITPOS 23
                             1819 ; 150  |
                             1820 ; 151  |#define HW_MIXTBR_INV_USB_CLK_WIDTH (1)
                             1821 ; 152  |#define HW_MIXTBR_USB_DFF_BYPASS_WIDTH (1)
                             1822 ; 153  |#define HW_MIXTBR_HOLD_GND_WIDTH (1)
                             1823 ; 154  |#define HW_MIXTBR_ACKI_WIDTH (1)
                             1824 ; 155  |#define HW_MIXTBR_ASD2X_WIDTH (1)
                             1825 ; 156  |#define HW_MIXTBR_PCPCU_WIDTH (1)
                             1826 ; 157  |#define HW_MIXTBR_PCPCD_WIDTH (1)
                             1827 ; 158  |#define HW_MIXTBR_DCKI_WIDTH (1)
                             1828 ; 159  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_WIDTH (1)
                             1829 ; 160  |#define HW_MIXTBR_PSRN_WIDTH (1)
                             1830 ; 161  |#define HW_MIXTBR_FX2_WIDTH (1)
                             1831 ; 162  |#define HW_MIXTBR_VCOS_WIDTH (1)
                             1832 ; 163  |#define HW_MIXTBR_XBCO_WIDTH (1)
                             1833 ; 164  |#define HW_MIXTBR_XBGC_WIDTH (1)
                             1834 ; 165  |#define HW_MIXTBR_ADTHD_WIDTH (1)
                             1835 ; 166  |#define HW_MIXTBR_MICBIAS_LSWIDTH (1)
                             1836 ; 167  |#define HW_MIXTBR_PWDADC_WIDTH (1)
                             1837 ; 168  |#define HW_MIXTBR_MICBIAS1_WIDTH (1)
                             1838 ; 169  |#define HW_MIXTBR_EZD_WIDTH (1)
                             1839 ; 170  |#define HW_MIXTBR_DZCDA_WIDTH (1)
                             1840 ; 171  |#define HW_MIXTBR_DZCFM_WIDTH (1)
                             1841 ; 172  |#define HW_MIXTBR_DZCLI_WIDTH (1)
                             1842 ; 173  |#define HW_MIXTBR_DZCMI_WIDTH (1)
                             1843 ; 174  |#define HW_MIXTBR_DZCMA_WIDTH (1)
                             1844 ; 175  |
                             1845 ; 176  |
                             1846 ; 177  |#define HW_MIXTBR_INV_USB_CLK_SETMASK 1<<HW_MIXTBR_INV_USB_CLK_BITPOS
                             1847 ; 178  |#define HW_MIXTBR_USB_DFF_BYPASS_SETMASK 1<<HW_MIXTBR_USB_DFF_BYPASS_BITPOS
                             1848 ; 179  |#define HW_MIXTBR_HOLD_GND_SETMASK 1<<HW_MIXTBR_HOLD_GND_BITPOS
                             1849 ; 180  |#define HW_MIXTBR_ACKI_SETMASK 1<<HW_MIXTBR_ACKI_BITPOS
                             1850 ; 181  |#define HW_MIXTBR_ASD2X_SETMASK 1<<HW_MIXTBR_ASD2X_BITPOS
                             1851 ; 182  |#define HW_MIXTBR_PCPCU_SETMASK 1<<HW_MIXTBR_PCPCU_BITPOS
                             1852 ; 183  |#define HW_MIXTBR_PCPCD_SETMASK 1<<HW_MIXTBR_PCPCD_BITPOS
                             1853 ; 184  |#define HW_MIXTBR_DCKI_SETMASK 1<<HW_MIXTBR_DCKI_BITPOS
                             1854 ; 185  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK 1<<HW_MIXTBR_MIC_BIAS_OUT_SEL_BITPOS
                             1855 ; 186  |#define HW_MIXTBR_PSRN_SETMASK 1<<HW_MIXTBR_PSRN_BITPOS
                             1856 ; 187  |#define HW_MIXTBR_FX2_SETMASK 1<<HW_MIXTBR_FX2_BITPOS
                             1857 ; 188  |#define HW_MIXTBR_VCOS_SETMASK 1<<HW_MIXTBR_VCOS_BITPOS
                             1858 ; 189  |#define HW_MIXTBR_XBCO_SETMASK 1<<HW_MIXTBR_XBCO_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  31

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1859 ; 190  |#define HW_MIXTBR_XBGC_SETMASK 1<<HW_MIXTBR_XBGC_BITPOS
                             1860 ; 191  |#define HW_MIXTBR_ADTHD_SETMASK 1<<HW_MIXTBR_ADTHD_BITPOS
                             1861 ; 192  |#define HW_MIXTBR_MICBIAS_LSSETMASK 1<<HW_MIXTBR_MICBIAS_LSBITPOS
                             1862 ; 193  |#define HW_MIXTBR_PWDADC_SETMASK 1<<HW_MIXTBR_PWDADC_BITPOS
                             1863 ; 194  |#define HW_MIXTBR_MICBIAS1_SETMASK 1<<HW_MIXTBR_MICBIAS1_BITPOS
                             1864 ; 195  |#define HW_MIXTBR_EZD_SETMASK 1<<HW_MIXTBR_EZD_BITPOS
                             1865 ; 196  |#define HW_MIXTBR_DZCDA_SETMASK 1<<HW_MIXTBR_DZCDA_BITPOS
                             1866 ; 197  |#define HW_MIXTBR_DZCFM_SETMASK 1<<HW_MIXTBR_DZCFM_BITPOS
                             1867 ; 198  |#define HW_MIXTBR_DZCLI_SETMASK 1<<HW_MIXTBR_DZCLI_BITPOS
                             1868 ; 199  |#define HW_MIXTBR_DZCMI_SETMASK 1<<HW_MIXTBR_DZCMI_BITPOS
                             1869 ; 200  |#define HW_MIXTBR_DZCMA_SETMASK 1<<HW_MIXTBR_DZCMA_BITPOS
                             1870 ; 201  |
                             1871 ; 202  |#define HW_MIXTBR_INV_USB_CLK_CLRMASK ~(WORD)HW_MIXTBR_INV_USB_CLK_SETMASK
                             1872 ; 203  |#define HW_MIXTBR_USB_DFF_BYPASS_CLRMASK ~(WORD)HW_MIXTBR_USB_DFF_BYPASS_SETMASK
                             1873 ; 204  |#define HW_MIXTBR_HOLD_GND_CLRMASK ~(WORD)HW_MIXTBR_HOLD_GND_SETMASK
                             1874 ; 205  |#define HW_MIXTBR_ACKI_CLRMASK ~(WORD)HW_MIXTBR_ACKI_SETMASK
                             1875 ; 206  |#define HW_MIXTBR_ASD2X_CLRMASK ~(WORD)HW_MIXTBR_ASD2X_SETMASK
                             1876 ; 207  |#define HW_MIXTBR_PCPCU_CLRMASK ~(WORD)HW_MIXTBR_PCPCU_SETMASK
                             1877 ; 208  |#define HW_MIXTBR_PCPCD_CLRMASK ~(WORD)HW_MIXTBR_PCPCD_SETMASK
                             1878 ; 209  |#define HW_MIXTBR_DCKI_CLRMASK ~(WORD)HW_MIXTBR_DCKI_SETMASK
                             1879 ; 210  |#define HW_MIXTBR_MIC_BIAS_OUT_SEL_CLRMASK ~(WORD)HW_MIXTBR_MIC_BIAS_OUT_SEL_SETMASK
                             1880 ; 211  |#define HW_MIXTBR_PSRN_CLRMASK ~(WORD)HW_MIXTBR_PSRN_SETMASK
                             1881 ; 212  |#define HW_MIXTBR_FX2_CLRMASK ~(WORD)HW_MIXTBR_FX2_SETMASK
                             1882 ; 213  |#define HW_MIXTBR_VCOS_CLRMASK ~(WORD)HW_MIXTBR_VCOS_SETMASK
                             1883 ; 214  |#define HW_MIXTBR_XBCO_CLRMASK ~(WORD)HW_MIXTBR_XBCO_SETMASK
                             1884 ; 215  |#define HW_MIXTBR_XBGC_CLRMASK ~(WORD)HW_MIXTBR_XBGC_SETMASK
                             1885 ; 216  |#define HW_MIXTBR_ADTHD_CLRMASK ~(WORD)HW_MIXTBR_ADTHD_SETMASK
                             1886 ; 217  |#define HW_MIXTBR_MICBIAS_LSCLRMASK ~(WORD)HW_MIXTBR_MICBIAS_LSSETMASK
                             1887 ; 218  |#define HW_MIXTBR_PWDADC_CLRMASK ~(WORD)HW_MIXTBR_PWDADC_SETMASK
                             1888 ; 219  |#define HW_MIXTBR_MICBIAS1_CLRMASK ~(WORD)HW_MIXTBR_MICBIAS1_SETMASK
                             1889 ; 220  |#define HW_MIXTBR_EZD_CLRMASK ~(WORD)HW_MIXTBR_EZD_SETMASK
                             1890 ; 221  |#define HW_MIXTBR_DZCDA_CLRMASK ~(WORD)HW_MIXTBR_DZCDA_SETMASK
                             1891 ; 222  |#define HW_MIXTBR_DZCFM_CLRMASK ~(WORD)HW_MIXTBR_DZCFM_SETMASK
                             1892 ; 223  |#define HW_MIXTBR_DZCLI_CLRMASK ~(WORD)HW_MIXTBR_DZCLI_SETMASK
                             1893 ; 224  |#define HW_MIXTBR_DZCMI_CLRMASK ~(WORD)HW_MIXTBR_DZCMI_SETMASK
                             1894 ; 225  |#define HW_MIXTBR_DZCMA_CLRMASK ~(WORD)HW_MIXTBR_DZCMA_SETMASK
                             1895 ; 226  |
                             1896 ; 227  |typedef union               
                             1897 ; 228  |{
                             1898 ; 229  |    struct {
                             1899 ; 230  |        int INV_USB_CLK            : 1;
                             1900 ; 231  |        int USB_DFF_BYPASS         : 1;
                             1901 ; 232  |        int HOLD_GND               : 1;
                             1902 ; 233  |        int ACKI                   : 1;
                             1903 ; 234  |        int ASD2X                  : 1;
                             1904 ; 235  |        int PCPCU                  : 1;
                             1905 ; 236  |        int PCPCD                  : 1;
                             1906 ; 237  |        int DCKI                   : 1;
                             1907 ; 238  |        int MIC_BIAS_OUT_SEL       : 1;
                             1908 ; 239  |        int PSRN                   : 1;
                             1909 ; 240  |        int FX2                    : 1;
                             1910 ; 241  |        int VCOS                   : 1;
                             1911 ; 242  |        int XBCO                   : 1;
                             1912 ; 243  |        int XBGC                   : 1;
                             1913 ; 244  |        int ADTHD                  : 1;
                             1914 ; 245  |        int MICBIAS_LSBITPOS       : 1;
                             1915 ; 246  |        int PWDADC                 : 1;
                             1916 ; 247  |        int MICBIAS1               : 1;
                             1917 ; 248  |        int EZD                    : 1;
                             1918 ; 249  |        int DZCDA                  : 1;
                             1919 ; 250  |        int DZCFM                  : 1;
                             1920 ; 251  |        int DZCLI                  : 1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  32

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1921 ; 252  |        int DZCMI                  : 1;
                             1922 ; 253  |        int DZCMA                  : 1;
                             1923 ; 254  |    } B;
                             1924 ; 255  |    int I;
                             1925 ; 256  |    unsigned int U;
                             1926 ; 257  |} mix_tbr_type;
                             1927 ; 258  |#define HW_MIXTBR      (*(volatile mix_tbr_type _X*) (HW_CODEC_BASEADDR+3))
                             1928 ; 259  |
                             1929 ; 260  |
                             1930 ; 261  |/////////////////////////////////////////////////////////////////////////////////
                             1931 ; 262  |//   Generic Volume Register (HW_MIXMASTERVR) Bit Definitions
                             1932 ; 263  |#define HW_MIXVOLUMER_MR_BITPOS 0
                             1933 ; 264  |#define HW_MIXVOLUMER_ML_BITPOS 8
                             1934 ; 265  |#define HW_MIXVOLUMER_MUTE_BITPOS 15
                             1935 ; 266  |
                             1936 ; 267  |#define HW_MIXVOLUMER_MR_WIDTH (5)
                             1937 ; 268  |#define HW_MIXVOLUMER_ML_WIDTH (5)
                             1938 ; 269  |#define HW_MIXVOLUMER_MUTE_WIDTH 1
                             1939 ; 270  |
                             1940 ; 271  |#define HW_MIXVOLUMER_MR_SETMASK 0x1F<<HW_MIXVOLUMER_MR_BITPOS
                             1941 ; 272  |#define HW_MIXVOLUMER_ML_SETMASK 0x1F<<HW_MIXVOLUMER_ML_BITPOS
                             1942 ; 273  |#define HW_MIXVOLUMER_MUTE_SETMASK 1<<HW_MIXVOLUMER_MUTE_BITPOS
                             1943 ; 274  |
                             1944 ; 275  |#define HW_MIXVOLUMER_MR_CLRMASK ~(WORD)HW_MIXVOLUMER_MR_SETMASK
                             1945 ; 276  |#define HW_MIXVOLUMER_ML_CLRMASK ~(WORD)HW_MIXVOLUMER_ML_SETMASK
                             1946 ; 277  |#define HW_MIXVOLUMER_MUTE_CLRMASK ~(WORD)HW_MIXVOLUMER_MUTE_SETMASK
                             1947 ; 278  |
                             1948 ; 279  |#define HW_MIXVOLUMER_ML_PLUS_12P0_SETMASK 0<<HW_MIXVOLUMER_ML_BITPOS
                             1949 ; 280  |#define HW_MIXVOLUMER_ML_PLUS_10P5_SETMASK 1<<HW_MIXVOLUMER_ML_BITPOS
                             1950 ; 281  |#define HW_MIXVOLUMER_ML_PLUS_09P0_SETMASK 2<<HW_MIXVOLUMER_ML_BITPOS
                             1951 ; 282  |#define HW_MIXVOLUMER_ML_PLUS_07P5_SETMASK 3<<HW_MIXVOLUMER_ML_BITPOS
                             1952 ; 283  |#define HW_MIXVOLUMER_ML_PLUS_06P0_SETMASK 4<<HW_MIXVOLUMER_ML_BITPOS
                             1953 ; 284  |#define HW_MIXVOLUMER_ML_PLUS_04P5_SETMASK 5<<HW_MIXVOLUMER_ML_BITPOS
                             1954 ; 285  |#define HW_MIXVOLUMER_ML_PLUS_03P0_SETMASK 6<<HW_MIXVOLUMER_ML_BITPOS
                             1955 ; 286  |#define HW_MIXVOLUMER_ML_PLUS_01P5_SETMASK 7<<HW_MIXVOLUMER_ML_BITPOS
                             1956 ; 287  |#define HW_MIXVOLUMER_ML_ZERO_SETMASK 8<<HW_MIXVOLUMER_ML_BITPOS
                             1957 ; 288  |#define HW_MIXVOLUMER_ML_MINUS_01P5_SETMASK 9<<HW_MIXVOLUMER_ML_BITPOS
                             1958 ; 289  |#define HW_MIXVOLUMER_ML_MINUS_03P0_SETMASK 10<<HW_MIXVOLUMER_ML_BITPOS
                             1959 ; 290  |#define HW_MIXVOLUMER_ML_MINUS_04P5_SETMASK 11<<HW_MIXVOLUMER_ML_BITPOS
                             1960 ; 291  |#define HW_MIXVOLUMER_ML_MINUS_06P0_SETMASK 12<<HW_MIXVOLUMER_ML_BITPOS
                             1961 ; 292  |#define HW_MIXVOLUMER_ML_MINUS_07P5_SETMASK 13<<HW_MIXVOLUMER_ML_BITPOS
                             1962 ; 293  |#define HW_MIXVOLUMER_ML_MINUS_09P0_SETMASK 14<<HW_MIXVOLUMER_ML_BITPOS
                             1963 ; 294  |#define HW_MIXVOLUMER_ML_MINUS_10P5_SETMASK 15<<HW_MIXVOLUMER_ML_BITPOS
                             1964 ; 295  |#define HW_MIXVOLUMER_ML_MINUS_12P0_SETMASK 16<<HW_MIXVOLUMER_ML_BITPOS
                             1965 ; 296  |#define HW_MIXVOLUMER_ML_MINUS_13P5_SETMASK 17<<HW_MIXVOLUMER_ML_BITPOS
                             1966 ; 297  |#define HW_MIXVOLUMER_ML_MINUS_15P0_SETMASK 18<<HW_MIXVOLUMER_ML_BITPOS
                             1967 ; 298  |#define HW_MIXVOLUMER_ML_MINUS_16P5_SETMASK 19<<HW_MIXVOLUMER_ML_BITPOS
                             1968 ; 299  |#define HW_MIXVOLUMER_ML_MINUS_18P0_SETMASK 20<<HW_MIXVOLUMER_ML_BITPOS
                             1969 ; 300  |#define HW_MIXVOLUMER_ML_MINUS_19P5_SETMASK 21<<HW_MIXVOLUMER_ML_BITPOS
                             1970 ; 301  |#define HW_MIXVOLUMER_ML_MINUS_21P0_SETMASK 22<<HW_MIXVOLUMER_ML_BITPOS
                             1971 ; 302  |#define HW_MIXVOLUMER_ML_MINUS_22P5_SETMASK 23<<HW_MIXVOLUMER_ML_BITPOS
                             1972 ; 303  |#define HW_MIXVOLUMER_ML_MINUS_24P0_SETMASK 24<<HW_MIXVOLUMER_ML_BITPOS
                             1973 ; 304  |#define HW_MIXVOLUMER_ML_MINUS_25P5_SETMASK 25<<HW_MIXVOLUMER_ML_BITPOS
                             1974 ; 305  |#define HW_MIXVOLUMER_ML_MINUS_27P0_SETMASK 26<<HW_MIXVOLUMER_ML_BITPOS
                             1975 ; 306  |#define HW_MIXVOLUMER_ML_MINUS_28P5_SETMASK 27<<HW_MIXVOLUMER_ML_BITPOS
                             1976 ; 307  |#define HW_MIXVOLUMER_ML_MINUS_30P0_SETMASK 28<<HW_MIXVOLUMER_ML_BITPOS
                             1977 ; 308  |#define HW_MIXVOLUMER_ML_MINUS_31P5_SETMASK 29<<HW_MIXVOLUMER_ML_BITPOS
                             1978 ; 309  |#define HW_MIXVOLUMER_ML_MINUS_33P0_SETMASK 30<<HW_MIXVOLUMER_ML_BITPOS
                             1979 ; 310  |#define HW_MIXVOLUMER_ML_MINUS_34P5_SETMASK 31<<HW_MIXVOLUMER_ML_BITPOS
                             1980 ; 311  |
                             1981 ; 312  |#define HW_MIXVOLUMER_MR_PLUS_12P0_SETMASK 0
                             1982 ; 313  |#define HW_MIXVOLUMER_MR_PLUS_10P5_SETMASK 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  33

M:ADDR CODE           CYCLES LINE SOURCELINE
                             1983 ; 314  |#define HW_MIXVOLUMER_MR_PLUS_09P0_SETMASK 2
                             1984 ; 315  |#define HW_MIXVOLUMER_MR_PLUS_07P5_SETMASK 3
                             1985 ; 316  |#define HW_MIXVOLUMER_MR_PLUS_06P0_SETMASK 4
                             1986 ; 317  |#define HW_MIXVOLUMER_MR_PLUS_04P5_SETMASK 5
                             1987 ; 318  |#define HW_MIXVOLUMER_MR_PLUS_03P0_SETMASK 6
                             1988 ; 319  |#define HW_MIXVOLUMER_MR_PLUS_01P5_SETMASK 7
                             1989 ; 320  |#define HW_MIXVOLUMER_MR_ZERO_SETMASK 8
                             1990 ; 321  |#define HW_MIXVOLUMER_MR_MINUS_01P5_SETMASK 9
                             1991 ; 322  |#define HW_MIXVOLUMER_MR_MINUS_03P0_SETMASK 10
                             1992 ; 323  |#define HW_MIXVOLUMER_MR_MINUS_04P5_SETMASK 11
                             1993 ; 324  |#define HW_MIXVOLUMER_MR_MINUS_06P0_SETMASK 12
                             1994 ; 325  |#define HW_MIXVOLUMER_MR_MINUS_07P5_SETMASK 13
                             1995 ; 326  |#define HW_MIXVOLUMER_MR_MINUS_09P0_SETMASK 14
                             1996 ; 327  |#define HW_MIXVOLUMER_MR_MINUS_10P5_SETMASK 15
                             1997 ; 328  |#define HW_MIXVOLUMER_MR_MINUS_12P0_SETMASK 16
                             1998 ; 329  |#define HW_MIXVOLUMER_MR_MINUS_13P5_SETMASK 17
                             1999 ; 330  |#define HW_MIXVOLUMER_MR_MINUS_15P0_SETMASK 18
                             2000 ; 331  |#define HW_MIXVOLUMER_MR_MINUS_16P5_SETMASK 19
                             2001 ; 332  |#define HW_MIXVOLUMER_MR_MINUS_18P0_SETMASK 20
                             2002 ; 333  |#define HW_MIXVOLUMER_MR_MINUS_19P5_SETMASK 21
                             2003 ; 334  |#define HW_MIXVOLUMER_MR_MINUS_21P0_SETMASK 22
                             2004 ; 335  |#define HW_MIXVOLUMER_MR_MINUS_22P5_SETMASK 23
                             2005 ; 336  |#define HW_MIXVOLUMER_MR_MINUS_24P0_SETMASK 24
                             2006 ; 337  |#define HW_MIXVOLUMER_MR_MINUS_25P5_SETMASK 25
                             2007 ; 338  |#define HW_MIXVOLUMER_MR_MINUS_27P0_SETMASK 26
                             2008 ; 339  |#define HW_MIXVOLUMER_MR_MINUS_28P5_SETMASK 27
                             2009 ; 340  |#define HW_MIXVOLUMER_MR_MINUS_30P0_SETMASK 28
                             2010 ; 341  |#define HW_MIXVOLUMER_MR_MINUS_31P5_SETMASK 29
                             2011 ; 342  |#define HW_MIXVOLUMER_MR_MINUS_33P0_SETMASK 30
                             2012 ; 343  |#define HW_MIXVOLUMER_MR_MINUS_34P5_SETMASK 31
                             2013 ; 344  |
                             2014 ; 345  |/////////////////////////////////////////////////////////////////////////////////
                             2015 ; 346  |//   Mixer Master Volume Register (HW_MIXMASTERVR) Bit Definitions
                             2016 ; 347  |#define HW_MIXMASTERVR_MR_BITPOS 0
                             2017 ; 348  |#define HW_MIXMASTERVR_ML_BITPOS 8
                             2018 ; 349  |#define HW_MIXMASTERVR_MUTE_BITPOS 15
                             2019 ; 350  |
                             2020 ; 351  |#define HW_MIXMASTERVR_MR_WIDTH (5)
                             2021 ; 352  |#define HW_MIXMASTERVR_ML_WIDTH (5)
                             2022 ; 353  |#define HW_MIXMASTERVR_MUTE_WIDTH (1)
                             2023 ; 354  |
                             2024 ; 355  |#define HW_MIXMASTERVR_MR_SETMASK 0x1F<<HW_MIXMASTERVR_MR_BITPOS
                             2025 ; 356  |#define HW_MIXMASTERVR_ML_SETMASK 0x1F<<HW_MIXMASTERVR_ML_BITPOS
                             2026 ; 357  |#define HW_MIXMASTERVR_MUTE_SETMASK 1<<HW_MIXMASTERVR_MUTE_BITPOS
                             2027 ; 358  |
                             2028 ; 359  |#define HW_MIXMASTERVR_MR_CLRMASK ~(WORD)HW_MIXMASTERVR_MR_SETMASK
                             2029 ; 360  |#define HW_MIXMASTERVR_ML_CLRMASK ~(WORD)HW_MIXMASTERVR_ML_SETMASK
                             2030 ; 361  |#define HW_MIXMASTERVR_MUTE_CLRMASK ~(WORD)HW_MIXMASTERVR_MUTE_SETMASK
                             2031 ; 362  |
                             2032 ; 363  |
                             2033 ; 364  |typedef union               
                             2034 ; 365  |{
                             2035 ; 366  |    struct
                             2036 ; 367  |    {
                             2037 ; 368  |        unsigned MR :5;
                             2038 ; 369  |        int         :3;
                             2039 ; 370  |        unsigned ML :5;
                             2040 ; 371  |        int         :2;
                             2041 ; 372  |        int MUTE    :1;
                             2042 ; 373  |    } B;
                             2043 ; 374  |    int I;
                             2044 ; 375  |    unsigned int U;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  34

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2045 ; 376  |} mix_mastervr_type;
                             2046 ; 377  |#define HW_MIXMASTERVR (*(volatile mix_mastervr_type _X*) (HW_CODEC_BASEADDR+4))
                             2047 ; 378  |
                             2048 ; 379  |
                             2049 ; 380  |/////////////////////////////////////////////////////////////////////////////////
                             2050 ; 381  |//   Mixer Mic In Volume Register (HW_MIXMICINVR) Bit Definitions
                             2051 ; 382  |#define HW_MIXMICINVR_GN_BITPOS 0
                             2052 ; 383  |#define HW_MIXMICINVR_P20DB_BITPOS 6
                             2053 ; 384  |#define HW_MIXMICINVR_MUTE_BITPOS 15
                             2054 ; 385  |
                             2055 ; 386  |#define HW_MIXMICINVR_GN_WIDTH 5
                             2056 ; 387  |#define HW_MIXMICINVR_RSVD1_WIDTH 1
                             2057 ; 388  |#define HW_MIXMICINVR_P20DB_WIDTH 1
                             2058 ; 389  |#define HW_MIXMICINVR_RSVD2_WIDTH 8
                             2059 ; 390  |#define HW_MIXMICINVR_MUTE_WIDTH 1
                             2060 ; 391  |#define HW_MIXMICINVR_RSVD3_WIDTH 8
                             2061 ; 392  |
                             2062 ; 393  |#define HW_MIXMICINVR_GN_SETMASK 0x1F<<HW_MIXMICINVR_GN_BITPOS
                             2063 ; 394  |#define HW_MIXMICINVR_P20DB_SETMASK 1<<HW_MIXMICINVR_P20DB_BITPOS
                             2064 ; 395  |#define HW_MIXMICINVR_MUTE_SETMASK 1<<HW_MIXMICINVR_MUTE_BITPOS
                             2065 ; 396  |
                             2066 ; 397  |#define HW_MIXMICINVR_GN_CLRMASK ~(WORD)HW_MIXMICINVR_GN_SETMASK
                             2067 ; 398  |#define HW_MIXMICINVR_P20DB_CLRMASK ~(WORD)HW_MIXMICINVR_P20DB_SETMASK
                             2068 ; 399  |#define HW_MIXMICINVR_MUTE_CLRMASK ~(WORD)HW_MIXMICINVR_MUTE_SETMASK
                             2069 ; 400  |
                             2070 ; 401  |#define HW_MIXMICINVR_GN_PLUS_12P0_SETMASK 0
                             2071 ; 402  |#define HW_MIXMICINVR_GN_PLUS_10P5_SETMASK 1
                             2072 ; 403  |#define HW_MIXMICINVR_GN_PLUS_09P0_SETMASK 2
                             2073 ; 404  |#define HW_MIXMICINVR_GN_PLUS_07P5_SETMASK 3
                             2074 ; 405  |#define HW_MIXMICINVR_GN_PLUS_06P0_SETMASK 4
                             2075 ; 406  |#define HW_MIXMICINVR_GN_PLUS_04P5_SETMASK 5
                             2076 ; 407  |#define HW_MIXMICINVR_GN_PLUS_03P0_SETMASK 6
                             2077 ; 408  |#define HW_MIXMICINVR_GN_PLUS_01P5_SETMASK 7
                             2078 ; 409  |#define HW_MIXMICINVR_GN_ZERO_SETMASK 8
                             2079 ; 410  |#define HW_MIXMICINVR_GN_MINUS_01P5_SETMASK 9
                             2080 ; 411  |#define HW_MIXMICINVR_GN_MINUS_03P0_SETMASK 10
                             2081 ; 412  |#define HW_MIXMICINVR_GN_MINUS_04P5_SETMASK 11
                             2082 ; 413  |#define HW_MIXMICINVR_GN_MINUS_06P0_SETMASK 12
                             2083 ; 414  |#define HW_MIXMICINVR_GN_MINUS_07P5_SETMASK 13
                             2084 ; 415  |#define HW_MIXMICINVR_GN_MINUS_09P0_SETMASK 14
                             2085 ; 416  |#define HW_MIXMICINVR_GN_MINUS_10P5_SETMASK 15
                             2086 ; 417  |#define HW_MIXMICINVR_GN_MINUS_12P0_SETMASK 16
                             2087 ; 418  |#define HW_MIXMICINVR_GN_MINUS_13P5_SETMASK 17
                             2088 ; 419  |#define HW_MIXMICINVR_GN_MINUS_15P0_SETMASK 18
                             2089 ; 420  |#define HW_MIXMICINVR_GN_MINUS_16P5_SETMASK 19
                             2090 ; 421  |#define HW_MIXMICINVR_GN_MINUS_18P0_SETMASK 20
                             2091 ; 422  |#define HW_MIXMICINVR_GN_MINUS_19P5_SETMASK 21
                             2092 ; 423  |#define HW_MIXMICINVR_GN_MINUS_21P0_SETMASK 22
                             2093 ; 424  |#define HW_MIXMICINVR_GN_MINUS_22P5_SETMASK 23
                             2094 ; 425  |#define HW_MIXMICINVR_GN_MINUS_24P0_SETMASK 24
                             2095 ; 426  |#define HW_MIXMICINVR_GN_MINUS_25P5_SETMASK 25
                             2096 ; 427  |#define HW_MIXMICINVR_GN_MINUS_27P0_SETMASK 26
                             2097 ; 428  |#define HW_MIXMICINVR_GN_MINUS_28P5_SETMASK 27
                             2098 ; 429  |#define HW_MIXMICINVR_GN_MINUS_30P0_SETMASK 28
                             2099 ; 430  |#define HW_MIXMICINVR_GN_MINUS_31P5_SETMASK 29
                             2100 ; 431  |#define HW_MIXMICINVR_GN_MINUS_33P0_SETMASK 30
                             2101 ; 432  |#define HW_MIXMICINVR_GN_MINUS_34P5_SETMASK 31
                             2102 ; 433  |
                             2103 ; 434  |typedef union               
                             2104 ; 435  |{
                             2105 ; 436  |    struct {
                             2106 ; 437  |        int GN          : HW_MIXMICINVR_GN_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  35

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2107 ; 438  |        int RSVD1       : HW_MIXMICINVR_RSVD1_WIDTH;
                             2108 ; 439  |        int P20DB       : HW_MIXMICINVR_P20DB_WIDTH;
                             2109 ; 440  |        int RSVD2       : HW_MIXMICINVR_RSVD2_WIDTH;
                             2110 ; 441  |        int MUTE        : HW_MIXMICINVR_MUTE_WIDTH;
                             2111 ; 442  |        int RSVD3       : HW_MIXMICINVR_RSVD3_WIDTH;
                             2112 ; 443  |    } B;
                             2113 ; 444  |    int I;
                             2114 ; 445  |    unsigned int U;
                             2115 ; 446  |} mix_micinvr_type;
                             2116 ; 447  |#define HW_MIXMICINVR (*(volatile mix_micinvr_type _X*) (HW_CODEC_BASEADDR+5))
                             2117 ; 448  |
                             2118 ; 449  |
                             2119 ; 450  |
                             2120 ; 451  |
                             2121 ; 452  |/////////////////////////////////////////////////////////////////////////////////
                             2122 ; 453  |//   Mixer Line1 In Volume Register (HW_MIXLINE1INVR) Bit Definitions
                             2123 ; 454  |#define HW_MIXLINE1INVR_GR_BITPOS 0
                             2124 ; 455  |#define HW_MIXLINE1INVR_GL_BITPOS 8
                             2125 ; 456  |#define HW_MIXLINE1INVR_MUTE_BITPOS 15
                             2126 ; 457  |
                             2127 ; 458  |#define HW_MIXLINE1INVR_GR_WIDTH 5
                             2128 ; 459  |#define HW_MIXLINE1INVR_RSVD1_WIDTH 3
                             2129 ; 460  |#define HW_MIXLINE1INVR_GL_WIDTH 5
                             2130 ; 461  |#define HW_MIXLINE1INVR_RSVD2_WIDTH 2
                             2131 ; 462  |#define HW_MIXLINE1INVR_MUTE_WIDTH 1
                             2132 ; 463  |#define HW_MIXLINE1INVR_RSVD3_WIDTH 8
                             2133 ; 464  |
                             2134 ; 465  |#define HW_MIXLINE1INVR_GR_SETMASK 0x1F<<HW_MIXLINE1INVR_GR_BITPOS
                             2135 ; 466  |#define HW_MIXLINE1INVR_GL_SETMASK 0x1F<<HW_MIXLINE1INVR_GL_BITPOS
                             2136 ; 467  |#define HW_MIXLINE1INVR_MUTE_SETMASK 1<<HW_MIXLINE1INVR_MUTE_BITPOS
                             2137 ; 468  |
                             2138 ; 469  |#define HW_MIXLINE1INVR_GR_CLRMASK ~(WORD)HW_MIXLINE1INVR_GR_SETMASK
                             2139 ; 470  |#define HW_MIXLINE1INVR_GL_CLRMASK ~(WORD)HW_MIXLINE1INVR_GL_SETMASK
                             2140 ; 471  |#define HW_MIXLINE1INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE1INVR_MUTE_SETMASK
                             2141 ; 472  |
                             2142 ; 473  |typedef union               
                             2143 ; 474  |{
                             2144 ; 475  |    struct {
                             2145 ; 476  |        int GR          : HW_MIXLINE1INVR_GR_WIDTH;
                             2146 ; 477  |        int RSVD1       : HW_MIXLINE1INVR_RSVD1_WIDTH;
                             2147 ; 478  |        int GL          : HW_MIXLINE1INVR_GL_WIDTH;
                             2148 ; 479  |        int RSVD2       : HW_MIXLINE1INVR_RSVD2_WIDTH;
                             2149 ; 480  |        int MUTE        : HW_MIXLINE1INVR_MUTE_WIDTH;
                             2150 ; 481  |        int RSVD3       : HW_MIXLINE1INVR_RSVD3_WIDTH;
                             2151 ; 482  |    } B;
                             2152 ; 483  |    int I;
                             2153 ; 484  |    unsigned int U;
                             2154 ; 485  |} mix_line1invr_type;
                             2155 ; 486  |#define HW_MIXLINE1INVR (*(volatile mix_line1invr_type _X*) (HW_CODEC_BASEADDR+6))
                             2156 ; 487  |
                             2157 ; 488  |
                             2158 ; 489  |
                             2159 ; 490  |/////////////////////////////////////////////////////////////////////////////////
                             2160 ; 491  |//   Mixer Line2 In Volume Register (HW_MIXLINE2INVR) Bit Definitions
                             2161 ; 492  |#define HW_MIXLINE2INVR_GR_BITPOS 0
                             2162 ; 493  |#define HW_MIXLINE2INVR_GL_BITPOS 8
                             2163 ; 494  |#define HW_MIXLINE2INVR_MUTE_BITPOS 15
                             2164 ; 495  |
                             2165 ; 496  |#define HW_MIXLINE2INVR_GR_WIDTH 5
                             2166 ; 497  |#define HW_MIXLINE2INVR_RSVD1_WIDTH 3
                             2167 ; 498  |#define HW_MIXLINE2INVR_GL_WIDTH 5
                             2168 ; 499  |#define HW_MIXLINE2INVR_RSVD2_WIDTH 2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  36

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2169 ; 500  |#define HW_MIXLINE2INVR_MUTE_WIDTH 1
                             2170 ; 501  |#define HW_MIXLINE2INVR_RSVD3_WIDTH 8
                             2171 ; 502  |
                             2172 ; 503  |
                             2173 ; 504  |#define HW_MIXLINE2INVR_GR_SETMASK 0x1F<<HW_MIXLINE2INVR_GR_BITPOS
                             2174 ; 505  |#define HW_MIXLINE2INVR_GL_SETMASK 0x1F<<HW_MIXLINE2INVR_GL_BITPOS
                             2175 ; 506  |#define HW_MIXLINE2INVR_MUTE_SETMASK 1<<HW_MIXLINE2INVR_MUTE_BITPOS
                             2176 ; 507  |
                             2177 ; 508  |#define HW_MIXLINE2INVR_GR_CLRMASK ~(WORD)HW_MIXLINE2INVR_GR_SETMASK
                             2178 ; 509  |#define HW_MIXLINE2INVR_GL_CLRMASK ~(WORD)HW_MIXLINE2INVR_GL_SETMASK
                             2179 ; 510  |#define HW_MIXLINE2INVR_MUTE_CLRMASK ~(WORD)HW_MIXLINE2INVR_MUTE_SETMASK
                             2180 ; 511  |
                             2181 ; 512  |typedef union               
                             2182 ; 513  |{
                             2183 ; 514  |    struct {
                             2184 ; 515  |        int GR          : HW_MIXLINE2INVR_GR_WIDTH;
                             2185 ; 516  |        int RSVD1       : HW_MIXLINE2INVR_RSVD1_WIDTH;
                             2186 ; 517  |        int GL          : HW_MIXLINE2INVR_GL_WIDTH;
                             2187 ; 518  |        int RSVD2       : HW_MIXLINE2INVR_RSVD2_WIDTH;
                             2188 ; 519  |        int MUTE        : HW_MIXLINE2INVR_MUTE_WIDTH;
                             2189 ; 520  |        int RSVD3       : HW_MIXLINE2INVR_RSVD3_WIDTH;
                             2190 ; 521  |    } B;
                             2191 ; 522  |    int I;
                             2192 ; 523  |    unsigned int U;
                             2193 ; 524  |} mix_line2invr_type;
                             2194 ; 525  |#define HW_MIXLINE2INVR (*(volatile mix_line2invr_type _X*) (HW_CODEC_BASEADDR+7))
                             2195 ; 526  |
                             2196 ; 527  |
                             2197 ; 528  |
                             2198 ; 529  |/////////////////////////////////////////////////////////////////////////////////
                             2199 ; 530  |//   Mixer DAC In Volume Register (HW_MIXDACINVR) Bit Definitions
                             2200 ; 531  |#define HW_MIXDACINVR_MR_BITPOS 0
                             2201 ; 532  |#define HW_MIXDACINVR_ML_BITPOS 8
                             2202 ; 533  |#define HW_MIXDACINVR_MUTE_BITPOS 15
                             2203 ; 534  |
                             2204 ; 535  |#define HW_MIXDACINVR_MR_WIDTH (5)
                             2205 ; 536  |#define HW_MIXDACINVR_ML_WIDTH (5)
                             2206 ; 537  |#define HW_MIXDACINVR_MUTE_WIDTH (1)
                             2207 ; 538  |
                             2208 ; 539  |#define HW_MIXDACINVR_MR_SETMASK 0x1F<<HW_MIXDACINVR_MR_BITPOS
                             2209 ; 540  |#define HW_MIXDACINVR_ML_SETMASK 0x1F<<HW_MIXDACINVR_ML_BITPOS
                             2210 ; 541  |#define HW_MIXDACINVR_MUTE_SETMASK 1<<HW_MIXDACINVR_MUTE_BITPOS
                             2211 ; 542  |
                             2212 ; 543  |#define HW_MIXDACINVR_MR_CLRMASK ~(WORD)HW_MIXDACINVR_MR_SETMASK
                             2213 ; 544  |#define HW_MIXDACINVR_ML_CLRMASK ~(WORD)HW_MIXDACINVR_ML_SETMASK
                             2214 ; 545  |#define HW_MIXDACINVR_MUTE_CLRMASK ~(WORD)HW_MIXDACINVR_MUTE_SETMASK
                             2215 ; 546  |
                             2216 ; 547  |typedef union               
                             2217 ; 548  |{
                             2218 ; 549  |    struct {
                             2219 ; 550  |        int MR   : HW_MIXDACINVR_MR_WIDTH;
                             2220 ; 551  |        int ML   : HW_MIXDACINVR_ML_WIDTH;
                             2221 ; 552  |        int MUTE : HW_MIXDACINVR_MUTE_WIDTH;
                             2222 ; 553  |    } B;
                             2223 ; 554  |    int I;
                             2224 ; 555  |    unsigned int U;
                             2225 ; 556  |} mix_dacinvr_type;
                             2226 ; 557  |#define HW_MIXDACINVR (*(volatile mix_dacinvr_type _X*) (HW_CODEC_BASEADDR+8))
                             2227 ; 558  |
                             2228 ; 559  |
                             2229 ; 560  |/////////////////////////////////////////////////////////////////////////////////
                             2230 ; 561  |//   Mixer Record Select Register (HW_MIXRECSELR) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  37

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2231 ; 562  |#define HW_MIXRECSELR_SR_BITPOS 0
                             2232 ; 563  |#define HW_MIXRECSELR_SL_BITPOS 8
                             2233 ; 564  |#define HW_MIXRECSELR_X_BITPOS 11
                             2234 ; 565  |
                             2235 ; 566  |#define HW_MIXRECSELR_SR_WIDTH 3
                             2236 ; 567  |#define HW_MIXRECSELR_RSVD1_WIDTH 5
                             2237 ; 568  |#define HW_MIXRECSELR_SL_WIDTH 3
                             2238 ; 569  |#define HW_MIXRECSELR_X_WIDTH 1
                             2239 ; 570  |#define HW_MIXRECSELR_RSVD2_WIDTH 12
                             2240 ; 571  |
                             2241 ; 572  |#define HW_MIXRECSELR_SR_SETMASK 7<<HW_MIXRECSELR_SR_BITPOS
                             2242 ; 573  |#define HW_MIXRECSELR_SL_SETMASK 7<<HW_MIXRECSELR_SL_BITPOS
                             2243 ; 574  |#define HW_MIXRECSELR_X_SETMASK 1<<HW_MIXRECSELR_X_BITPOS
                             2244 ; 575  |
                             2245 ; 576  |#define HW_MIXRECSELR_SR_MIC_SETMASK 0<<HW_MIXRECSELR_SR_BITPOS
                             2246 ; 577  |#define HW_MIXRECSELR_SR_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SR_BITPOS
                             2247 ; 578  |#define HW_MIXRECSELR_SR_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SR_BITPOS
                             2248 ; 579  |#define HW_MIXRECSELR_SR_MIX_SETMASK 5<<HW_MIXRECSELR_SR_BITPOS
                             2249 ; 580  |
                             2250 ; 581  |#define HW_MIXRECSELR_SL_MIC_SETMASK 0<<HW_MIXRECSELR_SL_BITPOS
                             2251 ; 582  |#define HW_MIXRECSELR_SL_LINEIN2_SETMASK 3<<HW_MIXRECSELR_SL_BITPOS
                             2252 ; 583  |#define HW_MIXRECSELR_SL_LINEIN1_SETMASK 4<<HW_MIXRECSELR_SL_BITPOS
                             2253 ; 584  |#define HW_MIXRECSELR_SL_MIX_SETMASK 5<<HW_MIXRECSELR_SL_BITPOS
                             2254 ; 585  |
                             2255 ; 586  |#define HW_MIXRECSELR_SR_CLRMASK ~(WORD)HW_MIXRECSELR_SR_SETMASK
                             2256 ; 587  |#define HW_MIXRECSELR_SL_CLRMASK ~(WORD)HW_MIXRECSELR_SL_SETMASK
                             2257 ; 588  |#define HW_MIXRECSELR_SR_SL_CLRMASK ~(WORD)(HW_MIXRECSELR_SR_SETMASK|HW_MIXRECSELR_SL_SETM
                                  ASK)
                             2258 ; 589  |#define HW_MIXRECSELR_X_CLRMASK ~(WORD)HW_MIXRECSELR_X_SETMASK
                             2259 ; 590  |
                             2260 ; 591  |typedef union               
                             2261 ; 592  |{
                             2262 ; 593  |    struct {
                             2263 ; 594  |        int SR          : HW_MIXRECSELR_SR_WIDTH;
                             2264 ; 595  |        int RSVD1       : HW_MIXRECSELR_RSVD1_WIDTH;
                             2265 ; 596  |        int SL          : HW_MIXRECSELR_SL_WIDTH;
                             2266 ; 597  |        int X           : HW_MIXRECSELR_X_WIDTH;
                             2267 ; 598  |        int RSVD2       : HW_MIXRECSELR_RSVD2_WIDTH;
                             2268 ; 599  |    } B;
                             2269 ; 600  |    int I;
                             2270 ; 601  |    unsigned int U;
                             2271 ; 602  |} mix_recselr_type;
                             2272 ; 603  |#define HW_MIXRECSELR (*(volatile mix_recselr_type _X*) (HW_CODEC_BASEADDR+9))
                             2273 ; 604  |
                             2274 ; 605  |
                             2275 ; 606  |
                             2276 ; 607  |/////////////////////////////////////////////////////////////////////////////////
                             2277 ; 608  |//   Mixer ADC In Gain Register (HW_MIXADCGAINR) Bit Definitions
                             2278 ; 609  |#define HW_MIXADCGAINR_GR_BITPOS 0
                             2279 ; 610  |#define HW_MIXADCGAINR_GL_BITPOS 8
                             2280 ; 611  |#define HW_MIXADCGAINR_MUTE_BITPOS 15
                             2281 ; 612  |
                             2282 ; 613  |#define HW_MIXADCGAINR_GR_WIDTH 4
                             2283 ; 614  |#define HW_MIXADCGAINR_RSVD1_WIDTH 4
                             2284 ; 615  |#define HW_MIXADCGAINR_GL_WIDTH 4
                             2285 ; 616  |#define HW_MIXADCGAINR_RSVD2_WIDTH 3
                             2286 ; 617  |#define HW_MIXADCGAINR_MUTE_WIDTH 1
                             2287 ; 618  |#define HW_MIXADCGAINR_RSVD3_WIDTH 8
                             2288 ; 619  |
                             2289 ; 620  |#define HW_MIXADCGAINR_GR_SETMASK 0x1F<<HW_MIXADCGAINR_GR_BITPOS
                             2290 ; 621  |#define HW_MIXADCGAINR_GL_SETMASK 0x1F<<HW_MIXADCGAINR_GL_BITPOS
                             2291 ; 622  |#define HW_MIXADCGAINR_MUTE_SETMASK 1<<HW_MIXADCGAINR_MUTE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  38

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2292 ; 623  |
                             2293 ; 624  |#define HW_MIXADCGAINR_GR_CLRMASK ~(WORD)HW_MIXADCGAINR_GR_SETMASK
                             2294 ; 625  |#define HW_MIXADCGAINR_GL_CLRMASK ~(WORD)HW_MIXADCGAINR_GL_SETMASK
                             2295 ; 626  |#define HW_MIXADCGAINR_MUTE_CLRMASK ~(WORD)HW_MIXADCGAINR_MUTE_SETMASK
                             2296 ; 627  |
                             2297 ; 628  |#define HW_MIXADCGAINR_GL_00P0_SETMASK 0<<HW_MIXADCGAINR_GL_BITPOS
                             2298 ; 629  |#define HW_MIXADCGAINR_GL_01P5_SETMASK 1<<HW_MIXADCGAINR_GL_BITPOS
                             2299 ; 630  |#define HW_MIXADCGAINR_GL_03P0_SETMASK 2<<HW_MIXADCGAINR_GL_BITPOS
                             2300 ; 631  |#define HW_MIXADCGAINR_GL_04P5_SETMASK 3<<HW_MIXADCGAINR_GL_BITPOS
                             2301 ; 632  |#define HW_MIXADCGAINR_GL_06P0_SETMASK 4<<HW_MIXADCGAINR_GL_BITPOS
                             2302 ; 633  |#define HW_MIXADCGAINR_GL_07P5_SETMASK 5<<HW_MIXADCGAINR_GL_BITPOS
                             2303 ; 634  |#define HW_MIXADCGAINR_GL_09P0_SETMASK 6<<HW_MIXADCGAINR_GL_BITPOS
                             2304 ; 635  |#define HW_MIXADCGAINR_GL_10P5_SETMASK 7<<HW_MIXADCGAINR_GL_BITPOS
                             2305 ; 636  |#define HW_MIXADCGAINR_GL_12P0_SETMASK 8<<HW_MIXADCGAINR_GL_BITPOS
                             2306 ; 637  |#define HW_MIXADCGAINR_GL_13P5_SETMASK 9<<HW_MIXADCGAINR_GL_BITPOS
                             2307 ; 638  |#define HW_MIXADCGAINR_GL_15P0_SETMASK 10<<HW_MIXADCGAINR_GL_BITPOS
                             2308 ; 639  |#define HW_MIXADCGAINR_GL_16P5_SETMASK 11<<HW_MIXADCGAINR_GL_BITPOS
                             2309 ; 640  |#define HW_MIXADCGAINR_GL_18P0_SETMASK 12<<HW_MIXADCGAINR_GL_BITPOS
                             2310 ; 641  |#define HW_MIXADCGAINR_GL_19P5_SETMASK 13<<HW_MIXADCGAINR_GL_BITPOS
                             2311 ; 642  |#define HW_MIXADCGAINR_GL_21P0_SETMASK 14<<HW_MIXADCGAINR_GL_BITPOS
                             2312 ; 643  |#define HW_MIXADCGAINR_GL_22P5_SETMASK 15<<HW_MIXADCGAINR_GL_BITPOS
                             2313 ; 644  |
                             2314 ; 645  |#define HW_MIXADCGAINR_GR_00P0_SETMASK 0
                             2315 ; 646  |#define HW_MIXADCGAINR_GR_01P5_SETMASK 1
                             2316 ; 647  |#define HW_MIXADCGAINR_GR_03P0_SETMASK 2
                             2317 ; 648  |#define HW_MIXADCGAINR_GR_04P5_SETMASK 3
                             2318 ; 649  |#define HW_MIXADCGAINR_GR_06P0_SETMASK 4
                             2319 ; 650  |#define HW_MIXADCGAINR_GR_07P5_SETMASK 5
                             2320 ; 651  |#define HW_MIXADCGAINR_GR_09P0_SETMASK 6
                             2321 ; 652  |#define HW_MIXADCGAINR_GR_10P5_SETMASK 7
                             2322 ; 653  |#define HW_MIXADCGAINR_GR_12P0_SETMASK 8
                             2323 ; 654  |#define HW_MIXADCGAINR_GR_13P5_SETMASK 9
                             2324 ; 655  |#define HW_MIXADCGAINR_GR_15P0_SETMASK 10
                             2325 ; 656  |#define HW_MIXADCGAINR_GR_16P5_SETMASK 11
                             2326 ; 657  |#define HW_MIXADCGAINR_GR_18P0_SETMASK 12
                             2327 ; 658  |#define HW_MIXADCGAINR_GR_19P5_SETMASK 13
                             2328 ; 659  |#define HW_MIXADCGAINR_GR_21P0_SETMASK 14
                             2329 ; 660  |#define HW_MIXADCGAINR_GR_22P5_SETMASK 15
                             2330 ; 661  |
                             2331 ; 662  |typedef union               
                             2332 ; 663  |{
                             2333 ; 664  |    struct {
                             2334 ; 665  |        int GR          : HW_MIXADCGAINR_GR_WIDTH;
                             2335 ; 666  |        int RSVD1       : HW_MIXADCGAINR_RSVD1_WIDTH;
                             2336 ; 667  |        int GL          : HW_MIXADCGAINR_GL_WIDTH;
                             2337 ; 668  |        int RSVD2       : HW_MIXADCGAINR_RSVD2_WIDTH;
                             2338 ; 669  |        int MUTE        : HW_MIXADCGAINR_MUTE_WIDTH;
                             2339 ; 670  |        int RSVD3       : HW_MIXADCGAINR_RSVD3_WIDTH;
                             2340 ; 671  |    } B;
                             2341 ; 672  |    int I;
                             2342 ; 673  |    unsigned int U;
                             2343 ; 674  |} mix_adcgainr_type;
                             2344 ; 675  |#define HW_MIXADCGAINR (*(volatile mix_adcgainr_type _X*) (HW_CODEC_BASEADDR+10))
                             2345 ; 676  |
                             2346 ; 677  |
                             2347 ; 678  |
                             2348 ; 679  |/////////////////////////////////////////////////////////////////////////////////
                             2349 ; 680  |//   Mixer Power Down Register (HW_MIXPWRDNR) Bit Definitions
                             2350 ; 681  |#define HW_MIXPWRDNR_PR0_BITPOS 9
                             2351 ; 682  |#define HW_MIXPWRDNR_PR1_BITPOS 10
                             2352 ; 683  |#define HW_MIXPWRDNR_PR2_BITPOS 11
                             2353 ; 684  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  39

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2354 ; 685  |#define HW_MIXPWRDNR_PR0_WIDTH (1)
                             2355 ; 686  |#define HW_MIXPWRDNR_PR1_WIDTH (1)
                             2356 ; 687  |#define HW_MIXPWRDNR_PR2_WIDTH (1)
                             2357 ; 688  |#define HW_MIXPWRDNR_RSVD_WIDTH (12)
                             2358 ; 689  |
                             2359 ; 690  |#define HW_MIXPWRDNR_PR_SETMASK 7<<HW_MIXPWRDNR_PR0_BITPOS
                             2360 ; 691  |
                             2361 ; 692  |#define HW_MIXPWRDNR_PR_CLRMASK ~(WORD)HW_MIXPWRDNR_PR_SETMASK
                             2362 ; 693  |
                             2363 ; 694  |typedef union               
                             2364 ; 695  |{
                             2365 ; 696  |    struct {
                             2366 ; 697  |                int                     : 9;
                             2367 ; 698  |       int PR0          : HW_MIXPWRDNR_PR0_WIDTH;
                             2368 ; 699  |       int PR1          : HW_MIXPWRDNR_PR1_WIDTH;
                             2369 ; 700  |       int PR2          : HW_MIXPWRDNR_PR2_WIDTH;
                             2370 ; 701  |       int RSVD         : HW_MIXPWRDNR_RSVD_WIDTH;
                             2371 ; 702  |    } B;
                             2372 ; 703  |    int I;
                             2373 ; 704  |    unsigned int U;
                             2374 ; 705  |} mix_pwrdnr_type;
                             2375 ; 706  |#define HW_MIXPWRDNR (*(volatile mix_pwrdnr_type _X*) (HW_CODEC_BASEADDR+11))
                             2376 ; 707  |
                             2377 ; 708  |
                             2378 ; 709  |/////////////////////////////////////////////////////////////////////////////////
                             2379 ; 710  |
                             2380 ; 711  |//  Mixer Test Register (HW_MIX_TEST) Bit Definitions
                             2381 ; 712  |
                             2382 ; 713  |#define HW_MIX_TEST_DAC_CHOP_CLK_WIDTH (2)
                             2383 ; 714  |
                             2384 ; 715  |#define HW_MIX_TEST_RSVD0_WIDTH (2)
                             2385 ; 716  |
                             2386 ; 717  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH (1)
                             2387 ; 718  |
                             2388 ; 719  |#define HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH (1)
                             2389 ; 720  |
                             2390 ; 721  |#define HW_MIX_TEST_RSVD1_WIDTH (2)
                             2391 ; 722  |
                             2392 ; 723  |#define HW_MIX_TEST_TMP_CFG_WIDTH (4)
                             2393 ; 724  |
                             2394 ; 725  |#define HW_MIX_TEST_TMPPWD_WIDTH (1)
                             2395 ; 726  |
                             2396 ; 727  |#define HW_MIX_TEST_RSVD2_WIDTH (11)
                             2397 ; 728  |
                             2398 ; 729  |
                             2399 ; 730  |
                             2400 ; 731  |#define HW_MIX_TEST_DAC_CHOP_CLK_BITPOS (0)
                             2401 ; 732  |
                             2402 ; 733  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_BITPOS (4)
                             2403 ; 734  |
                             2404 ; 735  |#define HW_MIX_TEST_DAC_MORE_AMP_I_BITPOS (5)
                             2405 ; 736  |
                             2406 ; 737  |#define HW_MIX_TEST_TMP_CFG_BITPOS (8)
                             2407 ; 738  |
                             2408 ; 739  |#define HW_MIX_TEST_TMPPWD_BITPOS (12)
                             2409 ; 740  |
                             2410 ; 741  |
                             2411 ; 742  |
                             2412 ; 743  |#define HW_MIX_TEST_DAC_CHOP_CLK_SETMASK (((1<<HW_MIX_TEST_DAC_CHOP_CLK_WIDTH)-1)<<HW_MIX_
                                  TEST_DAC_CHOP_CLK_BITPOS)        
                             2413 ; 744  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  40

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2414 ; 745  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK (((1<<HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH)-1)<<H
                                  W_MIX_TEST_DAC_DISABLE_RTZ_BITPOS)        
                             2415 ; 746  |
                             2416 ; 747  |#define HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK (((1<<HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH)-1)<<HW_
                                  MIX_TEST_DAC_MORE_AMP_I_BITPOS) 
                             2417 ; 748  |
                             2418 ; 749  |#define HW_MIX_TEST_TMP_CFG_SETMASK (((1<<HW_MIX_TEST_TMP_CFG_WIDTH)-1)<<HW_MIX_TEST_TMP_C
                                  FG_BITPOS) 
                             2419 ; 750  |
                             2420 ; 751  |#define HW_MIX_TEST_TMPPWD_SETMASK (((1<<HW_MIX_TEST_TMPPWD_WIDTH)-1)<<HW_MIX_TEST_TMPPWD_
                                  BITPOS) 
                             2421 ; 752  |
                             2422 ; 753  |
                             2423 ; 754  |#define HW_MIX_TEST_DAC_CHOP_CLK_CLRMASK (~(WORD)HW_MIX_TEST_DAC_CHOP_CLK_SETMASK)     
                             2424 ; 755  |
                             2425 ; 756  |#define HW_MIX_TEST_DAC_DISABLE_RTZ_CLRMASK (~(WORD)HW_MIX_TEST_DAC_DISABLE_RTZ_SETMASK)  
                                     
                             2426 ; 757  |
                             2427 ; 758  |#define HW_MIX_TEST_DAC_MORE_AMP_I_CLRMASK (~(WORD)HW_MIX_TEST_DAC_MORE_AMP_I_SETMASK) 
                             2428 ; 759  |
                             2429 ; 760  |#define HW_MIX_TEST_TMP_CFG_CLRMASK (~(WORD)HW_MIX_TEST_TMP_CFG_SETMASK) 
                             2430 ; 761  |
                             2431 ; 762  |#define HW_MIX_TEST_TMPPWD_CLRMASK (~(WORD)HW_MIX_TEST_TMPPWD_SETMASK) 
                             2432 ; 763  |
                             2433 ; 764  |
                             2434 ; 765  |typedef union               
                             2435 ; 766  |{
                             2436 ; 767  |    struct {
                             2437 ; 768  |        int DAC_CHOP_CLK                   : HW_MIX_TEST_DAC_CHOP_CLK_WIDTH;
                             2438 ; 769  |        int RSVD0                          : HW_MIX_TEST_RSVD0_WIDTH;
                             2439 ; 770  |        int DAC_DISABLE_RTZ                : HW_MIX_TEST_DAC_DISABLE_RTZ_WIDTH;
                             2440 ; 771  |        int DAC_MORE_AMP_I                 : HW_MIX_TEST_DAC_MORE_AMP_I_WIDTH;
                             2441 ; 772  |        int RSVD1                          : HW_MIX_TEST_RSVD1_WIDTH;
                             2442 ; 773  |        int TMP_CFG                        : HW_MIX_TEST_TMP_CFG_WIDTH;
                             2443 ; 774  |        int TMPPWD                         : HW_MIX_TEST_TMPPWD_WIDTH;
                             2444 ; 775  |        int RSVD2                          : HW_MIX_TEST_RSVD2_WIDTH;
                             2445 ; 776  |    } B;
                             2446 ; 777  |    int I;
                             2447 ; 778  |    unsigned int U;
                             2448 ; 779  |} mix_test_type;
                             2449 ; 780  |#define HW_MIX_TEST      (*(volatile mix_test_type _X*) (HW_CODEC_BASEADDR+28))    /* Anal
                                  og Persistent Config Register */
                             2450 ; 781  |
                             2451 ; 782  |
                             2452 ; 783  |/////////////////////////////////////////////////////////////////////////////////
                             2453 ; 784  |//   Reference Control Register (HW_REF_CTRL) Bit Definitions
                             2454 ; 785  |#define HW_REF_CTRL_DACVBGVAL_BITPOS 0
                             2455 ; 786  |#define HW_REF_CTRL_ADJDAC_BITPOS 4
                             2456 ; 787  |#define HW_REF_CTRL_VAGVAL_BITPOS 5
                             2457 ; 788  |#define HW_REF_CTRL_ADJV_BITPOS 9
                             2458 ; 789  |#define HW_REF_CTRL_ADCREFV_BITPOS 10
                             2459 ; 790  |#define HW_REF_CTRL_ADJADC_BITPOS 14
                             2460 ; 791  |#define HW_REF_CTRL_PWRDWNS_BITPOS 15
                             2461 ; 792  |#define HW_REF_CTRL_BIASC_BITPOS 16
                             2462 ; 793  |#define HW_REF_CTRL_LWREF_BITPOS 18
                             2463 ; 794  |#define HW_REF_CTRL_LOW_PWR_BITPOS 19 
                             2464 ; 795  |
                             2465 ; 796  |#define HW_REF_CTRL_DACVBGVAL_WIDTH (4)
                             2466 ; 797  |#define HW_REF_CTRL_ADJDAC_WIDTH (1)
                             2467 ; 798  |#define HW_REF_CTRL_VAGVAL_WIDTH (4)
                             2468 ; 799  |#define HW_REF_CTRL_ADJV_WIDTH (1)
                             2469 ; 800  |#define HW_REF_CTRL_ADCREFV_WIDTH (4)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  41

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2470 ; 801  |#define HW_REF_CTRL_ADJADC_WIDTH (1)
                             2471 ; 802  |#define HW_REF_CTRL_PWRDWNS_WIDTH (1)
                             2472 ; 803  |#define HW_REF_CTRL_BIASC_WIDTH (2)
                             2473 ; 804  |#define HW_REF_CTRL_LWREF_WIDTH (1)
                             2474 ; 805  |#define HW_REF_CTRL_LOW_PWR_WIDTH (1) 
                             2475 ; 806  |#define HW_REF_CTRL_RSVD_WIDTH (4)
                             2476 ; 807  |
                             2477 ; 808  |#define HW_REF_CTRL_DACVBGVAL_SETMASK (((1<<HW_REF_CTRL_DACVBGVAL_WIDTH)-1)<<HW_REF_CTRL_D
                                  ACVBGVAL_BITPOS)
                             2478 ; 809  |#define HW_REF_CTRL_ADJDAC_SETMASK (((1<<HW_REF_CTRL_ADJDAC_WIDTH)-1)<<HW_REF_CTRL_ADJDAC_
                                  BITPOS)
                             2479 ; 810  |#define HW_REF_CTRL_VAGVAL_SETMASK (((1<<HW_REF_CTRL_VAGVAL_WIDTH)-1)<<HW_REF_CTRL_VAGVAL_
                                  BITPOS)
                             2480 ; 811  |#define HW_REF_CTRL_ADJV_SETMASK (((1<<HW_REF_CTRL_ADJV_WIDTH)-1)<<HW_REF_CTRL_ADJV_BITPOS
                                  )
                             2481 ; 812  |#define HW_REF_CTRL_ADCREFV_SETMASK (((1<<HW_REF_CTRL_ADCREFV_WIDTH)-1)<<HW_REF_CTRL_ADCRE
                                  FV_BITPOS)
                             2482 ; 813  |#define HW_REF_CTRL_ADJADC_SETMASK (((1<<HW_REF_CTRL_ADJADC_WIDTH)-1)<<HW_REF_CTRL_ADJADC_
                                  BITPOS)
                             2483 ; 814  |#define HW_REF_CTRL_PWRDWNS_SETMASK (((1<<HW_REF_CTRL_PWRDWNS_WIDTH)-1)<<HW_REF_CTRL_PWRDW
                                  NS_BITPOS)
                             2484 ; 815  |#define HW_REF_CTRL_BIASC_SETMASK (((1<<HW_REF_CTRL_BIASC_WIDTH)-1)<<HW_REF_CTRL_BIASC_BIT
                                  POS)
                             2485 ; 816  |#define HW_REF_CTRL_LWREF_SETMASK (((1<<HW_REF_CTRL_LWREF_WIDTH)-1)<<HW_REF_CTRL_LWREF_BIT
                                  POS)
                             2486 ; 817  |#define HW_REF_CTRL_LOW_PWR_SETMASK (((1<<HW_REF_CTRL_LOW_PWR_WIDTH)-1)<<HW_REF_CTRL_LOW_P
                                  WR_BITPOS)
                             2487 ; 818  |
                             2488 ; 819  |#define HW_REF_CTRL_DACVBGVAL_CLRMASK ~(WORD)HW_REF_CTRL_DACVBGVAL_SETMASK
                             2489 ; 820  |#define HW_REF_CTRL_ADJDAC_CLRMASK ~(WORD)HW_REF_CTRL_ADJDAC_SETMASK
                             2490 ; 821  |#define HW_REF_CTRL_VAGVAL_CLRMASK ~(WORD)HW_REF_CTRL_VAGVAL_SETMASK
                             2491 ; 822  |#define HW_REF_CTRL_ADJV_CLRMASK ~(WORD)HW_REF_CTRL_ADJV_SETMASK
                             2492 ; 823  |#define HW_REF_CTRL_ADCREFV_CLRMASK ~(WORD)HW_REF_CTRL_ADCREFV_SETMASK
                             2493 ; 824  |#define HW_REF_CTRL_ADJADC_CLRMASK ~(WORD)HW_REF_CTRL_ADJADC_SETMASK
                             2494 ; 825  |#define HW_REF_CTRL_PWRDWNS_CLRMASK ~(WORD)HW_REF_CTRL_PWRDWNS_SETMASK
                             2495 ; 826  |#define HW_REF_CTRL_BIASC_CLRMASK ~(WORD)HW_REF_CTRL_BIASC_SETMASK
                             2496 ; 827  |#define HW_REF_CTRL_LWREF_CLRMASK ~(WORD)HW_REF_CTRL_LWREF_SETMASK
                             2497 ; 828  |#define HW_REF_CTRL_LOW_PWR_CLRMASK ~(WORD)HW_REF_CTRL_LOW_PWR_SETMASK
                             2498 ; 829  |
                             2499 ; 830  |typedef union               
                             2500 ; 831  |{
                             2501 ; 832  |    struct {
                             2502 ; 833  |        int DACVBGVAL      : HW_REF_CTRL_DACVBGVAL_WIDTH;
                             2503 ; 834  |        int ADJDAC                 : HW_REF_CTRL_ADJDAC_WIDTH;
                             2504 ; 835  |        int VAGVAL                 : HW_REF_CTRL_VAGVAL_WIDTH;
                             2505 ; 836  |        int ADJV                   : HW_REF_CTRL_ADJV_WIDTH;
                             2506 ; 837  |        int ADCREFV       : HW_REF_CTRL_ADCREFV_WIDTH;
                             2507 ; 838  |        int ADJADC                 : HW_REF_CTRL_ADJADC_WIDTH;
                             2508 ; 839  |        int PWRDWNS       : HW_REF_CTRL_PWRDWNS_WIDTH;
                             2509 ; 840  |        int BIASC         : HW_REF_CTRL_BIASC_WIDTH;
                             2510 ; 841  |        int LWREF         : HW_REF_CTRL_LWREF_WIDTH;
                             2511 ; 842  |        int LOW_PWR       : HW_REF_CTRL_LOW_PWR_WIDTH;
                             2512 ; 843  |        int RSVD               : HW_REF_CTRL_RSVD_WIDTH;
                             2513 ; 844  |    } B;
                             2514 ; 845  |    int I;
                             2515 ; 846  |    unsigned int U;
                             2516 ; 847  |} ref_ctrl_type;
                             2517 ; 848  |#define HW_REF_CTRL (*(volatile ref_ctrl_type _X*) (HW_CODEC_BASEADDR+25))
                             2518 ; 849  |
                             2519 ; 850  |
                             2520 ; 851  |
                             2521 ; 852  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  42

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2522 ; 853  |/////////////////////////////////////////////////////////////////////////////////
                             2523 ; 854  |/////////////////////////////////////////////////////////////////////////////////
                             2524 ; 855  |//////  DAC Registers
                             2525 ; 856  |/////////////////////////////////////////////////////////////////////////////////
                             2526 ; 857  |/////////////////////////////////////////////////////////////////////////////////
                             2527 ; 858  |/////////////////////////////////////////////////////////////////////////////////
                             2528 ; 859  |#define HW_DAC_BASEADDR 0xF800
                             2529 ; 860  |
                             2530 ; 861  |
                             2531 ; 862  |
                             2532 ; 863  |/////////////////////////////////////////////////////////////////////////////////
                             2533 ; 864  |//  DAC Control Status Register (HW_DACCSR) Bit Definitions
                             2534 ; 865  |#define HW_DACCSR_TXEN_BITPOS 0
                             2535 ; 866  |#define HW_DACCSR_TXIEN_BITPOS 1
                             2536 ; 867  |#define HW_DACCSR_TXI_BITPOS 2
                             2537 ; 868  |#define HW_DACCSR_TXEXC_BITPOS 3
                             2538 ; 869  |#define HW_DACCSR_LPBK_BITPOS 4
                             2539 ; 870  |#define HW_DACCSR_DMASEL_BITPOS 5
                             2540 ; 871  |#define HW_DACCSR_DAC_HIPPOP_EN_BITPOS 7
                             2541 ; 872  |#define HW_DACCSR_LVUP_BITPOS 8
                             2542 ; 873  |#define HW_DACCSR_RVUP_BITPOS 9
                             2543 ; 874  |#define HW_DACCSR_VUP_BITPOS 10
                             2544 ; 875  |#define HW_DACCSR_RSRVD_BITPOS 11
                             2545 ; 876  |#define HW_DACCSR_CLKGT_BITPOS 23
                             2546 ; 877  |
                             2547 ; 878  |#define HW_DACCSR_TXEN_WIDTH (1)
                             2548 ; 879  |#define HW_DACCSR_TXIEN_WIDTH (1)
                             2549 ; 880  |#define HW_DACCSR_TXI_WIDTH (1)
                             2550 ; 881  |#define HW_DACCSR_TXEXC_WIDTH (1)
                             2551 ; 882  |#define HW_DACCSR_LPBK_WIDTH (1)
                             2552 ; 883  |#define HW_DACCSR_DMASEL_WIDTH (2)
                             2553 ; 884  |#define HW_DACCSR_DAC_HIPPOP_EN_WIDTH (1)
                             2554 ; 885  |#define HW_DACCSR_LVUP_WIDTH (1)
                             2555 ; 886  |#define HW_DACCSR_RVUP_WIDTH (1)
                             2556 ; 887  |#define HW_DACCSR_VUP_WIDTH (1)
                             2557 ; 888  |#define HW_DACCSR_RSRVD_WIDTH (12)
                             2558 ; 889  |#define HW_DACCSR_CLKGT_WIDTH (1)
                             2559 ; 890  |
                             2560 ; 891  |#define HW_DACCSR_TXEN_SETMASK 1<<HW_DACCSR_TXEN_BITPOS
                             2561 ; 892  |#define HW_DACCSR_TXIEN_SETMASK 1<<HW_DACCSR_TXIEN_BITPOS
                             2562 ; 893  |#define HW_DACCSR_TXI_SETMASK 1<<HW_DACCSR_TXI_BITPOS
                             2563 ; 894  |#define HW_DACCSR_TXEXC_SETMASK 1<<HW_DACCSR_TXEXC_BITPOS
                             2564 ; 895  |#define HW_DACCSR_LPBK_SETMASK 1<<HW_DACCSR_LPBK_BITPOS
                             2565 ; 896  |#define HW_DACCSR_DMASEL_P_SETMASK ((2)<<(HW_DACCSR_DMASEL_BITPOS))
                             2566 ; 897  |#define HW_DACCSR_DMASEL_Y_SETMASK (1<<(HW_DACCSR_DMASEL_BITPOS))
                             2567 ; 898  |//         DMASEL_X has no asm setmask since X config value is 00 binary.
                             2568 ; 899  |#define HW_DACCSR_DAC_HIPPOP_EN_SETMASK (1<<HW_DACCSR_DAC_HIPPOP_EN_BITPOS)
                             2569 ; 900  |#define HW_DACCSR_LVUP_SETMASK (1<<HW_DACCSR_LVUP_BITPOS)
                             2570 ; 901  |#define HW_DACCSR_RVUP_SETMASK (1<<HW_DACCSR_RVUP_BITPOS)
                             2571 ; 902  |#define HW_DACCSR_VUP_SETMASK (1<<HW_DACCSR_VUP_BITPOS)
                             2572 ; 903  |#define HW_DACCSR_CLKGT_SETMASK (1<<HW_DACCSR_CLKGT_BITPOS)
                             2573 ; 904  |
                             2574 ; 905  |#define HW_DACCSR_TXEN_CLRMASK ~(WORD)HW_DACCSR_TXEN_SETMASK
                             2575 ; 906  |#define HW_DACCSR_TXIEN_CLRMASK ~(WORD)HW_DACCSR_TXIEN_SETMASK
                             2576 ; 907  |#define HW_DACCSR_TXI_CLRMASK ~(WORD)HW_DACCSR_TXI_SETMASK
                             2577 ; 908  |#define HW_DACCSR_TXEXC_CLRMASK ~(WORD)HW_DACCSR_TXEXC_SETMASK
                             2578 ; 909  |#define HW_DACCSR_LPBK_CLRMASK ~(WORD)HW_DACCSR_LPBK_SETMASK
                             2579 ; 910  |// No asm clrmask for 2 bit bitfield DMASEL
                             2580 ; 911  |#define HW_DACCSR_DAC_HIPPOP_EN_CLRMASK ~(WORD)HW_DACCSR_DAC_HIPPOP_EN_SETMASK
                             2581 ; 912  |#define HW_DACCSR_LVUP_CLRMASK ~(WORD)HW_DACCSR_LVUP_SETMASK
                             2582 ; 913  |#define HW_DACCSR_RVUP_CLRMASK ~(WORD)HW_DACCSR_RVUP_SETMASK
                             2583 ; 914  |#define HW_DACCSR_VUP_CLRMASK ~(WORD)HW_DACCSR_VUP_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  43

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2584 ; 915  |#define HW_DACCSR_CLKGT_CLRMASK ~(WORD)HW_DACCSR_CLKGT_SETMASK 
                             2585 ; 916  |
                             2586 ; 917  |
                             2587 ; 918  |typedef union               
                             2588 ; 919  |{
                             2589 ; 920  |    struct {
                             2590 ; 921  |        int TXEN                        : HW_DACCSR_TXEN_WIDTH;
                             2591 ; 922  |        int TXIEN                       : HW_DACCSR_TXIEN_WIDTH;
                             2592 ; 923  |        int TXI                         : HW_DACCSR_TXI_WIDTH;
                             2593 ; 924  |        int TXEXC                       : HW_DACCSR_TXEXC_WIDTH;
                             2594 ; 925  |        int LPBK                        : HW_DACCSR_LPBK_WIDTH;
                             2595 ; 926  |        int DMASEL                      : HW_DACCSR_DMASEL_WIDTH;
                             2596 ; 927  |             #define HW_DACCSR_DMASEL_X_BITFIELD_VAL    0
                             2597 ; 928  |             #define HW_DACCSR_DMASEL_Y_BITFIELD_VAL    1
                             2598 ; 929  |             #define HW_DACCSR_DMASEL_P_BITFIELD_VAL    2       
                             2599 ; 930  |        int DAC_HIPPOP_EN               : HW_DACCSR_DAC_HIPPOP_EN_WIDTH;
                             2600 ; 931  |        int LVUP                        : HW_DACCSR_LVUP_WIDTH;
                             2601 ; 932  |        int RVUP                        : HW_DACCSR_RVUP_WIDTH;
                             2602 ; 933  |        int VUP                         : HW_DACCSR_VUP_WIDTH;
                             2603 ; 934  |        int RSVD                        : HW_DACCSR_RSRVD_WIDTH;
                             2604 ; 935  |        int CLKGT                       : HW_DACCSR_CLKGT_WIDTH;
                             2605 ; 936  |    } B;
                             2606 ; 937  |    int I;
                             2607 ; 938  |    unsigned int U;
                             2608 ; 939  |} dac_csr_type;
                             2609 ; 940  |#define HW_DACCSR      (*(volatile dac_csr_type _X*) (HW_DAC_BASEADDR))
                             2610 ; 941  |
                             2611 ; 942  |
                             2612 ; 943  |
                             2613 ; 944  |/////////////////////////////////////////////////////////////////////////////////
                             2614 ; 945  |//  DAC Sample Rate Register (HW_DACSRR) Bit Definitions
                             2615 ; 946  |#define HW_DACSRR_SR_BITPOS 0
                             2616 ; 947  |
                             2617 ; 948  |#define HW_DACSRR_SR_WIDTH (23)
                             2618 ; 949  |#define HW_DACSRR_RSVD_WIDTH (1)
                             2619 ; 950  |
                             2620 ; 951  |//HW_DACSRR_SR_SETMASK                    equ     $FFFFFF<<HW_DACSRR_SR_BITPOS
                             2621 ; 952  |#define HW_DACSRR_SR_SETMASK (((1<<HW_DACSRR_SR_WIDTH)-1)<<HW_DACSRR_SR_BITPOS)        
                             2622 ; 953  |
                             2623 ; 954  |#define HW_DACSRR_SR_CLRMASK ~(WORD)HW_DACSRR_SR_SETMASK
                             2624 ; 955  |
                             2625 ; 956  |typedef union               
                             2626 ; 957  |{
                             2627 ; 958  |    struct {
                             2628 ; 959  |        int SR                          : HW_DACSRR_SR_WIDTH;
                             2629 ; 960  |        int RSVD                        : HW_DACSRR_RSVD_WIDTH;
                             2630 ; 961  |    } B;
                             2631 ; 962  |    int I;
                             2632 ; 963  |    unsigned int U;
                             2633 ; 964  |} dac_srr_type;
                             2634 ; 965  |#define HW_DACSRR      (*(volatile dac_srr_type _X*) (HW_DAC_BASEADDR+1))
                             2635 ; 966  |
                             2636 ; 967  |
                             2637 ; 968  |
                             2638 ; 969  |/////////////////////////////////////////////////////////////////////////////////
                             2639 ; 970  |//  DAC Word Count Register (HW_DACWCR) Bit Definitions
                             2640 ; 971  |#define HW_DACWCR_WCR_BITPOS 0
                             2641 ; 972  |
                             2642 ; 973  |#define HW_DACWCR_WCR_WIDTH (10)
                             2643 ; 974  |#define HW_DACWCR_RSVD_WIDTH (12)
                             2644 ; 975  |
                             2645 ; 976  |//HW_DACWCR_WCR_SETMASK                   equ     $3FF<<HW_DACWCR_WCR_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  44

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2646 ; 977  |#define HW_DACWCR_WCR_SETMASK (((1<<HW_DACWCR_WCR_WIDTH)-1)<<HW_DACWCR_WCR_BITPOS)        
                                  
                             2647 ; 978  |
                             2648 ; 979  |#define HW_DACWCR_WCR_CLRMASK ~(WORD)HW_DACWCR_WCR_SETMASK
                             2649 ; 980  |
                             2650 ; 981  |typedef union               
                             2651 ; 982  |{
                             2652 ; 983  |    struct {
                             2653 ; 984  |        int WCR                         : HW_DACWCR_WCR_WIDTH;
                             2654 ; 985  |        int RSVD                        : HW_DACWCR_RSVD_WIDTH;
                             2655 ; 986  |    } B;
                             2656 ; 987  |    int I;
                             2657 ; 988  |    unsigned int U;
                             2658 ; 989  |} dac_wcr_type;
                             2659 ; 990  |#define HW_DACWCR      (*(volatile dac_wcr_type _X*) (HW_DAC_BASEADDR+2))
                             2660 ; 991  |
                             2661 ; 992  |
                             2662 ; 993  |
                             2663 ; 994  |/////////////////////////////////////////////////////////////////////////////////
                             2664 ; 995  |//  DAC Current Position Register (HW_DACCPR) Bit Definitions
                             2665 ; 996  |#define HW_DACCPR_CPR_BITPOS 0
                             2666 ; 997  |
                             2667 ; 998  |#define HW_DACCPR_CPR_WIDTH (10)
                             2668 ; 999  |#define HW_DACCPR_RSVD_WIDTH (14)
                             2669 ; 1000 |
                             2670 ; 1001 |//HW_DACCPR_CPR_SETMASK                   equ     $3FF<<HW_DACCPR_CPR_BITPOS
                             2671 ; 1002 |#define HW_DACCPR_CPR_SETMASK (((1<<HW_DACCPR_CPR_WIDTH)-1)<<HW_DACCPR_CPR_BITPOS)        
                                  
                             2672 ; 1003 |
                             2673 ; 1004 |#define HW_DACCPR_CPR_CLRMASK ~(WORD)HW_DACCPR_CPR_SETMASK
                             2674 ; 1005 |
                             2675 ; 1006 |typedef union               
                             2676 ; 1007 |{
                             2677 ; 1008 |    struct {
                             2678 ; 1009 |        int CPR                         : HW_DACCPR_CPR_WIDTH;
                             2679 ; 1010 |        int RSVD                        : HW_DACCPR_RSVD_WIDTH;
                             2680 ; 1011 |    } B;
                             2681 ; 1012 |    int I;
                             2682 ; 1013 |    unsigned int U;
                             2683 ; 1014 |} dac_cpr_type;
                             2684 ; 1015 |#define HW_DACCPR      (*(volatile dac_cpr_type _X*) (HW_DAC_BASEADDR+3))
                             2685 ; 1016 |
                             2686 ; 1017 |
                             2687 ; 1018 |
                             2688 ; 1019 |/////////////////////////////////////////////////////////////////////////////////
                             2689 ; 1020 |//  DAC Modulo Register (HW_DACMR) Bit Definitions
                             2690 ; 1021 |#define HW_DACMR_MR_BITPOS 0
                             2691 ; 1022 |#define HW_DACMR_MR_WIDTH (10)
                             2692 ; 1023 |#define HW_DACMR_RSVD_WIDTH (14)
                             2693 ; 1024 |
                             2694 ; 1025 |//HW_DACMR_MR_SETMASK                     equ     $3FF<<HW_DACMR_MR_BITPOS
                             2695 ; 1026 |#define HW_DACMR_MR_SETMASK (((1<<HW_DACMR_MR_WIDTH)-1)<<HW_DACMR_MR_BITPOS)        
                             2696 ; 1027 |
                             2697 ; 1028 |#define HW_DACMR_MR_CLRMASK ~(WORD)HW_DACMR_MR_SETMASK
                             2698 ; 1029 |
                             2699 ; 1030 |typedef union               
                             2700 ; 1031 |{
                             2701 ; 1032 |    struct {
                             2702 ; 1033 |        int MR                         : HW_DACMR_MR_WIDTH;
                             2703 ; 1034 |        int RSVD                       : HW_DACMR_RSVD_WIDTH;
                             2704 ; 1035 |    } B;
                             2705 ; 1036 |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  45

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2706 ; 1037 |    unsigned int U;
                             2707 ; 1038 |} dac_mr_type;
                             2708 ; 1039 |#define HW_DACMR      (*(volatile dac_mr_type _X*) (HW_DAC_BASEADDR+4))
                             2709 ; 1040 |
                             2710 ; 1041 |
                             2711 ; 1042 |
                             2712 ; 1043 |/////////////////////////////////////////////////////////////////////////////////
                             2713 ; 1044 |//   DAC Base Address Register (HW_DACBAR) Bit Definitions
                             2714 ; 1045 |#define HW_DACBAR_BAR_BITPOS 0
                             2715 ; 1046 |#define HW_DACBAR_BAR_WIDTH (16)
                             2716 ; 1047 |#define HW_DACBAR_RSVD_WIDTH (8)
                             2717 ; 1048 |
                             2718 ; 1049 |//HW_DACBAR_BAR_SETMASK                   equ     $FFFF<<HW_DACBAR_BAR_BITPOS
                             2719 ; 1050 |#define HW_DACBAR_BAR_SETMASK (((1<<HW_DACBAR_BAR_WIDTH)-1)<<HW_DACBAR_BAR_BITPOS)        
                                  
                             2720 ; 1051 |
                             2721 ; 1052 |#define HW_DACBAR_BAR_CLRMASK ~(WORD)HW_DACBAR_BAR_SETMASK
                             2722 ; 1053 |
                             2723 ; 1054 |typedef union               
                             2724 ; 1055 |{
                             2725 ; 1056 |    struct {
                             2726 ; 1057 |        int BAR                        : HW_DACBAR_BAR_WIDTH;
                             2727 ; 1058 |        int RSVD                       : HW_DACBAR_RSVD_WIDTH;
                             2728 ; 1059 |    } B;
                             2729 ; 1060 |    int I;
                             2730 ; 1061 |    unsigned int U;
                             2731 ; 1062 |} dac_bar_type;
                             2732 ; 1063 |#define HW_DACBAR      (*(volatile dac_bar_type _X*) (HW_DAC_BASEADDR+5))
                             2733 ; 1064 |
                             2734 ; 1065 |
                             2735 ; 1066 |
                             2736 ; 1067 |/////////////////////////////////////////////////////////////////////////////////
                             2737 ; 1068 |//  DAC Interrupt Control Register (HW_DACICR) Bit Definitions
                             2738 ; 1069 |#define HW_DACICR_IPT_BITPOS 0
                             2739 ; 1070 |
                             2740 ; 1071 |#define HW_DACICR_IPT_WIDTH (10)
                             2741 ; 1072 |#define HW_DACICR_RSVD_WIDTH (12)
                             2742 ; 1073 |
                             2743 ; 1074 |#define HW_DACICR_IPT_SETMASK (((1<<HW_DACICR_IPT_WIDTH)-1)<<HW_DACICR_IPT_BITPOS)        
                                  
                             2744 ; 1075 |
                             2745 ; 1076 |#define HW_DACICR_IPT_CLRMASK ~(WORD)HW_DACICR_IPT_SETMASK
                             2746 ; 1077 |
                             2747 ; 1078 |typedef union               
                             2748 ; 1079 |{
                             2749 ; 1080 |    struct {
                             2750 ; 1081 |        int IPT                         : HW_DACICR_IPT_WIDTH;
                             2751 ; 1082 |        int RSVD                        : HW_DACICR_RSVD_WIDTH;
                             2752 ; 1083 |    } B;
                             2753 ; 1084 |    int I;
                             2754 ; 1085 |    unsigned int U;
                             2755 ; 1086 |} dac_icr_type;
                             2756 ; 1087 |#define HW_DACICR      (*(volatile dac_icr_type _X*) (HW_DAC_BASEADDR+6))
                             2757 ; 1088 |
                             2758 ; 1089 |
                             2759 ; 1090 |
                             2760 ; 1091 |
                             2761 ; 1092 |
                             2762 ; 1093 |/////////////////////////////////////////////////////////////////////////////////
                             2763 ; 1094 |/////////////////////////////////////////////////////////////////////////////////
                             2764 ; 1095 |/////////////////////////////////////////////////////////////////////////////////
                             2765 ; 1096 |//////  ADC Registers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  46

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2766 ; 1097 |/////////////////////////////////////////////////////////////////////////////////
                             2767 ; 1098 |/////////////////////////////////////////////////////////////////////////////////
                             2768 ; 1099 |/////////////////////////////////////////////////////////////////////////////////
                             2769 ; 1100 |#define HW_ADC_BASEADDR 0xFB00
                             2770 ; 1101 |
                             2771 ; 1102 |
                             2772 ; 1103 |
                             2773 ; 1104 |/////////////////////////////////////////////////////////////////////////////////
                             2774 ; 1105 |//  ADC Control Status Register (HW_ADCCSR) Bit Definitions
                             2775 ; 1106 |#define HW_ADCCSR_TXEN_BITPOS 0
                             2776 ; 1107 |#define HW_ADCCSR_TXIEN_BITPOS 1
                             2777 ; 1108 |#define HW_ADCCSR_TXI_BITPOS 2
                             2778 ; 1109 |#define HW_ADCCSR_TXEXC_BITPOS 3
                             2779 ; 1110 |#define HW_ADCCSR_LPBK_BITPOS 4
                             2780 ; 1111 |#define HW_ADCCSR_DMASEL_BITPOS 5
                             2781 ; 1112 |#define HW_ADCCSR_LPFMODE_BITPOS 8
                             2782 ; 1113 |#define HW_ADCCSR_CLKGT_BITPOS 23
                             2783 ; 1114 |
                             2784 ; 1115 |#define HW_ADCCSR_TXEN_WIDTH (1)
                             2785 ; 1116 |#define HW_ADCCSR_TXIEN_WIDTH (1)
                             2786 ; 1117 |#define HW_ADCCSR_TXI_WIDTH (1)
                             2787 ; 1118 |#define HW_ADCCSR_TXEXC_WIDTH (1)
                             2788 ; 1119 |#define HW_ADCCSR_LPBK_WIDTH (1)
                             2789 ; 1120 |#define HW_ADCCSR_DMASEL_WIDTH (2)
                             2790 ; 1121 |#define HW_ADCCSR_RSVD1_WIDTH (1)
                             2791 ; 1122 |#define HW_ADCCSR_LPFMODE_WIDTH (4)
                             2792 ; 1123 |#define HW_ADCCSR_RSVD2_WIDTH (11)
                             2793 ; 1124 |#define HW_ADCCSR_CLKGT_WIDTH (1)
                             2794 ; 1125 |
                             2795 ; 1126 |#define HW_ADCCSR_TXEN_SETMASK 1<<HW_ADCCSR_TXEN_BITPOS
                             2796 ; 1127 |#define HW_ADCCSR_TXIEN_SETMASK 1<<HW_ADCCSR_TXIEN_BITPOS
                             2797 ; 1128 |#define HW_ADCCSR_TXI_SETMASK 1<<HW_ADCCSR_TXI_BITPOS
                             2798 ; 1129 |#define HW_ADCCSR_TXEXC_SETMASK 1<<HW_ADCCSR_TXEXC_BITPOS
                             2799 ; 1130 |#define HW_ADCCSR_LPBK_SETMASK 1<<HW_ADCCSR_LPBK_BITPOS
                             2800 ; 1131 |#define HW_ADCCSR_DMASEL_SETMASK (((1<<HW_ADCCSR_DMASEL_WIDTH)-1)<<HW_ADCCSR_DMASEL_BITPOS
                                  )        
                             2801 ; 1132 |#define HW_ADCCSR_LPFMODE_SETMASK (((1<<HW_ADCCSR_LPFMODE_WIDTH)-1)<<HW_ADCCSR_LPFMODE_BIT
                                  POS)        
                             2802 ; 1133 |#define HW_ADCCSR_CLKGT_SETMASK 1<<HW_ADCCSR_CLKGT_BITPOS
                             2803 ; 1134 |
                             2804 ; 1135 |#define HW_ADCCSR_TXEN_CLRMASK ~(WORD)HW_ADCCSR_TXEN_SETMASK
                             2805 ; 1136 |#define HW_ADCCSR_TXIEN_CLRMASK ~(WORD)HW_ADCCSR_TXIEN_SETMASK
                             2806 ; 1137 |#define HW_ADCCSR_TXI_CLRMASK ~(WORD)HW_ADCCSR_TXI_SETMASK
                             2807 ; 1138 |#define HW_ADCCSR_TXEXC_CLRMASK ~(WORD)HW_ADCCSR_TXEXC_SETMASK
                             2808 ; 1139 |#define HW_ADCCSR_LPBK_CLRMASK ~(WORD)HW_ADCCSR_LPBK_SETMASK
                             2809 ; 1140 |#define HW_ADCCSR_DMASEL_CLRMASK ~(WORD)HW_ADCCSR_DMASEL_SETMASK
                             2810 ; 1141 |#define HW_ADCCSR_LPFMODE_CLRMASK ~(WORD)HW_ADCCSR_LPFMODE_SETMASK
                             2811 ; 1142 |#define HW_ADCCSR_CLKGT_CLRMASK ~(WORD)HW_ADCCSR_CLKGT_SETMASK
                             2812 ; 1143 |
                             2813 ; 1144 |typedef union               
                             2814 ; 1145 |{
                             2815 ; 1146 |    struct {
                             2816 ; 1147 |        int TXEN                        : HW_ADCCSR_TXEN_WIDTH;
                             2817 ; 1148 |        int TXIEN                       : HW_ADCCSR_TXIEN_WIDTH;
                             2818 ; 1149 |        int TXI                         : HW_ADCCSR_TXI_WIDTH;
                             2819 ; 1150 |        int TXEXC                       : HW_ADCCSR_TXEXC_WIDTH;
                             2820 ; 1151 |        int LPBK                        : HW_ADCCSR_LPBK_WIDTH;
                             2821 ; 1152 |        int RSVD1                       : HW_ADCCSR_RSVD1_WIDTH;
                             2822 ; 1153 |        int DMASEL                      : HW_ADCCSR_DMASEL_WIDTH;
                             2823 ; 1154 |        int LPFMODE                     : HW_ADCCSR_LPFMODE_WIDTH;
                             2824 ; 1155 |        int RSVD2                       : HW_ADCCSR_RSVD2_WIDTH;
                             2825 ; 1156 |        int CLKGT                       : HW_ADCCSR_CLKGT_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  47

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2826 ; 1157 |    } B;
                             2827 ; 1158 |    int I;
                             2828 ; 1159 |    unsigned int U;
                             2829 ; 1160 |} adc_csr_type;
                             2830 ; 1161 |#define HW_ADCCSR (*(volatile adc_csr_type _X*) (HW_ADC_BASEADDR+0))
                             2831 ; 1162 |
                             2832 ; 1163 |
                             2833 ; 1164 |/////////////////////////////////////////////////////////////////////////////////
                             2834 ; 1165 |//  ADC Word Count Register (HW_ADCWCR) Bit Definitions
                             2835 ; 1166 |#define HW_ADCWCR_WCR_BITPOS 0
                             2836 ; 1167 |
                             2837 ; 1168 |#define HW_ADCWCR_WCR_WIDTH (10)
                             2838 ; 1169 |#define HW_ADCWCR_RSVD_WIDTH (14)
                             2839 ; 1170 |
                             2840 ; 1171 |#define HW_ADCWCR_WCR_SETMASK (((1<<HW_ADCWCR_WCR_WIDTH)-1)<<HW_ADCWCR_WCR_BITPOS)        
                                  
                             2841 ; 1172 |
                             2842 ; 1173 |#define HW_ADCWCR_WCR_CLRMASK ~(WORD)HW_ADCWCR_WCR_SETMASK
                             2843 ; 1174 |
                             2844 ; 1175 |typedef union               
                             2845 ; 1176 |{
                             2846 ; 1177 |    struct {
                             2847 ; 1178 |        int WCR                         : HW_ADCWCR_WCR_WIDTH;
                             2848 ; 1179 |        int RSVD                        : HW_ADCWCR_RSVD_WIDTH;
                             2849 ; 1180 |    } B;
                             2850 ; 1181 |    int I;
                             2851 ; 1182 |    unsigned int U;
                             2852 ; 1183 |} adc_wcr_type;
                             2853 ; 1184 |#define HW_ADCWCR (*(volatile adc_wcr_type _X*) (HW_ADC_BASEADDR+2))
                             2854 ; 1185 |
                             2855 ; 1186 |
                             2856 ; 1187 |
                             2857 ; 1188 |/////////////////////////////////////////////////////////////////////////////////
                             2858 ; 1189 |//   ADC Base Address Register (HW_ADCBAR) Bit Definitions
                             2859 ; 1190 |#define HW_ADCBAR_BAR_BITPOS 0
                             2860 ; 1191 |#define HW_ADCBAR_BAR_WIDTH (16)
                             2861 ; 1192 |#define HW_ADCBAR_RSVD_WIDTH (8)
                             2862 ; 1193 |
                             2863 ; 1194 |//HW_ADCBAR_BAR_SETMASK                   equ     $FFFF<<HW_ADCBAR_BAR_BITPOS
                             2864 ; 1195 |#define HW_ADCBAR_BAR_SETMASK (((1<<HW_ADCBAR_BAR_WIDTH)-1)<<HW_ADCBAR_BAR_BITPOS)        
                                  
                             2865 ; 1196 |
                             2866 ; 1197 |#define HW_ADCBAR_BAR_CLRMASK ~(WORD)HW_ADCBAR_BAR_SETMASK
                             2867 ; 1198 |
                             2868 ; 1199 |typedef union               
                             2869 ; 1200 |{
                             2870 ; 1201 |    struct {
                             2871 ; 1202 |        int BAR                        : HW_ADCBAR_BAR_WIDTH;
                             2872 ; 1203 |        int RSVD                       : HW_ADCBAR_RSVD_WIDTH;
                             2873 ; 1204 |    } B;
                             2874 ; 1205 |    int I;
                             2875 ; 1206 |    unsigned int U;
                             2876 ; 1207 |} adc_bar_type;
                             2877 ; 1208 |#define HW_ADCBAR (*(volatile adc_bar_type _X*) (HW_ADC_BASEADDR+5))
                             2878 ; 1209 |
                             2879 ; 1210 |
                             2880 ; 1211 |
                             2881 ; 1212 |
                             2882 ; 1213 |
                             2883 ; 1214 |/////////////////////////////////////////////////////////////////////////////////
                             2884 ; 1215 |//  DAC Current Position Register (HW_ADCCPR) Bit Definitions
                             2885 ; 1216 |#define HW_ADCCPR_CPR_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  48

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2886 ; 1217 |
                             2887 ; 1218 |#define HW_ADCCPR_CPR_WIDTH (10)
                             2888 ; 1219 |#define HW_ADCCPR_RSVD_WIDTH (14)
                             2889 ; 1220 |
                             2890 ; 1221 |#define HW_ADCCPR_CPR_SETMASK (((1<<HW_ADCCPR_CPR_WIDTH)-1)<<HW_ADCCPR_CPR_BITPOS)        
                                  
                             2891 ; 1222 |
                             2892 ; 1223 |#define HW_ADCCPR_CPR_CLRMASK ~(WORD)HW_ADCCPR_CPR_SETMASK
                             2893 ; 1224 |
                             2894 ; 1225 |typedef union               
                             2895 ; 1226 |{
                             2896 ; 1227 |    struct {
                             2897 ; 1228 |        int CPR                         : HW_ADCCPR_CPR_WIDTH;
                             2898 ; 1229 |        int RSVD                        : HW_ADCCPR_RSVD_WIDTH;
                             2899 ; 1230 |    } B;
                             2900 ; 1231 |    int I;
                             2901 ; 1232 |    unsigned int U;
                             2902 ; 1233 |} adc_cpr_type;
                             2903 ; 1234 |#define HW_ADCCPR (*(volatile adc_cpr_type _X*) (HW_ADC_BASEADDR+3))
                             2904 ; 1235 |
                             2905 ; 1236 |
                             2906 ; 1237 |/////////////////////////////////////////////////////////////////////////////////
                             2907 ; 1238 |//  ADC Modulo Register (HW_ADCMR) Bit Definitions
                             2908 ; 1239 |#define HW_ADCMR_MR_BITPOS 0
                             2909 ; 1240 |#define HW_ADCMR_MR_WIDTH (10)
                             2910 ; 1241 |#define HW_ADCMR_RSVD_WIDTH (14)
                             2911 ; 1242 |
                             2912 ; 1243 |//HW_ADCMR_MR_SETMASK                     equ     $3FF<<HW_ADCMR_MR_BITPOS
                             2913 ; 1244 |#define HW_ADCMR_MR_SETMASK (((1<<HW_ADCMR_MR_WIDTH)-1)<<HW_ADCMR_MR_BITPOS)        
                             2914 ; 1245 |
                             2915 ; 1246 |#define HW_ADCMR_MR_CLRMASK ~(WORD)HW_ADCMR_MR_SETMASK
                             2916 ; 1247 |
                             2917 ; 1248 |typedef union               
                             2918 ; 1249 |{
                             2919 ; 1250 |    struct {
                             2920 ; 1251 |        int MR                         : HW_ADCMR_MR_WIDTH;
                             2921 ; 1252 |        int RSVD                       : HW_ADCMR_RSVD_WIDTH;
                             2922 ; 1253 |    } B;
                             2923 ; 1254 |    int I;
                             2924 ; 1255 |    unsigned int U;
                             2925 ; 1256 |} adc_mr_type;
                             2926 ; 1257 |#define HW_ADCMR (*(volatile adc_mr_type _X*) (HW_ADC_BASEADDR+4))
                             2927 ; 1258 |
                             2928 ; 1259 |/////////////////////////////////////////////////////////////////////////////////
                             2929 ; 1260 |//  ADC Sample Rate Register (HW_ADCSRR) Bit Definitions
                             2930 ; 1261 |#define HW_ADCSRR_SR_BITPOS 0
                             2931 ; 1262 |
                             2932 ; 1263 |#define HW_ADCSRR_SR_WIDTH (23)
                             2933 ; 1264 |#define HW_ADCSRR_RSVD_WIDTH (1)
                             2934 ; 1265 |
                             2935 ; 1266 |//HW_ADCSRR_SR_SETMASK                    equ     $FFFFFF<<HW_ADCSRR_SR_BITPOS
                             2936 ; 1267 |#define HW_ADCSRR_SR_SETMASK (((1<<HW_ADCSRR_SR_WIDTH)-1)<<HW_ADCSRR_SR_BITPOS)        
                             2937 ; 1268 |
                             2938 ; 1269 |#define HW_ADCSRR_SR_CLRMASK ~(WORD)HW_ADCSRR_SR_SETMASK
                             2939 ; 1270 |
                             2940 ; 1271 |typedef union               
                             2941 ; 1272 |{
                             2942 ; 1273 |    struct {
                             2943 ; 1274 |        int SR                          : HW_ADCSRR_SR_WIDTH;
                             2944 ; 1275 |        int RSVD                        : HW_ADCSRR_RSVD_WIDTH;
                             2945 ; 1276 |    } B;
                             2946 ; 1277 |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  49

M:ADDR CODE           CYCLES LINE SOURCELINE
                             2947 ; 1278 |    unsigned int U;
                             2948 ; 1279 |} adc_srr_type;
                             2949 ; 1280 |#define HW_ADCSRR (*(volatile adc_srr_type _X*) (HW_ADC_BASEADDR+1))
                             2950 ; 1281 |
                             2951 ; 1282 |/////////////////////////////////////////////////////////////////////////////////
                             2952 ; 1283 |//  ADC Interrupt Control Register (HW_ADCICR) Bit Definitions
                             2953 ; 1284 |#define HW_ADCICR_IPT_BITPOS 0
                             2954 ; 1285 |
                             2955 ; 1286 |#define HW_ADCICR_IPT_WIDTH (10)
                             2956 ; 1287 |#define HW_ADCICR_RSVD_WIDTH (12)
                             2957 ; 1288 |
                             2958 ; 1289 |#define HW_ADCICR_IPT_SETMASK (((1<<HW_ADCICR_IPT_WIDTH)-1)<<HW_ADCICR_IPT_BITPOS)        
                                  
                             2959 ; 1290 |
                             2960 ; 1291 |#define HW_ADCICR_IPT_CLRMASK ~(WORD)HW_ADCICR_IPT_SETMASK
                             2961 ; 1292 |
                             2962 ; 1293 |typedef union               
                             2963 ; 1294 |{
                             2964 ; 1295 |    struct {
                             2965 ; 1296 |        int IPT                         : HW_ADCICR_IPT_WIDTH;
                             2966 ; 1297 |        int RSVD                        : HW_ADCICR_RSVD_WIDTH;
                             2967 ; 1298 |    } B;
                             2968 ; 1299 |    int I;
                             2969 ; 1300 |    unsigned int U;
                             2970 ; 1301 |} adc_icr_type;
                             2971 ; 1302 |#define HW_ADCICR (*(volatile adc_icr_type _X*) (HW_ADC_BASEADDR+6))
                             2972 ; 1303 |
                             2973 ; 1304 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             2974 ; 1305 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             2975 ; 1306 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             2976 ; 1307 |
                             2977 ; 1308 |#define HW_MIXTBR_PW_ADC_RIGHT_CH_BITPOS 16
                             2978 ; 1309 |
                             2979 ; 1310 |#define HW_MIXLINE1INVR_GN_ZERO_SETMASK 0x808
                             2980 ; 1311 |
                             2981 ; 1312 |#endif
                             2982 ; 1313 |
                             2983 
                             2985 
                             2986 ; 20   |#include "regsdcdc.h"
                             2987 
                             2989 
                             2990 ; 1    |#if !(defined(regsdcdcinc))
                             2991 ; 2    |
                             2992 ; 3    |#define regssysteminc 1
                             2993 ; 4    |
                             2994 ; 5    |
                             2995 ; 6    |
                             2996 ; 7    |#include "types.h"
                             2997 
                             2999 
                             3000 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             3001 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             3002 ; 3    |//
                             3003 ; 4    |// Filename: types.h
                             3004 ; 5    |// Description: Standard data types
                             3005 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             3006 ; 7    |
                             3007 ; 8    |#ifndef _TYPES_H
                             3008 ; 9    |#define _TYPES_H
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  50

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3009 ; 10   |
                             3010 ; 11   |// TODO:  move this outta here!
                             3011 ; 12   |#if !defined(NOERROR)
                             3012 ; 13   |#define NOERROR 0
                             3013 ; 14   |#define SUCCESS 0
                             3014 ; 15   |#endif 
                             3015 ; 16   |#if !defined(SUCCESS)
                             3016 ; 17   |#define SUCCESS  0
                             3017 ; 18   |#endif
                             3018 ; 19   |#if !defined(ERROR)
                             3019 ; 20   |#define ERROR   -1
                             3020 ; 21   |#endif
                             3021 ; 22   |#if !defined(FALSE)
                             3022 ; 23   |#define FALSE 0
                             3023 ; 24   |#endif
                             3024 ; 25   |#if !defined(TRUE)
                             3025 ; 26   |#define TRUE  1
                             3026 ; 27   |#endif
                             3027 ; 28   |
                             3028 ; 29   |#if !defined(NULL)
                             3029 ; 30   |#define NULL 0
                             3030 ; 31   |#endif
                             3031 ; 32   |
                             3032 ; 33   |#define MAX_INT     0x7FFFFF
                             3033 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             3034 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             3035 ; 36   |#define MAX_ULONG   (-1) 
                             3036 ; 37   |
                             3037 ; 38   |#define WORD_SIZE   24              // word size in bits
                             3038 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             3039 ; 40   |
                             3040 ; 41   |
                             3041 ; 42   |#define BYTE    unsigned char       // btVarName
                             3042 ; 43   |#define CHAR    signed char         // cVarName
                             3043 ; 44   |#define USHORT  unsigned short      // usVarName
                             3044 ; 45   |#define SHORT   unsigned short      // sVarName
                             3045 ; 46   |#define WORD    unsigned int        // wVarName
                             3046 ; 47   |#define INT     signed int          // iVarName
                             3047 ; 48   |#define DWORD   unsigned long       // dwVarName
                             3048 ; 49   |#define LONG    signed long         // lVarName
                             3049 ; 50   |#define BOOL    unsigned int        // bVarName
                             3050 ; 51   |#define FRACT   _fract              // frVarName
                             3051 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             3052 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             3053 ; 54   |#define FLOAT   float               // fVarName
                             3054 ; 55   |#define DBL     double              // dVarName
                             3055 ; 56   |#define ENUM    enum                // eVarName
                             3056 ; 57   |#define CMX     _complex            // cmxVarName
                             3057 ; 58   |typedef WORD UCS3;                   // 
                             3058 ; 59   |
                             3059 ; 60   |#define UINT16  unsigned short
                             3060 ; 61   |#define UINT8   unsigned char   
                             3061 ; 62   |#define UINT32  unsigned long
                             3062 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3063 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             3064 ; 65   |#define WCHAR   UINT16
                             3065 ; 66   |
                             3066 ; 67   |//UINT128 is 16 bytes or 6 words
                             3067 ; 68   |typedef struct UINT128_3500 {   
                             3068 ; 69   |    int val[6];     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  51

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3069 ; 70   |} UINT128_3500;
                             3070 ; 71   |
                             3071 ; 72   |#define UINT128   UINT128_3500
                             3072 ; 73   |
                             3073 ; 74   |// Little endian word packed byte strings:   
                             3074 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3075 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3076 ; 77   |// Little endian word packed byte strings:   
                             3077 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             3078 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             3079 ; 80   |
                             3080 ; 81   |// Declare Memory Spaces To Use When Coding
                             3081 ; 82   |// A. Sector Buffers
                             3082 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             3083 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             3084 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             3085 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             3086 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             3087 ; 88   |// B. Media DDI Memory
                             3088 ; 89   |#define MEDIA_DDI_MEM _Y
                             3089 ; 90   |
                             3090 ; 91   |
                             3091 ; 92   |
                             3092 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             3093 ; 94   |// Examples of circular pointers:
                             3094 ; 95   |//    INT CIRC cpiVarName
                             3095 ; 96   |//    DWORD CIRC cpdwVarName
                             3096 ; 97   |
                             3097 ; 98   |#define RETCODE INT                 // rcVarName
                             3098 ; 99   |
                             3099 ; 100  |// generic bitfield structure
                             3100 ; 101  |struct Bitfield {
                             3101 ; 102  |    unsigned int B0  :1;
                             3102 ; 103  |    unsigned int B1  :1;
                             3103 ; 104  |    unsigned int B2  :1;
                             3104 ; 105  |    unsigned int B3  :1;
                             3105 ; 106  |    unsigned int B4  :1;
                             3106 ; 107  |    unsigned int B5  :1;
                             3107 ; 108  |    unsigned int B6  :1;
                             3108 ; 109  |    unsigned int B7  :1;
                             3109 ; 110  |    unsigned int B8  :1;
                             3110 ; 111  |    unsigned int B9  :1;
                             3111 ; 112  |    unsigned int B10 :1;
                             3112 ; 113  |    unsigned int B11 :1;
                             3113 ; 114  |    unsigned int B12 :1;
                             3114 ; 115  |    unsigned int B13 :1;
                             3115 ; 116  |    unsigned int B14 :1;
                             3116 ; 117  |    unsigned int B15 :1;
                             3117 ; 118  |    unsigned int B16 :1;
                             3118 ; 119  |    unsigned int B17 :1;
                             3119 ; 120  |    unsigned int B18 :1;
                             3120 ; 121  |    unsigned int B19 :1;
                             3121 ; 122  |    unsigned int B20 :1;
                             3122 ; 123  |    unsigned int B21 :1;
                             3123 ; 124  |    unsigned int B22 :1;
                             3124 ; 125  |    unsigned int B23 :1;
                             3125 ; 126  |};
                             3126 ; 127  |
                             3127 ; 128  |union BitInt {
                             3128 ; 129  |        struct Bitfield B;
                             3129 ; 130  |        int        I;
                             3130 ; 131  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  52

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3131 ; 132  |
                             3132 ; 133  |#define MAX_MSG_LENGTH 10
                             3133 ; 134  |struct CMessage
                             3134 ; 135  |{
                             3135 ; 136  |        unsigned int m_uLength;
                             3136 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             3137 ; 138  |};
                             3138 ; 139  |
                             3139 ; 140  |typedef struct {
                             3140 ; 141  |    WORD m_wLength;
                             3141 ; 142  |    WORD m_wMessage;
                             3142 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             3143 ; 144  |} Message;
                             3144 ; 145  |
                             3145 ; 146  |struct MessageQueueDescriptor
                             3146 ; 147  |{
                             3147 ; 148  |        int *m_pBase;
                             3148 ; 149  |        int m_iModulo;
                             3149 ; 150  |        int m_iSize;
                             3150 ; 151  |        int *m_pHead;
                             3151 ; 152  |        int *m_pTail;
                             3152 ; 153  |};
                             3153 ; 154  |
                             3154 ; 155  |struct ModuleEntry
                             3155 ; 156  |{
                             3156 ; 157  |    int m_iSignaledEventMask;
                             3157 ; 158  |    int m_iWaitEventMask;
                             3158 ; 159  |    int m_iResourceOfCode;
                             3159 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             3160 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             3161 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             3162 ; 163  |    int m_uTimeOutHigh;
                             3163 ; 164  |    int m_uTimeOutLow;
                             3164 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             3165 ; 166  |};
                             3166 ; 167  |
                             3167 ; 168  |union WaitMask{
                             3168 ; 169  |    struct B{
                             3169 ; 170  |        unsigned int m_bNone     :1;
                             3170 ; 171  |        unsigned int m_bMessage  :1;
                             3171 ; 172  |        unsigned int m_bTimer    :1;
                             3172 ; 173  |        unsigned int m_bButton   :1;
                             3173 ; 174  |    } B;
                             3174 ; 175  |    int I;
                             3175 ; 176  |} ;
                             3176 ; 177  |
                             3177 ; 178  |
                             3178 ; 179  |struct Button {
                             3179 ; 180  |        WORD wButtonEvent;
                             3180 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             3181 ; 182  |};
                             3182 ; 183  |
                             3183 ; 184  |struct Message {
                             3184 ; 185  |        WORD wMsgLength;
                             3185 ; 186  |        WORD wMsgCommand;
                             3186 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             3187 ; 188  |};
                             3188 ; 189  |
                             3189 ; 190  |union EventTypes {
                             3190 ; 191  |        struct CMessage msg;
                             3191 ; 192  |        struct Button Button ;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  53

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3192 ; 193  |        struct Message Message;
                             3193 ; 194  |};
                             3194 ; 195  |
                             3195 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             3196 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             3197 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             3198 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             3199 ; 200  |
                             3200 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             3201 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             3202 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             3203 ; 204  |
                             3204 ; 205  |#if DEBUG
                             3205 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             3206 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             3207 ; 208  |#else 
                             3208 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             3209 ; 210  |#define DebugBuildAssert(x)    
                             3210 ; 211  |#endif
                             3211 ; 212  |
                             3212 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             3213 ; 214  |//  #pragma asm
                             3214 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             3215 ; 216  |//  #pragma endasm
                             3216 ; 217  |
                             3217 ; 218  |
                             3218 ; 219  |#ifdef COLOR_262K
                             3219 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             3220 ; 221  |#elif defined(COLOR_65K)
                             3221 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             3222 ; 223  |#else
                             3223 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             3224 ; 225  |#endif
                             3225 ; 226  |    
                             3226 ; 227  |#endif // #ifndef _TYPES_H
                             3227 
                             3229 
                             3230 ; 8    |
                             3231 ; 9    |
                             3232 ; 10   |
                             3233 ; 11   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3234 ; 12   |
                             3235 ; 13   |//   SYSTEM STMP Registers 
                             3236 ; 14   |//      Last Edited 2.19.2003 M. May
                             3237 ; 15   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             3238 ; 16   |
                             3239 ; 17   |#define HW_DCDC_BASEADDR (0xFA0C)
                             3240 ; 18   |
                             3241 ; 19   |
                             3242 ; 20   |
                             3243 ; 21   |
                             3244 ; 22   |
                             3245 ; 23   |
                             3246 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                             3247 ; 25   |
                             3248 ; 26   |//  DcDc#1 Control Register (HW_DCDC1_CTRL0) Bit Definitions
                             3249 ; 27   |
                             3250 ; 28   |#define HW_DCDC1_CTRL0_PLEVBU_WIDTH (5)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  54

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3251 ; 29   |#define HW_DCDC1_CTRL0_RSVD0_WIDTH (3)
                             3252 ; 30   |#define HW_DCDC1_CTRL0_PLEVBO_WIDTH (5)
                             3253 ; 31   |#define HW_DCDC1_CTRL0_RSVD1_WIDTH (3)
                             3254 ; 32   |#define HW_DCDC1_CTRL0_NLEV_WIDTH (5)
                             3255 ; 33   |
                             3256 ; 34   |#define HW_DCDC1_CTRL0_RSVD2_WIDTH (3)
                             3257 ; 35   |
                             3258 ; 36   |
                             3259 ; 37   |
                             3260 ; 38   |#define HW_DCDC1_CTRL0_PLEVBU_BITPOS (0)
                             3261 ; 39   |#define HW_DCDC1_CTRL0_PLEVBO_BITPOS (8)
                             3262 ; 40   |#define HW_DCDC1_CTRL0_NLEV_BITPOS (16)
                             3263 ; 41   |
                             3264 ; 42   |
                             3265 ; 43   |
                             3266 ; 44   |#define HW_DCDC1_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBU_BITPOS)        
                             3267 ; 45   |#define HW_DCDC1_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC1_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC1_CTRL
                                  0_PLEVBO_BITPOS) 
                             3268 ; 46   |#define HW_DCDC1_CTRL0_NLEV_SETMASK (((1<<HW_DCDC1_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC1_CTRL0_NL
                                  EV_BITPOS)  
                             3269 ; 47   |
                             3270 ; 48   |
                             3271 ; 49   |
                             3272 ; 50   |#define HW_DCDC1_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBU_SETMASK)     
                             3273 ; 51   |#define HW_DCDC1_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC1_CTRL0_PLEVBO_SETMASK) 
                             3274 ; 52   |#define HW_DCDC1_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC1_CTRL0_NLEV_SETMASK)  
                             3275 ; 53   |
                             3276 ; 54   |
                             3277 ; 55   |
                             3278 ; 56   |
                             3279 ; 57   |
                             3280 ; 58   |typedef union               
                             3281 ; 59   |{
                             3282 ; 60   |    struct {
                             3283 ; 61   |        unsigned int PLEVBU           : HW_DCDC1_CTRL0_PLEVBU_WIDTH;
                             3284 ; 62   |        unsigned int RSVD0            : HW_DCDC1_CTRL0_RSVD0_WIDTH;
                             3285 ; 63   |        unsigned int PLEVBO           : HW_DCDC1_CTRL0_PLEVBO_WIDTH;
                             3286 ; 64   |        unsigned int RSVD1            : HW_DCDC1_CTRL0_RSVD1_WIDTH;
                             3287 ; 65   |        unsigned int NLEV             : HW_DCDC1_CTRL0_NLEV_WIDTH;
                             3288 ; 66   |        unsigned int RSVD2            : HW_DCDC1_CTRL0_RSVD2_WIDTH;
                             3289 ; 67   |    } B;
                             3290 ; 68   |    unsigned int I;
                             3291 ; 69   |} dcdc1_ctrl0_type;
                             3292 ; 70   |#define HW_DCDC1_CTRL0      (*(volatile dcdc1_ctrl0_type _X*) (HW_DCDC_BASEADDR))    /* Dc
                                  Dc#1 Limit Level Register */
                             3293 ; 71   |
                             3294 ; 72   |
                             3295 ; 73   |
                             3296 ; 74   |
                             3297 ; 75   |/////////////////////////////////////////////////////////////////////////////////
                             3298 ; 76   |
                             3299 ; 77   |//  DCDc#1 Control Register1 (HW_DCDC1_CTRL1) Bit Definitions
                             3300 ; 78   |
                             3301 ; 79   |#define HW_DCDC1_CTRL1_C_WIDTH (4)
                             3302 ; 80   |#define HW_DCDC1_CTRL1_R_WIDTH (4)
                             3303 ; 81   |#define HW_DCDC1_CTRL1_FFOR_WIDTH (3)
                             3304 ; 82   |#define HW_DCDC1_CTRL1_RSVD0_WIDTH (1)
                             3305 ; 83   |#define HW_DCDC1_CTRL1_PFMCTRL_WIDTH (12)
                             3306 ; 84   |
                             3307 ; 85   |
                             3308 ; 86   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  55

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3309 ; 87   |#define HW_DCDC1_CTRL1_C_BITPOS (0)
                             3310 ; 88   |#define HW_DCDC1_CTRL1_R_BITPOS (4)
                             3311 ; 89   |#define HW_DCDC1_CTRL1_FFOR_BITPOS (8)
                             3312 ; 90   |#define HW_DCDC1_CTRL1_PFMCTRL_BITPOS (12) 
                             3313 ; 91   |
                             3314 ; 92   |#define HW_DCDC1_CTRL1_C_SETMASK (((1<<HW_DCDC1_CTRL1_C_WIDTH)-1)<<HW_DCDC1_CTRL1_C_BITPOS
                                  )        
                             3315 ; 93   |#define HW_DCDC1_CTRL1_R_SETMASK (((1<<HW_DCDC1_CTRL1_R_WIDTH)-1)<<HW_DCDC1_CTRL1_R_BITPOS
                                  ) 
                             3316 ; 94   |#define HW_DCDC1_CTRL1_FFOR_SETMASK (((1<<HW_DCDC1_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC1_CTRL1_FF
                                  OR_BITPOS)  
                             3317 ; 95   |#define HW_DCDC1_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC1_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC1_CT
                                  RL1_PFMCTRL_BITPOS)   
                             3318 ; 96   |
                             3319 ; 97   |#define HW_DCDC1_CTRL1_C_CLRMASK (~(WORD)HW_DCDC1_CTRL1_C_SETMASK)     
                             3320 ; 98   |#define HW_DCDC1_CTRL1_R_CLRMASK (~(WORD)HW_DCDC1_CTRL1_R_SETMASK) 
                             3321 ; 99   |#define HW_DCDC1_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC1_CTRL1_FFOR_SETMASK)  
                             3322 ; 100  |#define HW_DCDC1_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC1_CTRL1_PFMCTRL_SETMASK)  
                             3323 ; 101  |
                             3324 ; 102  |
                             3325 ; 103  |typedef union               
                             3326 ; 104  |{
                             3327 ; 105  |    struct {
                             3328 ; 106  |        unsigned int C       : HW_DCDC1_CTRL1_C_WIDTH;
                             3329 ; 107  |        unsigned int R                : HW_DCDC1_CTRL1_R_WIDTH;
                             3330 ; 108  |        unsigned int FFOR             : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             3331 ; 109  |        unsigned int RSVD0            : HW_DCDC1_CTRL1_RSVD0_WIDTH;
                             3332 ; 110  |        unsigned int PFMCTRL          : HW_DCDC1_CTRL1_FFOR_WIDTH;
                             3333 ; 111  |    } B;
                             3334 ; 112  |    unsigned int I;
                             3335 ; 113  |} dcdc1_ctrl1_type;
                             3336 ; 114  |#define HW_DCDC1_CTRL1      (*(volatile dcdc1_ctrl1_type _X*) (HW_DCDC_BASEADDR+1))    /* 
                                  DcDc#1 Ctrl #1 Register */
                             3337 ; 115  |
                             3338 ; 116  |
                             3339 ; 117  |
                             3340 ; 118  |
                             3341 ; 119  |/////////////////////////////////////////////////////////////////////////////////
                             3342 ; 120  |
                             3343 ; 121  |//  DcDc VDDIO Register (HW_DCDC_VDDIO) Bit Definitions
                             3344 ; 122  |
                             3345 ; 123  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH (5)
                             3346 ; 124  |#define HW_DCDC_VDDIO_RSVD0_WIDTH (3)
                             3347 ; 125  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH (5)
                             3348 ; 126  |#define HW_DCDC_VDDIO_RSVD1_WIDTH (3)
                             3349 ; 127  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH (1)
                             3350 ; 128  |#define HW_DCDC_VDDIO_RSVD2_WIDTH (3)
                             3351 ; 129  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH (1)
                             3352 ; 130  |#define HW_DCDC_VDDIO_OK_WIDTH (1)
                             3353 ; 131  |#define HW_DCDC_VDDIO_RSVD3_WIDTH (2)
                             3354 ; 132  |
                             3355 ; 133  |
                             3356 ; 134  |
                             3357 ; 135  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS (0)
                             3358 ; 136  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS (8)
                             3359 ; 137  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS (16)
                             3360 ; 138  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS (20)
                             3361 ; 139  |#define HW_DCDC_VDDIO_OK_BITPOS (21)
                             3362 ; 140  |
                             3363 ; 141  |
                             3364 ; 142  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDIO_VOLTAGE_LEVEL_BITPOS)        
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  56

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3365 ; 143  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH)-1)<
                                  <HW_DCDC_VDDIO_BROWNOUT_LEVEL_BITPOS) 
                             3366 ; 144  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_ENABLE_BITPOS)  
                             3367 ; 145  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH)-1
                                  )<<HW_DCDC_VDDIO_BROWNOUT_STATUS_BITPOS)  
                             3368 ; 146  |
                             3369 ; 147  |
                             3370 ; 148  |
                             3371 ; 149  |#define HW_DCDC_VDDIO_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_VOLTAGE_LEVEL_SETMASK)  
                                     
                             3372 ; 150  |#define HW_DCDC_VDDIO_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_LEVEL_SETMASK)
                                   
                             3373 ; 151  |#define HW_DCDC_VDDIO_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_ENABLE_SETMAS
                                  K)  
                             3374 ; 152  |#define HW_DCDC_VDDIO_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDIO_BROWNOUT_STATUS_SETMAS
                                  K)  
                             3375 ; 153  |
                             3376 ; 154  |
                             3377 ; 155  |typedef union               
                             3378 ; 156  |{
                             3379 ; 157  |    struct {
                             3380 ; 158  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDIO_VOLTAGE_LEVEL_WIDTH;
                             3381 ; 159  |        unsigned int RSVD0            : HW_DCDC_VDDIO_RSVD0_WIDTH;
                             3382 ; 160  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDIO_BROWNOUT_LEVEL_WIDTH;
                             3383 ; 161  |        unsigned int RSVD1            : HW_DCDC_VDDIO_RSVD1_WIDTH;
                             3384 ; 162  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDIO_BROWNOUT_ENABLE_WIDTH;
                             3385 ; 163  |        unsigned int RSVD2            : HW_DCDC_VDDIO_RSVD2_WIDTH;
                             3386 ; 164  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDIO_BROWNOUT_STATUS_WIDTH;
                             3387 ; 165  |                 unsigned int VDDIO_OK        : HW_DCDC_VDDIO_OK_WIDTH;
                             3388 ; 166  |        unsigned int RSVD3            : HW_DCDC_VDDIO_RSVD3_WIDTH;
                             3389 ; 167  |    } B;
                             3390 ; 168  |    unsigned int I;
                             3391 ; 169  |} dcdc_vddio_type;
                             3392 ; 170  |#define HW_DCDC_VDDIO      (*(volatile dcdc_vddio_type _X*) (HW_DCDC_BASEADDR+2))    /* Dc
                                  Dc VDDIO Register */
                             3393 ; 171  |
                             3394 ; 172  |
                             3395 ; 173  |
                             3396 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                             3397 ; 175  |//  DcDc VDDD Register (HW_DCDC_VDDD) Bit Definitions
                             3398 ; 176  |
                             3399 ; 177  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH (5)
                             3400 ; 178  |#define HW_DCDC_VDDD_RSVD0_WIDTH (3)
                             3401 ; 179  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH (5)
                             3402 ; 180  |#define HW_DCDC_VDDD_RSVD1_WIDTH (3)
                             3403 ; 181  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH (1)
                             3404 ; 182  |#define HW_DCDC_VDDD_RSVD2_WIDTH (3)
                             3405 ; 183  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH (1)
                             3406 ; 184  |#define HW_DCDC_VDDD_OK_WIDTH (1)
                             3407 ; 185  |#define HW_DCDC_VDDD_RSVD3_WIDTH (2)
                             3408 ; 186  |
                             3409 ; 187  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS (0)
                             3410 ; 188  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS (8)
                             3411 ; 189  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS (16)
                             3412 ; 190  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS (20)
                             3413 ; 191  |#define HW_DCDC_VDDD_OK_BITPOS (21)
                             3414 ; 192  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)        
                             3415 ; 193  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDD_BROWNOUT_LEVEL_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  57

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3416 ; 194  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_ENABLE_BITPOS)  
                             3417 ; 195  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDD_BROWNOUT_STATUS_BITPOS)  
                             3418 ; 196  |
                             3419 ; 197  |#define HW_DCDC_VDDD_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_VOLTAGE_LEVEL_SETMASK)    
                                   
                             3420 ; 198  |#define HW_DCDC_VDDD_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_LEVEL_SETMASK) 
                             3421 ; 199  |#define HW_DCDC_VDDD_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_ENABLE_SETMASK)
                                    
                             3422 ; 200  |#define HW_DCDC_VDDD_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDD_BROWNOUT_STATUS_SETMASK)
                                    
                             3423 ; 201  |
                             3424 ; 202  |typedef union               
                             3425 ; 203  |{
                             3426 ; 204  |    struct {
                             3427 ; 205  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDD_VOLTAGE_LEVEL_WIDTH;
                             3428 ; 206  |        unsigned int RSVD0            : HW_DCDC_VDDD_RSVD0_WIDTH;
                             3429 ; 207  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDD_BROWNOUT_LEVEL_WIDTH;
                             3430 ; 208  |        unsigned int RSVD1            : HW_DCDC_VDDD_RSVD1_WIDTH;
                             3431 ; 209  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDD_BROWNOUT_ENABLE_WIDTH;
                             3432 ; 210  |        unsigned int RSVD2            : HW_DCDC_VDDD_RSVD2_WIDTH;
                             3433 ; 211  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDD_BROWNOUT_STATUS_WIDTH;
                             3434 ; 212  |                 unsigned int VDD_OK           : HW_DCDC_VDDD_OK_WIDTH;
                             3435 ; 213  |        unsigned int RSVD3            : HW_DCDC_VDDD_RSVD3_WIDTH;
                             3436 ; 214  |    } B;
                             3437 ; 215  |   unsigned int I;
                             3438 ; 216  |        unsigned U;
                             3439 ; 217  |} dcdc_vddd_type;
                             3440 ; 218  |#define HW_DCDC_VDDD      (*(volatile dcdc_vddd_type _X*) (HW_DCDC_BASEADDR+3))    /* DcDc
                                   VDDD Register */
                             3441 ; 219  |
                             3442 ; 220  |
                             3443 ; 221  |
                             3444 ; 222  |
                             3445 ; 223  |/////////////////////////////////////////////////////////////////////////////////
                             3446 ; 224  |
                             3447 ; 225  |//  DcDc Vdda Register (HW_DCDC_VDDA) Bit Definitions
                             3448 ; 226  |
                             3449 ; 227  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH (5)
                             3450 ; 228  |#define HW_DCDC_VDDA_RSVD0_WIDTH (3)
                             3451 ; 229  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH (5)
                             3452 ; 230  |#define HW_DCDC_VDDA_RSVD1_WIDTH (3)
                             3453 ; 231  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH (1)
                             3454 ; 232  |#define HW_DCDC_VDDA_RSVD2_WIDTH (3)
                             3455 ; 233  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH (1)
                             3456 ; 234  |#define HW_DCDC_VDDA_OK_WIDTH (1)
                             3457 ; 235  |#define HW_DCDC_VDDA_RSVD3_WIDTH (2)
                             3458 ; 236  |
                             3459 ; 237  |
                             3460 ; 238  |
                             3461 ; 239  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_BITPOS (0)
                             3462 ; 240  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS (8)
                             3463 ; 241  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS (16)
                             3464 ; 242  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS (20)
                             3465 ; 243  |#define HW_DCDC_VDDA_OK_BITPOS (21)
                             3466 ; 244  |
                             3467 ; 245  |
                             3468 ; 246  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH)-1)<<HW_
                                  DCDC_VDDA_VOLTAGE_LEVEL_BITPOS)        
                             3469 ; 247  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH)-1)<<H
                                  W_DCDC_VDDA_BROWNOUT_LEVEL_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  58

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3470 ; 248  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_ENABLE_BITPOS)  
                             3471 ; 249  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK (((1<<HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH)-1)<
                                  <HW_DCDC_VDDA_BROWNOUT_STATUS_BITPOS)  
                             3472 ; 250  |
                             3473 ; 251  |
                             3474 ; 252  |
                             3475 ; 253  |#define HW_DCDC_VDDA_VOLTAGE_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_VOLTAGE_LEVEL_SETMASK)    
                                   
                             3476 ; 254  |#define HW_DCDC_VDDA_BROWNOUT_LEVEL_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_LEVEL_SETMASK) 
                             3477 ; 255  |#define HW_DCDC_VDDA_BROWNOUT_ENABLE_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_ENABLE_SETMASK)
                                    
                             3478 ; 256  |#define HW_DCDC_VDDA_BROWNOUT_STATUS_CLRMASK (~(WORD)HW_DCDC_VDDA_BROWNOUT_STATUS_SETMASK)
                                    
                             3479 ; 257  |
                             3480 ; 258  |
                             3481 ; 259  |typedef union               
                             3482 ; 260  |{
                             3483 ; 261  |    struct {
                             3484 ; 262  |        unsigned int VOLTAGE_LEVEL    : HW_DCDC_VDDA_VOLTAGE_LEVEL_WIDTH;
                             3485 ; 263  |        unsigned int RSVD0            : HW_DCDC_VDDA_RSVD0_WIDTH;
                             3486 ; 264  |        unsigned int BROWNOUT_LEVEL   : HW_DCDC_VDDA_BROWNOUT_LEVEL_WIDTH;
                             3487 ; 265  |        unsigned int RSVD1            : HW_DCDC_VDDA_RSVD1_WIDTH;
                             3488 ; 266  |        unsigned int BROWNOUT_ENABLE  : HW_DCDC_VDDA_BROWNOUT_ENABLE_WIDTH;
                             3489 ; 267  |        unsigned int RSVD2            : HW_DCDC_VDDA_RSVD2_WIDTH;
                             3490 ; 268  |        unsigned int BROWNOUT_STATUS  : HW_DCDC_VDDA_BROWNOUT_STATUS_WIDTH;
                             3491 ; 269  |             unsigned int VDDA_OK          : HW_DCDC_VDDA_OK_WIDTH;
                             3492 ; 270  |        unsigned int RSVD3            : HW_DCDC_VDDA_RSVD3_WIDTH;
                             3493 ; 271  |    } B;
                             3494 ; 272  |    unsigned int I;
                             3495 ; 273  |} dcdc_vdda_type;
                             3496 ; 274  |#define HW_DCDC_VDDA      (*(volatile dcdc_vdda_type _X*) (HW_DCDC_BASEADDR+4))    /* DcDc
                                   VDDA Register */
                             3497 ; 275  |
                             3498 ; 276  |
                             3499 ; 277  |
                             3500 ; 278  |
                             3501 ; 279  |/////////////////////////////////////////////////////////////////////////////////
                             3502 ; 280  |
                             3503 ; 281  |//  DcDc#2 Control Register 0 (HW_DCDC2_CTRL0) Bit Definitions
                             3504 ; 282  |
                             3505 ; 283  |#define HW_DCDC2_CTRL0_PLEVBU_WIDTH (5)
                             3506 ; 284  |#define HW_DCDC2_CTRL0_RSVD0_WIDTH (3)
                             3507 ; 285  |#define HW_DCDC2_CTRL0_PLEVBO_WIDTH (5)
                             3508 ; 286  |#define HW_DCDC2_CTRL0_RSVD1_WIDTH (3)
                             3509 ; 287  |#define HW_DCDC2_CTRL0_NLEV_WIDTH (5)
                             3510 ; 288  |#define HW_DCDC2_CTRL0_RSVD2_WIDTH (3)
                             3511 ; 289  |
                             3512 ; 290  |
                             3513 ; 291  |
                             3514 ; 292  |#define HW_DCDC2_CTRL0_PLEVBU_BITPOS (0)
                             3515 ; 293  |#define HW_DCDC2_CTRL0_PLEVBO_BITPOS (8)
                             3516 ; 294  |#define HW_DCDC2_CTRL0_NLEV_BITPOS (16)
                             3517 ; 295  |
                             3518 ; 296  |#define HW_DCDC2_CTRL0_PLEVBU_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBU_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBU_BITPOS)        
                             3519 ; 297  |#define HW_DCDC2_CTRL0_PLEVBO_SETMASK (((1<<HW_DCDC2_CTRL0_PLEVBO_WIDTH)-1)<<HW_DCDC2_CTRL
                                  0_PLEVBO_BITPOS) 
                             3520 ; 298  |#define HW_DCDC2_CTRL0_NLEV_SETMASK (((1<<HW_DCDC2_CTRL0_NLEV_WIDTH)-1)<<HW_DCDC2_CTRL0_NL
                                  EV_BITPOS)  
                             3521 ; 299  |
                             3522 ; 300  |#define HW_DCDC2_CTRL0_PLEVBU_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBU_SETMASK)     
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  59

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3523 ; 301  |#define HW_DCDC2_CTRL0_PLEVBO_CLRMASK (~(WORD)HW_DCDC2_CTRL0_PLEVBO_SETMASK) 
                             3524 ; 302  |#define HW_DCDC2_CTRL0_NLEV_CLRMASK (~(WORD)HW_DCDC2_CTRL0_NLEV_SETMASK)  
                             3525 ; 303  |
                             3526 ; 304  |
                             3527 ; 305  |typedef union               
                             3528 ; 306  |{
                             3529 ; 307  |    struct {
                             3530 ; 308  |        unsigned int PLEVBU           : HW_DCDC2_CTRL0_PLEVBU_WIDTH;
                             3531 ; 309  |        unsigned int RSVD0            : HW_DCDC2_CTRL0_RSVD0_WIDTH;
                             3532 ; 310  |        unsigned int PLEVBO           : HW_DCDC2_CTRL0_PLEVBO_WIDTH;
                             3533 ; 311  |        unsigned int RSVD1            : HW_DCDC2_CTRL0_RSVD1_WIDTH;
                             3534 ; 312  |        unsigned int NLEV             : HW_DCDC2_CTRL0_NLEV_WIDTH;
                             3535 ; 313  |        unsigned int RSVD2            : HW_DCDC2_CTRL0_RSVD2_WIDTH;
                             3536 ; 314  |    } B;
                             3537 ; 315  |    unsigned int I;
                             3538 ; 316  |} dcdc2_ctrl0_type; 
                             3539 ; 317  |#define HW_DCDC2_CTRL0      (*(volatile dcdc2_ctrl0_type _X*) (HW_DCDC_BASEADDR+5))    /* 
                                  DcDc#2 Limit Level Register */
                             3540 ; 318  |
                             3541 ; 319  |
                             3542 ; 320  |
                             3543 ; 321  |
                             3544 ; 322  |/////////////////////////////////////////////////////////////////////////////////
                             3545 ; 323  |
                             3546 ; 324  |//  DcDc#2 Control Register #1 (HW_DCDC2_CTRL1) Bit Definitions
                             3547 ; 325  |
                             3548 ; 326  |#define HW_DCDC2_CTRL1_C_WIDTH (4)
                             3549 ; 327  |#define HW_DCDC2_CTRL1_R_WIDTH (4)
                             3550 ; 328  |#define HW_DCDC2_CTRL1_FFOR_WIDTH (3)
                             3551 ; 329  |#define HW_DCDC2_CTRL1_RSVD0_WIDTH (1)
                             3552 ; 330  |#define HW_DCDC2_CTRL1_PFMCTRL_WIDTH (12)
                             3553 ; 331  |
                             3554 ; 332  |
                             3555 ; 333  |#define HW_DCDC2_CTRL1_C_BITPOS (0)
                             3556 ; 334  |#define HW_DCDC2_CTRL1_R_BITPOS (4)
                             3557 ; 335  |#define HW_DCDC2_CTRL1_FFOR_BITPOS (8)
                             3558 ; 336  |#define HW_DCDC2_CTRL1_PFMCTRL_BITPOS (12)
                             3559 ; 337  |
                             3560 ; 338  |
                             3561 ; 339  |
                             3562 ; 340  |#define HW_DCDC2_CTRL1_C_SETMASK (((1<<HW_DCDC2_CTRL1_C_WIDTH)-1)<<HW_DCDC2_CTRL1_C_BITPOS
                                  )        
                             3563 ; 341  |#define HW_DCDC2_CTRL1_R_SETMASK (((1<<HW_DCDC2_CTRL1_R_WIDTH)-1)<<HW_DCDC2_CTRL1_R_BITPOS
                                  ) 
                             3564 ; 342  |#define HW_DCDC2_CTRL1_FFOR_SETMASK (((1<<HW_DCDC2_CTRL1_FFOR_WIDTH)-1)<<HW_DCDC2_CTRL1_FF
                                  OR_BITPOS)  
                             3565 ; 343  |#define HW_DCDC2_CTRL1_PFMCTRL_SETMASK (((1<<HW_DCDC2_CTRL1_PFMCTRL_WIDTH)-1)<<HW_DCDC2_CT
                                  RL1_PFMCTRL_BITPOS)  
                             3566 ; 344  |
                             3567 ; 345  |
                             3568 ; 346  |
                             3569 ; 347  |#define HW_DCDC2_CTRL1_C_CLRMASK (~(WORD)HW_DCDC2_CTRL1_C_SETMASK)     
                             3570 ; 348  |#define HW_DCDC2_CTRL1_R_CLRMASK (~(WORD)HW_DCDC2_CTRL1_R_SETMASK) 
                             3571 ; 349  |#define HW_DCDC2_CTRL1_FFOR_CLRMASK (~(WORD)HW_DCDC2_CTRL1_FFOR_SETMASK)  
                             3572 ; 350  |#define HW_DCDC2_CTRL1_PFMCTRL_CLRMASK (~(WORD)HW_DCDC2_CTRL1_PFMCTRL_SETMASK)  
                             3573 ; 351  |
                             3574 ; 352  |
                             3575 ; 353  |typedef union               
                             3576 ; 354  |{
                             3577 ; 355  |    struct {
                             3578 ; 356  |        unsigned int C                : HW_DCDC2_CTRL1_C_WIDTH;
                             3579 ; 357  |        unsigned int R                : HW_DCDC2_CTRL1_R_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  60

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3580 ; 358  |        unsigned int FFOR             : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3581 ; 359  |        unsigned int RSVD0            : HW_DCDC2_CTRL1_RSVD0_WIDTH;
                             3582 ; 360  |        unsigned int PFMCTRL          : HW_DCDC2_CTRL1_FFOR_WIDTH;
                             3583 ; 361  |    } B;
                             3584 ; 362  |    unsigned int I;
                             3585 ; 363  |} dcdc2_ctrl1_type;
                             3586 ; 364  |#define HW_DCDC2_CTRL1      (*(volatile dcdc2_ctrl1_type _X*) (HW_DCDC_BASEADDR+6))    /* 
                                  DcDc#2 Ctrl Register #1 */
                             3587 ; 365  |
                             3588 ; 366  |
                             3589 ; 367  |
                             3590 ; 368  |
                             3591 ; 369  |/////////////////////////////////////////////////////////////////////////////////
                             3592 ; 370  |
                             3593 ; 371  |//  Speed Monitoring Register (HW_SPEED) Bit Definitions
                             3594 ; 372  |
                             3595 ; 373  |#define HW_SPEED_OSC1_PWRUP_WIDTH (1)
                             3596 ; 374  |#define HW_SPEED_OSC1_START_COUNT_WIDTH (1)
                             3597 ; 375  |#define HW_SPEED_RSVD0_WIDTH (2)
                             3598 ; 376  |#define HW_SPEED_RINGOSC1_WIDTH (7)
                             3599 ; 377  |#define HW_SPEED_RSVD1_WIDTH (1)
                             3600 ; 378  |#define HW_SPEED_OSC2_PWRUP_WIDTH (1)
                             3601 ; 379  |#define HW_SPEED_OSC2_START_COUNT_WIDTH (1)
                             3602 ; 380  |#define HW_SPEED_RSVD2_WIDTH (2)
                             3603 ; 381  |#define HW_SPEED_RINGOSC2_WIDTH (7)
                             3604 ; 382  |#define HW_SPEED_RSVD3_WIDTH (1)
                             3605 ; 383  |
                             3606 ; 384  |
                             3607 ; 385  |
                             3608 ; 386  |#define HW_SPEED_OSC1_PWRUP_BITPOS (0)
                             3609 ; 387  |#define HW_SPEED_OSC1_START_COUNT_BITPOS (1)
                             3610 ; 388  |#define HW_SPEED_RINGOSC1_BITPOS (4)
                             3611 ; 389  |#define HW_SPEED_OSC2_PWRUP_BITPOS (12)
                             3612 ; 390  |#define HW_SPEED_OSC2_START_COUNT_BITPOS (13)
                             3613 ; 391  |#define HW_SPEED_RINGOSC2_BITPOS (16)
                             3614 ; 392  |
                             3615 ; 393  |
                             3616 ; 394  |#define HW_SPEED_OSC1_PWRUP_SETMASK (((1<<HW_SPEED_OSC1_PWRUP_WIDTH)-1)<<HW_SPEED_OSC1_PWR
                                  UP_BITPOS)        
                             3617 ; 395  |#define HW_SPEED_OSC1_START_COUNT_SETMASK (((1<<HW_SPEED_OSC1_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC1_START_COUNT_BITPOS)        
                             3618 ; 396  |#define HW_SPEED_RINGOSC1_SETMASK (((1<<HW_SPEED_RINGOSC1_WIDTH)-1)<<HW_SPEED_RINGOSC1_BIT
                                  POS) 
                             3619 ; 397  |#define HW_SPEED_OSC2_PWRUP_SETMASK (((1<<HW_SPEED_OSC2_PWRUP_WIDTH)-1)<<HW_SPEED_OSC2_PWR
                                  UP_BITPOS)        
                             3620 ; 398  |
                             3621 ; 399  |#define HW_SPEED_OSC2_START_COUNT_SETMASK (((1<<HW_SPEED_OSC2_START_COUNT_WIDTH)-1)<<HW_SP
                                  EED_OSC2_START_COUNT_BITPOS)        
                             3622 ; 400  |#define HW_SPEED_RINGOSC2_SETMASK (((1<<HW_SPEED_RINGOSC2_WIDTH)-1)<<HW_SPEED_RINGOSC2_BIT
                                  POS) 
                             3623 ; 401  |
                             3624 ; 402  |
                             3625 ; 403  |
                             3626 ; 404  |#define HW_SPEED_OSC1_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC1_PWRUP_SETMASK)     
                             3627 ; 405  |#define HW_SPEED_OSC1_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC1_START_COUNT_SETMASK)     
                             3628 ; 406  |#define HW_SPEED_RINGOSC1_CLRMASK (~(WORD)HW_SPEED_RINGOSC1_SETMASK) 
                             3629 ; 407  |#define HW_SPEED_OSC2_PWRUP_CLRMASK (~(WORD)HW_SPEED_OSC2_PWRUP_SETMASK)   
                             3630 ; 408  |#define HW_SPEED_OSC2_START_COUNT_CLRMASK (~(WORD)HW_SPEED_OSC2_START_COUNT_SETMASK)     
                             3631 ; 409  |#define HW_SPEED_RINGOSC2_CLRMASK (~(WORD)HW_SPEED_RINGOSC2_SETMASK) 
                             3632 ; 410  |
                             3633 ; 411  |
                             3634 ; 412  |typedef union               
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  61

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3635 ; 413  |{
                             3636 ; 414  |    struct {
                             3637 ; 415  |        unsigned int OSC1_PWRUP          : HW_SPEED_OSC1_PWRUP_WIDTH;
                             3638 ; 416  |        unsigned int OSC1_START_COUNT    : HW_SPEED_OSC1_START_COUNT_WIDTH;
                             3639 ; 417  |        unsigned int RSVD0               : HW_SPEED_RSVD0_WIDTH;
                             3640 ; 418  |        unsigned int RINGOSC1            : HW_SPEED_RINGOSC1_WIDTH;
                             3641 ; 419  |        unsigned int RSVD1               : HW_SPEED_RSVD1_WIDTH;
                             3642 ; 420  |        unsigned int OSC2_PWRUP          : HW_SPEED_OSC2_PWRUP_WIDTH;
                             3643 ; 421  |        unsigned int OSC2_START_COUNT    : HW_SPEED_OSC2_START_COUNT_WIDTH;
                             3644 ; 422  |        unsigned int RSVD2               : HW_SPEED_RSVD2_WIDTH;
                             3645 ; 423  |        unsigned int RINGOSC2            : HW_SPEED_RINGOSC2_WIDTH;
                             3646 ; 424  |        unsigned int RSVD3               : HW_SPEED_RSVD3_WIDTH;
                             3647 ; 425  |    } B;
                             3648 ; 426  |    unsigned int I;
                             3649 ; 427  |} speed_type;
                             3650 ; 428  |#define HW_SPEED      (*(volatile speed_type _X*) (HW_DCDC_BASEADDR+7))    /* Speed Measur
                                  ement Register */
                             3651 ; 429  |
                             3652 ; 430  |
                             3653 ; 431  |
                             3654 ; 432  |
                             3655 ; 433  |
                             3656 ; 434  |
                             3657 ; 435  |
                             3658 ; 436  |// DC DC Test Bit Register (HW_DCDCTBR) Definitions
                             3659 ; 437  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH 4
                             3660 ; 438  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH 1
                             3661 ; 439  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH 1
                             3662 ; 440  |#define HW_DCDC_TBR_DCDC1_CLK4X_WIDTH 1
                             3663 ; 441  |#define HW_DCDC_TBR_DCDC1_CLK2X_WIDTH 1
                             3664 ; 442  |#define HW_DCDC_TBR_DCDC1_NOZERO_WIDTH 1
                             3665 ; 443  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH 1
                             3666 ; 444  |#define HW_DCDC_TBR_DCDC1_PFM_WIDTH 1
                             3667 ; 445  |#define HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH 1
                             3668 ; 446  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH 1
                             3669 ; 447  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH 1
                             3670 ; 448  |#define HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH 1
                             3671 ; 449  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH 1
                             3672 ; 450  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH 1
                             3673 ; 451  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH 1
                             3674 ; 452  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH 1
                             3675 ; 453  |#define HW_DCDC_TBR_DCDC2_CLK4X_WIDTH 1
                             3676 ; 454  |#define HW_DCDC_TBR_DCDC2_CLK2X_WIDTH 1
                             3677 ; 455  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH 1
                             3678 ; 456  |#define HW_DCDC_TBR_DCDC2_PFM_WIDTH 1
                             3679 ; 457  |#define HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH 1
                             3680 ; 458  |
                             3681 ; 459  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS (0)
                             3682 ; 460  |#define HW_DCDC_TBR_DCDC1_DIS_5BIT_BITPOS (4)
                             3683 ; 461  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS (5)
                             3684 ; 462  |#define HW_DCDC_TBR_DCDC1_CLK4X_BITPOS (6)
                             3685 ; 463  |#define HW_DCDC_TBR_DCDC1_CLK2X_BITPOS (7)
                             3686 ; 464  |#define HW_DCDC_TBR_DCDC1_NOZERO_BITPOS (8)
                             3687 ; 465  |#define HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_BITPOS (9)
                             3688 ; 466  |#define HW_DCDC_TBR_DCDC1_PFM_BITPOS (10)
                             3689 ; 467  |#define HW_DCDC_TBR_DCDC1_STOPCLK_BITPOS (11)
                             3690 ; 468  |#define HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_BITPOS (12)
                             3691 ; 469  |#define HW_DCDC_TBR_DCDC_ANA_LESSI_BITPOS (13)
                             3692 ; 470  |#define HW_DCDC_TBR_DCDC_MORE_CAP_BITPOS (14)
                             3693 ; 471  |#define HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS (15)
                             3694 ; 472  |#define HW_DCDC_TBR_DCDC1_NEW_SCHEME_BITPOS (16)
                             3695 ; 473  |#define HW_DCDC_TBR_DCDC1_HALF_FETS_BITPOS (17)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  62

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3696 ; 474  |#define HW_DCDC_TBR_DCDC2_DIS_5BIT_BITPOS (18)
                             3697 ; 475  |#define HW_DCDC_TBR_DCDC2_CLK4X_BITPOS (19)
                             3698 ; 476  |#define HW_DCDC_TBR_DCDC2_CLK2X_BITPOS (20)
                             3699 ; 477  |#define HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_BITPOS (21)
                             3700 ; 478  |#define HW_DCDC_TBR_DCDC2_PFM_BITPOS (22)
                             3701 ; 479  |#define HW_DCDC_TBR_DCDC2_STOPCLK_BITPOS (23)
                             3702 ; 480  |
                             3703 ; 481  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK (((1<<HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH)-1)<<HW_DCDC
                                  _TBR_DCDC1_ADJ_TN_BITPOS)
                             3704 ; 482  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK (((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH)-1)<<HW_DC
                                  DC_TBR_DCDC1_BAT_ADJ_BITPOS)
                             3705 ; 483  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMASK (((1<<HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH)-1
                                  )<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)
                             3706 ; 484  |
                             3707 ; 485  |#define HW_DCDC_TBR_DCDC1_ADJ_TN_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_ADJ_TN_SETMASK)
                             3708 ; 486  |#define HW_DCDC_TBR_DCDC1_BAT_ADJ_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK)
                             3709 ; 487  |#define HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_CLRMASK (~(WORD)HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_SETMAS
                                  K)
                             3710 ; 488  |
                             3711 ; 489  |// Defines for What needs to change to be able to use a higher Core voltage and when the c
                                  hange should happen
                             3712 ; 490  |#define HW_DCDC_VDDD_CHANGE_TBR_CUTOFF_VALUE ((18<<HW_DCDC_VDDD_VOLTAGE_LEVEL_BITPOS)&HW_D
                                  CDC_VDDD_VOLTAGE_LEVEL_SETMASK)
                             3713 ; 491  |#define HW_DCDC_TBR_VDDD_HI_VALUE ((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC_
                                  TBR_DCDC_ANA_BGR_BIAS_SETMASK)
                             3714 ; 492  |#define HW_DCDC_TBR_VDDD_LO_VALUE (((1<<HW_DCDC_TBR_DCDC_DCDC_ANA_BGR_BIAS_BITPOS)&HW_DCDC
                                  _TBR_DCDC_ANA_BGR_BIAS_SETMASK)+((2<<HW_DCDC_TBR_DCDC1_ADJ_TN_BITPOS)&HW_DCDC_TBR_DCDC1_ADJ_TN_SET
                                  MASK)+((1<<HW_DCDC_TBR_DCDC1_BAT_ADJ_BITPOS)&HW_DCDC_TBR_DCDC1_BAT_ADJ_SETMASK))
                             3715 ; 493  |
                             3716 ; 494  |typedef union               
                             3717 ; 495  |{
                             3718 ; 496  |    struct {
                             3719 ; 497  |        unsigned int DCDC1_ADJ_TN               : HW_DCDC_TBR_DCDC1_ADJ_TN_WIDTH;
                             3720 ; 498  |        unsigned int DCDC1_DIS_5BIT             : HW_DCDC_TBR_DCDC1_DIS_5BIT_WIDTH;
                             3721 ; 499  |        unsigned int DCDC1_BAT_ADJ              : HW_DCDC_TBR_DCDC1_BAT_ADJ_WIDTH;
                             3722 ; 500  |        unsigned int DCDC1_CLK4X                : HW_DCDC_TBR_DCDC1_CLK4X_WIDTH;
                             3723 ; 501  |        unsigned int DCDC1_CLK2X                : HW_DCDC_TBR_DCDC1_CLK2X_WIDTH;
                             3724 ; 502  |        unsigned int DCDC1_NOZERO               : HW_DCDC_TBR_DCDC1_NOZERO_WIDTH;
                             3725 ; 503  |        unsigned int DCDC1_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC1_VDD5V_ACTIVE_WIDTH;
                             3726 ; 504  |        unsigned int DCDC1_PFM                  : HW_DCDC_TBR_DCDC1_PFM_WIDTH;
                             3727 ; 505  |        unsigned int DCDC1_STOPCLK              : HW_DCDC_TBR_DCDC1_STOPCLK_WIDTH;
                             3728 ; 506  |        unsigned int PWRUP_VDDIO_BRNOUT         : HW_DCDC_TBR_PWRUP_VDDIO_BRNOUT_WIDTH;
                             3729 ; 507  |        unsigned int DCDC_ANA_LESSI             : HW_DCDC_TBR_DCDC_ANA_LESSI_WIDTH;
                             3730 ; 508  |        unsigned int DCDC_MORE_CAP              : HW_DCDC_TBR_DCDC_MORE_CAP_WIDTH;
                             3731 ; 509  |        unsigned int DCDC_ANA_BGR_BIAS          : HW_DCDC_TBR_DCDC_ANA_BGR_BIAS_WIDTH;
                             3732 ; 510  |        unsigned int DCDC1_NEW_SCHEME           : HW_DCDC_TBR_DCDC1_NEW_SCHEME_WIDTH;
                             3733 ; 511  |        unsigned int DCDC1_HALF_FETS            : HW_DCDC_TBR_DCDC1_HALF_FETS_WIDTH;
                             3734 ; 512  |        unsigned int DCDC2_DIS_5BIT             : HW_DCDC_TBR_DCDC2_DIS_5BIT_WIDTH;
                             3735 ; 513  |        unsigned int DCDC2_CLK4X                : HW_DCDC_TBR_DCDC2_CLK4X_WIDTH;
                             3736 ; 514  |        unsigned int DCDC2_CLK2X                : HW_DCDC_TBR_DCDC2_CLK2X_WIDTH;
                             3737 ; 515  |        unsigned int DCDC2_VDD5V_ACTIVE         : HW_DCDC_TBR_DCDC2_VDD5V_ACTIVE_WIDTH;
                             3738 ; 516  |        unsigned int DCDC2_PFM                  : HW_DCDC_TBR_DCDC2_PFM_WIDTH;
                             3739 ; 517  |        unsigned int DCDC2_STOPCLK              : HW_DCDC_TBR_DCDC2_STOPCLK_WIDTH;
                             3740 ; 518  |    } B;
                             3741 ; 519  |    unsigned int I;
                             3742 ; 520  |} usb_dcdctbr_type;
                             3743 ; 521  |#define HW_DCDC_TBR                     (*(volatile usb_dcdctbr_type _X*) (HW_DCDC_BASEADD
                                  R+8))    /* Analog test bit register*/
                             3744 ; 522  |
                             3745 ; 523  |
                             3746 ; 524  |/////////////////////////////////////////////////////////////////////////////////
                             3747 ; 525  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  63

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3748 ; 526  |//  Analog Persistent Config (HW_VDD5V_PWR_CHARGE) Bit Definitions
                             3749 ; 527  |
                             3750 ; 528  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH (6)
                             3751 ; 529  |#define HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH (2)
                             3752 ; 530  |#define HW_VDD5V_PWR_CHARGE_PWD_WIDTH (1)
                             3753 ; 531  |#define HW_VDD5V_PWR_CHARGE_RES_WIDTH (1)
                             3754 ; 532  |#define HW_VDD5V_PWR_CHARGE_NIMH_WIDTH (1)
                             3755 ; 533  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH (1)
                             3756 ; 534  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH (1)
                             3757 ; 535  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WIDTH (1)
                             3758 ; 536  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH (1)
                             3759 ; 537  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH (1)
                             3760 ; 538  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH (1)
                             3761 ; 539  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH (1)
                             3762 ; 540  |#define HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH (2)
                             3763 ; 541  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH (1)
                             3764 ; 542  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH (2)
                             3765 ; 543  |#define HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH (3)
                             3766 ; 544  |
                             3767 ; 545  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS (0)
                             3768 ; 546  |#define HW_VDD5V_PWR_CHARGE_PWD_BITPOS (8)
                             3769 ; 547  |#define HW_VDD5V_PWR_CHARGE_RES_BITPOS (9)
                             3770 ; 548  |#define HW_VDD5V_PWR_CHARGE_NIMH_BITPOS (10)
                             3771 ; 549  |
                             3772 ; 550  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS (11)
                             3773 ; 551  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS (12)
                             3774 ; 552  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS (13)
                             3775 ; 553  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS (14)
                             3776 ; 554  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS (15)
                             3777 ; 555  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS (16)
                             3778 ; 556  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS (17)
                             3779 ; 557  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS (20)
                             3780 ; 558  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS (21)
                             3781 ; 559  |
                             3782 ; 560  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_BATT_CURRENT_BITPOS)        
                             3783 ; 561  |#define HW_VDD5V_PWR_CHARGE_PWD_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWD_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_PWD_BITPOS)        
                             3784 ; 562  |#define HW_VDD5V_PWR_CHARGE_RES_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_RES_WIDTH)-1)<<HW_VDD5V_
                                  PWR_CHARGE_RES_BITPOS) 
                             3785 ; 563  |#define HW_VDD5V_PWR_CHARGE_NIMH_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_NIMH_WIDTH)-1)<<HW_VDD5
                                  V_PWR_CHARGE_NIMH_BITPOS) 
                             3786 ; 564  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH)-1)<<H
                                  W_VDD5V_PWR_CHARGE_LI_TYPE_BITPOS) 
                             3787 ; 565  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMI
                                  T_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_BITPOS)        
                             3788 ; 566  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOB
                                  RNOUT_WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_BITPOS)        
                             3789 ; 567  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DCANA_LP_BITPOS) 
                             3790 ; 568  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WI
                                  DTH)-1)<<HW_VDD5V_PWR_CHARGE_TEST_USBREGS_BITPOS) 
                             3791 ; 569  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH)-1)<
                                  <HW_VDD5V_PWR_CHARGE_DRV_BATT_BITPOS) 
                             3792 ; 570  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH)
                                  -1)<<HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_BITPOS) 
                             3793 ; 571  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_
                                  WIDTH)-1)<<HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_BITPOS) 
                             3794 ; 572  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMASK (((1<<HW_VDD5V_PWR_CHARGE_BATT_INFO_WIDTH)-1
                                  )<<HW_VDD5V_PWR_CHARGE_BATT_INFO_BITPOS) 
                             3795 ; 573  |
                             3796 ; 574  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  64

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3797 ; 575  |#define HW_VDD5V_PWR_CHARGE_BATT_CURRENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_CURRENT_
                                  SETMASK)     
                             3798 ; 576  |#define HW_VDD5V_PWR_CHARGE_PWD_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWD_SETMASK)     
                             3799 ; 577  |#define HW_VDD5V_PWR_CHARGE_RES_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_RES_SETMASK) 
                             3800 ; 578  |#define HW_VDD5V_PWR_CHARGE_NIMH_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_NIMH_SETMASK) 
                             3801 ; 579  |#define HW_VDD5V_PWR_CHARGE_LI_TYPE_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_LI_TYPE_SETMASK) 
                             3802 ; 580  |#define HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DISABLE_ILI
                                  MIT_SETMASK)     
                             3803 ; 581  |#define HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_PWDN_ON_I
                                  OBRNOUT_SETMASK)     
                             3804 ; 582  |#define HW_VDD5V_PWR_CHARGE_DCANA_LP_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DCANA_LP_SETMASK)
                                   
                             3805 ; 583  |#define HW_VDD5V_PWR_CHARGE_TEST_USBREGS_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_TEST_USBREGS_
                                  SETMASK) 
                             3806 ; 584  |#define HW_VDD5V_PWR_CHARGE_DRV_BATT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_DRV_BATT_SETMASK)
                                   
                             3807 ; 585  |#define HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_SETM
                                  ASK) 
                             3808 ; 586  |#define HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_VDD5V_PRESEN
                                  T_SETMASK) 
                             3809 ; 587  |#define HW_VDD5V_PWR_CHARGE_BATT_INFO_CLRMASK (~(WORD)HW_VDD5V_PWR_CHARGE_BATT_INFO_SETMAS
                                  K) 
                             3810 ; 588  |
                             3811 ; 589  |typedef union               
                             3812 ; 590  |{
                             3813 ; 591  |    struct {
                             3814 ; 592  |        unsigned int BATT_CURRENT               : HW_VDD5V_PWR_CHARGE_BATT_CURRENT_WIDTH;
                             3815 ; 593  |        unsigned int RSVD0                      : HW_VDD5V_PWR_CHARGE_RSVD0_WIDTH;
                             3816 ; 594  |        unsigned int PWD                        : HW_VDD5V_PWR_CHARGE_PWD_WIDTH;
                             3817 ; 595  |        unsigned int RES                        : HW_VDD5V_PWR_CHARGE_RES_WIDTH;
                             3818 ; 596  |        unsigned int NIMH                       : HW_VDD5V_PWR_CHARGE_NIMH_WIDTH;
                             3819 ; 597  |        unsigned int LI_TYPE                    : HW_VDD5V_PWR_CHARGE_LI_TYPE_WIDTH;
                             3820 ; 598  |        unsigned int DISABLE_ILIMIT             : HW_VDD5V_PWR_CHARGE_DISABLE_ILIMIT_WIDTH
                                  ;
                             3821 ; 599  |        unsigned int PWDN_ON_IOBRNOUT           : HW_VDD5V_PWR_CHARGE_PWDN_ON_IOBRNOUT_WID
                                  TH;
                             3822 ; 600  |        unsigned int DCANA_LP                   : HW_VDD5V_PWR_CHARGE_DCANA_LP_WIDTH;
                             3823 ; 601  |        unsigned int TEST_USBREGS               : HW_VDD5V_PWR_CHARGE_TEST_USBREGS_WIDTH;
                             3824 ; 602  |        unsigned int DRV_BATT                   : HW_VDD5V_PWR_CHARGE_DRV_BATT_WIDTH;
                             3825 ; 603  |        unsigned int SWCHRG_BAT                 : HW_VDD5V_PWR_CHARGE_SWCHRG_BAT_WIDTH;
                             3826 ; 604  |        unsigned int RSVD1                      : HW_VDD5V_PWR_CHARGE_RSVD1_WIDTH;
                             3827 ; 605  |        unsigned int VDD5V_PRESENT              : HW_VDD5V_PWR_CHARGE_VDD5V_PRESENT_WIDTH;
                                  
                             3828 ; 606  |        unsigned int RSVD2                      : HW_VDD5V_PWR_CHARGE_RSVD2_WIDTH;
                             3829 ; 607  |    } B;
                             3830 ; 608  |    unsigned int I;
                             3831 ; 609  |} usb_pwr_charge_type;
                             3832 ; 610  |#define HW_VDD5V_PWR_CHARGE      (*(volatile usb_pwr_charge_type _X*) (HW_DCDC_BASEADDR+17
                                  ))    /* Analog Persistent Config Register */
                             3833 ; 611  |
                             3834 ; 612  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH 1
                             3835 ; 613  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH 1
                             3836 ; 614  |#define HW_DCDC_PERSIST_UPDATE_WIDTH 1
                             3837 ; 615  |#define HW_DCDC_PERSIST_AUTO_RESTART_WIDTH 1
                             3838 ; 616  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH 1
                             3839 ; 617  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH 1
                             3840 ; 618  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH 1
                             3841 ; 619  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH 1
                             3842 ; 620  |#define HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH 1
                             3843 ; 621  |#define HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH 1
                             3844 ; 622  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH 1
                             3845 ; 623  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH 1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  65

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3846 ; 624  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH 1
                             3847 ; 625  |#define HW_DCDC_PERSIST_RSRVD_WIDTH 2
                             3848 ; 626  |
                             3849 ; 627  |#define HW_DCDC_PERSIST_AUTO_RESTART_STAT_BITPOS 12
                             3850 ; 628  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_BITPOS 11
                             3851 ; 629  |#define HW_DCDC_PERSIST_UPDATE_BITPOS 10
                             3852 ; 630  |#define HW_DCDC_PERSIST_AUTO_RESTART_BITPOS 9
                             3853 ; 631  |#define HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_BITPOS 8 
                             3854 ; 632  |#define HW_DCDC_PERSIST_LOW_BATT_TYPE_BITPOS 7
                             3855 ; 633  |#define HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_BITPOS 6
                             3856 ; 634  |#define HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_BITPOS 5
                             3857 ; 635  |#define HW_DCDC_PERSIST_XTAL_TRIM1_BITPOS 4
                             3858 ; 636  |#define HW_DCDC_PERSIST_XTAL_TRIM0_BITPOS 3
                             3859 ; 637  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_BITPOS 2
                             3860 ; 638  |#define HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_BITPOS 1
                             3861 ; 639  |#define HW_DCDC_PERSIST_XTAL_TRM_ENABLE_BITPOS 0
                             3862 ; 640  |
                             3863 ; 641  |typedef union               
                             3864 ; 642  |{
                             3865 ; 643  |    struct {       
                             3866 ; 644  |       int XTAL_TRM_ENABLE             : HW_DCDC_PERSIST_XTAL_TRM_ENABLE_WIDTH;
                             3867 ; 645  |       int XTAL_BIAS_DOWN0             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN0_WIDTH;
                             3868 ; 646  |       int XTAL_BIAS_DOWN1             : HW_DCDC_PERSIST_XTAL_BIAS_DOWN1_WIDTH;
                             3869 ; 647  |       int XTAL_TRIM0                  : HW_DCDC_PERSIST_XTAL_TRIM0_WIDTH;
                             3870 ; 648  |       int XTAL_TRIM1                  : HW_DCDC_PERSIST_XTAL_TRIM1_WIDTH;
                             3871 ; 649  |       int SLEEP_XTAL_ENABLE           : HW_DCDC_PERSIST_SLEEP_XTAL_ENABLE_WIDTH;
                             3872 ; 650  |       int LOW_BATTERY_ENABLE          : HW_DCDC_PERSIST_LOW_BATTERY_ENABLE_WIDTH;
                             3873 ; 651  |       int LOW_BATT_TYPE               : HW_DCDC_PERSIST_LOW_BATT_TYPE_WIDTH;
                             3874 ; 652  |       int DELAY_5V_AUTO_RESTART       : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_WIDTH;
                             3875 ; 653  |       int AUTO_RESTART                : HW_DCDC_PERSIST_AUTO_RESTART_WIDTH;
                             3876 ; 654  |       int UPDATE                      : HW_DCDC_PERSIST_UPDATE_WIDTH;
                             3877 ; 655  |       int DELAY_5V_AUTO_RESTART_STAT  : HW_DCDC_PERSIST_DELAY_5V_AUTO_RESTART_STAT_WIDTH;
                                  
                             3878 ; 656  |       int AUTO_RESTART_STAT           : HW_DCDC_PERSIST_AUTO_RESTART_STAT_WIDTH;
                             3879 ; 657  |       int RSRVD                       : HW_DCDC_PERSIST_RSRVD_WIDTH;
                             3880 ; 658  |    } B;
                             3881 ; 659  |    int I;
                             3882 ; 660  |} usb_dcdcpersist_type;
                             3883 ; 661  |#define HW_DCDC_PERSIST                (*(volatile usb_dcdcpersist_type _X*) (HW_DCDC_BASE
                                  ADDR+15))    /* Analog test bit register*/
                             3884 ; 662  |
                             3885 ; 663  |
                             3886 ; 664  |
                             3887 ; 665  |#endif
                             3888 ; 666  |
                             3889 ; 667  |
                             3890 ; 668  |
                             3891 
                             3893 
                             3894 ; 21   |#include "regsemc.h"
                             3895 
                             3897 
                             3898 ; 1    |#if !(defined(__REGS_EMC_INC))
                             3899 ; 2    |#define __REGS_EMC_INC 1
                             3900 ; 3    |
                             3901 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             3902 ; 5    |//   Module base addresses
                             3903 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             3904 ; 7    |#define HW_EMC_BASEADDR 0xF000
                             3905 ; 8    |
                             3906 ; 9    |/////////////////////////////////////////////////////////////////////////////////
                             3907 ; 10   |//  EMC Registers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  66

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3908 ; 11   |/////////////////////////////////////////////////////////////////////////////////
                             3909 ; 12   |
                             3910 ; 13   |
                             3911 ; 14   |/////////////////////////////////////////////////////////////////////////////////
                             3912 ; 15   |//  Flash Control Register (HW_FLCR) Bit Definitions
                             3913 ; 16   |
                             3914 ; 17   |typedef union               /*Flash Control Register*/
                             3915 ; 18   |{
                             3916 ; 19   |    struct
                             3917 ; 20   |    {
                             3918 ; 21   |    int KICK        :1;
                             3919 ; 22   |    int RW          :1;
                             3920 ; 23   |    int TCIE        :1;
                             3921 ; 24   |    int IRQP        :1;
                             3922 ; 25   |    unsigned MMD    :2;
                             3923 ; 26   |    unsigned NB     :11;
                             3924 ; 27   |    unsigned RSVD   :4;
                             3925 ; 28   |    int SRST        :1;
                             3926 ; 29   |    } B;
                             3927 ; 30   |    int I;
                             3928 ; 31   |} flcr_type;
                             3929 ; 32   |
                             3930 ; 33   |#define HW_FLCR_KICK_BITPOS 0
                             3931 ; 34   |#define HW_FLCR_RW_BITPOS 1
                             3932 ; 35   |#define HW_FLCR_TCIE_BITPOS 2
                             3933 ; 36   |#define HW_FLCR_IRQP_BITPOS 3
                             3934 ; 37   |#define HW_FLCR_MMD_BITPOS 4
                             3935 ; 38   |#define HW_FLCR_NB_BITPOS 6
                             3936 ; 39   |#define HW_FLCR_SRST_BITPOS 21
                             3937 ; 40   |
                             3938 ; 41   |#define HW_FLCR_KICK_SETMASK 1<<HW_FLCR_KICK_BITPOS
                             3939 ; 42   |#define HW_FLCR_RW_SETMASK 1<<HW_FLCR_RW_BITPOS
                             3940 ; 43   |#define HW_FLCR_READ_KICK_SETMASK HW_FLCR_KICK_SETMASK|HW_FLCR_RW_SETMASK
                             3941 ; 44   |#define HW_FLCR_WRITE_KICK_SETMASK HW_FLCR_KICK_SETMASK
                             3942 ; 45   |#define HW_FLCR_TCIE_SETMASK 1<<HW_FLCR_TCIE_BITPOS
                             3943 ; 46   |#define HW_FLCR_IRQP_SETMASK 1<<HW_FLCR_IRQP_BITPOS
                             3944 ; 47   |#define HW_FLCR_MMD_SETMASK 3<<HW_FLCR_MMD_BITPOS
                             3945 ; 48   |#define HW_FLCR_NB_SETMASK 0x7FF<<HW_FLCR_NB_BITPOS
                             3946 ; 49   |#define HW_FLCR_SRST_SETMASK 1<<HW_FLCR_SRST_BITPOS
                             3947 ; 50   |
                             3948 ; 51   |#define HW_FLCR_KICK_CLRMASK ~(WORD)HW_FLCR_KICK_SETMASK
                             3949 ; 52   |#define HW_FLCR_RW_CLRMASK ~(WORD)HW_FLCR_RW_SETMASK
                             3950 ; 53   |#define HW_FLCR_TCIE_CLRMASK ~(WORD)HW_FLCR_TCIE_SETMASK
                             3951 ; 54   |#define HW_FLCR_IRQP_CLRMASK ~(WORD)HW_FLCR_IRQP_SETMASK
                             3952 ; 55   |#define HW_FLCR_MMD_CLRMASK ~(WORD)HW_FLCR_MMD_SETMASK
                             3953 ; 56   |#define HW_FLCR_NB_CLRMASK ~(WORD)HW_FLCR_NB_SETMASK
                             3954 ; 57   |#define HW_FLCR_SRST_CLRMASK ~(WORD)HW_FLCR_SRST_SETMASK
                             3955 ; 58   |
                             3956 ; 59   |
                             3957 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                             3958 ; 61   |//  Flash Start Address Low Register (HW_FLSALR) Bit Definitions
                             3959 ; 62   |
                             3960 ; 63   |typedef union           /* Flash Start Address Low*/
                             3961 ; 64   |{
                             3962 ; 65   |    struct
                             3963 ; 66   |    {
                             3964 ; 67   |    unsigned XA     : 24;
                             3965 ; 68   |    } B;
                             3966 ; 69   |    int I;
                             3967 ; 70   |} flsalr_type;
                             3968 ; 71   |
                             3969 ; 72   |#define HW_FLSALR_XA_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  67

M:ADDR CODE           CYCLES LINE SOURCELINE
                             3970 ; 73   |
                             3971 ; 74   |#define HW_FLSALR_XA_SETMASK 0xFFFFFF<<HW_FLSALR_XA_BITPOS
                             3972 ; 75   |
                             3973 ; 76   |#define HW_FLSALR_XA_CLRMASK ~(WORD)HW_FLSALR_XA_SETMASK
                             3974 ; 77   |
                             3975 ; 78   |
                             3976 ; 79   |/////////////////////////////////////////////////////////////////////////////////
                             3977 ; 80   |//  Flash Start Address High Register (HW_FLSAHR) Bit Definitions
                             3978 ; 81   |
                             3979 ; 82   |typedef union           /* Flash Start Address High*/
                             3980 ; 83   |{
                             3981 ; 84   |    struct
                             3982 ; 85   |    {
                             3983 ; 86   |    unsigned XA     :8;
                             3984 ; 87   |    unsigned DA     :16;
                             3985 ; 88   |    } B;
                             3986 ; 89   |    int I;
                             3987 ; 90   |} flsahr_type;
                             3988 ; 91   |
                             3989 ; 92   |#define HW_FLSAHR_XA_BITPOS 0
                             3990 ; 93   |
                             3991 ; 94   |#define HW_FLSAHR_XA_SETMASK 0xFFFFFF<<HW_FLSAHR_XA_BITPOS
                             3992 ; 95   |
                             3993 ; 96   |#define HW_FLSAHR_XA_CLRMASK ~(WORD)HW_FLSAHR_XA_SETMASK
                             3994 ; 97   |
                             3995 ; 98   |
                             3996 ; 99   |/////////////////////////////////////////////////////////////////////////////////
                             3997 ; 100  |//  EMC Flash CompactFlash Control Register (HW_FLCFCR) Bit Definitions
                             3998 ; 101  |
                             3999 ; 102  |typedef union           /* Flash CompactFlash Control Register*/
                             4000 ; 103  |{
                             4001 ; 104  |    struct
                             4002 ; 105  |    {
                             4003 ; 106  |        int WP          :1;
                             4004 ; 107  |        int CDP         :1;
                             4005 ; 108  |        unsigned SM     :2;
                             4006 ; 109  |        int XATTR       :1;
                             4007 ; 110  |        int CRST        :1;
                             4008 ; 111  |        int XWT         :1;
                             4009 ; 112  |        int RI          :1;
                             4010 ; 113  |        int IFCE        :1;
                             4011 ; 114  |        int ISCE        :1;
                             4012 ; 115  |        int INCE        :1;
                             4013 ; 116  |        int IFCS        :1;
                             4014 ; 117  |        int ISCS        :1;
                             4015 ; 118  |        int INCS        :1;
                             4016 ; 119  |        unsigned CFAI   :2;
                             4017 ; 120  |        int XDDI        :1;
                             4018 ; 121  |        unsigned CS     :2;
                             4019 ; 122  |        int CRE         :1;
                             4020 ; 123  |        unsigned VS     :2;
                             4021 ; 124  |        int DASP        :1;
                             4022 ; 125  |        int MODE16      :1; 
                             4023 ; 126  |    } B;
                             4024 ; 127  |    int I;
                             4025 ; 128  |} flcfcr_type;
                             4026 ; 129  |
                             4027 ; 130  |#define HW_FLCFCR_WP_BITPOS 0
                             4028 ; 131  |#define HW_FLCFCR_CDP_BITPOS 1
                             4029 ; 132  |#define HW_FLCFCR_SM_BITPOS 2
                             4030 ; 133  |#define HW_FLCFCR_XATTR_BITPOS 4
                             4031 ; 134  |#define HW_FLCFCR_CRST_BITPOS 5
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  68

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4032 ; 135  |#define HW_FLCFCR_XWT_BITPOS 6
                             4033 ; 136  |#define HW_FLCFCR_RI_BITPOS 7
                             4034 ; 137  |#define HW_FLCFCR_IFCE_BITPOS 8
                             4035 ; 138  |#define HW_FLCFCR_ISCE_BITPOS 9
                             4036 ; 139  |#define HW_FLCFCR_INCE_BITPOS 10
                             4037 ; 140  |#define HW_FLCFCR_IFCS_BITPOS 11
                             4038 ; 141  |#define HW_FLCFCR_ISCS_BITPOS 12
                             4039 ; 142  |#define HW_FLCFCR_INCS_BITPOS 13
                             4040 ; 143  |#define HW_FLCFCR_CFAI_BITPOS 14
                             4041 ; 144  |#define HW_FLCFCR_XDDI_BITPOS 16
                             4042 ; 145  |#define HW_FLCFCR_CS_BITPOS 17
                             4043 ; 146  |#define HW_FLCFCR_CRE_BITPOS 19
                             4044 ; 147  |#define HW_FLCFCR_VS_BITPOS 20
                             4045 ; 148  |#define HW_FLCFCR_DASP_BITPOS 22
                             4046 ; 149  |
                             4047 ; 150  |#define HW_FLCFCR_WP_SETMASK 1<<HW_FLCFCR_WP_BITPOS
                             4048 ; 151  |#define HW_FLCFCR_CDP_SETMASK 1<<HW_FLCFCR_CDP_BITPOS
                             4049 ; 152  |#define HW_FLCFCR_SM_SETMASK 3<<HW_FLCFCR_SM_BITPOS
                             4050 ; 153  |#define HW_FLCFCR_XATTR_SETMASK 1<<HW_FLCFCR_XATTR_BITPOS
                             4051 ; 154  |#define HW_FLCFCR_CRST_SETMASK 1<<HW_FLCFCR_CRST_BITPOS
                             4052 ; 155  |#define HW_FLCFCR_XWT_SETMASK 1<<HW_FLCFCR_XWT_BITPOS
                             4053 ; 156  |#define HW_FLCFCR_RI_SETMASK 1<<HW_FLCFCR_RI_BITPOS
                             4054 ; 157  |#define HW_FLCFCR_IFCE_SETMASK 1<<HW_FLCFCR_IFCE_BITPOS
                             4055 ; 158  |#define HW_FLCFCR_ISCE_SETMASK 1<<HW_FLCFCR_ISCE_BITPOS
                             4056 ; 159  |#define HW_FLCFCR_INCE_SETMASK 1<<HW_FLCFCR_INCE_BITPOS
                             4057 ; 160  |#define HW_FLCFCR_IFCS_SETMASK 1<<HW_FLCFCR_IFCS_BITPOS
                             4058 ; 161  |#define HW_FLCFCR_ISCS_SETMASK 1<<HW_FLCFCR_ISCS_BITPOS
                             4059 ; 162  |#define HW_FLCFCR_INCS_SETMASK 1<<HW_FLCFCR_INCS_BITPOS
                             4060 ; 163  |#define HW_FLCFCR_CFAI_SETMASK 3<<HW_FLCFCR_CFAI_BITPOS
                             4061 ; 164  |#define HW_FLCFCR_XDDI_SETMASK 1<<HW_FLCFCR_XDDI_BITPOS
                             4062 ; 165  |#define HW_FLCFCR_CS_SETMASK 3<<HW_FLCFCR_CS_BITPOS
                             4063 ; 166  |#define HW_FLCFCR_CRE_SETMASK 1<<HW_FLCFCR_CRE_BITPOS
                             4064 ; 167  |#define HW_FLCFCR_VS_SETMASK 3<<HW_FLCFCR_VS_BITPOS
                             4065 ; 168  |#define HW_FLCFCR_DASP_SETMASK 1<<HW_FLCFCR_DASP_BITPOS
                             4066 ; 169  |
                             4067 ; 170  |#define HW_FLCFCR_WP_CLRMASK ~(WORD)HW_FLCFCR_WP_SETMASK
                             4068 ; 171  |#define HW_FLCFCR_CDP_CLRMASK ~(WORD)HW_FLCFCR_CDP_SETMASK
                             4069 ; 172  |#define HW_FLCFCR_SM_CLRMASK ~(WORD)HW_FLCFCR_SM_SETMASK
                             4070 ; 173  |#define HW_FLCFCR_XATTR_CLRMASK ~(WORD)HW_FLCFCR_XATTR_SETMASK
                             4071 ; 174  |#define HW_FLCFCR_CRST_CLRMASK ~(WORD)HW_FLCFCR_CRST_SETMASK
                             4072 ; 175  |#define HW_FLCFCR_XWT_CLRMASK ~(WORD)HW_FLCFCR_XWT_SETMASK
                             4073 ; 176  |#define HW_FLCFCR_RI_CLRMASK ~(WORD)HW_FLCFCR_RI_SETMASK
                             4074 ; 177  |#define HW_FLCFCR_IFCE_CLRMASK ~(WORD)HW_FLCFCR_IFCE_SETMASK
                             4075 ; 178  |#define HW_FLCFCR_ISCE_CLRMASK ~(WORD)HW_FLCFCR_ISCE_SETMASK
                             4076 ; 179  |#define HW_FLCFCR_INCE_CLRMASK ~(WORD)HW_FLCFCR_INCE_SETMASK
                             4077 ; 180  |#define HW_FLCFCR_IFCS_CLRMASK ~(WORD)HW_FLCFCR_IFCS_SETMASK
                             4078 ; 181  |#define HW_FLCFCR_ISCS_CLRMASK ~(WORD)HW_FLCFCR_ISCS_SETMASK
                             4079 ; 182  |#define HW_FLCFCR_INCS_CLRMASK ~(WORD)HW_FLCFCR_INCS_SETMASK
                             4080 ; 183  |#define HW_FLCFCR_CFAI_CLRMASK ~(WORD)HW_FLCFCR_CFAI_SETMASK
                             4081 ; 184  |#define HW_FLCFCR_XDDI_CLRMASK ~(WORD)HW_FLCFCR_XDDI_SETMASK
                             4082 ; 185  |#define HW_FLCFCR_CS_CLRMASK ~(WORD)HW_FLCFCR_CS_SETMASK
                             4083 ; 186  |#define HW_FLCFCR_CRE_CLRMASK ~(WORD)HW_FLCFCR_CRE_SETMASK
                             4084 ; 187  |#define HW_FLCFCR_VS_CLRMASK ~(WORD)HW_FLCFCR_VS_SETMASK
                             4085 ; 188  |#define HW_FLCFCR_DASP_CLRMASK ~(WORD)HW_FLCFCR_DASP_SETMASK
                             4086 ; 189  |
                             4087 ; 190  |
                             4088 ; 191  |/////////////////////////////////////////////////////////////////////////////////
                             4089 ; 192  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR1R) Bit Definitions
                             4090 ; 193  |
                             4091 ; 194  |typedef union           /* Flash CompactFlash Timer1 Register*/
                             4092 ; 195  |{
                             4093 ; 196  |    struct
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  69

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4094 ; 197  |    {
                             4095 ; 198  |        unsigned TRWSU  :5;
                             4096 ; 199  |        unsigned TRPW   :7;
                             4097 ; 200  |        unsigned TWPW   :7;
                             4098 ; 201  |        unsigned TRWH   :5;
                             4099 ; 202  |    } B;
                             4100 ; 203  |    int I;
                             4101 ; 204  |} flcftmr1r_type;
                             4102 ; 205  |
                             4103 ; 206  |#define HW_FLCFTMR1R_TRWSU_BITPOS 0
                             4104 ; 207  |#define HW_FLCFTMR1R_TRPW_BITPOS 5
                             4105 ; 208  |#define HW_FLCFTMR1R_TWPW_BITPOS 12
                             4106 ; 209  |#define HW_FLCFTMR1R_TRWH_BITPOS 19
                             4107 ; 210  |
                             4108 ; 211  |#define HW_FLCFTMR1R_TRWSU_SETMASK 0x1F<<HW_FLCFTMR1R_TRWSU_BITPOS
                             4109 ; 212  |#define HW_FLCFTMR1R_TRPW_SETMASK 0x7F<<HW_FLCFTMR1R_TRPW_BITPOS
                             4110 ; 213  |#define HW_FLCFTMR1R_TWPW_SETMASK 0x7F<<HW_FLCFTMR1R_TWPW_BITPOS
                             4111 ; 214  |#define HW_FLCFTMR1R_TRWH_SETMASK 0x1F<<HW_FLCFTMR1R_TRWH_BITPOS
                             4112 ; 215  |
                             4113 ; 216  |#define HW_FLCFTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWSU_SETMASK
                             4114 ; 217  |#define HW_FLCFTMR1R_TRPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TRPW_SETMASK
                             4115 ; 218  |#define HW_FLCFTMR1R_TWPW_CLRMASK ~(WORD)HW_FLCFTMR1R_TWPW_SETMASK
                             4116 ; 219  |#define HW_FLCFTMR1R_TRWH_CLRMASK ~(WORD)HW_FLCFTMR1R_TRWH_SETMASK
                             4117 ; 220  |
                             4118 ; 221  |
                             4119 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                             4120 ; 223  |//  EMC Flash Compact Flash Timer1 Register (HW_FLCFTMR2R) Bit Definitions
                             4121 ; 224  |
                             4122 ; 225  |typedef union           /* Flash CompactFlash Timer2 Register*/
                             4123 ; 226  |{
                             4124 ; 227  |    struct
                             4125 ; 228  |    {
                             4126 ; 229  |        unsigned TWW    :4;
                             4127 ; 230  |        unsigned TWTO   :10;
                             4128 ; 231  |        unsigned THW    :5; 
                             4129 ; 232  |        unsigned TRAQ   :5;
                             4130 ; 233  |    } B;
                             4131 ; 234  |    int I;
                             4132 ; 235  |} flcftmr2r_type;
                             4133 ; 236  |
                             4134 ; 237  |#define HW_FLCFTMR2R_TWW_BITPOS 0
                             4135 ; 238  |#define HW_FLCFTMR2R_TWTO_BITPOS 4
                             4136 ; 239  |#define HW_FLCFTMR2R_THW_BITPOS 14
                             4137 ; 240  |#define HW_FLCFTMR2R_TRAQ_BITPOS 19
                             4138 ; 241  |
                             4139 ; 242  |#define HW_FLCFTMR2R_TWW_SETMASK 0xF<<HW_FLCFTMR2R_TWW_BITPOS
                             4140 ; 243  |#define HW_FLCFTMR2R_TWTO_SETMASK 0x3FF<<HW_FLCFTMR2R_TWTO_BITPOS
                             4141 ; 244  |#define HW_FLCFTMR2R_THW_SETMASK 0x1F<<HW_FLCFTMR2R_THW_BITPOS
                             4142 ; 245  |#define HW_FLCFTMR2R_TRAQ_SETMASK 0x1F<<HW_FLCFTMR2R_TRAQ_BITPOS
                             4143 ; 246  |
                             4144 ; 247  |#define HW_FLCFTMR2R_TWW_CLRMASK ~(WORD)HW_FLCFTMR2R_TWW_SETMASK
                             4145 ; 248  |#define HW_FLCFTMR2R_TWTO_CLRMASK ~(WORD)HW_FLCFTMR2R_TWTO_SETMASK
                             4146 ; 249  |#define HW_FLCFTMR2R_THW_CLRMASK ~(WORD)HW_FLCFTMR2R_THW_SETMASK
                             4147 ; 250  |#define HW_FLCFTMR2R_TRAQ_CLRMASK ~(WORD)HW_FLCFTMR2R_TRAQ_SETMASK
                             4148 ; 251  |
                             4149 ; 252  |
                             4150 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                             4151 ; 254  |//  EMC Flash SmartMedia Control Register (HW_FLSMCR) Bit Definitions
                             4152 ; 255  |
                             4153 ; 256  |typedef union           /* Flash SmartMedia Control Register*/
                             4154 ; 257  |{
                             4155 ; 258  |    struct
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  70

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4156 ; 259  |    {
                             4157 ; 260  |        unsigned CS     :2;
                             4158 ; 261  |        int SE          :1;
                             4159 ; 262  |        int WP          :1;
                             4160 ; 263  |        int SIZE        :1;
                             4161 ; 264  |        int ICMD        :8;
                             4162 ; 265  |        int TOIE        :1;
                             4163 ; 266  |        int BPIE        :1;
                             4164 ; 267  |        int TOIRQ       :1;
                             4165 ; 268  |        int BPIRQ       :1;
                             4166 ; 269  |    } B;
                             4167 ; 270  |    int I;
                             4168 ; 271  |} flsmcr_type;
                             4169 ; 272  |
                             4170 ; 273  |#define HW_FLSMCR_CS_BITPOS 0
                             4171 ; 274  |#define HW_FLSMCR_SE_BITPOS 2
                             4172 ; 275  |#define HW_FLSMCR_WP_BITPOS 3
                             4173 ; 276  |#define HW_FLSMCR_SIZE_BITPOS 4
                             4174 ; 277  |#define HW_FLSMCR_ICMD_BITPOS 5
                             4175 ; 278  |#define HW_FLSMCR_TOIE_BITPOS 13
                             4176 ; 279  |#define HW_FLSMCR_BPIE_BITPOS 14
                             4177 ; 280  |#define HW_FLSMCR_TOIRQ_BITPOS 15
                             4178 ; 281  |#define HW_FLSMCR_BPIRQ_BITPOS 16
                             4179 ; 282  |
                             4180 ; 283  |#define HW_FLSMCR_CS_SETMASK 1<<HW_FLSMCR_CS_BITPOS
                             4181 ; 284  |#define HW_FLSMCR_SE_SETMASK 1<<HW_FLSMCR_SE_BITPOS
                             4182 ; 285  |#define HW_FLSMCR_WP_SETMASK 1<<HW_FLSMCR_WP_BITPOS
                             4183 ; 286  |#define HW_FLSMCR_SIZE_SETMASK 1<<HW_FLSMCR_SIZE_BITPOS
                             4184 ; 287  |#define HW_FLSMCR_ICMD_SETMASK (0xFF)<<HW_FLSMCR_ICMD_BITPOS
                             4185 ; 288  |#define HW_FLSMCR_TOIE_SETMASK 1<<HW_FLSMCR_TOIE_BITPOS
                             4186 ; 289  |#define HW_FLSMCR_BPIE_SETMASK 1<<HW_FLSMCR_BPIE_BITPOS
                             4187 ; 290  |#define HW_FLSMCR_TOIRQ_SETMASK 1<<HW_FLSMCR_TOIRQ_BITPOS
                             4188 ; 291  |#define HW_FLSMCR_BPIRQ_SETMASK 1<<HW_FLSMCR_BPIRQ_BITPOS
                             4189 ; 292  |
                             4190 ; 293  |#define HW_FLSMCR_SE_ASSERT_SETMASK 0x000000
                             4191 ; 294  |#define HW_FLSMCR_SE_DEASSERT_SETMASK 0x000004
                             4192 ; 295  |#define HW_FLSMCR_WP_ASSERT_SETMASK 0x000000
                             4193 ; 296  |#define HW_FLSMCR_WP_DEASSERT_SETMASK 0x000008
                             4194 ; 297  |#define HW_FLSMCR_SIZE_SMALL_SETMASK 0x000000
                             4195 ; 298  |#define HW_FLSMCR_SIZE_LARGE_SETMASK 0x000010
                             4196 ; 299  |#define HW_FLSMCR_ICMD_RESET_SETMASK 0x001FE0
                             4197 ; 300  |#define HW_FLSMCR_ICMD_READ_STATUS_SETMASK 0x000E00
                             4198 ; 301  |#define HW_FLSMCR_ICMD_BLOCK_ERASE_SETMASK 0x000C00
                             4199 ; 302  |#define HW_FLSMCR_ICMD_ERASE_SETMASK 0x001A00
                             4200 ; 303  |#define HW_FLSMCR_ICMD_RP_FIRST_SETMASK 0x000000
                             4201 ; 304  |#define HW_FLSMCR_ICMD_RP_SECOND_SETMASK 0x000020
                             4202 ; 305  |#define HW_FLSMCR_ICMD_RP_SPARE_SETMASK 0x000A00
                             4203 ; 306  |#define HW_FLSMCR_ICMD_READ_ID_SETMASK 0x001200
                             4204 ; 307  |
                             4205 ; 308  |#define HW_FLSMCR_CS_CLRMASK ~(WORD)HW_FLSMCR_CS_SETMASK
                             4206 ; 309  |#define HW_FLSMCR_SE_CLRMASK ~(WORD)HW_FLSMCR_SE_SETMASK
                             4207 ; 310  |#define HW_FLSMCR_WP_CLRMASK ~(WORD)HW_FLSMCR_WP_SETMASK
                             4208 ; 311  |#define HW_FLSMCR_SIZE_CLRMASK ~(WORD)HW_FLSMCR_SIZE_SETMASK
                             4209 ; 312  |#define HW_FLSMCR_ICMD_CLRMASK ~(WORD)HW_FLSMCR_ICMD_SETMASK
                             4210 ; 313  |#define HW_FLSMCR_TOIE_CLRMASK ~(WORD)HW_FLSMCR_TOIE_SETMASK
                             4211 ; 314  |#define HW_FLSMCR_BPIE_CLRMASK ~(WORD)HW_FLSMCR_BPIE_SETMASK
                             4212 ; 315  |#define HW_FLSMCR_TOIRQ_CLRMASK ~(WORD)HW_FLSMCR_TOIRQ_SETMASK
                             4213 ; 316  |#define HW_FLSMCR_BPIRQ_CLRMASK ~(WORD)HW_FLSMCR_BPIRQ_SETMASK
                             4214 ; 317  |
                             4215 ; 318  |
                             4216 ; 319  |/////////////////////////////////////////////////////////////////////////////////
                             4217 ; 320  |//  EMC Flash SmartMedia Timer1 Register (HW_FLSMTMR1R) Bit Definitions
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  71

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4218 ; 321  |
                             4219 ; 322  |typedef union           /* Flash SmartMedia Timer1 Register*/
                             4220 ; 323  |{
                             4221 ; 324  |    struct
                             4222 ; 325  |    {
                             4223 ; 326  |        unsigned TRWSU  :5;
                             4224 ; 327  |        unsigned TRPW   :6;
                             4225 ; 328  |        unsigned TWPW   :6;
                             4226 ; 329  |        unsigned TRWH   :5;
                             4227 ; 330  |    } B;
                             4228 ; 331  |    int I;
                             4229 ; 332  |} flsmtmr1r_type;
                             4230 ; 333  |
                             4231 ; 334  |#define HW_FLSMTMR1R_TRWSU_BITPOS 0
                             4232 ; 335  |#define HW_FLSMTMR1R_TRPW_BITPOS 5
                             4233 ; 336  |#define HW_FLSMTMR1R_TWPW_BITPOS 11
                             4234 ; 337  |#define HW_FLSMTMR1R_TRWH_BITPOS 17
                             4235 ; 338  |
                             4236 ; 339  |#define HW_FLSMTMR1R_TRWSU_SETMASK 0x1F<<HW_FLSMTMR1R_TRWSU_BITPOS
                             4237 ; 340  |#define HW_FLSMTMR1R_TRPW_SETMASK 0x3F<<HW_FLSMTMR1R_TRPW_BITPOS
                             4238 ; 341  |#define HW_FLSMTMR1R_TWPW_SETMASK 0x3F<<HW_FLSMTMR1R_TWPW_BITPOS
                             4239 ; 342  |#define HW_FLSMTMR1R_TRWH_SETMASK 0x1F<<HW_FLSMTMR1R_TRWH_BITPOS
                             4240 ; 343  |
                             4241 ; 344  |#define HW_FLSMTMR1R_TRWSU_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWSU_SETMASK
                             4242 ; 345  |#define HW_FLSMTMR1R_TRPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TRPW_SETMASK
                             4243 ; 346  |#define HW_FLSMTMR1R_TWPW_CLRMASK ~(WORD)HW_FLSMTMR1R_TWPW_SETMASK
                             4244 ; 347  |#define HW_FLSMTMR1R_TRWH_CLRMASK ~(WORD)HW_FLSMTMR1R_TRWH_SETMASK
                             4245 ; 348  |
                             4246 ; 349  |
                             4247 ; 350  |/////////////////////////////////////////////////////////////////////////////////
                             4248 ; 351  |//  EMC Flash SmartMedia Timer2 Register (HW_FLSMTMR2R) Bit Definitions
                             4249 ; 352  |
                             4250 ; 353  |typedef union           /* Flash SmartMedia Timer2 Register*/
                             4251 ; 354  |{
                             4252 ; 355  |    struct
                             4253 ; 356  |    {
                             4254 ; 357  |        unsigned TWT    :6;
                             4255 ; 358  |        unsigned TWTO   :18;
                             4256 ; 359  |    } B;
                             4257 ; 360  |    int I;
                             4258 ; 361  |} flsmtmr2r_type;
                             4259 ; 362  |
                             4260 ; 363  |#define HW_FLSMTMR2R_TWT_BITPOS 0
                             4261 ; 364  |#define HW_FLSMTMR2R_TWTO_BITPOS 6
                             4262 ; 365  |
                             4263 ; 366  |#define HW_FLSMTMR2R_TWT_SETMASK 0x3F<<HW_FLSMTMR2R_TWT_BITPOS
                             4264 ; 367  |#define HW_FLSMTMR2R_TWTO_SETMASK 0x3FF<<HW_FLSMTMR2R_TWTO_BITPOS
                             4265 ; 368  |
                             4266 ; 369  |#define HW_FLSMTMR2R_TWT_CLRMASK ~(WORD)HW_FLSMTMR2R_TWT_SETMASK
                             4267 ; 370  |#define HW_FLSMTMR2R_TWTO_CLRMASK ~(WORD)HW_FLSMTMR2R_TWTO_SETMASK
                             4268 ; 371  |
                             4269 ; 372  |/*//////////////////////////////////////////////////////////////////////////////
                             4270 ; 373  |  //  EMC Flash Control Status Register2 (HW_FLCR2) Bit Definitions     */
                             4271 ; 374  |typedef union 
                             4272 ; 375  |{
                             4273 ; 376  |  struct
                             4274 ; 377  |  {
                             4275 ; 378  |    unsigned ASEL     :2;        /* Memory Select */
                             4276 ; 379  |    unsigned RA       :1;        /* Right Align word into 24bit memory for True IDE  xfers
                                   */
                             4277 ; 380  |    unsigned LA       :1;        /* Left  Align word into 24bit memory for True IDE  xfers
                                   */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  72

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4278 ; 381  |    unsigned NEGDMA   :1;        /* Inverts data from Flash to memory */
                             4279 ; 382  |    unsigned NEGFL    :1;        /* Inverts data from memory to Flash */
                             4280 ; 383  |    unsigned CLKOFF   :1;        /* Power down - turns clk off */
                             4281 ; 384  |    int PAD0          :17;    
                             4282 ; 385  |  } B;
                             4283 ; 386  |  int I;
                             4284 ; 387  |} flcr2_type;
                             4285 ; 388  |
                             4286 ; 389  |/////////////////////////////////////////////////////////////////////////////////
                             4287 ; 390  |//  EMC Flash SmartMedia Status Register (HW_FLSMSR) Bit Definitions
                             4288 ; 391  |#define HW_FLSMSR_RDY_BITPOS 0
                             4289 ; 392  |#define HW_FLSMSR_BUSY_BITPOS 7
                             4290 ; 393  |
                             4291 ; 394  |#define HW_FLCR      (*(volatile flcr_type      _X*) (HW_EMC_BASEADDR))    /* EMC Flash Co
                                  ntrol Register */
                             4292 ; 395  |#define HW_FLSALR    (*(volatile flsalr_type    _X*) (HW_EMC_BASEADDR+1))  /* EMC Flash St
                                  art Address Low Register */
                             4293 ; 396  |#define HW_FLSAHR    (*(volatile flsahr_type    _X*) (HW_EMC_BASEADDR+2))  /* EMC Flash St
                                  art Address High Register */
                             4294 ; 397  |#define HW_FLSSMPR   (*(volatile flssmpr_type   _X*) (HW_EMC_BASEADDR+3))  /*  */
                             4295 ; 398  |#define HW_FLCR2     (*(volatile flcr2_type     _X*) (HW_EMC_BASEADDR+4))  /* EMC Flash Co
                                  ntrol Register2 */
                             4296 ; 399  |#define HW_FLCFCR    (*(volatile flcfcr_type    _X*) (HW_EMC_BASEADDR+8))  /* EMC Flash Co
                                  mpactFlash Control Register*/
                             4297 ; 400  |#define HW_FLCFTMR1R (*(volatile flcftmr1r_type _X*) (HW_EMC_BASEADDR+9))  /* EMC Flash Co
                                  mpact Flash Timer1 Register*/
                             4298 ; 401  |#define HW_FLCFTMR2R (*(volatile flcftmr2r_type _X*) (HW_EMC_BASEADDR+10)) /* EMC Flash Co
                                  mpact Flash Timer2 Register*/
                             4299 ; 402  |#define HW_FLSMCR    (*(volatile flsmcr_type    _X*) (HW_EMC_BASEADDR+16)) /* EMC Flash Sm
                                  artMedia Control Register*/
                             4300 ; 403  |#define HW_FLSMTMR1R (*(volatile flsmtmr1r_type _X*) (HW_EMC_BASEADDR+17)) /* EMC Flash Sm
                                  artMedia Timer1 Register*/
                             4301 ; 404  |#define HW_FLSMTMR2R (*(volatile flsmtmr2r_type _X*) (HW_EMC_BASEADDR+18)) /* EMC Flash Sm
                                  artMedia Timer2 Register*/
                             4302 ; 405  |#define HW_FLSMSR    (*(volatile flssmsr_type   _X*) (HW_EMC_BASEADDR+19)) /*  */
                             4303 ; 406  |
                             4304 ; 407  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             4305 ; 408  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             4306 ; 409  |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             4307 ; 410  |
                             4308 ; 411  |#define HW_FLC2R HW_EMC_BASEADDR+4
                             4309 ; 412  |
                             4310 ; 413  |#endif
                             4311 ; 414  |
                             4312 
                             4314 
                             4315 ; 22   |#include "regsgpio.h"
                             4316 
                             4318 
                             4319 ; 1    |#if !(defined(__REGS_GPIO_INC))
                             4320 ; 2    |#define __REGS_GPIO_INC 1
                             4321 ; 3    |
                             4322 ; 4    |#include "types.h"
                             4323 
                             4325 
                             4326 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4327 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4328 ; 3    |//
                             4329 ; 4    |// Filename: types.h
                             4330 ; 5    |// Description: Standard data types
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  73

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4331 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4332 ; 7    |
                             4333 ; 8    |#ifndef _TYPES_H
                             4334 ; 9    |#define _TYPES_H
                             4335 ; 10   |
                             4336 ; 11   |// TODO:  move this outta here!
                             4337 ; 12   |#if !defined(NOERROR)
                             4338 ; 13   |#define NOERROR 0
                             4339 ; 14   |#define SUCCESS 0
                             4340 ; 15   |#endif 
                             4341 ; 16   |#if !defined(SUCCESS)
                             4342 ; 17   |#define SUCCESS  0
                             4343 ; 18   |#endif
                             4344 ; 19   |#if !defined(ERROR)
                             4345 ; 20   |#define ERROR   -1
                             4346 ; 21   |#endif
                             4347 ; 22   |#if !defined(FALSE)
                             4348 ; 23   |#define FALSE 0
                             4349 ; 24   |#endif
                             4350 ; 25   |#if !defined(TRUE)
                             4351 ; 26   |#define TRUE  1
                             4352 ; 27   |#endif
                             4353 ; 28   |
                             4354 ; 29   |#if !defined(NULL)
                             4355 ; 30   |#define NULL 0
                             4356 ; 31   |#endif
                             4357 ; 32   |
                             4358 ; 33   |#define MAX_INT     0x7FFFFF
                             4359 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4360 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4361 ; 36   |#define MAX_ULONG   (-1) 
                             4362 ; 37   |
                             4363 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4364 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4365 ; 40   |
                             4366 ; 41   |
                             4367 ; 42   |#define BYTE    unsigned char       // btVarName
                             4368 ; 43   |#define CHAR    signed char         // cVarName
                             4369 ; 44   |#define USHORT  unsigned short      // usVarName
                             4370 ; 45   |#define SHORT   unsigned short      // sVarName
                             4371 ; 46   |#define WORD    unsigned int        // wVarName
                             4372 ; 47   |#define INT     signed int          // iVarName
                             4373 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4374 ; 49   |#define LONG    signed long         // lVarName
                             4375 ; 50   |#define BOOL    unsigned int        // bVarName
                             4376 ; 51   |#define FRACT   _fract              // frVarName
                             4377 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4378 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4379 ; 54   |#define FLOAT   float               // fVarName
                             4380 ; 55   |#define DBL     double              // dVarName
                             4381 ; 56   |#define ENUM    enum                // eVarName
                             4382 ; 57   |#define CMX     _complex            // cmxVarName
                             4383 ; 58   |typedef WORD UCS3;                   // 
                             4384 ; 59   |
                             4385 ; 60   |#define UINT16  unsigned short
                             4386 ; 61   |#define UINT8   unsigned char   
                             4387 ; 62   |#define UINT32  unsigned long
                             4388 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4389 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4390 ; 65   |#define WCHAR   UINT16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  74

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4391 ; 66   |
                             4392 ; 67   |//UINT128 is 16 bytes or 6 words
                             4393 ; 68   |typedef struct UINT128_3500 {   
                             4394 ; 69   |    int val[6];     
                             4395 ; 70   |} UINT128_3500;
                             4396 ; 71   |
                             4397 ; 72   |#define UINT128   UINT128_3500
                             4398 ; 73   |
                             4399 ; 74   |// Little endian word packed byte strings:   
                             4400 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4401 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4402 ; 77   |// Little endian word packed byte strings:   
                             4403 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4404 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4405 ; 80   |
                             4406 ; 81   |// Declare Memory Spaces To Use When Coding
                             4407 ; 82   |// A. Sector Buffers
                             4408 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4409 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4410 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4411 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4412 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4413 ; 88   |// B. Media DDI Memory
                             4414 ; 89   |#define MEDIA_DDI_MEM _Y
                             4415 ; 90   |
                             4416 ; 91   |
                             4417 ; 92   |
                             4418 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4419 ; 94   |// Examples of circular pointers:
                             4420 ; 95   |//    INT CIRC cpiVarName
                             4421 ; 96   |//    DWORD CIRC cpdwVarName
                             4422 ; 97   |
                             4423 ; 98   |#define RETCODE INT                 // rcVarName
                             4424 ; 99   |
                             4425 ; 100  |// generic bitfield structure
                             4426 ; 101  |struct Bitfield {
                             4427 ; 102  |    unsigned int B0  :1;
                             4428 ; 103  |    unsigned int B1  :1;
                             4429 ; 104  |    unsigned int B2  :1;
                             4430 ; 105  |    unsigned int B3  :1;
                             4431 ; 106  |    unsigned int B4  :1;
                             4432 ; 107  |    unsigned int B5  :1;
                             4433 ; 108  |    unsigned int B6  :1;
                             4434 ; 109  |    unsigned int B7  :1;
                             4435 ; 110  |    unsigned int B8  :1;
                             4436 ; 111  |    unsigned int B9  :1;
                             4437 ; 112  |    unsigned int B10 :1;
                             4438 ; 113  |    unsigned int B11 :1;
                             4439 ; 114  |    unsigned int B12 :1;
                             4440 ; 115  |    unsigned int B13 :1;
                             4441 ; 116  |    unsigned int B14 :1;
                             4442 ; 117  |    unsigned int B15 :1;
                             4443 ; 118  |    unsigned int B16 :1;
                             4444 ; 119  |    unsigned int B17 :1;
                             4445 ; 120  |    unsigned int B18 :1;
                             4446 ; 121  |    unsigned int B19 :1;
                             4447 ; 122  |    unsigned int B20 :1;
                             4448 ; 123  |    unsigned int B21 :1;
                             4449 ; 124  |    unsigned int B22 :1;
                             4450 ; 125  |    unsigned int B23 :1;
                             4451 ; 126  |};
                             4452 ; 127  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  75

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4453 ; 128  |union BitInt {
                             4454 ; 129  |        struct Bitfield B;
                             4455 ; 130  |        int        I;
                             4456 ; 131  |};
                             4457 ; 132  |
                             4458 ; 133  |#define MAX_MSG_LENGTH 10
                             4459 ; 134  |struct CMessage
                             4460 ; 135  |{
                             4461 ; 136  |        unsigned int m_uLength;
                             4462 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             4463 ; 138  |};
                             4464 ; 139  |
                             4465 ; 140  |typedef struct {
                             4466 ; 141  |    WORD m_wLength;
                             4467 ; 142  |    WORD m_wMessage;
                             4468 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             4469 ; 144  |} Message;
                             4470 ; 145  |
                             4471 ; 146  |struct MessageQueueDescriptor
                             4472 ; 147  |{
                             4473 ; 148  |        int *m_pBase;
                             4474 ; 149  |        int m_iModulo;
                             4475 ; 150  |        int m_iSize;
                             4476 ; 151  |        int *m_pHead;
                             4477 ; 152  |        int *m_pTail;
                             4478 ; 153  |};
                             4479 ; 154  |
                             4480 ; 155  |struct ModuleEntry
                             4481 ; 156  |{
                             4482 ; 157  |    int m_iSignaledEventMask;
                             4483 ; 158  |    int m_iWaitEventMask;
                             4484 ; 159  |    int m_iResourceOfCode;
                             4485 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             4486 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             4487 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             4488 ; 163  |    int m_uTimeOutHigh;
                             4489 ; 164  |    int m_uTimeOutLow;
                             4490 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             4491 ; 166  |};
                             4492 ; 167  |
                             4493 ; 168  |union WaitMask{
                             4494 ; 169  |    struct B{
                             4495 ; 170  |        unsigned int m_bNone     :1;
                             4496 ; 171  |        unsigned int m_bMessage  :1;
                             4497 ; 172  |        unsigned int m_bTimer    :1;
                             4498 ; 173  |        unsigned int m_bButton   :1;
                             4499 ; 174  |    } B;
                             4500 ; 175  |    int I;
                             4501 ; 176  |} ;
                             4502 ; 177  |
                             4503 ; 178  |
                             4504 ; 179  |struct Button {
                             4505 ; 180  |        WORD wButtonEvent;
                             4506 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             4507 ; 182  |};
                             4508 ; 183  |
                             4509 ; 184  |struct Message {
                             4510 ; 185  |        WORD wMsgLength;
                             4511 ; 186  |        WORD wMsgCommand;
                             4512 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             4513 ; 188  |};
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  76

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4514 ; 189  |
                             4515 ; 190  |union EventTypes {
                             4516 ; 191  |        struct CMessage msg;
                             4517 ; 192  |        struct Button Button ;
                             4518 ; 193  |        struct Message Message;
                             4519 ; 194  |};
                             4520 ; 195  |
                             4521 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             4522 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             4523 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             4524 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             4525 ; 200  |
                             4526 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             4527 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             4528 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             4529 ; 204  |
                             4530 ; 205  |#if DEBUG
                             4531 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             4532 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             4533 ; 208  |#else 
                             4534 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             4535 ; 210  |#define DebugBuildAssert(x)    
                             4536 ; 211  |#endif
                             4537 ; 212  |
                             4538 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             4539 ; 214  |//  #pragma asm
                             4540 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             4541 ; 216  |//  #pragma endasm
                             4542 ; 217  |
                             4543 ; 218  |
                             4544 ; 219  |#ifdef COLOR_262K
                             4545 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             4546 ; 221  |#elif defined(COLOR_65K)
                             4547 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             4548 ; 223  |#else
                             4549 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             4550 ; 225  |#endif
                             4551 ; 226  |    
                             4552 ; 227  |#endif // #ifndef _TYPES_H
                             4553 
                             4555 
                             4556 ; 5    |
                             4557 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             4558 ; 7    |//  Interrupt Collector Registers
                             4559 ; 8    |/////////////////////////////////////////////////////////////////////////////////
                             4560 ; 9    |
                             4561 ; 10   |#define HW_GPIO_BASEADDR 0xF400
                             4562 ; 11   |
                             4563 ; 12   |#define HW_GPB0_BASEADDR HW_GPIO_BASEADDR
                             4564 ; 13   |#define HW_GPB1_BASEADDR HW_GPIO_BASEADDR+0x10
                             4565 ; 14   |#define HW_GPB2_BASEADDR HW_GPIO_BASEADDR+0x20
                             4566 ; 15   |#define HW_GPB3_BASEADDR HW_GPIO_BASEADDR+0x30
                             4567 ; 16   |
                             4568 ; 17   |#define HW_GPB0_BLOCKNUM 0
                             4569 ; 18   |#define HW_GPB1_BLOCKNUM 1
                             4570 ; 19   |#define HW_GPB2_BLOCKNUM 2
                             4571 ; 20   |#define HW_GPB3_BLOCKNUM 3
                             4572 ; 21   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  77

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4573 ; 22   |#define HW_GPB_GPENR 0
                             4574 ; 23   |#define HW_GPB_GPDOR 1
                             4575 ; 24   |#define HW_GPB_GPDIR 2
                             4576 ; 25   |#define HW_GPB_GPDOER 3
                             4577 ; 26   |#define HW_GPB_GPIPENR 4
                             4578 ; 27   |#define HW_GPB_GPIENR 5
                             4579 ; 28   |#define HW_GPB_GPILVLR 6
                             4580 ; 29   |#define HW_GPB_GPIPOLR 7
                             4581 ; 30   |#define HW_GPB_GPISTATR 8
                             4582 ; 31   |#define HW_GPB_GPPWR 9
                             4583 ; 32   |#define HW_GPB_GP8MA 10
                             4584 ; 33   |
                             4585 ; 34   |
                             4586 ; 35   |
                             4587 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             4588 ; 37   |//  GPIO Register Bit Positions
                             4589 ; 38   |typedef union               /* GPIO Pin Register Bank 0 */
                             4590 ; 39   |{
                             4591 ; 40   |    struct Bitfield B;      // Bitfield is generic structure B0 - B23 in types.h
                             4592 ; 41   |    unsigned int I;
                             4593 ; 42   |    unsigned int U;
                             4594 ; 43   |} gpr_type;
                             4595 ; 44   |
                             4596 ; 45   |#define HW_GP_B0_BITPOS 0
                             4597 ; 46   |#define HW_GP_B1_BITPOS 1
                             4598 ; 47   |#define HW_GP_B2_BITPOS 2
                             4599 ; 48   |#define HW_GP_B3_BITPOS 3
                             4600 ; 49   |#define HW_GP_B4_BITPOS 4
                             4601 ; 50   |#define HW_GP_B5_BITPOS 5
                             4602 ; 51   |#define HW_GP_B6_BITPOS 6
                             4603 ; 52   |#define HW_GP_B7_BITPOS 7
                             4604 ; 53   |#define HW_GP_B8_BITPOS 8
                             4605 ; 54   |#define HW_GP_B9_BITPOS 9
                             4606 ; 55   |#define HW_GP_B10_BITPOS 10
                             4607 ; 56   |#define HW_GP_B11_BITPOS 11
                             4608 ; 57   |#define HW_GP_B12_BITPOS 12
                             4609 ; 58   |#define HW_GP_B13_BITPOS 13
                             4610 ; 59   |#define HW_GP_B14_BITPOS 14
                             4611 ; 60   |#define HW_GP_B15_BITPOS 15
                             4612 ; 61   |#define HW_GP_B16_BITPOS 16
                             4613 ; 62   |#define HW_GP_B17_BITPOS 17
                             4614 ; 63   |#define HW_GP_B18_BITPOS 18
                             4615 ; 64   |#define HW_GP_B19_BITPOS 19
                             4616 ; 65   |#define HW_GP_B20_BITPOS 20
                             4617 ; 66   |#define HW_GP_B21_BITPOS 21
                             4618 ; 67   |#define HW_GP_B22_BITPOS 22
                             4619 ; 68   |#define HW_GP_B23_BITPOS 23
                             4620 ; 69   |
                             4621 ; 70   |#define HW_GP_B0_SETMASK (1<<HW_GP_B0_BITPOS)
                             4622 ; 71   |#define HW_GP_B1_SETMASK (1<<HW_GP_B1_BITPOS)
                             4623 ; 72   |#define HW_GP_B2_SETMASK (1<<HW_GP_B2_BITPOS)
                             4624 ; 73   |#define HW_GP_B3_SETMASK (1<<HW_GP_B3_BITPOS)
                             4625 ; 74   |#define HW_GP_B4_SETMASK (1<<HW_GP_B4_BITPOS)
                             4626 ; 75   |#define HW_GP_B5_SETMASK (1<<HW_GP_B5_BITPOS)
                             4627 ; 76   |#define HW_GP_B6_SETMASK (1<<HW_GP_B6_BITPOS)
                             4628 ; 77   |#define HW_GP_B7_SETMASK (1<<HW_GP_B7_BITPOS)
                             4629 ; 78   |#define HW_GP_B8_SETMASK (1<<HW_GP_B8_BITPOS)
                             4630 ; 79   |#define HW_GP_B9_SETMASK (1<<HW_GP_B9_BITPOS)
                             4631 ; 80   |#define HW_GP_B10_SETMASK (1<<HW_GP_B10_BITPOS)
                             4632 ; 81   |#define HW_GP_B11_SETMASK (1<<HW_GP_B11_BITPOS)
                             4633 ; 82   |#define HW_GP_B12_SETMASK (1<<HW_GP_B12_BITPOS)
                             4634 ; 83   |#define HW_GP_B13_SETMASK (1<<HW_GP_B13_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  78

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4635 ; 84   |#define HW_GP_B14_SETMASK (1<<HW_GP_B14_BITPOS)
                             4636 ; 85   |#define HW_GP_B15_SETMASK (1<<HW_GP_B15_BITPOS)
                             4637 ; 86   |#define HW_GP_B16_SETMASK (1<<HW_GP_B16_BITPOS)
                             4638 ; 87   |#define HW_GP_B17_SETMASK (1<<HW_GP_B17_BITPOS)
                             4639 ; 88   |#define HW_GP_B18_SETMASK (1<<HW_GP_B18_BITPOS)
                             4640 ; 89   |#define HW_GP_B19_SETMASK (1<<HW_GP_B19_BITPOS)
                             4641 ; 90   |#define HW_GP_B20_SETMASK (1<<HW_GP_B20_BITPOS)
                             4642 ; 91   |#define HW_GP_B21_SETMASK (1<<HW_GP_B21_BITPOS)
                             4643 ; 92   |#define HW_GP_B22_SETMASK (1<<HW_GP_B22_BITPOS)
                             4644 ; 93   |#define HW_GP_B23_SETMASK (1<<HW_GP_B23_BITPOS)
                             4645 ; 94   |
                             4646 ; 95   |#define HW_GP_B0_CLRMASK (~(WORD)HW_GP_B0_SETMASK)
                             4647 ; 96   |#define HW_GP_B1_CLRMASK (~(WORD)HW_GP_B1_SETMASK)
                             4648 ; 97   |#define HW_GP_B2_CLRMASK (~(WORD)HW_GP_B2_SETMASK)
                             4649 ; 98   |#define HW_GP_B3_CLRMASK (~(WORD)HW_GP_B3_SETMASK)
                             4650 ; 99   |#define HW_GP_B4_CLRMASK (~(WORD)HW_GP_B4_SETMASK)
                             4651 ; 100  |#define HW_GP_B5_CLRMASK (~(WORD)HW_GP_B5_SETMASK)
                             4652 ; 101  |#define HW_GP_B6_CLRMASK (~(WORD)HW_GP_B6_SETMASK)
                             4653 ; 102  |#define HW_GP_B7_CLRMASK (~(WORD)HW_GP_B7_SETMASK)
                             4654 ; 103  |#define HW_GP_B8_CLRMASK (~(WORD)HW_GP_B8_SETMASK)
                             4655 ; 104  |#define HW_GP_B9_CLRMASK (~(WORD)HW_GP_B9_SETMASK)
                             4656 ; 105  |#define HW_GP_B10_CLRMASK (~(WORD)HW_GP_B10_SETMASK)
                             4657 ; 106  |#define HW_GP_B11_CLRMASK (~(WORD)HW_GP_B11_SETMASK)
                             4658 ; 107  |#define HW_GP_B12_CLRMASK (~(WORD)HW_GP_B12_SETMASK)
                             4659 ; 108  |#define HW_GP_B13_CLRMASK (~(WORD)HW_GP_B13_SETMASK)
                             4660 ; 109  |#define HW_GP_B14_CLRMASK (~(WORD)HW_GP_B14_SETMASK)
                             4661 ; 110  |#define HW_GP_B15_CLRMASK (~(WORD)HW_GP_B15_SETMASK)
                             4662 ; 111  |#define HW_GP_B16_CLRMASK (~(WORD)HW_GP_B16_SETMASK)
                             4663 ; 112  |#define HW_GP_B17_CLRMASK (~(WORD)HW_GP_B17_SETMASK)
                             4664 ; 113  |#define HW_GP_B18_CLRMASK (~(WORD)HW_GP_B18_SETMASK)
                             4665 ; 114  |#define HW_GP_B19_CLRMASK (~(WORD)HW_GP_B19_SETMASK)
                             4666 ; 115  |#define HW_GP_B20_CLRMASK (~(WORD)HW_GP_B20_SETMASK)
                             4667 ; 116  |#define HW_GP_B21_CLRMASK (~(WORD)HW_GP_B21_SETMASK)
                             4668 ; 117  |#define HW_GP_B22_CLRMASK (~(WORD)HW_GP_B22_SETMASK)
                             4669 ; 118  |#define HW_GP_B23_CLRMASK (~(WORD)HW_GP_B23_SETMASK)
                             4670 ; 119  |
                             4671 ; 120  |/////////////////////////////////////////////////////////////////////////////////
                             4672 ; 121  |//  GPIO 8mA Register Bit Positions
                             4673 ; 122  |#define HW_GP8MA_B7_B0_BITPOS 0
                             4674 ; 123  |#define HW_GP8MA_B15_B8_BITPOS 1
                             4675 ; 124  |#define HW_GP8MA_B23_B16_BITPOS 2
                             4676 ; 125  |#define HW_GP8MA_CLK_GATE_BITPOS 23
                             4677 ; 126  |
                             4678 ; 127  |
                             4679 ; 128  |/////////////////////////////////////////////////////////////////////////////////
                             4680 ; 129  |//  Logical GPIO numbers
                             4681 ; 130  |#define HW_GPIO_000 0
                             4682 ; 131  |#define HW_GPIO_001 1
                             4683 ; 132  |#define HW_GPIO_002 2
                             4684 ; 133  |#define HW_GPIO_003 3
                             4685 ; 134  |#define HW_GPIO_004 4
                             4686 ; 135  |#define HW_GPIO_005 5
                             4687 ; 136  |#define HW_GPIO_006 6
                             4688 ; 137  |#define HW_GPIO_007 7
                             4689 ; 138  |#define HW_GPIO_008 8
                             4690 ; 139  |#define HW_GPIO_009 9
                             4691 ; 140  |#define HW_GPIO_010 10
                             4692 ; 141  |#define HW_GPIO_011 11
                             4693 ; 142  |#define HW_GPIO_012 12
                             4694 ; 143  |#define HW_GPIO_013 13
                             4695 ; 144  |#define HW_GPIO_014 14
                             4696 ; 145  |#define HW_GPIO_015 15
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  79

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4697 ; 146  |#define HW_GPIO_016 16
                             4698 ; 147  |#define HW_GPIO_017 17
                             4699 ; 148  |#define HW_GPIO_018 18
                             4700 ; 149  |#define HW_GPIO_019 19
                             4701 ; 150  |#define HW_GPIO_020 20
                             4702 ; 151  |#define HW_GPIO_021 21
                             4703 ; 152  |#define HW_GPIO_022 22
                             4704 ; 153  |#define HW_GPIO_023 23
                             4705 ; 154  |#define HW_GPIO_024 24
                             4706 ; 155  |#define HW_GPIO_025 25
                             4707 ; 156  |#define HW_GPIO_026 26
                             4708 ; 157  |#define HW_GPIO_027 27
                             4709 ; 158  |#define HW_GPIO_028 28
                             4710 ; 159  |#define HW_GPIO_029 29
                             4711 ; 160  |#define HW_GPIO_030 30
                             4712 ; 161  |#define HW_GPIO_031 31
                             4713 ; 162  |#define HW_GPIO_032 32
                             4714 ; 163  |#define HW_GPIO_033 33
                             4715 ; 164  |#define HW_GPIO_034 34
                             4716 ; 165  |#define HW_GPIO_035 35
                             4717 ; 166  |#define HW_GPIO_036 36
                             4718 ; 167  |#define HW_GPIO_037 37
                             4719 ; 168  |#define HW_GPIO_038 38
                             4720 ; 169  |#define HW_GPIO_039 39
                             4721 ; 170  |#define HW_GPIO_040 40
                             4722 ; 171  |#define HW_GPIO_041 41
                             4723 ; 172  |#define HW_GPIO_042 42
                             4724 ; 173  |#define HW_GPIO_043 43
                             4725 ; 174  |#define HW_GPIO_044 44
                             4726 ; 175  |#define HW_GPIO_045 45
                             4727 ; 176  |#define HW_GPIO_046 46
                             4728 ; 177  |#define HW_GPIO_047 47
                             4729 ; 178  |#define HW_GPIO_048 48
                             4730 ; 179  |#define HW_GPIO_049 49
                             4731 ; 180  |#define HW_GPIO_050 50
                             4732 ; 181  |#define HW_GPIO_051 51
                             4733 ; 182  |#define HW_GPIO_052 52
                             4734 ; 183  |#define HW_GPIO_053 53
                             4735 ; 184  |#define HW_GPIO_054 54
                             4736 ; 185  |#define HW_GPIO_055 55
                             4737 ; 186  |#define HW_GPIO_056 56
                             4738 ; 187  |#define HW_GPIO_057 57
                             4739 ; 188  |#define HW_GPIO_058 58
                             4740 ; 189  |#define HW_GPIO_059 59
                             4741 ; 190  |#define HW_GPIO_060 60
                             4742 ; 191  |#define HW_GPIO_061 61
                             4743 ; 192  |#define HW_GPIO_062 62
                             4744 ; 193  |#define HW_GPIO_063 63
                             4745 ; 194  |#define HW_GPIO_064 64
                             4746 ; 195  |#define HW_GPIO_065 65
                             4747 ; 196  |#define HW_GPIO_066 66
                             4748 ; 197  |#define HW_GPIO_067 67
                             4749 ; 198  |#define HW_GPIO_068 68
                             4750 ; 199  |#define HW_GPIO_069 69
                             4751 ; 200  |#define HW_GPIO_070 70
                             4752 ; 201  |#define HW_GPIO_071 71
                             4753 ; 202  |#define HW_GPIO_072 72
                             4754 ; 203  |#define HW_GPIO_073 73
                             4755 ; 204  |#define HW_GPIO_074 74
                             4756 ; 205  |#define HW_GPIO_075 75
                             4757 ; 206  |#define HW_GPIO_076 76
                             4758 ; 207  |#define HW_GPIO_077 77
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  80

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4759 ; 208  |#define HW_GPIO_078 78
                             4760 ; 209  |#define HW_GPIO_079 79
                             4761 ; 210  |#define HW_GPIO_080 80
                             4762 ; 211  |#define HW_GPIO_081 81
                             4763 ; 212  |#define HW_GPIO_082 82
                             4764 ; 213  |#define HW_GPIO_083 83
                             4765 ; 214  |#define HW_GPIO_084 84
                             4766 ; 215  |#define HW_GPIO_085 85
                             4767 ; 216  |#define HW_GPIO_086 86
                             4768 ; 217  |#define HW_GPIO_087 87
                             4769 ; 218  |#define HW_GPIO_088 88
                             4770 ; 219  |#define HW_GPIO_089 89
                             4771 ; 220  |#define HW_GPIO_090 90
                             4772 ; 221  |#define HW_GPIO_091 91
                             4773 ; 222  |#define HW_GPIO_092 92
                             4774 ; 223  |#define HW_GPIO_093 93
                             4775 ; 224  |#define HW_GPIO_094 94
                             4776 ; 225  |#define HW_GPIO_095 95
                             4777 ; 226  |#define HW_GPIO_LAST HW_GPIO_095
                             4778 ; 227  |
                             4779 ; 228  |#define HW_GP0ENR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPENR))  /* GPIO
                                   0 Enable Register   */
                             4780 ; 229  |#define HW_GP0DOR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  0 Data Out Register */
                             4781 ; 230  |#define HW_GP0DIR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  0 Dait In Register  */
                             4782 ; 231  |#define HW_GP0DOER     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   0 Dait Out Enable Register  */
                             4783 ; 232  |#define HW_GP0IPENR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 0 Interrupt Pin Enable Register */
                             4784 ; 233  |#define HW_GP0IENR     (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   0 Interrupt Enable Register */
                             4785 ; 234  |#define HW_GP0ILVLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 0 Interrupt Level Register  */
                             4786 ; 235  |#define HW_GP0IPOLR    (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 0 Interrupt Polarity Register   */
                             4787 ; 236  |#define HW_GP0ISTATR   (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 0 Interrupt Status Register */
                             4788 ; 237  |#define HW_GP0PWR      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4789 ; 238  |#define HW_GP08MA      (*(volatile gpr_type _X*) (HW_GPB0_BASEADDR+HW_GPB_GP8MA)) 
                             4790 ; 239  |#define HW_GP1ENR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 1 Enable Register   */
                             4791 ; 240  |#define HW_GP1DOR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  1 Data Out Register */
                             4792 ; 241  |#define HW_GP1DIR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  1 Dait In Register  */
                             4793 ; 242  |#define HW_GP1DOER     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   1 Dait Out Enable Register  */
                             4794 ; 243  |#define HW_GP1IPENR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 1 Interrupt Pin Enable Register */
                             4795 ; 244  |#define HW_GP1IENR     (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   1 Interrupt Enable Register */
                             4796 ; 245  |#define HW_GP1ILVLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 1 Interrupt Level Register  */
                             4797 ; 246  |#define HW_GP1IPOLR    (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 1 Interrupt Polarity Register   */
                             4798 ; 247  |#define HW_GP1ISTATR   (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 1 Interrupt Status Register */
                             4799 ; 248  |#define HW_GP1PWR      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4800 ; 249  |#define HW_GP18MA      (*(volatile gpr_type _X*) (HW_GPB1_BASEADDR+HW_GPB_GP8MA)) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  81

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4801 ; 250  |#define HW_GP2ENR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4802 ; 251  |#define HW_GP2DOR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4803 ; 252  |#define HW_GP2DIR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4804 ; 253  |#define HW_GP2DOER     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4805 ; 254  |#define HW_GP2IPENR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4806 ; 255  |#define HW_GP2IENR     (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4807 ; 256  |#define HW_GP2ILVLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4808 ; 257  |#define HW_GP2IPOLR    (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4809 ; 258  |#define HW_GP2ISTATR   (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4810 ; 259  |#define HW_GP2PWR      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4811 ; 260  |#define HW_GP28MA      (*(volatile gpr_type _X*) (HW_GPB2_BASEADDR+HW_GPB_GP8MA)) 
                             4812 ; 261  |#define HW_GP3ENR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPENR))     /* G
                                  PIO 2 Enable Register   */
                             4813 ; 262  |#define HW_GP3DOR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOR)) /* GPIO 
                                  2 Data Out Register */
                             4814 ; 263  |#define HW_GP3DIR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDIR)) /* GPIO 
                                  2 Dait In Register  */
                             4815 ; 264  |#define HW_GP3DOER     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPDOER)) /* GPIO
                                   2 Dait Out Enable Register  */
                             4816 ; 265  |#define HW_GP3IPENR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPENR)) /* GPI
                                  O 2 Interrupt Pin Enable Register */
                             4817 ; 266  |#define HW_GP3IENR     (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIENR)) /* GPIO
                                   2 Interrupt Enable Register */
                             4818 ; 267  |#define HW_GP3ILVLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPILVLR)) /* GPI
                                  O 2 Interrupt Level Register  */
                             4819 ; 268  |#define HW_GP3IPOLR    (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPIPOLR)) /* GPI
                                  O 2 Interrupt Polarity Register   */
                             4820 ; 269  |#define HW_GP3ISTATR   (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPISTATR)) /* GP
                                  IO 2 Interrupt Status Register */
                             4821 ; 270  |#define HW_GP3PWR      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GPPWR)) /* GPIO 
                                  0 Power Register */
                             4822 ; 271  |#define HW_GP38MA      (*(volatile gpr_type _X*) (HW_GPB3_BASEADDR+HW_GPB_GP8MA)) 
                             4823 ; 272  |
                             4824 ; 273  |#endif
                             4825 ; 274  |
                             4826 
                             4828 
                             4829 ; 23   |#include "regsi2c.h"
                             4830 
                             4832 
                             4833 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             4834 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             4835 ; 3    |// Filename: regsI2C.inc
                             4836 ; 4    |// Description: Register definitions for GPFLASH interface
                             4837 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             4838 ; 6    |// The following naming conventions are followed in this file.
                             4839 ; 7    |// All registers are named using the format...
                             4840 ; 8    |//     HW_<module>_<regname>
                             4841 ; 9    |// where <module> is the module name which can be any of the following...
                             4842 ; 10   |//     USB20
                             4843 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             4844 ; 12   |// module name includes a number starting from 0 for the first instance of
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  82

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4845 ; 13   |// that module)
                             4846 ; 14   |// <regname> is the specific register within that module
                             4847 ; 15   |// We also define the following...
                             4848 ; 16   |//     HW_<module>_<regname>_BITPOS
                             4849 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             4850 ; 18   |//     HW_<module>_<regname>_SETMASK
                             4851 ; 19   |// which does something else, and
                             4852 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             4853 ; 21   |// which does something else.
                             4854 ; 22   |// Other rules
                             4855 ; 23   |//     All caps
                             4856 ; 24   |//     Numeric identifiers start at 0
                             4857 ; 25   |#if !(defined(regsi2cinc))
                             4858 ; 26   |#define regsi2cinc 1
                             4859 ; 27   |
                             4860 ; 28   |#include "types.h"
                             4861 
                             4863 
                             4864 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             4865 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             4866 ; 3    |//
                             4867 ; 4    |// Filename: types.h
                             4868 ; 5    |// Description: Standard data types
                             4869 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             4870 ; 7    |
                             4871 ; 8    |#ifndef _TYPES_H
                             4872 ; 9    |#define _TYPES_H
                             4873 ; 10   |
                             4874 ; 11   |// TODO:  move this outta here!
                             4875 ; 12   |#if !defined(NOERROR)
                             4876 ; 13   |#define NOERROR 0
                             4877 ; 14   |#define SUCCESS 0
                             4878 ; 15   |#endif 
                             4879 ; 16   |#if !defined(SUCCESS)
                             4880 ; 17   |#define SUCCESS  0
                             4881 ; 18   |#endif
                             4882 ; 19   |#if !defined(ERROR)
                             4883 ; 20   |#define ERROR   -1
                             4884 ; 21   |#endif
                             4885 ; 22   |#if !defined(FALSE)
                             4886 ; 23   |#define FALSE 0
                             4887 ; 24   |#endif
                             4888 ; 25   |#if !defined(TRUE)
                             4889 ; 26   |#define TRUE  1
                             4890 ; 27   |#endif
                             4891 ; 28   |
                             4892 ; 29   |#if !defined(NULL)
                             4893 ; 30   |#define NULL 0
                             4894 ; 31   |#endif
                             4895 ; 32   |
                             4896 ; 33   |#define MAX_INT     0x7FFFFF
                             4897 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             4898 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             4899 ; 36   |#define MAX_ULONG   (-1) 
                             4900 ; 37   |
                             4901 ; 38   |#define WORD_SIZE   24              // word size in bits
                             4902 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             4903 ; 40   |
                             4904 ; 41   |
                             4905 ; 42   |#define BYTE    unsigned char       // btVarName
                             4906 ; 43   |#define CHAR    signed char         // cVarName
                             4907 ; 44   |#define USHORT  unsigned short      // usVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  83

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4908 ; 45   |#define SHORT   unsigned short      // sVarName
                             4909 ; 46   |#define WORD    unsigned int        // wVarName
                             4910 ; 47   |#define INT     signed int          // iVarName
                             4911 ; 48   |#define DWORD   unsigned long       // dwVarName
                             4912 ; 49   |#define LONG    signed long         // lVarName
                             4913 ; 50   |#define BOOL    unsigned int        // bVarName
                             4914 ; 51   |#define FRACT   _fract              // frVarName
                             4915 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             4916 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             4917 ; 54   |#define FLOAT   float               // fVarName
                             4918 ; 55   |#define DBL     double              // dVarName
                             4919 ; 56   |#define ENUM    enum                // eVarName
                             4920 ; 57   |#define CMX     _complex            // cmxVarName
                             4921 ; 58   |typedef WORD UCS3;                   // 
                             4922 ; 59   |
                             4923 ; 60   |#define UINT16  unsigned short
                             4924 ; 61   |#define UINT8   unsigned char   
                             4925 ; 62   |#define UINT32  unsigned long
                             4926 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4927 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             4928 ; 65   |#define WCHAR   UINT16
                             4929 ; 66   |
                             4930 ; 67   |//UINT128 is 16 bytes or 6 words
                             4931 ; 68   |typedef struct UINT128_3500 {   
                             4932 ; 69   |    int val[6];     
                             4933 ; 70   |} UINT128_3500;
                             4934 ; 71   |
                             4935 ; 72   |#define UINT128   UINT128_3500
                             4936 ; 73   |
                             4937 ; 74   |// Little endian word packed byte strings:   
                             4938 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4939 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4940 ; 77   |// Little endian word packed byte strings:   
                             4941 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             4942 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             4943 ; 80   |
                             4944 ; 81   |// Declare Memory Spaces To Use When Coding
                             4945 ; 82   |// A. Sector Buffers
                             4946 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             4947 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             4948 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             4949 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             4950 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             4951 ; 88   |// B. Media DDI Memory
                             4952 ; 89   |#define MEDIA_DDI_MEM _Y
                             4953 ; 90   |
                             4954 ; 91   |
                             4955 ; 92   |
                             4956 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             4957 ; 94   |// Examples of circular pointers:
                             4958 ; 95   |//    INT CIRC cpiVarName
                             4959 ; 96   |//    DWORD CIRC cpdwVarName
                             4960 ; 97   |
                             4961 ; 98   |#define RETCODE INT                 // rcVarName
                             4962 ; 99   |
                             4963 ; 100  |// generic bitfield structure
                             4964 ; 101  |struct Bitfield {
                             4965 ; 102  |    unsigned int B0  :1;
                             4966 ; 103  |    unsigned int B1  :1;
                             4967 ; 104  |    unsigned int B2  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  84

M:ADDR CODE           CYCLES LINE SOURCELINE
                             4968 ; 105  |    unsigned int B3  :1;
                             4969 ; 106  |    unsigned int B4  :1;
                             4970 ; 107  |    unsigned int B5  :1;
                             4971 ; 108  |    unsigned int B6  :1;
                             4972 ; 109  |    unsigned int B7  :1;
                             4973 ; 110  |    unsigned int B8  :1;
                             4974 ; 111  |    unsigned int B9  :1;
                             4975 ; 112  |    unsigned int B10 :1;
                             4976 ; 113  |    unsigned int B11 :1;
                             4977 ; 114  |    unsigned int B12 :1;
                             4978 ; 115  |    unsigned int B13 :1;
                             4979 ; 116  |    unsigned int B14 :1;
                             4980 ; 117  |    unsigned int B15 :1;
                             4981 ; 118  |    unsigned int B16 :1;
                             4982 ; 119  |    unsigned int B17 :1;
                             4983 ; 120  |    unsigned int B18 :1;
                             4984 ; 121  |    unsigned int B19 :1;
                             4985 ; 122  |    unsigned int B20 :1;
                             4986 ; 123  |    unsigned int B21 :1;
                             4987 ; 124  |    unsigned int B22 :1;
                             4988 ; 125  |    unsigned int B23 :1;
                             4989 ; 126  |};
                             4990 ; 127  |
                             4991 ; 128  |union BitInt {
                             4992 ; 129  |        struct Bitfield B;
                             4993 ; 130  |        int        I;
                             4994 ; 131  |};
                             4995 ; 132  |
                             4996 ; 133  |#define MAX_MSG_LENGTH 10
                             4997 ; 134  |struct CMessage
                             4998 ; 135  |{
                             4999 ; 136  |        unsigned int m_uLength;
                             5000 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5001 ; 138  |};
                             5002 ; 139  |
                             5003 ; 140  |typedef struct {
                             5004 ; 141  |    WORD m_wLength;
                             5005 ; 142  |    WORD m_wMessage;
                             5006 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5007 ; 144  |} Message;
                             5008 ; 145  |
                             5009 ; 146  |struct MessageQueueDescriptor
                             5010 ; 147  |{
                             5011 ; 148  |        int *m_pBase;
                             5012 ; 149  |        int m_iModulo;
                             5013 ; 150  |        int m_iSize;
                             5014 ; 151  |        int *m_pHead;
                             5015 ; 152  |        int *m_pTail;
                             5016 ; 153  |};
                             5017 ; 154  |
                             5018 ; 155  |struct ModuleEntry
                             5019 ; 156  |{
                             5020 ; 157  |    int m_iSignaledEventMask;
                             5021 ; 158  |    int m_iWaitEventMask;
                             5022 ; 159  |    int m_iResourceOfCode;
                             5023 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5024 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5025 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5026 ; 163  |    int m_uTimeOutHigh;
                             5027 ; 164  |    int m_uTimeOutLow;
                             5028 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  85

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5029 ; 166  |};
                             5030 ; 167  |
                             5031 ; 168  |union WaitMask{
                             5032 ; 169  |    struct B{
                             5033 ; 170  |        unsigned int m_bNone     :1;
                             5034 ; 171  |        unsigned int m_bMessage  :1;
                             5035 ; 172  |        unsigned int m_bTimer    :1;
                             5036 ; 173  |        unsigned int m_bButton   :1;
                             5037 ; 174  |    } B;
                             5038 ; 175  |    int I;
                             5039 ; 176  |} ;
                             5040 ; 177  |
                             5041 ; 178  |
                             5042 ; 179  |struct Button {
                             5043 ; 180  |        WORD wButtonEvent;
                             5044 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5045 ; 182  |};
                             5046 ; 183  |
                             5047 ; 184  |struct Message {
                             5048 ; 185  |        WORD wMsgLength;
                             5049 ; 186  |        WORD wMsgCommand;
                             5050 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5051 ; 188  |};
                             5052 ; 189  |
                             5053 ; 190  |union EventTypes {
                             5054 ; 191  |        struct CMessage msg;
                             5055 ; 192  |        struct Button Button ;
                             5056 ; 193  |        struct Message Message;
                             5057 ; 194  |};
                             5058 ; 195  |
                             5059 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5060 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5061 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5062 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5063 ; 200  |
                             5064 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5065 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5066 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5067 ; 204  |
                             5068 ; 205  |#if DEBUG
                             5069 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5070 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5071 ; 208  |#else 
                             5072 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5073 ; 210  |#define DebugBuildAssert(x)    
                             5074 ; 211  |#endif
                             5075 ; 212  |
                             5076 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5077 ; 214  |//  #pragma asm
                             5078 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5079 ; 216  |//  #pragma endasm
                             5080 ; 217  |
                             5081 ; 218  |
                             5082 ; 219  |#ifdef COLOR_262K
                             5083 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5084 ; 221  |#elif defined(COLOR_65K)
                             5085 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5086 ; 223  |#else
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  86

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5087 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5088 ; 225  |#endif
                             5089 ; 226  |    
                             5090 ; 227  |#endif // #ifndef _TYPES_H
                             5091 
                             5093 
                             5094 ; 29   |
                             5095 ; 30   |/////////////////////////////////////////////////////////////////////////////////
                             5096 ; 31   |////   I2C STMP Registers
                             5097 ; 32   |/////////////////////////////////////////////////////////////////////////////////
                             5098 ; 33   |
                             5099 ; 34   |#define HW_I2C_BASEADDR (0xFFE5)
                             5100 ; 35   |
                             5101 ; 36   |
                             5102 ; 37   |/////////////////////////////////////////////////////////////////////////////////
                             5103 ; 38   |////  I2C Clock Divider Register (HW_I2CDIV) Bit Definitions
                             5104 ; 39   |
                             5105 ; 40   |#define HW_I2CDIV_FACT_BITPOS (1)
                             5106 ; 41   |
                             5107 ; 42   |#define HW_I2CDIV_FACT_SETMASK (0xFF<<HW_I2CDIV_FACT_BITPOS)
                             5108 ; 43   |
                             5109 ; 44   |#define HW_I2CDIV_FACT_CLRMASK (~(WORD)HW_I2CDIV_FACT_SETMASK)
                             5110 ; 45   |
                             5111 ; 46   |typedef union               /* I2C Clock Divider Register */
                             5112 ; 47   |{
                             5113 ; 48   |    struct {
                             5114 ; 49   |        int                :1; 
                             5115 ; 50   |        unsigned FACT      :8;
                             5116 ; 51   |    } B;
                             5117 ; 52   |    int I;
                             5118 ; 53   |    unsigned U;
                             5119 ; 54   |} i2cdivr_type;
                             5120 ; 55   |#define HW_I2CDIV (*(volatile i2cdivr_type _X*) (HW_I2C_BASEADDR))       /* I2C Divfact Re
                                  gisters        */
                             5121 ; 56   |
                             5122 ; 57   |
                             5123 ; 58   |/////////////////////////////////////////////////////////////////////////////////
                             5124 ; 59   |////  I2C Data Register (HW_I2CDAT) Bit Definitions
                             5125 ; 60   |
                             5126 ; 61   |#define HW_I2CDAT_DATA_BITPOS (0)
                             5127 ; 62   |
                             5128 ; 63   |#define HW_I2CDAT_DATA_SETMASK (0xFFFFFF)
                             5129 ; 64   |
                             5130 ; 65   |#define HW_I2CDAT_DATA_CLRMASK (~(WORD)HW_I2CDAT_DATA_SETMASK)
                             5131 ; 66   |
                             5132 ; 67   |typedef union               /* I2C Data Register */
                             5133 ; 68   |{
                             5134 ; 69   |    struct {
                             5135 ; 70   |         unsigned DATA :24; 
                             5136 ; 71   |    } B;
                             5137 ; 72   |    int I;
                             5138 ; 73   |    unsigned U;
                             5139 ; 74   |} i2cdatr_type;
                             5140 ; 75   |#define HW_I2CDAT (*(volatile i2cdatr_type _X*) (HW_I2C_BASEADDR+1)) /* I2C Data Registers
                                   (I2CDAT)      */
                             5141 ; 76   |
                             5142 ; 77   |
                             5143 ; 78   |/////////////////////////////////////////////////////////////////////////////////
                             5144 ; 79   |////  I2C Control Status Register (HW_I2CCSR) Bit Definitions
                             5145 ; 80   |#define HW_I2CCSR_I2C_EN_BITPOS (0)
                             5146 ; 81   |#define HW_I2CCSR_RIE_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  87

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5147 ; 82   |#define HW_I2CCSR_BUSY_BITPOS (2)
                             5148 ; 83   |#define HW_I2CCSR_ARB_LOST_BITPOS (3)
                             5149 ; 84   |#define HW_I2CCSR_TIE_BITPOS (4)
                             5150 ; 85   |#define HW_I2CCSR_MODE_BITPOS (5)
                             5151 ; 86   |#define HW_I2CCSR_RDR_BITPOS (6)
                             5152 ; 87   |#define HW_I2CCSR_TDE_BITPOS (7)
                             5153 ; 88   |#define HW_I2CCSR_RWN_BITPOS (8)
                             5154 ; 89   |#define HW_I2CCSR_WL_BITPOS (9)
                             5155 ; 90   |#define HW_I2CCSR_WL0_BITPOS (9)
                             5156 ; 91   |#define HW_I2CCSR_WL1_BITPOS (10)
                             5157 ; 92   |#define HW_I2CCSR_TREQ_BITPOS (11)
                             5158 ; 93   |#define HW_I2CCSR_ROFL_BITPOS (12)
                             5159 ; 94   |#define HW_I2CCSR_TUFL_BITPOS (13)
                             5160 ; 95   |#define HW_I2CCSR_ACKF_BITPOS (14)
                             5161 ; 96   |#define HW_I2CCSR_B_CNT_BITPOS (15)
                             5162 ; 97   |#define HW_I2CCSR_B_CNT0_BITPOS (15)
                             5163 ; 98   |#define HW_I2CCSR_B_CNT1_BITPOS (16)
                             5164 ; 99   |#define HW_I2CCSR_L_WORD_BITPOS (17)
                             5165 ; 100  |#define HW_I2CCSR_SUBA_BITPOS (18)
                             5166 ; 101  |#define HW_I2CCSR_ROFLCL_BITPOS (19)
                             5167 ; 102  |#define HW_I2CCSR_TUFLCL_BITPOS (20)
                             5168 ; 103  |#define HW_I2CCSR_ONEBYTE_BITPOS (21)
                             5169 ; 104  |
                             5170 ; 105  |#define HW_I2CCSR_I2C_EN_SETMASK (1<<HW_I2CCSR_I2C_EN_BITPOS)
                             5171 ; 106  |#define HW_I2CCSR_RIE_SETMASK (1<<HW_I2CCSR_RIE_BITPOS)
                             5172 ; 107  |#define HW_I2CCSR_BUSY_SETMASK (1<<HW_I2CCSR_BUSY_BITPOS)
                             5173 ; 108  |#define HW_I2CCSR_ARB_LOST_SETMASK (1<<HW_I2CCSR_ARB_LOST_BITPOS)
                             5174 ; 109  |#define HW_I2CCSR_TIE_SETMASK (1<<HW_I2CCSR_TIE_BITPOS)
                             5175 ; 110  |#define HW_I2CCSR_MODE_SETMASK (1<<HW_I2CCSR_MODE_BITPOS)
                             5176 ; 111  |#define HW_I2CCSR_RDR_SETMASK (1<<HW_I2CCSR_RDR_BITPOS)
                             5177 ; 112  |#define HW_I2CCSR_TDE_SETMASK (1<<HW_I2CCSR_TDE_BITPOS)
                             5178 ; 113  |#define HW_I2CCSR_RWN_SETMASK (1<<HW_I2CCSR_RWN_BITPOS)
                             5179 ; 114  |#define HW_I2CCSR_WL_SETMASK (3<<HW_I2CCSR_WL_BITPOS)
                             5180 ; 115  |#define HW_I2CCSR_WL0_SETMASK (1<<HW_I2CCSR_WL0_BITPOS)
                             5181 ; 116  |#define HW_I2CCSR_WL1_SETMASK (1<<HW_I2CCSR_WL1_BITPOS)
                             5182 ; 117  |#define HW_I2CCSR_TREQ_SETMASK (1<<HW_I2CCSR_TREQ_BITPOS)
                             5183 ; 118  |#define HW_I2CCSR_ROFL_SETMASK (1<<HW_I2CCSR_ROFL_BITPOS)
                             5184 ; 119  |#define HW_I2CCSR_TUFL_SETMASK (1<<HW_I2CCSR_TUFL_BITPOS)
                             5185 ; 120  |#define HW_I2CCSR_ACKF_SETMASK (1<<HW_I2CCSR_ACKF_BITPOS)
                             5186 ; 121  |#define HW_I2CCSR_B_CNT_SETMASK (3<<HW_I2CCSR_B_CNT_BITPOS)
                             5187 ; 122  |#define HW_I2CCSR_B_CNT0_SETMASK (1<<HW_I2CCSR_B_CNT0_BITPOS)
                             5188 ; 123  |#define HW_I2CCSR_B_CNT1_SETMASK (1<<HW_I2CCSR_B_CNT1_BITPOS)
                             5189 ; 124  |#define HW_I2CCSR_L_WORD_SETMASK (1<<HW_I2CCSR_L_WORD_BITPOS)
                             5190 ; 125  |#define HW_I2CCSR_SUBA_SETMASK (1<<HW_I2CCSR_SUBA_BITPOS)
                             5191 ; 126  |#define HW_I2CCSR_ROFLCL_SETMASK (1<<HW_I2CCSR_ROFLCL_BITPOS)
                             5192 ; 127  |#define HW_I2CCSR_TUFLCL_SETMASK (1<<HW_I2CCSR_TUFLCL_BITPOS)
                             5193 ; 128  |#define HW_I2CCSR_ONEBYTE_SETMASK (1<<HW_I2CCSR_ONEBYTE_BITPOS)
                             5194 ; 129  |
                             5195 ; 130  |#define HW_I2CCSR_I2C_EN_CLRMASK (~(WORD)HW_I2CCSR_I2C_EN_SETMASK)
                             5196 ; 131  |#define HW_I2CCSR_RIE_CLRMASK (~(WORD)HW_I2CCSR_RIE_SETMASK)
                             5197 ; 132  |#define HW_I2CCSR_BUSY_CLRMASK (~(WORD)HW_I2CCSR_BUSY_SETMASK)
                             5198 ; 133  |#define HW_I2CCSR_ARB_LOST_CLRMASK (~(WORD)HW_I2CCSR_ARB_LOST_SETMASK)
                             5199 ; 134  |#define HW_I2CCSR_TIE_CLRMASK (~(WORD)HW_I2CCSR_TIE_SETMASK)
                             5200 ; 135  |#define HW_I2CCSR_MODE_CLRMASK (~(WORD)HW_I2CCSR_MODE_SETMASK)
                             5201 ; 136  |#define HW_I2CCSR_RDR_CLRMASK (~(WORD)HW_I2CCSR_RDR_SETMASK)
                             5202 ; 137  |#define HW_I2CCSR_TDE_CLRMASK (~(WORD)HW_I2CCSR_TDE_SETMASK)
                             5203 ; 138  |#define HW_I2CCSR_RWN_CLRMASK (~(WORD)HW_I2CCSR_RWN_SETMASK)
                             5204 ; 139  |#define HW_I2CCSR_WL_CLRMASK (~(WORD)HW_I2CCSR_WL_SETMASK)
                             5205 ; 140  |#define HW_I2CCSR_WL0_CLRMASK (~(WORD)HW_I2CCSR_WL0_SETMASK)
                             5206 ; 141  |#define HW_I2CCSR_WL1_CLRMASK (~(WORD)HW_I2CCSR_WL1_SETMASK)
                             5207 ; 142  |#define HW_I2CCSR_TREQ_CLRMASK (~(WORD)HW_I2CCSR_TREQ_SETMASK)
                             5208 ; 143  |#define HW_I2CCSR_ROFL_CLRMASK (~(WORD)HW_I2CCSR_ROFL_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  88

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5209 ; 144  |#define HW_I2CCSR_TUFL_CLRMASK (~(WORD)HW_I2CCSR_TUFL_SETMASK)
                             5210 ; 145  |#define HW_I2CCSR_ACKF_CLRMASK (~(WORD)HW_I2CCSR_ACKF_SETMASK)
                             5211 ; 146  |#define HW_I2CCSR_B_CNT_CLRMASK (~(WORD)HW_I2CCSR_B_CNT_SETMASK)
                             5212 ; 147  |#define HW_I2CCSR_B_CNT0_CLRMASK (~(WORD)HW_I2CCSR_B_CNT0_SETMASK)
                             5213 ; 148  |#define HW_I2CCSR_B_CNT1_CLRMASK (~(WORD)HW_I2CCSR_B_CNT1_SETMASK)
                             5214 ; 149  |#define HW_I2CCSR_L_WORD_CLRMASK (~(WORD)HW_I2CCSR_L_WORD_SETMASK)
                             5215 ; 150  |#define HW_I2CCSR_SUBA_CLRMASK (~(WORD)HW_I2CCSR_SUBA_SETMASK)
                             5216 ; 151  |#define HW_I2CCSR_ROFLCL_CLRMASK (~(WORD)HW_I2CCSR_ROFLCL_SETMASK)
                             5217 ; 152  |#define HW_I2CCSR_TUFLCL_CLRMASK (~(WORD)HW_I2CCSR_TUFLCL_SETMASK)
                             5218 ; 153  |#define HW_I2CCSR_ONEBYTE_CLRMASK (~(WORD)HW_I2CCSR_ONEBYTE_SETMASK)
                             5219 ; 154  |
                             5220 ; 155  |typedef union               /* I2C Control Register         */
                             5221 ; 156  |{
                             5222 ; 157  |    struct {
                             5223 ; 158  |        int I2C_EN      :1; /* Peripheral Enable            */
                             5224 ; 159  |        int RIE         :1; /* Receiver Interrupt Enable        */
                             5225 ; 160  |        int BUSY        :1; /* I2C Bus Busy             */
                             5226 ; 161  |        int ARBLOST     :1; /* Aritration lost          */
                             5227 ; 162  |        int TIE         :1; /* Transmitter Interrupt Enable     */
                             5228 ; 163  |        int MODE        :1; /* Operating Mode Bit           */
                             5229 ; 164  |        int RDR         :1; /* Receiver Data Ready          */
                             5230 ; 165  |       int TDE         :1; /* Transmitter Data Empty       */
                             5231 ; 166  |       int RWN         :1; /* Read/Not Write           */
                             5232 ; 167  |       unsigned WL     :2; /* Word Length              */
                             5233 ; 168  |        int TREQ        :1; /* DSP Transmit Request         */
                             5234 ; 169  |        int ROFL        :1; /* Receiver Overflow            */
                             5235 ; 170  |        int TUFL        :1; /* Transmitter Underflow        */
                             5236 ; 171  |        int ACKF        :1; /* Acknowledge Failure          */
                             5237 ; 172  |        unsigned BCNT   :2; /* Byte Count               */
                             5238 ; 173  |        int LWORD       :1; /* Last Word                */
                             5239 ; 174  |        int SUBA        :1; /* Sub Address              */
                             5240 ; 175  |        int ROFLCL      :1; /* Receiver Overflow Clear      */
                             5241 ; 176  |        int TUFLCL      :1; /* Transmitter Underflow Clear      */
                             5242 ; 177  |        int ONEBYTE     :1; /* Special One Data Byte Transmission Mode */
                             5243 ; 178  |    } B;
                             5244 ; 179  |    int I;
                             5245 ; 180  |    unsigned U;
                             5246 ; 181  |} i2ccsr_type;
                             5247 ; 182  |#define HW_I2CCSR (*(volatile i2ccsr_type _X*) (HW_I2C_BASEADDR+2)) /* I2C Control/Status 
                                  Register (I2CCSR) */
                             5248 ; 183  |
                             5249 ; 184  |#endif
                             5250 
                             5252 
                             5253 ; 24   |#include "regsi2s.h"
                             5254 
                             5256 
                             5257 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             5258 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                             5259 ; 3    |// Filename: regsi2s.inc
                             5260 ; 4    |// Description: Register definitions for I2S interface
                             5261 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             5262 ; 6    |// The following naming conventions are followed in this file.
                             5263 ; 7    |// All registers are named using the format...
                             5264 ; 8    |//     HW_<module>_<regname>
                             5265 ; 9    |// where <module> is the module name which can be any of the following...
                             5266 ; 10   |//     USB20
                             5267 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             5268 ; 12   |// module name includes a number starting from 0 for the first instance of
                             5269 ; 13   |// that module)
                             5270 ; 14   |// <regname> is the specific register within that module
                             5271 ; 15   |// We also define the following...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  89

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5272 ; 16   |//     HW_<module>_<regname>_BITPOS
                             5273 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             5274 ; 18   |//     HW_<module>_<regname>_SETMASK
                             5275 ; 19   |// which does something else, and
                             5276 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             5277 ; 21   |// which does something else.
                             5278 ; 22   |// Other rules
                             5279 ; 23   |//     All caps
                             5280 ; 24   |//     Numeric identifiers start at 0
                             5281 ; 25   |#if !(defined(regsi2sinc))
                             5282 ; 26   |#define regsi2sinc 1
                             5283 ; 27   |
                             5284 ; 28   |#include "types.h"
                             5285 
                             5287 
                             5288 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             5289 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             5290 ; 3    |//
                             5291 ; 4    |// Filename: types.h
                             5292 ; 5    |// Description: Standard data types
                             5293 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             5294 ; 7    |
                             5295 ; 8    |#ifndef _TYPES_H
                             5296 ; 9    |#define _TYPES_H
                             5297 ; 10   |
                             5298 ; 11   |// TODO:  move this outta here!
                             5299 ; 12   |#if !defined(NOERROR)
                             5300 ; 13   |#define NOERROR 0
                             5301 ; 14   |#define SUCCESS 0
                             5302 ; 15   |#endif 
                             5303 ; 16   |#if !defined(SUCCESS)
                             5304 ; 17   |#define SUCCESS  0
                             5305 ; 18   |#endif
                             5306 ; 19   |#if !defined(ERROR)
                             5307 ; 20   |#define ERROR   -1
                             5308 ; 21   |#endif
                             5309 ; 22   |#if !defined(FALSE)
                             5310 ; 23   |#define FALSE 0
                             5311 ; 24   |#endif
                             5312 ; 25   |#if !defined(TRUE)
                             5313 ; 26   |#define TRUE  1
                             5314 ; 27   |#endif
                             5315 ; 28   |
                             5316 ; 29   |#if !defined(NULL)
                             5317 ; 30   |#define NULL 0
                             5318 ; 31   |#endif
                             5319 ; 32   |
                             5320 ; 33   |#define MAX_INT     0x7FFFFF
                             5321 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             5322 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             5323 ; 36   |#define MAX_ULONG   (-1) 
                             5324 ; 37   |
                             5325 ; 38   |#define WORD_SIZE   24              // word size in bits
                             5326 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             5327 ; 40   |
                             5328 ; 41   |
                             5329 ; 42   |#define BYTE    unsigned char       // btVarName
                             5330 ; 43   |#define CHAR    signed char         // cVarName
                             5331 ; 44   |#define USHORT  unsigned short      // usVarName
                             5332 ; 45   |#define SHORT   unsigned short      // sVarName
                             5333 ; 46   |#define WORD    unsigned int        // wVarName
                             5334 ; 47   |#define INT     signed int          // iVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  90

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5335 ; 48   |#define DWORD   unsigned long       // dwVarName
                             5336 ; 49   |#define LONG    signed long         // lVarName
                             5337 ; 50   |#define BOOL    unsigned int        // bVarName
                             5338 ; 51   |#define FRACT   _fract              // frVarName
                             5339 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             5340 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             5341 ; 54   |#define FLOAT   float               // fVarName
                             5342 ; 55   |#define DBL     double              // dVarName
                             5343 ; 56   |#define ENUM    enum                // eVarName
                             5344 ; 57   |#define CMX     _complex            // cmxVarName
                             5345 ; 58   |typedef WORD UCS3;                   // 
                             5346 ; 59   |
                             5347 ; 60   |#define UINT16  unsigned short
                             5348 ; 61   |#define UINT8   unsigned char   
                             5349 ; 62   |#define UINT32  unsigned long
                             5350 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5351 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             5352 ; 65   |#define WCHAR   UINT16
                             5353 ; 66   |
                             5354 ; 67   |//UINT128 is 16 bytes or 6 words
                             5355 ; 68   |typedef struct UINT128_3500 {   
                             5356 ; 69   |    int val[6];     
                             5357 ; 70   |} UINT128_3500;
                             5358 ; 71   |
                             5359 ; 72   |#define UINT128   UINT128_3500
                             5360 ; 73   |
                             5361 ; 74   |// Little endian word packed byte strings:   
                             5362 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5363 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5364 ; 77   |// Little endian word packed byte strings:   
                             5365 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             5366 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             5367 ; 80   |
                             5368 ; 81   |// Declare Memory Spaces To Use When Coding
                             5369 ; 82   |// A. Sector Buffers
                             5370 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             5371 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             5372 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             5373 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             5374 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             5375 ; 88   |// B. Media DDI Memory
                             5376 ; 89   |#define MEDIA_DDI_MEM _Y
                             5377 ; 90   |
                             5378 ; 91   |
                             5379 ; 92   |
                             5380 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             5381 ; 94   |// Examples of circular pointers:
                             5382 ; 95   |//    INT CIRC cpiVarName
                             5383 ; 96   |//    DWORD CIRC cpdwVarName
                             5384 ; 97   |
                             5385 ; 98   |#define RETCODE INT                 // rcVarName
                             5386 ; 99   |
                             5387 ; 100  |// generic bitfield structure
                             5388 ; 101  |struct Bitfield {
                             5389 ; 102  |    unsigned int B0  :1;
                             5390 ; 103  |    unsigned int B1  :1;
                             5391 ; 104  |    unsigned int B2  :1;
                             5392 ; 105  |    unsigned int B3  :1;
                             5393 ; 106  |    unsigned int B4  :1;
                             5394 ; 107  |    unsigned int B5  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  91

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5395 ; 108  |    unsigned int B6  :1;
                             5396 ; 109  |    unsigned int B7  :1;
                             5397 ; 110  |    unsigned int B8  :1;
                             5398 ; 111  |    unsigned int B9  :1;
                             5399 ; 112  |    unsigned int B10 :1;
                             5400 ; 113  |    unsigned int B11 :1;
                             5401 ; 114  |    unsigned int B12 :1;
                             5402 ; 115  |    unsigned int B13 :1;
                             5403 ; 116  |    unsigned int B14 :1;
                             5404 ; 117  |    unsigned int B15 :1;
                             5405 ; 118  |    unsigned int B16 :1;
                             5406 ; 119  |    unsigned int B17 :1;
                             5407 ; 120  |    unsigned int B18 :1;
                             5408 ; 121  |    unsigned int B19 :1;
                             5409 ; 122  |    unsigned int B20 :1;
                             5410 ; 123  |    unsigned int B21 :1;
                             5411 ; 124  |    unsigned int B22 :1;
                             5412 ; 125  |    unsigned int B23 :1;
                             5413 ; 126  |};
                             5414 ; 127  |
                             5415 ; 128  |union BitInt {
                             5416 ; 129  |        struct Bitfield B;
                             5417 ; 130  |        int        I;
                             5418 ; 131  |};
                             5419 ; 132  |
                             5420 ; 133  |#define MAX_MSG_LENGTH 10
                             5421 ; 134  |struct CMessage
                             5422 ; 135  |{
                             5423 ; 136  |        unsigned int m_uLength;
                             5424 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             5425 ; 138  |};
                             5426 ; 139  |
                             5427 ; 140  |typedef struct {
                             5428 ; 141  |    WORD m_wLength;
                             5429 ; 142  |    WORD m_wMessage;
                             5430 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             5431 ; 144  |} Message;
                             5432 ; 145  |
                             5433 ; 146  |struct MessageQueueDescriptor
                             5434 ; 147  |{
                             5435 ; 148  |        int *m_pBase;
                             5436 ; 149  |        int m_iModulo;
                             5437 ; 150  |        int m_iSize;
                             5438 ; 151  |        int *m_pHead;
                             5439 ; 152  |        int *m_pTail;
                             5440 ; 153  |};
                             5441 ; 154  |
                             5442 ; 155  |struct ModuleEntry
                             5443 ; 156  |{
                             5444 ; 157  |    int m_iSignaledEventMask;
                             5445 ; 158  |    int m_iWaitEventMask;
                             5446 ; 159  |    int m_iResourceOfCode;
                             5447 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             5448 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             5449 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             5450 ; 163  |    int m_uTimeOutHigh;
                             5451 ; 164  |    int m_uTimeOutLow;
                             5452 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             5453 ; 166  |};
                             5454 ; 167  |
                             5455 ; 168  |union WaitMask{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  92

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5456 ; 169  |    struct B{
                             5457 ; 170  |        unsigned int m_bNone     :1;
                             5458 ; 171  |        unsigned int m_bMessage  :1;
                             5459 ; 172  |        unsigned int m_bTimer    :1;
                             5460 ; 173  |        unsigned int m_bButton   :1;
                             5461 ; 174  |    } B;
                             5462 ; 175  |    int I;
                             5463 ; 176  |} ;
                             5464 ; 177  |
                             5465 ; 178  |
                             5466 ; 179  |struct Button {
                             5467 ; 180  |        WORD wButtonEvent;
                             5468 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             5469 ; 182  |};
                             5470 ; 183  |
                             5471 ; 184  |struct Message {
                             5472 ; 185  |        WORD wMsgLength;
                             5473 ; 186  |        WORD wMsgCommand;
                             5474 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             5475 ; 188  |};
                             5476 ; 189  |
                             5477 ; 190  |union EventTypes {
                             5478 ; 191  |        struct CMessage msg;
                             5479 ; 192  |        struct Button Button ;
                             5480 ; 193  |        struct Message Message;
                             5481 ; 194  |};
                             5482 ; 195  |
                             5483 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             5484 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             5485 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             5486 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             5487 ; 200  |
                             5488 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             5489 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             5490 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             5491 ; 204  |
                             5492 ; 205  |#if DEBUG
                             5493 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             5494 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             5495 ; 208  |#else 
                             5496 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             5497 ; 210  |#define DebugBuildAssert(x)    
                             5498 ; 211  |#endif
                             5499 ; 212  |
                             5500 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             5501 ; 214  |//  #pragma asm
                             5502 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             5503 ; 216  |//  #pragma endasm
                             5504 ; 217  |
                             5505 ; 218  |
                             5506 ; 219  |#ifdef COLOR_262K
                             5507 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             5508 ; 221  |#elif defined(COLOR_65K)
                             5509 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             5510 ; 223  |#else
                             5511 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             5512 ; 225  |#endif
                             5513 ; 226  |    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  93

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5514 ; 227  |#endif // #ifndef _TYPES_H
                             5515 
                             5517 
                             5518 ; 29   |
                             5519 ; 30   |///////////////////////////////////////////////////////////////////////////////////
                             5520 ; 31   |////  I2S Registers (SAI)
                             5521 ; 32   |///////////////////////////////////////////////////////////////////////////////////
                             5522 ; 33   |
                             5523 ; 34   |
                             5524 ; 35   |#define HW_SAI_BASEADDR (0xFFF0)
                             5525 ; 36   |
                             5526 ; 37   |
                             5527 ; 38   |
                             5528 ; 39   |
                             5529 ; 40   |#define HW_SAIRCSR_REN0_BITPOS (0)
                             5530 ; 41   |#define HW_SAIRCSR_REN1_BITPOS (1)
                             5531 ; 42   |#define HW_SAIRCSR_REN2_BITPOS (2)
                             5532 ; 43   |#define HW_SAIRCSR_RMME_BITPOS (3)
                             5533 ; 44   |#define HW_SAIRCSR_RSVD0_BITPOS (4)
                             5534 ; 45   |#define HW_SAIRCSR_RWL_BITPOS (5)
                             5535 ; 46   |#define HW_SAIRCSR_RDIR_BITPOS (7)
                             5536 ; 47   |#define HW_SAIRCSR_RLRS_BITPOS (8)
                             5537 ; 48   |#define HW_SAIRCSR_RCKP_BITPOS (9)
                             5538 ; 49   |#define HW_SAIRCSR_RREL_BITPOS (10)
                             5539 ; 50   |#define HW_SAIRCSR_RDWJ_BITPOS (11)
                             5540 ; 51   |#define HW_SAIRCSR_RXIE_BITPOS (12)
                             5541 ; 52   |#define HW_SAIRCSR_RSVD1_BITPOS (13)
                             5542 ; 53   |#define HW_SAIRCSR_ROFL_BITPOS (14)
                             5543 ; 54   |#define HW_SAIRCSR_RDR_BITPOS (15)
                             5544 ; 55   |#define HW_SAIRCSR_ROFCL_BITPOS (16)
                             5545 ; 56   |#define HW_SAIRCSR_RSVD2_BITPOS (17)
                             5546 ; 57   |
                             5547 ; 58   |
                             5548 ; 59   |#define HW_SAIRCSR_REN0_WIDTH (1)
                             5549 ; 60   |#define HW_SAIRCSR_REN1_WIDTH (1)
                             5550 ; 61   |#define HW_SAIRCSR_REN2_WIDTH (1)
                             5551 ; 62   |#define HW_SAIRCSR_RMME_WIDTH (1)
                             5552 ; 63   |#define HW_SAIRCSR_RSVD0_WIDTH (1)
                             5553 ; 64   |#define HW_SAIRCSR_RWL_WIDTH (2)
                             5554 ; 65   |#define HW_SAIRCSR_RDIR_WIDTH (1)
                             5555 ; 66   |#define HW_SAIRCSR_RLRS_WIDTH (1)
                             5556 ; 67   |#define HW_SAIRCSR_RCKP_WIDTH (1)
                             5557 ; 68   |#define HW_SAIRCSR_RREL_WIDTH (1)
                             5558 ; 69   |#define HW_SAIRCSR_RDWJ_WIDTH (1)
                             5559 ; 70   |#define HW_SAIRCSR_RXIE_WIDTH (1)
                             5560 ; 71   |#define HW_SAIRCSR_RSVD1_WIDTH (1)
                             5561 ; 72   |#define HW_SAIRCSR_ROFL_WIDTH (1)
                             5562 ; 73   |#define HW_SAIRCSR_RDR_WIDTH (1)
                             5563 ; 74   |#define HW_SAIRCSR_ROFCL_WIDTH (1)
                             5564 ; 75   |#define HW_SAIRCSR_RSVD2_WIDTH (7)
                             5565 ; 76   |
                             5566 ; 77   |
                             5567 ; 78   |#define HW_SAIRCSR_REN0_SETMASK (((1<HW_SAIRCSR_REN0_WIDTH)-1)<<HW_SAIRCSR_REN0_BITPOS)
                             5568 ; 79   |#define HW_SAIRCSR_REN1_SETMASK (((1<HW_SAIRCSR_REN1_WIDTH)-1)<<HW_SAIRCSR_REN1_BITPOS)
                             5569 ; 80   |#define HW_SAIRCSR_REN2_SETMASK (((1<HW_SAIRCSR_REN2_WIDTH)-1)<<HW_SAIRCSR_REN2_BITPOS)
                             5570 ; 81   |#define HW_SAIRCSR_RMME_SETMASK (((1<HW_SAIRCSR_RMME_WIDTH)-1)<<HW_SAIRCSR_RMME_BITPOS)
                             5571 ; 82   |#define HW_SAIRCSR_RSVD0_SETMASK (((1<HW_SAIRCSR_RSVD0_WIDTH)-1)<<HW_SAIRCSR_RSVD0_BITPOS)
                                  
                             5572 ; 83   |#define HW_SAIRCSR_RWL_SETMASK (((1<HW_SAIRCSR_RWL_WIDTH)-1)<<HW_SAIRCSR_RWL_BITPOS)
                             5573 ; 84   |#define HW_SAIRCSR_RDIR_SETMASK (((1<HW_SAIRCSR_RDIR_WIDTH)-1)<<HW_SAIRCSR_RDIR_BITPOS)
                             5574 ; 85   |#define HW_SAIRCSR_RLRS_SETMASK (((1<HW_SAIRCSR_RLRS_WIDTH)-1)<<HW_SAIRCSR_RLRS_BITPOS)
                             5575 ; 86   |#define HW_SAIRCSR_RCKP_SETMASK (((1<HW_SAIRCSR_RCKP_WIDTH)-1)<<HW_SAIRCSR_RCKP_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  94

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5576 ; 87   |#define HW_SAIRCSR_RREL_SETMASK (((1<HW_SAIRCSR_RREL_WIDTH)-1)<<HW_SAIRCSR_RREL_BITPOS)
                             5577 ; 88   |#define HW_SAIRCSR_RDWJ_SETMASK (((1<HW_SAIRCSR_RDWJ_WIDTH)-1)<<HW_SAIRCSR_RDWJ_BITPOS)
                             5578 ; 89   |#define HW_SAIRCSR_RXIE_SETMASK (((1<HW_SAIRCSR_RXIE_WIDTH)-1)<<HW_SAIRCSR_RXIE_BITPOS)
                             5579 ; 90   |#define HW_SAIRCSR_RSVD1_SETMASK (((1<HW_SAIRCSR_RSVD1_WIDTH)-1)<<HW_SAIRCSR_RSVD1_BITPOS)
                                  
                             5580 ; 91   |#define HW_SAIRCSR_ROFL_SETMASK (((1<HW_SAIRCSR_ROFL_WIDTH)-1)<<HW_SAIRCSR_ROFL_BITPOS)
                             5581 ; 92   |#define HW_SAIRCSR_RDR_SETMASK (((1<HW_SAIRCSR_RDR_WIDTH)-1)<<HW_SAIRCSR_RDR_BITPOS)
                             5582 ; 93   |#define HW_SAIRCSR_ROFCL_SETMASK (((1<HW_SAIRCSR_ROFCL_WIDTH)-1)<<HW_SAIRCSR_ROFCL_BITPOS)
                                  
                             5583 ; 94   |#define HW_SAIRCSR_RSVD2_SETMASK (((1<HW_SAIRCSR_RSVD2_WIDTH)-1)<<HW_SAIRCSR_RSVD2_BITPOS)
                                  
                             5584 ; 95   |
                             5585 ; 96   |
                             5586 ; 97   |#define HW_SAIRCSR_REN0_CLRMASK (~(WORD)HW_SAIRCSR_REN0_SETMASK)
                             5587 ; 98   |#define HW_SAIRCSR_REN1_CLRMASK (~(WORD)HW_SAIRCSR_REN1_SETMASK)
                             5588 ; 99   |#define HW_SAIRCSR_REN2_CLRMASK (~(WORD)HW_SAIRCSR_REN2_SETMASK)
                             5589 ; 100  |#define HW_SAIRCSR_RMME_CLRMASK (~(WORD)HW_SAIRCSR_RMME_SETMASK)
                             5590 ; 101  |#define HW_SAIRCSR_RSVD0_CLRMASK (~(WORD)HW_SAIRCSR_RSVD0_SETMASK)
                             5591 ; 102  |#define HW_SAIRCSR_RWL_CLRMASK (~(WORD)HW_SAIRCSR_RWL_SETMASK)
                             5592 ; 103  |#define HW_SAIRCSR_RDIR_CLRMASK (~(WORD)HW_SAIRCSR_RDIR_SETMASK)
                             5593 ; 104  |#define HW_SAIRCSR_RLRS_CLRMASK (~(WORD)HW_SAIRCSR_RLRS_SETMASK)
                             5594 ; 105  |#define HW_SAIRCSR_RCKP_CLRMASK (~(WORD)HW_SAIRCSR_RCKP_SETMASK)
                             5595 ; 106  |#define HW_SAIRCSR_RREL_CLRMASK (~(WORD)HW_SAIRCSR_RREL_SETMASK)
                             5596 ; 107  |#define HW_SAIRCSR_RDWJ_CLRMASK (~(WORD)HW_SAIRCSR_RDWJ_SETMASK)
                             5597 ; 108  |#define HW_SAIRCSR_RXIE_CLRMASK (~(WORD)HW_SAIRCSR_RXIE_SETMASK)
                             5598 ; 109  |#define HW_SAIRCSR_RSVD1_CLRMASK (~(WORD)HW_SAIRCSR_RSVD1_SETMASK)
                             5599 ; 110  |#define HW_SAIRCSR_ROFL_CLRMASK (~(WORD)HW_SAIRCSR_ROFL_SETMASK)
                             5600 ; 111  |#define HW_SAIRCSR_RDR_CLRMASK (~(WORD)HW_SAIRCSR_RDR_SETMASK)
                             5601 ; 112  |#define HW_SAIRCSR_ROFCL_CLRMASK (~(WORD)HW_SAIRCSR_ROFCL_SETMASK)
                             5602 ; 113  |#define HW_SAIRCSR_RSVD2_CLRMASK (~(WORD)HW_SAIRCSR_RSVD2_SETMASK)
                             5603 ; 114  |
                             5604 ; 115  |typedef union
                             5605 ; 116  |{
                             5606 ; 117  |    struct {
                             5607 ; 118  |        int REN0        :HW_SAIRCSR_REN0_WIDTH;        // Receiver 0 enable
                             5608 ; 119  |        int REN1        :HW_SAIRCSR_REN1_WIDTH;        // Receiver 1 enable
                             5609 ; 120  |        int REN2        :HW_SAIRCSR_REN2_WIDTH;        // Receiver 2 enable
                             5610 ; 121  |        int RMME        :HW_SAIRCSR_RMME_WIDTH;        // Receiver master mode enable
                             5611 ; 122  |        int RSVD0       :HW_SAIRCSR_RSVD0_WIDTH;       // Reserved
                             5612 ; 123  |        unsigned RWL    :HW_SAIRCSR_RWL_WIDTH;         // Receiver word length control
                             5613 ; 124  |        int RDIR        :HW_SAIRCSR_RDIR_WIDTH;        // Receiver data shift direction 
                             5614 ; 125  |        int RLRS        :HW_SAIRCSR_RLRS_WIDTH;        // Receiver left right select
                             5615 ; 126  |        int RCKP        :HW_SAIRCSR_RCKP_WIDTH;        // Receiver clock polarity
                             5616 ; 127  |        int RREL        :HW_SAIRCSR_RREL_WIDTH;        // Receiver relative timing
                             5617 ; 128  |        int RDWJ        :HW_SAIRCSR_RDWJ_WIDTH;        // Receiver data word justification
                                  
                             5618 ; 129  |        int RXIE        :HW_SAIRCSR_RXIE_WIDTH;        // Receiver interrupt enable
                             5619 ; 130  |        int RSVD1       :HW_SAIRCSR_RSVD1_WIDTH;       // Reserved
                             5620 ; 131  |        int ROFL        :HW_SAIRCSR_ROFL_WIDTH;        // Receiver data overflow
                             5621 ; 132  |        int RDR         :HW_SAIRCSR_RDR_WIDTH;         // Receiver data ready flag
                             5622 ; 133  |        int ROFCL       :HW_SAIRCSR_ROFCL_WIDTH;       // Receiver data overflow clear
                             5623 ; 134  |        unsigned RSVD2  :HW_SAIRCSR_RSVD2_WIDTH;       // Reserved
                             5624 ; 135  |    } B;
                             5625 ; 136  |    int I;
                             5626 ; 137  |    unsigned U;
                             5627 ; 138  |} saircsr_type;
                             5628 ; 139  |
                             5629 ; 140  |#define HW_SAIRCSR (*(volatile saircsr_type _X*) (HW_SAI_BASEADDR))       /* I2S Receive C
                                  SR         */
                             5630 ; 141  |
                             5631 ; 142  |typedef union
                             5632 ; 143  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  95

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5633 ; 144  |    struct {
                             5634 ; 145  |        unsigned SAI :24;
                             5635 ; 146  |    } B;
                             5636 ; 147  |    int I;
                             5637 ; 148  |    unsigned U;
                             5638 ; 149  |} saixr_type;
                             5639 ; 150  |
                             5640 ; 151  |#define HW_SAIRX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+1))       /* I2S Received
                                   data reg 0 */
                             5641 ; 152  |#define HW_SAIRX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+2))       /* I2S Received
                                   data reg 1 */
                             5642 ; 153  |#define HW_SAIRX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+3))       /* I2S Received
                                   data reg 2 */
                             5643 ; 154  |
                             5644 ; 155  |
                             5645 ; 156  |#define HW_SAITCSR_TEN0_BITPOS (0)
                             5646 ; 157  |#define HW_SAITCSR_TEN1_BITPOS (1)
                             5647 ; 158  |#define HW_SAITCSR_TEN2_BITPOS (2)
                             5648 ; 159  |#define HW_SAITCSR_TMME_BITPOS (3)
                             5649 ; 160  |#define HW_SAITCSR_RSVD0_BITPOS (4)
                             5650 ; 161  |#define HW_SAITCSR_TWL_BITPOS (5)
                             5651 ; 162  |#define HW_SAITCSR_TDIR_BITPOS (7)
                             5652 ; 163  |#define HW_SAITCSR_TLRS_BITPOS (8)
                             5653 ; 164  |#define HW_SAITCSR_TCKP_BITPOS (9)
                             5654 ; 165  |#define HW_SAITCSR_TREL_BITPOS (10)
                             5655 ; 166  |#define HW_SAITCSR_TDWE_BITPOS (11)
                             5656 ; 167  |#define HW_SAITCSR_TXIE_BITPOS (12)
                             5657 ; 168  |#define HW_SAITCSR_RSVD1_BITPOS (13)
                             5658 ; 169  |#define HW_SAITCSR_TUFL_BITPOS (14)
                             5659 ; 170  |#define HW_SAITCSR_TDE_BITPOS (15)
                             5660 ; 171  |#define HW_SAITCSR_TUFCL_BITPOS (16)
                             5661 ; 172  |#define HW_SAITCSR_RSVD2_BITPOS (17)
                             5662 ; 173  |
                             5663 ; 174  |
                             5664 ; 175  |#define HW_SAITCSR_TEN0_WIDTH (1)
                             5665 ; 176  |#define HW_SAITCSR_TEN1_WIDTH (1)
                             5666 ; 177  |#define HW_SAITCSR_TEN2_WIDTH (1)
                             5667 ; 178  |#define HW_SAITCSR_TMME_WIDTH (1)
                             5668 ; 179  |#define HW_SAITCSR_RSVD0_WIDTH (1)
                             5669 ; 180  |#define HW_SAITCSR_TWL_WIDTH (2)
                             5670 ; 181  |#define HW_SAITCSR_TDIR_WIDTH (1)
                             5671 ; 182  |#define HW_SAITCSR_TLRS_WIDTH (1)
                             5672 ; 183  |#define HW_SAITCSR_TCKP_WIDTH (1)
                             5673 ; 184  |#define HW_SAITCSR_TREL_WIDTH (1)
                             5674 ; 185  |#define HW_SAITCSR_TDWE_WIDTH (1)
                             5675 ; 186  |#define HW_SAITCSR_TXIE_WIDTH (1)
                             5676 ; 187  |#define HW_SAITCSR_RSVD1_WIDTH (1)
                             5677 ; 188  |#define HW_SAITCSR_TUFL_WIDTH (1)
                             5678 ; 189  |#define HW_SAITCSR_TDE_WIDTH (1)
                             5679 ; 190  |#define HW_SAITCSR_TUFCL_WIDTH (1)
                             5680 ; 191  |#define HW_SAITCSR_RSVD2_WIDTH (7)
                             5681 ; 192  |
                             5682 ; 193  |
                             5683 ; 194  |#define HW_SAITCSR_TEN0_SETMASK (((1<HW_SAITCSR_TEN0_WIDTH)-1)<<HW_SAITCSR_TEN0_BITPOS)
                             5684 ; 195  |#define HW_SAITCSR_TEN1_SETMASK (((1<HW_SAITCSR_TEN1_WIDTH)-1)<<HW_SAITCSR_TEN1_BITPOS)
                             5685 ; 196  |#define HW_SAITCSR_TEN2_SETMASK (((1<HW_SAITCSR_TEN2_WIDTH)-1)<<HW_SAITCSR_TEN2_BITPOS)
                             5686 ; 197  |#define HW_SAITCSR_TMME_SETMASK (((1<HW_SAITCSR_TMME_WIDTH)-1)<<HW_SAITCSR_TMME_BITPOS)
                             5687 ; 198  |#define HW_SAITCSR_RSVD0_SETMASK (((1<HW_SAITCSR_RSVD0_WIDTH)-1)<<HW_SAITCSR_RSVD0_BITPOS)
                                  
                             5688 ; 199  |#define HW_SAITCSR_TWL_SETMASK (((1<HW_SAITCSR_TWL_WIDTH)-1)<<HW_SAITCSR_TWL_BITPOS)
                             5689 ; 200  |#define HW_SAITCSR_TDIR_SETMASK (((1<HW_SAITCSR_TDIR_WIDTH)-1)<<HW_SAITCSR_TDIR_BITPOS)
                             5690 ; 201  |#define HW_SAITCSR_TLRS_SETMASK (((1<HW_SAITCSR_TLRS_WIDTH)-1)<<HW_SAITCSR_TLRS_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  96

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5691 ; 202  |#define HW_SAITCSR_TCKP_SETMASK (((1<HW_SAITCSR_TCKP_WIDTH)-1)<<HW_SAITCSR_TCKP_BITPOS)
                             5692 ; 203  |#define HW_SAITCSR_TREL_SETMASK (((1<HW_SAITCSR_TREL_WIDTH)-1)<<HW_SAITCSR_TREL_BITPOS)
                             5693 ; 204  |#define HW_SAITCSR_TDWE_SETMASK (((1<HW_SAITCSR_TDWE_WIDTH)-1)<<HW_SAITCSR_TDWE_BITPOS)
                             5694 ; 205  |#define HW_SAITCSR_TXIE_SETMASK (((1<HW_SAITCSR_TXIE_WIDTH)-1)<<HW_SAITCSR_TXIE_BITPOS)
                             5695 ; 206  |#define HW_SAITCSR_RSVD1_SETMASK (((1<HW_SAITCSR_RSVD1_WIDTH)-1)<<HW_SAITCSR_RSVD1_BITPOS)
                                  
                             5696 ; 207  |#define HW_SAITCSR_TUFL_SETMASK (((1<HW_SAITCSR_TUFL_WIDTH)-1)<<HW_SAITCSR_TUFL_BITPOS)
                             5697 ; 208  |#define HW_SAITCSR_TDE_SETMASK (((1<HW_SAITCSR_TDE_WIDTH)-1)<<HW_SAITCSR_TDE_BITPOS)
                             5698 ; 209  |#define HW_SAITCSR_TUFCL_SETMASK (((1<HW_SAITCSR_TUFCL_WIDTH)-1)<<HW_SAITCSR_TUFCL_BITPOS)
                                  
                             5699 ; 210  |#define HW_SAITCSR_RSVD2_SETMASK (((1<HW_SAITCSR_RSVD2_WIDTH)-1)<<HW_SAITCSR_RSVD2_BITPOS)
                                  
                             5700 ; 211  |
                             5701 ; 212  |
                             5702 ; 213  |#define HW_SAITCSR_TEN0_CLRMASK (~(WORD)HW_SAITCSR_TEN0_SETMASK)
                             5703 ; 214  |#define HW_SAITCSR_TEN1_CLRMASK (~(WORD)HW_SAITCSR_TEN1_SETMASK)
                             5704 ; 215  |#define HW_SAITCSR_TEN2_CLRMASK (~(WORD)HW_SAITCSR_TEN2_SETMASK)
                             5705 ; 216  |#define HW_SAITCSR_TMME_CLRMASK (~(WORD)HW_SAITCSR_TMME_SETMASK)
                             5706 ; 217  |#define HW_SAITCSR_RSVD0_CLRMASK (~(WORD)HW_SAITCSR_RSVD0_SETMASK)
                             5707 ; 218  |#define HW_SAITCSR_TWL_CLRMASK (~(WORD)HW_SAITCSR_TWL_SETMASK)
                             5708 ; 219  |#define HW_SAITCSR_TDIR_CLRMASK (~(WORD)HW_SAITCSR_TDIR_SETMASK)
                             5709 ; 220  |#define HW_SAITCSR_TLRS_CLRMASK (~(WORD)HW_SAITCSR_TLRS_SETMASK)
                             5710 ; 221  |#define HW_SAITCSR_TCKP_CLRMASK (~(WORD)HW_SAITCSR_TCKP_SETMASK)
                             5711 ; 222  |#define HW_SAITCSR_TREL_CLRMASK (~(WORD)HW_SAITCSR_TREL_SETMASK)
                             5712 ; 223  |#define HW_SAITCSR_TDWE_CLRMASK (~(WORD)HW_SAITCSR_TDWE_SETMASK)
                             5713 ; 224  |#define HW_SAITCSR_TXIE_CLRMASK (~(WORD)HW_SAITCSR_TXIE_SETMASK)
                             5714 ; 225  |#define HW_SAITCSR_RSVD1_CLRMASK (~(WORD)HW_SAITCSR_RSVD1_SETMASK)
                             5715 ; 226  |#define HW_SAITCSR_TUFL_CLRMASK (~(WORD)HW_SAITCSR_TUFL_SETMASK)
                             5716 ; 227  |#define HW_SAITCSR_TDE_CLRMASK (~(WORD)HW_SAITCSR_TDE_SETMASK)
                             5717 ; 228  |#define HW_SAITCSR_TUFCL_CLRMASK (~(WORD)HW_SAITCSR_TUFCL_SETMASK)
                             5718 ; 229  |#define HW_SAITCSR_RSVD2_CLRMASK (~(WORD)HW_SAITCSR_RSVD2_SETMASK)
                             5719 ; 230  |
                             5720 ; 231  |
                             5721 ; 232  |typedef union
                             5722 ; 233  |{
                             5723 ; 234  |    struct {
                             5724 ; 235  |        int TEN0       :HW_SAITCSR_TEN0_WIDTH;         // Transmitter 0 enable
                             5725 ; 236  |        int TEN1       :HW_SAITCSR_TEN1_WIDTH;         // Transmitter 1 enable
                             5726 ; 237  |        int TEN2       :HW_SAITCSR_TEN2_WIDTH;         // Transmitter 2 enable
                             5727 ; 238  |        int TMME       :HW_SAITCSR_TMME_WIDTH;         // Transmitter master mode enable
                             5728 ; 239  |        int RSVD0      :HW_SAITCSR_RSVD0_WIDTH;        // Reserved
                             5729 ; 240  |        unsigned TWL   :HW_SAITCSR_TWL_WIDTH;          // Transmitter word length control
                             5730 ; 241  |        int TDIR       :HW_SAITCSR_TDIR_WIDTH;         // Transmitter data shift direction
                                   
                             5731 ; 242  |        int TLRS       :HW_SAITCSR_TLRS_WIDTH;         // Transmitter left right select
                             5732 ; 243  |        int TCKP       :HW_SAITCSR_TCKP_WIDTH;         // Transmitter clock polarity
                             5733 ; 244  |        int TREL       :HW_SAITCSR_TREL_WIDTH;         // Transmitter relative timing
                             5734 ; 245  |        int TDWE       :HW_SAITCSR_TDWE_WIDTH;         // Transmitter data word justificat
                                  ion
                             5735 ; 246  |        int TXIE       :HW_SAITCSR_TXIE_WIDTH;         // Transmitter interrupt enable
                             5736 ; 247  |        int RSVD1      :HW_SAITCSR_RSVD1_WIDTH;        // Reserved
                             5737 ; 248  |        int TUFL       :HW_SAITCSR_TUFL_WIDTH;         // Transmitter data overflow
                             5738 ; 249  |        int TDE        :HW_SAITCSR_TDE_WIDTH;          // Transmitter data ready flag
                             5739 ; 250  |        int TUFCL      :HW_SAITCSR_TUFCL_WIDTH;        // Transmitter data overflow clear
                             5740 ; 251  |        unsigned RSVD2 :HW_SAITCSR_RSVD2_WIDTH;        // Reserved
                             5741 ; 252  |    } B;
                             5742 ; 253  |    int I;
                             5743 ; 254  |    unsigned U;
                             5744 ; 255  |} saitcsr_type;
                             5745 ; 256  |
                             5746 ; 257  |#define HW_SAITCSR (*(volatile saitcsr_type _X*) (HW_SAI_BASEADDR+5)) /* I2S Transmit CSR 
                                       */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  97

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5747 ; 258  |
                             5748 ; 259  |#define HW_SAITX0R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+6))       /* I2S Transmit
                                   data reg 0 */
                             5749 ; 260  |#define HW_SAITX1R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+7))       /* I2S Transmit
                                   data reg 1 */
                             5750 ; 261  |#define HW_SAITX2R (*(volatile saixr_type _X*)  (HW_SAI_BASEADDR+8))       /* I2S Transmit
                                   data reg 2 */
                             5751 ; 262  |
                             5752 ; 263  |#endif
                             5753 
                             5755 
                             5756 ; 25   |#include "regsicoll.h"
                             5757 
                             5759 
                             5760 ; 1    |#if !defined(__REGS_ICOLL_INC)
                             5761 ; 2    |#define __REGS_ICOLL_INC 1
                             5762 ; 3    |
                             5763 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                             5764 ; 5    |//  Interrupt Collector Registers
                             5765 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                             5766 ; 7    |
                             5767 ; 8    |#define HW_ICOLL_BASEADDR 0xF300
                             5768 ; 9    |
                             5769 ; 10   |
                             5770 ; 11   |
                             5771 ; 12   |/////////////////////////////////////////////////////////////////////////////////
                             5772 ; 13   |//  Interrupt Collector 0 Enable Register (HW_ICLENABLE0R) Bit Positions
                             5773 ; 14   |
                             5774 ; 15   |typedef union
                             5775 ; 16   |{
                             5776 ; 17   |    struct {
                             5777 ; 18   |        int SEN0        :1;
                             5778 ; 19   |        int SEN1        :1;
                             5779 ; 20   |        int SEN2        :1;
                             5780 ; 21   |        int SEN3        :1;
                             5781 ; 22   |        int SEN4        :1;
                             5782 ; 23   |        int SEN5        :1;
                             5783 ; 24   |        int SEN6        :1;
                             5784 ; 25   |        int SEN7        :1;
                             5785 ; 26   |        int SEN8        :1;
                             5786 ; 27   |        int SEN9        :1;
                             5787 ; 28   |        int SEN10       :1;
                             5788 ; 29   |        int SEN11       :1;
                             5789 ; 30   |        int SEN12       :1;
                             5790 ; 31   |        int SEN13       :1;
                             5791 ; 32   |        int SEN14       :1;
                             5792 ; 33   |        int SEN15       :1;
                             5793 ; 34   |        int SEN16       :1;
                             5794 ; 35   |        int SEN17       :1;
                             5795 ; 36   |        int SEN18       :1;
                             5796 ; 37   |        int SEN19       :1;
                             5797 ; 38   |        int SEN20       :1;
                             5798 ; 39   |        int SEN21       :1;
                             5799 ; 40   |        int SEN22       :1;
                             5800 ; 41   |        int SEN23       :1;
                             5801 ; 42   |    } B;
                             5802 ; 43   |    int I;
                             5803 ; 44   |} iclenable0_type;
                             5804 ; 45   |#define HW_ICLENABLE0R  (*(volatile iclenable0_type _X*) (HW_ICOLL_BASEADDR)) /* Interrupt
                                   Priority Register Core   */
                             5805 ; 46   |
                             5806 ; 47   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  98

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5807 ; 48   |#define HW_ICLENABLE0R_SEN0_BITPOS 0
                             5808 ; 49   |#define HW_ICLENABLE0R_SEN1_BITPOS 1
                             5809 ; 50   |#define HW_ICLENABLE0R_SEN2_BITPOS 2
                             5810 ; 51   |#define HW_ICLENABLE0R_SEN3_BITPOS 3
                             5811 ; 52   |#define HW_ICLENABLE0R_SEN4_BITPOS 4
                             5812 ; 53   |#define HW_ICLENABLE0R_SEN5_BITPOS 5
                             5813 ; 54   |#define HW_ICLENABLE0R_SEN6_BITPOS 6
                             5814 ; 55   |#define HW_ICLENABLE0R_SEN7_BITPOS 7
                             5815 ; 56   |#define HW_ICLENABLE0R_SEN8_BITPOS 8
                             5816 ; 57   |#define HW_ICLENABLE0R_SEN9_BITPOS 9
                             5817 ; 58   |#define HW_ICLENABLE0R_SEN10_BITPOS 10
                             5818 ; 59   |#define HW_ICLENABLE0R_SEN11_BITPOS 11
                             5819 ; 60   |#define HW_ICLENABLE0R_SEN12_BITPOS 12
                             5820 ; 61   |#define HW_ICLENABLE0R_SEN13_BITPOS 13
                             5821 ; 62   |#define HW_ICLENABLE0R_SEN14_BITPOS 14
                             5822 ; 63   |#define HW_ICLENABLE0R_SEN15_BITPOS 15
                             5823 ; 64   |#define HW_ICLENABLE0R_SEN16_BITPOS 16
                             5824 ; 65   |#define HW_ICLENABLE0R_SEN17_BITPOS 17
                             5825 ; 66   |#define HW_ICLENABLE0R_SEN18_BITPOS 18
                             5826 ; 67   |#define HW_ICLENABLE0R_SEN19_BITPOS 19
                             5827 ; 68   |#define HW_ICLENABLE0R_SEN20_BITPOS 20
                             5828 ; 69   |#define HW_ICLENABLE0R_SEN21_BITPOS 21
                             5829 ; 70   |#define HW_ICLENABLE0R_SEN22_BITPOS 22
                             5830 ; 71   |#define HW_ICLENABLE0R_SEN23_BITPOS 23
                             5831 ; 72   |
                             5832 ; 73   |#define HW_ICLENABLE0R_SEN0_SETMASK 1<<HW_ICLENABLE0R_SEN0_BITPOS
                             5833 ; 74   |#define HW_ICLENABLE0R_SEN1_SETMASK 1<<HW_ICLENABLE0R_SEN1_BITPOS
                             5834 ; 75   |#define HW_ICLENABLE0R_SEN2_SETMASK 1<<HW_ICLENABLE0R_SEN2_BITPOS
                             5835 ; 76   |#define HW_ICLENABLE0R_SEN3_SETMASK 1<<HW_ICLENABLE0R_SEN3_BITPOS
                             5836 ; 77   |#define HW_ICLENABLE0R_SEN4_SETMASK 1<<HW_ICLENABLE0R_SEN4_BITPOS
                             5837 ; 78   |#define HW_ICLENABLE0R_SEN5_SETMASK 1<<HW_ICLENABLE0R_SEN5_BITPOS
                             5838 ; 79   |#define HW_ICLENABLE0R_SEN6_SETMASK 1<<HW_ICLENABLE0R_SEN6_BITPOS
                             5839 ; 80   |#define HW_ICLENABLE0R_SEN7_SETMASK 1<<HW_ICLENABLE0R_SEN7_BITPOS
                             5840 ; 81   |#define HW_ICLENABLE0R_SEN8_SETMASK 1<<HW_ICLENABLE0R_SEN8_BITPOS
                             5841 ; 82   |#define HW_ICLENABLE0R_SEN9_SETMASK 1<<HW_ICLENABLE0R_SEN9_BITPOS
                             5842 ; 83   |#define HW_ICLENABLE0R_SEN10_SETMASK 1<<HW_ICLENABLE0R_SEN10_BITPOS
                             5843 ; 84   |#define HW_ICLENABLE0R_SEN11_SETMASK 1<<HW_ICLENABLE0R_SEN11_BITPOS
                             5844 ; 85   |#define HW_ICLENABLE0R_SEN12_SETMASK 1<<HW_ICLENABLE0R_SEN12_BITPOS
                             5845 ; 86   |#define HW_ICLENABLE0R_SEN13_SETMASK 1<<HW_ICLENABLE0R_SEN13_BITPOS
                             5846 ; 87   |#define HW_ICLENABLE0R_SEN14_SETMASK 1<<HW_ICLENABLE0R_SEN14_BITPOS
                             5847 ; 88   |#define HW_ICLENABLE0R_SEN15_SETMASK 1<<HW_ICLENABLE0R_SEN15_BITPOS
                             5848 ; 89   |#define HW_ICLENABLE0R_SEN16_SETMASK 1<<HW_ICLENABLE0R_SEN16_BITPOS
                             5849 ; 90   |#define HW_ICLENABLE0R_SEN17_SETMASK 1<<HW_ICLENABLE0R_SEN17_BITPOS
                             5850 ; 91   |#define HW_ICLENABLE0R_SEN18_SETMASK 1<<HW_ICLENABLE0R_SEN18_BITPOS
                             5851 ; 92   |#define HW_ICLENABLE0R_SEN19_SETMASK 1<<HW_ICLENABLE0R_SEN19_BITPOS
                             5852 ; 93   |#define HW_ICLENABLE0R_SEN20_SETMASK 1<<HW_ICLENABLE0R_SEN20_BITPOS
                             5853 ; 94   |#define HW_ICLENABLE0R_SEN21_SETMASK 1<<HW_ICLENABLE0R_SEN21_BITPOS
                             5854 ; 95   |#define HW_ICLENABLE0R_SEN22_SETMASK 1<<HW_ICLENABLE0R_SEN22_BITPOS
                             5855 ; 96   |#define HW_ICLENABLE0R_SEN23_SETMASK 1<<HW_ICLENABLE0R_SEN23_BITPOS
                             5856 ; 97   |
                             5857 ; 98   |#define HW_ICLENABLE0R_SEN0_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN0_SETMASK
                             5858 ; 99   |#define HW_ICLENABLE0R_SEN1_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN1_SETMASK
                             5859 ; 100  |#define HW_ICLENABLE0R_SEN2_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN2_SETMASK
                             5860 ; 101  |#define HW_ICLENABLE0R_SEN3_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN3_SETMASK
                             5861 ; 102  |#define HW_ICLENABLE0R_SEN4_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN4_SETMASK
                             5862 ; 103  |#define HW_ICLENABLE0R_SEN5_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN5_SETMASK
                             5863 ; 104  |#define HW_ICLENABLE0R_SEN6_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN6_SETMASK
                             5864 ; 105  |#define HW_ICLENABLE0R_SEN7_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN7_SETMASK
                             5865 ; 106  |#define HW_ICLENABLE0R_SEN8_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN8_SETMASK
                             5866 ; 107  |#define HW_ICLENABLE0R_SEN9_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN9_SETMASK
                             5867 ; 108  |#define HW_ICLENABLE0R_SEN10_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN10_SETMASK
                             5868 ; 109  |#define HW_ICLENABLE0R_SEN11_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN11_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page  99

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5869 ; 110  |#define HW_ICLENABLE0R_SEN12_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN12_SETMASK
                             5870 ; 111  |#define HW_ICLENABLE0R_SEN13_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN13_SETMASK
                             5871 ; 112  |#define HW_ICLENABLE0R_SEN14_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN14_SETMASK
                             5872 ; 113  |#define HW_ICLENABLE0R_SEN15_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN15_SETMASK
                             5873 ; 114  |#define HW_ICLENABLE0R_SEN16_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN16_SETMASK
                             5874 ; 115  |#define HW_ICLENABLE0R_SEN17_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN17_SETMASK
                             5875 ; 116  |#define HW_ICLENABLE0R_SEN18_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN18_SETMASK
                             5876 ; 117  |#define HW_ICLENABLE0R_SEN19_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN19_SETMASK
                             5877 ; 118  |#define HW_ICLENABLE0R_SEN20_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN20_SETMASK
                             5878 ; 119  |#define HW_ICLENABLE0R_SEN21_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN21_SETMASK
                             5879 ; 120  |#define HW_ICLENABLE0R_SEN22_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN22_SETMASK
                             5880 ; 121  |#define HW_ICLENABLE0R_SEN23_CLRMASK ~(WORD)HW_ICLENABLE0R_SEN23_SETMASK
                             5881 ; 122  |
                             5882 ; 123  |
                             5883 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             5884 ; 125  |//  Interrupt Collector 1 Enable Register (HW_ICLENABLE1R) Bit Positions
                             5885 ; 126  |typedef union
                             5886 ; 127  |{
                             5887 ; 128  |    struct {
                             5888 ; 129  |        
                             5889 ; 130  |        int SEN24       :1;
                             5890 ; 131  |        int SEN25       :1;
                             5891 ; 132  |        int SEN26       :1;
                             5892 ; 133  |        int SEN27       :1;
                             5893 ; 134  |        int SEN28       :1;
                             5894 ; 135  |        int SEN29       :1;
                             5895 ; 136  |        int SEN30       :1;
                             5896 ; 137  |        int SEN31       :1;
                             5897 ; 138  |        int SEN32       :1;
                             5898 ; 139  |        int SEN33       :1;
                             5899 ; 140  |    } B;
                             5900 ; 141  |    int I;
                             5901 ; 142  |} iclenable1_type;
                             5902 ; 143  |
                             5903 ; 144  |#define HW_ICLENABLE1R  (*(volatile iclenable1_type _X*) (HW_ICOLL_BASEADDR+1)) /* Interru
                                  pt Priority Register Core    */
                             5904 ; 145  |
                             5905 ; 146  |#define HW_ICLENABLE1R_SEN24_BITPOS 0
                             5906 ; 147  |#define HW_ICLENABLE1R_SEN25_BITPOS 1
                             5907 ; 148  |#define HW_ICLENABLE1R_SEN26_BITPOS 2
                             5908 ; 149  |#define HW_ICLENABLE1R_SEN27_BITPOS 3
                             5909 ; 150  |#define HW_ICLENABLE1R_SEN28_BITPOS 4
                             5910 ; 151  |#define HW_ICLENABLE1R_SEN29_BITPOS 5
                             5911 ; 152  |#define HW_ICLENABLE1R_SEN30_BITPOS 6
                             5912 ; 153  |#define HW_ICLENABLE1R_SEN31_BITPOS 7
                             5913 ; 154  |#define HW_ICLENABLE1R_SEN32_BITPOS 8
                             5914 ; 155  |#define HW_ICLENABLE1R_SEN33_BITPOS 9
                             5915 ; 156  |
                             5916 ; 157  |#define HW_ICLENABLE1R_SEN24_SETMASK 1<<HW_ICLENABLE1R_SEN24_BITPOS
                             5917 ; 158  |#define HW_ICLENABLE1R_SEN25_SETMASK 1<<HW_ICLENABLE1R_SEN25_BITPOS
                             5918 ; 159  |#define HW_ICLENABLE1R_SEN26_SETMASK 1<<HW_ICLENABLE1R_SEN26_BITPOS
                             5919 ; 160  |#define HW_ICLENABLE1R_SEN27_SETMASK 1<<HW_ICLENABLE1R_SEN27_BITPOS
                             5920 ; 161  |#define HW_ICLENABLE1R_SEN28_SETMASK 1<<HW_ICLENABLE1R_SEN28_BITPOS
                             5921 ; 162  |#define HW_ICLENABLE1R_SEN29_SETMASK 1<<HW_ICLENABLE1R_SEN29_BITPOS
                             5922 ; 163  |#define HW_ICLENABLE1R_SEN30_SETMASK 1<<HW_ICLENABLE1R_SEN30_BITPOS
                             5923 ; 164  |#define HW_ICLENABLE1R_SEN31_SETMASK 1<<HW_ICLENABLE1R_SEN31_BITPOS
                             5924 ; 165  |#define HW_ICLENABLE1R_SEN32_SETMASK 1<<HW_ICLENABLE1R_SEN32_BITPOS
                             5925 ; 166  |#define HW_ICLENABLE1R_SEN33_SETMASK 1<<HW_ICLENABLE1R_SEN33_BITPOS
                             5926 ; 167  |
                             5927 ; 168  |#define HW_ICLENABLE1R_SEN24_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN24_SETMASK
                             5928 ; 169  |#define HW_ICLENABLE1R_SEN25_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN25_SETMASK
                             5929 ; 170  |#define HW_ICLENABLE1R_SEN26_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN26_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 100

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5930 ; 171  |#define HW_ICLENABLE1R_SEN27_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN27_SETMASK
                             5931 ; 172  |#define HW_ICLENABLE1R_SEN28_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN28_SETMASK
                             5932 ; 173  |#define HW_ICLENABLE1R_SEN29_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN29_SETMASK
                             5933 ; 174  |#define HW_ICLENABLE1R_SEN30_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN30_SETMASK
                             5934 ; 175  |#define HW_ICLENABLE1R_SEN31_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN31_SETMASK
                             5935 ; 176  |#define HW_ICLENABLE1R_SEN32_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN32_SETMASK
                             5936 ; 177  |#define HW_ICLENABLE1R_SEN33_CLRMASK ~(WORD)HW_ICLENABLE1R_SEN33_SETMASK
                             5937 ; 178  |
                             5938 ; 179  |
                             5939 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             5940 ; 181  |//  Interrupt Collector Status 0 Register (HW_ICLSTATUS0R) Bit Positions
                             5941 ; 182  |typedef union
                             5942 ; 183  |{
                             5943 ; 184  |    struct {
                             5944 ; 185  |        int SST0        :1;
                             5945 ; 186  |        int SST1        :1;
                             5946 ; 187  |        int SST2        :1;
                             5947 ; 188  |        int SST3        :1;
                             5948 ; 189  |        int SST4        :1;
                             5949 ; 190  |        int SST5        :1;
                             5950 ; 191  |        int SST6        :1;
                             5951 ; 192  |        int SST7        :1;
                             5952 ; 193  |        int SST8        :1;
                             5953 ; 194  |        int SST9        :1;
                             5954 ; 195  |        int SST10       :1;
                             5955 ; 196  |        int SST11       :1;
                             5956 ; 197  |        int SST12       :1;
                             5957 ; 198  |        int SST13       :1;
                             5958 ; 199  |        int SST14       :1;
                             5959 ; 200  |        int SST15       :1;
                             5960 ; 201  |        int SST16       :1;
                             5961 ; 202  |        int SST17       :1;
                             5962 ; 203  |        int SST18       :1;
                             5963 ; 204  |        int SST19       :1;
                             5964 ; 205  |        int SST20       :1;
                             5965 ; 206  |        int SST21       :1;
                             5966 ; 207  |        int SST22       :1;
                             5967 ; 208  |        int SST23       :1;
                             5968 ; 209  |    } B;
                             5969 ; 210  |    int I;
                             5970 ; 211  |} iclstatus0_type;
                             5971 ; 212  |#define HW_ICLSTATUS0R  (*(volatile iclstatus0_type _X*) (HW_ICOLL_BASEADDR+2)) /* Interru
                                  pt Priority Register Core */
                             5972 ; 213  |#define HW_ICLSTATUS0R_SST0_BITPOS 0
                             5973 ; 214  |#define HW_ICLSTATUS0R_SST1_BITPOS 1
                             5974 ; 215  |#define HW_ICLSTATUS0R_SST2_BITPOS 2
                             5975 ; 216  |#define HW_ICLSTATUS0R_SST3_BITPOS 3
                             5976 ; 217  |#define HW_ICLSTATUS0R_SST4_BITPOS 4
                             5977 ; 218  |#define HW_ICLSTATUS0R_SST5_BITPOS 5
                             5978 ; 219  |#define HW_ICLSTATUS0R_SST6_BITPOS 6
                             5979 ; 220  |#define HW_ICLSTATUS0R_SST7_BITPOS 7
                             5980 ; 221  |#define HW_ICLSTATUS0R_SST8_BITPOS 8
                             5981 ; 222  |#define HW_ICLSTATUS0R_SST9_BITPOS 9
                             5982 ; 223  |#define HW_ICLSTATUS0R_SST10_BITPOS 10
                             5983 ; 224  |#define HW_ICLSTATUS0R_SST11_BITPOS 11
                             5984 ; 225  |#define HW_ICLSTATUS0R_SST12_BITPOS 12
                             5985 ; 226  |#define HW_ICLSTATUS0R_SST13_BITPOS 13
                             5986 ; 227  |#define HW_ICLSTATUS0R_SST14_BITPOS 14
                             5987 ; 228  |#define HW_ICLSTATUS0R_SST15_BITPOS 15
                             5988 ; 229  |#define HW_ICLSTATUS0R_SST16_BITPOS 16
                             5989 ; 230  |#define HW_ICLSTATUS0R_SST17_BITPOS 17
                             5990 ; 231  |#define HW_ICLSTATUS0R_SST18_BITPOS 18
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 101

M:ADDR CODE           CYCLES LINE SOURCELINE
                             5991 ; 232  |#define HW_ICLSTATUS0R_SST19_BITPOS 19
                             5992 ; 233  |#define HW_ICLSTATUS0R_SST20_BITPOS 20
                             5993 ; 234  |#define HW_ICLSTATUS0R_SST21_BITPOS 21
                             5994 ; 235  |#define HW_ICLSTATUS0R_SST22_BITPOS 22
                             5995 ; 236  |#define HW_ICLSTATUS0R_SST23_BITPOS 23
                             5996 ; 237  |
                             5997 ; 238  |#define HW_ICLSTATUS0R_SST0_SETMASK 1<<HW_ICLSTATUS0R_SST0_BITPOS
                             5998 ; 239  |#define HW_ICLSTATUS0R_SST1_SETMASK 1<<HW_ICLSTATUS0R_SST1_BITPOS
                             5999 ; 240  |#define HW_ICLSTATUS0R_SST2_SETMASK 1<<HW_ICLSTATUS0R_SST2_BITPOS
                             6000 ; 241  |#define HW_ICLSTATUS0R_SST3_SETMASK 1<<HW_ICLSTATUS0R_SST3_BITPOS
                             6001 ; 242  |#define HW_ICLSTATUS0R_SST4_SETMASK 1<<HW_ICLSTATUS0R_SST4_BITPOS
                             6002 ; 243  |#define HW_ICLSTATUS0R_SST5_SETMASK 1<<HW_ICLSTATUS0R_SST5_BITPOS
                             6003 ; 244  |#define HW_ICLSTATUS0R_SST6_SETMASK 1<<HW_ICLSTATUS0R_SST6_BITPOS
                             6004 ; 245  |#define HW_ICLSTATUS0R_SST7_SETMASK 1<<HW_ICLSTATUS0R_SST7_BITPOS
                             6005 ; 246  |#define HW_ICLSTATUS0R_SST8_SETMASK 1<<HW_ICLSTATUS0R_SST8_BITPOS
                             6006 ; 247  |#define HW_ICLSTATUS0R_SST9_SETMASK 1<<HW_ICLSTATUS0R_SST9_BITPOS
                             6007 ; 248  |#define HW_ICLSTATUS0R_SST10_SETMASK 1<<HW_ICLSTATUS0R_SST10_BITPOS
                             6008 ; 249  |#define HW_ICLSTATUS0R_SST11_SETMASK 1<<HW_ICLSTATUS0R_SST11_BITPOS
                             6009 ; 250  |#define HW_ICLSTATUS0R_SST12_SETMASK 1<<HW_ICLSTATUS0R_SST12_BITPOS
                             6010 ; 251  |#define HW_ICLSTATUS0R_SST13_SETMASK 1<<HW_ICLSTATUS0R_SST13_BITPOS
                             6011 ; 252  |#define HW_ICLSTATUS0R_SST14_SETMASK 1<<HW_ICLSTATUS0R_SST14_BITPOS
                             6012 ; 253  |#define HW_ICLSTATUS0R_SST15_SETMASK 1<<HW_ICLSTATUS0R_SST15_BITPOS
                             6013 ; 254  |#define HW_ICLSTATUS0R_SST16_SETMASK 1<<HW_ICLSTATUS0R_SST16_BITPOS
                             6014 ; 255  |#define HW_ICLSTATUS0R_SST17_SETMASK 1<<HW_ICLSTATUS0R_SST17_BITPOS
                             6015 ; 256  |#define HW_ICLSTATUS0R_SST18_SETMASK 1<<HW_ICLSTATUS0R_SST18_BITPOS
                             6016 ; 257  |#define HW_ICLSTATUS0R_SST19_SETMASK 1<<HW_ICLSTATUS0R_SST19_BITPOS
                             6017 ; 258  |#define HW_ICLSTATUS0R_SST20_SETMASK 1<<HW_ICLSTATUS0R_SST20_BITPOS
                             6018 ; 259  |#define HW_ICLSTATUS0R_SST21_SETMASK 1<<HW_ICLSTATUS0R_SST21_BITPOS
                             6019 ; 260  |#define HW_ICLSTATUS0R_SST22_SETMASK 1<<HW_ICLSTATUS0R_SST22_BITPOS
                             6020 ; 261  |#define HW_ICLSTATUS0R_SST23_SETMASK 1<<HW_ICLSTATUS0R_SST23_BITPOS
                             6021 ; 262  |
                             6022 ; 263  |#define HW_ICLSTATUS0R_SST0_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST0_SETMASK
                             6023 ; 264  |#define HW_ICLSTATUS0R_SST1_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST1_SETMASK
                             6024 ; 265  |#define HW_ICLSTATUS0R_SST2_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST2_SETMASK
                             6025 ; 266  |#define HW_ICLSTATUS0R_SST3_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST3_SETMASK
                             6026 ; 267  |#define HW_ICLSTATUS0R_SST4_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST4_SETMASK
                             6027 ; 268  |#define HW_ICLSTATUS0R_SST5_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST5_SETMASK
                             6028 ; 269  |#define HW_ICLSTATUS0R_SST6_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST6_SETMASK
                             6029 ; 270  |#define HW_ICLSTATUS0R_SST7_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST7_SETMASK
                             6030 ; 271  |#define HW_ICLSTATUS0R_SST8_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST8_SETMASK
                             6031 ; 272  |#define HW_ICLSTATUS0R_SST9_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST9_SETMASK
                             6032 ; 273  |#define HW_ICLSTATUS0R_SST10_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST10_SETMASK
                             6033 ; 274  |#define HW_ICLSTATUS0R_SST11_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST11_SETMASK
                             6034 ; 275  |#define HW_ICLSTATUS0R_SST12_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST12_SETMASK
                             6035 ; 276  |#define HW_ICLSTATUS0R_SST13_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST13_SETMASK
                             6036 ; 277  |#define HW_ICLSTATUS0R_SST14_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST14_SETMASK
                             6037 ; 278  |#define HW_ICLSTATUS0R_SST15_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST15_SETMASK
                             6038 ; 279  |#define HW_ICLSTATUS0R_SST16_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST16_SETMASK
                             6039 ; 280  |#define HW_ICLSTATUS0R_SST17_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST17_SETMASK
                             6040 ; 281  |#define HW_ICLSTATUS0R_SST18_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST18_SETMASK
                             6041 ; 282  |#define HW_ICLSTATUS0R_SST19_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST19_SETMASK
                             6042 ; 283  |#define HW_ICLSTATUS0R_SST20_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST20_SETMASK
                             6043 ; 284  |#define HW_ICLSTATUS0R_SST21_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST21_SETMASK
                             6044 ; 285  |#define HW_ICLSTATUS0R_SST22_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST22_SETMASK
                             6045 ; 286  |#define HW_ICLSTATUS0R_SST23_CLRMASK ~(WORD)HW_ICLSTATUS0R_SST23_SETMASK
                             6046 ; 287  |
                             6047 ; 288  |
                             6048 ; 289  |/////////////////////////////////////////////////////////////////////////////////
                             6049 ; 290  |//  Interrupt Collector Status 1 Register (HW_ICLSTATUS1R) Bit Positions
                             6050 ; 291  |typedef union
                             6051 ; 292  |{
                             6052 ; 293  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 102

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6053 ; 294  |        int SST24       :1;
                             6054 ; 295  |        int SST25       :1;
                             6055 ; 296  |        int SST26       :1;
                             6056 ; 297  |        int SST27       :1;
                             6057 ; 298  |        int SST28       :1;
                             6058 ; 299  |        int SST29       :1;
                             6059 ; 300  |        int SST30       :1;
                             6060 ; 301  |        int SST31       :1;
                             6061 ; 302  |        int SST32       :1;
                             6062 ; 303  |        int SST33       :1;
                             6063 ; 304  |    } B;
                             6064 ; 305  |    int I;
                             6065 ; 306  |} iclstatus1_type;
                             6066 ; 307  |#define HW_ICLSTATUS1R  (*(volatile iclstatus1_type _X*) (HW_ICOLL_BASEADDR+3)) /* Interru
                                  pt Priority Register Core */
                             6067 ; 308  |#define HW_ICLSTATUS1R_SST24_BITPOS 0
                             6068 ; 309  |#define HW_ICLSTATUS1R_SST25_BITPOS 1
                             6069 ; 310  |#define HW_ICLSTATUS1R_SST26_BITPOS 2
                             6070 ; 311  |#define HW_ICLSTATUS1R_SST27_BITPOS 3
                             6071 ; 312  |#define HW_ICLSTATUS1R_SST28_BITPOS 4
                             6072 ; 313  |#define HW_ICLSTATUS1R_SST29_BITPOS 5
                             6073 ; 314  |#define HW_ICLSTATUS1R_SST30_BITPOS 6
                             6074 ; 315  |#define HW_ICLSTATUS1R_SST31_BITPOS 7
                             6075 ; 316  |#define HW_ICLSTATUS1R_SST32_BITPOS 8
                             6076 ; 317  |#define HW_ICLSTATUS1R_SST33_BITPOS 9
                             6077 ; 318  |
                             6078 ; 319  |#define HW_ICLSTATUS1R_SST24_SETMASK 1<<HW_ICLSTATUS1R_SST24_BITPOS
                             6079 ; 320  |#define HW_ICLSTATUS1R_SST25_SETMASK 1<<HW_ICLSTATUS1R_SST25_BITPOS
                             6080 ; 321  |#define HW_ICLSTATUS1R_SST26_SETMASK 1<<HW_ICLSTATUS1R_SST26_BITPOS
                             6081 ; 322  |#define HW_ICLSTATUS1R_SST27_SETMASK 1<<HW_ICLSTATUS1R_SST27_BITPOS
                             6082 ; 323  |#define HW_ICLSTATUS1R_SST28_SETMASK 1<<HW_ICLSTATUS1R_SST28_BITPOS
                             6083 ; 324  |#define HW_ICLSTATUS1R_SST29_SETMASK 1<<HW_ICLSTATUS1R_SST29_BITPOS
                             6084 ; 325  |#define HW_ICLSTATUS1R_SST30_SETMASK 1<<HW_ICLSTATUS1R_SST30_BITPOS
                             6085 ; 326  |#define HW_ICLSTATUS1R_SST31_SETMASK 1<<HW_ICLSTATUS1R_SST31_BITPOS
                             6086 ; 327  |#define HW_ICLSTATUS1R_SST32_SETMASK 1<<HW_ICLSTATUS1R_SST32_BITPOS
                             6087 ; 328  |#define HW_ICLSTATUS1R_SST33_SETMASK 1<<HW_ICLSTATUS1R_SST33_BITPOS
                             6088 ; 329  |
                             6089 ; 330  |#define HW_ICLSTATUS1R_SST24_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST24_SETMASK
                             6090 ; 331  |#define HW_ICLSTATUS1R_SST25_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST25_SETMASK
                             6091 ; 332  |#define HW_ICLSTATUS1R_SST26_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST26_SETMASK
                             6092 ; 333  |#define HW_ICLSTATUS1R_SST27_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST27_SETMASK
                             6093 ; 334  |#define HW_ICLSTATUS1R_SST28_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST28_SETMASK
                             6094 ; 335  |#define HW_ICLSTATUS1R_SST29_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST29_SETMASK
                             6095 ; 336  |#define HW_ICLSTATUS1R_SST30_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST30_SETMASK
                             6096 ; 337  |#define HW_ICLSTATUS1R_SST31_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST31_SETMASK
                             6097 ; 338  |#define HW_ICLSTATUS1R_SST32_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST32_SETMASK
                             6098 ; 339  |#define HW_ICLSTATUS1R_SST33_CLRMASK ~(WORD)HW_ICLSTATUS1R_SST33_SETMASK
                             6099 ; 340  |
                             6100 ; 341  |
                             6101 ; 342  |/////////////////////////////////////////////////////////////////////////////////
                             6102 ; 343  |//  Interrupt Collector Priority Defs
                             6103 ; 344  |typedef union
                             6104 ; 345  |{
                             6105 ; 346  |    struct {
                             6106 ; 347  |        unsigned S0P    :3;
                             6107 ; 348  |        unsigned S1P    :3;
                             6108 ; 349  |        unsigned S2P    :3;
                             6109 ; 350  |        unsigned S3P    :3;
                             6110 ; 351  |        unsigned S4P    :3;
                             6111 ; 352  |        unsigned S5P    :3;
                             6112 ; 353  |        unsigned S6P    :3;
                             6113 ; 354  |        unsigned S7P    :3;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 103

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6114 ; 355  |    } B;
                             6115 ; 356  |    int I;
                             6116 ; 357  |
                             6117 ; 358  |} iclprior0_type;
                             6118 ; 359  |
                             6119 ; 360  |#define HW_ICLPRIOR0R   (*(volatile iclprior0_type _X*) (HW_ICOLL_BASEADDR+4)) /* Interrup
                                  t Collector Register 0 Priority   */
                             6120 ; 361  |
                             6121 ; 362  |#define HW_ICLPRIORR_SP_0 0
                             6122 ; 363  |#define HW_ICLPRIORR_SP_1 1
                             6123 ; 364  |#define HW_ICLPRIORR_SP_2 2
                             6124 ; 365  |#define HW_ICLPRIORR_SP_3 3
                             6125 ; 366  |#define HW_ICLPRIORR_SP_4 4
                             6126 ; 367  |#define HW_ICLPRIORR_SP_5 5
                             6127 ; 368  |#define HW_ICLPRIORR_SP_6 6
                             6128 ; 369  |#define HW_ICLPRIORR_SP_7 7
                             6129 ; 370  |
                             6130 ; 371  |
                             6131 ; 372  |/////////////////////////////////////////////////////////////////////////////////
                             6132 ; 373  |//  Interrupt Collector Priority 0 Register (HW_ICLPRIOR0R) Bit Positions
                             6133 ; 374  |#define HW_ICLPRIOR0R_S0P_BITPOS 0
                             6134 ; 375  |#define HW_ICLPRIOR0R_S1P_BITPOS 3
                             6135 ; 376  |#define HW_ICLPRIOR0R_S2P_BITPOS 6
                             6136 ; 377  |#define HW_ICLPRIOR0R_S3P_BITPOS 9
                             6137 ; 378  |#define HW_ICLPRIOR0R_S4P_BITPOS 12
                             6138 ; 379  |#define HW_ICLPRIOR0R_S5P_BITPOS 15
                             6139 ; 380  |#define HW_ICLPRIOR0R_S6P_BITPOS 18
                             6140 ; 381  |#define HW_ICLPRIOR0R_S7P_BITPOS 21
                             6141 ; 382  |
                             6142 ; 383  |#define HW_ICLPRIOR0R_S0P_SETMASK 7<<HW_ICLPRIOR0R_S0P_BITPOS
                             6143 ; 384  |#define HW_ICLPRIOR0R_S1P_SETMASK 7<<HW_ICLPRIOR0R_S1P_BITPOS
                             6144 ; 385  |#define HW_ICLPRIOR0R_S2P_SETMASK 7<<HW_ICLPRIOR0R_S2P_BITPOS
                             6145 ; 386  |#define HW_ICLPRIOR0R_S3P_SETMASK 7<<HW_ICLPRIOR0R_S3P_BITPOS
                             6146 ; 387  |#define HW_ICLPRIOR0R_S4P_SETMASK 7<<HW_ICLPRIOR0R_S4P_BITPOS
                             6147 ; 388  |#define HW_ICLPRIOR0R_S5P_SETMASK 7<<HW_ICLPRIOR0R_S5P_BITPOS
                             6148 ; 389  |#define HW_ICLPRIOR0R_S6P_SETMASK 7<<HW_ICLPRIOR0R_S6P_BITPOS
                             6149 ; 390  |#define HW_ICLPRIOR0R_S7P_SETMASK 7<<HW_ICLPRIOR0R_S7P_BITPOS
                             6150 ; 391  |
                             6151 ; 392  |#define HW_ICLPRIOR0R_S0P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S0P_SETMASK
                             6152 ; 393  |#define HW_ICLPRIOR0R_S1P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S1P_SETMASK
                             6153 ; 394  |#define HW_ICLPRIOR0R_S2P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S2P_SETMASK
                             6154 ; 395  |#define HW_ICLPRIOR0R_S3P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S3P_SETMASK
                             6155 ; 396  |#define HW_ICLPRIOR0R_S4P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S4P_SETMASK
                             6156 ; 397  |#define HW_ICLPRIOR0R_S5P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S5P_SETMASK
                             6157 ; 398  |#define HW_ICLPRIOR0R_S6P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S6P_SETMASK
                             6158 ; 399  |#define HW_ICLPRIOR0R_S7P_CLRMASK ~(WORD)HW_ICLPRIOR0R_S7P_SETMASK
                             6159 ; 400  |
                             6160 ; 401  |
                             6161 ; 402  |/////////////////////////////////////////////////////////////////////////////////
                             6162 ; 403  |//  Interrupt Collector Priority 1 Register (HW_ICLPRIOR1R) Bit Positions
                             6163 ; 404  |typedef union
                             6164 ; 405  |{
                             6165 ; 406  |    struct {
                             6166 ; 407  |        unsigned S8P    :3;
                             6167 ; 408  |        unsigned S9P    :3;
                             6168 ; 409  |        unsigned S10P   :3;
                             6169 ; 410  |        unsigned S11P   :3;
                             6170 ; 411  |        unsigned S12P   :3;
                             6171 ; 412  |        unsigned S13P   :3;
                             6172 ; 413  |        unsigned S14P   :3;
                             6173 ; 414  |        unsigned S15P   :3;
                             6174 ; 415  |    } B;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 104

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6175 ; 416  |    int I;
                             6176 ; 417  |} iclprior1_type;
                             6177 ; 418  |
                             6178 ; 419  |#define HW_ICLPRIOR1R   (*(volatile iclprior1_type _X*) (HW_ICOLL_BASEADDR+5)) /* Interrup
                                  t Collector Register 1 Priority   */
                             6179 ; 420  |
                             6180 ; 421  |#define HW_ICLPRIOR1R_S8P_BITPOS 0
                             6181 ; 422  |#define HW_ICLPRIOR1R_S9P_BITPOS 3
                             6182 ; 423  |#define HW_ICLPRIOR1R_S10P_BITPOS 6
                             6183 ; 424  |#define HW_ICLPRIOR1R_S11P_BITPOS 9
                             6184 ; 425  |#define HW_ICLPRIOR1R_S12P_BITPOS 12
                             6185 ; 426  |#define HW_ICLPRIOR1R_S13P_BITPOS 15
                             6186 ; 427  |#define HW_ICLPRIOR1R_S14P_BITPOS 18
                             6187 ; 428  |#define HW_ICLPRIOR1R_S15P_BITPOS 21
                             6188 ; 429  |
                             6189 ; 430  |#define HW_ICLPRIOR1R_S8P_SETMASK 7<<HW_ICLPRIOR1R_S8P_BITPOS
                             6190 ; 431  |#define HW_ICLPRIOR1R_S9P_SETMASK 7<<HW_ICLPRIOR1R_S9P_BITPOS
                             6191 ; 432  |#define HW_ICLPRIOR1R_S10P_SETMASK 7<<HW_ICLPRIOR1R_S10P_BITPOS
                             6192 ; 433  |#define HW_ICLPRIOR1R_S11P_SETMASK 7<<HW_ICLPRIOR1R_S11P_BITPOS
                             6193 ; 434  |#define HW_ICLPRIOR1R_S12P_SETMASK 7<<HW_ICLPRIOR1R_S12P_BITPOS
                             6194 ; 435  |#define HW_ICLPRIOR1R_S13P_SETMASK 7<<HW_ICLPRIOR1R_S13P_BITPOS
                             6195 ; 436  |#define HW_ICLPRIOR1R_S14P_SETMASK 7<<HW_ICLPRIOR1R_S14P_BITPOS
                             6196 ; 437  |#define HW_ICLPRIOR1R_S15P_SETMASK 7<<HW_ICLPRIOR1R_S15P_BITPOS
                             6197 ; 438  |
                             6198 ; 439  |#define HW_ICLPRIOR1R_S8P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S8P_SETMASK
                             6199 ; 440  |#define HW_ICLPRIOR1R_S9P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S9P_SETMASK
                             6200 ; 441  |#define HW_ICLPRIOR1R_S10P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S10P_SETMASK
                             6201 ; 442  |#define HW_ICLPRIOR1R_S11P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S11P_SETMASK
                             6202 ; 443  |#define HW_ICLPRIOR1R_S12P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S12P_SETMASK
                             6203 ; 444  |#define HW_ICLPRIOR1R_S13P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S13P_SETMASK
                             6204 ; 445  |#define HW_ICLPRIOR1R_S14P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S14P_SETMASK
                             6205 ; 446  |#define HW_ICLPRIOR1R_S15P_CLRMASK ~(WORD)HW_ICLPRIOR1R_S15P_SETMASK
                             6206 ; 447  |
                             6207 ; 448  |
                             6208 ; 449  |/////////////////////////////////////////////////////////////////////////////////
                             6209 ; 450  |//  Interrupt Collector Priority 2 Register (HW_ICLPRI2R) Bit Positions
                             6210 ; 451  |typedef union               /* Interrupt Collector Priority 2 Register      */
                             6211 ; 452  |{
                             6212 ; 453  |    struct {
                             6213 ; 454  |        unsigned S16P   :3;
                             6214 ; 455  |        unsigned S17P   :3;
                             6215 ; 456  |        unsigned S18P   :3;
                             6216 ; 457  |        unsigned S19P   :3;
                             6217 ; 458  |        unsigned S20P   :3;
                             6218 ; 459  |        unsigned S21P   :3;
                             6219 ; 460  |        unsigned S22P   :3;
                             6220 ; 461  |        unsigned S23P   :3;
                             6221 ; 462  |    } B;
                             6222 ; 463  |    int I;
                             6223 ; 464  |} iclprior2_type;
                             6224 ; 465  |#define HW_ICLPRIOR2R   (*(volatile iclprior2_type _X*) (HW_ICOLL_BASEADDR+6)) /* Interrup
                                  t Collector Register 2 Priority   */
                             6225 ; 466  |#define HW_ICLPRIOR2R_S16P_BITPOS 0
                             6226 ; 467  |#define HW_ICLPRIOR2R_S17P_BITPOS 3
                             6227 ; 468  |#define HW_ICLPRIOR2R_S18P_BITPOS 6
                             6228 ; 469  |#define HW_ICLPRIOR2R_S19P_BITPOS 9
                             6229 ; 470  |#define HW_ICLPRIOR2R_S20P_BITPOS 12
                             6230 ; 471  |#define HW_ICLPRIOR2R_S21P_BITPOS 15
                             6231 ; 472  |#define HW_ICLPRIOR2R_S22P_BITPOS 18
                             6232 ; 473  |#define HW_ICLPRIOR2R_S23P_BITPOS 21
                             6233 ; 474  |
                             6234 ; 475  |#define HW_ICLPRIOR2R_S16P_SETMASK 7<<HW_ICLPRIOR2R_S16P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 105

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6235 ; 476  |#define HW_ICLPRIOR2R_S17P_SETMASK 7<<HW_ICLPRIOR2R_S17P_BITPOS
                             6236 ; 477  |#define HW_ICLPRIOR2R_S18P_SETMASK 7<<HW_ICLPRIOR2R_S18P_BITPOS
                             6237 ; 478  |#define HW_ICLPRIOR2R_S19P_SETMASK 7<<HW_ICLPRIOR2R_S19P_BITPOS
                             6238 ; 479  |#define HW_ICLPRIOR2R_S20P_SETMASK 7<<HW_ICLPRIOR2R_S20P_BITPOS
                             6239 ; 480  |#define HW_ICLPRIOR2R_S21P_SETMASK 7<<HW_ICLPRIOR2R_S21P_BITPOS
                             6240 ; 481  |#define HW_ICLPRIOR2R_S22P_SETMASK 7<<HW_ICLPRIOR2R_S22P_BITPOS
                             6241 ; 482  |#define HW_ICLPRIOR2R_S23P_SETMASK 7<<HW_ICLPRIOR2R_S23P_BITPOS
                             6242 ; 483  |
                             6243 ; 484  |#define HW_ICLPRIOR2R_S16P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S16P_SETMASK
                             6244 ; 485  |#define HW_ICLPRIOR2R_S17P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S17P_SETMASK
                             6245 ; 486  |#define HW_ICLPRIOR2R_S18P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S18P_SETMASK
                             6246 ; 487  |#define HW_ICLPRIOR2R_S19P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S19P_SETMASK
                             6247 ; 488  |#define HW_ICLPRIOR2R_S20P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S20P_SETMASK
                             6248 ; 489  |#define HW_ICLPRIOR2R_S21P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S21P_SETMASK
                             6249 ; 490  |#define HW_ICLPRIOR2R_S22P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S22P_SETMASK
                             6250 ; 491  |#define HW_ICLPRIOR2R_S23P_CLRMASK ~(WORD)HW_ICLPRIOR2R_S23P_SETMASK
                             6251 ; 492  |
                             6252 ; 493  |
                             6253 ; 494  |/////////////////////////////////////////////////////////////////////////////////
                             6254 ; 495  |//  Interrupt Collector Priority 3 Register (HW_ICLPRI3R) Bit Positions
                             6255 ; 496  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             6256 ; 497  |{
                             6257 ; 498  |    struct {
                             6258 ; 499  |        unsigned S24P   :3;
                             6259 ; 500  |        unsigned S25P   :3;
                             6260 ; 501  |        unsigned S26P   :3;
                             6261 ; 502  |        unsigned S27P   :3;
                             6262 ; 503  |        unsigned S28P   :3;
                             6263 ; 504  |        unsigned S29P   :3;
                             6264 ; 505  |        unsigned S30P   :3;
                             6265 ; 506  |        unsigned S31P   :3;
                             6266 ; 507  |    } B;
                             6267 ; 508  |    int I;
                             6268 ; 509  |} iclprior3_type;
                             6269 ; 510  |#define HW_ICLPRIOR3R   (*(volatile iclprior3_type _X*) (HW_ICOLL_BASEADDR+7)) /* Interrup
                                  t Collector Register 3 Priority   */
                             6270 ; 511  |
                             6271 ; 512  |#define HW_ICLPRIOR3R_S24P_BITPOS 0
                             6272 ; 513  |#define HW_ICLPRIOR3R_S25P_BITPOS 3
                             6273 ; 514  |#define HW_ICLPRIOR3R_S26P_BITPOS 6
                             6274 ; 515  |#define HW_ICLPRIOR3R_S27P_BITPOS 9
                             6275 ; 516  |#define HW_ICLPRIOR3R_S28P_BITPOS 12
                             6276 ; 517  |#define HW_ICLPRIOR3R_S29P_BITPOS 15
                             6277 ; 518  |#define HW_ICLPRIOR3R_S30P_BITPOS 18
                             6278 ; 519  |#define HW_ICLPRIOR3R_S31P_BITPOS 21
                             6279 ; 520  |
                             6280 ; 521  |#define HW_ICLPRIOR3R_S24P_SETMASK 7<<HW_ICLPRIOR3R_S24P_BITPOS
                             6281 ; 522  |#define HW_ICLPRIOR3R_S25P_SETMASK 7<<HW_ICLPRIOR3R_S25P_BITPOS
                             6282 ; 523  |#define HW_ICLPRIOR3R_S26P_SETMASK 7<<HW_ICLPRIOR3R_S26P_BITPOS
                             6283 ; 524  |#define HW_ICLPRIOR3R_S27P_SETMASK 7<<HW_ICLPRIOR3R_S27P_BITPOS
                             6284 ; 525  |#define HW_ICLPRIOR3R_S28P_SETMASK 7<<HW_ICLPRIOR3R_S28P_BITPOS
                             6285 ; 526  |#define HW_ICLPRIOR3R_S29P_SETMASK 7<<HW_ICLPRIOR3R_S29P_BITPOS
                             6286 ; 527  |#define HW_ICLPRIOR3R_S30P_SETMASK 7<<HW_ICLPRIOR3R_S30P_BITPOS
                             6287 ; 528  |#define HW_ICLPRIOR3R_S31P_SETMASK 7<<HW_ICLPRIOR3R_S31P_BITPOS
                             6288 ; 529  |
                             6289 ; 530  |#define HW_ICLPRIOR3R_S24P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S24P_SETMASK
                             6290 ; 531  |#define HW_ICLPRIOR3R_S25P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S25P_SETMASK
                             6291 ; 532  |#define HW_ICLPRIOR3R_S26P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S26P_SETMASK
                             6292 ; 533  |#define HW_ICLPRIOR3R_S27P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S27P_SETMASK
                             6293 ; 534  |#define HW_ICLPRIOR3R_S28P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S28P_SETMASK
                             6294 ; 535  |#define HW_ICLPRIOR3R_S29P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S29P_SETMASK
                             6295 ; 536  |#define HW_ICLPRIOR3R_S30P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S30P_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 106

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6296 ; 537  |#define HW_ICLPRIOR3R_S31P_CLRMASK ~(WORD)HW_ICLPRIOR3R_S31P_SETMASK
                             6297 ; 538  |
                             6298 ; 539  |
                             6299 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                             6300 ; 541  |//  Interrupt Collector Priority 4 Register (HW_ICLPRI4R) Bit Positions
                             6301 ; 542  |typedef union               /* Interrupt Collector Priority 3 Register      */
                             6302 ; 543  |{
                             6303 ; 544  |    struct {
                             6304 ; 545  |        unsigned S32P   :3;
                             6305 ; 546  |        unsigned S33P   :3;
                             6306 ; 547  |    } B;
                             6307 ; 548  |    int I;
                             6308 ; 549  |} iclprior4_type;
                             6309 ; 550  |#define HW_ICLPRIOR4R (*(volatile iclprior4_type _X*) (HW_ICOLL_BASEADDR+17)) /* Interrupt
                                   Collector Register 4 Priority   */
                             6310 ; 551  |
                             6311 ; 552  |#define HW_ICLPRIOR4R_S32P_BITPOS 0
                             6312 ; 553  |#define HW_ICLPRIOR4R_S33P_BITPOS 3
                             6313 ; 554  |
                             6314 ; 555  |#define HW_ICLPRIOR4R_S32P_SETMASK 7<<HW_ICLPRIOR4R_S32P_BITPOS
                             6315 ; 556  |#define HW_ICLPRIOR4R_S33P_SETMASK 7<<HW_ICLPRIOR4R_S33P_BITPOS
                             6316 ; 557  |
                             6317 ; 558  |#define HW_ICLPRIOR4R_S32P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S32P_SETMASK
                             6318 ; 559  |#define HW_ICLPRIOR4R_S33P_CLRMASK ~(WORD)HW_ICLPRIOR4R_S33P_SETMASK
                             6319 ; 560  |
                             6320 ; 561  |
                             6321 ; 562  |/////////////////////////////////////////////////////////////////////////////////
                             6322 ; 563  |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             6323 ; 564  |typedef union               /* Interrupt Collector Steering 0 Register      */
                             6324 ; 565  |{
                             6325 ; 566  |    struct {
                             6326 ; 567  |        unsigned S0S    :2;
                             6327 ; 568  |        unsigned S1S    :2;
                             6328 ; 569  |        unsigned S2S    :2;
                             6329 ; 570  |        unsigned S3S    :2;
                             6330 ; 571  |        unsigned S4S    :2;
                             6331 ; 572  |        unsigned S5S    :2;
                             6332 ; 573  |        unsigned S6S    :2;
                             6333 ; 574  |        unsigned S7S    :2;
                             6334 ; 575  |        unsigned S8S    :2;
                             6335 ; 576  |        unsigned S9S    :2;
                             6336 ; 577  |        unsigned S10S   :2;
                             6337 ; 578  |        unsigned S11S   :2;
                             6338 ; 579  |    } B;
                             6339 ; 580  |    int I;
                             6340 ; 581  |} iclsteer0_type;
                             6341 ; 582  |#define HW_ICLSTEER0R   (*(volatile iclsteer0_type _X*) (HW_ICOLL_BASEADDR+8)) /* Interrup
                                  t Collector Steering Register 0   */
                             6342 ; 583  |
                             6343 ; 584  |#define HW_ICLSTEER0R_S0P_BITPOS 0
                             6344 ; 585  |#define HW_ICLSTEER0R_S1P_BITPOS 2
                             6345 ; 586  |#define HW_ICLSTEER0R_S2P_BITPOS 4
                             6346 ; 587  |#define HW_ICLSTEER0R_S3P_BITPOS 6
                             6347 ; 588  |#define HW_ICLSTEER0R_S4P_BITPOS 8
                             6348 ; 589  |#define HW_ICLSTEER0R_S5P_BITPOS 10
                             6349 ; 590  |#define HW_ICLSTEER0R_S6P_BITPOS 12
                             6350 ; 591  |#define HW_ICLSTEER0R_S7P_BITPOS 14
                             6351 ; 592  |#define HW_ICLSTEER0R_S8P_BITPOS 16
                             6352 ; 593  |#define HW_ICLSTEER0R_S9P_BITPOS 18
                             6353 ; 594  |#define HW_ICLSTEER0R_S10P_BITPOS 20
                             6354 ; 595  |#define HW_ICLSTEER0R_S11P_BITPOS 22
                             6355 ; 596  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 107

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6356 ; 597  |#define HW_ICLSTEER0R_S0P_SETMASK 3<<HW_ICLSTEER0R_S0P_BITPOS
                             6357 ; 598  |#define HW_ICLSTEER0R_S1P_SETMASK 3<<HW_ICLSTEER0R_S1P_BITPOS
                             6358 ; 599  |#define HW_ICLSTEER0R_S2P_SETMASK 3<<HW_ICLSTEER0R_S2P_BITPOS
                             6359 ; 600  |#define HW_ICLSTEER0R_S3P_SETMASK 3<<HW_ICLSTEER0R_S3P_BITPOS
                             6360 ; 601  |#define HW_ICLSTEER0R_S4P_SETMASK 3<<HW_ICLSTEER0R_S4P_BITPOS
                             6361 ; 602  |#define HW_ICLSTEER0R_S5P_SETMASK 3<<HW_ICLSTEER0R_S5P_BITPOS
                             6362 ; 603  |#define HW_ICLSTEER0R_S6P_SETMASK 3<<HW_ICLSTEER0R_S6P_BITPOS
                             6363 ; 604  |#define HW_ICLSTEER0R_S7P_SETMASK 3<<HW_ICLSTEER0R_S7P_BITPOS
                             6364 ; 605  |#define HW_ICLSTEER0R_S8P_SETMASK 3<<HW_ICLSTEER0R_S8P_BITPOS
                             6365 ; 606  |#define HW_ICLSTEER0R_S9P_SETMASK 3<<HW_ICLSTEER0R_S9P_BITPOS
                             6366 ; 607  |#define HW_ICLSTEER0R_S10P_SETMASK 3<<HW_ICLSTEER0R_S10P_BITPOS
                             6367 ; 608  |#define HW_ICLSTEER0R_S11P_SETMASK 3<<HW_ICLSTEER0R_S11P_BITPOS
                             6368 ; 609  |
                             6369 ; 610  |#define HW_ICLSTEER0R_S0P_CLRMASK ~(WORD)HW_ICLSTEER0R_S0P_SETMASK
                             6370 ; 611  |#define HW_ICLSTEER0R_S1P_CLRMASK ~(WORD)HW_ICLSTEER0R_S1P_SETMASK
                             6371 ; 612  |#define HW_ICLSTEER0R_S2P_CLRMASK ~(WORD)HW_ICLSTEER0R_S2P_SETMASK
                             6372 ; 613  |#define HW_ICLSTEER0R_S3P_CLRMASK ~(WORD)HW_ICLSTEER0R_S3P_SETMASK
                             6373 ; 614  |#define HW_ICLSTEER0R_S4P_CLRMASK ~(WORD)HW_ICLSTEER0R_S4P_SETMASK
                             6374 ; 615  |#define HW_ICLSTEER0R_S5P_CLRMASK ~(WORD)HW_ICLSTEER0R_S5P_SETMASK
                             6375 ; 616  |#define HW_ICLSTEER0R_S6P_CLRMASK ~(WORD)HW_ICLSTEER0R_S6P_SETMASK
                             6376 ; 617  |#define HW_ICLSTEER0R_S7P_CLRMASK ~(WORD)HW_ICLSTEER0R_S7P_SETMASK
                             6377 ; 618  |#define HW_ICLSTEER0R_S8P_CLRMASK ~(WORD)HW_ICLSTEER0R_S8P_SETMASK
                             6378 ; 619  |#define HW_ICLSTEER0R_S9P_CLRMASK ~(WORD)HW_ICLSTEER0R_S9P_SETMASK
                             6379 ; 620  |#define HW_ICLSTEER0R_S10P_CLRMASK ~(WORD)HW_ICLSTEER0R_S10P_SETMASK
                             6380 ; 621  |#define HW_ICLSTEER0R_S11P_CLRMASK ~(WORD)HW_ICLSTEER0R_S11P_SETMASK
                             6381 ; 622  |
                             6382 ; 623  |
                             6383 ; 624  |/////////////////////////////////////////////////////////////////////////////////
                             6384 ; 625  |//  Interrupt Collector Steering 1 Register (HW_ICLSTEER1R) Bit Positions
                             6385 ; 626  |typedef union               /* Interrupt Collector Steering 1 Register      */
                             6386 ; 627  |{
                             6387 ; 628  |    struct {
                             6388 ; 629  |        unsigned S12S   :2;
                             6389 ; 630  |        unsigned S13S   :2;
                             6390 ; 631  |        unsigned S14S   :2;
                             6391 ; 632  |        unsigned S15S   :2;
                             6392 ; 633  |        unsigned S16S   :2;
                             6393 ; 634  |        unsigned S17S   :2;
                             6394 ; 635  |        unsigned S18S   :2;
                             6395 ; 636  |        unsigned S19S   :2;
                             6396 ; 637  |        unsigned S20S   :2;
                             6397 ; 638  |        unsigned S21S   :2;
                             6398 ; 639  |        unsigned S22S   :2;
                             6399 ; 640  |        unsigned S23S   :2;
                             6400 ; 641  |    } B;
                             6401 ; 642  |    int I;
                             6402 ; 643  |} iclsteer1_type;
                             6403 ; 644  |#define HW_ICLSTEER1R   (*(volatile iclsteer1_type _X*) (HW_ICOLL_BASEADDR+9)) /* Interrup
                                  t Collector Steering Register 1   */
                             6404 ; 645  |#define HW_ICLSTEER1R_S12P_BITPOS 0
                             6405 ; 646  |#define HW_ICLSTEER1R_S13P_BITPOS 2
                             6406 ; 647  |#define HW_ICLSTEER1R_S14P_BITPOS 4
                             6407 ; 648  |#define HW_ICLSTEER1R_S15P_BITPOS 6
                             6408 ; 649  |#define HW_ICLSTEER1R_S16P_BITPOS 8
                             6409 ; 650  |#define HW_ICLSTEER1R_S17P_BITPOS 10
                             6410 ; 651  |#define HW_ICLSTEER1R_S18P_BITPOS 12
                             6411 ; 652  |#define HW_ICLSTEER1R_S19P_BITPOS 14
                             6412 ; 653  |#define HW_ICLSTEER1R_S20P_BITPOS 16
                             6413 ; 654  |#define HW_ICLSTEER1R_S21P_BITPOS 18
                             6414 ; 655  |#define HW_ICLSTEER1R_S22P_BITPOS 20
                             6415 ; 656  |#define HW_ICLSTEER1R_S23P_BITPOS 22
                             6416 ; 657  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 108

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6417 ; 658  |#define HW_ICLSTEER1R_S12P_SETMASK 3<<HW_ICLSTEER1R_S12P_BITPOS
                             6418 ; 659  |#define HW_ICLSTEER1R_S13P_SETMASK 3<<HW_ICLSTEER1R_S13P_BITPOS
                             6419 ; 660  |#define HW_ICLSTEER1R_S14P_SETMASK 3<<HW_ICLSTEER1R_S14P_BITPOS
                             6420 ; 661  |#define HW_ICLSTEER1R_S15P_SETMASK 3<<HW_ICLSTEER1R_S15P_BITPOS
                             6421 ; 662  |#define HW_ICLSTEER1R_S16P_SETMASK 3<<HW_ICLSTEER1R_S16P_BITPOS
                             6422 ; 663  |#define HW_ICLSTEER1R_S17P_SETMASK 3<<HW_ICLSTEER1R_S17P_BITPOS
                             6423 ; 664  |#define HW_ICLSTEER1R_S18P_SETMASK 3<<HW_ICLSTEER1R_S18P_BITPOS
                             6424 ; 665  |#define HW_ICLSTEER1R_S19P_SETMASK 3<<HW_ICLSTEER1R_S19P_BITPOS
                             6425 ; 666  |#define HW_ICLSTEER1R_S20P_SETMASK 3<<HW_ICLSTEER1R_S20P_BITPOS
                             6426 ; 667  |#define HW_ICLSTEER1R_S21P_SETMASK 3<<HW_ICLSTEER1R_S21P_BITPOS
                             6427 ; 668  |#define HW_ICLSTEER1R_S22P_SETMASK 3<<HW_ICLSTEER1R_S22P_BITPOS
                             6428 ; 669  |#define HW_ICLSTEER1R_S23P_SETMASK 3<<HW_ICLSTEER1R_S23P_BITPOS
                             6429 ; 670  |
                             6430 ; 671  |#define HW_ICLSTEER1R_S12P_CLRMASK ~(WORD)HW_ICLSTEER1R_S12P_SETMASK
                             6431 ; 672  |#define HW_ICLSTEER1R_S13P_CLRMASK ~(WORD)HW_ICLSTEER1R_S13P_SETMASK
                             6432 ; 673  |#define HW_ICLSTEER1R_S14P_CLRMASK ~(WORD)HW_ICLSTEER1R_S14P_SETMASK
                             6433 ; 674  |#define HW_ICLSTEER1R_S15P_CLRMASK ~(WORD)HW_ICLSTEER1R_S15P_SETMASK
                             6434 ; 675  |#define HW_ICLSTEER1R_S16P_CLRMASK ~(WORD)HW_ICLSTEER1R_S16P_SETMASK
                             6435 ; 676  |#define HW_ICLSTEER1R_S17P_CLRMASK ~(WORD)HW_ICLSTEER1R_S17P_SETMASK
                             6436 ; 677  |#define HW_ICLSTEER1R_S18P_CLRMASK ~(WORD)HW_ICLSTEER1R_S18P_SETMASK
                             6437 ; 678  |#define HW_ICLSTEER1R_S19P_CLRMASK ~(WORD)HW_ICLSTEER1R_S19P_SETMASK
                             6438 ; 679  |#define HW_ICLSTEER1R_S20P_CLRMASK ~(WORD)HW_ICLSTEER1R_S20P_SETMASK
                             6439 ; 680  |#define HW_ICLSTEER1R_S21P_CLRMASK ~(WORD)HW_ICLSTEER1R_S21P_SETMASK
                             6440 ; 681  |#define HW_ICLSTEER1R_S22P_CLRMASK ~(WORD)HW_ICLSTEER1R_S22P_SETMASK
                             6441 ; 682  |#define HW_ICLSTEER1R_S23P_CLRMASK ~(WORD)HW_ICLSTEER1R_S23P_SETMASK
                             6442 ; 683  |
                             6443 ; 684  |
                             6444 ; 685  |/////////////////////////////////////////////////////////////////////////////////
                             6445 ; 686  |//  Interrupt Collector Steering 2 Register (HW_ICLSTEER2R) Bit Positions
                             6446 ; 687  |typedef union               /* Interrupt Collector Steering 2 Register      */
                             6447 ; 688  |{
                             6448 ; 689  |    struct {
                             6449 ; 690  |        unsigned S24S   :2;
                             6450 ; 691  |        unsigned S25S   :2;
                             6451 ; 692  |        unsigned S26S   :2;
                             6452 ; 693  |        unsigned S27S   :2;
                             6453 ; 694  |        unsigned S28S   :2;
                             6454 ; 695  |        unsigned S29S   :2;
                             6455 ; 696  |        unsigned S30S   :2;
                             6456 ; 697  |        unsigned S31S   :2;
                             6457 ; 698  |        unsigned S32S   :2;
                             6458 ; 699  |        unsigned S33S   :2;
                             6459 ; 700  |    } B;
                             6460 ; 701  |    int I;
                             6461 ; 702  |} iclsteer2_type;
                             6462 ; 703  |#define HW_ICLSTEER2R   (*(volatile iclsteer2_type _X*) (HW_ICOLL_BASEADDR+10)) /* Interru
                                  pt Collector Steering Register 2  */
                             6463 ; 704  |
                             6464 ; 705  |#define HW_ICLSTEER2R_S24P_BITPOS 0
                             6465 ; 706  |#define HW_ICLSTEER2R_S25P_BITPOS 2
                             6466 ; 707  |#define HW_ICLSTEER2R_S26P_BITPOS 4
                             6467 ; 708  |#define HW_ICLSTEER2R_S27P_BITPOS 6
                             6468 ; 709  |#define HW_ICLSTEER2R_S28P_BITPOS 8
                             6469 ; 710  |#define HW_ICLSTEER2R_S29P_BITPOS 10
                             6470 ; 711  |#define HW_ICLSTEER2R_S30P_BITPOS 12
                             6471 ; 712  |#define HW_ICLSTEER2R_S31P_BITPOS 14
                             6472 ; 713  |#define HW_ICLSTEER2R_S32P_BITPOS 16
                             6473 ; 714  |#define HW_ICLSTEER2R_S33P_BITPOS 18
                             6474 ; 715  |
                             6475 ; 716  |#define HW_ICLSTEER2R_S24P_SETMASK 3<<HW_ICLSTEER2R_S24P_BITPOS
                             6476 ; 717  |#define HW_ICLSTEER2R_S25P_SETMASK 3<<HW_ICLSTEER2R_S25P_BITPOS
                             6477 ; 718  |#define HW_ICLSTEER2R_S26P_SETMASK 3<<HW_ICLSTEER2R_S26P_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 109

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6478 ; 719  |#define HW_ICLSTEER2R_S27P_SETMASK 3<<HW_ICLSTEER2R_S27P_BITPOS
                             6479 ; 720  |#define HW_ICLSTEER2R_S28P_SETMASK 3<<HW_ICLSTEER2R_S28P_BITPOS
                             6480 ; 721  |#define HW_ICLSTEER2R_S29P_SETMASK 3<<HW_ICLSTEER2R_S29P_BITPOS
                             6481 ; 722  |#define HW_ICLSTEER2R_S30P_SETMASK 3<<HW_ICLSTEER2R_S30P_BITPOS
                             6482 ; 723  |#define HW_ICLSTEER2R_S31P_SETMASK 3<<HW_ICLSTEER2R_S31P_BITPOS
                             6483 ; 724  |#define HW_ICLSTEER2R_S32P_SETMASK 3<<HW_ICLSTEER2R_S32P_BITPOS
                             6484 ; 725  |#define HW_ICLSTEER2R_S33P_SETMASK 3<<HW_ICLSTEER2R_S33P_BITPOS
                             6485 ; 726  |
                             6486 ; 727  |#define HW_ICLSTEER2R_S24P_CLRMASK ~(WORD)HW_ICLSTEER2R_S24P_SETMASK
                             6487 ; 728  |#define HW_ICLSTEER2R_S25P_CLRMASK ~(WORD)HW_ICLSTEER2R_S25P_SETMASK
                             6488 ; 729  |#define HW_ICLSTEER2R_S26P_CLRMASK ~(WORD)HW_ICLSTEER2R_S26P_SETMASK
                             6489 ; 730  |#define HW_ICLSTEER2R_S27P_CLRMASK ~(WORD)HW_ICLSTEER2R_S27P_SETMASK
                             6490 ; 731  |#define HW_ICLSTEER2R_S28P_CLRMASK ~(WORD)HW_ICLSTEER2R_S28P_SETMASK
                             6491 ; 732  |#define HW_ICLSTEER2R_S29P_CLRMASK ~(WORD)HW_ICLSTEER2R_S29P_SETMASK
                             6492 ; 733  |#define HW_ICLSTEER2R_S30P_CLRMASK ~(WORD)HW_ICLSTEER2R_S30P_SETMASK
                             6493 ; 734  |#define HW_ICLSTEER2R_S31P_CLRMASK ~(WORD)HW_ICLSTEER2R_S31P_SETMASK
                             6494 ; 735  |#define HW_ICLSTEER2R_S32P_CLRMASK ~(WORD)HW_ICLSTEER2R_S32P_SETMASK
                             6495 ; 736  |#define HW_ICLSTEER2R_S33P_CLRMASK ~(WORD)HW_ICLSTEER2R_S33P_SETMASK
                             6496 ; 737  |
                             6497 ; 738  |
                             6498 ; 739  |/////////////////////////////////////////////////////////////////////////////////
                             6499 ; 740  |//  Interrupt Collector Debug Force 0 Register (HW_ICLFORCE0R) Bit Positions
                             6500 ; 741  |typedef union               /* Interrupt Collector Debug Force 0 Register       */
                             6501 ; 742  |{
                             6502 ; 743  |    struct {
                             6503 ; 744  |        int S0FV        :1;
                             6504 ; 745  |        int S1FV        :1;
                             6505 ; 746  |        int S2FV        :1;
                             6506 ; 747  |        int S3FV        :1;
                             6507 ; 748  |        int S4FV        :1;
                             6508 ; 749  |        int S5FV        :1;
                             6509 ; 750  |        int S6FV        :1;
                             6510 ; 751  |        int S7FV        :1;
                             6511 ; 752  |        int S8FV        :1;
                             6512 ; 753  |        int S9FV        :1;
                             6513 ; 754  |        int S10FV       :1;
                             6514 ; 755  |        int S11FV       :1;
                             6515 ; 756  |        int S12FV       :1;
                             6516 ; 757  |        int S13FV       :1;
                             6517 ; 758  |        int S14FV       :1;
                             6518 ; 759  |        int S15FV       :1;
                             6519 ; 760  |        int S16FV       :1;
                             6520 ; 761  |        int S17FV       :1;
                             6521 ; 762  |        int S18FV       :1;
                             6522 ; 763  |        int S19FV       :1;
                             6523 ; 764  |        int S20FV       :1;
                             6524 ; 765  |        int S21FV       :1;
                             6525 ; 766  |        int S22FV       :1;
                             6526 ; 767  |        int S23FV       :1;
                             6527 ; 768  |    } B;
                             6528 ; 769  |    int I;
                             6529 ; 770  |} iclforce0_type;
                             6530 ; 771  |#define HW_ICLFORCE0R   (*(volatile iclforce0_type _X*) (HW_ICOLL_BASEADDR+11)) /* Interru
                                  pt Collector Debug Force Register 0   */
                             6531 ; 772  |#define HW_ICLFORCE0R_S0FV_BITPOS 0
                             6532 ; 773  |#define HW_ICLFORCE0R_S1FV_BITPOS 1
                             6533 ; 774  |#define HW_ICLFORCE0R_S2FV_BITPOS 2
                             6534 ; 775  |#define HW_ICLFORCE0R_S3FV_BITPOS 3
                             6535 ; 776  |#define HW_ICLFORCE0R_S4FV_BITPOS 4
                             6536 ; 777  |#define HW_ICLFORCE0R_S5FV_BITPOS 5
                             6537 ; 778  |#define HW_ICLFORCE0R_S6FV_BITPOS 6
                             6538 ; 779  |#define HW_ICLFORCE0R_S7FV_BITPOS 7
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 110

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6539 ; 780  |#define HW_ICLFORCE0R_S8FV_BITPOS 8
                             6540 ; 781  |#define HW_ICLFORCE0R_S9FV_BITPOS 9
                             6541 ; 782  |#define HW_ICLFORCE0R_S10FV_BITPOS 10
                             6542 ; 783  |#define HW_ICLFORCE0R_S11FV_BITPOS 11
                             6543 ; 784  |#define HW_ICLFORCE0R_S12FV_BITPOS 12
                             6544 ; 785  |#define HW_ICLFORCE0R_S13FV_BITPOS 13
                             6545 ; 786  |#define HW_ICLFORCE0R_S14FV_BITPOS 14
                             6546 ; 787  |#define HW_ICLFORCE0R_S15FV_BITPOS 15
                             6547 ; 788  |#define HW_ICLFORCE0R_S16FV_BITPOS 16
                             6548 ; 789  |#define HW_ICLFORCE0R_S17FV_BITPOS 17
                             6549 ; 790  |#define HW_ICLFORCE0R_S18FV_BITPOS 18
                             6550 ; 791  |#define HW_ICLFORCE0R_S19FV_BITPOS 19
                             6551 ; 792  |#define HW_ICLFORCE0R_S20FV_BITPOS 20
                             6552 ; 793  |#define HW_ICLFORCE0R_S21FV_BITPOS 21
                             6553 ; 794  |#define HW_ICLFORCE0R_S22FV_BITPOS 22
                             6554 ; 795  |#define HW_ICLFORCE0R_S23FV_BITPOS 23
                             6555 ; 796  |
                             6556 ; 797  |#define HW_ICLFORCE0R_S0FV_SETMASK 1<<HW_ICLFORCE0R_S0FV_BITPOS
                             6557 ; 798  |#define HW_ICLFORCE0R_S1FV_SETMASK 1<<HW_ICLFORCE0R_S1FV_BITPOS
                             6558 ; 799  |#define HW_ICLFORCE0R_S2FV_SETMASK 1<<HW_ICLFORCE0R_S2FV_BITPOS
                             6559 ; 800  |#define HW_ICLFORCE0R_S3FV_SETMASK 1<<HW_ICLFORCE0R_S3FV_BITPOS
                             6560 ; 801  |#define HW_ICLFORCE0R_S4FV_SETMASK 1<<HW_ICLFORCE0R_S4FV_BITPOS
                             6561 ; 802  |#define HW_ICLFORCE0R_S5FV_SETMASK 1<<HW_ICLFORCE0R_S5FV_BITPOS
                             6562 ; 803  |#define HW_ICLFORCE0R_S6FV_SETMASK 1<<HW_ICLFORCE0R_S6FV_BITPOS
                             6563 ; 804  |#define HW_ICLFORCE0R_S7FV_SETMASK 1<<HW_ICLFORCE0R_S7FV_BITPOS
                             6564 ; 805  |#define HW_ICLFORCE0R_S8FV_SETMASK 1<<HW_ICLFORCE0R_S8FV_BITPOS
                             6565 ; 806  |#define HW_ICLFORCE0R_S9FV_SETMASK 1<<HW_ICLFORCE0R_S9FV_BITPOS
                             6566 ; 807  |#define HW_ICLFORCE0R_S10FV_SETMASK 1<<HW_ICLFORCE0R_S10FV_BITPOS
                             6567 ; 808  |#define HW_ICLFORCE0R_S11FV_SETMASK 1<<HW_ICLFORCE0R_S11FV_BITPOS
                             6568 ; 809  |#define HW_ICLFORCE0R_S12FV_SETMASK 1<<HW_ICLFORCE0R_S12FV_BITPOS
                             6569 ; 810  |#define HW_ICLFORCE0R_S13FV_SETMASK 1<<HW_ICLFORCE0R_S13FV_BITPOS
                             6570 ; 811  |#define HW_ICLFORCE0R_S14FV_SETMASK 1<<HW_ICLFORCE0R_S14FV_BITPOS
                             6571 ; 812  |#define HW_ICLFORCE0R_S15FV_SETMASK 1<<HW_ICLFORCE0R_S15FV_BITPOS
                             6572 ; 813  |#define HW_ICLFORCE0R_S16FV_SETMASK 1<<HW_ICLFORCE0R_S16FV_BITPOS
                             6573 ; 814  |#define HW_ICLFORCE0R_S17FV_SETMASK 1<<HW_ICLFORCE0R_S17FV_BITPOS
                             6574 ; 815  |#define HW_ICLFORCE0R_S18FV_SETMASK 1<<HW_ICLFORCE0R_S18FV_BITPOS
                             6575 ; 816  |#define HW_ICLFORCE0R_S19FV_SETMASK 1<<HW_ICLFORCE0R_S19FV_BITPOS
                             6576 ; 817  |#define HW_ICLFORCE0R_S20FV_SETMASK 1<<HW_ICLFORCE0R_S20FV_BITPOS
                             6577 ; 818  |#define HW_ICLFORCE0R_S21FV_SETMASK 1<<HW_ICLFORCE0R_S21FV_BITPOS
                             6578 ; 819  |#define HW_ICLFORCE0R_S22FV_SETMASK 1<<HW_ICLFORCE0R_S22FV_BITPOS
                             6579 ; 820  |#define HW_ICLFORCE0R_S23FV_SETMASK 1<<HW_ICLFORCE0R_S23FV_BITPOS
                             6580 ; 821  |
                             6581 ; 822  |#define HW_ICLFORCE0R_S0FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S0FV_SETMASK
                             6582 ; 823  |#define HW_ICLFORCE0R_S1FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S1FV_SETMASK
                             6583 ; 824  |#define HW_ICLFORCE0R_S2FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S2FV_SETMASK
                             6584 ; 825  |#define HW_ICLFORCE0R_S3FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S3FV_SETMASK
                             6585 ; 826  |#define HW_ICLFORCE0R_S4FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S4FV_SETMASK
                             6586 ; 827  |#define HW_ICLFORCE0R_S5FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S5FV_SETMASK
                             6587 ; 828  |#define HW_ICLFORCE0R_S6FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S6FV_SETMASK
                             6588 ; 829  |#define HW_ICLFORCE0R_S7FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S7FV_SETMASK
                             6589 ; 830  |#define HW_ICLFORCE0R_S8FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S8FV_SETMASK
                             6590 ; 831  |#define HW_ICLFORCE0R_S9FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S9FV_SETMASK
                             6591 ; 832  |#define HW_ICLFORCE0R_S10FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S10FV_SETMASK
                             6592 ; 833  |#define HW_ICLFORCE0R_S11FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S11FV_SETMASK
                             6593 ; 834  |#define HW_ICLFORCE0R_S12FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S12FV_SETMASK
                             6594 ; 835  |#define HW_ICLFORCE0R_S13FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S13FV_SETMASK
                             6595 ; 836  |#define HW_ICLFORCE0R_S14FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S14FV_SETMASK
                             6596 ; 837  |#define HW_ICLFORCE0R_S15FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S15FV_SETMASK
                             6597 ; 838  |#define HW_ICLFORCE0R_S16FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S16FV_SETMASK
                             6598 ; 839  |#define HW_ICLFORCE0R_S17FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S17FV_SETMASK
                             6599 ; 840  |#define HW_ICLFORCE0R_S18FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S18FV_SETMASK
                             6600 ; 841  |#define HW_ICLFORCE0R_S19FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S19FV_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 111

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6601 ; 842  |#define HW_ICLFORCE0R_S20FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S20FV_SETMASK
                             6602 ; 843  |#define HW_ICLFORCE0R_S21FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S21FV_SETMASK
                             6603 ; 844  |#define HW_ICLFORCE0R_S22FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S22FV_SETMASK
                             6604 ; 845  |#define HW_ICLFORCE0R_S23FV_CLRMASK ~(WORD)HW_ICLFORCE0R_S23FV_SETMASK
                             6605 ; 846  |
                             6606 ; 847  |
                             6607 ; 848  |/////////////////////////////////////////////////////////////////////////////////
                             6608 ; 849  |//  Interrupt Collector Debug Force 1 Register (HW_ICLFORCE1R) Bit Positions
                             6609 ; 850  |typedef union               /* Interrupt Debug Force 1 Register     */
                             6610 ; 851  |{
                             6611 ; 852  |    struct {
                             6612 ; 853  |        int S24FV       :1;
                             6613 ; 854  |        int S25FV       :1;
                             6614 ; 855  |        int S26FV       :1;
                             6615 ; 856  |        int S27FV       :1;
                             6616 ; 857  |        int S28FV       :1;
                             6617 ; 858  |        int S29FV       :1;
                             6618 ; 859  |        int S30FV       :1;
                             6619 ; 860  |        int S31FV       :1;
                             6620 ; 861  |        int S32FV       :1;
                             6621 ; 862  |        int S33FV       :1;
                             6622 ; 863  |    } B;
                             6623 ; 864  |    int I;
                             6624 ; 865  |} iclforce1_type;
                             6625 ; 866  |#define HW_ICLFORCE1R   (*(volatile iclforce1_type _X*) (HW_ICOLL_BASEADDR+12)) /* Interru
                                  pt Collector Debug Force Register 1   */
                             6626 ; 867  |
                             6627 ; 868  |#define HW_ICLFORCE1R_S24FV_BITPOS 0
                             6628 ; 869  |#define HW_ICLFORCE1R_S25FV_BITPOS 1
                             6629 ; 870  |#define HW_ICLFORCE1R_S26FV_BITPOS 2
                             6630 ; 871  |#define HW_ICLFORCE1R_S27FV_BITPOS 3
                             6631 ; 872  |#define HW_ICLFORCE1R_S28FV_BITPOS 4
                             6632 ; 873  |#define HW_ICLFORCE1R_S29FV_BITPOS 5
                             6633 ; 874  |#define HW_ICLFORCE1R_S30FV_BITPOS 6
                             6634 ; 875  |#define HW_ICLFORCE1R_S31FV_BITPOS 7
                             6635 ; 876  |#define HW_ICLFORCE1R_S32FV_BITPOS 8
                             6636 ; 877  |#define HW_ICLFORCE1R_S33FV_BITPOS 9
                             6637 ; 878  |
                             6638 ; 879  |#define HW_ICLFORCE1R_S24FV_SETMASK 1<<HW_ICLFORCE1R_S24FV_BITPOS
                             6639 ; 880  |#define HW_ICLFORCE1R_S25FV_SETMASK 1<<HW_ICLFORCE1R_S25FV_BITPOS
                             6640 ; 881  |#define HW_ICLFORCE1R_S26FV_SETMASK 1<<HW_ICLFORCE1R_S26FV_BITPOS
                             6641 ; 882  |#define HW_ICLFORCE1R_S27FV_SETMASK 1<<HW_ICLFORCE1R_S27FV_BITPOS
                             6642 ; 883  |#define HW_ICLFORCE1R_S28FV_SETMASK 1<<HW_ICLFORCE1R_S28FV_BITPOS
                             6643 ; 884  |#define HW_ICLFORCE1R_S29FV_SETMASK 1<<HW_ICLFORCE1R_S29FV_BITPOS
                             6644 ; 885  |#define HW_ICLFORCE1R_S30FV_SETMASK 1<<HW_ICLFORCE1R_S30FV_BITPOS
                             6645 ; 886  |#define HW_ICLFORCE1R_S31FV_SETMASK 1<<HW_ICLFORCE1R_S31FV_BITPOS
                             6646 ; 887  |#define HW_ICLFORCE1R_S32FV_SETMASK 1<<HW_ICLFORCE1R_S32FV_BITPOS
                             6647 ; 888  |#define HW_ICLFORCE1R_S33FV_SETMASK 1<<HW_ICLFORCE1R_S33FV_BITPOS
                             6648 ; 889  |
                             6649 ; 890  |#define HW_ICLFORCE1R_S24FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S24FV_SETMASK
                             6650 ; 891  |#define HW_ICLFORCE1R_S25FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S25FV_SETMASK
                             6651 ; 892  |#define HW_ICLFORCE1R_S26FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S26FV_SETMASK
                             6652 ; 893  |#define HW_ICLFORCE1R_S27FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S27FV_SETMASK
                             6653 ; 894  |#define HW_ICLFORCE1R_S28FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S28FV_SETMASK
                             6654 ; 895  |#define HW_ICLFORCE1R_S29FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S29FV_SETMASK
                             6655 ; 896  |#define HW_ICLFORCE1R_S30FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S30FV_SETMASK
                             6656 ; 897  |#define HW_ICLFORCE1R_S31FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S31FV_SETMASK
                             6657 ; 898  |#define HW_ICLFORCE1R_S32FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S32FV_SETMASK
                             6658 ; 899  |#define HW_ICLFORCE1R_S33FV_CLRMASK ~(WORD)HW_ICLFORCE1R_S33FV_SETMASK
                             6659 ; 900  |
                             6660 ; 901  |
                             6661 ; 902  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 112

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6662 ; 903  |//  Interrupt Collector Force Enable 0 Register (HW_ICLFENABLE0R) Bit Positions
                             6663 ; 904  |typedef union               /* Interrupt Collector Force Enable 0 Register      */
                             6664 ; 905  |{
                             6665 ; 906  |    struct {
                             6666 ; 907  |        int S0FE        :1;
                             6667 ; 908  |        int S1FE        :1;
                             6668 ; 909  |        int S2FE        :1;
                             6669 ; 910  |        int S3FE        :1;
                             6670 ; 911  |        int S4FE        :1;
                             6671 ; 912  |        int S5FE        :1;
                             6672 ; 913  |        int S6FE        :1;
                             6673 ; 914  |        int S7FE        :1;
                             6674 ; 915  |        int S8FE        :1;
                             6675 ; 916  |        int S9FE        :1;
                             6676 ; 917  |        int S10FE       :1;
                             6677 ; 918  |        int S11FE       :1;
                             6678 ; 919  |        int S12FE       :1;
                             6679 ; 920  |        int S13FE       :1;
                             6680 ; 921  |        int S14FE       :1;
                             6681 ; 922  |        int S15FE       :1;
                             6682 ; 923  |        int S16FE       :1;
                             6683 ; 924  |        int S17FE       :1;
                             6684 ; 925  |        int S18FE       :1;
                             6685 ; 926  |        int S19FE       :1;
                             6686 ; 927  |        int S20FE       :1;
                             6687 ; 928  |        int S21FE       :1;
                             6688 ; 929  |        int S22FE       :1;
                             6689 ; 930  |        int S23FE       :1;
                             6690 ; 931  |    } B;
                             6691 ; 932  |    int I;
                             6692 ; 933  |} iclfenable0_type;
                             6693 ; 934  |#define HW_ICLFENABLE0R (*(volatile iclfenable0_type _X*) (HW_ICOLL_BASEADDR+13)) /* Inter
                                  rupt Collector Force Enable Register 0    */
                             6694 ; 935  |
                             6695 ; 936  |#define HW_ICLFENABLE0R_S0FE_BITPOS 0
                             6696 ; 937  |#define HW_ICLFENABLE0R_S1FE_BITPOS 1
                             6697 ; 938  |#define HW_ICLFENABLE0R_S2FE_BITPOS 2
                             6698 ; 939  |#define HW_ICLFENABLE0R_S3FE_BITPOS 3
                             6699 ; 940  |#define HW_ICLFENABLE0R_S4FE_BITPOS 4
                             6700 ; 941  |#define HW_ICLFENABLE0R_S5FE_BITPOS 5
                             6701 ; 942  |#define HW_ICLFENABLE0R_S6FE_BITPOS 6
                             6702 ; 943  |#define HW_ICLFENABLE0R_S7FE_BITPOS 7
                             6703 ; 944  |#define HW_ICLFENABLE0R_S8FE_BITPOS 8
                             6704 ; 945  |#define HW_ICLFENABLE0R_S9FE_BITPOS 9
                             6705 ; 946  |#define HW_ICLFENABLE0R_S10FE_BITPOS 10
                             6706 ; 947  |#define HW_ICLFENABLE0R_S11FE_BITPOS 11
                             6707 ; 948  |#define HW_ICLFENABLE0R_S12FE_BITPOS 12
                             6708 ; 949  |#define HW_ICLFENABLE0R_S13FE_BITPOS 13
                             6709 ; 950  |#define HW_ICLFENABLE0R_S14FE_BITPOS 14
                             6710 ; 951  |#define HW_ICLFENABLE0R_S15FE_BITPOS 15
                             6711 ; 952  |#define HW_ICLFENABLE0R_S16FE_BITPOS 16
                             6712 ; 953  |#define HW_ICLFENABLE0R_S17FE_BITPOS 17
                             6713 ; 954  |#define HW_ICLFENABLE0R_S18FE_BITPOS 18
                             6714 ; 955  |#define HW_ICLFENABLE0R_S19FE_BITPOS 19
                             6715 ; 956  |#define HW_ICLFENABLE0R_S20FE_BITPOS 20
                             6716 ; 957  |#define HW_ICLFENABLE0R_S21FE_BITPOS 21
                             6717 ; 958  |#define HW_ICLFENABLE0R_S22FE_BITPOS 22
                             6718 ; 959  |#define HW_ICLFENABLE0R_S23FE_BITPOS 23
                             6719 ; 960  |
                             6720 ; 961  |#define HW_ICLFENABLE0R_S0FE_SETMASK 1<<HW_ICLFENABLE0R_S0FE_BITPOS
                             6721 ; 962  |#define HW_ICLFENABLE0R_S1FE_SETMASK 1<<HW_ICLFENABLE0R_S1FE_BITPOS
                             6722 ; 963  |#define HW_ICLFENABLE0R_S2FE_SETMASK 1<<HW_ICLFENABLE0R_S2FE_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 113

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6723 ; 964  |#define HW_ICLFENABLE0R_S3FE_SETMASK 1<<HW_ICLFENABLE0R_S3FE_BITPOS
                             6724 ; 965  |#define HW_ICLFENABLE0R_S4FE_SETMASK 1<<HW_ICLFENABLE0R_S4FE_BITPOS
                             6725 ; 966  |#define HW_ICLFENABLE0R_S5FE_SETMASK 1<<HW_ICLFENABLE0R_S5FE_BITPOS
                             6726 ; 967  |#define HW_ICLFENABLE0R_S6FE_SETMASK 1<<HW_ICLFENABLE0R_S6FE_BITPOS
                             6727 ; 968  |#define HW_ICLFENABLE0R_S7FE_SETMASK 1<<HW_ICLFENABLE0R_S7FE_BITPOS
                             6728 ; 969  |#define HW_ICLFENABLE0R_S8FE_SETMASK 1<<HW_ICLFENABLE0R_S8FE_BITPOS
                             6729 ; 970  |#define HW_ICLFENABLE0R_S9FE_SETMASK 1<<HW_ICLFENABLE0R_S9FE_BITPOS
                             6730 ; 971  |#define HW_ICLFENABLE0R_S10FE_SETMASK 1<<HW_ICLFENABLE0R_S10FE_BITPOS
                             6731 ; 972  |#define HW_ICLFENABLE0R_S11FE_SETMASK 1<<HW_ICLFENABLE0R_S11FE_BITPOS
                             6732 ; 973  |#define HW_ICLFENABLE0R_S12FE_SETMASK 1<<HW_ICLFENABLE0R_S12FE_BITPOS
                             6733 ; 974  |#define HW_ICLFENABLE0R_S13FE_SETMASK 1<<HW_ICLFENABLE0R_S13FE_BITPOS
                             6734 ; 975  |#define HW_ICLFENABLE0R_S14FE_SETMASK 1<<HW_ICLFENABLE0R_S14FE_BITPOS
                             6735 ; 976  |#define HW_ICLFENABLE0R_S15FE_SETMASK 1<<HW_ICLFENABLE0R_S15FE_BITPOS
                             6736 ; 977  |#define HW_ICLFENABLE0R_S16FE_SETMASK 1<<HW_ICLFENABLE0R_S16FE_BITPOS
                             6737 ; 978  |#define HW_ICLFENABLE0R_S17FE_SETMASK 1<<HW_ICLFENABLE0R_S17FE_BITPOS
                             6738 ; 979  |#define HW_ICLFENABLE0R_S18FE_SETMASK 1<<HW_ICLFENABLE0R_S18FE_BITPOS
                             6739 ; 980  |#define HW_ICLFENABLE0R_S19FE_SETMASK 1<<HW_ICLFENABLE0R_S19FE_BITPOS
                             6740 ; 981  |#define HW_ICLFENABLE0R_S20FE_SETMASK 1<<HW_ICLFENABLE0R_S20FE_BITPOS
                             6741 ; 982  |#define HW_ICLFENABLE0R_S21FE_SETMASK 1<<HW_ICLFENABLE0R_S21FE_BITPOS
                             6742 ; 983  |#define HW_ICLFENABLE0R_S22FE_SETMASK 1<<HW_ICLFENABLE0R_S22FE_BITPOS
                             6743 ; 984  |#define HW_ICLFENABLE0R_S23FE_SETMASK 1<<HW_ICLFENABLE0R_S23FE_BITPOS
                             6744 ; 985  |
                             6745 ; 986  |#define HW_ICLFENABLE0R_S0FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S0FE_SETMASK
                             6746 ; 987  |#define HW_ICLFENABLE0R_S1FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S1FE_SETMASK
                             6747 ; 988  |#define HW_ICLFENABLE0R_S2FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S2FE_SETMASK
                             6748 ; 989  |#define HW_ICLFENABLE0R_S3FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S3FE_SETMASK
                             6749 ; 990  |#define HW_ICLFENABLE0R_S4FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S4FE_SETMASK
                             6750 ; 991  |#define HW_ICLFENABLE0R_S5FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S5FE_SETMASK
                             6751 ; 992  |#define HW_ICLFENABLE0R_S6FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S6FE_SETMASK
                             6752 ; 993  |#define HW_ICLFENABLE0R_S7FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S7FE_SETMASK
                             6753 ; 994  |#define HW_ICLFENABLE0R_S8FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S8FE_SETMASK
                             6754 ; 995  |#define HW_ICLFENABLE0R_S9FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S9FE_SETMASK
                             6755 ; 996  |#define HW_ICLFENABLE0R_S10FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S10FE_SETMASK
                             6756 ; 997  |#define HW_ICLFENABLE0R_S11FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S11FE_SETMASK
                             6757 ; 998  |#define HW_ICLFENABLE0R_S12FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S12FE_SETMASK
                             6758 ; 999  |#define HW_ICLFENABLE0R_S13FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S13FE_SETMASK
                             6759 ; 1000 |#define HW_ICLFENABLE0R_S14FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S14FE_SETMASK
                             6760 ; 1001 |#define HW_ICLFENABLE0R_S15FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S15FE_SETMASK
                             6761 ; 1002 |#define HW_ICLFENABLE0R_S16FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S16FE_SETMASK
                             6762 ; 1003 |#define HW_ICLFENABLE0R_S17FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S17FE_SETMASK
                             6763 ; 1004 |#define HW_ICLFENABLE0R_S18FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S18FE_SETMASK
                             6764 ; 1005 |#define HW_ICLFENABLE0R_S19FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S19FE_SETMASK
                             6765 ; 1006 |#define HW_ICLFENABLE0R_S20FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S20FE_SETMASK
                             6766 ; 1007 |#define HW_ICLFENABLE0R_S21FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S21FE_SETMASK
                             6767 ; 1008 |#define HW_ICLFENABLE0R_S22FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S22FE_SETMASK
                             6768 ; 1009 |#define HW_ICLFENABLE0R_S23FE_CLRMASK ~(WORD)HW_ICLFENABLE0R_S23FE_SETMASK
                             6769 ; 1010 |
                             6770 ; 1011 |
                             6771 ; 1012 |/////////////////////////////////////////////////////////////////////////////////
                             6772 ; 1013 |//  Interrupt Collector Force Enable 1 Register (HW_ICLFENABLE1R) Bit Positions
                             6773 ; 1014 |typedef union               /* Interrupt Collector Force Enable 1 Register      */
                             6774 ; 1015 |{
                             6775 ; 1016 |    struct {
                             6776 ; 1017 |        int S24FE       :1;
                             6777 ; 1018 |        int S25FE       :1;
                             6778 ; 1019 |        int S26FE       :1;
                             6779 ; 1020 |        int S27FE       :1;
                             6780 ; 1021 |        int S28FE       :1;
                             6781 ; 1022 |        int S29FE       :1;
                             6782 ; 1023 |        int S30FE       :1;
                             6783 ; 1024 |        int S31FE       :1;
                             6784 ; 1025 |        int S32FE       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 114

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6785 ; 1026 |        int S33FE       :1;
                             6786 ; 1027 |    } B;
                             6787 ; 1028 |    int I;
                             6788 ; 1029 |} iclfenable1_type;
                             6789 ; 1030 |#define HW_ICLFENABLE1R (*(volatile iclfenable1_type _X*) (HW_ICOLL_BASEADDR+14)) /* Inter
                                  rupt Collector Force Enable Register 1    */
                             6790 ; 1031 |#define HW_ICLFENABLE1R_S24FE_BITPOS 0
                             6791 ; 1032 |#define HW_ICLFENABLE1R_S25FE_BITPOS 1
                             6792 ; 1033 |#define HW_ICLFENABLE1R_S26FE_BITPOS 2
                             6793 ; 1034 |#define HW_ICLFENABLE1R_S27FE_BITPOS 3
                             6794 ; 1035 |#define HW_ICLFENABLE1R_S28FE_BITPOS 4
                             6795 ; 1036 |#define HW_ICLFENABLE1R_S29FE_BITPOS 5
                             6796 ; 1037 |#define HW_ICLFENABLE1R_S30FE_BITPOS 6
                             6797 ; 1038 |#define HW_ICLFENABLE1R_S31FE_BITPOS 7
                             6798 ; 1039 |#define HW_ICLFENABLE1R_S32FE_BITPOS 8
                             6799 ; 1040 |#define HW_ICLFENABLE1R_S33FE_BITPOS 9
                             6800 ; 1041 |
                             6801 ; 1042 |#define HW_ICLFENABLE1R_S24FE_SETMASK 1<<HW_ICLFENABLE1R_S24FE_BITPOS
                             6802 ; 1043 |#define HW_ICLFENABLE1R_S25FE_SETMASK 1<<HW_ICLFENABLE1R_S25FE_BITPOS
                             6803 ; 1044 |#define HW_ICLFENABLE1R_S26FE_SETMASK 1<<HW_ICLFENABLE1R_S26FE_BITPOS
                             6804 ; 1045 |#define HW_ICLFENABLE1R_S27FE_SETMASK 1<<HW_ICLFENABLE1R_S27FE_BITPOS
                             6805 ; 1046 |#define HW_ICLFENABLE1R_S28FE_SETMASK 1<<HW_ICLFENABLE1R_S28FE_BITPOS
                             6806 ; 1047 |#define HW_ICLFENABLE1R_S29FE_SETMASK 1<<HW_ICLFENABLE1R_S29FE_BITPOS
                             6807 ; 1048 |#define HW_ICLFENABLE1R_S30FE_SETMASK 1<<HW_ICLFENABLE1R_S30FE_BITPOS
                             6808 ; 1049 |#define HW_ICLFENABLE1R_S31FE_SETMASK 1<<HW_ICLFENABLE1R_S31FE_BITPOS
                             6809 ; 1050 |#define HW_ICLFENABLE1R_S32FE_SETMASK 1<<HW_ICLFENABLE1R_S32FE_BITPOS
                             6810 ; 1051 |#define HW_ICLFENABLE1R_S33FE_SETMASK 1<<HW_ICLFENABLE1R_S33FE_BITPOS
                             6811 ; 1052 |
                             6812 ; 1053 |#define HW_ICLFENABLE1R_S24FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S24FE_SETMASK
                             6813 ; 1054 |#define HW_ICLFENABLE1R_S25FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S25FE_SETMASK
                             6814 ; 1055 |#define HW_ICLFENABLE1R_S26FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S26FE_SETMASK
                             6815 ; 1056 |#define HW_ICLFENABLE1R_S27FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S27FE_SETMASK
                             6816 ; 1057 |#define HW_ICLFENABLE1R_S28FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S28FE_SETMASK
                             6817 ; 1058 |#define HW_ICLFENABLE1R_S29FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S29FE_SETMASK
                             6818 ; 1059 |#define HW_ICLFENABLE1R_S30FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S30FE_SETMASK
                             6819 ; 1060 |#define HW_ICLFENABLE1R_S31FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S31FE_SETMASK
                             6820 ; 1061 |#define HW_ICLFENABLE1R_S32FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S32FE_SETMASK
                             6821 ; 1062 |#define HW_ICLFENABLE1R_S33FE_CLRMASK ~(WORD)HW_ICLFENABLE1R_S33FE_SETMASK
                             6822 ; 1063 |
                             6823 ; 1064 |
                             6824 ; 1065 |/////////////////////////////////////////////////////////////////////////////////
                             6825 ; 1066 |//  Interrupt Collector Observation Register 0 Register (HW_ICLOBSVZ0R) Bit Positions
                             6826 ; 1067 |typedef union               /* Interrupt Collector Observation Register 0       */
                             6827 ; 1068 |{
                             6828 ; 1069 |    struct {
                             6829 ; 1070 |        unsigned RQ     :7;
                             6830 ; 1071 |        unsigned IVA    :7;
                             6831 ; 1072 |        unsigned IVB    :7;
                             6832 ; 1073 |    } B;
                             6833 ; 1074 |    int I;
                             6834 ; 1075 |} iclobsvz0_type;
                             6835 ; 1076 |#define HW_ICLOBSVZ0R   (*(volatile iclobsvz0_type _X*) (HW_ICOLL_BASEADDR+15)) /* Interru
                                  pt Collector Observation Register 0   */
                             6836 ; 1077 |
                             6837 ; 1078 |#define HW_ICLOBSVZ0R_RQ_BITPOS 0
                             6838 ; 1079 |#define HW_ICLOBSVZ0R_IVA_BITPOS 7
                             6839 ; 1080 |#define HW_ICLOBSVZ0R_IVB_BITPOS 14
                             6840 ; 1081 |
                             6841 ; 1082 |#define HW_ICLOBSVZ0R_RQ_SETMASK 0x3F<<HW_ICLOBSVZ0R_RQ_BITPOS
                             6842 ; 1083 |#define HW_ICLOBSVZ0R_IVA_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVA_BITPOS
                             6843 ; 1084 |#define HW_ICLOBSVZ0R_IVB_SETMASK 0x3F<<HW_ICLOBSVZ0R_IVB_BITPOS
                             6844 ; 1085 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 115

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6845 ; 1086 |#define HW_ICLOBSVZ0R_RQ_CLRMASK ~(WORD)HW_ICLOBSVZ0R_RQ_SETMASK
                             6846 ; 1087 |#define HW_ICLOBSVZ0R_IVA_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVA_SETMASK
                             6847 ; 1088 |#define HW_ICLOBSVZ0R_IVB_CLRMASK ~(WORD)HW_ICLOBSVZ0R_IVB_SETMASK
                             6848 ; 1089 |
                             6849 ; 1090 |
                             6850 ; 1091 |/////////////////////////////////////////////////////////////////////////////////
                             6851 ; 1092 |//  Interrupt Collector Observation Register 1 Register (HW_ICL1BSVZ0R) Bit Positions
                             6852 ; 1093 |#define HW_ICL1BSVZ0R_IVC_BITPOS 0
                             6853 ; 1094 |#define HW_ICL1BSVZ0R_IVD_BITPOS 7
                             6854 ; 1095 |
                             6855 ; 1096 |#define HW_ICL1BSVZ0R_IVC_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVC_BITPOS
                             6856 ; 1097 |#define HW_ICL1BSVZ0R_IVD_SETMASK 0x3F<<HW_ICL1BSVZ0R_IVD_BITPOS
                             6857 ; 1098 |
                             6858 ; 1099 |#define HW_ICL1BSVZ0R_IVC_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVC_SETMASK
                             6859 ; 1100 |#define HW_ICL1BSVZ0R_IVD_CLRMASK ~(WORD)HW_ICL1BSVZ0R_IVD_SETMASK
                             6860 ; 1101 |
                             6861 ; 1102 |
                             6862 ; 1103 |
                             6863 ; 1104 |
                             6864 ; 1105 |/////////////////////////////////////////////////////////////////////////////////
                             6865 ; 1106 |//  Interrupt Vectors
                             6866 ; 1107 |/////////////////////////////////////////////////////////////////////////////////
                             6867 ; 1108 |// Reset Vector
                             6868 ; 1109 |#define HW_IVECRESET 0x0000           
                             6869 ; 1110 |// Stack Error
                             6870 ; 1111 |#define HW_IVECSTERR 0x0002           
                             6871 ; 1112 |// Trace
                             6872 ; 1113 |#define HW_IVECTRAC 0x0004           
                             6873 ; 1114 |// SWI
                             6874 ; 1115 |#define HW_IVECSWI 0x0006           
                             6875 ; 1116 |// ~IRQA
                             6876 ; 1117 |#define HW_IVECIRQA 0x0008           
                             6877 ; 1118 |// ~IRQB - BROWNOUT
                             6878 ; 1119 |#define HW_IVECIRQB 0x000A           
                             6879 ; 1120 |// Fatal Error
                             6880 ; 1121 |#define HW_IVECERROR 0x000C           
                             6881 ; 1122 |// SPI
                             6882 ; 1123 |#define HW_IVECSPI 0x000E           
                             6883 ; 1124 |// I2S TX Data Empty
                             6884 ; 1125 |#define HW_IVECI2STXDE 0x0010           
                             6885 ; 1126 |// I2S TX Underflow
                             6886 ; 1127 |#define HW_IVECI2STXUF 0x0012           
                             6887 ; 1128 |// I2S RX Data Full
                             6888 ; 1129 |#define HW_IVECI2SRXDF 0x0014           
                             6889 ; 1130 |// I2S RX Overflow
                             6890 ; 1131 |#define HW_IVECI2SRXOF 0x0016           
                             6891 ; 1132 |//                                       equ     $0018           ; Error, nothing vectors 
                                  here
                             6892 ; 1133 |//                                       equ     $001A           ; Error, nothing vectors 
                                  here
                             6893 ; 1134 |//                                       equ     $001C           ; Error, nothing vectors 
                                  here
                             6894 ; 1135 |//                                       equ     $001E           ; Non-Maskable Interrupt
                             6895 ; 1136 |// GPIO1
                             6896 ; 1137 |#define HW_IVECGPIO1 0x0020           
                             6897 ; 1138 |// GPIO2
                             6898 ; 1139 |#define HW_IVECGPIO2 0x0022           
                             6899 ; 1140 |// GPIO0
                             6900 ; 1141 |#define HW_IVECGPIO0 0x0024           
                             6901 ; 1142 |// TIMER0
                             6902 ; 1143 |#define HW_IVECTIMER0 0x0026           
                             6903 ; 1144 |// TIMER1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 116

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6904 ; 1145 |#define HW_IVECTIMER1 0x0028           
                             6905 ; 1146 |// TIMER2
                             6906 ; 1147 |#define HW_IVECTIMER2 0x002A           
                             6907 ; 1148 |//                                       equ     $002C           ; Error, nothing vectors 
                                  here
                             6908 ; 1149 |//                                       equ     $002E           ; Error, nothing vectors 
                                  here
                             6909 ; 1150 |// I2C RX Data Ready
                             6910 ; 1151 |#define HW_IVECI2CRXDR 0x0030           
                             6911 ; 1152 |// I2C RX Overflow
                             6912 ; 1153 |#define HW_IVECI2CRXOF 0x0032           
                             6913 ; 1154 |// I2C TX Data Empty
                             6914 ; 1155 |#define HW_IVECI2CTXDE 0x0034           
                             6915 ; 1156 |// I2C TX Underflow
                             6916 ; 1157 |#define HW_IVECI2CTXUF 0x0036           
                             6917 ; 1158 |// Illegal Instruction
                             6918 ; 1159 |#define HW_IVECILI 0x0038           
                             6919 ; 1160 |//                                       equ     $003A           ; Error, nothing vectors 
                                  here
                             6920 ; 1161 |// DAC Empty ISR (DAC Request to Fill Buffer)
                             6921 ; 1162 |#define HW_IVECDACE 0x003C           
                             6922 ; 1163 |// DAC Underflow ISR
                             6923 ; 1164 |#define HW_IVECDACUF 0x003E           
                             6924 ; 1165 |//                                       equ     $0040           ; Error, nothing vectors 
                                  here
                             6925 ; 1166 |// ADC Full ISR
                             6926 ; 1167 |#define HW_IVECADCF 0x0042           
                             6927 ; 1168 |// ADC Overflow ISR
                             6928 ; 1169 |#define HW_IVECADCOF 0x0044           
                             6929 ; 1170 |//                                       equ     $0046           ; Error, nothing vectors 
                                  here
                             6930 ; 1171 |// TIMER3
                             6931 ; 1172 |#define HW_IVECTIMER3 0x0048           
                             6932 ; 1173 |// GPIO3
                             6933 ; 1174 |#define HW_IVECGPIO3 0x004A           
                             6934 ; 1175 |// SDRAM
                             6935 ; 1176 |#define HW_IVECSDRAM 0x004C           
                             6936 ; 1177 |//                                       equ     $004E           ; Error, nothing vectors 
                                  here
                             6937 ; 1178 |// 5 volt power connected
                             6938 ; 1179 |#define HW_IVECVDD5VCONN 0x0050           
                             6939 ; 1180 |// USB Controller
                             6940 ; 1181 |#define HW_IVECUSBCTLR 0x0052           
                             6941 ; 1182 |// USB Wakeup 
                             6942 ; 1183 |#define HW_IVECUSBWAKEUP 0x0054           
                             6943 ; 1184 |// 5 volt power disconnected
                             6944 ; 1185 |#define HW_IVECVDD5VDISC 0x0056           
                             6945 ; 1186 |// enhanced SPI
                             6946 ; 1187 |#define HW_IVECESPI 0x0058           
                             6947 ; 1188 |// filter coprocessor
                             6948 ; 1189 |#define HW_IVECFILCO 0x005A           
                             6949 ; 1190 |// low res ADC #1
                             6950 ; 1191 |#define HW_IVECLRADC1 0x005C           
                             6951 ; 1192 |// real time clock alarm
                             6952 ; 1193 |#define HW_IVECRTCALARM 0x005E           
                             6953 ; 1194 |// low res ADC #2
                             6954 ; 1195 |#define HW_IVECLRADC2 0x0060           
                             6955 ; 1196 |// flash hardware ECC
                             6956 ; 1197 |#define HW_IVECHWECC 0x0062           
                             6957 ; 1198 |//                                       equ     $0064           ; Error, nothing vectors 
                                  here
                             6958 ; 1199 |// CDSYNC Interrupt
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 117

M:ADDR CODE           CYCLES LINE SOURCELINE
                             6959 ; 1200 |#define HW_IVECCDSYNC 0x0066           
                             6960 ; 1201 |// CDSYNC Exception
                             6961 ; 1202 |#define HW_IVECCDSYNCEX 0x0068           
                             6962 ; 1203 |// RS
                             6963 ; 1204 |#define HW_IVECRS 0x006A           
                             6964 ; 1205 |//                                       equ     $006C           ; Error, nothing vectors 
                                  here
                             6965 ; 1206 |// Flash Done ISR
                             6966 ; 1207 |#define HW_IVECFD 0x006E           
                             6967 ; 1208 |// CompactFlash ISR
                             6968 ; 1209 |#define HW_IVECCF 0x0070           
                             6969 ; 1210 |// SmartMedia Timeout ISR
                             6970 ; 1211 |#define HW_IVECSMTO 0x0072           
                             6971 ; 1212 |// SmartMedia Invalid Programming
                             6972 ; 1213 |#define HW_IVECSMIP 0x0074           
                             6973 ; 1214 |// CompactFlash No Card ISR
                             6974 ; 1215 |#define HW_IVECCFNC 0x0076           
                             6975 ; 1216 |// CompactFlash Status Change ISR
                             6976 ; 1217 |#define HW_IVECCFSC 0x0078           
                             6977 ; 1218 |//                                       equ     $007A           ; Error, nothing vectors 
                                  here
                             6978 ; 1219 |//                                       equ     $007C           ; Error, nothing vectors 
                                  here
                             6979 ; 1220 |// CDI
                             6980 ; 1221 |#define HW_IVECCDI 0x007E           
                             6981 ; 1222 |
                             6982 ; 1223 |/////////////////////////////////////////////////////////////////////////////////
                             6983 ; 1224 |//  Interrupt Vectors
                             6984 ; 1225 |/////////////////////////////////////////////////////////////////////////////////
                             6985 ; 1226 |// macro to allow setting vectors from C. Hex const below is jsr opcode.
                             6986 ; 1227 |#define VECTOR(address,isr) \ 
                             6987 ; 1228 |    (*(volatile int _P *)(address))=0x0BF080; \ 
                             6988 ; 1229 |    (*(volatile int _P *)(address+1))=(isr)
                             6989 ; 1230 |
                             6990 ; 1231 |
                             6991 ; 1232 |/////////////////////////////////////////////////////////////////////////////////
                             6992 ; 1233 |//  Interrupt Priority Register (HW_IPR) Bit Positions
                             6993 ; 1234 |#define HW_IPR_IRQA_BITPOS 0
                             6994 ; 1235 |#define HW_IPR_IRQA_ET_BITPOS 2
                             6995 ; 1236 |#define HW_IPR_IRQB_BITPOS 3
                             6996 ; 1237 |#define HW_IPR_IRQB_ET_BITPOS 5
                             6997 ; 1238 |#define HW_IPR_L0P_BITPOS 10
                             6998 ; 1239 |#define HW_IPR_L1P_BITPOS 12
                             6999 ; 1240 |#define HW_IPR_L2P_BITPOS 14
                             7000 ; 1241 |#define HW_IPR_L3P_BITPOS 16
                             7001 ; 1242 |#define HW_IPR_L4P_BITPOS 18
                             7002 ; 1243 |#define HW_IPR_L5P_BITPOS 20
                             7003 ; 1244 |#define HW_IPR_L6P_BITPOS 22
                             7004 ; 1245 |
                             7005 ; 1246 |// Interrupt Disabled
                             7006 ; 1247 |#define HW_IPR_LP_0_SETMASK 0   
                             7007 ; 1248 |// Interrupt Priority Level 0
                             7008 ; 1249 |#define HW_IPR_LP_1_SETMASK 1   
                             7009 ; 1250 |// Interrupt Priority Level 1
                             7010 ; 1251 |#define HW_IPR_LP_2_SETMASK 2   
                             7011 ; 1252 |// Interrupt Priority Level 2
                             7012 ; 1253 |#define HW_IPR_LP_3_SETMASK 3   
                             7013 ; 1254 |
                             7014 ; 1255 |#define HW_IPR_IRQA_SETMASK 3<<HW_IPR_IRQA_BITPOS
                             7015 ; 1256 |#define HW_IPR_IRQA_ET_SETMASK 1<<HW_IPR_IRQA_ET_BITPOS
                             7016 ; 1257 |#define HW_IPR_IRQB_SETMASK 3<<HW_IPR_IRQB_BITPOS
                             7017 ; 1258 |#define HW_IPR_IRQB_ET_SETMASK 1<<HW_IPR_IRQB_ET_BITPOS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 118

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7018 ; 1259 |#define HW_IPR_L0P_SETMASK 3<<HW_IPR_L0P_BITPOS
                             7019 ; 1260 |#define HW_IPR_L1P_SETMASK 3<<HW_IPR_L1P_BITPOS
                             7020 ; 1261 |#define HW_IPR_L2P_SETMASK 3<<HW_IPR_L2P_BITPOS
                             7021 ; 1262 |#define HW_IPR_L3P_SETMASK 3<<HW_IPR_L3P_BITPOS
                             7022 ; 1263 |#define HW_IPR_L4P_SETMASK 3<<HW_IPR_L4P_BITPOS
                             7023 ; 1264 |#define HW_IPR_L5P_SETMASK 3<<HW_IPR_L5P_BITPOS
                             7024 ; 1265 |#define HW_IPR_L6P_SETMASK 3<<HW_IPR_L6P_BITPOS
                             7025 ; 1266 |
                             7026 ; 1267 |#define HW_IPR_IRQA_CLRMASK ~(WORD)HW_IPR_IRQA_SETMASK
                             7027 ; 1268 |#define HW_IPR_IRQA_ET_CLRMASK ~(WORD)HW_IPR_IRQA_ET_SETMASK
                             7028 ; 1269 |#define HW_IPR_IRQB_CLRMASK ~(WORD)HW_IPR_IRQB_SETMASK
                             7029 ; 1270 |#define HW_IPR_IRQB_ET_CLRMASK ~(WORD)HW_IPR_IRQB_ET_SETMASK
                             7030 ; 1271 |#define HW_IPR_L0P_CLRMASK ~(WORD)HW_IPR_L0P_SETMASK
                             7031 ; 1272 |#define HW_IPR_L1P_CLRMASK ~(WORD)HW_IPR_L1P_SETMASK
                             7032 ; 1273 |#define HW_IPR_L2P_CLRMASK ~(WORD)HW_IPR_L2P_SETMASK
                             7033 ; 1274 |#define HW_IPR_L3P_CLRMASK ~(WORD)HW_IPR_L3P_SETMASK
                             7034 ; 1275 |#define HW_IPR_L4P_CLRMASK ~(WORD)HW_IPR_L4P_SETMASK
                             7035 ; 1276 |#define HW_IPR_L5P_CLRMASK ~(WORD)HW_IPR_L5P_SETMASK
                             7036 ; 1277 |#define HW_IPR_L6P_CLRMASK ~(WORD)HW_IPR_L6P_SETMASK
                             7037 ; 1278 |
                             7038 ; 1279 |// Interrupt Priority register
                             7039 ; 1280 |typedef union               
                             7040 ; 1281 |{
                             7041 ; 1282 |    struct {
                             7042 ; 1283 |        unsigned int IRQAP  :2; /* IRQ A Priority: 00 disable, 01 10 11 enable  */
                             7043 ; 1284 |        unsigned int IRQAT  :1; /* IRQ A Type: 0 level, 1 negative edge         */
                             7044 ; 1285 |        unsigned int IRQBP  :2; /* IRQ B Priority: 00 disable, 01 10 11 enable  */
                             7045 ; 1286 |        unsigned int IRQBT  :1; /* IRQ B Type: 0 level, 1 negative edge.        */
                             7046 ; 1287 |        int                 :4; /* Reserved */
                             7047 ; 1288 |        unsigned int L0P    :2; /* Interrupt Priority for priority 0 (SAI)      */
                             7048 ; 1289 |        unsigned int L1P    :2; /* Interrupt Priority for priority 1 (IColl)    */
                             7049 ; 1290 |        unsigned int L2P    :2; /* Interrupt Priority for priority 2 (IColl)    */
                             7050 ; 1291 |        unsigned int L3P    :2; /* Interrupt Priority for priority 3 (IColl)    */
                             7051 ; 1292 |        unsigned int L4P    :2; /* Interrupt Priority for priority 4 (I2C)      */
                             7052 ; 1293 |        unsigned int L5P    :2; /* Interrupt Priority for priority 5 (SPI)      */
                             7053 ; 1294 |        unsigned int L6P    :2; /* Interrupt Priority for priority 6 (IColl)    */
                             7054 ; 1295 |    } B;
                             7055 ; 1296 |
                             7056 ; 1297 |    int I;
                             7057 ; 1298 |
                             7058 ; 1299 |} ipr_type;
                             7059 ; 1300 |#define HW_IPR         (*(volatile ipr_type _X*) 0x00FFFF)
                             7060 ; 1301 |
                             7061 ; 1302 |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                             7062 ; 1303 |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                             7063 ; 1304 |// to update the actual files. Only the defines needed to build SDK2.400 were added.
                             7064 ; 1305 |
                             7065 ; 1306 |#define HW_IPR_L1P0_BITPOS 12
                             7066 ; 1307 |#define HW_IPR_L2P0_BITPOS 14
                             7067 ; 1308 |#define HW_IPR_L3P0_BITPOS 16
                             7068 ; 1309 |#define HW_IPR_L6P0_BITPOS 22
                             7069 ; 1310 |
                             7070 ; 1311 |/////////////////////////////////////////////////////////////////////////////////
                             7071 ; 1312 |//  Interrupt Collector Steering 0 Register (HW_ICLSTEER0R) Bit Positions
                             7072 ; 1313 |#define HW_ICLSTEERR_SS_1 0
                             7073 ; 1314 |#define HW_ICLSTEERR_SS_2 1
                             7074 ; 1315 |#define HW_ICLSTEERR_SS_3 2
                             7075 ; 1316 |#define HW_ICLSTEERR_SS_6 3
                             7076 ; 1317 |
                             7077 ; 1318 |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 119

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7078 ; 1319 |
                             7079 
                             7081 
                             7082 ; 26   |#include "regslradc.h"
                             7083 
                             7085 
                             7086 ; 1    |#if !(defined(regslradcinc))
                             7087 ; 2    |
                             7088 ; 3    |#define regslradcinc 1
                             7089 ; 4    |
                             7090 ; 5    |#include "types.h"
                             7091 
                             7093 
                             7094 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7095 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7096 ; 3    |//
                             7097 ; 4    |// Filename: types.h
                             7098 ; 5    |// Description: Standard data types
                             7099 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7100 ; 7    |
                             7101 ; 8    |#ifndef _TYPES_H
                             7102 ; 9    |#define _TYPES_H
                             7103 ; 10   |
                             7104 ; 11   |// TODO:  move this outta here!
                             7105 ; 12   |#if !defined(NOERROR)
                             7106 ; 13   |#define NOERROR 0
                             7107 ; 14   |#define SUCCESS 0
                             7108 ; 15   |#endif 
                             7109 ; 16   |#if !defined(SUCCESS)
                             7110 ; 17   |#define SUCCESS  0
                             7111 ; 18   |#endif
                             7112 ; 19   |#if !defined(ERROR)
                             7113 ; 20   |#define ERROR   -1
                             7114 ; 21   |#endif
                             7115 ; 22   |#if !defined(FALSE)
                             7116 ; 23   |#define FALSE 0
                             7117 ; 24   |#endif
                             7118 ; 25   |#if !defined(TRUE)
                             7119 ; 26   |#define TRUE  1
                             7120 ; 27   |#endif
                             7121 ; 28   |
                             7122 ; 29   |#if !defined(NULL)
                             7123 ; 30   |#define NULL 0
                             7124 ; 31   |#endif
                             7125 ; 32   |
                             7126 ; 33   |#define MAX_INT     0x7FFFFF
                             7127 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7128 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7129 ; 36   |#define MAX_ULONG   (-1) 
                             7130 ; 37   |
                             7131 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7132 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7133 ; 40   |
                             7134 ; 41   |
                             7135 ; 42   |#define BYTE    unsigned char       // btVarName
                             7136 ; 43   |#define CHAR    signed char         // cVarName
                             7137 ; 44   |#define USHORT  unsigned short      // usVarName
                             7138 ; 45   |#define SHORT   unsigned short      // sVarName
                             7139 ; 46   |#define WORD    unsigned int        // wVarName
                             7140 ; 47   |#define INT     signed int          // iVarName
                             7141 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7142 ; 49   |#define LONG    signed long         // lVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 120

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7143 ; 50   |#define BOOL    unsigned int        // bVarName
                             7144 ; 51   |#define FRACT   _fract              // frVarName
                             7145 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7146 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7147 ; 54   |#define FLOAT   float               // fVarName
                             7148 ; 55   |#define DBL     double              // dVarName
                             7149 ; 56   |#define ENUM    enum                // eVarName
                             7150 ; 57   |#define CMX     _complex            // cmxVarName
                             7151 ; 58   |typedef WORD UCS3;                   // 
                             7152 ; 59   |
                             7153 ; 60   |#define UINT16  unsigned short
                             7154 ; 61   |#define UINT8   unsigned char   
                             7155 ; 62   |#define UINT32  unsigned long
                             7156 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7157 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7158 ; 65   |#define WCHAR   UINT16
                             7159 ; 66   |
                             7160 ; 67   |//UINT128 is 16 bytes or 6 words
                             7161 ; 68   |typedef struct UINT128_3500 {   
                             7162 ; 69   |    int val[6];     
                             7163 ; 70   |} UINT128_3500;
                             7164 ; 71   |
                             7165 ; 72   |#define UINT128   UINT128_3500
                             7166 ; 73   |
                             7167 ; 74   |// Little endian word packed byte strings:   
                             7168 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7169 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7170 ; 77   |// Little endian word packed byte strings:   
                             7171 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7172 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7173 ; 80   |
                             7174 ; 81   |// Declare Memory Spaces To Use When Coding
                             7175 ; 82   |// A. Sector Buffers
                             7176 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7177 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7178 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7179 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7180 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7181 ; 88   |// B. Media DDI Memory
                             7182 ; 89   |#define MEDIA_DDI_MEM _Y
                             7183 ; 90   |
                             7184 ; 91   |
                             7185 ; 92   |
                             7186 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7187 ; 94   |// Examples of circular pointers:
                             7188 ; 95   |//    INT CIRC cpiVarName
                             7189 ; 96   |//    DWORD CIRC cpdwVarName
                             7190 ; 97   |
                             7191 ; 98   |#define RETCODE INT                 // rcVarName
                             7192 ; 99   |
                             7193 ; 100  |// generic bitfield structure
                             7194 ; 101  |struct Bitfield {
                             7195 ; 102  |    unsigned int B0  :1;
                             7196 ; 103  |    unsigned int B1  :1;
                             7197 ; 104  |    unsigned int B2  :1;
                             7198 ; 105  |    unsigned int B3  :1;
                             7199 ; 106  |    unsigned int B4  :1;
                             7200 ; 107  |    unsigned int B5  :1;
                             7201 ; 108  |    unsigned int B6  :1;
                             7202 ; 109  |    unsigned int B7  :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 121

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7203 ; 110  |    unsigned int B8  :1;
                             7204 ; 111  |    unsigned int B9  :1;
                             7205 ; 112  |    unsigned int B10 :1;
                             7206 ; 113  |    unsigned int B11 :1;
                             7207 ; 114  |    unsigned int B12 :1;
                             7208 ; 115  |    unsigned int B13 :1;
                             7209 ; 116  |    unsigned int B14 :1;
                             7210 ; 117  |    unsigned int B15 :1;
                             7211 ; 118  |    unsigned int B16 :1;
                             7212 ; 119  |    unsigned int B17 :1;
                             7213 ; 120  |    unsigned int B18 :1;
                             7214 ; 121  |    unsigned int B19 :1;
                             7215 ; 122  |    unsigned int B20 :1;
                             7216 ; 123  |    unsigned int B21 :1;
                             7217 ; 124  |    unsigned int B22 :1;
                             7218 ; 125  |    unsigned int B23 :1;
                             7219 ; 126  |};
                             7220 ; 127  |
                             7221 ; 128  |union BitInt {
                             7222 ; 129  |        struct Bitfield B;
                             7223 ; 130  |        int        I;
                             7224 ; 131  |};
                             7225 ; 132  |
                             7226 ; 133  |#define MAX_MSG_LENGTH 10
                             7227 ; 134  |struct CMessage
                             7228 ; 135  |{
                             7229 ; 136  |        unsigned int m_uLength;
                             7230 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7231 ; 138  |};
                             7232 ; 139  |
                             7233 ; 140  |typedef struct {
                             7234 ; 141  |    WORD m_wLength;
                             7235 ; 142  |    WORD m_wMessage;
                             7236 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7237 ; 144  |} Message;
                             7238 ; 145  |
                             7239 ; 146  |struct MessageQueueDescriptor
                             7240 ; 147  |{
                             7241 ; 148  |        int *m_pBase;
                             7242 ; 149  |        int m_iModulo;
                             7243 ; 150  |        int m_iSize;
                             7244 ; 151  |        int *m_pHead;
                             7245 ; 152  |        int *m_pTail;
                             7246 ; 153  |};
                             7247 ; 154  |
                             7248 ; 155  |struct ModuleEntry
                             7249 ; 156  |{
                             7250 ; 157  |    int m_iSignaledEventMask;
                             7251 ; 158  |    int m_iWaitEventMask;
                             7252 ; 159  |    int m_iResourceOfCode;
                             7253 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7254 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7255 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7256 ; 163  |    int m_uTimeOutHigh;
                             7257 ; 164  |    int m_uTimeOutLow;
                             7258 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7259 ; 166  |};
                             7260 ; 167  |
                             7261 ; 168  |union WaitMask{
                             7262 ; 169  |    struct B{
                             7263 ; 170  |        unsigned int m_bNone     :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 122

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7264 ; 171  |        unsigned int m_bMessage  :1;
                             7265 ; 172  |        unsigned int m_bTimer    :1;
                             7266 ; 173  |        unsigned int m_bButton   :1;
                             7267 ; 174  |    } B;
                             7268 ; 175  |    int I;
                             7269 ; 176  |} ;
                             7270 ; 177  |
                             7271 ; 178  |
                             7272 ; 179  |struct Button {
                             7273 ; 180  |        WORD wButtonEvent;
                             7274 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             7275 ; 182  |};
                             7276 ; 183  |
                             7277 ; 184  |struct Message {
                             7278 ; 185  |        WORD wMsgLength;
                             7279 ; 186  |        WORD wMsgCommand;
                             7280 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             7281 ; 188  |};
                             7282 ; 189  |
                             7283 ; 190  |union EventTypes {
                             7284 ; 191  |        struct CMessage msg;
                             7285 ; 192  |        struct Button Button ;
                             7286 ; 193  |        struct Message Message;
                             7287 ; 194  |};
                             7288 ; 195  |
                             7289 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             7290 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             7291 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             7292 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             7293 ; 200  |
                             7294 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             7295 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             7296 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             7297 ; 204  |
                             7298 ; 205  |#if DEBUG
                             7299 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             7300 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             7301 ; 208  |#else 
                             7302 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             7303 ; 210  |#define DebugBuildAssert(x)    
                             7304 ; 211  |#endif
                             7305 ; 212  |
                             7306 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             7307 ; 214  |//  #pragma asm
                             7308 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             7309 ; 216  |//  #pragma endasm
                             7310 ; 217  |
                             7311 ; 218  |
                             7312 ; 219  |#ifdef COLOR_262K
                             7313 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             7314 ; 221  |#elif defined(COLOR_65K)
                             7315 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             7316 ; 223  |#else
                             7317 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             7318 ; 225  |#endif
                             7319 ; 226  |    
                             7320 ; 227  |#endif // #ifndef _TYPES_H
                             7321 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 123

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7323 
                             7324 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7325 ; 7    |
                             7326 ; 8    |//   SYSTEM STMP Registers 
                             7327 ; 9    |//  Last Edited 6.26.2003 M. Henson
                             7328 ; 10   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             7329 ; 11   |
                             7330 ; 12   |#define HW_LRADC_BASEADDR (0xFA20)
                             7331 ; 13   |
                             7332 ; 14   |
                             7333 ; 15   |
                             7334 ; 16   |/////////////////////////////////////////////////////////////////////////////////
                             7335 ; 17   |//  Battery LRADC Control Register (HW_BATT_CTRL) Bit Definitions
                             7336 ; 18   |#define HW_BATT_CTRL_INPUT_OFFSET_WIDTH (7)
                             7337 ; 19   |#define HW_BATT_CTRL_RSVD0_WIDTH (1)
                             7338 ; 20   |#define HW_BATT_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7339 ; 21   |#define HW_BATT_CTRL_INPUT_DIV2_WIDTH (1)
                             7340 ; 22   |#define HW_BATT_CTRL_CLEAR_WIDTH (1)
                             7341 ; 23   |#define HW_BATT_CTRL_PWD_WIDTH (1)
                             7342 ; 24   |#define HW_BATT_CTRL_CLK_DIV_WIDTH (2)
                             7343 ; 25   |#define HW_BATT_CTRL_RSVD1_WIDTH (2)
                             7344 ; 26   |#define HW_BATT_CTRL_REF_VAL_WIDTH (2)
                             7345 ; 27   |#define HW_BATT_CTRL_RSVD2_WIDTH (2)
                             7346 ; 28   |#define HW_BATT_CTRL_IRQ_EN_EVENT0_WIDTH (1)
                             7347 ; 29   |#define HW_BATT_CTRL_IRQ_EN_EVENT1_WIDTH (1)
                             7348 ; 30   |#define HW_BATT_CTRL_POLARITY_EVENT0_WIDTH (1)
                             7349 ; 31   |#define HW_BATT_CTRL_POLARITY_EVENT1_WIDTH (1)
                             7350 ; 32   |
                             7351 ; 33   |#define HW_BATT_CTRL_INPUT_OFFSET_BITPOS (0)
                             7352 ; 34   |#define HW_BATT_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7353 ; 35   |#define HW_BATT_CTRL_INPUT_DIV2_BITPOS (9)
                             7354 ; 36   |#define HW_BATT_CTRL_CLEAR_BITPOS (10)
                             7355 ; 37   |#define HW_BATT_CTRL_PWD_BITPOS (11)
                             7356 ; 38   |#define HW_BATT_CTRL_CLK_DIV_BITPOS (12)
                             7357 ; 39   |#define HW_BATT_CTRL_REF_VAL_BITPOS (16)
                             7358 ; 40   |
                             7359 ; 41   |#define HW_BATT_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_BATT_CTRL_INPUT_OFFSET_WIDTH)-1)<<HW_BA
                                  TT_CTRL_INPUT_OFFSET_BITPOS)        
                             7360 ; 42   |#define HW_BATT_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_BATT_CTRL_HALF_CMP_PWR_WIDTH)-1)<<HW_BA
                                  TT_CTRL_HALF_CMP_PWR_BITPOS)        
                             7361 ; 43   |#define HW_BATT_CTRL_INPUT_DIV2_SETMASK (((1<<HW_BATT_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_BATT_C
                                  TRL_INPUT_DIV2_BITPOS) 
                             7362 ; 44   |#define HW_BATT_CTRL_CLEAR_SETMASK (((1<<HW_BATT_CTRL_CLEAR_WIDTH)-1)<<HW_BATT_CTRL_CLEAR_
                                  BITPOS) 
                             7363 ; 45   |#define HW_BATT_CTRL_PWD_SETMASK (((1<<HW_BATT_CTRL_PWD_WIDTH)-1)<<HW_BATT_CTRL_PWD_BITPOS
                                  ) 
                             7364 ; 46   |#define HW_BATT_CTRL_CLK_DIV_SETMASK (((1<<HW_BATT_CTRL_CLK_DIV_WIDTH)-1)<<HW_BATT_CTRL_CL
                                  K_DIV_BITPOS)        
                             7365 ; 47   |#define HW_BATT_CTRL_REF_VAL_SETMASK (((1<<HW_BATT_CTRL_REF_VAL_WIDTH)-1)<<HW_BATT_CTRL_RE
                                  F_VAL_BITPOS)        
                             7366 ; 48   |
                             7367 ; 49   |#define HW_BATT_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_OFFSET_SETMASK)     
                             7368 ; 50   |#define HW_BATT_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_BATT_CTRL_HALF_CMP_PWR_SETMASK)     
                             7369 ; 51   |#define HW_BATT_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_BATT_CTRL_INPUT_DIV2_SETMASK) 
                             7370 ; 52   |#define HW_BATT_CTRL_CLEAR_CLRMASK (~(WORD)HW_BATT_CTRL_CLEAR_SETMASK) 
                             7371 ; 53   |#define HW_BATT_CTRL_PWD_CLRMASK (~(WORD)HW_BATT_CTRL_PWD_SETMASK) 
                             7372 ; 54   |#define HW_BATT_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_BATT_CTRL_CLK_DIV_SETMASK)     
                             7373 ; 55   |#define HW_BATT_CTRL_REF_VAL_CLRMASK (~(WORD)HW_BATT_CTRL_REF_VAL_SETMASK)
                             7374 ; 56   |
                             7375 ; 57   |typedef union               
                             7376 ; 58   |{
                             7377 ; 59   |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 124

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7378 ; 60   |        unsigned int INPUT_OFFSET                 : HW_BATT_CTRL_INPUT_OFFSET_WIDTH;
                             7379 ; 61   |        unsigned int RSVD0                        : HW_BATT_CTRL_RSVD0_WIDTH;
                             7380 ; 62   |        unsigned int HALF_CMP_PWR                 : HW_BATT_CTRL_HALF_CMP_PWR_WIDTH;
                             7381 ; 63   |        unsigned int INPUT_DIV2                   : HW_BATT_CTRL_INPUT_DIV2_WIDTH;
                             7382 ; 64   |        unsigned int CLEAR                        : HW_BATT_CTRL_CLEAR_WIDTH;
                             7383 ; 65   |        unsigned int PWD                          : HW_BATT_CTRL_PWD_WIDTH;
                             7384 ; 66   |        unsigned int CLK_DIV                      : HW_BATT_CTRL_CLK_DIV_WIDTH;
                             7385 ; 67   |        unsigned int RSVD1                        : HW_BATT_CTRL_RSVD1_WIDTH;
                             7386 ; 68   |        unsigned int REF_VAL                      : HW_BATT_CTRL_REF_VAL_WIDTH;
                             7387 ; 69   |        unsigned int RSVD2                        : HW_BATT_CTRL_RSVD2_WIDTH;
                             7388 ; 70   |                 unsigned int IRQ_EN_EVENT0                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT0_WIDTH;
                             7389 ; 71   |                 unsigned int IRQ_EN_EVENT1                               : HW_BATT_CTRL_I
                                  RQ_EN_EVENT1_WIDTH;
                             7390 ; 72   |             unsigned int POLARITY_EVENT0              : HW_BATT_CTRL_POLARITY_EVENT0_WIDT
                                  H;
                             7391 ; 73   |                 unsigned int POLARITY_EVENT1              : HW_BATT_CTRL_POLARITY_EVENT1_
                                  WIDTH;
                             7392 ; 74   |    } B;
                             7393 ; 75   |   unsigned int I;
                             7394 ; 76   |        unsigned int U;
                             7395 ; 77   |} lradc_ctrl_type;
                             7396 ; 78   |#define HW_BATT_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR))    /* Batt
                                  ery LRADC Control Register */
                             7397 ; 79   |
                             7398 ; 80   |
                             7399 ; 81   |/////////////////////////////////////////////////////////////////////////////////
                             7400 ; 82   |//  Battery LRADC Threshold Register (HW_BATT_THRSH) Bit Definitions
                             7401 ; 83   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH (9)
                             7402 ; 84   |#define HW_BATT_THRSH_RSVD0_WIDTH (3)
                             7403 ; 85   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH (9)
                             7404 ; 86   |#define HW_BATT_THRSH_RSVD1_WIDTH (3)
                             7405 ; 87   |
                             7406 ; 88   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS (0)
                             7407 ; 89   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS (12)
                             7408 ; 90   |
                             7409 ; 91   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT0_BITPOS)        
                             7410 ; 92   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_SETMASK (((1<<HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH)
                                  -1)<<HW_BATT_THRSH_THRESHOLD_EVENT1_BITPOS)        
                             7411 ; 93   |
                             7412 ; 94   |#define HW_BATT_THRSH_THRESHOLD_EVENT0_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT0_SETM
                                  ASK)     
                             7413 ; 95   |#define HW_BATT_THRSH_THRESHOLD_EVENT1_CLRMASK (~(WORD)HW_BATT_THRSH_THRESHOLD_EVENT1_SETM
                                  ASK)     
                             7414 ; 96   |
                             7415 ; 97   |
                             7416 ; 98   |typedef union               
                             7417 ; 99   |{
                             7418 ; 100  |    struct {
                             7419 ; 101  |        unsigned int THRESHOLD_EVENT0   : HW_BATT_THRSH_THRESHOLD_EVENT0_WIDTH;
                             7420 ; 102  |        unsigned int RSVD0                  : HW_BATT_THRSH_RSVD0_WIDTH;
                             7421 ; 103  |        unsigned int THRESHOLD_EVENT1   : HW_BATT_THRSH_THRESHOLD_EVENT1_WIDTH;
                             7422 ; 104  |        unsigned int RSVD1              : HW_BATT_THRSH_RSVD1_WIDTH;
                             7423 ; 105  |    } B;
                             7424 ; 106  |    unsigned int I;
                             7425 ; 107  |} lradc_thrsh_type;
                             7426 ; 108  |#define HW_BATT_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+1))    /* 
                                  Battery LRADC Threshold Register */
                             7427 ; 109  |
                             7428 ; 110  |
                             7429 ; 111  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 125

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7430 ; 112  |//  Battery LRADC Result Register (HW_BATT_RESULT) Bit Definitions
                             7431 ; 113  |#define HW_BATT_RESULT_EQ_EVENT1_WIDTH (1)
                             7432 ; 114  |#define HW_BATT_RESULT_EQ_EVENT0_WIDTH (1)
                             7433 ; 115  |#define HW_BATT_RESULT_GT_EVENT1_WIDTH (1)
                             7434 ; 116  |#define HW_BATT_RESULT_GT_EVENT0_WIDTH (1)
                             7435 ; 117  |#define HW_BATT_RESULT_LT_EVENT1_WIDTH (1)
                             7436 ; 118  |#define HW_BATT_RESULT_LT_EVENT0_WIDTH (1)
                             7437 ; 119  |#define HW_BATT_RESULT_RSVD0_WIDTH (2)
                             7438 ; 120  |#define HW_BATT_RESULT_DATA_OUT_WIDTH (9)
                             7439 ; 121  |#define HW_BATT_RESULT_RSVD1_WIDTH (3)
                             7440 ; 122  |#define HW_BATT_RESULT_IRQ_EVENT0_WIDTH (1)
                             7441 ; 123  |#define HW_BATT_RESULT_IRQ_EVENT1_WIDTH (1)
                             7442 ; 124  |#define HW_BATT_RESULT_RSVD2_WIDTH (2)
                             7443 ; 125  |
                             7444 ; 126  |#define HW_BATT_RESULT_EQ_EVENT1_BITPOS (0)
                             7445 ; 127  |#define HW_BATT_RESULT_EQ_EVENT0_BITPOS (1)
                             7446 ; 128  |#define HW_BATT_RESULT_GT_EVENT1_BITPOS (2)
                             7447 ; 129  |#define HW_BATT_RESULT_GT_EVENT0_BITPOS (3)
                             7448 ; 130  |#define HW_BATT_RESULT_LT_EVENT1_BITPOS (4)
                             7449 ; 131  |#define HW_BATT_RESULT_LT_EVENT0_BITPOS (5)
                             7450 ; 132  |#define HW_BATT_RESULT_RSVD0_BITPOS (6)
                             7451 ; 133  |#define HW_BATT_RESULT_DATA_OUT_BITPOS (8)
                             7452 ; 134  |#define HW_BATT_RESULT_RSVD1_BITPOS (17)
                             7453 ; 135  |#define HW_BATT_RESULT_IRQ_EVENT0_BITPOS (20)
                             7454 ; 136  |#define HW_BATT_RESULT_IRQ_EVENT1_BITPOS (21)
                             7455 ; 137  |#define HW_BATT_RESULT_RSVD2_BITPOS (22)
                             7456 ; 138  |
                             7457 ; 139  |
                             7458 ; 140  |
                             7459 ; 141  |#define HW_BATT_RESULT_EQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT1_BITPOS)
                             7460 ; 142  |#define HW_BATT_RESULT_EQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_EQ_EVENT0_BITPOS)
                             7461 ; 143  |#define HW_BATT_RESULT_GT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT1_BITPOS)
                             7462 ; 144  |#define HW_BATT_RESULT_GT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_GT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_GT_EVENT0_BITPOS)
                             7463 ; 145  |#define HW_BATT_RESULT_LT_EVENT1_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT1_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT1_BITPOS)
                             7464 ; 146  |#define HW_BATT_RESULT_LT_EVENT0_SETMASK (((1<<HW_BATT_RESULT_LT_EVENT0_WIDTH)-1)<<HW_BATT
                                  _RESULT_LT_EVENT0_BITPOS)
                             7465 ; 147  |#define HW_BATT_RESULT_RSVD0_SETMASK (((1<<HW_BATT_RESULT_RSVD0_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD0_BITPOS)
                             7466 ; 148  |#define HW_BATT_RESULT_DATA_OUT_SETMASK (((1<<HW_BATT_RESULT_DATA_OUT_WIDTH)-1)<<HW_BATT_R
                                  ESULT_DATA_OUT_BITPOS)
                             7467 ; 149  |#define HW_BATT_RESULT_RSVD1_SETMASK (((1<<HW_BATT_RESULT_RSVD1_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD1_BITPOS)
                             7468 ; 150  |#define HW_BATT_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT0_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT0_BITPOS)
                             7469 ; 151  |#define HW_BATT_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_BATT_RESULT_IRQ_EVENT1_WIDTH)-1)<<HW_BA
                                  TT_RESULT_IRQ_EVENT1_BITPOS)
                             7470 ; 152  |#define HW_BATT_RESULT_RSVD2_SETMASK (((1<<HW_BATT_RESULT_RSVD2_WIDTH)-1)<<HW_BATT_RESULT_
                                  RSVD2_BITPOS)
                             7471 ; 153  |
                             7472 ; 154  |
                             7473 ; 155  |#define HW_BATT_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT1_SETMASK)
                             7474 ; 156  |#define HW_BATT_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_EQ_EVENT0_SETMASK)
                             7475 ; 157  |#define HW_BATT_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT1_SETMASK)
                             7476 ; 158  |#define HW_BATT_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_GT_EVENT0_SETMASK)
                             7477 ; 159  |#define HW_BATT_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT1_SETMASK)
                             7478 ; 160  |#define HW_BATT_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_LT_EVENT0_SETMASK)
                             7479 ; 161  |#define HW_BATT_RESULT_RSVD0_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD0_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 126

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7480 ; 162  |#define HW_BATT_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_BATT_RESULT_DATA_OUT_SETMASK)
                             7481 ; 163  |#define HW_BATT_RESULT_RSVD1_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD1_SETMASK)
                             7482 ; 164  |#define HW_BATT_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT0_SETMASK)
                             7483 ; 165  |#define HW_BATT_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_BATT_RESULT_IRQ_EVENT1_SETMASK)
                             7484 ; 166  |#define HW_BATT_RESULT_RSVD2_CLRMASK (~(WORD)HW_BATT_RESULT_RSVD2_SETMASK)
                             7485 ; 167  |
                             7486 ; 168  |typedef union               
                             7487 ; 169  |{
                             7488 ; 170  |    struct {
                             7489 ; 171  |        unsigned int EQ_EVENT1                  : HW_BATT_RESULT_EQ_EVENT1_WIDTH;
                             7490 ; 172  |        unsigned int EQ_EVENT0                  : HW_BATT_RESULT_EQ_EVENT0_WIDTH;
                             7491 ; 173  |        unsigned int GT_EVENT1                  : HW_BATT_RESULT_GT_EVENT1_WIDTH;
                             7492 ; 174  |        unsigned int GT_EVENT0                  : HW_BATT_RESULT_GT_EVENT0_WIDTH;
                             7493 ; 175  |        unsigned int LT_EVENT1                  : HW_BATT_RESULT_LT_EVENT1_WIDTH;
                             7494 ; 176  |        unsigned int LT_EVENT0                  : HW_BATT_RESULT_LT_EVENT0_WIDTH;
                             7495 ; 177  |        unsigned int RSVD0                     : HW_BATT_RESULT_RSVD0_WIDTH;
                             7496 ; 178  |        unsigned int DATA_OUT                  : HW_BATT_RESULT_DATA_OUT_WIDTH;
                             7497 ; 179  |        unsigned int RSVD1                     : HW_BATT_RESULT_RSVD1_WIDTH;
                             7498 ; 180  |                 unsigned int IRQ_EVENT0                                : HW_BATT_RESULT_I
                                  RQ_EVENT0_WIDTH;
                             7499 ; 181  |                 unsigned int IRQ_EVENT1                                : HW_BATT_RESULT_I
                                  RQ_EVENT1_WIDTH;                        
                             7500 ; 182  |                 unsigned int RSVD2                                         : HW_BATT_RESU
                                  LT_RSVD2_WIDTH;
                             7501 ; 183  |    } B;
                             7502 ; 184  |    unsigned int I;
                             7503 ; 185  |} lradc_result_type;
                             7504 ; 186  |#define HW_BATT_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+2))    /
                                  * Battery LRADC Result Register */
                             7505 ; 187  |
                             7506 ; 188  |
                             7507 ; 189  |
                             7508 ; 190  |/////////////////////////////////////////////////////////////////////////////////
                             7509 ; 191  |//  LRADC1 Control Register (HW_LRADC1_CTRL) Bit Definitions
                             7510 ; 192  |#define HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH (7)
                             7511 ; 193  |#define HW_LRADC1_CTRL_RSVD0_WIDTH (1)
                             7512 ; 194  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7513 ; 195  |#define HW_LRADC1_CTRL_INPUT_DIV2_WIDTH (1)
                             7514 ; 196  |#define HW_LRADC1_CTRL_CLEAR_WIDTH (1)
                             7515 ; 197  |#define HW_LRADC1_CTRL_PWD_WIDTH (1)
                             7516 ; 198  |#define HW_LRADC1_CTRL_CLK_DIV_WIDTH (2)
                             7517 ; 199  |#define HW_LRADC1_CTRL_RSVD1_WIDTH (2)
                             7518 ; 200  |#define HW_LRADC1_CTRL_REF_VAL_WIDTH (2)
                             7519 ; 201  |#define HW_LRADC1_CTRL_RSVD2_WIDTH (6)
                             7520 ; 202  |
                             7521 ; 203  |#define HW_LRADC1_CTRL_INPUT_OFFSET_BITPOS (0)
                             7522 ; 204  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7523 ; 205  |#define HW_LRADC1_CTRL_INPUT_DIV2_BITPOS (9)
                             7524 ; 206  |#define HW_LRADC1_CTRL_CLEAR_BITPOS (10)
                             7525 ; 207  |#define HW_LRADC1_CTRL_PWD_BITPOS (11)
                             7526 ; 208  |#define HW_LRADC1_CTRL_CLK_DIV_BITPOS (12)
                             7527 ; 209  |#define HW_LRADC1_CTRL_REF_VAL_BITPOS (16)
                             7528 ; 210  |
                             7529 ; 211  |#define HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_OFFSET_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_INPUT_OFFSET_BITPOS)        
                             7530 ; 212  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC1_CTRL_HALF_CMP_PWR_WIDTH)-1)<<H
                                  W_LRADC1_CTRL_HALF_CMP_PWR_BITPOS)        
                             7531 ; 213  |#define HW_LRADC1_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC1_CTRL_INPUT_DIV2_WIDTH)-1)<<HW_LR
                                  ADC1_CTRL_INPUT_DIV2_BITPOS) 
                             7532 ; 214  |#define HW_LRADC1_CTRL_CLEAR_SETMASK (((1<<HW_LRADC1_CTRL_CLEAR_WIDTH)-1)<<HW_LRADC1_CTRL_
                                  CLEAR_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 127

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7533 ; 215  |#define HW_LRADC1_CTRL_PWD_SETMASK (((1<<HW_LRADC1_CTRL_PWD_WIDTH)-1)<<HW_LRADC1_CTRL_PWD_
                                  BITPOS) 
                             7534 ; 216  |#define HW_LRADC1_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC1_CTRL_CLK_DIV_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_CLK_DIV_BITPOS)        
                             7535 ; 217  |#define HW_LRADC1_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC1_CTRL_REF_VAL_WIDTH)-1)<<HW_LRADC1_C
                                  TRL_REF_VAL_BITPOS)        
                             7536 ; 218  |
                             7537 ; 219  |#define HW_LRADC1_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_OFFSET_SETMASK)  
                                     
                             7538 ; 220  |#define HW_LRADC1_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC1_CTRL_HALF_CMP_PWR_SETMASK)  
                                     
                             7539 ; 221  |#define HW_LRADC1_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC1_CTRL_INPUT_DIV2_SETMASK) 
                             7540 ; 222  |#define HW_LRADC1_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLEAR_SETMASK) 
                             7541 ; 223  |#define HW_LRADC1_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC1_CTRL_PWD_SETMASK) 
                             7542 ; 224  |#define HW_LRADC1_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC1_CTRL_CLK_DIV_SETMASK)     
                             7543 ; 225  |#define HW_LRADC1_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC1_CTRL_REF_VAL_SETMASK)     
                             7544 ; 226  |
                             7545 ; 227  |#define HW_LRADC1_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+3))    /* 
                                  LRADC1 Control Register */
                             7546 ; 228  |
                             7547 ; 229  |
                             7548 ; 230  |
                             7549 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                             7550 ; 232  |//  LRADC1 Threshold Register (HW_LRADC1_THRSH) Bit Definitions
                             7551 ; 233  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7552 ; 234  |#define HW_LRADC1_THRSH_RSVD0_WIDTH (3)
                             7553 ; 235  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7554 ; 236  |#define HW_LRADC1_THRSH_RSVD1_WIDTH (3)
                             7555 ; 237  |
                             7556 ; 238  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7557 ; 239  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7558 ; 240  |
                             7559 ; 241  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MIN_THRESHOLD_BITPOS)        
                             7560 ; 242  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC1_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC1_THRSH_MAX_THRESHOLD_BITPOS)        
                             7561 ; 243  |
                             7562 ; 244  |#define HW_LRADC1_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7563 ; 245  |#define HW_LRADC1_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC1_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7564 ; 246  |
                             7565 ; 247  |#define HW_LRADC1_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+4))    /
                                  * LRADC1 Threshold Register */
                             7566 ; 248  |
                             7567 ; 249  |/////////////////////////////////////////////////////////////////////////////////
                             7568 ; 250  |//  LRADC1 Result Register (HW_LRADC1_RESULT) Bit Definitions
                             7569 ; 251  |#define HW_LRADC1_RESULT_EQ_EVENT1_WIDTH (1)
                             7570 ; 252  |#define HW_LRADC1_RESULT_EQ_EVENT0_WIDTH (1)
                             7571 ; 253  |#define HW_LRADC1_RESULT_GT_EVENT1_WIDTH (1)
                             7572 ; 254  |#define HW_LRADC1_RESULT_GT_EVENT0_WIDTH (1)
                             7573 ; 255  |#define HW_LRADC1_RESULT_LT_EVENT1_WIDTH (1)
                             7574 ; 256  |#define HW_LRADC1_RESULT_LT_EVENT0_WIDTH (1)
                             7575 ; 257  |#define HW_LRADC1_RESULT_RSVD0_WIDTH (2)
                             7576 ; 258  |#define HW_LRADC1_RESULT_DATA_OUT_WIDTH (9)
                             7577 ; 259  |#define HW_LRADC1_RESULT_RSVD1_WIDTH (3)
                             7578 ; 260  |#define HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH (1)
                             7579 ; 261  |#define HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH (1)
                             7580 ; 262  |#define HW_LRADC1_RESULT_RSVD2_WIDTH (2)
                             7581 ; 263  |
                             7582 ; 264  |#define HW_LRADC1_RESULT_EQ_EVENT1_BITPOS (0)
                             7583 ; 265  |#define HW_LRADC1_RESULT_EQ_EVENT0_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 128

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7584 ; 266  |#define HW_LRADC1_RESULT_GT_EVENT1_BITPOS (2)
                             7585 ; 267  |#define HW_LRADC1_RESULT_GT_EVENT0_BITPOS (3)
                             7586 ; 268  |#define HW_LRADC1_RESULT_LT_EVENT1_BITPOS (4)
                             7587 ; 269  |#define HW_LRADC1_RESULT_LT_EVENT0_BITPOS (5)
                             7588 ; 270  |#define HW_LRADC1_RESULT_RSVD0_BITPOS (6)
                             7589 ; 271  |#define HW_LRADC1_RESULT_DATA_OUT_BITPOS (8)
                             7590 ; 272  |#define HW_LRADC1_RESULT_RSVD1_BITPOS (17)
                             7591 ; 273  |#define HW_LRADC1_RESULT_IRQ_EVENT0_BITPOS (20)
                             7592 ; 274  |#define HW_LRADC1_RESULT_IRQ_EVENT1_BITPOS (21)
                             7593 ; 275  |#define HW_LRADC1_RESULT_RSVD2_BITPOS (22)
                             7594 ; 276  |
                             7595 ; 277  |#define HW_LRADC1_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT1_BITPOS)
                             7596 ; 278  |#define HW_LRADC1_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_EQ_EVENT0_BITPOS)
                             7597 ; 279  |#define HW_LRADC1_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT1_BITPOS)
                             7598 ; 280  |#define HW_LRADC1_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_GT_EVENT0_BITPOS)
                             7599 ; 281  |#define HW_LRADC1_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT1_BITPOS)
                             7600 ; 282  |#define HW_LRADC1_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC1_RESULT_LT_EVENT0_BITPOS)
                             7601 ; 283  |#define HW_LRADC1_RESULT_RSVD0_SETMASK (((1<<HW_LRADC1_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD0_BITPOS)
                             7602 ; 284  |#define HW_LRADC1_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC1_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC1_RESULT_DATA_OUT_BITPOS)
                             7603 ; 285  |#define HW_LRADC1_RESULT_RSVD1_SETMASK (((1<<HW_LRADC1_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD1_BITPOS)
                             7604 ; 286  |#define HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT0_BITPOS)
                             7605 ; 287  |#define HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC1_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC1_RESULT_IRQ_EVENT1_BITPOS)
                             7606 ; 288  |#define HW_LRADC1_RESULT_RSVD2_SETMASK (((1<<HW_LRADC1_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC1_R
                                  ESULT_RSVD2_BITPOS)
                             7607 ; 289  |
                             7608 ; 290  |
                             7609 ; 291  |#define HW_LRADC1_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT1_SETMASK)
                             7610 ; 292  |#define HW_LRADC1_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_EQ_EVENT0_SETMASK)
                             7611 ; 293  |#define HW_LRADC1_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT1_SETMASK)
                             7612 ; 294  |#define HW_LRADC1_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_GT_EVENT0_SETMASK)
                             7613 ; 295  |#define HW_LRADC1_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT1_SETMASK)
                             7614 ; 296  |#define HW_LRADC1_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_LT_EVENT0_SETMASK)
                             7615 ; 297  |#define HW_LRADC1_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD0_SETMASK)
                             7616 ; 298  |#define HW_LRADC1_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC1_RESULT_DATA_OUT_SETMASK)
                             7617 ; 299  |#define HW_LRADC1_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD1_SETMASK)
                             7618 ; 300  |#define HW_LRADC1_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT0_SETMASK)
                             7619 ; 301  |#define HW_LRADC1_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC1_RESULT_IRQ_EVENT1_SETMASK)
                             7620 ; 302  |#define HW_LRADC1_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC1_RESULT_RSVD2_SETMASK)
                             7621 ; 303  |
                             7622 ; 304  |#define HW_LRADC1_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+5))   
                                   /* LRADC1 Result Register */
                             7623 ; 305  |
                             7624 ; 306  |/////////////////////////////////////////////////////////////////////////////////
                             7625 ; 307  |//  LRADC2_CTRL Control Register (HW_LRADC2_CTRL_CTRL) Bit Definitions
                             7626 ; 308  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WIDTH (7)
                             7627 ; 309  |#define HW_LRADC2_CTRL_CTRL_RSVD0_WIDTH (1)
                             7628 ; 310  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WIDTH (1)
                             7629 ; 311  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH (1)
                             7630 ; 312  |#define HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH (1)
                             7631 ; 313  |#define HW_LRADC2_CTRL_CTRL_PWD_WIDTH (1)
                             7632 ; 314  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH (2)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 129

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7633 ; 315  |#define HW_LRADC2_CTRL_CTRL_RSVD1_WIDTH (2)
                             7634 ; 316  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH (2)
                             7635 ; 317  |#define HW_LRADC2_CTRL_CTRL_RSVD2_WIDTH (6)
                             7636 ; 318  |
                             7637 ; 319  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS (0)
                             7638 ; 320  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS (8)
                             7639 ; 321  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS (9)
                             7640 ; 322  |#define HW_LRADC2_CTRL_CTRL_CLEAR_BITPOS (10)
                             7641 ; 323  |#define HW_LRADC2_CTRL_CTRL_PWD_BITPOS (11)
                             7642 ; 324  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS (12)
                             7643 ; 325  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_BITPOS (16)
                             7644 ; 326  |
                             7645 ; 327  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_BITPOS)        
                             7646 ; 328  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_WI
                                  DTH)-1)<<HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_BITPOS)        
                             7647 ; 329  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_WIDTH)
                                  -1)<<HW_LRADC2_CTRL_CTRL_INPUT_DIV2_BITPOS) 
                             7648 ; 330  |#define HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLEAR_WIDTH)-1)<<HW_LR
                                  ADC2_CTRL_CTRL_CLEAR_BITPOS) 
                             7649 ; 331  |#define HW_LRADC2_CTRL_CTRL_PWD_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_PWD_WIDTH)-1)<<HW_LRADC2
                                  _CTRL_CTRL_PWD_BITPOS) 
                             7650 ; 332  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_CLK_DIV_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_CLK_DIV_BITPOS)        
                             7651 ; 333  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK (((1<<HW_LRADC2_CTRL_CTRL_REF_VAL_WIDTH)-1)<<H
                                  W_LRADC2_CTRL_CTRL_REF_VAL_BITPOS)        
                             7652 ; 334  |
                             7653 ; 335  |#define HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_OFFSET_
                                  SETMASK)     
                             7654 ; 336  |#define HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_HALF_CMP_PWR_
                                  SETMASK)     
                             7655 ; 337  |#define HW_LRADC2_CTRL_CTRL_INPUT_DIV2_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_INPUT_DIV2_SETM
                                  ASK) 
                             7656 ; 338  |#define HW_LRADC2_CTRL_CTRL_CLEAR_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLEAR_SETMASK) 
                             7657 ; 339  |#define HW_LRADC2_CTRL_CTRL_PWD_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_PWD_SETMASK) 
                             7658 ; 340  |#define HW_LRADC2_CTRL_CTRL_CLK_DIV_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_CLK_DIV_SETMASK)  
                                     
                             7659 ; 341  |#define HW_LRADC2_CTRL_CTRL_REF_VAL_CLRMASK (~(WORD)HW_LRADC2_CTRL_CTRL_REF_VAL_SETMASK)  
                                     
                             7660 ; 342  |
                             7661 ; 343  |
                             7662 ; 344  |#define HW_LRADC2_CTRL      (*(volatile lradc_ctrl_type _X*) (HW_LRADC_BASEADDR+6))    /* 
                                  LRADC2_CTRL Control Register */
                             7663 ; 345  |
                             7664 ; 346  |
                             7665 ; 347  |
                             7666 ; 348  |/////////////////////////////////////////////////////////////////////////////////
                             7667 ; 349  |//  LRADC2 Threshold Register (HW_LRADC2_THRSH) Bit Definitions
                             7668 ; 350  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH (9)
                             7669 ; 351  |#define HW_LRADC2_THRSH_RSVD0_WIDTH (3)
                             7670 ; 352  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH (9)
                             7671 ; 353  |#define HW_LRADC2_THRSH_RSVD1_WIDTH (3)
                             7672 ; 354  |
                             7673 ; 355  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS (0)
                             7674 ; 356  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS (12)
                             7675 ; 357  |
                             7676 ; 358  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MIN_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MIN_THRESHOLD_BITPOS)        
                             7677 ; 359  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_SETMASK (((1<<HW_LRADC2_THRSH_MAX_THRESHOLD_WIDTH)-1
                                  )<<HW_LRADC2_THRSH_MAX_THRESHOLD_BITPOS)        
                             7678 ; 360  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 130

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7679 ; 361  |#define HW_LRADC2_THRSH_MIN_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MIN_THRESHOLD_SETMAS
                                  K)     
                             7680 ; 362  |#define HW_LRADC2_THRSH_MAX_THRESHOLD_CLRMASK (~(WORD)HW_LRADC2_THRSH_MAX_THRESHOLD_SETMAS
                                  K)     
                             7681 ; 363  |
                             7682 ; 364  |#define HW_LRADC2_THRSH      (*(volatile lradc_thrsh_type _X*) (HW_LRADC_BASEADDR+7))    /
                                  * LRADC2 Threshold Register */
                             7683 ; 365  |
                             7684 ; 366  |
                             7685 ; 367  |
                             7686 ; 368  |/////////////////////////////////////////////////////////////////////////////////
                             7687 ; 369  |//  LRADC2 Result Register (HW_LRADC2_RESULT) Bit Definitions
                             7688 ; 370  |#define HW_LRADC2_RESULT_EQ_EVENT1_WIDTH (1)
                             7689 ; 371  |#define HW_LRADC2_RESULT_EQ_EVENT0_WIDTH (1)
                             7690 ; 372  |#define HW_LRADC2_RESULT_GT_EVENT1_WIDTH (1)
                             7691 ; 373  |#define HW_LRADC2_RESULT_GT_EVENT0_WIDTH (1)
                             7692 ; 374  |#define HW_LRADC2_RESULT_LT_EVENT1_WIDTH (1)
                             7693 ; 375  |#define HW_LRADC2_RESULT_LT_EVENT0_WIDTH (1)
                             7694 ; 376  |#define HW_LRADC2_RESULT_RSVD0_WIDTH (2)
                             7695 ; 377  |#define HW_LRADC2_RESULT_DATA_OUT_WIDTH (9)
                             7696 ; 378  |#define HW_LRADC2_RESULT_RSVD1_WIDTH (3)
                             7697 ; 379  |#define HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH (1)
                             7698 ; 380  |#define HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH (1)
                             7699 ; 381  |#define HW_LRADC2_RESULT_RSVD2_WIDTH (2)
                             7700 ; 382  |
                             7701 ; 383  |#define HW_LRADC2_RESULT_EQ_EVENT1_BITPOS (0)
                             7702 ; 384  |#define HW_LRADC2_RESULT_EQ_EVENT0_BITPOS (1)
                             7703 ; 385  |#define HW_LRADC2_RESULT_GT_EVENT1_BITPOS (2)
                             7704 ; 386  |#define HW_LRADC2_RESULT_GT_EVENT0_BITPOS (3)
                             7705 ; 387  |#define HW_LRADC2_RESULT_LT_EVENT1_BITPOS (4)
                             7706 ; 388  |#define HW_LRADC2_RESULT_LT_EVENT0_BITPOS (5)
                             7707 ; 389  |#define HW_LRADC2_RESULT_RSVD0_BITPOS (6)
                             7708 ; 390  |#define HW_LRADC2_RESULT_DATA_OUT_BITPOS (8)
                             7709 ; 391  |#define HW_LRADC2_RESULT_RSVD1_BITPOS (17)
                             7710 ; 392  |#define HW_LRADC2_RESULT_IRQ_EVENT0_BITPOS (20)
                             7711 ; 393  |#define HW_LRADC2_RESULT_IRQ_EVENT1_BITPOS (21)
                             7712 ; 394  |#define HW_LRADC2_RESULT_RSVD2_BITPOS (22)
                             7713 ; 395  |
                             7714 ; 396  |#define HW_LRADC2_RESULT_EQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT1_BITPOS)
                             7715 ; 397  |#define HW_LRADC2_RESULT_EQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_EQ_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_EQ_EVENT0_BITPOS)
                             7716 ; 398  |#define HW_LRADC2_RESULT_GT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT1_BITPOS)
                             7717 ; 399  |#define HW_LRADC2_RESULT_GT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_GT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_GT_EVENT0_BITPOS)
                             7718 ; 400  |#define HW_LRADC2_RESULT_LT_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT1_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT1_BITPOS)
                             7719 ; 401  |#define HW_LRADC2_RESULT_LT_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_LT_EVENT0_WIDTH)-1)<<HW_
                                  LRADC2_RESULT_LT_EVENT0_BITPOS)
                             7720 ; 402  |#define HW_LRADC2_RESULT_RSVD0_SETMASK (((1<<HW_LRADC2_RESULT_RSVD0_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD0_BITPOS)
                             7721 ; 403  |#define HW_LRADC2_RESULT_DATA_OUT_SETMASK (((1<<HW_LRADC2_RESULT_DATA_OUT_WIDTH)-1)<<HW_LR
                                  ADC2_RESULT_DATA_OUT_BITPOS)
                             7722 ; 404  |#define HW_LRADC2_RESULT_RSVD1_SETMASK (((1<<HW_LRADC2_RESULT_RSVD1_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD1_BITPOS)
                             7723 ; 405  |#define HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT0_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT0_BITPOS)
                             7724 ; 406  |#define HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK (((1<<HW_LRADC2_RESULT_IRQ_EVENT1_WIDTH)-1)<<H
                                  W_LRADC2_RESULT_IRQ_EVENT1_BITPOS)
                             7725 ; 407  |#define HW_LRADC2_RESULT_RSVD2_SETMASK (((1<<HW_LRADC2_RESULT_RSVD2_WIDTH)-1)<<HW_LRADC2_R
                                  ESULT_RSVD2_BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 131

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7726 ; 408  |
                             7727 ; 409  |#define HW_LRADC2_RESULT_EQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT1_SETMASK)
                             7728 ; 410  |#define HW_LRADC2_RESULT_EQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_EQ_EVENT0_SETMASK)
                             7729 ; 411  |#define HW_LRADC2_RESULT_GT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT1_SETMASK)
                             7730 ; 412  |#define HW_LRADC2_RESULT_GT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_GT_EVENT0_SETMASK)
                             7731 ; 413  |#define HW_LRADC2_RESULT_LT_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT1_SETMASK)
                             7732 ; 414  |#define HW_LRADC2_RESULT_LT_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_LT_EVENT0_SETMASK)
                             7733 ; 415  |#define HW_LRADC2_RESULT_RSVD0_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD0_SETMASK)
                             7734 ; 416  |#define HW_LRADC2_RESULT_DATA_OUT_CLRMASK (~(WORD)HW_LRADC2_RESULT_DATA_OUT_SETMASK)
                             7735 ; 417  |#define HW_LRADC2_RESULT_RSVD1_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD1_SETMASK)
                             7736 ; 418  |#define HW_LRADC2_RESULT_IRQ_EVENT0_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT0_SETMASK)
                             7737 ; 419  |#define HW_LRADC2_RESULT_IRQ_EVENT1_CLRMASK (~(WORD)HW_LRADC2_RESULT_IRQ_EVENT1_SETMASK)
                             7738 ; 420  |#define HW_LRADC2_RESULT_RSVD2_CLRMASK (~(WORD)HW_LRADC2_RESULT_RSVD2_SETMASK)
                             7739 ; 421  |
                             7740 ; 422  |#define HW_LRADC2_RESULT      (*(volatile lradc_result_type _X*) (HW_LRADC_BASEADDR+8))   
                                   /* LRADC2 Result Register */
                             7741 ; 423  |#define HW_LRADC_REF_0_SETMASK                  0x0<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7742 ; 424  |#define HW_LRADC_REF_1_SETMASK                  0x1<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7743 ; 425  |#define HW_LRADC_REF_2_SETMASK                  0x2<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7744 ; 426  |#define HW_LRADC_REF_3_SETMASK                  0x3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7745 ; 427  |#define HW_LRADC_REF_4_SETMASK                  HW_LRADC_REF_0_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7746 ; 428  |#define HW_LRADC_REF_5_SETMASK                  HW_LRADC_REF_1_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7747 ; 429  |#define HW_LRADC_REF_6_SETMASK                  HW_LRADC_REF_2_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7748 ; 430  |#define HW_LRADC_REF_7_SETMASK                  HW_LRADC_REF_3_SETMASK|HW_BATT_CTRL_INPUT_
                                  DIV2_SETMASK
                             7749 ; 431  |#define HW_LRADC_RES_REF_0                              80
                             7750 ; 432  |#define HW_LRADC_RES_REF_1                              77
                             7751 ; 433  |#define HW_LRADC_RES_REF_2                              100
                             7752 ; 434  |#define HW_LRADC_RES_REF_3                              129
                             7753 ; 435  |#define HW_LRADC_RES_REF_4                              160
                             7754 ; 436  |#define HW_LRADC_RES_REF_5                              154
                             7755 ; 437  |#define HW_LRADC_RES_REF_6                              200
                             7756 ; 438  |#define HW_LRADC_RES_REF_7                              258
                             7757 ; 439  |#define LRADC_HALF_POWER_SETMASK                HW_BATT_CTRL_HALF_CMP_PWR_SETMASK         
                                   
                             7758 ; 440  |// Translate the generic API enumerations into more meaningful labels for the implementati
                                  on
                             7759 ; 441  |#define REF_2700MV                      HW_LRADC_REF_0_SETMASK
                             7760 ; 442  |#define REF_2600MV              HW_LRADC_REF_1_SETMASK
                             7761 ; 443  |#define REF_2560MV              HW_LRADC_REF_2_SETMASK
                             7762 ; 444  |#define REF_VDDIO               HW_LRADC_REF_3_SETMASK
                             7763 ; 445  |#define REF_5400MV              HW_LRADC_REF_4_SETMASK
                             7764 ; 446  |#define REF_5200MV              HW_LRADC_REF_5_SETMASK
                             7765 ; 447  |#define REF_5120MV              HW_LRADC_REF_6_SETMASK
                             7766 ; 448  |#define REF_VDDIOx2             HW_LRADC_REF_7_SETMASK
                             7767 ; 449  |#define RES_REF_2700MV  HW_LRADC_RES_REF_0
                             7768 ; 450  |#define RES_REF_2600MV  HW_LRADC_RES_REF_1
                             7769 ; 451  |#define RES_REF_2560MV  HW_LRADC_RES_REF_2
                             7770 ; 452  |#define RES_REF_VDDIO   HW_LRADC_RES_REF_3
                             7771 ; 453  |#define RES_REF_5400MV  HW_LRADC_RES_REF_4
                             7772 ; 454  |#define RES_REF_5200MV  HW_LRADC_RES_REF_5
                             7773 ; 455  |#define RES_REF_5120MV  HW_LRADC_RES_REF_6
                             7774 ; 456  |#define RES_REF_VDDIOx2         HW_LRADC_RES_REF_7
                             7775 ; 457  |
                             7776 ; 458  |//Needed by button.asm
                             7777 ; 459  |#define LOW_RES_ADC_BATT_READ_MASK 0x01FF00
                             7778 ; 460  |#define LOW_RES_ADC_AUX_READ_MASK 0x01FF00
                             7779 ; 461  |#define LOW_RES_ADC_AUX2_READ_MASK 0x01FF00
                             7780 ; 462  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 132

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7781 ; 463  |#define HW_LRADC_CTRL_AUXADC_SETMASK 3<<HW_BATT_CTRL_REF_VAL_BITPOS
                             7782 ; 464  |
                             7783 ; 465  |#endif
                             7784 ; 466  |
                             7785 ; 467  |
                             7786 
                             7788 
                             7789 ; 27   |#include "regspwm.h"
                             7790 
                             7792 
                             7793 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             7794 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                             7795 ; 3    |// Filename: regspwm.inc
                             7796 ; 4    |// Description: Register definitions for PWM interface
                             7797 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             7798 ; 6    |// The following naming conventions are followed in this file.
                             7799 ; 7    |// All registers are named using the format...
                             7800 ; 8    |//     HW_<module>_<regname>
                             7801 ; 9    |// where <module> is the module name which can be any of the following...
                             7802 ; 10   |//     USB20
                             7803 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             7804 ; 12   |// module name includes a number starting from 0 for the first instance of
                             7805 ; 13   |// that module)
                             7806 ; 14   |// <regname> is the specific register within that module
                             7807 ; 15   |// We also define the following...
                             7808 ; 16   |//     HW_<module>_<regname>_BITPOS
                             7809 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             7810 ; 18   |//     HW_<module>_<regname>_SETMASK
                             7811 ; 19   |// which does something else, and
                             7812 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             7813 ; 21   |// which does something else.
                             7814 ; 22   |// Other rules
                             7815 ; 23   |//     All caps
                             7816 ; 24   |//     Numeric identifiers start at 0
                             7817 ; 25   |#if !(defined(regspwminc))
                             7818 ; 26   |#define regspwminc 1
                             7819 ; 27   |
                             7820 ; 28   |#include "types.h"
                             7821 
                             7823 
                             7824 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             7825 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             7826 ; 3    |//
                             7827 ; 4    |// Filename: types.h
                             7828 ; 5    |// Description: Standard data types
                             7829 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             7830 ; 7    |
                             7831 ; 8    |#ifndef _TYPES_H
                             7832 ; 9    |#define _TYPES_H
                             7833 ; 10   |
                             7834 ; 11   |// TODO:  move this outta here!
                             7835 ; 12   |#if !defined(NOERROR)
                             7836 ; 13   |#define NOERROR 0
                             7837 ; 14   |#define SUCCESS 0
                             7838 ; 15   |#endif 
                             7839 ; 16   |#if !defined(SUCCESS)
                             7840 ; 17   |#define SUCCESS  0
                             7841 ; 18   |#endif
                             7842 ; 19   |#if !defined(ERROR)
                             7843 ; 20   |#define ERROR   -1
                             7844 ; 21   |#endif
                             7845 ; 22   |#if !defined(FALSE)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 133

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7846 ; 23   |#define FALSE 0
                             7847 ; 24   |#endif
                             7848 ; 25   |#if !defined(TRUE)
                             7849 ; 26   |#define TRUE  1
                             7850 ; 27   |#endif
                             7851 ; 28   |
                             7852 ; 29   |#if !defined(NULL)
                             7853 ; 30   |#define NULL 0
                             7854 ; 31   |#endif
                             7855 ; 32   |
                             7856 ; 33   |#define MAX_INT     0x7FFFFF
                             7857 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             7858 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             7859 ; 36   |#define MAX_ULONG   (-1) 
                             7860 ; 37   |
                             7861 ; 38   |#define WORD_SIZE   24              // word size in bits
                             7862 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             7863 ; 40   |
                             7864 ; 41   |
                             7865 ; 42   |#define BYTE    unsigned char       // btVarName
                             7866 ; 43   |#define CHAR    signed char         // cVarName
                             7867 ; 44   |#define USHORT  unsigned short      // usVarName
                             7868 ; 45   |#define SHORT   unsigned short      // sVarName
                             7869 ; 46   |#define WORD    unsigned int        // wVarName
                             7870 ; 47   |#define INT     signed int          // iVarName
                             7871 ; 48   |#define DWORD   unsigned long       // dwVarName
                             7872 ; 49   |#define LONG    signed long         // lVarName
                             7873 ; 50   |#define BOOL    unsigned int        // bVarName
                             7874 ; 51   |#define FRACT   _fract              // frVarName
                             7875 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             7876 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             7877 ; 54   |#define FLOAT   float               // fVarName
                             7878 ; 55   |#define DBL     double              // dVarName
                             7879 ; 56   |#define ENUM    enum                // eVarName
                             7880 ; 57   |#define CMX     _complex            // cmxVarName
                             7881 ; 58   |typedef WORD UCS3;                   // 
                             7882 ; 59   |
                             7883 ; 60   |#define UINT16  unsigned short
                             7884 ; 61   |#define UINT8   unsigned char   
                             7885 ; 62   |#define UINT32  unsigned long
                             7886 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7887 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             7888 ; 65   |#define WCHAR   UINT16
                             7889 ; 66   |
                             7890 ; 67   |//UINT128 is 16 bytes or 6 words
                             7891 ; 68   |typedef struct UINT128_3500 {   
                             7892 ; 69   |    int val[6];     
                             7893 ; 70   |} UINT128_3500;
                             7894 ; 71   |
                             7895 ; 72   |#define UINT128   UINT128_3500
                             7896 ; 73   |
                             7897 ; 74   |// Little endian word packed byte strings:   
                             7898 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7899 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7900 ; 77   |// Little endian word packed byte strings:   
                             7901 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             7902 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             7903 ; 80   |
                             7904 ; 81   |// Declare Memory Spaces To Use When Coding
                             7905 ; 82   |// A. Sector Buffers
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 134

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7906 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             7907 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             7908 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             7909 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             7910 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             7911 ; 88   |// B. Media DDI Memory
                             7912 ; 89   |#define MEDIA_DDI_MEM _Y
                             7913 ; 90   |
                             7914 ; 91   |
                             7915 ; 92   |
                             7916 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             7917 ; 94   |// Examples of circular pointers:
                             7918 ; 95   |//    INT CIRC cpiVarName
                             7919 ; 96   |//    DWORD CIRC cpdwVarName
                             7920 ; 97   |
                             7921 ; 98   |#define RETCODE INT                 // rcVarName
                             7922 ; 99   |
                             7923 ; 100  |// generic bitfield structure
                             7924 ; 101  |struct Bitfield {
                             7925 ; 102  |    unsigned int B0  :1;
                             7926 ; 103  |    unsigned int B1  :1;
                             7927 ; 104  |    unsigned int B2  :1;
                             7928 ; 105  |    unsigned int B3  :1;
                             7929 ; 106  |    unsigned int B4  :1;
                             7930 ; 107  |    unsigned int B5  :1;
                             7931 ; 108  |    unsigned int B6  :1;
                             7932 ; 109  |    unsigned int B7  :1;
                             7933 ; 110  |    unsigned int B8  :1;
                             7934 ; 111  |    unsigned int B9  :1;
                             7935 ; 112  |    unsigned int B10 :1;
                             7936 ; 113  |    unsigned int B11 :1;
                             7937 ; 114  |    unsigned int B12 :1;
                             7938 ; 115  |    unsigned int B13 :1;
                             7939 ; 116  |    unsigned int B14 :1;
                             7940 ; 117  |    unsigned int B15 :1;
                             7941 ; 118  |    unsigned int B16 :1;
                             7942 ; 119  |    unsigned int B17 :1;
                             7943 ; 120  |    unsigned int B18 :1;
                             7944 ; 121  |    unsigned int B19 :1;
                             7945 ; 122  |    unsigned int B20 :1;
                             7946 ; 123  |    unsigned int B21 :1;
                             7947 ; 124  |    unsigned int B22 :1;
                             7948 ; 125  |    unsigned int B23 :1;
                             7949 ; 126  |};
                             7950 ; 127  |
                             7951 ; 128  |union BitInt {
                             7952 ; 129  |        struct Bitfield B;
                             7953 ; 130  |        int        I;
                             7954 ; 131  |};
                             7955 ; 132  |
                             7956 ; 133  |#define MAX_MSG_LENGTH 10
                             7957 ; 134  |struct CMessage
                             7958 ; 135  |{
                             7959 ; 136  |        unsigned int m_uLength;
                             7960 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             7961 ; 138  |};
                             7962 ; 139  |
                             7963 ; 140  |typedef struct {
                             7964 ; 141  |    WORD m_wLength;
                             7965 ; 142  |    WORD m_wMessage;
                             7966 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             7967 ; 144  |} Message;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 135

M:ADDR CODE           CYCLES LINE SOURCELINE
                             7968 ; 145  |
                             7969 ; 146  |struct MessageQueueDescriptor
                             7970 ; 147  |{
                             7971 ; 148  |        int *m_pBase;
                             7972 ; 149  |        int m_iModulo;
                             7973 ; 150  |        int m_iSize;
                             7974 ; 151  |        int *m_pHead;
                             7975 ; 152  |        int *m_pTail;
                             7976 ; 153  |};
                             7977 ; 154  |
                             7978 ; 155  |struct ModuleEntry
                             7979 ; 156  |{
                             7980 ; 157  |    int m_iSignaledEventMask;
                             7981 ; 158  |    int m_iWaitEventMask;
                             7982 ; 159  |    int m_iResourceOfCode;
                             7983 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             7984 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             7985 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             7986 ; 163  |    int m_uTimeOutHigh;
                             7987 ; 164  |    int m_uTimeOutLow;
                             7988 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             7989 ; 166  |};
                             7990 ; 167  |
                             7991 ; 168  |union WaitMask{
                             7992 ; 169  |    struct B{
                             7993 ; 170  |        unsigned int m_bNone     :1;
                             7994 ; 171  |        unsigned int m_bMessage  :1;
                             7995 ; 172  |        unsigned int m_bTimer    :1;
                             7996 ; 173  |        unsigned int m_bButton   :1;
                             7997 ; 174  |    } B;
                             7998 ; 175  |    int I;
                             7999 ; 176  |} ;
                             8000 ; 177  |
                             8001 ; 178  |
                             8002 ; 179  |struct Button {
                             8003 ; 180  |        WORD wButtonEvent;
                             8004 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8005 ; 182  |};
                             8006 ; 183  |
                             8007 ; 184  |struct Message {
                             8008 ; 185  |        WORD wMsgLength;
                             8009 ; 186  |        WORD wMsgCommand;
                             8010 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8011 ; 188  |};
                             8012 ; 189  |
                             8013 ; 190  |union EventTypes {
                             8014 ; 191  |        struct CMessage msg;
                             8015 ; 192  |        struct Button Button ;
                             8016 ; 193  |        struct Message Message;
                             8017 ; 194  |};
                             8018 ; 195  |
                             8019 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8020 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8021 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8022 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8023 ; 200  |
                             8024 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8025 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8026 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8027 ; 204  |
                             8028 ; 205  |#if DEBUG
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 136

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8029 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8030 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             8031 ; 208  |#else 
                             8032 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8033 ; 210  |#define DebugBuildAssert(x)    
                             8034 ; 211  |#endif
                             8035 ; 212  |
                             8036 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8037 ; 214  |//  #pragma asm
                             8038 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8039 ; 216  |//  #pragma endasm
                             8040 ; 217  |
                             8041 ; 218  |
                             8042 ; 219  |#ifdef COLOR_262K
                             8043 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8044 ; 221  |#elif defined(COLOR_65K)
                             8045 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8046 ; 223  |#else
                             8047 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8048 ; 225  |#endif
                             8049 ; 226  |    
                             8050 ; 227  |#endif // #ifndef _TYPES_H
                             8051 
                             8053 
                             8054 ; 29   |
                             8055 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8056 ; 31   |//   Pulse Width Modulator STMP Registers 
                             8057 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8058 ; 33   |#define HW_PWM_BASEADDR (0xFA31)
                             8059 ; 34   |
                             8060 ; 35   |
                             8061 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                             8062 ; 37   |//  PWM CSR register (HW_PWM_CSR) Bit Definitions
                             8063 ; 38   |#define HW_PWM_CSR_PWM0_EN_BITPOS (0)
                             8064 ; 39   |#define HW_PWM_CSR_PWM1_EN_BITPOS (1) 
                             8065 ; 40   |#define HW_PWM_CSR_PWM2_EN_BITPOS (2)
                             8066 ; 41   |#define HW_PWM_CSR_PWM3_EN_BITPOS (3)
                             8067 ; 42   |#define HW_PWM_CSR_CDIV_BITPOS (8)
                             8068 ; 43   |#define HW_PWM_CSR_MSTR_EN_BITPOS (23)
                             8069 ; 44   |
                             8070 ; 45   |#define HW_PWM_CSR_PWM0_EN_WIDTH (1)
                             8071 ; 46   |#define HW_PWM_CSR_PWM1_EN_WIDTH (1) 
                             8072 ; 47   |#define HW_PWM_CSR_PWM2_EN_WIDTH (1)
                             8073 ; 48   |#define HW_PWM_CSR_PWM3_EN_WIDTH (1)
                             8074 ; 49   |#define HW_PWM_CSR_CDIV_WIDTH (2)
                             8075 ; 50   |#define HW_PWM_CSR_MSTR_EN_WIDTH (1)
                             8076 ; 51   |
                             8077 ; 52   |#define HW_PWM_CSR_PWM0_EN_SETMASK (((1<<HW_PWM_CSR_PWM0_EN_WIDTH)-1)<<HW_PWM_CSR_PWM0_EN_
                                  BITPOS)
                             8078 ; 53   |#define HW_PWM_CSR_PWM1_EN_SETMASK (((1<<HW_PWM_CSR_PWM1_EN_WIDTH)-1)<<HW_PWM_CSR_PWM1_EN_
                                  BITPOS)
                             8079 ; 54   |#define HW_PWM_CSR_PWM2_EN_SETMASK (((1<<HW_PWM_CSR_PWM2_EN_WIDTH)-1)<<HW_PWM_CSR_PWM2_EN_
                                  BITPOS)
                             8080 ; 55   |#define HW_PWM_CSR_PWM3_EN_SETMASK (((1<<HW_PWM_CSR_PWM3_EN_WIDTH)-1)<<HW_PWM_CSR_PWM3_EN_
                                  BITPOS)
                             8081 ; 56   |#define HW_PWM_CSR_CDIV_SETMASK (((1<<HW_PWM_CSR_CDIV_WIDTH)-1)<<HW_PWM_CSR_CDIV_BITPOS)
                             8082 ; 57   |#define HW_PWM_CSR_MSTR_EN_SETMASK (((1<<HW_PWM_CSR_MSTR_EN_WIDTH)-1)<<HW_PWM_CSR_MSTR_EN_
                                  BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 137

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8083 ; 58   |
                             8084 ; 59   |#define HW_PWM_CSR_PWM0_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM0_EN_SETMASK)
                             8085 ; 60   |#define HW_PWM_CSR_PWM1_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM1_EN_SETMASK)
                             8086 ; 61   |#define HW_PWM_CSR_PWM2_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM2_EN_SETMASK)
                             8087 ; 62   |#define HW_PWM_CSR_PWM3_EN_CLRMASK (~(WORD)HW_PWM_CSR_PWM3_EN_SETMASK)
                             8088 ; 63   |#define HW_PWM_CSR_CDIV_CLRMASK (~(WORD)HW_PWM_CSR_CDIV_SETMASK)   
                             8089 ; 64   |#define HW_PWM_CSR_MSTR_EN_CLRMASK (~(WORD)HW_PWM_CSR_MSTR_EN_SETMASK)
                             8090 ; 65   |
                             8091 ; 66   |typedef union               
                             8092 ; 67   |{
                             8093 ; 68   |    struct {
                             8094 ; 69   |        int PWM0_EN                    :1;
                             8095 ; 70   |        int PWM1_EN                    :1;
                             8096 ; 71   |        int PWM2_EN                    :1;
                             8097 ; 72   |        int PWM3_EN                    :1;
                             8098 ; 73   |        int RSVD0                      :4;
                             8099 ; 74   |        int CDIV                       :2;
                             8100 ; 75   |        int RSVD1                      :13;
                             8101 ; 76   |        int MSTR_EN                    :1;
                             8102 ; 77   |    } B;
                             8103 ; 78   |    int I;
                             8104 ; 79   |} pwmcsr_type;
                             8105 ; 80   |#define HW_PWM_CSR        (*(volatile pwmcsr_type _X*) (HW_PWM_BASEADDR))  /* PWM Control 
                                  Status Register */
                             8106 ; 81   |
                             8107 ; 82   |/////////////////////////////////////////////////////////////////////////////////
                             8108 ; 83   |//  PWM CHANNEL 0 A  (HW_PWM_CH0AR) Bit Definitions
                             8109 ; 84   |#define HW_PWM_CH0AR_ACTIVE_BITPOS (0)
                             8110 ; 85   |#define HW_PWM_CH0AR_INACTIVE_BITPOS (12)
                             8111 ; 86   |
                             8112 ; 87   |#define HW_PWM_CH0AR_ACTIVE_WIDTH (12)
                             8113 ; 88   |#define HW_PWM_CH0AR_INACTIVE_WIDTH (12)
                             8114 ; 89   |
                             8115 ; 90   |#define HW_PWM_CH0AR_ACTIVE_SETMASK (((1<<HW_PWM_CH0AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_ACTI
                                  VE_BITPOS)
                             8116 ; 91   |#define HW_PWM_CH0AR_INACTIVE_SETMASK (((1<<HW_PWM_CH0AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0AR_
                                  INACTIVE_BITPOS)
                             8117 ; 92   |
                             8118 ; 93   |#define HW_PWM_CH0AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_ACTIVE_SETMASK)
                             8119 ; 94   |#define HW_PWM_CH0AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0AR_INACTIVE_SETMASK)
                             8120 ; 95   |
                             8121 ; 96   |/////////////////////////////////////////////////////////////////////////////////
                             8122 ; 97   |//  PWM CHANNEL 0 B  (HW_PWM_CH0BR) Bit Definitions
                             8123 ; 98   |#define HW_PWM_CH0BR_ACTIVE_BITPOS (0)
                             8124 ; 99   |#define HW_PWM_CH0BR_INACTIVE_BITPOS (12)
                             8125 ; 100  |
                             8126 ; 101  |#define HW_PWM_CH0BR_ACTIVE_WIDTH (12)
                             8127 ; 102  |#define HW_PWM_CH0BR_INACTIVE_WIDTH (12)
                             8128 ; 103  |
                             8129 ; 104  |#define HW_PWM_CH0BR_ACTIVE_SETMASK (((1<<HW_PWM_CH0BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_ACTI
                                  VE_BITPOS)
                             8130 ; 105  |#define HW_PWM_CH0BR_INACTIVE_SETMASK (((1<<HW_PWM_CH0BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH0BR_
                                  INACTIVE_BITPOS)
                             8131 ; 106  |
                             8132 ; 107  |#define HW_PWM_CH0BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_ACTIVE_SETMASK)
                             8133 ; 108  |#define HW_PWM_CH0BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH0BR_INACTIVE_SETMASK)
                             8134 ; 109  |
                             8135 ; 110  |/////////////////////////////////////////////////////////////////////////////////
                             8136 ; 111  |//  PWM CHANNEL 1 A  (HW_PWM_CH1AR) Bit Definitions
                             8137 ; 112  |#define HW_PWM_CH1AR_ACTIVE_BITPOS (0)
                             8138 ; 113  |#define HW_PWM_CH1AR_INACTIVE_BITPOS (12)
                             8139 ; 114  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 138

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8140 ; 115  |#define HW_PWM_CH1AR_ACTIVE_WIDTH (12)
                             8141 ; 116  |#define HW_PWM_CH1AR_INACTIVE_WIDTH (12)
                             8142 ; 117  |
                             8143 ; 118  |#define HW_PWM_CH1AR_ACTIVE_SETMASK (((1<<HW_PWM_CH1AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_ACTI
                                  VE_BITPOS)
                             8144 ; 119  |#define HW_PWM_CH1AR_INACTIVE_SETMASK (((1<<HW_PWM_CH1AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1AR_
                                  INACTIVE_BITPOS)
                             8145 ; 120  |
                             8146 ; 121  |#define HW_PWM_CH1AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_ACTIVE_SETMASK)
                             8147 ; 122  |#define HW_PWM_CH1AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1AR_INACTIVE_SETMASK)
                             8148 ; 123  |
                             8149 ; 124  |/////////////////////////////////////////////////////////////////////////////////
                             8150 ; 125  |//  PWM CHANNEL 1 B  (HW_PWM_CH1BR) Bit Definitions
                             8151 ; 126  |#define HW_PWM_CH1BR_ACTIVE_BITPOS (0)
                             8152 ; 127  |#define HW_PWM_CH1BR_INACTIVE_BITPOS (12)
                             8153 ; 128  |
                             8154 ; 129  |#define HW_PWM_CH1BR_ACTIVE_WIDTH (12)
                             8155 ; 130  |#define HW_PWM_CH1BR_INACTIVE_WIDTH (12)
                             8156 ; 131  |
                             8157 ; 132  |#define HW_PWM_CH1BR_ACTIVE_SETMASK (((1<<HW_PWM_CH1BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_ACTI
                                  VE_BITPOS)
                             8158 ; 133  |#define HW_PWM_CH1BR_INACTIVE_SETMASK (((1<<HW_PWM_CH1BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH1BR_
                                  INACTIVE_BITPOS)
                             8159 ; 134  |
                             8160 ; 135  |#define HW_PWM_CH1BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_ACTIVE_SETMASK)
                             8161 ; 136  |#define HW_PWM_CH1BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH1BR_INACTIVE_SETMASK)
                             8162 ; 137  |
                             8163 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                             8164 ; 139  |//  PWM CHANNEL 2 A  (HW_PWM_CH2AR) Bit Definitions
                             8165 ; 140  |#define HW_PWM_CH2AR_ACTIVE_BITPOS (0)
                             8166 ; 141  |#define HW_PWM_CH2AR_INACTIVE_BITPOS (12)
                             8167 ; 142  |
                             8168 ; 143  |#define HW_PWM_CH2AR_ACTIVE_WIDTH (12)
                             8169 ; 144  |#define HW_PWM_CH2AR_INACTIVE_WIDTH (12)
                             8170 ; 145  |
                             8171 ; 146  |#define HW_PWM_CH2AR_ACTIVE_SETMASK (((1<<HW_PWM_CH2AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_ACTI
                                  VE_BITPOS)
                             8172 ; 147  |#define HW_PWM_CH2AR_INACTIVE_SETMASK (((1<<HW_PWM_CH2AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2AR_
                                  INACTIVE_BITPOS)
                             8173 ; 148  |
                             8174 ; 149  |#define HW_PWM_CH2AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_ACTIVE_SETMASK)
                             8175 ; 150  |#define HW_PWM_CH2AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2AR_INACTIVE_SETMASK)
                             8176 ; 151  |
                             8177 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                             8178 ; 153  |//  PWM CHANNEL 2 B  (HW_PWM_CH2BR) Bit Definitions
                             8179 ; 154  |#define HW_PWM_CH2BR_ACTIVE_BITPOS (0)
                             8180 ; 155  |#define HW_PWM_CH2BR_INACTIVE_BITPOS (12)
                             8181 ; 156  |
                             8182 ; 157  |#define HW_PWM_CH2BR_ACTIVE_WIDTH (12)
                             8183 ; 158  |#define HW_PWM_CH2BR_INACTIVE_WIDTH (12)
                             8184 ; 159  |
                             8185 ; 160  |#define HW_PWM_CH2BR_ACTIVE_SETMASK (((1<<HW_PWM_CH2BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_ACTI
                                  VE_BITPOS)
                             8186 ; 161  |#define HW_PWM_CH2BR_INACTIVE_SETMASK (((1<<HW_PWM_CH2BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH2BR_
                                  INACTIVE_BITPOS)
                             8187 ; 162  |
                             8188 ; 163  |#define HW_PWM_CH2BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_ACTIVE_SETMASK)
                             8189 ; 164  |#define HW_PWM_CH2BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH2BR_INACTIVE_SETMASK)
                             8190 ; 165  |
                             8191 ; 166  |/////////////////////////////////////////////////////////////////////////////////
                             8192 ; 167  |//  PWM CHANNEL 3 A  (HW_PWM_CH3AR) Bit Definitions
                             8193 ; 168  |#define HW_PWM_CH3AR_ACTIVE_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 139

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8194 ; 169  |#define HW_PWM_CH3AR_INACTIVE_BITPOS (12)
                             8195 ; 170  |
                             8196 ; 171  |#define HW_PWM_CH3AR_ACTIVE_WIDTH (12)
                             8197 ; 172  |#define HW_PWM_CH3AR_INACTIVE_WIDTH (12)
                             8198 ; 173  |
                             8199 ; 174  |#define HW_PWM_CH3AR_ACTIVE_SETMASK (((1<<HW_PWM_CH3AR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_ACTI
                                  VE_BITPOS)
                             8200 ; 175  |#define HW_PWM_CH3AR_INACTIVE_SETMASK (((1<<HW_PWM_CH3AR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3AR_
                                  INACTIVE_BITPOS)
                             8201 ; 176  |
                             8202 ; 177  |#define HW_PWM_CH3AR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_ACTIVE_SETMASK)
                             8203 ; 178  |#define HW_PWM_CH3AR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3AR_INACTIVE_SETMASK)
                             8204 ; 179  |
                             8205 ; 180  |/////////////////////////////////////////////////////////////////////////////////
                             8206 ; 181  |//  PWM CHANNEL 3 B  (HW_PWM_CH3BR) Bit Definitions
                             8207 ; 182  |#define HW_PWM_CH3BR_ACTIVE_BITPOS (0)
                             8208 ; 183  |#define HW_PWM_CH3BR_INACTIVE_BITPOS (12)
                             8209 ; 184  |
                             8210 ; 185  |#define HW_PWM_CH3BR_ACTIVE_WIDTH (12)
                             8211 ; 186  |#define HW_PWM_CH3BR_INACTIVE_WIDTH (12)
                             8212 ; 187  |
                             8213 ; 188  |#define HW_PWM_CH3BR_ACTIVE_SETMASK (((1<<HW_PWM_CH3BR_ACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_ACTI
                                  VE_BITPOS)
                             8214 ; 189  |#define HW_PWM_CH3BR_INACTIVE_SETMASK (((1<<HW_PWM_CH3BR_INACTIVE_WIDTH)-1)<<HW_PWM_CH3BR_
                                  INACTIVE_BITPOS)
                             8215 ; 190  |
                             8216 ; 191  |#define HW_PWM_CH3BR_ACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_ACTIVE_SETMASK)
                             8217 ; 192  |#define HW_PWM_CH3BR_INACTIVE_CLRMASK (~(WORD)HW_PWM_CH3BR_INACTIVE_SETMASK)
                             8218 ; 193  |
                             8219 ; 194  |typedef union               
                             8220 ; 195  |{
                             8221 ; 196  |    struct {
                             8222 ; 197  |       int ACTIVE                    :12;
                             8223 ; 198  |       int INACTIVE                  :12;
                             8224 ; 199  |    } B;
                             8225 ; 200  |    int I;
                             8226 ; 201  |} pwmchan_type;
                             8227 ; 202  |#define HW_PWM_CH0AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+1))  /* PWM Cha
                                  nnel 0 A Register */
                             8228 ; 203  |#define HW_PWM_CH0BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+2))  /* PWM Cha
                                  nnel 0 B Register */
                             8229 ; 204  |#define HW_PWM_CH1AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+3))  /* PWM Cha
                                  nnel 1 A Register */
                             8230 ; 205  |#define HW_PWM_CH1BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+4))  /* PWM Cha
                                  nnel 1 B Register */
                             8231 ; 206  |#define HW_PWM_CH2AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+5))  /* PWM Cha
                                  nnel 2 A Register */
                             8232 ; 207  |#define HW_PWM_CH2BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+6))  /* PWM Cha
                                  nnel 2 B Register */
                             8233 ; 208  |#define HW_PWM_CH3AR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+7))  /* PWM Cha
                                  nnel 3 A Register */
                             8234 ; 209  |#define HW_PWM_CH3BR        (*(volatile pwmchan_type _X*) (HW_PWM_BASEADDR+8))  /* PWM Cha
                                  nnel 3 B Register */
                             8235 ; 210  |
                             8236 ; 211  |#endif
                             8237 ; 212  |
                             8238 ; 213  |
                             8239 ; 214  |
                             8240 ; 215  |
                             8241 
                             8243 
                             8244 ; 28   |#include "regsrevision.h"
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 140

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8245 
                             8247 
                             8248 ; 1    |#if !(defined(__HW_REVR))
                             8249 ; 2    |#define __HW_REVR 1
                             8250 ; 3    |
                             8251 ; 4    |
                             8252 ; 5    |#define HW_GLUE_BASEADDR 0xFA00
                             8253 ; 6    |
                             8254 ; 7    |#define HW_REVR_RMN_BITPOS (0)
                             8255 ; 8    |#define HW_REVR_DCDCMODE_BITPOS (5)
                             8256 ; 9    |#define HW_REVR_RMJ_BITPOS (8)
                             8257 ; 10   |
                             8258 ; 11   |#define HW_REVR_RMN_WIDTH (5)
                             8259 ; 12   |#define HW_REVR_DCDCMODE_WIDTH (3)
                             8260 ; 13   |
                             8261 ; 14   |#define HW_REVR_DCDCMODE_SETMASK (((1<<HW_REVR_DCDCMODE_WIDTH)-1)<<HW_REVR_DCDCMODE_BITPOS
                                  )
                             8262 ; 15   |
                             8263 ; 16   |#define HW_REVR_DCDCMODE_CLRMASK (~(WORD)HW_REVR_DCDCMODE_SETMASK)
                             8264 ; 17   |
                             8265 ; 18   |
                             8266 ; 19   |/////////////////////////////////////////////////////////////////////////////////
                             8267 ; 20   |//  Revision Register (HW_REVR) bitfields and values. (read only)
                             8268 ; 21   |//  June15 2004: C struct updated to be correct: 
                             8269 ; 22   |//   Added DCDCMODE bitfield. Removed RMP bitfield. Reduced size of RMN bitfield to 5 bits
                                  .
                             8270 ; 23   |typedef union               
                             8271 ; 24   |{
                             8272 ; 25   |    struct {
                             8273 ; 26   |        unsigned RMN    :5;     //Minor Revision
                             8274 ; 27   |        unsigned DCDCMODE : 3;  //DCDC mode field function depends on DCDC mode pin strapp
                                  ing
                             8275 ; 28   |           #define DCDCMODE_7_CONVERTER1_2CH_BOOST_CONVERTER2_OFF      7
                             8276 ; 29   |           #define DCDCMODE_6_RESERVED                                 6
                             8277 ; 30   |           #define DCDCMODE_5_CONVERTER1_3CH_BOOST_CONVERTER2_OFF      5
                             8278 ; 31   |           #define DCDCMODE_4_RESERVED                                 4
                             8279 ; 32   |           #define DCDCMODE_3_CONVERTER1_1CH_BUCK_CONVERTER2_OFF       3
                             8280 ; 33   |           #define DCDCMODE_2_CONVERTER1_OFF_CONVERTER2_OFF            2
                             8281 ; 34   |           #define DCDCMODE_1_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BOOST 1
                             8282 ; 35   |           #define DCDCMODE_0_CONVERTER1_1CH_BUCK_CONVERTER2_1CH_BUCK  0
                             8283 ; 36   |           #define DCDCMODE_X_BUCK_MASKED_SETMASK 0x4
                             8284 ; 37   |        unsigned RMJ    :16;    //Major Revision
                             8285 ; 38   |    } B;
                             8286 ; 39   |
                             8287 ; 40   |    int I;
                             8288 ; 41   |
                             8289 ; 42   |} revr_type;
                             8290 ; 43   |#define HW_REVR (*(volatile revr_type _X*) (HW_GLUE_BASEADDR+2))
                             8291 ; 44   |
                             8292 ; 45   |#define HW_REVR_DCDCMODE_B0_BITPOS 5
                             8293 ; 46   |#define HW_REVR_DCDCMODE_B1_BITPOS 6
                             8294 ; 47   |#define HW_REVR_DCDCMODE_B2_BITPOS 7
                             8295 ; 48   |
                             8296 ; 49   |#define HW_REVR_DCDCMODE_BUCK_MASK_POS HW_REVR_DCDCMODE_B2_BITPOS
                             8297 ; 50   |// 3 bit bitfield: (HW_REVR_DCDCMODE_B2_BITPOS|HW_REVR_DCDCMODE_B1_BITPOS|HW_REVR_DCDCMODE
                                  _B0_BITPOS)
                             8298 ; 51   |#define HW_REVR_DCDC_MODE_SETMASK 0x0000E0
                             8299 ; 52   |#define HW_REVR_RMN_SETMASK 0xFF<<HW_REVR_RMN_BITPOS
                             8300 ; 53   |#define HW_REVR_RMJ_SETMASK 0xFFFF<<HW_REVR_RMJ_BITPOS
                             8301 ; 54   |
                             8302 ; 55   |#define HW_REVR_RMN_CLRMASK ~(WORD)HW_REVR_RMN_SETMASK
                             8303 ; 56   |#define HW_REVR_RMJ_CLRMASK ~(WORD)HW_REVR_RMJ_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 141

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8304 ; 57   |
                             8305 ; 58   |#endif //!@def(__HW_REVR)
                             8306 ; 59   |
                             8307 
                             8309 
                             8310 ; 29   |#include "regsrtc.h"
                             8311 
                             8313 
                             8314 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                             8315 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8316 ; 3    |// Filename: regsrtc.inc
                             8317 ; 4    |// Description: Register definitions for RTC interface
                             8318 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                             8319 ; 6    |// The following naming conventions are followed in this file.
                             8320 ; 7    |// All registers are named using the format...
                             8321 ; 8    |//     HW_<module>_<regname>
                             8322 ; 9    |// where <module> is the module name which can be any of the following...
                             8323 ; 10   |//     USB20
                             8324 ; 11   |// (Note that when there is more than one copy of a particular module, the
                             8325 ; 12   |// module name includes a number starting from 0 for the first instance of
                             8326 ; 13   |// that module)
                             8327 ; 14   |// <regname> is the specific register within that module
                             8328 ; 15   |// We also define the following...
                             8329 ; 16   |//     HW_<module>_<regname>_BITPOS
                             8330 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8331 ; 18   |//     HW_<module>_<regname>_SETMASK
                             8332 ; 19   |// which does something else, and
                             8333 ; 20   |//     HW_<module>_<regname>_CLRMASK
                             8334 ; 21   |// which does something else.
                             8335 ; 22   |// Other rules
                             8336 ; 23   |//     All caps
                             8337 ; 24   |//     Numeric identifiers start at 0
                             8338 ; 25   |#if !(defined(regsrtcinc))
                             8339 ; 26   |#define regsrtcinc 1
                             8340 ; 27   |
                             8341 ; 28   |#include "types.h"
                             8342 
                             8344 
                             8345 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8346 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8347 ; 3    |//
                             8348 ; 4    |// Filename: types.h
                             8349 ; 5    |// Description: Standard data types
                             8350 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8351 ; 7    |
                             8352 ; 8    |#ifndef _TYPES_H
                             8353 ; 9    |#define _TYPES_H
                             8354 ; 10   |
                             8355 ; 11   |// TODO:  move this outta here!
                             8356 ; 12   |#if !defined(NOERROR)
                             8357 ; 13   |#define NOERROR 0
                             8358 ; 14   |#define SUCCESS 0
                             8359 ; 15   |#endif 
                             8360 ; 16   |#if !defined(SUCCESS)
                             8361 ; 17   |#define SUCCESS  0
                             8362 ; 18   |#endif
                             8363 ; 19   |#if !defined(ERROR)
                             8364 ; 20   |#define ERROR   -1
                             8365 ; 21   |#endif
                             8366 ; 22   |#if !defined(FALSE)
                             8367 ; 23   |#define FALSE 0
                             8368 ; 24   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 142

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8369 ; 25   |#if !defined(TRUE)
                             8370 ; 26   |#define TRUE  1
                             8371 ; 27   |#endif
                             8372 ; 28   |
                             8373 ; 29   |#if !defined(NULL)
                             8374 ; 30   |#define NULL 0
                             8375 ; 31   |#endif
                             8376 ; 32   |
                             8377 ; 33   |#define MAX_INT     0x7FFFFF
                             8378 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             8379 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             8380 ; 36   |#define MAX_ULONG   (-1) 
                             8381 ; 37   |
                             8382 ; 38   |#define WORD_SIZE   24              // word size in bits
                             8383 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             8384 ; 40   |
                             8385 ; 41   |
                             8386 ; 42   |#define BYTE    unsigned char       // btVarName
                             8387 ; 43   |#define CHAR    signed char         // cVarName
                             8388 ; 44   |#define USHORT  unsigned short      // usVarName
                             8389 ; 45   |#define SHORT   unsigned short      // sVarName
                             8390 ; 46   |#define WORD    unsigned int        // wVarName
                             8391 ; 47   |#define INT     signed int          // iVarName
                             8392 ; 48   |#define DWORD   unsigned long       // dwVarName
                             8393 ; 49   |#define LONG    signed long         // lVarName
                             8394 ; 50   |#define BOOL    unsigned int        // bVarName
                             8395 ; 51   |#define FRACT   _fract              // frVarName
                             8396 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             8397 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             8398 ; 54   |#define FLOAT   float               // fVarName
                             8399 ; 55   |#define DBL     double              // dVarName
                             8400 ; 56   |#define ENUM    enum                // eVarName
                             8401 ; 57   |#define CMX     _complex            // cmxVarName
                             8402 ; 58   |typedef WORD UCS3;                   // 
                             8403 ; 59   |
                             8404 ; 60   |#define UINT16  unsigned short
                             8405 ; 61   |#define UINT8   unsigned char   
                             8406 ; 62   |#define UINT32  unsigned long
                             8407 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8408 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             8409 ; 65   |#define WCHAR   UINT16
                             8410 ; 66   |
                             8411 ; 67   |//UINT128 is 16 bytes or 6 words
                             8412 ; 68   |typedef struct UINT128_3500 {   
                             8413 ; 69   |    int val[6];     
                             8414 ; 70   |} UINT128_3500;
                             8415 ; 71   |
                             8416 ; 72   |#define UINT128   UINT128_3500
                             8417 ; 73   |
                             8418 ; 74   |// Little endian word packed byte strings:   
                             8419 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8420 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8421 ; 77   |// Little endian word packed byte strings:   
                             8422 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             8423 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             8424 ; 80   |
                             8425 ; 81   |// Declare Memory Spaces To Use When Coding
                             8426 ; 82   |// A. Sector Buffers
                             8427 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             8428 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 143

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8429 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             8430 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             8431 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             8432 ; 88   |// B. Media DDI Memory
                             8433 ; 89   |#define MEDIA_DDI_MEM _Y
                             8434 ; 90   |
                             8435 ; 91   |
                             8436 ; 92   |
                             8437 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             8438 ; 94   |// Examples of circular pointers:
                             8439 ; 95   |//    INT CIRC cpiVarName
                             8440 ; 96   |//    DWORD CIRC cpdwVarName
                             8441 ; 97   |
                             8442 ; 98   |#define RETCODE INT                 // rcVarName
                             8443 ; 99   |
                             8444 ; 100  |// generic bitfield structure
                             8445 ; 101  |struct Bitfield {
                             8446 ; 102  |    unsigned int B0  :1;
                             8447 ; 103  |    unsigned int B1  :1;
                             8448 ; 104  |    unsigned int B2  :1;
                             8449 ; 105  |    unsigned int B3  :1;
                             8450 ; 106  |    unsigned int B4  :1;
                             8451 ; 107  |    unsigned int B5  :1;
                             8452 ; 108  |    unsigned int B6  :1;
                             8453 ; 109  |    unsigned int B7  :1;
                             8454 ; 110  |    unsigned int B8  :1;
                             8455 ; 111  |    unsigned int B9  :1;
                             8456 ; 112  |    unsigned int B10 :1;
                             8457 ; 113  |    unsigned int B11 :1;
                             8458 ; 114  |    unsigned int B12 :1;
                             8459 ; 115  |    unsigned int B13 :1;
                             8460 ; 116  |    unsigned int B14 :1;
                             8461 ; 117  |    unsigned int B15 :1;
                             8462 ; 118  |    unsigned int B16 :1;
                             8463 ; 119  |    unsigned int B17 :1;
                             8464 ; 120  |    unsigned int B18 :1;
                             8465 ; 121  |    unsigned int B19 :1;
                             8466 ; 122  |    unsigned int B20 :1;
                             8467 ; 123  |    unsigned int B21 :1;
                             8468 ; 124  |    unsigned int B22 :1;
                             8469 ; 125  |    unsigned int B23 :1;
                             8470 ; 126  |};
                             8471 ; 127  |
                             8472 ; 128  |union BitInt {
                             8473 ; 129  |        struct Bitfield B;
                             8474 ; 130  |        int        I;
                             8475 ; 131  |};
                             8476 ; 132  |
                             8477 ; 133  |#define MAX_MSG_LENGTH 10
                             8478 ; 134  |struct CMessage
                             8479 ; 135  |{
                             8480 ; 136  |        unsigned int m_uLength;
                             8481 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             8482 ; 138  |};
                             8483 ; 139  |
                             8484 ; 140  |typedef struct {
                             8485 ; 141  |    WORD m_wLength;
                             8486 ; 142  |    WORD m_wMessage;
                             8487 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             8488 ; 144  |} Message;
                             8489 ; 145  |
                             8490 ; 146  |struct MessageQueueDescriptor
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 144

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8491 ; 147  |{
                             8492 ; 148  |        int *m_pBase;
                             8493 ; 149  |        int m_iModulo;
                             8494 ; 150  |        int m_iSize;
                             8495 ; 151  |        int *m_pHead;
                             8496 ; 152  |        int *m_pTail;
                             8497 ; 153  |};
                             8498 ; 154  |
                             8499 ; 155  |struct ModuleEntry
                             8500 ; 156  |{
                             8501 ; 157  |    int m_iSignaledEventMask;
                             8502 ; 158  |    int m_iWaitEventMask;
                             8503 ; 159  |    int m_iResourceOfCode;
                             8504 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             8505 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             8506 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             8507 ; 163  |    int m_uTimeOutHigh;
                             8508 ; 164  |    int m_uTimeOutLow;
                             8509 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             8510 ; 166  |};
                             8511 ; 167  |
                             8512 ; 168  |union WaitMask{
                             8513 ; 169  |    struct B{
                             8514 ; 170  |        unsigned int m_bNone     :1;
                             8515 ; 171  |        unsigned int m_bMessage  :1;
                             8516 ; 172  |        unsigned int m_bTimer    :1;
                             8517 ; 173  |        unsigned int m_bButton   :1;
                             8518 ; 174  |    } B;
                             8519 ; 175  |    int I;
                             8520 ; 176  |} ;
                             8521 ; 177  |
                             8522 ; 178  |
                             8523 ; 179  |struct Button {
                             8524 ; 180  |        WORD wButtonEvent;
                             8525 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             8526 ; 182  |};
                             8527 ; 183  |
                             8528 ; 184  |struct Message {
                             8529 ; 185  |        WORD wMsgLength;
                             8530 ; 186  |        WORD wMsgCommand;
                             8531 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             8532 ; 188  |};
                             8533 ; 189  |
                             8534 ; 190  |union EventTypes {
                             8535 ; 191  |        struct CMessage msg;
                             8536 ; 192  |        struct Button Button ;
                             8537 ; 193  |        struct Message Message;
                             8538 ; 194  |};
                             8539 ; 195  |
                             8540 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             8541 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             8542 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             8543 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             8544 ; 200  |
                             8545 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             8546 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             8547 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             8548 ; 204  |
                             8549 ; 205  |#if DEBUG
                             8550 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             8551 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 145

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8552 ; 208  |#else 
                             8553 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             8554 ; 210  |#define DebugBuildAssert(x)    
                             8555 ; 211  |#endif
                             8556 ; 212  |
                             8557 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             8558 ; 214  |//  #pragma asm
                             8559 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             8560 ; 216  |//  #pragma endasm
                             8561 ; 217  |
                             8562 ; 218  |
                             8563 ; 219  |#ifdef COLOR_262K
                             8564 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             8565 ; 221  |#elif defined(COLOR_65K)
                             8566 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             8567 ; 223  |#else
                             8568 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             8569 ; 225  |#endif
                             8570 ; 226  |    
                             8571 ; 227  |#endif // #ifndef _TYPES_H
                             8572 
                             8574 
                             8575 ; 29   |
                             8576 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8577 ; 31   |
                             8578 ; 32   |//   RTC STMP Registers 
                             8579 ; 33   |//   Edited 2/26/2002 J. Ferrara
                             8580 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8581 ; 35   |
                             8582 ; 36   |#define HW_RTC_BASEADDR (0xF500)
                             8583 ; 37   |
                             8584 ; 38   |
                             8585 ; 39   |
                             8586 ; 40   |
                             8587 ; 41   |
                             8588 ; 42   |/////////////////////////////////////////////////////////////////////////////////
                             8589 ; 43   |
                             8590 ; 44   |////  RTC Control Status Register (HW_RTC_CSR) Bit Definitions
                             8591 ; 45   |
                             8592 ; 46   |#define HW_RTC_CSR_ALARMINTEN_BITPOS (0)
                             8593 ; 47   |#define HW_RTC_CSR_ALARMINT_BITPOS (1)
                             8594 ; 48   |#define HW_RTC_CSR_WATCHDOGEN_BITPOS (2)
                             8595 ; 49   |#define HW_RTC_CSR_RSVD0_BITPOS (3)
                             8596 ; 50   |#define HW_RTC_CSR_STALEREGS_BITPOS (4)
                             8597 ; 51   |#define HW_RTC_CSR_RSVD1_BITPOS (9)
                             8598 ; 52   |#define HW_RTC_CSR_NEWREGS_BITPOS (12)
                             8599 ; 53   |#define HW_RTC_CSR_NEWREGS_XTALDIV_BITPOS (12)
                             8600 ; 54   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_BITPOS (13)
                             8601 ; 55   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS (14)
                             8602 ; 56   |#define HW_RTC_CSR_NEWREGS_PERSIST0_BITPOS (15)
                             8603 ; 57   |#define HW_RTC_CSR_NEWREGS_PERSIST1_BITPOS (16)
                             8604 ; 58   |#define HW_RTC_CSR_RSVD2_BITPOS (17)
                             8605 ; 59   |#define HW_RTC_CSR_FORCE_BITPOS (20)
                             8606 ; 60   |#define HW_RTC_CSR_RSVD3_BITPOS (21)
                             8607 ; 61   |#define HW_RTC_CSR_SFTRST_BITPOS (23)                                                     
                                                          
                             8608 ; 62   |#define HW_RTC_CSR_ALARMINTEN_WIDTH (1)
                             8609 ; 63   |#define HW_RTC_CSR_ALARMINT_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 146

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8610 ; 64   |#define HW_RTC_CSR_WATCHDOGEN_WIDTH (1)
                             8611 ; 65   |#define HW_RTC_CSR_RSVD0_WIDTH (1)
                             8612 ; 66   |#define HW_RTC_CSR_STALEREGS_WIDTH (5)
                             8613 ; 67   |#define HW_RTC_CSR_RSVD1_WIDTH (3)
                             8614 ; 68   |#define HW_RTC_CSR_NEWREGS_WIDTH (5)
                             8615 ; 69   |#define HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH (1)
                             8616 ; 70   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH (1)
                             8617 ; 71   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH (1)
                             8618 ; 72   |#define HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH (1)
                             8619 ; 73   |#define HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH (1)
                             8620 ; 74   |#define HW_RTC_CSR_RSVD2_WIDTH (3)
                             8621 ; 75   |#define HW_RTC_CSR_FORCE_WIDTH (1)
                             8622 ; 76   |#define HW_RTC_CSR_RSVD3_WIDTH (2)
                             8623 ; 77   |#define HW_RTC_CSR_SFTRST_WIDTH (1)
                             8624 ; 78   |
                             8625 ; 79   |#define HW_RTC_CSR_ALARMINT_SETMASK (((1<<HW_RTC_CSR_ALARMINT_WIDTH)-1)<<HW_RTC_CSR_ALARMI
                                  NT_BITPOS) 
                             8626 ; 80   |#define HW_RTC_CSR_ALARMINTEN_SETMASK (((1<<HW_RTC_CSR_ALARMINTEN_WIDTH)-1)<<HW_RTC_CSR_AL
                                  ARMINTEN_BITPOS) 
                             8627 ; 81   |#define HW_RTC_CSR_WATCHDOGEN_SETMASK (((1<<HW_RTC_CSR_WATCHDOGEN_WIDTH)-1)<<HW_RTC_CSR_WA
                                  TCHDOGEN_BITPOS) 
                             8628 ; 82   |#define HW_RTC_CSR_RSVD0_SETMASK (((1<<HW_RTC_CSR_RSVD0_WIDTH)-1)<<HW_RTC_CSR_RSVD0_BITPOS
                                  ) 
                             8629 ; 83   |#define HW_RTC_CSR_STALEREGS_SETMASK (((1<<HW_RTC_CSR_STALEREGS_WIDTH)-1)<<HW_RTC_CSR_STAL
                                  EREGS_BITPOS) 
                             8630 ; 84   |#define HW_RTC_CSR_RSVD1_SETMASK (((1<<HW_RTC_CSR_RSVD1_WIDTH)-1)<<HW_RTC_CSR_RSVD1_BITPOS
                                  ) 
                             8631 ; 85   |#define HW_RTC_CSR_NEWREGS_SETMASK (((1<<HW_RTC_CSR_NEWREGS_WIDTH)-1)<<HW_RTC_CSR_NEWREGS_
                                  BITPOS) 
                             8632 ; 86   |#define HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK (((1<<HW_RTC_CSR_NEWREGS_XTALDIV_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_XTALDIV_BITPOS)   
                             8633 ; 87   |#define HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_MSCOUNT_WIDTH)-1)<<HW_
                                  RTC_CSR_NEWREGS_MSCOUNT_BITPOS)
                             8634 ; 88   |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK (((1<<HW_RTC_CSR_NEWREGS_ALRMCOUNT_WIDTH)-1)<
                                  <HW_RTC_CSR_NEWREGS_ALRMCOUNT_BITPOS)
                             8635 ; 89   |#define HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST0_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST0_BITPOS)
                             8636 ; 90   |#define HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK (((1<<HW_RTC_CSR_NEWREGS_PERSIST1_WIDTH)-1)<<H
                                  W_RTC_CSR_NEWREGS_PERSIST1_BITPOS)
                             8637 ; 91   |#define HW_RTC_CSR_RSVD2_SETMASK (((1<<HW_RTC_CSR_RSVD2_WIDTH)-1)<<HW_RTC_CSR_RSVD2_BITPOS
                                  ) 
                             8638 ; 92   |#define HW_RTC_CSR_FORCE_SETMASK (((1<<HW_RTC_CSR_FORCE_WIDTH)-1)<<HW_RTC_CSR_FORCE_BITPOS
                                  ) 
                             8639 ; 93   |#define HW_RTC_CSR_RSVD3_SETMASK (((1<<HW_RTC_CSR_RSVD3_WIDTH)-1)<<HW_RTC_CSR_RSVD3_BITPOS
                                  ) 
                             8640 ; 94   |#define HW_RTC_CSR_SFTRST_SETMASK (((1<<HW_RTC_CSR_SFTRST_WIDTH)-1)<<HW_RTC_CSR_SFTRST_BIT
                                  POS) 
                             8641 ; 95   |
                             8642 ; 96   |#define HW_RTC_CSR_ALARMINTEN_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINTEN_SETMASK)
                             8643 ; 97   |#define HW_RTC_CSR_ALARMINT_CLRMASK (~(WORD)HW_RTC_CSR_ALARMINT_SETMASK)
                             8644 ; 98   |#define HW_RTC_CSR_WATCHDOGEN_CLRMASK (~(WORD)HW_RTC_CSR_WATCHDOGEN_SETMASK)
                             8645 ; 99   |#define HW_RTC_CSR_RSVD0_CLRMASK (~(WORD)HW_RTC_CSR_RSVD0_SETMASK)
                             8646 ; 100  |#define HW_RTC_CSR_STALEREGS_CLRMASK (~(WORD)HW_RTC_CSR_STALEREGS_SETMASK)
                             8647 ; 101  |#define HW_RTC_CSR_RSVD1_CLRMASK (~(WORD)HW_RTC_CSR_RSVD1_SETMASK)
                             8648 ; 102  |#define HW_RTC_CSR_NEWREGS_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_SETMASK)
                             8649 ; 103  |#define HW_RTC_CSR_NEWREGS_XTALDIV_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_XTALDIV_SETMASK)   
                             8650 ; 104  |#define HW_RTC_CSR_NEWREGS_MSCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_MSCOUNT_SETMASK)
                             8651 ; 105  |#define HW_RTC_CSR_NEWREGS_ALRMCOUNT_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_ALRMCOUNT_SETMASK)
                                  
                             8652 ; 106  |#define HW_RTC_CSR_NEWREGS_PERSIST0_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST0_SETMASK)
                             8653 ; 107  |#define HW_RTC_CSR_NEWREGS_PERSIST1_CLRMASK (~(WORD)HW_RTC_CSR_NEWREGS_PERSIST1_SETMASK)
                             8654 ; 108  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 147

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8655 ; 109  |#define HW_RTC_CSR_RSVD2_CLRMASK (~(WORD)HW_RTC_CSR_RSVD2_SETMASK)
                             8656 ; 110  |#define HW_RTC_CSR_FORCE_CLRMASK (~(WORD)HW_RTC_CSR_FORCE_SETMASK)
                             8657 ; 111  |#define HW_RTC_CSR_RSVD3_CLRMASK (~(WORD)HW_RTC_CSR_RSVD3_SETMASK)
                             8658 ; 112  |#define HW_RTC_CSR_SFTRST_CLRMASK (~(WORD)HW_RTC_CSR_SFTRST_SETMASK)
                             8659 ; 113  |
                             8660 ; 114  |
                             8661 ; 115  |typedef union               
                             8662 ; 116  |{
                             8663 ; 117  |    struct {
                             8664 ; 118  |         int ALARMINTEN         : HW_RTC_CSR_ALARMINTEN_WIDTH;
                             8665 ; 119  |         int ALARMINT           : HW_RTC_CSR_ALARMINT_WIDTH;
                             8666 ; 120  |         int WATCHDOGEN         : HW_RTC_CSR_WATCHDOGEN_WIDTH;
                             8667 ; 121  |         int RSVD0              : HW_RTC_CSR_RSVD0_WIDTH;
                             8668 ; 122  |         unsigned int STALEREGS : HW_RTC_CSR_STALEREGS_WIDTH;
                             8669 ; 123  |         int RSVD1              : HW_RTC_CSR_RSVD1_WIDTH;
                             8670 ; 124  |         unsigned int NEWREGS   : HW_RTC_CSR_NEWREGS_WIDTH;
                             8671 ; 125  |         int RSVD2              : HW_RTC_CSR_RSVD2_WIDTH;
                             8672 ; 126  |         int FORCE             : HW_RTC_CSR_FORCE_WIDTH;
                             8673 ; 127  |         int RSVD3              : HW_RTC_CSR_RSVD3_WIDTH;
                             8674 ; 128  |         unsigned int SFTRST    : HW_RTC_CSR_SFTRST_WIDTH;
                             8675 ; 129  |    } B;
                             8676 ; 130  |    int I;
                             8677 ; 131  |    unsigned int U;
                             8678 ; 132  |} rtc_csr_type;
                             8679 ; 133  |#define HW_RTC_CSR      (*(volatile rtc_csr_type _X*) (HW_RTC_BASEADDR+0))    /* RTC Contr
                                  ol / Status Register */
                             8680 ; 134  |
                             8681 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                             8682 ; 136  |
                             8683 ; 137  |//  RTC Milliseconds Register0 (HW_RTC_MSECONDS0) Bit Definitions
                             8684 ; 138  |
                             8685 ; 139  |#define HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS (0)
                             8686 ; 140  |
                             8687 ; 141  |#define HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH (24)
                             8688 ; 142  |
                             8689 ; 143  |#define HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK (((1<<HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH)-1)<
                                  <HW_RTC_MSECONDS0_MSECONDSLOW_BITPOS) 
                             8690 ; 144  |
                             8691 ; 145  |#define HW_RTC_MSECONDS0_MSECONDSLOW_CLRMASK (~(WORD)HW_RTC_MSECONDS0_MSECONDSLOW_SETMASK)
                                  
                             8692 ; 146  |
                             8693 ; 147  |typedef union               
                             8694 ; 148  |{
                             8695 ; 149  |    struct {
                             8696 ; 150  |         int MSECONDSLOW        : HW_RTC_MSECONDS0_MSECONDSLOW_WIDTH;
                             8697 ; 151  |    } B;
                             8698 ; 152  |    int I;
                             8699 ; 153  |    unsigned int U;
                             8700 ; 154  |} rtc_mseconds0_type;
                             8701 ; 155  |#define HW_RTC_MSECONDS0      (*(volatile rtc_mseconds0_type _X*) (HW_RTC_BASEADDR+1))    
                                  /* RTC MSECONDS Lower Word Register */
                             8702 ; 156  |#define HW_RTCLOWR            HW_RTC_MSECONDS0
                             8703 ; 157  |/////////////////////////////////////////////////////////////////////////////////
                             8704 ; 158  |
                             8705 ; 159  |//  RTC Milliseconds Register1 (HW_RTC_MSECONDS1) Bit Definitions
                             8706 ; 160  |
                             8707 ; 161  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS (0)
                             8708 ; 162  |
                             8709 ; 163  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH (24)
                             8710 ; 164  |
                             8711 ; 165  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_SETMASK (((1<<HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH)-1
                                  )<<HW_RTC_MSECONDS1_MSECONDSHIGH_BITPOS) 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 148

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8712 ; 166  |
                             8713 ; 167  |#define HW_RTC_MSECONDS1_MSECONDSHIGH_CLRMASK (~(WORD)HW_RTC_MSECONDS1_MSECONDSHIGH_SETMAS
                                  K)
                             8714 ; 168  |
                             8715 ; 169  |typedef union               
                             8716 ; 170  |{
                             8717 ; 171  |    struct {
                             8718 ; 172  |         int MSECONDSHIGH       : HW_RTC_MSECONDS1_MSECONDSHIGH_WIDTH;
                             8719 ; 173  |    } B;
                             8720 ; 174  |    int I;
                             8721 ; 175  |    unsigned int U;
                             8722 ; 176  |} rtc_mseconds1_type;
                             8723 ; 177  |#define HW_RTC_MSECONDS1      (*(volatile rtc_mseconds1_type _X*) (HW_RTC_BASEADDR+2))    
                                  /* RTC MSECONDS Upper Word Register */
                             8724 ; 178  |#define HW_RTCUPR             HW_RTC_MSECONDS1
                             8725 ; 179  |
                             8726 ; 180  |#define HW_RTC_LOWER_OFFSET 1
                             8727 ; 181  |#define HW_RTC_UP_OFFSET 2
                             8728 ; 182  |
                             8729 ; 183  |
                             8730 ; 184  |/////////////////////////////////////////////////////////////////////////////////
                             8731 ; 185  |
                             8732 ; 186  |//  RTC Watchdog Count (HW_RTC_WATCHDOG) Bit Definitions
                             8733 ; 187  |
                             8734 ; 188  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_BITPOS (0)
                             8735 ; 189  |
                             8736 ; 190  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH (24)
                             8737 ; 191  |
                             8738 ; 192  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK (((1<<HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH)-1)<<HW_
                                  RTC_WATCHDOG_TIMEOUTCNT_BITPOS) 
                             8739 ; 193  |
                             8740 ; 194  |#define HW_RTC_WATCHDOG_TIMEOUTCNT_CLRMASK (~(WORD)HW_RTC_WATCHDOG_TIMEOUTCNT_SETMASK)
                             8741 ; 195  |
                             8742 ; 196  |typedef union               
                             8743 ; 197  |{
                             8744 ; 198  |    struct {
                             8745 ; 199  |         int TIMEOUTCNT         : HW_RTC_WATCHDOG_TIMEOUTCNT_WIDTH;
                             8746 ; 200  |    } B;
                             8747 ; 201  |    int I;
                             8748 ; 202  |    unsigned int U;
                             8749 ; 203  |} rtc_watchdog_type;
                             8750 ; 204  |#define HW_RTC_WATCHDOG     (*(volatile rtc_watchdog_type _X*) (HW_RTC_BASEADDR+3))    /* 
                                  RTC Watchdog Timeout Register */
                             8751 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                             8752 ; 206  |
                             8753 ; 207  |//  RTC Alarm Register0 (HW_RTC_ALARM0) Bit Definitions
                             8754 ; 208  |
                             8755 ; 209  |#define HW_RTC_ALARM0_ALARMLOW_BITPOS (0)
                             8756 ; 210  |
                             8757 ; 211  |#define HW_RTC_ALARM0_ALARMLOW_WIDTH (24)
                             8758 ; 212  |
                             8759 ; 213  |#define HW_RTC_ALARM0_ALARMLOW_SETMASK (((1<<HW_RTC_ALARM0_ALARMLOW_WIDTH)-1)<<HW_RTC_ALAR
                                  M0_ALARMLOW_BITPOS) 
                             8760 ; 214  |
                             8761 ; 215  |#define HW_RTC_ALARM0_ALARMLOW_CLRMASK (~(WORD)HW_RTC_ALARM0_ALARMLOW_SETMASK)
                             8762 ; 216  |
                             8763 ; 217  |typedef union               
                             8764 ; 218  |{
                             8765 ; 219  |    struct {
                             8766 ; 220  |         int ALARMLOW   : HW_RTC_ALARM0_ALARMLOW_WIDTH;
                             8767 ; 221  |    } B;
                             8768 ; 222  |    int I;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 149

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8769 ; 223  |    unsigned int U;
                             8770 ; 224  |} rtc_alarm0_type;
                             8771 ; 225  |#define HW_RTC_ALARM0      (*(volatile rtc_alarm0_type _X*) (HW_RTC_BASEADDR+4))    /* RTC
                                   ALARM Lower Word Register */
                             8772 ; 226  |/////////////////////////////////////////////////////////////////////////////////
                             8773 ; 227  |
                             8774 ; 228  |//  RTC Alarm Register1 (HW_RTC_ALARM1) Bit Definitions
                             8775 ; 229  |
                             8776 ; 230  |#define HW_RTC_ALARM1_ALARMHIGH_BITPOS (0)
                             8777 ; 231  |
                             8778 ; 232  |#define HW_RTC_ALARM1_ALARMHIGH_WIDTH (24)
                             8779 ; 233  |
                             8780 ; 234  |#define HW_RTC_ALARM1_ALARMHIGH_SETMASK (((1<<HW_RTC_ALARM1_ALARMHIGH_WIDTH)-1)<<HW_RTC_AL
                                  ARM1_ALARMHIGH_BITPOS) 
                             8781 ; 235  |
                             8782 ; 236  |#define HW_RTC_ALARM1_ALARMHIGH_CLRMASK (~(WORD)HW_RTC_ALARM1_ALARMHIGH_SETMASK)
                             8783 ; 237  |
                             8784 ; 238  |typedef union               
                             8785 ; 239  |{
                             8786 ; 240  |    struct {
                             8787 ; 241  |         int ALARMHIGH  : HW_RTC_ALARM1_ALARMHIGH_WIDTH;
                             8788 ; 242  |    } B;
                             8789 ; 243  |    int I;
                             8790 ; 244  |    unsigned int U;
                             8791 ; 245  |} rtc_alarm1_type;
                             8792 ; 246  |#define HW_RTC_ALARM1      (*(volatile rtc_alarm1_type _X*) (HW_RTC_BASEADDR+5))    /* RTC
                                   ALARM Upper Word Register */
                             8793 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                             8794 ; 248  |
                             8795 ; 249  |//  RTC Xtal-Clock Divide Register (HW_RTC_XTALDIVIDE) Bit Definitions
                             8796 ; 250  |
                             8797 ; 251  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_BITPOS (0)
                             8798 ; 252  |#define HW_RTC_XTALDIVIDE_RSVD0_BITPOS (16)
                             8799 ; 253  |
                             8800 ; 254  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH (16)
                             8801 ; 255  |#define HW_RTC_XTALDIVIDE_RSVD0_WIDTH (8)
                             8802 ; 256  |
                             8803 ; 257  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK (((1<<HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH)-1)<<HW_
                                  RTC_XTALDIVIDE_DIVCOUNT_BITPOS) 
                             8804 ; 258  |#define HW_RTC_XTALDIVIDE_RSVD0_SETMASK (((1<<HW_RTC_XTALDIVIDE_RSVD0_BITPOS)-1)<<HW_RTC_X
                                  TALDIVIDE_RSVD0_BITPOS) 
                             8805 ; 259  |
                             8806 ; 260  |#define HW_RTC_XTALDIVIDE_DIVCOUNT_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_DIVCOUNT_SETMASK)
                             8807 ; 261  |#define HW_RTC_XTALDIVIDE_RSVD0_CLRMASK (~(WORD)HW_RTC_XTALDIVIDE_RSVD0_SETMASK)
                             8808 ; 262  |
                             8809 ; 263  |typedef union               
                             8810 ; 264  |{
                             8811 ; 265  |    struct {
                             8812 ; 266  |         int DIVCOUNT   : HW_RTC_XTALDIVIDE_DIVCOUNT_WIDTH;
                             8813 ; 267  |         int RSVD0      : HW_RTC_XTALDIVIDE_RSVD0_WIDTH;
                             8814 ; 268  |    } B;
                             8815 ; 269  |    int I;
                             8816 ; 270  |    unsigned int U;
                             8817 ; 271  |} rtc_xtaldivide_type;
                             8818 ; 272  |#define HW_RTC_XTALDIVIDE   (*(volatile rtc_xtaldivide_type _X*) (HW_RTC_BASEADDR+6))  /* 
                                  RTC Xtal-clock Pre-Divider Word Register */
                             8819 ; 273  |/////////////////////////////////////////////////////////////////////////////////
                             8820 ; 274  |
                             8821 ; 275  |//  RTC PERSISTENT Register0 (HW_RTC_PERSISTENT0) Bit Definitions
                             8822 ; 276  |
                             8823 ; 277  |#define HW_RTC_PERSISTENT0_ALARMEN_BITPOS (0)
                             8824 ; 278  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 150

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8825 ; 279  |#define HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS (2)
                             8826 ; 280  |#define HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS (3)
                             8827 ; 281  |#define HW_RTC_PERSISTENT0_RSVD0_BITPOS (4)
                             8828 ; 282  |
                             8829 ; 283  |#define HW_RTC_PERSISTENT0_ALARMEN_WIDTH (1)
                             8830 ; 284  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH (1)
                             8831 ; 285  |#define HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH (1)
                             8832 ; 286  |#define HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH (1)
                             8833 ; 287  |#define HW_RTC_PERSISTENT0_RSVD0_WIDTH (21)
                             8834 ; 288  |
                             8835 ; 289  |#define HW_RTC_PERSISTENT0_ALARMEN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMEN_WIDTH)-1)<<HW_
                                  RTC_PERSISTENT0_ALARMEN_BITPOS) 
                             8836 ; 290  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDT
                                  H)-1)<<HW_RTC_PERSISTENT0_ALARMWAKE_EN_BITPOS)
                             8837 ; 291  |#define HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK (((1<<HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_ALARMWAKE_BITPOS) 
                             8838 ; 292  |#define HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK (((1<<HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH)-1)<
                                  <HW_RTC_PERSISTENT0_XTALPDOWN_BITPOS) 
                             8839 ; 293  |#define HW_RTC_PERSISTENT0_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT0_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT0_RSVD0_BITPOS) 
                             8840 ; 294  |
                             8841 ; 295  |#define HW_RTC_PERSISTENT0_ALARMEN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMEN_SETMASK)
                             8842 ; 296  |#define HW_RTC_PERSISTENT0_ALARMWAKE_EN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_EN_SE
                                  TMASK)
                             8843 ; 297  |#define HW_RTC_PERSISTENT0_ALARMWAKE_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_ALARMWAKE_SETMASK)
                                  
                             8844 ; 298  |#define HW_RTC_PERSISTENT0_XTALPDOWN_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_XTALPDOWN_SETMASK)
                                  
                             8845 ; 299  |#define HW_RTC_PERSISTENT0_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT0_RSVD0_SETMASK)
                             8846 ; 300  |
                             8847 ; 301  |typedef union               
                             8848 ; 302  |{
                             8849 ; 303  |   struct {
                             8850 ; 304  |      int ALARMEN   : HW_RTC_PERSISTENT0_ALARMEN_WIDTH;
                             8851 ; 305  |           int ALARMWAKE_EN  :  HW_RTC_PERSISTENT0_ALARMWAKE_EN_WIDTH;
                             8852 ; 306  |      int ALARMWAKE : HW_RTC_PERSISTENT0_ALARMWAKE_WIDTH;
                             8853 ; 307  |      int XTALPDOWN : HW_RTC_PERSISTENT0_XTALPDOWN_WIDTH;
                             8854 ; 308  |      int RSVD0     : HW_RTC_PERSISTENT0_RSVD0_WIDTH;
                             8855 ; 309  |   } B;
                             8856 ; 310  |    int I;
                             8857 ; 311  |    unsigned int U;
                             8858 ; 312  |} rtc_PERSISTENT0_type;
                             8859 ; 313  |#define HW_RTC_PERSISTENT0   (*(volatile rtc_PERSISTENT0_type _X*) (HW_RTC_BASEADDR+7))  /
                                  * RTC PERSISTENT Register0 */
                             8860 ; 314  |
                             8861 ; 315  |/////////////////////////////////////////////////////////////////////////////////
                             8862 ; 316  |
                             8863 ; 317  |//  RTC PERSISTENT Register1 (HW_RTC_PERSISTENT1) Bit Definitions
                             8864 ; 318  |
                             8865 ; 319  |#define HW_RTC_PERSISTENT1_RSVD0_BITPOS (0)
                             8866 ; 320  |
                             8867 ; 321  |#define HW_RTC_PERSISTENT1_RSVD0_WIDTH (24)
                             8868 ; 322  |
                             8869 ; 323  |#define HW_RTC_PERSISTENT1_RSVD0_SETMASK (((1<<HW_RTC_PERSISTENT1_RSVD0_WIDTH)-1)<<HW_RTC_
                                  PERSISTENT1_RSVD0_BITPOS) 
                             8870 ; 324  |
                             8871 ; 325  |#define HW_RTC_PERSISTENT1_RSVD0_CLRMASK (~(WORD)HW_RTC_PERSISTENT1_RSVD0_SETMASK)
                             8872 ; 326  |
                             8873 ; 327  |
                             8874 ; 328  |typedef union               
                             8875 ; 329  |{
                             8876 ; 330  |    struct {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 151

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8877 ; 331  |         int RSVD0      : HW_RTC_PERSISTENT1_RSVD0_WIDTH;
                             8878 ; 332  |    } B;
                             8879 ; 333  |    int I;
                             8880 ; 334  |    unsigned int U;
                             8881 ; 335  |} rtc_PERSISTENT1_type;
                             8882 ; 336  |#define HW_RTC_PERSISTENT1   (*(volatile rtc_PERSISTENT1_type _X*) (HW_RTC_BASEADDR+8))  /
                                  * RTC PERSISTENT Register1 */
                             8883 ; 337  |
                             8884 ; 338  |
                             8885 ; 339  |#endif
                             8886 ; 340  |
                             8887 ; 341  |
                             8888 ; 342  |
                             8889 ; 343  |
                             8890 ; 344  |
                             8891 ; 345  |
                             8892 ; 346  |
                             8893 ; 347  |
                             8894 ; 348  |
                             8895 ; 349  |
                             8896 ; 350  |
                             8897 ; 351  |
                             8898 ; 352  |
                             8899 ; 353  |
                             8900 
                             8902 
                             8903 ; 30   |#include "regsspare.h"
                             8904 
                             8906 
                             8907 ; 1    |#if !(defined(RESGSSPARE_INC))
                             8908 ; 2    |#define RESGSSPARE_INC 1
                             8909 ; 3    |
                             8910 ; 4    |#define HW_SPARER_BASEADDR (0xFA16)
                             8911 ; 5    |
                             8912 ; 6    |
                             8913 ; 7    |#define HW_SPARER_I2SS_BITPOS 0
                             8914 ; 8    |#define HW_SPARER_USB_SELECT_BITPOS 1
                             8915 ; 9    |#define HW_SPARER_USB_PLUGIN_BITPOS 8
                             8916 ; 10   |#define HW_SPARER_PSWITCH_BITPOS 9
                             8917 ; 11   |
                             8918 ; 12   |#define HW_SPARER_I2SS_SETMASK 1<<HW_SPARER_I2SS_BITPOS
                             8919 ; 13   |#define HW_SPARER_USB_SELECT_SETMASK 1<<HW_SPARER_USB_SELECT_BITPOS
                             8920 ; 14   |
                             8921 ; 15   |#define HW_SPARER_I2SS_CLRMASK ~(WORD)HW_SPARER_I2SS_SETMASK
                             8922 ; 16   |#define HW_SPARER_USB_SELECT_CLRMASK ~(WORD)HW_SPARER_USB_SELECT_SETMASK
                             8923 ; 17   |
                             8924 ; 18   |
                             8925 ; 19   |
                             8926 ; 20   |typedef union               
                             8927 ; 21   |{
                             8928 ; 22   |    struct {
                             8929 ; 23   |        int      I2SS       :1;     
                             8930 ; 24   |        int      USBSELECT  :1;     
                             8931 ; 25   |        unsigned            :6;
                             8932 ; 26   |        int      USBPLUGIN  :1;     
                             8933 ; 27   |        int      PSWITCH    :1;     
                             8934 ; 28   |    } B;
                             8935 ; 29   |
                             8936 ; 30   |    int I;
                             8937 ; 31   |
                             8938 ; 32   |} spare_type;
                             8939 ; 33   |#define HW_SPARER      (*(volatile spare_type _X*) (HW_SPARER_BASEADDR))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 152

M:ADDR CODE           CYCLES LINE SOURCELINE
                             8940 ; 34   |
                             8941 ; 35   |
                             8942 ; 36   |
                             8943 ; 37   |#endif
                             8944 
                             8946 
                             8947 ; 31   |#include "regsspi.h"
                             8948 
                             8950 
                             8951 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8952 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             8953 ; 3    |//;; Filename    : regsspi.inc
                             8954 ; 4    |//;; Description : Register definitions for SPI interface
                             8955 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             8956 ; 6    |
                             8957 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             8958 ; 8    |// The following naming conventions are followed in this file.
                             8959 ; 9    |// All registers are named using the format...
                             8960 ; 10   |//     HW_<module>_<regname>
                             8961 ; 11   |// where <module> is the module name which can be any of the following...
                             8962 ; 12   |//     USB20
                             8963 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             8964 ; 14   |// module name includes a number starting from 0 for the first instance of
                             8965 ; 15   |// that module)
                             8966 ; 16   |// <regname> is the specific register within that module
                             8967 ; 17   |// We also define the following...
                             8968 ; 18   |//     HW_<module>_<regname>_BITPOS
                             8969 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             8970 ; 20   |//     HW_<module>_<regname>_SETMASK
                             8971 ; 21   |// which does something else, and
                             8972 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             8973 ; 23   |// which does something else.
                             8974 ; 24   |// Other rules
                             8975 ; 25   |//     All caps
                             8976 ; 26   |//     Numeric identifiers start at 0
                             8977 ; 27   |#if !(defined(regsspiinc))
                             8978 ; 28   |#define regsspiinc 1
                             8979 ; 29   |
                             8980 ; 30   |#include "types.h"
                             8981 
                             8983 
                             8984 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             8985 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             8986 ; 3    |//
                             8987 ; 4    |// Filename: types.h
                             8988 ; 5    |// Description: Standard data types
                             8989 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             8990 ; 7    |
                             8991 ; 8    |#ifndef _TYPES_H
                             8992 ; 9    |#define _TYPES_H
                             8993 ; 10   |
                             8994 ; 11   |// TODO:  move this outta here!
                             8995 ; 12   |#if !defined(NOERROR)
                             8996 ; 13   |#define NOERROR 0
                             8997 ; 14   |#define SUCCESS 0
                             8998 ; 15   |#endif 
                             8999 ; 16   |#if !defined(SUCCESS)
                             9000 ; 17   |#define SUCCESS  0
                             9001 ; 18   |#endif
                             9002 ; 19   |#if !defined(ERROR)
                             9003 ; 20   |#define ERROR   -1
                             9004 ; 21   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 153

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9005 ; 22   |#if !defined(FALSE)
                             9006 ; 23   |#define FALSE 0
                             9007 ; 24   |#endif
                             9008 ; 25   |#if !defined(TRUE)
                             9009 ; 26   |#define TRUE  1
                             9010 ; 27   |#endif
                             9011 ; 28   |
                             9012 ; 29   |#if !defined(NULL)
                             9013 ; 30   |#define NULL 0
                             9014 ; 31   |#endif
                             9015 ; 32   |
                             9016 ; 33   |#define MAX_INT     0x7FFFFF
                             9017 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9018 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9019 ; 36   |#define MAX_ULONG   (-1) 
                             9020 ; 37   |
                             9021 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9022 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9023 ; 40   |
                             9024 ; 41   |
                             9025 ; 42   |#define BYTE    unsigned char       // btVarName
                             9026 ; 43   |#define CHAR    signed char         // cVarName
                             9027 ; 44   |#define USHORT  unsigned short      // usVarName
                             9028 ; 45   |#define SHORT   unsigned short      // sVarName
                             9029 ; 46   |#define WORD    unsigned int        // wVarName
                             9030 ; 47   |#define INT     signed int          // iVarName
                             9031 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9032 ; 49   |#define LONG    signed long         // lVarName
                             9033 ; 50   |#define BOOL    unsigned int        // bVarName
                             9034 ; 51   |#define FRACT   _fract              // frVarName
                             9035 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9036 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9037 ; 54   |#define FLOAT   float               // fVarName
                             9038 ; 55   |#define DBL     double              // dVarName
                             9039 ; 56   |#define ENUM    enum                // eVarName
                             9040 ; 57   |#define CMX     _complex            // cmxVarName
                             9041 ; 58   |typedef WORD UCS3;                   // 
                             9042 ; 59   |
                             9043 ; 60   |#define UINT16  unsigned short
                             9044 ; 61   |#define UINT8   unsigned char   
                             9045 ; 62   |#define UINT32  unsigned long
                             9046 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9047 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9048 ; 65   |#define WCHAR   UINT16
                             9049 ; 66   |
                             9050 ; 67   |//UINT128 is 16 bytes or 6 words
                             9051 ; 68   |typedef struct UINT128_3500 {   
                             9052 ; 69   |    int val[6];     
                             9053 ; 70   |} UINT128_3500;
                             9054 ; 71   |
                             9055 ; 72   |#define UINT128   UINT128_3500
                             9056 ; 73   |
                             9057 ; 74   |// Little endian word packed byte strings:   
                             9058 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9059 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9060 ; 77   |// Little endian word packed byte strings:   
                             9061 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9062 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9063 ; 80   |
                             9064 ; 81   |// Declare Memory Spaces To Use When Coding
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 154

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9065 ; 82   |// A. Sector Buffers
                             9066 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9067 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9068 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9069 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9070 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9071 ; 88   |// B. Media DDI Memory
                             9072 ; 89   |#define MEDIA_DDI_MEM _Y
                             9073 ; 90   |
                             9074 ; 91   |
                             9075 ; 92   |
                             9076 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9077 ; 94   |// Examples of circular pointers:
                             9078 ; 95   |//    INT CIRC cpiVarName
                             9079 ; 96   |//    DWORD CIRC cpdwVarName
                             9080 ; 97   |
                             9081 ; 98   |#define RETCODE INT                 // rcVarName
                             9082 ; 99   |
                             9083 ; 100  |// generic bitfield structure
                             9084 ; 101  |struct Bitfield {
                             9085 ; 102  |    unsigned int B0  :1;
                             9086 ; 103  |    unsigned int B1  :1;
                             9087 ; 104  |    unsigned int B2  :1;
                             9088 ; 105  |    unsigned int B3  :1;
                             9089 ; 106  |    unsigned int B4  :1;
                             9090 ; 107  |    unsigned int B5  :1;
                             9091 ; 108  |    unsigned int B6  :1;
                             9092 ; 109  |    unsigned int B7  :1;
                             9093 ; 110  |    unsigned int B8  :1;
                             9094 ; 111  |    unsigned int B9  :1;
                             9095 ; 112  |    unsigned int B10 :1;
                             9096 ; 113  |    unsigned int B11 :1;
                             9097 ; 114  |    unsigned int B12 :1;
                             9098 ; 115  |    unsigned int B13 :1;
                             9099 ; 116  |    unsigned int B14 :1;
                             9100 ; 117  |    unsigned int B15 :1;
                             9101 ; 118  |    unsigned int B16 :1;
                             9102 ; 119  |    unsigned int B17 :1;
                             9103 ; 120  |    unsigned int B18 :1;
                             9104 ; 121  |    unsigned int B19 :1;
                             9105 ; 122  |    unsigned int B20 :1;
                             9106 ; 123  |    unsigned int B21 :1;
                             9107 ; 124  |    unsigned int B22 :1;
                             9108 ; 125  |    unsigned int B23 :1;
                             9109 ; 126  |};
                             9110 ; 127  |
                             9111 ; 128  |union BitInt {
                             9112 ; 129  |        struct Bitfield B;
                             9113 ; 130  |        int        I;
                             9114 ; 131  |};
                             9115 ; 132  |
                             9116 ; 133  |#define MAX_MSG_LENGTH 10
                             9117 ; 134  |struct CMessage
                             9118 ; 135  |{
                             9119 ; 136  |        unsigned int m_uLength;
                             9120 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9121 ; 138  |};
                             9122 ; 139  |
                             9123 ; 140  |typedef struct {
                             9124 ; 141  |    WORD m_wLength;
                             9125 ; 142  |    WORD m_wMessage;
                             9126 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 155

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9127 ; 144  |} Message;
                             9128 ; 145  |
                             9129 ; 146  |struct MessageQueueDescriptor
                             9130 ; 147  |{
                             9131 ; 148  |        int *m_pBase;
                             9132 ; 149  |        int m_iModulo;
                             9133 ; 150  |        int m_iSize;
                             9134 ; 151  |        int *m_pHead;
                             9135 ; 152  |        int *m_pTail;
                             9136 ; 153  |};
                             9137 ; 154  |
                             9138 ; 155  |struct ModuleEntry
                             9139 ; 156  |{
                             9140 ; 157  |    int m_iSignaledEventMask;
                             9141 ; 158  |    int m_iWaitEventMask;
                             9142 ; 159  |    int m_iResourceOfCode;
                             9143 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9144 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9145 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9146 ; 163  |    int m_uTimeOutHigh;
                             9147 ; 164  |    int m_uTimeOutLow;
                             9148 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9149 ; 166  |};
                             9150 ; 167  |
                             9151 ; 168  |union WaitMask{
                             9152 ; 169  |    struct B{
                             9153 ; 170  |        unsigned int m_bNone     :1;
                             9154 ; 171  |        unsigned int m_bMessage  :1;
                             9155 ; 172  |        unsigned int m_bTimer    :1;
                             9156 ; 173  |        unsigned int m_bButton   :1;
                             9157 ; 174  |    } B;
                             9158 ; 175  |    int I;
                             9159 ; 176  |} ;
                             9160 ; 177  |
                             9161 ; 178  |
                             9162 ; 179  |struct Button {
                             9163 ; 180  |        WORD wButtonEvent;
                             9164 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9165 ; 182  |};
                             9166 ; 183  |
                             9167 ; 184  |struct Message {
                             9168 ; 185  |        WORD wMsgLength;
                             9169 ; 186  |        WORD wMsgCommand;
                             9170 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9171 ; 188  |};
                             9172 ; 189  |
                             9173 ; 190  |union EventTypes {
                             9174 ; 191  |        struct CMessage msg;
                             9175 ; 192  |        struct Button Button ;
                             9176 ; 193  |        struct Message Message;
                             9177 ; 194  |};
                             9178 ; 195  |
                             9179 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                             9180 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9181 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9182 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9183 ; 200  |
                             9184 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9185 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9186 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9187 ; 204  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 156

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9188 ; 205  |#if DEBUG
                             9189 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9190 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9191 ; 208  |#else 
                             9192 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9193 ; 210  |#define DebugBuildAssert(x)    
                             9194 ; 211  |#endif
                             9195 ; 212  |
                             9196 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9197 ; 214  |//  #pragma asm
                             9198 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9199 ; 216  |//  #pragma endasm
                             9200 ; 217  |
                             9201 ; 218  |
                             9202 ; 219  |#ifdef COLOR_262K
                             9203 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9204 ; 221  |#elif defined(COLOR_65K)
                             9205 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9206 ; 223  |#else
                             9207 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9208 ; 225  |#endif
                             9209 ; 226  |    
                             9210 ; 227  |#endif // #ifndef _TYPES_H
                             9211 
                             9213 
                             9214 ; 31   |
                             9215 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9216 ; 33   |
                             9217 ; 34   |//   SPI STMP3500 Registers 
                             9218 ; 35   |//   Last Updated 7.7.2003 Dave Dyches
                             9219 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9220 ; 37   |
                             9221 ; 38   |#define HW_SPI_BASEADDR (0xFFF9)
                             9222 ; 39   |
                             9223 ; 40   |
                             9224 ; 41   |
                             9225 ; 42   |// /////////////////////////////////////////////
                             9226 ; 43   |// //  SPI Control/Status Register Bit Definitions
                             9227 ; 44   |#define HW_SPCSR_SPE_BITPOS (0)
                             9228 ; 45   |#define HW_SPCSR_MSTR_BITPOS (1)
                             9229 ; 46   |#define HW_SPCSR_SPIE_BITPOS (2)
                             9230 ; 47   |#define HW_SPCSR_CPOL_BITPOS (3)
                             9231 ; 48   |#define HW_SPCSR_CPHA_BITPOS (4)
                             9232 ; 49   |#define HW_SPCSR_SPIF_BITPOS (5)
                             9233 ; 50   |#define HW_SPCSR_WCOL_BITPOS (6)
                             9234 ; 51   |#define HW_SPCSR_MODF_BITPOS (7)
                             9235 ; 52   |#define HW_SPCSR_DIV_BITPOS (8)
                             9236 ; 53   |#define HW_SPCSR_RSVD_BITPOS (16)
                             9237 ; 54   |
                             9238 ; 55   |#define HW_SPCSR_SPE_WIDTH (1)
                             9239 ; 56   |#define HW_SPCSR_MSTR_WIDTH (1)
                             9240 ; 57   |#define HW_SPCSR_SPIE_WIDTH (1)
                             9241 ; 58   |#define HW_SPCSR_CPOL_WIDTH (1)
                             9242 ; 59   |#define HW_SPCSR_CPHA_WIDTH (1)
                             9243 ; 60   |#define HW_SPCSR_SPIF_WIDTH (1)
                             9244 ; 61   |#define HW_SPCSR_WCOL_WIDTH (1)
                             9245 ; 62   |#define HW_SPCSR_MODF_WIDTH (1)
                             9246 ; 63   |#define HW_SPCSR_DIV_WIDTH (8)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 157

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9247 ; 64   |#define HW_SPCSR_RSVD_WIDTH (8)
                             9248 ; 65   |
                             9249 ; 66   |#define HW_SPCSR_SPE_SETMASK (((1<<HW_SPCSR_SPE_WIDTH)-1)<<HW_SPCSR_SPE_BITPOS)
                             9250 ; 67   |#define HW_SPCSR_MSTR_SETMASK (((1<<HW_SPCSR_MSTR_WIDTH)-1)<<HW_SPCSR_MSTR_BITPOS)
                             9251 ; 68   |#define HW_SPCSR_SPIE_SETMASK (((1<<HW_SPCSR_SPIE_WIDTH)-1)<<HW_SPCSR_SPIE_BITPOS)
                             9252 ; 69   |#define HW_SPCSR_CPOL_SETMASK (((1<<HW_SPCSR_CPOL_WIDTH)-1)<<HW_SPCSR_CPOL_BITPOS)
                             9253 ; 70   |#define HW_SPCSR_CPHA_SETMASK (((1<<HW_SPCSR_CPHA_WIDTH)-1)<<HW_SPCSR_CPHA_BITPOS)
                             9254 ; 71   |#define HW_SPCSR_SPIF_SETMASK (((1<<HW_SPCSR_SPIF_WIDTH)-1)<<HW_SPCSR_SPIF_BITPOS)
                             9255 ; 72   |#define HW_SPCSR_WCOL_SETMASK (((1<<HW_SPCSR_WCOL_WIDTH)-1)<<HW_SPCSR_WCOL_BITPOS)
                             9256 ; 73   |#define HW_SPCSR_MODF_SETMASK (((1<<HW_SPCSR_MODF_WIDTH)-1)<<HW_SPCSR_MODF_BITPOS)
                             9257 ; 74   |#define HW_SPCSR_DIV_SETMASK (((1<<HW_SPCSR_DIV_WIDTH)-1)<<HW_SPCSR_DIV_BITPOS)
                             9258 ; 75   |#define HW_SPCSR_RSVD_SETMASK (((1<<HW_SPCSR_RSVD_WIDTH)-1)<<HW_SPCSR_RSVD_BITPOS)
                             9259 ; 76   |
                             9260 ; 77   |#define HW_SPCSR_SPE_CLRMASK (~(WORD)HW_SPCSR_SPE_SETMASK)
                             9261 ; 78   |#define HW_SPCSR_MSTR_CLRMASK (~(WORD)HW_SPCSR_MSTR_SETMASK)
                             9262 ; 79   |#define HW_SPCSR_SPIE_CLRMASK (~(WORD)HW_SPCSR_SPIE_SETMASK)
                             9263 ; 80   |#define HW_SPCSR_CPOL_CLRMASK (~(WORD)HW_SPCSR_CPOL_SETMASK)
                             9264 ; 81   |#define HW_SPCSR_CPHA_CLRMASK (~(WORD)HW_SPCSR_CPHA_SETMASK)
                             9265 ; 82   |#define HW_SPCSR_SPIF_CLRMASK (~(WORD)HW_SPCSR_SPIF_SETMASK)
                             9266 ; 83   |#define HW_SPCSR_WCOL_CLRMASK (~(WORD)HW_SPCSR_WCOL_SETMASK)
                             9267 ; 84   |#define HW_SPCSR_MODF_CLRMASK (~(WORD)HW_SPCSR_MODF_SETMASK)
                             9268 ; 85   |#define HW_SPCSR_DIV_CLRMASK (~(WORD)HW_SPCSR_DIV_SETMASK)
                             9269 ; 86   |#define HW_SPCSR_RSVD_CLRMASK (~(WORD)HW_SPCSR_RSVD_SETMASK)
                             9270 ; 87   |
                             9271 ; 88   |typedef union               
                             9272 ; 89   |{
                             9273 ; 90   |    struct {
                             9274 ; 91   |        int SPE                 : HW_SPCSR_SPE_WIDTH;    
                             9275 ; 92   |        int MSTR                : HW_SPCSR_MSTR_WIDTH;
                             9276 ; 93   |        int SPIE                    : HW_SPCSR_SPIE_WIDTH;
                             9277 ; 94   |        int CPOL                : HW_SPCSR_CPOL_WIDTH;
                             9278 ; 95   |        int CPHA                : HW_SPCSR_CPHA_WIDTH;
                             9279 ; 96   |        int SPIF                : HW_SPCSR_SPIF_WIDTH;
                             9280 ; 97   |        int WCOL                    : HW_SPCSR_WCOL_WIDTH;
                             9281 ; 98   |        int MODF                : HW_SPCSR_MODF_WIDTH;
                             9282 ; 99   |        int DIV                 : HW_SPCSR_DIV_WIDTH;
                             9283 ; 100  |    } B;
                             9284 ; 101  |
                             9285 ; 102  |    int I;
                             9286 ; 103  |    unsigned int U;
                             9287 ; 104  |} spcsr_type;
                             9288 ; 105  |#define HW_SPCSR      (*(volatile spcsr_type _X*) (HW_SPI_BASEADDR))    /* SPI Control / S
                                  tatus Register */
                             9289 ; 106  |
                             9290 ; 107  |// /////////////////////////////////////////////
                             9291 ; 108  |// //  SPI Data Register Bit Definitions
                             9292 ; 109  |#define HW_SPDR_SPIDATA_BITPOS (0)
                             9293 ; 110  |#define HW_SPDR_RSVD_BITPOS (8)
                             9294 ; 111  |
                             9295 ; 112  |#define HW_SPDR_SPIDATA_WIDTH (8)
                             9296 ; 113  |#define HW_SPDR_RSVD_WIDTH (16)
                             9297 ; 114  |
                             9298 ; 115  |#define HW_SPDR_SPIDATA_SETMASK (((1<<HW_SPDR_SPIDATA_WIDTH)-1)<<HW_SPDR_SPIDATA_BITPOS)
                             9299 ; 116  |#define HW_SPDR_RSVD_SETMASK (((1<<HW_SPDR_RSVD_WIDTH)-1)<<HW_SPDR_RSVD_BITPOS)
                             9300 ; 117  |
                             9301 ; 118  |#define HW_SPDR_SPIDATA_CLRMASK (~(WORD)HW_SPDR_SPIDATA_SETMASK) 
                             9302 ; 119  |#define HW_SPDR_RSVD_CLRMASK (~(WORD)HW_SPDR_RSVD_SETMASK)
                             9303 ; 120  |
                             9304 ; 121  |typedef union               
                             9305 ; 122  |{
                             9306 ; 123  |    struct {
                             9307 ; 124  |        int SPIDATA                     : HW_SPDR_SPIDATA_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 158

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9308 ; 125  |    } B;
                             9309 ; 126  |
                             9310 ; 127  |    int I;
                             9311 ; 128  |    unsigned int U;
                             9312 ; 129  |} spdr_type;
                             9313 ; 130  |#define HW_SPDR      (*(volatile spdr_type _X*) (HW_SPI_BASEADDR+1))    /* SPI Data Regist
                                  er */
                             9314 ; 131  |
                             9315 ; 132  |
                             9316 ; 133  |#endif
                             9317 ; 134  |
                             9318 ; 135  |
                             9319 
                             9321 
                             9322 ; 32   |#include "regsswizzle.h"
                             9323 
                             9325 
                             9326 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9327 ; 2    |//;; Copyright(C) SigmaTel, Inc. 2002-2003
                             9328 ; 3    |//;; Filename    : regsswizzle.inc
                             9329 ; 4    |//;; Description : Register definitions for Swizzle interface
                             9330 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9331 ; 6    |
                             9332 ; 7    |/////////////////////////////////////////////////////////////////////////////////
                             9333 ; 8    |// The following naming conventions are followed in this file.
                             9334 ; 9    |// All registers are named using the format...
                             9335 ; 10   |//     HW_<module>_<regname>
                             9336 ; 11   |// where <module> is the module name which can be any of the following...
                             9337 ; 12   |//     USB20
                             9338 ; 13   |// (Note that when there is more than one copy of a particular module, the
                             9339 ; 14   |// module name includes a number starting from 0 for the first instance of
                             9340 ; 15   |// that module)
                             9341 ; 16   |// <regname> is the specific register within that module
                             9342 ; 17   |// We also define the following...
                             9343 ; 18   |//     HW_<module>_<regname>_BITPOS
                             9344 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9345 ; 20   |//     HW_<module>_<regname>_SETMASK
                             9346 ; 21   |// which does something else, and
                             9347 ; 22   |//     HW_<module>_<regname>_CLRMASK
                             9348 ; 23   |// which does something else.
                             9349 ; 24   |// Other rules
                             9350 ; 25   |//     All caps
                             9351 ; 26   |//     Numeric identifiers start at 0
                             9352 ; 27   |#if !(defined(regsswizzleinc))
                             9353 ; 28   |#define regsswizzleinc 1
                             9354 ; 29   |
                             9355 ; 30   |#include "types.h"
                             9356 
                             9358 
                             9359 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9360 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9361 ; 3    |//
                             9362 ; 4    |// Filename: types.h
                             9363 ; 5    |// Description: Standard data types
                             9364 ; 6    |////////////////////////////////////////////////////////////////////////////////
                             9365 ; 7    |
                             9366 ; 8    |#ifndef _TYPES_H
                             9367 ; 9    |#define _TYPES_H
                             9368 ; 10   |
                             9369 ; 11   |// TODO:  move this outta here!
                             9370 ; 12   |#if !defined(NOERROR)
                             9371 ; 13   |#define NOERROR 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 159

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9372 ; 14   |#define SUCCESS 0
                             9373 ; 15   |#endif 
                             9374 ; 16   |#if !defined(SUCCESS)
                             9375 ; 17   |#define SUCCESS  0
                             9376 ; 18   |#endif
                             9377 ; 19   |#if !defined(ERROR)
                             9378 ; 20   |#define ERROR   -1
                             9379 ; 21   |#endif
                             9380 ; 22   |#if !defined(FALSE)
                             9381 ; 23   |#define FALSE 0
                             9382 ; 24   |#endif
                             9383 ; 25   |#if !defined(TRUE)
                             9384 ; 26   |#define TRUE  1
                             9385 ; 27   |#endif
                             9386 ; 28   |
                             9387 ; 29   |#if !defined(NULL)
                             9388 ; 30   |#define NULL 0
                             9389 ; 31   |#endif
                             9390 ; 32   |
                             9391 ; 33   |#define MAX_INT     0x7FFFFF
                             9392 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9393 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9394 ; 36   |#define MAX_ULONG   (-1) 
                             9395 ; 37   |
                             9396 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9397 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9398 ; 40   |
                             9399 ; 41   |
                             9400 ; 42   |#define BYTE    unsigned char       // btVarName
                             9401 ; 43   |#define CHAR    signed char         // cVarName
                             9402 ; 44   |#define USHORT  unsigned short      // usVarName
                             9403 ; 45   |#define SHORT   unsigned short      // sVarName
                             9404 ; 46   |#define WORD    unsigned int        // wVarName
                             9405 ; 47   |#define INT     signed int          // iVarName
                             9406 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9407 ; 49   |#define LONG    signed long         // lVarName
                             9408 ; 50   |#define BOOL    unsigned int        // bVarName
                             9409 ; 51   |#define FRACT   _fract              // frVarName
                             9410 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9411 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9412 ; 54   |#define FLOAT   float               // fVarName
                             9413 ; 55   |#define DBL     double              // dVarName
                             9414 ; 56   |#define ENUM    enum                // eVarName
                             9415 ; 57   |#define CMX     _complex            // cmxVarName
                             9416 ; 58   |typedef WORD UCS3;                   // 
                             9417 ; 59   |
                             9418 ; 60   |#define UINT16  unsigned short
                             9419 ; 61   |#define UINT8   unsigned char   
                             9420 ; 62   |#define UINT32  unsigned long
                             9421 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9422 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9423 ; 65   |#define WCHAR   UINT16
                             9424 ; 66   |
                             9425 ; 67   |//UINT128 is 16 bytes or 6 words
                             9426 ; 68   |typedef struct UINT128_3500 {   
                             9427 ; 69   |    int val[6];     
                             9428 ; 70   |} UINT128_3500;
                             9429 ; 71   |
                             9430 ; 72   |#define UINT128   UINT128_3500
                             9431 ; 73   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 160

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9432 ; 74   |// Little endian word packed byte strings:   
                             9433 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9434 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9435 ; 77   |// Little endian word packed byte strings:   
                             9436 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9437 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9438 ; 80   |
                             9439 ; 81   |// Declare Memory Spaces To Use When Coding
                             9440 ; 82   |// A. Sector Buffers
                             9441 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9442 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9443 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9444 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9445 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9446 ; 88   |// B. Media DDI Memory
                             9447 ; 89   |#define MEDIA_DDI_MEM _Y
                             9448 ; 90   |
                             9449 ; 91   |
                             9450 ; 92   |
                             9451 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9452 ; 94   |// Examples of circular pointers:
                             9453 ; 95   |//    INT CIRC cpiVarName
                             9454 ; 96   |//    DWORD CIRC cpdwVarName
                             9455 ; 97   |
                             9456 ; 98   |#define RETCODE INT                 // rcVarName
                             9457 ; 99   |
                             9458 ; 100  |// generic bitfield structure
                             9459 ; 101  |struct Bitfield {
                             9460 ; 102  |    unsigned int B0  :1;
                             9461 ; 103  |    unsigned int B1  :1;
                             9462 ; 104  |    unsigned int B2  :1;
                             9463 ; 105  |    unsigned int B3  :1;
                             9464 ; 106  |    unsigned int B4  :1;
                             9465 ; 107  |    unsigned int B5  :1;
                             9466 ; 108  |    unsigned int B6  :1;
                             9467 ; 109  |    unsigned int B7  :1;
                             9468 ; 110  |    unsigned int B8  :1;
                             9469 ; 111  |    unsigned int B9  :1;
                             9470 ; 112  |    unsigned int B10 :1;
                             9471 ; 113  |    unsigned int B11 :1;
                             9472 ; 114  |    unsigned int B12 :1;
                             9473 ; 115  |    unsigned int B13 :1;
                             9474 ; 116  |    unsigned int B14 :1;
                             9475 ; 117  |    unsigned int B15 :1;
                             9476 ; 118  |    unsigned int B16 :1;
                             9477 ; 119  |    unsigned int B17 :1;
                             9478 ; 120  |    unsigned int B18 :1;
                             9479 ; 121  |    unsigned int B19 :1;
                             9480 ; 122  |    unsigned int B20 :1;
                             9481 ; 123  |    unsigned int B21 :1;
                             9482 ; 124  |    unsigned int B22 :1;
                             9483 ; 125  |    unsigned int B23 :1;
                             9484 ; 126  |};
                             9485 ; 127  |
                             9486 ; 128  |union BitInt {
                             9487 ; 129  |        struct Bitfield B;
                             9488 ; 130  |        int        I;
                             9489 ; 131  |};
                             9490 ; 132  |
                             9491 ; 133  |#define MAX_MSG_LENGTH 10
                             9492 ; 134  |struct CMessage
                             9493 ; 135  |{
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 161

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9494 ; 136  |        unsigned int m_uLength;
                             9495 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                             9496 ; 138  |};
                             9497 ; 139  |
                             9498 ; 140  |typedef struct {
                             9499 ; 141  |    WORD m_wLength;
                             9500 ; 142  |    WORD m_wMessage;
                             9501 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                             9502 ; 144  |} Message;
                             9503 ; 145  |
                             9504 ; 146  |struct MessageQueueDescriptor
                             9505 ; 147  |{
                             9506 ; 148  |        int *m_pBase;
                             9507 ; 149  |        int m_iModulo;
                             9508 ; 150  |        int m_iSize;
                             9509 ; 151  |        int *m_pHead;
                             9510 ; 152  |        int *m_pTail;
                             9511 ; 153  |};
                             9512 ; 154  |
                             9513 ; 155  |struct ModuleEntry
                             9514 ; 156  |{
                             9515 ; 157  |    int m_iSignaledEventMask;
                             9516 ; 158  |    int m_iWaitEventMask;
                             9517 ; 159  |    int m_iResourceOfCode;
                             9518 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                             9519 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                             9520 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                             9521 ; 163  |    int m_uTimeOutHigh;
                             9522 ; 164  |    int m_uTimeOutLow;
                             9523 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                             9524 ; 166  |};
                             9525 ; 167  |
                             9526 ; 168  |union WaitMask{
                             9527 ; 169  |    struct B{
                             9528 ; 170  |        unsigned int m_bNone     :1;
                             9529 ; 171  |        unsigned int m_bMessage  :1;
                             9530 ; 172  |        unsigned int m_bTimer    :1;
                             9531 ; 173  |        unsigned int m_bButton   :1;
                             9532 ; 174  |    } B;
                             9533 ; 175  |    int I;
                             9534 ; 176  |} ;
                             9535 ; 177  |
                             9536 ; 178  |
                             9537 ; 179  |struct Button {
                             9538 ; 180  |        WORD wButtonEvent;
                             9539 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                             9540 ; 182  |};
                             9541 ; 183  |
                             9542 ; 184  |struct Message {
                             9543 ; 185  |        WORD wMsgLength;
                             9544 ; 186  |        WORD wMsgCommand;
                             9545 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                             9546 ; 188  |};
                             9547 ; 189  |
                             9548 ; 190  |union EventTypes {
                             9549 ; 191  |        struct CMessage msg;
                             9550 ; 192  |        struct Button Button ;
                             9551 ; 193  |        struct Message Message;
                             9552 ; 194  |};
                             9553 ; 195  |
                             9554 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 162

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9555 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                             9556 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                             9557 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                             9558 ; 200  |
                             9559 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                             9560 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                             9561 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                             9562 ; 204  |
                             9563 ; 205  |#if DEBUG
                             9564 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                             9565 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                             9566 ; 208  |#else 
                             9567 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                             9568 ; 210  |#define DebugBuildAssert(x)    
                             9569 ; 211  |#endif
                             9570 ; 212  |
                             9571 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                             9572 ; 214  |//  #pragma asm
                             9573 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                             9574 ; 216  |//  #pragma endasm
                             9575 ; 217  |
                             9576 ; 218  |
                             9577 ; 219  |#ifdef COLOR_262K
                             9578 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                             9579 ; 221  |#elif defined(COLOR_65K)
                             9580 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                             9581 ; 223  |#else
                             9582 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                             9583 ; 225  |#endif
                             9584 ; 226  |    
                             9585 ; 227  |#endif // #ifndef _TYPES_H
                             9586 
                             9588 
                             9589 ; 31   |
                             9590 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9591 ; 33   |
                             9592 ; 34   |//   SWIZZLE STMP3500 Registers 
                             9593 ; 35   |//   Last Updated 7.11.2003 Dave Dyches
                             9594 ; 36   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9595 ; 37   |
                             9596 ; 38   |
                             9597 ; 39   |
                             9598 ; 40   |
                             9599 ; 41   |
                             9600 ; 42   |#define HW_SWIZZLE_BASEADDR 0xF380
                             9601 ; 43   |
                             9602 ; 44   |
                             9603 ; 45   |
                             9604 ; 46   |////  Swizzle CSR1 (HW_SWIZZLECSR1) Bit Definitions
                             9605 ; 47   |#define HW_SWIZZLECSR1_EN_BITPOS (0)
                             9606 ; 48   |#define HW_SWIZZLECSR1_LA_BITPOS (1)
                             9607 ; 49   |#define HW_SWIZZLECSR1_LNR_BITPOS (2)
                             9608 ; 50   |#define HW_SWIZZLECSR1_SIGN_BITPOS (3)
                             9609 ; 51   |#define HW_SWIZZLECSR1_SHIFT_BITPOS (4)
                             9610 ; 52   |#define HW_SWIZZLECSR1_MEM_BITPOS (8)
                             9611 ; 53   |#define HW_SWIZZLECSR1_CLK_OFF_BITPOS (9)
                             9612 ; 54   |#define HW_SWIZZLECSR1_NEWADD_BITPOS (10)
                             9613 ; 55   |#define HW_SWIZZLECSR1_RSVD_BITPOS (11)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 163

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9614 ; 56   |
                             9615 ; 57   |#define HW_SWIZZLECSR1_EN_WIDTH (1)
                             9616 ; 58   |#define HW_SWIZZLECSR1_LA_WIDTH (1)
                             9617 ; 59   |#define HW_SWIZZLECSR1_LNR_WIDTH (1)
                             9618 ; 60   |#define HW_SWIZZLECSR1_SIGN_WIDTH (1)
                             9619 ; 61   |#define HW_SWIZZLECSR1_SHIFT_WIDTH (4)
                             9620 ; 62   |#define HW_SWIZZLECSR1_MEM_WIDTH (1)
                             9621 ; 63   |#define HW_SWIZZLECSR1_CLK_OFF_WIDTH (1)
                             9622 ; 64   |#define HW_SWIZZLECSR1_NEWADD_WIDTH (1)
                             9623 ; 65   |#define HW_SWIZZLECSR1_RSVD_WIDTH (13)
                             9624 ; 66   |
                             9625 ; 67   |#define HW_SWIZZLECSR1_EN_SETMASK (((1<HW_SWIZZLECSR1_EN_WIDTH)-1)<<HW_SWIZZLECSR1_EN_BITP
                                  OS)
                             9626 ; 68   |#define HW_SWIZZLECSR1_LA_SETMASK (((1<HW_SWIZZLECSR1_LA_WIDTH)-1)<<HW_SWIZZLECSR1_LA_BITP
                                  OS)
                             9627 ; 69   |#define HW_SWIZZLECSR1_LNR_SETMASK (((1<HW_SWIZZLECSR1_LNR_WIDTH)-1)<<HW_SWIZZLECSR1_LNR_B
                                  ITPOS)
                             9628 ; 70   |#define HW_SWIZZLECSR1_SIGN_SETMASK (((1<HW_SWIZZLECSR1_SIGN_WIDTH)-1)<<HW_SWIZZLECSR1_SIG
                                  N_BITPOS)
                             9629 ; 71   |#define HW_SWIZZLECSR1_SHIFT_SETMASK (((1<HW_SWIZZLECSR1_SHIFT_WIDTH)-1)<<HW_SWIZZLECSR1_S
                                  HIFT_BITPOS)
                             9630 ; 72   |#define HW_SWIZZLECSR1_MEM_SETMASK (((1<HW_SWIZZLECSR1_MEM_WIDTH)-1)<<HW_SWIZZLECSR1_MEM_B
                                  ITPOS)
                             9631 ; 73   |#define HW_SWIZZLECSR1_CLK_OFF_SETMASK (((1<HW_SWIZZLECSR1_CLK_OFF_WIDTH)-1)<<HW_SWIZZLECS
                                  R1_CLK_OFF_BITPOS)
                             9632 ; 74   |#define HW_SWIZZLECSR1_NEWADD_SETMASK (((1<HW_SWIZZLECSR1_NEWADD_WIDTH)-1)<<HW_SWIZZLECSR1
                                  _NEWADD_BITPOS)
                             9633 ; 75   |#define HW_SWIZZLECSR1_RSVD_SETMASK (((1<HW_SWIZZLECSR1_RSVD_WIDTH)-1)<<HW_SWIZZLECSR1_RSV
                                  D_BITPOS)
                             9634 ; 76   |
                             9635 ; 77   |#define HW_SWIZZLECSR1_EN_CLRMASK (~(WORD)HW_SWIZZLECSR1_EN_SETMASK)
                             9636 ; 78   |#define HW_SWIZZLECSR1_LA_CLRMASK (~(WORD)HW_SWIZZLECSR1_LA_SETMASK)
                             9637 ; 79   |#define HW_SWIZZLECSR1_LNR_CLRMASK (~(WORD)HW_SWIZZLECSR1_LNR_SETMASK)
                             9638 ; 80   |#define HW_SWIZZLECSR1_SIGN_CLRMASK (~(WORD)HW_SWIZZLECSR1_SIGN_SETMASK)
                             9639 ; 81   |#define HW_SWIZZLECSR1_SHIFT_CLRMASK (~(WORD)HW_SWIZZLECSR1_SHIFT_SETMASK)
                             9640 ; 82   |#define HW_SWIZZLECSR1_MEM_CLRMASK (~(WORD)HW_SWIZZLECSR1_MEM_SETMASK)
                             9641 ; 83   |#define HW_SWIZZLECSR1_CLK_OFF_CLRMASK (~(WORD)HW_SWIZZLECSR1_CLK_OFF_SETMASK)
                             9642 ; 84   |#define HW_SWIZZLECSR1_NEWADD_CLRMASK (~(WORD)HW_SWIZZLECSR1_NEWADD_SETMASK)
                             9643 ; 85   |#define HW_SWIZZLECSR1_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR1_RSVD_SETMASK)
                             9644 ; 86   |
                             9645 ; 87   |////////////////////////////////////////////////////////////////////////////////
                             9646 ; 88   |//  Bit Manipulation Unit Registers
                             9647 ; 89   |////////////////////////////////////////////////////////////////////////////////
                             9648 ; 90   |typedef union
                             9649 ; 91   |{
                             9650 ; 92   |    struct
                             9651 ; 93   |    {
                             9652 ; 94   |    int EN      :1;     /* Swizzle Enable                           */
                             9653 ; 95   |    int LA      :1;     /* Left Align Data                          */
                             9654 ; 96   |    int LNR     :1;     /* Left Barrel Shift                        */
                             9655 ; 97   |    int SIGN    :1;     /* Sign Extend Data                         */
                             9656 ; 98   |    unsigned SHIFT :4;          /* Number of positions to shift (0 to 23)   */
                             9657 ; 99   |    int MEM     :1;     /* Manipulate in Memory (not in registers)  */
                             9658 ; 100  |    int CLK_OFF :1;     /* Gate the Clock, Power Off                */
                             9659 ; 101  |    int NEWADD  :1;     /* Place the data into a new location       */     
                             9660 ; 102  |    } B;
                             9661 ; 103  |    int I;
                             9662 ; 104  |    unsigned U;
                             9663 ; 105  |} swizzlecsr1_type;
                             9664 ; 106  |////////////////////////////////////////////////////////////////////////////////
                             9665 ; 107  |#define HW_SWIZZLECS1R (*(volatile swizzlecsr1_type _X*) (HW_SWIZZLE_BASEADDR))       /* S
                                  wizzle Control & Status Register 1 */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 164

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9666 ; 108  |
                             9667 ; 109  |////  Swizzle CSR2 (HW_SWIZZLECSR2) Bit Definitions
                             9668 ; 110  |#define HW_SWIZZLECSR2_KICK_BITPOS (0)
                             9669 ; 111  |#define HW_SWIZZLECSR2_SASEL_BITPOS (1)
                             9670 ; 112  |#define HW_SWIZZLECSR2_DESASEL_BITPOS (3)
                             9671 ; 113  |#define HW_SWIZZLECSR2_BIGE_BITPOS (5)
                             9672 ; 114  |#define HW_SWIZZLECSR2_BITREV_BITPOS (6)
                             9673 ; 115  |#define HW_SWIZZLECSR2_PLSB_BITPOS (7)
                             9674 ; 116  |#define HW_SWIZZLECSR2_PISB_OFF_BITPOS (8)
                             9675 ; 117  |#define HW_SWIZZLECSR2_PMSB_BITPOS (9)
                             9676 ; 118  |#define HW_SWIZZLECSR2_P16L_BITPOS (10)
                             9677 ; 119  |#define HW_SWIZZLECSR2_P16I_BITPOS (11)
                             9678 ; 120  |#define HW_SWIZZLECSR2_BS_EN_BITPOS (12)
                             9679 ; 121  |#define HW_SWIZZLECSR2_SBYTEDEST_BITPOS (13)
                             9680 ; 122  |#define HW_SWIZZLECSR2_UNKICK_BITPOS (15)
                             9681 ; 123  |#define HW_SWIZZLECSR2_RSVD_BITPOS (16)
                             9682 ; 124  |
                             9683 ; 125  |#define HW_SWIZZLECSR2_KICK_WIDTH (1)
                             9684 ; 126  |#define HW_SWIZZLECSR2_SASEL_WIDTH (2)
                             9685 ; 127  |#define HW_SWIZZLECSR2_DESASEL_WIDTH (2)
                             9686 ; 128  |#define HW_SWIZZLECSR2_BIGE_WIDTH (1)
                             9687 ; 129  |#define HW_SWIZZLECSR2_BITREV_WIDTH (1)
                             9688 ; 130  |#define HW_SWIZZLECSR2_PLSB_WIDTH (1)
                             9689 ; 131  |#define HW_SWIZZLECSR2_PMSB_WIDTH (1)
                             9690 ; 132  |#define HW_SWIZZLECSR2_P16L_WIDTH (1)
                             9691 ; 133  |#define HW_SWIZZLECSR2_P16I_WIDTH (1)
                             9692 ; 134  |#define HW_SWIZZLECSR2_BS_EN_WIDTH (1)
                             9693 ; 135  |#define HW_SWIZZLECSR2_SBYTEDEST_WIDTH (2)
                             9694 ; 136  |#define HW_SWIZZLECSR2_UNKICK_WIDTH (1)
                             9695 ; 137  |#define HW_SWIZZLECSR2_RSVD_WIDTH (8)
                             9696 ; 138  |
                             9697 ; 139  |#define HW_SWIZZLECSR2_KICK_SETMASK (((1<HW_SWIZZLECSR2_KICK_WIDTH)-1)<<HW_SWIZZLECSR2_KIC
                                  K_BITPOS)
                             9698 ; 140  |#define HW_SWIZZLECSR2_SASEL_SETMASK (((1<HW_SWIZZLECSR2_SASEL_WIDTH)-1)<<HW_SWIZZLECSR2_S
                                  ASEL_BITPOS)
                             9699 ; 141  |#define HW_SWIZZLECSR2_DESASEL_SETMASK (((1<HW_SWIZZLECSR2_DESASEL_WIDTH)-1)<<HW_SWIZZLECS
                                  R2_DESASEL_BITPOS)
                             9700 ; 142  |#define HW_SWIZZLECSR2_BIGE_SETMASK (((1<HW_SWIZZLECSR2_BIGE_WIDTH)-1)<<HW_SWIZZLECSR2_BIG
                                  E_BITPOS)
                             9701 ; 143  |#define HW_SWIZZLECSR2_BITREV_SETMASK (((1<HW_SWIZZLECSR2_BITREV_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _BITREV_BITPOS)
                             9702 ; 144  |#define HW_SWIZZLECSR2_PLSB_SETMASK (((1<HW_SWIZZLECSR2_PLSB_WIDTH)-1)<<HW_SWIZZLECSR2_PLS
                                  B_BITPOS)
                             9703 ; 145  |#define HW_SWIZZLECSR2_PMSB_SETMASK (((1<HW_SWIZZLECSR2_PMSB_WIDTH)-1)<<HW_SWIZZLECSR2_PMS
                                  B_BITPOS)
                             9704 ; 146  |#define HW_SWIZZLECSR2_P16L_SETMASK (((1<HW_SWIZZLECSR2_P16L_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  L_BITPOS)
                             9705 ; 147  |#define HW_SWIZZLECSR2_P16I_SETMASK (((1<HW_SWIZZLECSR2_P16I_WIDTH)-1)<<HW_SWIZZLECSR2_P16
                                  I_BITPOS)
                             9706 ; 148  |#define HW_SWIZZLECSR2_BS_EN_SETMASK (((1<HW_SWIZZLECSR2_BS_EN_WIDTH)-1)<<HW_SWIZZLECSR2_B
                                  S_EN_BITPOS)
                             9707 ; 149  |#define HW_SWIZZLECSR2_SBYTEDEST_SETMASK (((1<HW_SWIZZLECSR2_SBYTEDEST_WIDTH)-1)<<HW_SWIZZ
                                  LECSR2_SBYTEDEST_BITPOS)
                             9708 ; 150  |#define HW_SWIZZLECSR2_UNKICK_SETMASK (((1<HW_SWIZZLECSR2_UNKICK_WIDTH)-1)<<HW_SWIZZLECSR2
                                  _UNKICK_BITPOS)
                             9709 ; 151  |#define HW_SWIZZLECSR2_RSVD_SETMASK (((1<HW_SWIZZLECSR2_RSVD_WIDTH)-1)<<HW_SWIZZLECSR2_RSV
                                  D_BITPOS)
                             9710 ; 152  |
                             9711 ; 153  |#define HW_SWIZZLECSR2_KICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_KICK_SETMASK)
                             9712 ; 154  |#define HW_SWIZZLECSR2_SASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_SASEL_SETMASK)
                             9713 ; 155  |#define HW_SWIZZLECSR2_DESASEL_CLRMASK (~(WORD)HW_SWIZZLECSR2_DESASEL_SETMASK)
                             9714 ; 156  |#define HW_SWIZZLECSR2_BIGE_CLRMASK (~(WORD)HW_SWIZZLECSR2_BIGE_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 165

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9715 ; 157  |#define HW_SWIZZLECSR2_BITREV_CLRMASK (~(WORD)HW_SWIZZLECSR2_BITREV_SETMASK)
                             9716 ; 158  |#define HW_SWIZZLECSR2_PLSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PLSB_SETMASK)
                             9717 ; 159  |#define HW_SWIZZLECSR2_PMSB_CLRMASK (~(WORD)HW_SWIZZLECSR2_PMSB_SETMASK)
                             9718 ; 160  |#define HW_SWIZZLECSR2_P16L_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16L_SETMASK)
                             9719 ; 161  |#define HW_SWIZZLECSR2_P16I_CLRMASK (~(WORD)HW_SWIZZLECSR2_P16I_SETMASK)
                             9720 ; 162  |#define HW_SWIZZLECSR2_BS_EN_CLRMASK (~(WORD)HW_SWIZZLECSR2_BS_EN_SETMASK)
                             9721 ; 163  |#define HW_SWIZZLECSR2_SBYTEDEST_CLRMASK (~(WORD)HW_SWIZZLECSR2_SBYTEDEST_SETMASK)
                             9722 ; 164  |#define HW_SWIZZLECSR2_UNKICK_CLRMASK (~(WORD)HW_SWIZZLECSR2_UNKICK_SETMASK)
                             9723 ; 165  |#define HW_SWIZZLECSR2_RSVD_CLRMASK (~(WORD)HW_SWIZZLECSR2_RSVD_SETMASK)
                             9724 ; 166  |
                             9725 ; 167  |///////////////////////////////////////////////////////////////////////////////
                             9726 ; 168  |typedef union
                             9727 ; 169  |{
                             9728 ; 170  |    struct
                             9729 ; 171  |    {
                             9730 ; 172  |    int KICK    :1;         /* Start transfer                      */
                             9731 ; 173  |    unsigned SASEL :2;              /* Source memory Select                */
                             9732 ; 174  |    unsigned DESASEL :2;                    /* Destination memory Select           */
                             9733 ; 175  |    int BIGE        :1;             /* Big Endian Enable                   */
                             9734 ; 176  |    int BITREV      :1;     /* Bit reverse the data                */
                             9735 ; 177  |    int PLSB        :1;             /* Pass Least Significant Byte         */
                             9736 ; 178  |    int PISB        :1;     /* Pass Intermediate Byte              */
                             9737 ; 179  |    int PMSB        :1;     /* Pass Most Significant Byte          */
                             9738 ; 180  |    int P16L        :1;     /* Pass Least Significant word         */
                             9739 ; 181  |    int P16I        :1;     /* Pass Intermediate significant word  */
                             9740 ; 182  |    int BS_EN       :1;     /* Barrel Shift Enable                 */
                             9741 ; 183  |    unsigned SBYTE  :2;                     /* Start byte                          */
                             9742 ; 184  |    int UNKICK      :1;     /* Halt transfer                       */  
                             9743 ; 185  |    } B;
                             9744 ; 186  |    unsigned int I;
                             9745 ; 187  |    unsigned int U;
                             9746 ; 188  |} swizzlecsr2_type;
                             9747 ; 189  |///////////////////////////////////////////////////////////////////////////////
                             9748 ; 190  |#define HW_SWIZZLECS2R (*(volatile swizzlecsr2_type _X*) (HW_SWIZZLE_BASEADDR+1))     /* S
                                  wizzle Control & Status Register 2 */
                             9749 ; 191  |
                             9750 ; 192  |////  Swizzle SIZER (HW_SWIZZLESIZER) Bit Definitions
                             9751 ; 193  |#define HW_SWIZZLESIZER_SIZE_BITPOS (0)
                             9752 ; 194  |#define HW_SWIZZLESIZER_NEW_SHIFT_BITPOS (16)
                             9753 ; 195  |#define HW_SWIZZLESIZER_RSVD_BITPOS (21)
                             9754 ; 196  |
                             9755 ; 197  |#define HW_SWIZZLESIZER_SIZE_WIDTH (16)
                             9756 ; 198  |#define HW_SWIZZLESIZER_NEW_SHIFT_WIDTH (5)
                             9757 ; 199  |#define HW_SWIZZLESIZER_RSVD_WIDTH (3)
                             9758 ; 200  |
                             9759 ; 201  |#define HW_SWIZZLESIZER_SIZE_SETMASK (((1<HW_SWIZZLESIZER_SIZE_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  SIZE_BITPOS)
                             9760 ; 202  |#define HW_SWIZZLESIZER_NEW_SHIFT_SETMASK (((1<HW_SWIZZLESIZER_NEW_SHIFT_WIDTH)-1)<<HW_SWI
                                  ZZLESIZER_NEW_SHIFT_BITPOS)
                             9761 ; 203  |#define HW_SWIZZLESIZER_RSVD_SETMASK (((1<HW_SWIZZLESIZER_RSVD_WIDTH)-1)<<HW_SWIZZLESIZER_
                                  RSVD_BITPOS)
                             9762 ; 204  |
                             9763 ; 205  |#define HW_SWIZZLESIZER_SIZE_CLRMASK (~(WORD)HW_SWIZZLESIZER_SIZE_SETMASK)
                             9764 ; 206  |#define HW_SWIZZLESIZER_NEW_SHIFT_CLRMASK (~(WORD)HW_SWIZZLESIZER_NEW_SHIFT_SETMASK)
                             9765 ; 207  |#define HW_SWIZZLESIZER_RSVD_CLRMASK (~(WORD)HW_SWIZZLESIZER_RSVD_SETMASK)
                             9766 ; 208  |
                             9767 ; 209  |///////////////////////////////////////////////////////////////////////////////
                             9768 ; 210  |typedef union
                             9769 ; 211  |{
                             9770 ; 212  |    struct
                             9771 ; 213  |    {
                             9772 ; 214  |    unsigned SIZE      :16;        /* Number of memory words to manipulate */
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 166

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9773 ; 215  |    unsigned NEW_SHIFT :5;         /* Source memory Select                 */
                             9774 ; 216  |    } B;
                             9775 ; 217  |    int I;
                             9776 ; 218  |    unsigned U;
                             9777 ; 219  |} swizzlesizer_type;
                             9778 ; 220  |///////////////////////////////////////////////////////////////////////////////
                             9779 ; 221  |#define HW_SWIZZLESIZER (*(volatile swizzlesizer_type _X*) (HW_SWIZZLE_BASEADDR+2))       
                                   /* Swizzle Transfer Size Register */
                             9780 ; 222  |#define HW_SWIZZLESOURCER (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+3))      /* S
                                  wizzle Source Address Register */
                             9781 ; 223  |#define HW_SWIZZLEDATA1R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+4))       /* S
                                  wizzle Data1 Register */
                             9782 ; 224  |#define HW_SWIZZLEDATA2R (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+5))       /* S
                                  wizzle Data2 Register */
                             9783 ; 225  |#define HW_SWIZZLEDESTADDRR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+6))    /* S
                                  wizzle Destination Address Register */
                             9784 ; 226  |#define HW_SWIZZLEBIGENDIANR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+7))   /* S
                                  wizzle Big Endian Register */
                             9785 ; 227  |#define HW_SWIZZLEBITREVR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+8))      /* S
                                  wizzle BITREV Register */
                             9786 ; 228  |#define HW_SWIZZLEPASSLSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+9))     /* S
                                  wizzle Pass Least Significant Byte Register */
                             9787 ; 229  |#define HW_SWIZZLEPASSISBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+10))    /* S
                                  wizzle Pass Intermediate Byte Register */
                             9788 ; 230  |#define HW_SWIZZLEPASSMSBR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+11))    /* S
                                  wizzle Pass Most Significant Byte Register */
                             9789 ; 231  |#define HW_SWIZZLEPASSLSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+12))    /* S
                                  wizzle Pass Least Significant Word Register */
                             9790 ; 232  |#define HW_SWIZZLEPASSISWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+13))    /* S
                                  wizzle Pass Intermediate Significant Word Register */
                             9791 ; 233  |#define HW_SWIZZLEPASSMSWR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+14))    /* S
                                  wizzle Pass Most Significant Word Register */
                             9792 ; 234  |#define HW_SWIZZLEBARRELR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+15))    /* Sw
                                  izzle Barrel Shift Register */
                             9793 ; 235  |#define HW_SWIZZLEDIV3LR (*(volatile unsigned int _X*) (HW_SWIZZLE_BASEADDR+16))    /* Swi
                                  zzle Divide By 3 Lower Register */
                             9794 ; 236  |
                             9795 ; 237  |
                             9796 ; 238  |////  Swizzle DIV3UR (HW_SWIZZLEDIV3UR) Bit Definitions
                             9797 ; 239  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_BITPOS (0)
                             9798 ; 240  |#define HW_SWIZZLEDIV3UR_RSVD0_BITPOS (8)
                             9799 ; 241  |#define HW_SWIZZLEDIV3UR_REMAINDER_BITPOS (20)
                             9800 ; 242  |#define HW_SWIZZLEDIV3UR_RSVD1_BITPOS (22)
                             9801 ; 243  |
                             9802 ; 244  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH (8)
                             9803 ; 245  |#define HW_SWIZZLEDIV3UR_RSVD0_WIDTH (12)
                             9804 ; 246  |#define HW_SWIZZLEDIV3UR_REMAINDER_WIDTH (2)
                             9805 ; 247  |#define HW_SWIZZLEDIV3UR_RSVD1_WIDTH (2)
                             9806 ; 248  |
                             9807 ; 249  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK (((1<HW_SWIZZLEDIV3UR_DIV3_UPPER_WIDTH)-1)<<HW
                                  _SWIZZLEDIV3UR_DIV3_UPPER_BITPOS)
                             9808 ; 250  |#define HW_SWIZZLEDIV3UR_RSVD0_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD0_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD0_BITPOS)
                             9809 ; 251  |#define HW_SWIZZLEDIV3UR_REMAINDER_SETMASK (((1<HW_SWIZZLEDIV3UR_REMAINDER_WIDTH)-1)<<HW_S
                                  WIZZLEDIV3UR_REMAINDER_BITPOS)
                             9810 ; 252  |#define HW_SWIZZLEDIV3UR_RSVD1_SETMASK (((1<HW_SWIZZLEDIV3UR_RSVD1_WIDTH)-1)<<HW_SWIZZLEDI
                                  V3UR_RSVD1_BITPOS)
                             9811 ; 253  |
                             9812 ; 254  |#define HW_SWIZZLEDIV3UR_DIV3_UPPER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_DIV3_UPPER_SETMASK)
                             9813 ; 255  |#define HW_SWIZZLEDIV3UR_RSVD0_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD0_SETMASK)
                             9814 ; 256  |#define HW_SWIZZLEDIV3UR_REMAINDER_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_REMAINDER_SETMASK)
                             9815 ; 257  |#define HW_SWIZZLEDIV3UR_RSVD1_CLRMASK (~(WORD)HW_SWIZZLEDIV3UR_RSVD1_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 167

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9816 ; 258  |
                             9817 ; 259  |///////////////////////////////////////////////////////////////////////////////
                             9818 ; 260  |typedef union
                             9819 ; 261  |{
                             9820 ; 262  |    struct
                             9821 ; 263  |    {
                             9822 ; 264  |    unsigned DIV3_UPPER    :8;     /* Number of memory words to manipulate */
                             9823 ; 265  |    unsigned RSVD0         :12;         /* Source memory Select                 */
                             9824 ; 266  |    unsigned REMAINDER     :2;         /* Source memory Select                 */
                             9825 ; 267  |    } B;
                             9826 ; 268  |    int I;
                             9827 ; 269  |    unsigned U;
                             9828 ; 270  |} swizzlediv3ur_type;
                             9829 ; 271  |///////////////////////////////////////////////////////////////////////////////
                             9830 ; 272  |#define HW_SWIZZLEDIV3UR (*(volatile swizzlediv3ur_type _X*) (HW_SWIZZLE_BASEADDR+17))    
                                  /* Swizzle Divide By 3 Upper Register */
                             9831 ; 273  |
                             9832 ; 274  |#endif
                             9833 ; 275  |
                             9834 
                             9836 
                             9837 ; 33   |#include "regssdram.h"
                             9838 
                             9840 
                             9841 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9842 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                             9843 ; 3    |//;  File        : regssdram.inc
                             9844 ; 4    |//;  Description : Mixed Signal IP Register definition
                             9845 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             9846 ; 6    |
                             9847 ; 7    |// The following naming conventions are followed in this file.
                             9848 ; 8    |// All registers are named using the format...
                             9849 ; 9    |//     HW_<module>_<regname>
                             9850 ; 10   |// where <module> is the module name which can be any of the following...
                             9851 ; 11   |//     SYSTEM
                             9852 ; 12   |// (Note that when there is more than one copy of a particular module, the
                             9853 ; 13   |// module name includes a number starting from 0 for the first instance of
                             9854 ; 14   |// that module)
                             9855 ; 15   |// <regname> is the specific register within that module
                             9856 ; 16   |// We also define the following...
                             9857 ; 17   |//     HW_<module>_<regname>_BITPOS
                             9858 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                             9859 ; 19   |//     HW_<module>_<regname>_SETMASK
                             9860 ; 20   |// which does something else, and
                             9861 ; 21   |//     HW_<module>_<regname>_CLRMASK
                             9862 ; 22   |// which does something else.
                             9863 ; 23   |// Other rules
                             9864 ; 24   |//     All caps
                             9865 ; 25   |//     Numeric identifiers start at 0
                             9866 ; 26   |
                             9867 ; 27   |#if !(defined(regssdraminc))
                             9868 ; 28   |#define regssdraminc 1
                             9869 ; 29   |
                             9870 ; 30   |#include "types.h"
                             9871 
                             9873 
                             9874 ; 1    |////////////////////////////////////////////////////////////////////////////////
                             9875 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                             9876 ; 3    |//
                             9877 ; 4    |// Filename: types.h
                             9878 ; 5    |// Description: Standard data types
                             9879 ; 6    |////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 168

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9880 ; 7    |
                             9881 ; 8    |#ifndef _TYPES_H
                             9882 ; 9    |#define _TYPES_H
                             9883 ; 10   |
                             9884 ; 11   |// TODO:  move this outta here!
                             9885 ; 12   |#if !defined(NOERROR)
                             9886 ; 13   |#define NOERROR 0
                             9887 ; 14   |#define SUCCESS 0
                             9888 ; 15   |#endif 
                             9889 ; 16   |#if !defined(SUCCESS)
                             9890 ; 17   |#define SUCCESS  0
                             9891 ; 18   |#endif
                             9892 ; 19   |#if !defined(ERROR)
                             9893 ; 20   |#define ERROR   -1
                             9894 ; 21   |#endif
                             9895 ; 22   |#if !defined(FALSE)
                             9896 ; 23   |#define FALSE 0
                             9897 ; 24   |#endif
                             9898 ; 25   |#if !defined(TRUE)
                             9899 ; 26   |#define TRUE  1
                             9900 ; 27   |#endif
                             9901 ; 28   |
                             9902 ; 29   |#if !defined(NULL)
                             9903 ; 30   |#define NULL 0
                             9904 ; 31   |#endif
                             9905 ; 32   |
                             9906 ; 33   |#define MAX_INT     0x7FFFFF
                             9907 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                             9908 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                             9909 ; 36   |#define MAX_ULONG   (-1) 
                             9910 ; 37   |
                             9911 ; 38   |#define WORD_SIZE   24              // word size in bits
                             9912 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                             9913 ; 40   |
                             9914 ; 41   |
                             9915 ; 42   |#define BYTE    unsigned char       // btVarName
                             9916 ; 43   |#define CHAR    signed char         // cVarName
                             9917 ; 44   |#define USHORT  unsigned short      // usVarName
                             9918 ; 45   |#define SHORT   unsigned short      // sVarName
                             9919 ; 46   |#define WORD    unsigned int        // wVarName
                             9920 ; 47   |#define INT     signed int          // iVarName
                             9921 ; 48   |#define DWORD   unsigned long       // dwVarName
                             9922 ; 49   |#define LONG    signed long         // lVarName
                             9923 ; 50   |#define BOOL    unsigned int        // bVarName
                             9924 ; 51   |#define FRACT   _fract              // frVarName
                             9925 ; 52   |#define LFRACT  long _fract         // lfrVarName
                             9926 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                             9927 ; 54   |#define FLOAT   float               // fVarName
                             9928 ; 55   |#define DBL     double              // dVarName
                             9929 ; 56   |#define ENUM    enum                // eVarName
                             9930 ; 57   |#define CMX     _complex            // cmxVarName
                             9931 ; 58   |typedef WORD UCS3;                   // 
                             9932 ; 59   |
                             9933 ; 60   |#define UINT16  unsigned short
                             9934 ; 61   |#define UINT8   unsigned char   
                             9935 ; 62   |#define UINT32  unsigned long
                             9936 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9937 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                             9938 ; 65   |#define WCHAR   UINT16
                             9939 ; 66   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 169

M:ADDR CODE           CYCLES LINE SOURCELINE
                             9940 ; 67   |//UINT128 is 16 bytes or 6 words
                             9941 ; 68   |typedef struct UINT128_3500 {   
                             9942 ; 69   |    int val[6];     
                             9943 ; 70   |} UINT128_3500;
                             9944 ; 71   |
                             9945 ; 72   |#define UINT128   UINT128_3500
                             9946 ; 73   |
                             9947 ; 74   |// Little endian word packed byte strings:   
                             9948 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9949 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9950 ; 77   |// Little endian word packed byte strings:   
                             9951 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                             9952 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                             9953 ; 80   |
                             9954 ; 81   |// Declare Memory Spaces To Use When Coding
                             9955 ; 82   |// A. Sector Buffers
                             9956 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                             9957 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                             9958 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                             9959 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                             9960 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                             9961 ; 88   |// B. Media DDI Memory
                             9962 ; 89   |#define MEDIA_DDI_MEM _Y
                             9963 ; 90   |
                             9964 ; 91   |
                             9965 ; 92   |
                             9966 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                             9967 ; 94   |// Examples of circular pointers:
                             9968 ; 95   |//    INT CIRC cpiVarName
                             9969 ; 96   |//    DWORD CIRC cpdwVarName
                             9970 ; 97   |
                             9971 ; 98   |#define RETCODE INT                 // rcVarName
                             9972 ; 99   |
                             9973 ; 100  |// generic bitfield structure
                             9974 ; 101  |struct Bitfield {
                             9975 ; 102  |    unsigned int B0  :1;
                             9976 ; 103  |    unsigned int B1  :1;
                             9977 ; 104  |    unsigned int B2  :1;
                             9978 ; 105  |    unsigned int B3  :1;
                             9979 ; 106  |    unsigned int B4  :1;
                             9980 ; 107  |    unsigned int B5  :1;
                             9981 ; 108  |    unsigned int B6  :1;
                             9982 ; 109  |    unsigned int B7  :1;
                             9983 ; 110  |    unsigned int B8  :1;
                             9984 ; 111  |    unsigned int B9  :1;
                             9985 ; 112  |    unsigned int B10 :1;
                             9986 ; 113  |    unsigned int B11 :1;
                             9987 ; 114  |    unsigned int B12 :1;
                             9988 ; 115  |    unsigned int B13 :1;
                             9989 ; 116  |    unsigned int B14 :1;
                             9990 ; 117  |    unsigned int B15 :1;
                             9991 ; 118  |    unsigned int B16 :1;
                             9992 ; 119  |    unsigned int B17 :1;
                             9993 ; 120  |    unsigned int B18 :1;
                             9994 ; 121  |    unsigned int B19 :1;
                             9995 ; 122  |    unsigned int B20 :1;
                             9996 ; 123  |    unsigned int B21 :1;
                             9997 ; 124  |    unsigned int B22 :1;
                             9998 ; 125  |    unsigned int B23 :1;
                             9999 ; 126  |};
                            10000 ; 127  |
                            10001 ; 128  |union BitInt {
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 170

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10002 ; 129  |        struct Bitfield B;
                            10003 ; 130  |        int        I;
                            10004 ; 131  |};
                            10005 ; 132  |
                            10006 ; 133  |#define MAX_MSG_LENGTH 10
                            10007 ; 134  |struct CMessage
                            10008 ; 135  |{
                            10009 ; 136  |        unsigned int m_uLength;
                            10010 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10011 ; 138  |};
                            10012 ; 139  |
                            10013 ; 140  |typedef struct {
                            10014 ; 141  |    WORD m_wLength;
                            10015 ; 142  |    WORD m_wMessage;
                            10016 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10017 ; 144  |} Message;
                            10018 ; 145  |
                            10019 ; 146  |struct MessageQueueDescriptor
                            10020 ; 147  |{
                            10021 ; 148  |        int *m_pBase;
                            10022 ; 149  |        int m_iModulo;
                            10023 ; 150  |        int m_iSize;
                            10024 ; 151  |        int *m_pHead;
                            10025 ; 152  |        int *m_pTail;
                            10026 ; 153  |};
                            10027 ; 154  |
                            10028 ; 155  |struct ModuleEntry
                            10029 ; 156  |{
                            10030 ; 157  |    int m_iSignaledEventMask;
                            10031 ; 158  |    int m_iWaitEventMask;
                            10032 ; 159  |    int m_iResourceOfCode;
                            10033 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10034 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10035 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10036 ; 163  |    int m_uTimeOutHigh;
                            10037 ; 164  |    int m_uTimeOutLow;
                            10038 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10039 ; 166  |};
                            10040 ; 167  |
                            10041 ; 168  |union WaitMask{
                            10042 ; 169  |    struct B{
                            10043 ; 170  |        unsigned int m_bNone     :1;
                            10044 ; 171  |        unsigned int m_bMessage  :1;
                            10045 ; 172  |        unsigned int m_bTimer    :1;
                            10046 ; 173  |        unsigned int m_bButton   :1;
                            10047 ; 174  |    } B;
                            10048 ; 175  |    int I;
                            10049 ; 176  |} ;
                            10050 ; 177  |
                            10051 ; 178  |
                            10052 ; 179  |struct Button {
                            10053 ; 180  |        WORD wButtonEvent;
                            10054 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10055 ; 182  |};
                            10056 ; 183  |
                            10057 ; 184  |struct Message {
                            10058 ; 185  |        WORD wMsgLength;
                            10059 ; 186  |        WORD wMsgCommand;
                            10060 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10061 ; 188  |};
                            10062 ; 189  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 171

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10063 ; 190  |union EventTypes {
                            10064 ; 191  |        struct CMessage msg;
                            10065 ; 192  |        struct Button Button ;
                            10066 ; 193  |        struct Message Message;
                            10067 ; 194  |};
                            10068 ; 195  |
                            10069 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10070 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10071 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10072 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10073 ; 200  |
                            10074 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10075 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10076 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10077 ; 204  |
                            10078 ; 205  |#if DEBUG
                            10079 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10080 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10081 ; 208  |#else 
                            10082 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10083 ; 210  |#define DebugBuildAssert(x)    
                            10084 ; 211  |#endif
                            10085 ; 212  |
                            10086 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10087 ; 214  |//  #pragma asm
                            10088 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10089 ; 216  |//  #pragma endasm
                            10090 ; 217  |
                            10091 ; 218  |
                            10092 ; 219  |#ifdef COLOR_262K
                            10093 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10094 ; 221  |#elif defined(COLOR_65K)
                            10095 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10096 ; 223  |#else
                            10097 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10098 ; 225  |#endif
                            10099 ; 226  |    
                            10100 ; 227  |#endif // #ifndef _TYPES_H
                            10101 
                            10103 
                            10104 ; 31   |
                            10105 ; 32   |#define HW_SDRAM_BASEADDR 0xF900
                            10106 ; 33   |
                            10107 ; 34   |
                            10108 ; 35   |/////////////////////////////////////////////////////////////////////////////////
                            10109 ; 36   |//  SDRAM CSR (HW_SDRAM_CSR) Bit Definitions
                            10110 ; 37   |#define HW_SDRAM_CSR_SDRAMEN_BITPOS 0
                            10111 ; 38   |#define HW_SDRAM_CSR_IE_BITPOS 1
                            10112 ; 39   |#define HW_SDRAM_CSR_RNW_BITPOS 2
                            10113 ; 40   |#define HW_SDRAM_CSR_KICK_BITPOS 3
                            10114 ; 41   |#define HW_SDRAM_CSR_LM_BITPOS 4
                            10115 ; 42   |#define HW_SDRAM_CSR_ISTAT_BITPOS 5
                            10116 ; 43   |#define HW_SDRAM_CSR_PWDN_BITPOS 6
                            10117 ; 44   |#define HW_SDRAM_CSR_SBYTE_BITPOS 8
                            10118 ; 45   |#define HW_SDRAM_CSR_MEM_BITPOS 10
                            10119 ; 46   |#define HW_SDRAM_CSR_BIGE_BITPOS 12
                            10120 ; 47   |#define HW_SDRAM_CSR_ASIZE_BITPOS 13
                            10121 ; 48   |#define HW_SDRAM_CSR_UKICK_BITPOS 16
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 172

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10122 ; 49   |#define HW_SDRAM_CSR_DIV_BITPOS 17
                            10123 ; 50   |#define HW_SDRAM_CSR_MULTI_BITPOS 21
                            10124 ; 51   |#define HW_SDRAM_CSR_SDRAM_BITPOS 22
                            10125 ; 52   |#define HW_SDRAM_CSR_SIGN_BITPOS 23
                            10126 ; 53   |
                            10127 ; 54   |#define HW_SDRAM_CSR_SDRAMEN_WIDTH 1
                            10128 ; 55   |#define HW_SDRAM_CSR_IE_WIDTH 1
                            10129 ; 56   |#define HW_SDRAM_CSR_RNW_WIDTH 1
                            10130 ; 57   |#define HW_SDRAM_CSR_KICK_WIDTH 1
                            10131 ; 58   |#define HW_SDRAM_CSR_LM_WIDTH 1
                            10132 ; 59   |#define HW_SDRAM_CSR_ISTAT_WIDTH 1
                            10133 ; 60   |#define HW_SDRAM_CSR_PWDN_WIDTH 1
                            10134 ; 61   |#define HW_SDRAM_CSR_SBYTE_WIDTH 2
                            10135 ; 62   |#define HW_SDRAM_CSR_MEM_WIDTH 2
                            10136 ; 63   |#define HW_SDRAM_CSR_BIGE_WIDTH 1
                            10137 ; 64   |#define HW_SDRAM_CSR_ASIZE_WIDTH 3
                            10138 ; 65   |#define HW_SDRAM_CSR_UKICK_WIDTH 1
                            10139 ; 66   |#define HW_SDRAM_CSR_DIV_WIDTH 4
                            10140 ; 67   |#define HW_SDRAM_CSR_MULTI_WIDTH 1
                            10141 ; 68   |#define HW_SDRAM_CSR_SDRAM_WIDTH 1
                            10142 ; 69   |#define HW_SDRAM_CSR_SIGN_WIDTH 1
                            10143 ; 70   |
                            10144 ; 71   |#define HW_SDRAM_CSR_SDRAMEN_SETMASK (((1<<HW_SDRAM_CSR_SDRAMEN_WIDTH)-1)<<HW_SDRAM_CSR_SD
                                  RAMEN_BITPOS)
                            10145 ; 72   |#define HW_SDRAM_CSR_IE_SETMASK (((1<<HW_SDRAM_CSR_IE_WIDTH)-1)<<HW_SDRAM_CSR_IE_BITPOS)
                            10146 ; 73   |#define HW_SDRAM_CSR_RNW_SETMASK (((1<<HW_SDRAM_CSR_RNW_WIDTH)-1)<<HW_SDRAM_CSR_RNW_BITPOS
                                  )
                            10147 ; 74   |#define HW_SDRAM_CSR_KICK_SETMASK (((1<<HW_SDRAM_CSR_KICK_WIDTH)-1)<<HW_SDRAM_CSR_KICK_BIT
                                  POS)
                            10148 ; 75   |#define HW_SDRAM_CSR_LM_SETMASK (((1<<HW_SDRAM_CSR_LM_WIDTH)-1)<<HW_SDRAM_CSR_LM_BITPOS)
                            10149 ; 76   |#define HW_SDRAM_CSR_ISTAT_SETMASK (((1<<HW_SDRAM_CSR_ISTAT_WIDTH)-1)<<HW_SDRAM_CSR_ISTAT_
                                  BITPOS)
                            10150 ; 77   |#define HW_SDRAM_CSR_PWDN_SETMASK (((1<<HW_SDRAM_CSR_PWDN_WIDTH)-1)<<HW_SDRAM_CSR_PWDN_BIT
                                  POS)
                            10151 ; 78   |#define HW_SDRAM_CSR_SBYTE_SETMASK (((1<<HW_SDRAM_CSR_SBYTE_WIDTH)-1)<<HW_SDRAM_CSR_SBYTE_
                                  BITPOS)
                            10152 ; 79   |#define HW_SDRAM_CSR_MEM_SETMASK (((1<<HW_SDRAM_CSR_MEM_WIDTH)-1)<<HW_SDRAM_CSR_MEM_BITPOS
                                  )
                            10153 ; 80   |#define HW_SDRAM_CSR_BIGE_SETMASK (((1<<HW_SDRAM_CSR_BIGE_WIDTH)-1)<<HW_SDRAM_CSR_BIGE_BIT
                                  POS)
                            10154 ; 81   |#define HW_SDRAM_CSR_ASIZE_SETMASK (((1<<HW_SDRAM_CSR_ASIZE_WIDTH)-1)<<HW_SDRAM_CSR_ASIZE_
                                  BITPOS)
                            10155 ; 82   |#define HW_SDRAM_CSR_UKICK_SETMASK (((1<<HW_SDRAM_CSR_UKICK_WIDTH)-1)<<HW_SDRAM_CSR_UKICK_
                                  BITPOS)
                            10156 ; 83   |#define HW_SDRAM_CSR_DIV_SETMASK (((1<<HW_SDRAM_CSR_DIV_WIDTH)-1)<<HW_SDRAM_CSR_DIV_BITPOS
                                  )
                            10157 ; 84   |#define HW_SDRAM_CSR_MULTI_SETMASK (((1<<HW_SDRAM_CSR_MULTI_WIDTH)-1)<<HW_SDRAM_CSR_MULTI_
                                  BITPOS)
                            10158 ; 85   |#define HW_SDRAM_CSR_SDRAM_SETMASK (((1<<HW_SDRAM_CSR_SDRAM_WIDTH)-1)<<HW_SDRAM_CSR_SDRAM_
                                  BITPOS)
                            10159 ; 86   |#define HW_SDRAM_CSR_SIGN_SETMASK (((1<<HW_SDRAM_CSR_SIGN_WIDTH)-1)<<HW_SDRAM_CSR_SIGN_BIT
                                  POS)
                            10160 ; 87   |
                            10161 ; 88   |#define HW_SDRAM_CSR_SDRAMEN_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAMEN_SETMASK
                            10162 ; 89   |#define HW_SDRAM_CSR_IE_CLRMASK ~(WORD)HW_SDRAM_CSR_IE_SETMASK
                            10163 ; 90   |#define HW_SDRAM_CSR_RNW_CLRMASK ~(WORD)HW_SDRAM_CSR_RNW_SETMASK
                            10164 ; 91   |#define HW_SDRAM_CSR_KICK_CLRMASK ~(WORD)HW_SDRAM_CSR_KICK_SETMASK
                            10165 ; 92   |#define HW_SDRAM_CSR_LM_CLRMASK ~(WORD)HW_SDRAM_CSR_LM_SETMASK
                            10166 ; 93   |#define HW_SDRAM_CSR_ISTAT_CLRMASK ~(WORD)HW_SDRAM_CSR_ISTAT_SETMASK
                            10167 ; 94   |#define HW_SDRAM_CSR_PWDN_CLRMASK ~(WORD)HW_SDRAM_CSR_PWDN_SETMASK
                            10168 ; 95   |#define HW_SDRAM_CSR_SBYTE_CLRMASK ~(WORD)HW_SDRAM_CSR_SBYTE_SETMASK
                            10169 ; 96   |#define HW_SDRAM_CSR_MEM_CLRMASK ~(WORD)HW_SDRAM_CSR_MEM_SETMASK
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 173

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10170 ; 97   |#define HW_SDRAM_CSR_BIGE_CLRMASK ~(WORD)HW_SDRAM_CSR_BIGE_SETMASK
                            10171 ; 98   |#define HW_SDRAM_CSR_ASIZE_CLRMASK ~(WORD)HW_SDRAM_CSR_ASIZE_SETMASK
                            10172 ; 99   |#define HW_SDRAM_CSR_UKICK_CLRMASK ~(WORD)HW_SDRAM_CSR_UKICK_SETMASK
                            10173 ; 100  |#define HW_SDRAM_CSR_DIV_CLRMASK ~(WORD)HW_SDRAM_CSR_DIV_SETMASK
                            10174 ; 101  |#define HW_SDRAM_CSR_MULTI_CLRMASK ~(WORD)HW_SDRAM_CSR_MULTI_SETMASK
                            10175 ; 102  |#define HW_SDRAM_CSR_SDRAM_CLRMASK ~(WORD)HW_SDRAM_CSR_SDRAM_SETMASK
                            10176 ; 103  |#define HW_SDRAM_CSR_SIGN_CLRMASK ~(WORD)HW_SDRAM_CSR_SIGN_SETMASK
                            10177 ; 104  |
                            10178 ; 105  |typedef union               
                            10179 ; 106  |{
                            10180 ; 107  |    struct {
                            10181 ; 108  |        int SDRAMEN                     :1;
                            10182 ; 109  |        int IE                          :1;
                            10183 ; 110  |        int RNW                         :1;
                            10184 ; 111  |        int KICK                        :1;
                            10185 ; 112  |        int LM                          :1;
                            10186 ; 113  |        int ISTAT                       :1;
                            10187 ; 114  |        int PWDN                        :1;
                            10188 ; 115  |        int RSVD                        :1;
                            10189 ; 116  |        int SBYTE                       :2;
                            10190 ; 117  |        int MEM                         :2;
                            10191 ; 118  |        int BIGE                        :1;
                            10192 ; 119  |        int ASIZE                       :3;
                            10193 ; 120  |        int UKICK                       :1;
                            10194 ; 121  |        int DIV                         :4;
                            10195 ; 122  |        int MULTI                       :1;
                            10196 ; 123  |        int SDRAM                       :1;
                            10197 ; 124  |        int SIGN                        :1;
                            10198 ; 125  |    } B;
                            10199 ; 126  |    int I;
                            10200 ; 127  |} sdramcsr_type;
                            10201 ; 128  |#define HW_SDRAM_CSR (*(volatile sdramcsr_type _X*) (HW_SDRAM_BASEADDR))        
                            10202 ; 129  |#define HW_SDRAM_ADDR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+1))
                            10203 ; 130  |#define HW_SDRAM_ADDR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+2))
                            10204 ; 131  |#define HW_SDRAM_SYSADDR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+3))
                            10205 ; 132  |#define HW_SDRAM_SIZE (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+4))
                            10206 ; 133  |#define HW_SDRAM_BAR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+7))
                            10207 ; 134  |#define HW_SDRAM_MR (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+8))
                            10208 ; 135  |#define HW_SDRAM_DBAR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+9))
                            10209 ; 136  |#define HW_SDRAM_DBAR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+10))
                            10210 ; 137  |#define HW_SDRAM_DMR1 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+11))
                            10211 ; 138  |#define HW_SDRAM_DMR2 (*(volatile unsigned int _X*) (HW_SDRAM_BASEADDR+12))
                            10212 ; 139  |
                            10213 ; 140  |/////////////////////////////////////////////////////////////////////////////////
                            10214 ; 141  |//  SDRAM Start Address Low Register (HW_SDRAM_ADDR1) Bit Definitions
                            10215 ; 142  |#define HW_SDRAM_ADDR1_XA_BITPOS 0
                            10216 ; 143  |
                            10217 ; 144  |#define HW_SDRAM_ADDR1_XA_SETMASK 0xFFFFFF<<HW_SDRAM_ADDR1_XA_BITPOS
                            10218 ; 145  |
                            10219 ; 146  |#define HW_SDRAM_ADDR1_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR1_XA_SETMASK
                            10220 ; 147  |
                            10221 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            10222 ; 149  |//  SDRAM Start Address High Register (HW_SDRAM_ADDR2) Bit Definitions
                            10223 ; 150  |#define HW_SDRAM_ADDR2_XA_BITPOS 0
                            10224 ; 151  |
                            10225 ; 152  |#define HW_SDRAM_ADDR2_XA_SETMASK 0x1F<<HW_SDRAM_ADDR2_XA_BITPOS
                            10226 ; 153  |
                            10227 ; 154  |#define HW_SDRAM_ADDR2_XA_CLRMASK ~(WORD)HW_SDRAM_ADDR2_XA_SETMASK
                            10228 ; 155  |
                            10229 ; 156  |/////////////////////////////////////////////////////////////////////////////////
                            10230 ; 157  |//  System Start Address Register (HW_SDRAM_SYSADDR) Bit Definitions
                            10231 ; 158  |#define HW_SDRAM_SYSADDR_XA_BITPOS 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 174

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10232 ; 159  |
                            10233 ; 160  |#define HW_SDRAM_SYSADDR_XA_SETMASK 0xFFFF<<HW_SDRAM_SYSADDR_XA_BITPOS
                            10234 ; 161  |
                            10235 ; 162  |#define HW_SDRAM_SYSADDR_XA_CLRMASK ~(WORD)HW_SDRAM_SYSADDR_XA_SETMASK
                            10236 ; 163  |
                            10237 ; 164  |/////////////////////////////////////////////////////////////////////////////////
                            10238 ; 165  |//  Number of Bytes to be transfered Register (HW_SDRAM_SIZE) Bit Definitions
                            10239 ; 166  |#define HW_SDRAM_SIZE_XA_BITPOS 0
                            10240 ; 167  |
                            10241 ; 168  |#define HW_SDRAM_SIZE_XA_SETMASK 0x3FFFF<<HW_SDRAM_SIZE_XA_BITPOS
                            10242 ; 169  |
                            10243 ; 170  |#define HW_SDRAM_SIZE_XA_CLRMASK ~(WORD)HW_SDRAM_SIZE_XA_SETMASK
                            10244 ; 171  |
                            10245 ; 172  |/////////////////////////////////////////////////////////////////////////////////
                            10246 ; 173  |//  SDRAM Timer1 Register (HW_SDRAM_TIMER1) Bit Definitions
                            10247 ; 174  |#define HW_SDRAM_TIMER1_INIT_BITPOS 0
                            10248 ; 175  |#define HW_SDRAM_TIMER1_TRP_BITPOS 16
                            10249 ; 176  |#define HW_SDRAM_TIMER1_TRFC_BITPOS 20
                            10250 ; 177  |
                            10251 ; 178  |#define HW_SDRAM_TIMER1_INIT_WIDTH 16
                            10252 ; 179  |#define HW_SDRAM_TIMER1_TRP_WIDTH 4
                            10253 ; 180  |#define HW_SDRAM_TIMER1_TRFC_WIDTH 4
                            10254 ; 181  |
                            10255 ; 182  |#define HW_SDRAM_TIMER1_INIT_SETMASK (((1<<HW_SDRAM_TIMER1_INIT_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _INIT_BITPOS)
                            10256 ; 183  |#define HW_SDRAM_TIMER1_TRP_SETMASK (((1<<HW_SDRAM_TIMER1_TRP_WIDTH)-1)<<HW_SDRAM_TIMER1_T
                                  RP_BITPOS)
                            10257 ; 184  |#define HW_SDRAM_TIMER1_TRFC_SETMASK (((1<<HW_SDRAM_TIMER1_TRFC_WIDTH)-1)<<HW_SDRAM_TIMER1
                                  _TRFC_BITPOS)
                            10258 ; 185  |
                            10259 ; 186  |#define HW_SDRAM_TIMER1_INIT_CLRMASK ~(WORD)HW_SDRAM_TIMER1_INIT_SETMASK
                            10260 ; 187  |#define HW_SDRAM_TIMER1_TRP_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRP_SETMASK
                            10261 ; 188  |#define HW_SDRAM_TIMER1_TRFC_CLRMASK ~(WORD)HW_SDRAM_TIMER1_TRFC_SETMASK
                            10262 ; 189  |
                            10263 ; 190  |typedef union               
                            10264 ; 191  |{
                            10265 ; 192  |    struct {
                            10266 ; 193  |        int INIT                :16;
                            10267 ; 194  |        int TRP                 :4;
                            10268 ; 195  |        int TRFC                :4;
                            10269 ; 196  |    } B;
                            10270 ; 197  |    int I;
                            10271 ; 198  |} sdramtimer1_type;
                            10272 ; 199  |#define HW_SDRAM_TIMER1 (*(volatile sdramtimer1_type _X*) (HW_SDRAM_BASEADDR+5))
                            10273 ; 200  |
                            10274 ; 201  |/////////////////////////////////////////////////////////////////////////////////
                            10275 ; 202  |//  SDRAM Timer2 Register (HW_SDRAM_TIMER2) Bit Definitions
                            10276 ; 203  |#define HW_SDRAM_TIMER2_TXSR_BITPOS 0
                            10277 ; 204  |#define HW_SDRAM_TIMER2_TREF_BITPOS 4
                            10278 ; 205  |#define HW_SDRAM_TIMER2_TRCD_BITPOS 16
                            10279 ; 206  |
                            10280 ; 207  |#define HW_SDRAM_TIMER2_TXSR_WIDTH 4
                            10281 ; 208  |#define HW_SDRAM_TIMER2_TREF_WIDTH 12
                            10282 ; 209  |#define HW_SDRAM_TIMER2_TRCD_WIDTH 4
                            10283 ; 210  |
                            10284 ; 211  |#define HW_SDRAM_TIMER2_TXSR_SETMASK (((1<<HW_SDRAM_TIMER2_TXSR_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TXSR_BITPOS)
                            10285 ; 212  |#define HW_SDRAM_TIMER2_TREF_SETMASK (((1<<HW_SDRAM_TIMER2_TREF_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TREF_BITPOS)
                            10286 ; 213  |#define HW_SDRAM_TIMER2_TRCD_SETMASK (((1<<HW_SDRAM_TIMER2_TRCD_WIDTH)-1)<<HW_SDRAM_TIMER2
                                  _TRCD_BITPOS)
                            10287 ; 214  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 175

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10288 ; 215  |#define HW_SDRAM_TIMER2_TXSR_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TXSR_SETMASK
                            10289 ; 216  |#define HW_SDRAM_TIMER2_TREF_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TREF_SETMASK
                            10290 ; 217  |#define HW_SDRAM_TIMER2_TRCD_CLRMASK ~(WORD)HW_SDRAM_TIMER2_TRCD_SETMASK
                            10291 ; 218  |
                            10292 ; 219  |typedef union               
                            10293 ; 220  |{
                            10294 ; 221  |    struct {
                            10295 ; 222  |        int TXSR                :4;
                            10296 ; 223  |        int TREF                :12;
                            10297 ; 224  |        int TRCD                :4;
                            10298 ; 225  |        int RSVD                :4; 
                            10299 ; 226  |    } B;
                            10300 ; 227  |    int I;
                            10301 ; 228  |} sdramtimer2_type;
                            10302 ; 229  |#define HW_SDRAM_TIMER2 (*(volatile sdramtimer2_type _X*) (HW_SDRAM_BASEADDR+6))
                            10303 ; 230  |
                            10304 ; 231  |/////////////////////////////////////////////////////////////////////////////////
                            10305 ; 232  |//  System Modulo Base Address Register (HW_SDRAM_BAR) Bit Definitions
                            10306 ; 233  |#define HW_SDRAM_BAR_XA_BITPOS 0
                            10307 ; 234  |
                            10308 ; 235  |#define HW_SDRAM_BAR_XA_SETMASK 0xFFFF<<HW_SDRAM_BAR_XA_BITPOS
                            10309 ; 236  |
                            10310 ; 237  |#define HW_SDRAM_BAR_XA_CLRMASK ~(WORD)HW_SDRAM_BAR_XA_SETMASK
                            10311 ; 238  |
                            10312 ; 239  |/////////////////////////////////////////////////////////////////////////////////
                            10313 ; 240  |//  System Modulo Register (HW_SDRAM_MR) Bit Definitions
                            10314 ; 241  |#define HW_SDRAM_MR_XA_BITPOS 0
                            10315 ; 242  |
                            10316 ; 243  |#define HW_SDRAM_MR_XA_SETMASK 0xFFFF<<HW_SDRAM_MR_XA_BITPOS
                            10317 ; 244  |
                            10318 ; 245  |#define HW_SDRAM_MR_XA_CLRMASK ~(WORD)HW_SDRAM_MR_XA_SETMASK
                            10319 ; 246  |
                            10320 ; 247  |/////////////////////////////////////////////////////////////////////////////////
                            10321 ; 248  |//  SDRAM Mode Register (HW_SDRAM_MODE) Bit Definitions
                            10322 ; 249  |#define HW_SDRAM_MODE_XA_BITPOS 0
                            10323 ; 250  |
                            10324 ; 251  |#define HW_SDRAM_MODE_XA_WIDTH 14
                            10325 ; 252  |
                            10326 ; 253  |#define HW_SDRAM_MODE_XA_SETMASK (((1<<HW_SDRAM_MODE_XA_WIDTH)-1)<<HW_SDRAM_MODE_XA_BITPOS
                                  )
                            10327 ; 254  |
                            10328 ; 255  |#define HW_SDRAM_MODE_XA_CLRMASK ~(WORD)HW_SDRAM_MODE_XA_SETMASK
                            10329 ; 256  |
                            10330 ; 257  |typedef union               
                            10331 ; 258  |{
                            10332 ; 259  |    struct {
                            10333 ; 260  |        int VALUE               :14;
                            10334 ; 261  |        int RSVD                :10; 
                            10335 ; 262  |    } B;
                            10336 ; 263  |    int I;
                            10337 ; 264  |} sdrammode_type;
                            10338 ; 265  |#define HW_SDRAM_MODE (*(volatile sdrammode_type _X*) (HW_SDRAM_BASEADDR+14))
                            10339 ; 266  |
                            10340 ; 267  |/////////////////////////////////////////////////////////////////////////////////
                            10341 ; 268  |//  SDRAM Type Register (HW_SDRAM_TYPE) Bit Definitions
                            10342 ; 269  |#define HW_SDRAM_TYPE_COLWIDTH_BITPOS 0
                            10343 ; 270  |#define HW_SDRAM_TYPE_ROWWIDTH_BITPOS 4
                            10344 ; 271  |
                            10345 ; 272  |#define HW_SDRAM_TYPE_COLWIDTH_WIDTH 4
                            10346 ; 273  |#define HW_SDRAM_TYPE_ROWWIDTH_WIDTH 4
                            10347 ; 274  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 176

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10348 ; 275  |#define HW_SDRAM_TYPE_COLWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_COLWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_COLWIDTH_BITPOS)
                            10349 ; 276  |#define HW_SDRAM_TYPE_ROWWIDTH_SETMASK (((1<<HW_SDRAM_TYPE_ROWWIDTH_WIDTH)-1)<<HW_SDRAM_TY
                                  PE_ROWWIDTH_BITPOS)
                            10350 ; 277  |
                            10351 ; 278  |#define HW_SDRAM_TYPE_COLWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_COLWIDTH_SETMASK)
                            10352 ; 279  |#define HW_SDRAM_TYPE_ROWWIDTH_CLRMASK (~(WORD)HW_SDRAM_TYPE_ROWWIDTH_SETMASK)
                            10353 ; 280  |
                            10354 ; 281  |typedef union               
                            10355 ; 282  |{
                            10356 ; 283  |    struct {
                            10357 ; 284  |        int COLWIDTH               :4;
                            10358 ; 285  |        int ROWWIDTH               :4; 
                            10359 ; 286  |    } B;
                            10360 ; 287  |    int I;
                            10361 ; 288  |} sdramtype_type;
                            10362 ; 289  |#define HW_SDRAM_TYPE (*(volatile sdramtype_type _X*) (HW_SDRAM_BASEADDR+14))
                            10363 ; 290  |
                            10364 ; 291  |#endif
                            10365 ; 292  |
                            10366 ; 293  |
                            10367 ; 294  |
                            10368 ; 295  |
                            10369 ; 296  |
                            10370 ; 297  |
                            10371 
                            10373 
                            10374 ; 34   |#include "regstb.h"
                            10375 
                            10377 
                            10378 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            10379 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2003
                            10380 ; 3    |// Filename: regstb.inc
                            10381 ; 4    |// Description: Register definitions for Trace Buffer
                            10382 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10383 ; 6    |// The following naming conventions are followed in this file.
                            10384 ; 7    |// All registers are named using the format...
                            10385 ; 8    |//     HW_<module>_<regname>
                            10386 ; 9    |// where <module> is the module name which can be any of the following...
                            10387 ; 10   |//     USB20
                            10388 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10389 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10390 ; 13   |// that module)
                            10391 ; 14   |// <regname> is the specific register within that module
                            10392 ; 15   |// We also define the following...
                            10393 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10394 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10395 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10396 ; 19   |// which does something else, and
                            10397 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10398 ; 21   |// which does something else.
                            10399 ; 22   |// Other rules
                            10400 ; 23   |//     All caps
                            10401 ; 24   |//     Numeric identifiers start at 0
                            10402 ; 25   |#if !(defined(regstbinc))
                            10403 ; 26   |#define regstbinc 1
                            10404 ; 27   |
                            10405 ; 28   |#include "types.h"
                            10406 
                            10408 
                            10409 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10410 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 177

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10411 ; 3    |//
                            10412 ; 4    |// Filename: types.h
                            10413 ; 5    |// Description: Standard data types
                            10414 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10415 ; 7    |
                            10416 ; 8    |#ifndef _TYPES_H
                            10417 ; 9    |#define _TYPES_H
                            10418 ; 10   |
                            10419 ; 11   |// TODO:  move this outta here!
                            10420 ; 12   |#if !defined(NOERROR)
                            10421 ; 13   |#define NOERROR 0
                            10422 ; 14   |#define SUCCESS 0
                            10423 ; 15   |#endif 
                            10424 ; 16   |#if !defined(SUCCESS)
                            10425 ; 17   |#define SUCCESS  0
                            10426 ; 18   |#endif
                            10427 ; 19   |#if !defined(ERROR)
                            10428 ; 20   |#define ERROR   -1
                            10429 ; 21   |#endif
                            10430 ; 22   |#if !defined(FALSE)
                            10431 ; 23   |#define FALSE 0
                            10432 ; 24   |#endif
                            10433 ; 25   |#if !defined(TRUE)
                            10434 ; 26   |#define TRUE  1
                            10435 ; 27   |#endif
                            10436 ; 28   |
                            10437 ; 29   |#if !defined(NULL)
                            10438 ; 30   |#define NULL 0
                            10439 ; 31   |#endif
                            10440 ; 32   |
                            10441 ; 33   |#define MAX_INT     0x7FFFFF
                            10442 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10443 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10444 ; 36   |#define MAX_ULONG   (-1) 
                            10445 ; 37   |
                            10446 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10447 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10448 ; 40   |
                            10449 ; 41   |
                            10450 ; 42   |#define BYTE    unsigned char       // btVarName
                            10451 ; 43   |#define CHAR    signed char         // cVarName
                            10452 ; 44   |#define USHORT  unsigned short      // usVarName
                            10453 ; 45   |#define SHORT   unsigned short      // sVarName
                            10454 ; 46   |#define WORD    unsigned int        // wVarName
                            10455 ; 47   |#define INT     signed int          // iVarName
                            10456 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10457 ; 49   |#define LONG    signed long         // lVarName
                            10458 ; 50   |#define BOOL    unsigned int        // bVarName
                            10459 ; 51   |#define FRACT   _fract              // frVarName
                            10460 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10461 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10462 ; 54   |#define FLOAT   float               // fVarName
                            10463 ; 55   |#define DBL     double              // dVarName
                            10464 ; 56   |#define ENUM    enum                // eVarName
                            10465 ; 57   |#define CMX     _complex            // cmxVarName
                            10466 ; 58   |typedef WORD UCS3;                   // 
                            10467 ; 59   |
                            10468 ; 60   |#define UINT16  unsigned short
                            10469 ; 61   |#define UINT8   unsigned char   
                            10470 ; 62   |#define UINT32  unsigned long
                            10471 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 178

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10472 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10473 ; 65   |#define WCHAR   UINT16
                            10474 ; 66   |
                            10475 ; 67   |//UINT128 is 16 bytes or 6 words
                            10476 ; 68   |typedef struct UINT128_3500 {   
                            10477 ; 69   |    int val[6];     
                            10478 ; 70   |} UINT128_3500;
                            10479 ; 71   |
                            10480 ; 72   |#define UINT128   UINT128_3500
                            10481 ; 73   |
                            10482 ; 74   |// Little endian word packed byte strings:   
                            10483 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10484 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10485 ; 77   |// Little endian word packed byte strings:   
                            10486 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10487 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10488 ; 80   |
                            10489 ; 81   |// Declare Memory Spaces To Use When Coding
                            10490 ; 82   |// A. Sector Buffers
                            10491 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10492 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10493 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10494 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            10495 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            10496 ; 88   |// B. Media DDI Memory
                            10497 ; 89   |#define MEDIA_DDI_MEM _Y
                            10498 ; 90   |
                            10499 ; 91   |
                            10500 ; 92   |
                            10501 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            10502 ; 94   |// Examples of circular pointers:
                            10503 ; 95   |//    INT CIRC cpiVarName
                            10504 ; 96   |//    DWORD CIRC cpdwVarName
                            10505 ; 97   |
                            10506 ; 98   |#define RETCODE INT                 // rcVarName
                            10507 ; 99   |
                            10508 ; 100  |// generic bitfield structure
                            10509 ; 101  |struct Bitfield {
                            10510 ; 102  |    unsigned int B0  :1;
                            10511 ; 103  |    unsigned int B1  :1;
                            10512 ; 104  |    unsigned int B2  :1;
                            10513 ; 105  |    unsigned int B3  :1;
                            10514 ; 106  |    unsigned int B4  :1;
                            10515 ; 107  |    unsigned int B5  :1;
                            10516 ; 108  |    unsigned int B6  :1;
                            10517 ; 109  |    unsigned int B7  :1;
                            10518 ; 110  |    unsigned int B8  :1;
                            10519 ; 111  |    unsigned int B9  :1;
                            10520 ; 112  |    unsigned int B10 :1;
                            10521 ; 113  |    unsigned int B11 :1;
                            10522 ; 114  |    unsigned int B12 :1;
                            10523 ; 115  |    unsigned int B13 :1;
                            10524 ; 116  |    unsigned int B14 :1;
                            10525 ; 117  |    unsigned int B15 :1;
                            10526 ; 118  |    unsigned int B16 :1;
                            10527 ; 119  |    unsigned int B17 :1;
                            10528 ; 120  |    unsigned int B18 :1;
                            10529 ; 121  |    unsigned int B19 :1;
                            10530 ; 122  |    unsigned int B20 :1;
                            10531 ; 123  |    unsigned int B21 :1;
                            10532 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 179

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10533 ; 125  |    unsigned int B23 :1;
                            10534 ; 126  |};
                            10535 ; 127  |
                            10536 ; 128  |union BitInt {
                            10537 ; 129  |        struct Bitfield B;
                            10538 ; 130  |        int        I;
                            10539 ; 131  |};
                            10540 ; 132  |
                            10541 ; 133  |#define MAX_MSG_LENGTH 10
                            10542 ; 134  |struct CMessage
                            10543 ; 135  |{
                            10544 ; 136  |        unsigned int m_uLength;
                            10545 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            10546 ; 138  |};
                            10547 ; 139  |
                            10548 ; 140  |typedef struct {
                            10549 ; 141  |    WORD m_wLength;
                            10550 ; 142  |    WORD m_wMessage;
                            10551 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            10552 ; 144  |} Message;
                            10553 ; 145  |
                            10554 ; 146  |struct MessageQueueDescriptor
                            10555 ; 147  |{
                            10556 ; 148  |        int *m_pBase;
                            10557 ; 149  |        int m_iModulo;
                            10558 ; 150  |        int m_iSize;
                            10559 ; 151  |        int *m_pHead;
                            10560 ; 152  |        int *m_pTail;
                            10561 ; 153  |};
                            10562 ; 154  |
                            10563 ; 155  |struct ModuleEntry
                            10564 ; 156  |{
                            10565 ; 157  |    int m_iSignaledEventMask;
                            10566 ; 158  |    int m_iWaitEventMask;
                            10567 ; 159  |    int m_iResourceOfCode;
                            10568 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            10569 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            10570 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            10571 ; 163  |    int m_uTimeOutHigh;
                            10572 ; 164  |    int m_uTimeOutLow;
                            10573 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            10574 ; 166  |};
                            10575 ; 167  |
                            10576 ; 168  |union WaitMask{
                            10577 ; 169  |    struct B{
                            10578 ; 170  |        unsigned int m_bNone     :1;
                            10579 ; 171  |        unsigned int m_bMessage  :1;
                            10580 ; 172  |        unsigned int m_bTimer    :1;
                            10581 ; 173  |        unsigned int m_bButton   :1;
                            10582 ; 174  |    } B;
                            10583 ; 175  |    int I;
                            10584 ; 176  |} ;
                            10585 ; 177  |
                            10586 ; 178  |
                            10587 ; 179  |struct Button {
                            10588 ; 180  |        WORD wButtonEvent;
                            10589 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            10590 ; 182  |};
                            10591 ; 183  |
                            10592 ; 184  |struct Message {
                            10593 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 180

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10594 ; 186  |        WORD wMsgCommand;
                            10595 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            10596 ; 188  |};
                            10597 ; 189  |
                            10598 ; 190  |union EventTypes {
                            10599 ; 191  |        struct CMessage msg;
                            10600 ; 192  |        struct Button Button ;
                            10601 ; 193  |        struct Message Message;
                            10602 ; 194  |};
                            10603 ; 195  |
                            10604 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            10605 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            10606 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            10607 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            10608 ; 200  |
                            10609 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            10610 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            10611 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            10612 ; 204  |
                            10613 ; 205  |#if DEBUG
                            10614 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            10615 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            10616 ; 208  |#else 
                            10617 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            10618 ; 210  |#define DebugBuildAssert(x)    
                            10619 ; 211  |#endif
                            10620 ; 212  |
                            10621 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            10622 ; 214  |//  #pragma asm
                            10623 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            10624 ; 216  |//  #pragma endasm
                            10625 ; 217  |
                            10626 ; 218  |
                            10627 ; 219  |#ifdef COLOR_262K
                            10628 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            10629 ; 221  |#elif defined(COLOR_65K)
                            10630 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            10631 ; 223  |#else
                            10632 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            10633 ; 225  |#endif
                            10634 ; 226  |    
                            10635 ; 227  |#endif // #ifndef _TYPES_H
                            10636 
                            10638 
                            10639 ; 29   |
                            10640 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10641 ; 31   |
                            10642 ; 32   |//   Trace Buffer STMP Registers 
                            10643 ; 33   |//   Last Updated 6.30.2003 D. Baker
                            10644 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            10645 ; 35   |
                            10646 ; 36   |#define HW_TB_BASEADDR (0xF080)
                            10647 ; 37   |
                            10648 ; 38   |
                            10649 ; 39   |
                            10650 ; 40   |
                            10651 ; 41   |/////////////////////////////////////////////////////////////////////////////////
                            10652 ; 42   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 181

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10653 ; 43   |//  Trace Buffer Configuration Register (HW_TB_CFG) Bit Definitions
                            10654 ; 44   |
                            10655 ; 45   |#define HW_TB_CFG_CLK_ENABLE_BITPOS (0)
                            10656 ; 46   |#define HW_TB_CFG_ENABLE_BITPOS (1)
                            10657 ; 47   |#define HW_TB_CFG_DONE_BITPOS (3)
                            10658 ; 48   |#define HW_TB_CFG_DMA_ASEL_BITPOS (4)
                            10659 ; 49   |#define HW_TB_CFG_TRIG_EVENT_BITPOS (6)
                            10660 ; 50   |
                            10661 ; 51   |#define HW_TB_CFG_CLK_ENABLE_WIDTH (1)
                            10662 ; 52   |#define HW_TB_CFG_ENABLE_WIDTH (1)
                            10663 ; 53   |#define HW_TB_CFG_RSVD1_WIDTH (1)
                            10664 ; 54   |#define HW_TB_CFG_DONE_WIDTH (1)
                            10665 ; 55   |#define HW_TB_CFG_DMA_ASEL_WIDTH (2)
                            10666 ; 56   |#define HW_TB_CFG_TRIG_EVENT_WIDTH (1)
                            10667 ; 57   |#define HW_TB_CFG_RSVD2_WIDTH (17)
                            10668 ; 58   |
                            10669 ; 59   |#define HW_TB_CFG_CLK_ENABLE_SETMASK (((1<<HW_TB_CFG_CLK_ENABLE_WIDTH)-1)<<HW_TB_CFG_CLK_E
                                  NABLE_BITPOS) 
                            10670 ; 60   |#define HW_TB_CFG_ENABLE_SETMASK (((1<<HW_TB_CFG_ENABLE_WIDTH)-1)<<HW_TB_CFG_ENABLE_BITPOS
                                  ) 
                            10671 ; 61   |#define HW_TB_CFG_DONE_SETMASK (((1<<HW_TB_CFG_DONE_WIDTH)-1)<<HW_TB_CFG_DONE_BITPOS) 
                            10672 ; 62   |#define HW_TB_CFG_DMA_ASEL_SETMASK (((1<<HW_TB_CFG_DMA_ASEL_WIDTH)-1)<<HW_TB_CFG_DMA_ASEL_
                                  BITPOS) 
                            10673 ; 63   |#define HW_TB_CFG_TRIG_EVENT_SETMASK (((1<<HW_TB_CFG_TRIG_EVENT_WIDTH)-1)<<HW_TB_CFG_TRIG_
                                  EVENT_BITPOS) 
                            10674 ; 64   |
                            10675 ; 65   |#define HW_TB_CFG_CLK_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_CLK_ENABLE_SETMASK)
                            10676 ; 66   |#define HW_TB_CFG_ENABLE_CLRMASK (~(WORD)HW_TB_CFG_ENABLE_SETMASK)
                            10677 ; 67   |#define HW_TB_CFG_DONE_CLRMASK (~(WORD)HW_TB_CFG_DONE_SETMASK)
                            10678 ; 68   |#define HW_TB_CFG_DMA_ASEL_CLRMASK (~(WORD)HW_TB_CFG_DMA_ASEL_SETMASK)
                            10679 ; 69   |#define HW_TB_CFG_TRIG_EVENT_CLRMASK (~(WORD)HW_TB_CFG_TRIG_EVENT_SETMASK)
                            10680 ; 70   |
                            10681 ; 71   |typedef union               
                            10682 ; 72   |{
                            10683 ; 73   |    struct {
                            10684 ; 74   |         int CLK_ENABLE      : HW_TB_CFG_CLK_ENABLE_WIDTH;
                            10685 ; 75   |         int ENABLE          : HW_TB_CFG_ENABLE_WIDTH;
                            10686 ; 76   |        int rsvd1           : HW_TB_CFG_RSVD1_WIDTH;
                            10687 ; 77   |         int DONE            : HW_TB_CFG_DONE_WIDTH;
                            10688 ; 78   |         int DMA_ASEL        : HW_TB_CFG_DMA_ASEL_WIDTH;
                            10689 ; 79   |         int TRIG_EVENT      : HW_TB_CFG_TRIG_EVENT_WIDTH;
                            10690 ; 80   |        int rsvd2           : HW_TB_CFG_RSVD2_WIDTH;
                            10691 ; 81   |    } B;
                            10692 ; 82   |    int I;
                            10693 ; 83   |    unsigned int U;
                            10694 ; 84   |} tb_cfg_type;
                            10695 ; 85   |#define HW_TB_CFG      (*(volatile tb_cfg_type _X*) (HW_TB_BASEADDR+0))    /* Trace Buffer
                                   Configuration Register */
                            10696 ; 86   |
                            10697 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            10698 ; 88   |
                            10699 ; 89   |//  Trace Buffer Base Address Register (HW_TB_BAR) Bit Definitions
                            10700 ; 90   |
                            10701 ; 91   |#define HW_TB_BAR_ADDRESS_BITPOS (0)
                            10702 ; 92   |
                            10703 ; 93   |#define HW_TB_BAR_ADDRESS_WIDTH (16)        
                            10704 ; 94   |#define HW_TB_BAR_RSVD_WIDTH (8)
                            10705 ; 95   |
                            10706 ; 96   |#define HW_TB_BAR_ADDRESS_SETMASK (((1<<HW_TB_BAR_ADDRESS_WIDTH)-1)<<HW_TB_BAR_ADDRESS_BIT
                                  POS) 
                            10707 ; 97   |
                            10708 ; 98   |#define HW_TB_BAR_ADDRESS_CLRMASK (~(WORD)HW_TB_BAR_ADDRESS_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 182

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10709 ; 99   |
                            10710 ; 100  |typedef union               
                            10711 ; 101  |{
                            10712 ; 102  |    struct {
                            10713 ; 103  |         int ADDRESS      : HW_TB_BAR_ADDRESS_WIDTH;
                            10714 ; 104  |        int reserved     : HW_TB_BAR_RSVD_WIDTH;
                            10715 ; 105  |    } B;
                            10716 ; 106  |    int I;
                            10717 ; 107  |    unsigned int U;
                            10718 ; 108  |} tb_bar_type;
                            10719 ; 109  |#define HW_TB_BAR      (*(volatile tb_bar_type _X*) (HW_TB_BASEADDR+1))    /* Trace Buffer
                                   Base Address Register */
                            10720 ; 110  |
                            10721 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            10722 ; 112  |
                            10723 ; 113  |//  Trace Buffer Modulo Register (HW_TB_MOD) Bit Definitions
                            10724 ; 114  |
                            10725 ; 115  |#define HW_TB_MOD_MODULUS_BITPOS (0)
                            10726 ; 116  |
                            10727 ; 117  |#define HW_TB_MOD_MODULUS_WIDTH (14)        
                            10728 ; 118  |#define HW_TB_MOD_RSVD_WIDTH (10)
                            10729 ; 119  |
                            10730 ; 120  |#define HW_TB_MOD_MODULUS_SETMASK (((1<<HW_TB_MOD_MODULUS_WIDTH)-1)<<HW_TB_MOD_MODULUS_BIT
                                  POS) 
                            10731 ; 121  |
                            10732 ; 122  |#define HW_TB_MOD_MODULUS_CLRMASK (~(WORD)HW_TB_MOD_MODULUS_SETMASK)
                            10733 ; 123  |
                            10734 ; 124  |typedef union               
                            10735 ; 125  |{
                            10736 ; 126  |    struct {
                            10737 ; 127  |         int MODULUS      : HW_TB_MOD_MODULUS_WIDTH;
                            10738 ; 128  |        int reserved        : HW_TB_MOD_RSVD_WIDTH;
                            10739 ; 129  |    } B;
                            10740 ; 130  |    int I;
                            10741 ; 131  |    unsigned int U;
                            10742 ; 132  |} tb_mod_type;
                            10743 ; 133  |#define HW_TB_MOD      (*(volatile tb_mod_type _X*) (HW_TB_BASEADDR+2))    /* Trace Buffer
                                   Modulus Register */
                            10744 ; 134  |
                            10745 ; 135  |/////////////////////////////////////////////////////////////////////////////////
                            10746 ; 136  |
                            10747 ; 137  |//  Trace Buffer Current Index Register (HW_TB_CIR) Bit Definitions
                            10748 ; 138  |
                            10749 ; 139  |#define HW_TB_CIR_INDEX_BITPOS (0)
                            10750 ; 140  |
                            10751 ; 141  |#define HW_TB_CIR_INDEX_WIDTH (14)        
                            10752 ; 142  |#define HW_TB_CIR_RSVD_WIDTH (10)
                            10753 ; 143  |
                            10754 ; 144  |#define HW_TB_CIR_INDEX_SETMASK (((1<<HW_TB_CIR_INDEX_WIDTH)-1)<<HW_TB_CIR_INDEX_BITPOS) 
                            10755 ; 145  |
                            10756 ; 146  |#define HW_TB_CIR_INDEX_CLRMASK (~(WORD)HW_TB_CIR_INDEX_SETMASK)
                            10757 ; 147  |
                            10758 ; 148  |typedef union               
                            10759 ; 149  |{
                            10760 ; 150  |    struct {
                            10761 ; 151  |         int INDEX        : HW_TB_CIR_INDEX_WIDTH;
                            10762 ; 152  |        int reserved     : HW_TB_CIR_RSVD_WIDTH;
                            10763 ; 153  |    } B;
                            10764 ; 154  |    int I;
                            10765 ; 155  |    unsigned int U;
                            10766 ; 156  |} tb_cir_type;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 183

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10767 ; 157  |#define HW_TB_CIR      (*(volatile tb_cir_type _X*) (HW_TB_BASEADDR+3))    /* Trace Buffer
                                   Current Index Register */
                            10768 ; 158  |
                            10769 ; 159  |/////////////////////////////////////////////////////////////////////////////////
                            10770 ; 160  |
                            10771 ; 161  |//  Trace Buffer One Byte Code Register (HW_TB_OBC) Bit Definitions
                            10772 ; 162  |
                            10773 ; 163  |#define HW_TB_OBC_CODE_BITPOS (0)
                            10774 ; 164  |
                            10775 ; 165  |#define HW_TB_OBC_CODE_WIDTH (8)        
                            10776 ; 166  |#define HW_TB_OBC_RSVD_WIDTH (16)
                            10777 ; 167  |
                            10778 ; 168  |#define HW_TB_OBC_CODE_SETMASK (((1<<HW_TB_OBC_CODE_WIDTH)-1)<<HW_TB_OBC_CODE_BITPOS) 
                            10779 ; 169  |
                            10780 ; 170  |#define HW_TB_OBC_CODE_CLRMASK (~(WORD)HW_TB_OBC_CODE_SETMASK)
                            10781 ; 171  |
                            10782 ; 172  |typedef union               
                            10783 ; 173  |{
                            10784 ; 174  |    struct {
                            10785 ; 175  |         int CODE        : HW_TB_OBC_CODE_WIDTH;
                            10786 ; 176  |        int reserved    : HW_TB_OBC_RSVD_WIDTH;
                            10787 ; 177  |    } B;
                            10788 ; 178  |    int I;
                            10789 ; 179  |    unsigned int U;
                            10790 ; 180  |} tb_obc_type;
                            10791 ; 181  |#define HW_TB_OBC      (*(volatile tb_obc_type _X*) (HW_TB_BASEADDR+4))    /* Trace Buffer
                                   one byte code Register */
                            10792 ; 182  |
                            10793 ; 183  |/////////////////////////////////////////////////////////////////////////////////
                            10794 ; 184  |
                            10795 ; 185  |//  Trace Buffer Trigger Command Register (HW_TB_TCS) Bit Definitions
                            10796 ; 186  |
                            10797 ; 187  |#define HW_TB_TCS_TRG_STYLE_BITPOS (0)
                            10798 ; 188  |#define HW_TB_TCS_CAP_CLASS_BITPOS (1)
                            10799 ; 189  |#define HW_TB_TCS_TRG_CLASS_BITPOS (3)
                            10800 ; 190  |#define HW_TB_TCS_FREEZE_BITPOS (5)
                            10801 ; 191  |
                            10802 ; 192  |#define HW_TB_TCS_TRG_STYLE_WIDTH (1)        
                            10803 ; 193  |#define HW_TB_TCS_CAP_CLASS_WIDTH (2)        
                            10804 ; 194  |#define HW_TB_TCS_TRG_CLASS_WIDTH (2)        
                            10805 ; 195  |#define HW_TB_TCS_FREEZE_WIDTH (1)        
                            10806 ; 196  |#define HW_TB_TCS_RSVD_WIDTH (18)
                            10807 ; 197  |
                            10808 ; 198  |#define HW_TB_TCS_TRG_STYLE_SETMASK (((1<<HW_TB_TCS_TRG_STYLE_WIDTH)-1)<<HW_TB_TCS_TRG_STY
                                  LE_BITPOS) 
                            10809 ; 199  |#define HW_TB_TCS_CAP_CLASS_SETMASK (((1<<HW_TB_TCS_CAP_CLASS_WIDTH)-1)<<HW_TB_TCS_CAP_CLA
                                  SS_BITPOS) 
                            10810 ; 200  |#define HW_TB_TCS_TRG_CLASS_SETMASK (((1<<HW_TB_TCS_TRG_CLASS_WIDTH)-1)<<HW_TB_TCS_TRG_CLA
                                  SS_BITPOS) 
                            10811 ; 201  |#define HW_TB_TCS_FREEZE_SETMASK (((1<<HW_TB_TCS_FREEZE_WIDTH)-1)<<HW_TB_TCS_FREEZE_BITPOS
                                  ) 
                            10812 ; 202  |
                            10813 ; 203  |#define HW_TB_TCS_TRG_STYLE_CLRMASK (~(WORD)HW_TB_TCS_TRG_STYLE_SETMASK)
                            10814 ; 204  |#define HW_TB_TCS_CAP_CLASS_CLRMASK (~(WORD)HW_TB_TCS_CAP_CLASS_SETMASK)
                            10815 ; 205  |#define HW_TB_TCS_TRG_CLASS_CLRMASK (~(WORD)HW_TB_TCS_TRG_CLASS_SETMASK)
                            10816 ; 206  |#define HW_TB_TCS_FREEZE_CLRMASK (~(WORD)HW_TB_TCS_FREEZE_SETMASK)
                            10817 ; 207  |
                            10818 ; 208  |typedef union               
                            10819 ; 209  |{
                            10820 ; 210  |    struct {
                            10821 ; 211  |         int TRG_STYLE       : HW_TB_TCS_TRG_STYLE_WIDTH;
                            10822 ; 212  |         int CAP_CLASS       : HW_TB_TCS_CAP_CLASS_WIDTH;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 184

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10823 ; 213  |         int TRG_CLASS       : HW_TB_TCS_TRG_CLASS_WIDTH;
                            10824 ; 214  |         int FREEZE          : HW_TB_TCS_FREEZE_WIDTH;
                            10825 ; 215  |        int reserved        : HW_TB_TCS_RSVD_WIDTH;
                            10826 ; 216  |    } B;
                            10827 ; 217  |    int I;
                            10828 ; 218  |    unsigned int U;
                            10829 ; 219  |} tb_tcs_type;
                            10830 ; 220  |#define HW_TB_TCS      (*(volatile tb_tcs_type _X*) (HW_TB_BASEADDR+16))    /* Trace Buffe
                                  r Trigger Command Register */
                            10831 ; 221  |
                            10832 ; 222  |/////////////////////////////////////////////////////////////////////////////////
                            10833 ; 223  |
                            10834 ; 224  |//  Trace Buffer Trigger Value Register (HW_TB_TVR) Bit Definitions
                            10835 ; 225  |
                            10836 ; 226  |#define HW_TB_TVR_MATCH_ADDR_BITPOS (0)
                            10837 ; 227  |
                            10838 ; 228  |#define HW_TB_TVR_MATCH_ADDR_WIDTH (16)        
                            10839 ; 229  |#define HW_TB_TVR_RSVD_WIDTH (8)
                            10840 ; 230  |
                            10841 ; 231  |#define HW_TB_TVR_MATCH_ADDR_SETMASK (((1<<HW_TB_TVR_MATCH_ADDR_WIDTH)-1)<<HW_TB_TVR_MATCH
                                  _ADDR_BITPOS) 
                            10842 ; 232  |
                            10843 ; 233  |#define HW_TB_TVR_MATCH_ADDR_CLRMASK (~(WORD)HW_TB_TVR_MATCH_ADDR_SETMASK)
                            10844 ; 234  |
                            10845 ; 235  |typedef union               
                            10846 ; 236  |{
                            10847 ; 237  |    struct {
                            10848 ; 238  |         int MATCH_ADDR      : HW_TB_TVR_MATCH_ADDR_WIDTH;
                            10849 ; 239  |        int reserved        : HW_TB_TVR_RSVD_WIDTH;
                            10850 ; 240  |    } B;
                            10851 ; 241  |    int I;
                            10852 ; 242  |    unsigned int U;
                            10853 ; 243  |} tb_tvr_type;
                            10854 ; 244  |#define HW_TB_TVR      (*(volatile tb_tvr_type _X*) (HW_TB_BASEADDR+24))    /* Trace Buffe
                                  r Trigger Value Register */
                            10855 ; 245  |
                            10856 ; 246  |
                            10857 ; 247  |
                            10858 ; 248  |#endif
                            10859 ; 249  |
                            10860 ; 250  |
                            10861 ; 251  |
                            10862 ; 252  |
                            10863 ; 253  |
                            10864 ; 254  |
                            10865 ; 255  |
                            10866 ; 256  |
                            10867 ; 257  |
                            10868 ; 258  |
                            10869 ; 259  |
                            10870 ; 260  |
                            10871 ; 261  |
                            10872 ; 262  |
                            10873 ; 263  |
                            10874 ; 264  |
                            10875 ; 265  |
                            10876 
                            10878 
                            10879 ; 35   |#include "regstimer.h"
                            10880 
                            10882 
                            10883 ; 1    |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 185

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10884 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2001
                            10885 ; 3    |// Filename: regstimer.inc
                            10886 ; 4    |// Description: Register definitions for  Timers interface
                            10887 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            10888 ; 6    |// The following naming conventions are followed in this file.
                            10889 ; 7    |// All registers are named using the format...
                            10890 ; 8    |//     HW_<module>_<regname>
                            10891 ; 9    |// where <module> is the module name which can be any of the following...
                            10892 ; 10   |//     USB20
                            10893 ; 11   |// (Note that when there is more than one copy of a particular module, the
                            10894 ; 12   |// module name includes a number starting from 0 for the first instance of
                            10895 ; 13   |// that module)
                            10896 ; 14   |// <regname> is the specific register within that module
                            10897 ; 15   |// We also define the following...
                            10898 ; 16   |//     HW_<module>_<regname>_BITPOS
                            10899 ; 17   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            10900 ; 18   |//     HW_<module>_<regname>_SETMASK
                            10901 ; 19   |// which does something else, and
                            10902 ; 20   |//     HW_<module>_<regname>_CLRMASK
                            10903 ; 21   |// which does something else.
                            10904 ; 22   |// Other rules
                            10905 ; 23   |//     All caps
                            10906 ; 24   |//     Numeric identifiers start at 0
                            10907 ; 25   |#if !(defined(regstimerinc))
                            10908 ; 26   |#define regstimerinc 1
                            10909 ; 27   |
                            10910 ; 28   |#include "types.h"
                            10911 
                            10913 
                            10914 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            10915 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            10916 ; 3    |//
                            10917 ; 4    |// Filename: types.h
                            10918 ; 5    |// Description: Standard data types
                            10919 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            10920 ; 7    |
                            10921 ; 8    |#ifndef _TYPES_H
                            10922 ; 9    |#define _TYPES_H
                            10923 ; 10   |
                            10924 ; 11   |// TODO:  move this outta here!
                            10925 ; 12   |#if !defined(NOERROR)
                            10926 ; 13   |#define NOERROR 0
                            10927 ; 14   |#define SUCCESS 0
                            10928 ; 15   |#endif 
                            10929 ; 16   |#if !defined(SUCCESS)
                            10930 ; 17   |#define SUCCESS  0
                            10931 ; 18   |#endif
                            10932 ; 19   |#if !defined(ERROR)
                            10933 ; 20   |#define ERROR   -1
                            10934 ; 21   |#endif
                            10935 ; 22   |#if !defined(FALSE)
                            10936 ; 23   |#define FALSE 0
                            10937 ; 24   |#endif
                            10938 ; 25   |#if !defined(TRUE)
                            10939 ; 26   |#define TRUE  1
                            10940 ; 27   |#endif
                            10941 ; 28   |
                            10942 ; 29   |#if !defined(NULL)
                            10943 ; 30   |#define NULL 0
                            10944 ; 31   |#endif
                            10945 ; 32   |
                            10946 ; 33   |#define MAX_INT     0x7FFFFF
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 186

M:ADDR CODE           CYCLES LINE SOURCELINE
                            10947 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            10948 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            10949 ; 36   |#define MAX_ULONG   (-1) 
                            10950 ; 37   |
                            10951 ; 38   |#define WORD_SIZE   24              // word size in bits
                            10952 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            10953 ; 40   |
                            10954 ; 41   |
                            10955 ; 42   |#define BYTE    unsigned char       // btVarName
                            10956 ; 43   |#define CHAR    signed char         // cVarName
                            10957 ; 44   |#define USHORT  unsigned short      // usVarName
                            10958 ; 45   |#define SHORT   unsigned short      // sVarName
                            10959 ; 46   |#define WORD    unsigned int        // wVarName
                            10960 ; 47   |#define INT     signed int          // iVarName
                            10961 ; 48   |#define DWORD   unsigned long       // dwVarName
                            10962 ; 49   |#define LONG    signed long         // lVarName
                            10963 ; 50   |#define BOOL    unsigned int        // bVarName
                            10964 ; 51   |#define FRACT   _fract              // frVarName
                            10965 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            10966 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            10967 ; 54   |#define FLOAT   float               // fVarName
                            10968 ; 55   |#define DBL     double              // dVarName
                            10969 ; 56   |#define ENUM    enum                // eVarName
                            10970 ; 57   |#define CMX     _complex            // cmxVarName
                            10971 ; 58   |typedef WORD UCS3;                   // 
                            10972 ; 59   |
                            10973 ; 60   |#define UINT16  unsigned short
                            10974 ; 61   |#define UINT8   unsigned char   
                            10975 ; 62   |#define UINT32  unsigned long
                            10976 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10977 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            10978 ; 65   |#define WCHAR   UINT16
                            10979 ; 66   |
                            10980 ; 67   |//UINT128 is 16 bytes or 6 words
                            10981 ; 68   |typedef struct UINT128_3500 {   
                            10982 ; 69   |    int val[6];     
                            10983 ; 70   |} UINT128_3500;
                            10984 ; 71   |
                            10985 ; 72   |#define UINT128   UINT128_3500
                            10986 ; 73   |
                            10987 ; 74   |// Little endian word packed byte strings:   
                            10988 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10989 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10990 ; 77   |// Little endian word packed byte strings:   
                            10991 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            10992 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            10993 ; 80   |
                            10994 ; 81   |// Declare Memory Spaces To Use When Coding
                            10995 ; 82   |// A. Sector Buffers
                            10996 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            10997 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            10998 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            10999 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11000 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11001 ; 88   |// B. Media DDI Memory
                            11002 ; 89   |#define MEDIA_DDI_MEM _Y
                            11003 ; 90   |
                            11004 ; 91   |
                            11005 ; 92   |
                            11006 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 187

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11007 ; 94   |// Examples of circular pointers:
                            11008 ; 95   |//    INT CIRC cpiVarName
                            11009 ; 96   |//    DWORD CIRC cpdwVarName
                            11010 ; 97   |
                            11011 ; 98   |#define RETCODE INT                 // rcVarName
                            11012 ; 99   |
                            11013 ; 100  |// generic bitfield structure
                            11014 ; 101  |struct Bitfield {
                            11015 ; 102  |    unsigned int B0  :1;
                            11016 ; 103  |    unsigned int B1  :1;
                            11017 ; 104  |    unsigned int B2  :1;
                            11018 ; 105  |    unsigned int B3  :1;
                            11019 ; 106  |    unsigned int B4  :1;
                            11020 ; 107  |    unsigned int B5  :1;
                            11021 ; 108  |    unsigned int B6  :1;
                            11022 ; 109  |    unsigned int B7  :1;
                            11023 ; 110  |    unsigned int B8  :1;
                            11024 ; 111  |    unsigned int B9  :1;
                            11025 ; 112  |    unsigned int B10 :1;
                            11026 ; 113  |    unsigned int B11 :1;
                            11027 ; 114  |    unsigned int B12 :1;
                            11028 ; 115  |    unsigned int B13 :1;
                            11029 ; 116  |    unsigned int B14 :1;
                            11030 ; 117  |    unsigned int B15 :1;
                            11031 ; 118  |    unsigned int B16 :1;
                            11032 ; 119  |    unsigned int B17 :1;
                            11033 ; 120  |    unsigned int B18 :1;
                            11034 ; 121  |    unsigned int B19 :1;
                            11035 ; 122  |    unsigned int B20 :1;
                            11036 ; 123  |    unsigned int B21 :1;
                            11037 ; 124  |    unsigned int B22 :1;
                            11038 ; 125  |    unsigned int B23 :1;
                            11039 ; 126  |};
                            11040 ; 127  |
                            11041 ; 128  |union BitInt {
                            11042 ; 129  |        struct Bitfield B;
                            11043 ; 130  |        int        I;
                            11044 ; 131  |};
                            11045 ; 132  |
                            11046 ; 133  |#define MAX_MSG_LENGTH 10
                            11047 ; 134  |struct CMessage
                            11048 ; 135  |{
                            11049 ; 136  |        unsigned int m_uLength;
                            11050 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11051 ; 138  |};
                            11052 ; 139  |
                            11053 ; 140  |typedef struct {
                            11054 ; 141  |    WORD m_wLength;
                            11055 ; 142  |    WORD m_wMessage;
                            11056 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11057 ; 144  |} Message;
                            11058 ; 145  |
                            11059 ; 146  |struct MessageQueueDescriptor
                            11060 ; 147  |{
                            11061 ; 148  |        int *m_pBase;
                            11062 ; 149  |        int m_iModulo;
                            11063 ; 150  |        int m_iSize;
                            11064 ; 151  |        int *m_pHead;
                            11065 ; 152  |        int *m_pTail;
                            11066 ; 153  |};
                            11067 ; 154  |
                            11068 ; 155  |struct ModuleEntry
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 188

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11069 ; 156  |{
                            11070 ; 157  |    int m_iSignaledEventMask;
                            11071 ; 158  |    int m_iWaitEventMask;
                            11072 ; 159  |    int m_iResourceOfCode;
                            11073 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            11074 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11075 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11076 ; 163  |    int m_uTimeOutHigh;
                            11077 ; 164  |    int m_uTimeOutLow;
                            11078 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11079 ; 166  |};
                            11080 ; 167  |
                            11081 ; 168  |union WaitMask{
                            11082 ; 169  |    struct B{
                            11083 ; 170  |        unsigned int m_bNone     :1;
                            11084 ; 171  |        unsigned int m_bMessage  :1;
                            11085 ; 172  |        unsigned int m_bTimer    :1;
                            11086 ; 173  |        unsigned int m_bButton   :1;
                            11087 ; 174  |    } B;
                            11088 ; 175  |    int I;
                            11089 ; 176  |} ;
                            11090 ; 177  |
                            11091 ; 178  |
                            11092 ; 179  |struct Button {
                            11093 ; 180  |        WORD wButtonEvent;
                            11094 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11095 ; 182  |};
                            11096 ; 183  |
                            11097 ; 184  |struct Message {
                            11098 ; 185  |        WORD wMsgLength;
                            11099 ; 186  |        WORD wMsgCommand;
                            11100 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11101 ; 188  |};
                            11102 ; 189  |
                            11103 ; 190  |union EventTypes {
                            11104 ; 191  |        struct CMessage msg;
                            11105 ; 192  |        struct Button Button ;
                            11106 ; 193  |        struct Message Message;
                            11107 ; 194  |};
                            11108 ; 195  |
                            11109 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11110 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11111 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11112 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11113 ; 200  |
                            11114 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11115 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11116 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11117 ; 204  |
                            11118 ; 205  |#if DEBUG
                            11119 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11120 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11121 ; 208  |#else 
                            11122 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11123 ; 210  |#define DebugBuildAssert(x)    
                            11124 ; 211  |#endif
                            11125 ; 212  |
                            11126 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11127 ; 214  |//  #pragma asm
                            11128 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 189

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11129 ; 216  |//  #pragma endasm
                            11130 ; 217  |
                            11131 ; 218  |
                            11132 ; 219  |#ifdef COLOR_262K
                            11133 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11134 ; 221  |#elif defined(COLOR_65K)
                            11135 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11136 ; 223  |#else
                            11137 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11138 ; 225  |#endif
                            11139 ; 226  |    
                            11140 ; 227  |#endif // #ifndef _TYPES_H
                            11141 
                            11143 
                            11144 ; 29   |
                            11145 ; 30   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11146 ; 31   |//   TIMER STMP Registers 
                            11147 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11148 ; 33   |#define HW_TMR_BASEADDR (0xF100)
                            11149 ; 34   |
                            11150 ; 35   |#define HW_TMR0_BASEADDR HW_TMR_BASEADDR
                            11151 ; 36   |#define HW_TMR1_BASEADDR HW_TMR_BASEADDR+0x40
                            11152 ; 37   |#define HW_TMR2_BASEADDR HW_TMR_BASEADDR+0x80
                            11153 ; 38   |#define HW_TMR3_BASEADDR HW_TMR_BASEADDR+0xC0
                            11154 ; 39   |
                            11155 ; 40   |#define HW_TIMER_NUMBER_0 0
                            11156 ; 41   |#define HW_TIMER_NUMBER_1 1
                            11157 ; 42   |#define HW_TIMER_NUMBER_2 2
                            11158 ; 43   |#define HW_TIMER_NUMBER_3 3
                            11159 ; 44   |
                            11160 ; 45   |#define HW_TMRCSR 0
                            11161 ; 46   |#define HW_TMRCNTR 1
                            11162 ; 47   |
                            11163 ; 48   |
                            11164 ; 49   |/////////////////////////////////////////////////////////////////////////////////
                            11165 ; 50   |//  TIMER CSR (HW_TMR0CSR) Bit Definitions
                            11166 ; 51   |#define HW_TMR0CSR_TIMER_ENABLE_BITPOS (0)
                            11167 ; 52   |#define HW_TMR0CSR_TIMER_INT_EN_BITPOS (1)
                            11168 ; 53   |#define HW_TMR0CSR_INVERT_BITPOS (2)
                            11169 ; 54   |#define HW_TMR0CSR_TIMER_CONTROL_BITPOS (3)
                            11170 ; 55   |#define HW_TMR0CSR_TIMER_STATUS_BITPOS (7)
                            11171 ; 56   |#define HW_TMR0CSR_TIMER_MODE_BITPOS (8)
                            11172 ; 57   |#define HW_TMR0CSR_CLKGT_BITPOS (23)
                            11173 ; 58   |
                            11174 ; 59   |#define HW_TMR0CSR_TIMER_ENABLE_WIDTH (1)
                            11175 ; 60   |#define HW_TMR0CSR_TIMER_INT_EN_WIDTH (1)
                            11176 ; 61   |#define HW_TMR0CSR_INVERT_WIDTH (1)
                            11177 ; 62   |#define HW_TMR0CSR_TIMER_CONTROL_WIDTH (3)
                            11178 ; 63   |#define HW_TMR0CSR_TIMER_STATUS_WIDTH (1)
                            11179 ; 64   |#define HW_TMR0CSR_TIMER_MODE_WIDTH (2)
                            11180 ; 65   |#define HW_TMR0CSR_CLKGT_WIDTH (1)
                            11181 ; 66   |
                            11182 ; 67   |#define HW_TMR0CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR0CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_ENABLE_BITPOS)
                            11183 ; 68   |#define HW_TMR0CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR0CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_INT_EN_BITPOS)
                            11184 ; 69   |#define HW_TMR0CSR_INVERT_SETMASK (((1<<HW_TMR0CSR_INVERT_WIDTH)-1)<<HW_TMR0CSR_INVERT_BIT
                                  POS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 190

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11185 ; 70   |#define HW_TMR0CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR0CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR0
                                  CSR_TIMER_CONTROL_BITPOS)
                            11186 ; 71   |#define HW_TMR0CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR0CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR0CS
                                  R_TIMER_STATUS_BITPOS)
                            11187 ; 72   |#define HW_TMR0CSR_TIMER_MODE_SETMASK (((1<<HW_TMR0CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR0CSR_TI
                                  MER_MODE_BITPOS)
                            11188 ; 73   |#define HW_TMR0CSR_CLKGT_SETMASK (((1<<HW_TMR0CSR_CLKGT_WIDTH)-1)<<HW_TMR0CSR_CLKGT_BITPOS
                                  )
                            11189 ; 74   |
                            11190 ; 75   |#define HW_TMR0CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_ENABLE_SETMASK)
                            11191 ; 76   |#define HW_TMR0CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_INT_EN_SETMASK)
                            11192 ; 77   |#define HW_TMR0CSR_INVERT_CLRMASK (~(WORD)HW_TMR0CSR_INVERT_SETMASK)
                            11193 ; 78   |#define HW_TMR0CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_CONTROL_SETMASK)
                            11194 ; 79   |#define HW_TMR0CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_STATUS_SETMASK)
                            11195 ; 80   |#define HW_TMR0CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR0CSR_TIMER_MODE_SETMASK)
                            11196 ; 81   |#define HW_TMR0CSR_CLKGT_CLRMASK (~(WORD)HW_TMR0CSR_CLKGT_SETMASK)
                            11197 ; 82   |
                            11198 ; 83   |/////////////////////////////////////////////////////////////////////////////////
                            11199 ; 84   |//  TIMER CSR (HW_TMR1CSR) Bit Definitions
                            11200 ; 85   |#define HW_TMR1CSR_TIMER_ENABLE_BITPOS (0)
                            11201 ; 86   |#define HW_TMR1CSR_TIMER_INT_EN_BITPOS (1)
                            11202 ; 87   |#define HW_TMR1CSR_INVERT_BITPOS (2)
                            11203 ; 88   |#define HW_TMR1CSR_TIMER_CONTROL_BITPOS (3)
                            11204 ; 89   |#define HW_TMR1CSR_TIMER_STATUS_BITPOS (7)
                            11205 ; 90   |#define HW_TMR1CSR_TIMER_MODE_BITPOS (8)
                            11206 ; 91   |#define HW_TMR1CSR_CLKGT_BITPOS (23)
                            11207 ; 92   |
                            11208 ; 93   |#define HW_TMR1CSR_TIMER_ENABLE_WIDTH (1)
                            11209 ; 94   |#define HW_TMR1CSR_TIMER_INT_EN_WIDTH (1)
                            11210 ; 95   |#define HW_TMR1CSR_INVERT_WIDTH (1)
                            11211 ; 96   |#define HW_TMR1CSR_TIMER_CONTROL_WIDTH (3)
                            11212 ; 97   |#define HW_TMR1CSR_TIMER_STATUS_WIDTH (1)
                            11213 ; 98   |#define HW_TMR1CSR_TIMER_MODE_WIDTH (2)
                            11214 ; 99   |#define HW_TMR1CSR_CLKGT_WIDTH (1)
                            11215 ; 100  |
                            11216 ; 101  |#define HW_TMR1CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR1CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_ENABLE_BITPOS)
                            11217 ; 102  |#define HW_TMR1CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR1CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_INT_EN_BITPOS)
                            11218 ; 103  |#define HW_TMR1CSR_INVERT_SETMASK (((1<<HW_TMR1CSR_INVERT_WIDTH)-1)<<HW_TMR1CSR_INVERT_BIT
                                  POS)
                            11219 ; 104  |#define HW_TMR1CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR1CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR1
                                  CSR_TIMER_CONTROL_BITPOS)
                            11220 ; 105  |#define HW_TMR1CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR1CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR1CS
                                  R_TIMER_STATUS_BITPOS)
                            11221 ; 106  |#define HW_TMR1CSR_TIMER_MODE_SETMASK (((1<<HW_TMR1CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR1CSR_TI
                                  MER_MODE_BITPOS)
                            11222 ; 107  |#define HW_TMR1CSR_CLKGT_SETMASK (((1<<HW_TMR1CSR_CLKGT_WIDTH)-1)<<HW_TMR1CSR_CLKGT_BITPOS
                                  )
                            11223 ; 108  |
                            11224 ; 109  |#define HW_TMR1CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_ENABLE_SETMASK)
                            11225 ; 110  |#define HW_TMR1CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_INT_EN_SETMASK)
                            11226 ; 111  |#define HW_TMR1CSR_INVERT_CLRMASK (~(WORD)HW_TMR1CSR_INVERT_SETMASK)
                            11227 ; 112  |#define HW_TMR1CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_CONTROL_SETMASK)
                            11228 ; 113  |#define HW_TMR1CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_STATUS_SETMASK)
                            11229 ; 114  |#define HW_TMR1CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR1CSR_TIMER_MODE_SETMASK)
                            11230 ; 115  |#define HW_TMR1CSR_CLKGT_CLRMASK (~(WORD)HW_TMR1CSR_CLKGT_SETMASK)
                            11231 ; 116  |
                            11232 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            11233 ; 118  |//  TIMER CSR (HW_TMR2CSR) Bit Definitions
                            11234 ; 119  |#define HW_TMR2CSR_TIMER_ENABLE_BITPOS (0)
                            11235 ; 120  |#define HW_TMR2CSR_TIMER_INT_EN_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 191

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11236 ; 121  |#define HW_TMR2CSR_INVERT_BITPOS (2)
                            11237 ; 122  |#define HW_TMR2CSR_TIMER_CONTROL_BITPOS (3)
                            11238 ; 123  |#define HW_TMR2CSR_TIMER_STATUS_BITPOS (7)
                            11239 ; 124  |#define HW_TMR2CSR_TIMER_MODE_BITPOS (8)
                            11240 ; 125  |#define HW_TMR2CSR_CLKGT_BITPOS (23)
                            11241 ; 126  |
                            11242 ; 127  |#define HW_TMR2CSR_TIMER_ENABLE_WIDTH (1)
                            11243 ; 128  |#define HW_TMR2CSR_TIMER_INT_EN_WIDTH (1)
                            11244 ; 129  |#define HW_TMR2CSR_INVERT_WIDTH (1)
                            11245 ; 130  |#define HW_TMR2CSR_TIMER_CONTROL_WIDTH (3)
                            11246 ; 131  |#define HW_TMR2CSR_TIMER_STATUS_WIDTH (1)
                            11247 ; 132  |#define HW_TMR2CSR_TIMER_MODE_WIDTH (2)
                            11248 ; 133  |#define HW_TMR2CSR_CLKGT_WIDTH (1)
                            11249 ; 134  |
                            11250 ; 135  |#define HW_TMR2CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR2CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_ENABLE_BITPOS)
                            11251 ; 136  |#define HW_TMR2CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR2CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_INT_EN_BITPOS)
                            11252 ; 137  |#define HW_TMR2CSR_INVERT_SETMASK (((1<<HW_TMR2CSR_INVERT_WIDTH)-1)<<HW_TMR2CSR_INVERT_BIT
                                  POS)
                            11253 ; 138  |#define HW_TMR2CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR2CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR2
                                  CSR_TIMER_CONTROL_BITPOS)
                            11254 ; 139  |#define HW_TMR2CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR2CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR2CS
                                  R_TIMER_STATUS_BITPOS)
                            11255 ; 140  |#define HW_TMR2CSR_TIMER_MODE_SETMASK (((1<<HW_TMR2CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR2CSR_TI
                                  MER_MODE_BITPOS)
                            11256 ; 141  |#define HW_TMR2CSR_CLKGT_SETMASK (((1<<HW_TMR2CSR_CLKGT_WIDTH)-1)<<HW_TMR2CSR_CLKGT_BITPOS
                                  )
                            11257 ; 142  |
                            11258 ; 143  |#define HW_TMR2CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_ENABLE_SETMASK)
                            11259 ; 144  |#define HW_TMR2CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_INT_EN_SETMASK)
                            11260 ; 145  |#define HW_TMR2CSR_INVERT_CLRMASK (~(WORD)HW_TMR2CSR_INVERT_SETMASK)
                            11261 ; 146  |#define HW_TMR2CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_CONTROL_SETMASK)
                            11262 ; 147  |#define HW_TMR2CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_STATUS_SETMASK)
                            11263 ; 148  |#define HW_TMR2CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR2CSR_TIMER_MODE_SETMASK)
                            11264 ; 149  |#define HW_TMR2CSR_CLKGT_CLRMASK (~(WORD)HW_TMR2CSR_CLKGT_SETMASK)
                            11265 ; 150  |
                            11266 ; 151  |/////////////////////////////////////////////////////////////////////////////////
                            11267 ; 152  |//  TIMER CSR (HW_TMR3CSR) Bit Definitions
                            11268 ; 153  |#define HW_TMR3CSR_TIMER_ENABLE_BITPOS (0)
                            11269 ; 154  |#define HW_TMR3CSR_TIMER_INT_EN_BITPOS (1)
                            11270 ; 155  |#define HW_TMR3CSR_INVERT_BITPOS (2)
                            11271 ; 156  |#define HW_TMR3CSR_TIMER_CONTROL_BITPOS (3)
                            11272 ; 157  |#define HW_TMR3CSR_TIMER_STATUS_BITPOS (7)
                            11273 ; 158  |#define HW_TMR3CSR_TIMER_MODE_BITPOS (8)
                            11274 ; 159  |#define HW_TMR3CSR_CLKGT_BITPOS (23)
                            11275 ; 160  |
                            11276 ; 161  |#define HW_TMR3CSR_TIMER_ENABLE_WIDTH (1)
                            11277 ; 162  |#define HW_TMR3CSR_TIMER_INT_EN_WIDTH (1)
                            11278 ; 163  |#define HW_TMR3CSR_INVERT_WIDTH (1)
                            11279 ; 164  |#define HW_TMR3CSR_TIMER_CONTROL_WIDTH (3)
                            11280 ; 165  |#define HW_TMR3CSR_TIMER_STATUS_WIDTH (1)
                            11281 ; 166  |#define HW_TMR3CSR_TIMER_MODE_WIDTH (2)
                            11282 ; 167  |#define HW_TMR3CSR_CLKGT_WIDTH (1)
                            11283 ; 168  |
                            11284 ; 169  |#define HW_TMR3CSR_TIMER_ENABLE_SETMASK (((1<<HW_TMR3CSR_TIMER_ENABLE_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_ENABLE_BITPOS)
                            11285 ; 170  |#define HW_TMR3CSR_TIMER_INT_EN_SETMASK (((1<<HW_TMR3CSR_TIMER_INT_EN_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_INT_EN_BITPOS)
                            11286 ; 171  |#define HW_TMR3CSR_INVERT_SETMASK (((1<<HW_TMR3CSR_INVERT_WIDTH)-1)<<HW_TMR3CSR_INVERT_BIT
                                  POS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 192

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11287 ; 172  |#define HW_TMR3CSR_TIMER_CONTROL_SETMASK (((1<<HW_TMR3CSR_TIMER_CONTROL_WIDTH)-1)<<HW_TMR3
                                  CSR_TIMER_CONTROL_BITPOS)
                            11288 ; 173  |#define HW_TMR3CSR_TIMER_STATUS_SETMASK (((1<<HW_TMR3CSR_TIMER_STATUS_WIDTH)-1)<<HW_TMR3CS
                                  R_TIMER_STATUS_BITPOS)
                            11289 ; 174  |#define HW_TMR3CSR_TIMER_MODE_SETMASK (((1<<HW_TMR3CSR_TIMER_MODE_WIDTH)-1)<<HW_TMR3CSR_TI
                                  MER_MODE_BITPOS)
                            11290 ; 175  |#define HW_TMR3CSR_CLKGT_SETMASK (((1<<HW_TMR3CSR_CLKGT_WIDTH)-1)<<HW_TMR3CSR_CLKGT_BITPOS
                                  )
                            11291 ; 176  |
                            11292 ; 177  |#define HW_TMR3CSR_TIMER_ENABLE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_ENABLE_SETMASK)
                            11293 ; 178  |#define HW_TMR3CSR_TIMER_INT_EN_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_INT_EN_SETMASK)
                            11294 ; 179  |#define HW_TMR3CSR_INVERT_CLRMASK (~(WORD)HW_TMR3CSR_INVERT_SETMASK)
                            11295 ; 180  |#define HW_TMR3CSR_TIMER_CONTROL_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_CONTROL_SETMASK)
                            11296 ; 181  |#define HW_TMR3CSR_TIMER_STATUS_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_STATUS_SETMASK)
                            11297 ; 182  |#define HW_TMR3CSR_TIMER_MODE_CLRMASK (~(WORD)HW_TMR3CSR_TIMER_MODE_SETMASK)
                            11298 ; 183  |#define HW_TMR3CSR_CLKGT_CLRMASK (~(WORD)HW_TMR3CSR_CLKGT_SETMASK)
                            11299 ; 184  |
                            11300 ; 185  |typedef union               
                            11301 ; 186  |{
                            11302 ; 187  |    struct {
                            11303 ; 188  |       int TIMER_ENABLE              :1;
                            11304 ; 189  |       int TIMER_INT_EN              :1;
                            11305 ; 190  |       int INVERT                    :1;
                            11306 ; 191  |       int TIMER_CONTROL             :3;
                            11307 ; 192  |       int RSVD0                     :1;
                            11308 ; 193  |       int TIMER_STATUS              :1;
                            11309 ; 194  |       int TIMER_MODE                :2;
                            11310 ; 195  |       int RSVD1                     :13;
                            11311 ; 196  |       int CLKGT                     :1;
                            11312 ; 197  |    } B;
                            11313 ; 198  |    int I;
                            11314 ; 199  |} timercsr_type;
                            11315 ; 200  |#define HW_TMR0CSR        (*(volatile timercsr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCSR))  /*
                                   Timer0 Control Status Register */
                            11316 ; 201  |#define HW_TMR1CSR        (*(volatile timercsr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCSR))  /*
                                   Timer1 Control Status Register */
                            11317 ; 202  |#define HW_TMR2CSR        (*(volatile timercsr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCSR))  /*
                                   Timer2 Control Status Register */
                            11318 ; 203  |#define HW_TMR3CSR        (*(volatile timercsr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCSR))  /*
                                   Timer3 Control Status Register */
                            11319 ; 204  |
                            11320 ; 205  |/////////////////////////////////////////////////////////////////////////////////
                            11321 ; 206  |//  TIMER CNTR register (HW_TMR0CNTR) Bit Definitions
                            11322 ; 207  |#define HW_TMR0CNTR_COUNT_BITPOS 0
                            11323 ; 208  |#define HW_TMR0CNTR_COUNT_WIDTH 24
                            11324 ; 209  |#define HW_TMR0CNTR_COUNT_SETMASK (((1<<HW_TMR0CNTR_COUNT_WIDTH)-1)<<HW_TMR0CNTR_COUNT_BIT
                                  POS)
                            11325 ; 210  |#define HW_TMR0CNTR_COUNT_CLRMASK (~(WORD)HW_TMR0CNTR_COUNT_SETMASK)
                            11326 ; 211  |
                            11327 ; 212  |/////////////////////////////////////////////////////////////////////////////////
                            11328 ; 213  |//  TIMER CNTR register (HW_TMR1CNTR) Bit Definitions
                            11329 ; 214  |#define HW_TMR1CNTR_COUNT_BITPOS 0
                            11330 ; 215  |#define HW_TMR1CNTR_COUNT_WIDTH 24
                            11331 ; 216  |#define HW_TMR1CNTR_COUNT_SETMASK (((1<<HW_TMR1CNTR_COUNT_WIDTH)-1)<<HW_TMR1CNTR_COUNT_BIT
                                  POS)
                            11332 ; 217  |#define HW_TMR1CNTR_COUNT_CLRMASK (~(WORD)HW_TMR1CNTR_COUNT_SETMASK)
                            11333 ; 218  |
                            11334 ; 219  |/////////////////////////////////////////////////////////////////////////////////
                            11335 ; 220  |//  TIMER CNTR register (HW_TMR2CNTR) Bit Definitions
                            11336 ; 221  |#define HW_TMR2CNTR_COUNT_BITPOS 0
                            11337 ; 222  |#define HW_TMR2CNTR_COUNT_WIDTH 24
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 193

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11338 ; 223  |#define HW_TMR2CNTR_COUNT_SETMASK (((1<<HW_TMR2CNTR_COUNT_WIDTH)-1)<<HW_TMR2CNTR_COUNT_BIT
                                  POS)
                            11339 ; 224  |#define HW_TMR2CNTR_COUNT_CLRMASK (~(WORD)HW_TMR2CNTR_COUNT_SETMASK)
                            11340 ; 225  |
                            11341 ; 226  |typedef union               
                            11342 ; 227  |{
                            11343 ; 228  |    struct {
                            11344 ; 229  |       int COUNT                    :24;
                            11345 ; 230  |    } B;
                            11346 ; 231  |    int I;
                            11347 ; 232  |} tmrcntr_type;
                            11348 ; 233  |#define HW_TMR0CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR0_BASEADDR+HW_TMRCNTR))  /
                                  * Timer0 Count Register */
                            11349 ; 234  |#define HW_TMR1CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR1_BASEADDR+HW_TMRCNTR))  /
                                  * Timer1 Count Register */
                            11350 ; 235  |#define HW_TMR2CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR2_BASEADDR+HW_TMRCNTR))  /
                                  * Timer2 Count Register */
                            11351 ; 236  |#define HW_TMR3CNTR        (*(volatile tmrcntr_type _X*) (HW_TMR3_BASEADDR+HW_TMRCNTR))  /
                                  * Timer3 Count Register */
                            11352 ; 237  |
                            11353 ; 238  |
                            11354 ; 239  |//*********************  REGISTER ALIAS DEFINES TO MATCH LEGACY CODE *********************
                                  **********
                            11355 ; 240  |// The following defines were added to match regs3410.inc definition to build SDK2XXX code
                                   without needing 
                            11356 ; 241  |// to update the actual files. Only the defines needed to build SDK2.400 were added.   
                            11357 ; 242  |#define HW_TIMER_BASEADDR 0xF100
                            11358 ; 243  |
                            11359 ; 244  |#define HW_TIMER0_BASEADDR HW_TIMER_BASEADDR
                            11360 ; 245  |#define HW_TIMER1_BASEADDR HW_TIMER0_BASEADDR+0x40
                            11361 ; 246  |#define HW_TIMER2_BASEADDR HW_TIMER1_BASEADDR+0x40
                            11362 ; 247  |#define HW_TIMER3_BASEADDR HW_TIMER2_BASEADDR+0x40
                            11363 ; 248  |
                            11364 ; 249  |#define HW_TMR0CR HW_TMR0_BASEADDR
                            11365 ; 250  |#define HW_TMR1CR HW_TMR1_BASEADDR
                            11366 ; 251  |#define HW_TMR2CR HW_TMR2_BASEADDR
                            11367 ; 252  |#define HW_TMR3CR HW_TIMER3_BASEADDR
                            11368 ; 253  |
                            11369 ; 254  |// Timer enable
                            11370 ; 255  |#define HW_TMRCR_TE_BITPOS 0   
                            11371 ; 256  |// Timer clock gating control
                            11372 ; 257  |#define HW_TMR3CR_CG_BITPOS 23  
                            11373 ; 258  |#define HW_TMR3CR_CG_SETMASK 1<<HW_TMR3CR_CG_BITPOS
                            11374 ; 259  |#define HW_TMR3CR_CG_CLRMASK ~(WORD)HW_TMR3CR_CG_SETMASK
                            11375 ; 260  |#endif
                            11376 ; 261  |
                            11377 ; 262  |
                            11378 ; 263  |
                            11379 ; 264  |
                            11380 
                            11382 
                            11383 ; 36   |#include "regsusb20.h"
                            11384 
                            11386 
                            11387 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11388 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2003
                            11389 ; 3    |//;  File        : regsusb20ip.inc
                            11390 ; 4    |//;  Description : USB20 IP Register definition
                            11391 ; 5    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11392 ; 6    |
                            11393 ; 7    |// The following naming conventions are followed in this file.
                            11394 ; 8    |// All registers are named using the format...
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 194

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11395 ; 9    |//     HW_<module>_<regname>
                            11396 ; 10   |// where <module> is the module name which can be any of the following...
                            11397 ; 11   |//     USB20
                            11398 ; 12   |// (Note that when there is more than one copy of a particular module, the
                            11399 ; 13   |// module name includes a number starting from 0 for the first instance of
                            11400 ; 14   |// that module)
                            11401 ; 15   |// <regname> is the specific register within that module
                            11402 ; 16   |// We also define the following...
                            11403 ; 17   |//     HW_<module>_<regname>_BITPOS
                            11404 ; 18   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            11405 ; 19   |//     HW_<module>_<regname>_SETMASK
                            11406 ; 20   |// which does something else, and
                            11407 ; 21   |//     HW_<module>_<regname>_CLRMASK
                            11408 ; 22   |// which does something else.
                            11409 ; 23   |// Other rules
                            11410 ; 24   |//     All caps
                            11411 ; 25   |//     Numeric identifiers start at 0
                            11412 ; 26   |
                            11413 ; 27   |#if !(defined(regsusb20inc))
                            11414 ; 28   |#define regsusb20inc 1
                            11415 ; 29   |
                            11416 ; 30   |#include "types.h"
                            11417 
                            11419 
                            11420 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            11421 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            11422 ; 3    |//
                            11423 ; 4    |// Filename: types.h
                            11424 ; 5    |// Description: Standard data types
                            11425 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            11426 ; 7    |
                            11427 ; 8    |#ifndef _TYPES_H
                            11428 ; 9    |#define _TYPES_H
                            11429 ; 10   |
                            11430 ; 11   |// TODO:  move this outta here!
                            11431 ; 12   |#if !defined(NOERROR)
                            11432 ; 13   |#define NOERROR 0
                            11433 ; 14   |#define SUCCESS 0
                            11434 ; 15   |#endif 
                            11435 ; 16   |#if !defined(SUCCESS)
                            11436 ; 17   |#define SUCCESS  0
                            11437 ; 18   |#endif
                            11438 ; 19   |#if !defined(ERROR)
                            11439 ; 20   |#define ERROR   -1
                            11440 ; 21   |#endif
                            11441 ; 22   |#if !defined(FALSE)
                            11442 ; 23   |#define FALSE 0
                            11443 ; 24   |#endif
                            11444 ; 25   |#if !defined(TRUE)
                            11445 ; 26   |#define TRUE  1
                            11446 ; 27   |#endif
                            11447 ; 28   |
                            11448 ; 29   |#if !defined(NULL)
                            11449 ; 30   |#define NULL 0
                            11450 ; 31   |#endif
                            11451 ; 32   |
                            11452 ; 33   |#define MAX_INT     0x7FFFFF
                            11453 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            11454 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            11455 ; 36   |#define MAX_ULONG   (-1) 
                            11456 ; 37   |
                            11457 ; 38   |#define WORD_SIZE   24              // word size in bits
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 195

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11458 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            11459 ; 40   |
                            11460 ; 41   |
                            11461 ; 42   |#define BYTE    unsigned char       // btVarName
                            11462 ; 43   |#define CHAR    signed char         // cVarName
                            11463 ; 44   |#define USHORT  unsigned short      // usVarName
                            11464 ; 45   |#define SHORT   unsigned short      // sVarName
                            11465 ; 46   |#define WORD    unsigned int        // wVarName
                            11466 ; 47   |#define INT     signed int          // iVarName
                            11467 ; 48   |#define DWORD   unsigned long       // dwVarName
                            11468 ; 49   |#define LONG    signed long         // lVarName
                            11469 ; 50   |#define BOOL    unsigned int        // bVarName
                            11470 ; 51   |#define FRACT   _fract              // frVarName
                            11471 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            11472 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            11473 ; 54   |#define FLOAT   float               // fVarName
                            11474 ; 55   |#define DBL     double              // dVarName
                            11475 ; 56   |#define ENUM    enum                // eVarName
                            11476 ; 57   |#define CMX     _complex            // cmxVarName
                            11477 ; 58   |typedef WORD UCS3;                   // 
                            11478 ; 59   |
                            11479 ; 60   |#define UINT16  unsigned short
                            11480 ; 61   |#define UINT8   unsigned char   
                            11481 ; 62   |#define UINT32  unsigned long
                            11482 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11483 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            11484 ; 65   |#define WCHAR   UINT16
                            11485 ; 66   |
                            11486 ; 67   |//UINT128 is 16 bytes or 6 words
                            11487 ; 68   |typedef struct UINT128_3500 {   
                            11488 ; 69   |    int val[6];     
                            11489 ; 70   |} UINT128_3500;
                            11490 ; 71   |
                            11491 ; 72   |#define UINT128   UINT128_3500
                            11492 ; 73   |
                            11493 ; 74   |// Little endian word packed byte strings:   
                            11494 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11495 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11496 ; 77   |// Little endian word packed byte strings:   
                            11497 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            11498 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            11499 ; 80   |
                            11500 ; 81   |// Declare Memory Spaces To Use When Coding
                            11501 ; 82   |// A. Sector Buffers
                            11502 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            11503 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            11504 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            11505 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            11506 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            11507 ; 88   |// B. Media DDI Memory
                            11508 ; 89   |#define MEDIA_DDI_MEM _Y
                            11509 ; 90   |
                            11510 ; 91   |
                            11511 ; 92   |
                            11512 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            11513 ; 94   |// Examples of circular pointers:
                            11514 ; 95   |//    INT CIRC cpiVarName
                            11515 ; 96   |//    DWORD CIRC cpdwVarName
                            11516 ; 97   |
                            11517 ; 98   |#define RETCODE INT                 // rcVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 196

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11518 ; 99   |
                            11519 ; 100  |// generic bitfield structure
                            11520 ; 101  |struct Bitfield {
                            11521 ; 102  |    unsigned int B0  :1;
                            11522 ; 103  |    unsigned int B1  :1;
                            11523 ; 104  |    unsigned int B2  :1;
                            11524 ; 105  |    unsigned int B3  :1;
                            11525 ; 106  |    unsigned int B4  :1;
                            11526 ; 107  |    unsigned int B5  :1;
                            11527 ; 108  |    unsigned int B6  :1;
                            11528 ; 109  |    unsigned int B7  :1;
                            11529 ; 110  |    unsigned int B8  :1;
                            11530 ; 111  |    unsigned int B9  :1;
                            11531 ; 112  |    unsigned int B10 :1;
                            11532 ; 113  |    unsigned int B11 :1;
                            11533 ; 114  |    unsigned int B12 :1;
                            11534 ; 115  |    unsigned int B13 :1;
                            11535 ; 116  |    unsigned int B14 :1;
                            11536 ; 117  |    unsigned int B15 :1;
                            11537 ; 118  |    unsigned int B16 :1;
                            11538 ; 119  |    unsigned int B17 :1;
                            11539 ; 120  |    unsigned int B18 :1;
                            11540 ; 121  |    unsigned int B19 :1;
                            11541 ; 122  |    unsigned int B20 :1;
                            11542 ; 123  |    unsigned int B21 :1;
                            11543 ; 124  |    unsigned int B22 :1;
                            11544 ; 125  |    unsigned int B23 :1;
                            11545 ; 126  |};
                            11546 ; 127  |
                            11547 ; 128  |union BitInt {
                            11548 ; 129  |        struct Bitfield B;
                            11549 ; 130  |        int        I;
                            11550 ; 131  |};
                            11551 ; 132  |
                            11552 ; 133  |#define MAX_MSG_LENGTH 10
                            11553 ; 134  |struct CMessage
                            11554 ; 135  |{
                            11555 ; 136  |        unsigned int m_uLength;
                            11556 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            11557 ; 138  |};
                            11558 ; 139  |
                            11559 ; 140  |typedef struct {
                            11560 ; 141  |    WORD m_wLength;
                            11561 ; 142  |    WORD m_wMessage;
                            11562 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            11563 ; 144  |} Message;
                            11564 ; 145  |
                            11565 ; 146  |struct MessageQueueDescriptor
                            11566 ; 147  |{
                            11567 ; 148  |        int *m_pBase;
                            11568 ; 149  |        int m_iModulo;
                            11569 ; 150  |        int m_iSize;
                            11570 ; 151  |        int *m_pHead;
                            11571 ; 152  |        int *m_pTail;
                            11572 ; 153  |};
                            11573 ; 154  |
                            11574 ; 155  |struct ModuleEntry
                            11575 ; 156  |{
                            11576 ; 157  |    int m_iSignaledEventMask;
                            11577 ; 158  |    int m_iWaitEventMask;
                            11578 ; 159  |    int m_iResourceOfCode;
                            11579 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 197

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11580 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            11581 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            11582 ; 163  |    int m_uTimeOutHigh;
                            11583 ; 164  |    int m_uTimeOutLow;
                            11584 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            11585 ; 166  |};
                            11586 ; 167  |
                            11587 ; 168  |union WaitMask{
                            11588 ; 169  |    struct B{
                            11589 ; 170  |        unsigned int m_bNone     :1;
                            11590 ; 171  |        unsigned int m_bMessage  :1;
                            11591 ; 172  |        unsigned int m_bTimer    :1;
                            11592 ; 173  |        unsigned int m_bButton   :1;
                            11593 ; 174  |    } B;
                            11594 ; 175  |    int I;
                            11595 ; 176  |} ;
                            11596 ; 177  |
                            11597 ; 178  |
                            11598 ; 179  |struct Button {
                            11599 ; 180  |        WORD wButtonEvent;
                            11600 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            11601 ; 182  |};
                            11602 ; 183  |
                            11603 ; 184  |struct Message {
                            11604 ; 185  |        WORD wMsgLength;
                            11605 ; 186  |        WORD wMsgCommand;
                            11606 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            11607 ; 188  |};
                            11608 ; 189  |
                            11609 ; 190  |union EventTypes {
                            11610 ; 191  |        struct CMessage msg;
                            11611 ; 192  |        struct Button Button ;
                            11612 ; 193  |        struct Message Message;
                            11613 ; 194  |};
                            11614 ; 195  |
                            11615 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            11616 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            11617 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            11618 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            11619 ; 200  |
                            11620 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            11621 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            11622 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            11623 ; 204  |
                            11624 ; 205  |#if DEBUG
                            11625 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            11626 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            11627 ; 208  |#else 
                            11628 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            11629 ; 210  |#define DebugBuildAssert(x)    
                            11630 ; 211  |#endif
                            11631 ; 212  |
                            11632 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            11633 ; 214  |//  #pragma asm
                            11634 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            11635 ; 216  |//  #pragma endasm
                            11636 ; 217  |
                            11637 ; 218  |
                            11638 ; 219  |#ifdef COLOR_262K
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 198

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11639 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            11640 ; 221  |#elif defined(COLOR_65K)
                            11641 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            11642 ; 223  |#else
                            11643 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            11644 ; 225  |#endif
                            11645 ; 226  |    
                            11646 ; 227  |#endif // #ifndef _TYPES_H
                            11647 
                            11649 
                            11650 ; 31   |
                            11651 ; 32   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11652 ; 33   |//   USB2.0 STMP Registers 
                            11653 ; 34   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11654 ; 35   |#define HW_USB_BASEADDR (0xF200)
                            11655 ; 36   |
                            11656 ; 37   |
                            11657 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            11658 ; 39   |//  USB Control Status Register (HW_USBCSR) Bit Definitions
                            11659 ; 40   |#define HW_USBCSR_USBEN_BITPOS (0)
                            11660 ; 41   |#define HW_USBCSR_WAKEUPIRQ_BITPOS (1)
                            11661 ; 42   |#define HW_USBCSR_WAKEUPIE_BITPOS (2)
                            11662 ; 43   |#define HW_USBCSR_VBUSCXIRQ_BITPOS (3)
                            11663 ; 44   |#define HW_USBCSR_VBUSCXIE_BITPOS (4)
                            11664 ; 45   |#define HW_USBCSR_VBUSDISCXIRQ_BITPOS (5)
                            11665 ; 46   |#define HW_USBCSR_VBUSDISCXIE_BITPOS (6)
                            11666 ; 47   |#define HW_USBCSR_CLKOFF_BITPOS (7)
                            11667 ; 48   |#define HW_USBCSR_SUSP_BITPOS (8)
                            11668 ; 49   |#define HW_USBCSR_SUSPF_BITPOS (9)
                            11669 ; 50   |#define HW_USBCSR_UTMITST_BITPOS (10)
                            11670 ; 51   |#define HW_USBCSR_UTMI_EXT_BITPOS (11)
                            11671 ; 52   |#define HW_USBCSR_PLUGGEDIN_EN_BITPOS (12)
                            11672 ; 53   |#define HW_USBCSR_PLUGGEDIN_BITPOS (13)
                            11673 ; 54   |#define HW_USBCSR_HOSTDISCONNECT_BITPOS (22)
                            11674 ; 55   |#define HW_USBCSR_VBUSSENSE_BITPOS (23)
                            11675 ; 56   |
                            11676 ; 57   |#define HW_USBCSR_USBEN_SETMASK (1<<HW_USBCSR_USBEN_BITPOS)        
                            11677 ; 58   |#define HW_USBCSR_WAKEUPIRQ_SETMASK (1<<HW_USBCSR_WAKEUPIRQ_BITPOS) 
                            11678 ; 59   |#define HW_USBCSR_WAKEUPIE_SETMASK (1<<HW_USBCSR_WAKEUPIE_BITPOS)  
                            11679 ; 60   |#define HW_USBCSR_VBUSCXIRQ_SETMASK (1<<HW_USBCSR_VBUSCXIRQ_BITPOS)
                            11680 ; 61   |#define HW_USBCSR_VBUSCXIE_SETMASK (1<<HW_USBCSR_VBUSCXIE_BITPOS)
                            11681 ; 62   |#define HW_USBCSR_VBUSDISCXIRQ_SETMASK (1<<HW_USBCSR_VBUSDISCXIRQ_BITPOS)
                            11682 ; 63   |#define HW_USBCSR_VBUSDISCXIE_SETMASK (1<<HW_USBCSR_VBUSDISCXIE_BITPOS)
                            11683 ; 64   |#define HW_USBCSR_CLKOFF_SETMASK (1<<HW_USBCSR_CLKOFF_BITPOS)    
                            11684 ; 65   |#define HW_USBCSR_SUSP_SETMASK (1<<HW_USBCSR_SUSP_BITPOS)      
                            11685 ; 66   |#define HW_USBCSR_SUSPF_SETMASK (1<<HW_USBCSR_SUSPF_BITPOS)     
                            11686 ; 67   |#define HW_USBCSR_UTMITST_SETMASK (1<<HW_USBCSR_UTMITST_BITPOS)   
                            11687 ; 68   |#define HW_USBCSR_UTMI_EXT_SETMASK (1<<HW_USBCSR_UTMI_EXT_BITPOS)
                            11688 ; 69   |#define HW_USBCSR_VBUSSENSE_SETMASK (1<<HW_USBCSR_VBUSSENSE_BITPOS)
                            11689 ; 70   |
                            11690 ; 71   |
                            11691 ; 72   |#define HW_USBCSR_USBEN_CLRMASK (~(WORD)HW_USBCSR_USBEN_SETMASK)     
                            11692 ; 73   |#define HW_USBCSR_WAKEUPIRQ_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIRQ_SETMASK) 
                            11693 ; 74   |#define HW_USBCSR_WAKEUPIE_CLRMASK (~(WORD)HW_USBCSR_WAKEUPIE_SETMASK)  
                            11694 ; 75   |#define HW_USBCSR_VBUSCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIRQ_SETMASK)
                            11695 ; 76   |#define HW_USBCSR_VBUSCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSCXIE_SETMASK)
                            11696 ; 77   |#define HW_USBCSR_VBUSDISCXIRQ_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIRQ_SETMASK)
                            11697 ; 78   |#define HW_USBCSR_VBUSDISCXIE_CLRMASK (~(WORD)HW_USBCSR_VBUSDISCXIE_SETMASK) 
                            11698 ; 79   |#define HW_USBCSR_CLKOFF_CLRMASK (~(WORD)HW_USBCSR_CLKOFF_SETMASK)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 199

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11699 ; 80   |#define HW_USBCSR_SUSP_CLRMASK (~(WORD)HW_USBCSR_SUSP_SETMASK)      
                            11700 ; 81   |#define HW_USBCSR_SUSPF_CLRMASK (~(WORD)HW_USBCSR_SUSPF_SETMASK)     
                            11701 ; 82   |#define HW_USBCSR_UTMITST_CLRMASK (~(WORD)HW_USBCSR_UTMITST_SETMASK)   
                            11702 ; 83   |#define HW_USBCSR_UTMI_EXT_CLRMASK (~(WORD)HW_USBCSR_UTMI_EXT_SETMASK) 
                            11703 ; 84   |#define HW_USBCSR_VBUSSENSE_CLRMASK (~(WORD)HW_USBCSR_VBUSSENSE_SETMASK) 
                            11704 ; 85   |
                            11705 ; 86   |typedef union               
                            11706 ; 87   |{
                            11707 ; 88   |    struct {
                            11708 ; 89   |        int USBEN          :1;
                            11709 ; 90   |        int WAKEUPIRQ      :1;
                            11710 ; 91   |        int WAKEUPIE       :1;
                            11711 ; 92   |        int VBUSCXIRQ      :1;
                            11712 ; 93   |        int VBUSCXIE       :1;
                            11713 ; 94   |        int VBUSDISCXIRQ   :1;
                            11714 ; 95   |        int VBUSDISCXIE    :1;
                            11715 ; 96   |        int CLKOFF         :1;
                            11716 ; 97   |        int SUSP           :1;
                            11717 ; 98   |        int SUSPF          :1;
                            11718 ; 99   |        int UTMITST        :1;
                            11719 ; 100  |        int ARCCONNECT     :1;
                            11720 ; 101  |        int PLUGGEDIN_EN   :1;
                            11721 ; 102  |        int PLUGGEDIN      :1;
                            11722 ; 103  |        int                :8;
                            11723 ; 104  |        int HOSTDISCONNECT :1;
                            11724 ; 105  |        int VBUSSENSE      :1;
                            11725 ; 106  |    } B;
                            11726 ; 107  |    int I;
                            11727 ; 108  |} usbcsr_type;
                            11728 ; 109  |#define HW_USBCSR      (*(volatile usbcsr_type _X*) (HW_USB_BASEADDR))    /* USB Control /
                                   Status Register */
                            11729 ; 110  |
                            11730 ; 111  |/////////////////////////////////////////////////////////////////////////////////
                            11731 ; 112  |//  USB DMA OFFSET register (HW_USBDMAOFF) Bit Definitions
                            11732 ; 113  |#define HW_USBDMAOFF_MEM_BITPOS (16)
                            11733 ; 114  |
                            11734 ; 115  |#define HW_USBDMAOFF_ADD_SETMASK (0x00FFFF)
                            11735 ; 116  |#define HW_USBDMAOFF_MEM_SETMASK (3<<HW_USBDMAOFF_MEM_BITPOS)
                            11736 ; 117  |
                            11737 ; 118  |#define HW_USBDMAOFF_ADD_CLRMASK (~(WORD)HW_USBDMAOFF_ADD_SETMASK)
                            11738 ; 119  |#define HW_USBDMAOFF_MEM_CLRMASK (~(WORD)HW_USBDMAOFF_MEM_SETMASK)
                            11739 ; 120  |
                            11740 ; 121  |typedef union               
                            11741 ; 122  |{
                            11742 ; 123  |    struct {
                            11743 ; 124  |        int ADD            :16;
                            11744 ; 125  |        int MEM            :2;
                            11745 ; 126  |        int                :6;
                            11746 ; 127  |    } B;
                            11747 ; 128  |    int I;
                            11748 ; 129  |} usbdmaoff_type;
                            11749 ; 130  |#define HW_USBDMAOFF      (*(volatile usbdmaoff_type _X*) (HW_USB_BASEADDR+1))    
                            11750 ; 131  |
                            11751 ; 132  |/////////////////////////////////////////////////////////////////////////////////
                            11752 ; 133  |//  USB ARC ACCESS register (HW_USBARCACCESS) Bit Definitions
                            11753 ; 134  |#define HW_USBARCACCESS_RWB_BITPOS (16)
                            11754 ; 135  |#define HW_USBARCACCESS_KICK_BITPOS (23)
                            11755 ; 136  |
                            11756 ; 137  |#define HW_USBARCACCESS_ADD_SETMASK (0x0001FF)
                            11757 ; 138  |#define HW_USBARCACCESS_RWB_SETMASK (1<<HW_USBARCACCESS_RWB_BITPOS)
                            11758 ; 139  |#define HW_USBARCACCESS_KICK_SETMASK (23<<HW_USBDMAOFF_MEM_BITPOS)
                            11759 ; 140  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 200

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11760 ; 141  |#define HW_USBARCACCESS_ADD_CLRMASK (~(WORD)HW_USBARCACCESS_ADD_SETMASK)
                            11761 ; 142  |#define HW_USBARCACCESS_RWB_CLRMASK (~(WORD)HW_USBARCACCESS_RWB_SETMASK) 
                            11762 ; 143  |#define HW_USBARCACCESS_KICK_CLRMASK (~(WORD)HW_USBARCACCESS_KICK_SETMASK)
                            11763 ; 144  |
                            11764 ; 145  |typedef union               
                            11765 ; 146  |{
                            11766 ; 147  |    struct {
                            11767 ; 148  |        int ADD            :9;
                            11768 ; 149  |        int                :7;
                            11769 ; 150  |        int RWB            :1;
                            11770 ; 151  |        int                :14;
                            11771 ; 152  |        int KICK           :1;
                            11772 ; 153  |    } B;
                            11773 ; 154  |    int I;
                            11774 ; 155  |} usbarcaccess_type;
                            11775 ; 156  |#define HW_USBARCACCESS      (*(volatile usbarcaccess_type _X*) (HW_USB_BASEADDR+2))    
                            11776 ; 157  |
                            11777 ; 158  |/////////////////////////////////////////////////////////////////////////////////
                            11778 ; 159  |//  USB ARC DATA LOW register (HW_USBARCDATALOW) Bit Definitions
                            11779 ; 160  |#define HW_USBARCDATALOW_DATA_SETMASK (0x00FFFF)
                            11780 ; 161  |
                            11781 ; 162  |#define HW_USBARCDATALOW_ADD_CLRMASK (~(WORD)HW_USBARCDATALOW_DATA_SETMASK)
                            11782 ; 163  |
                            11783 ; 164  |typedef union               
                            11784 ; 165  |{
                            11785 ; 166  |    struct {
                            11786 ; 167  |        int DATA           :16;
                            11787 ; 168  |        int                :8;
                            11788 ; 169  |    } B;
                            11789 ; 170  |    int I;
                            11790 ; 171  |} usbarcdatalow_type;
                            11791 ; 172  |#define HW_USBARCDATALOW      (*(volatile usbarcdatalow_type _X*) (HW_USB_BASEADDR+3))    
                                  
                            11792 ; 173  |
                            11793 ; 174  |/////////////////////////////////////////////////////////////////////////////////
                            11794 ; 175  |//  USB ARC DATA HIGH register (HW_USBARCDATAHIGH) Bit Definitions
                            11795 ; 176  |#define HW_USBARCDATAHIGH_DATA_SETMASK (0x00FFFF)
                            11796 ; 177  |
                            11797 ; 178  |#define HW_USBARCDATAHIGH_ADD_CLRMASK (~(WORD)HW_USBARCDATAHIGH_DATA_SETMASK)
                            11798 ; 179  |
                            11799 ; 180  |typedef union               
                            11800 ; 181  |{
                            11801 ; 182  |    struct {
                            11802 ; 183  |        int DATA           :16;
                            11803 ; 184  |        int                :8;
                            11804 ; 185  |    } B;
                            11805 ; 186  |    int I;
                            11806 ; 187  |} usbarcdatahigh_type;
                            11807 ; 188  |#define HW_USBARCDATAHIGH     (*(volatile usbarcdatahigh_type _X*) (HW_USB_BASEADDR+4))   
                                   
                            11808 ; 189  |
                            11809 ; 190  |
                            11810 ; 191  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11811 ; 192  |//   USB2.0 ARC Registers 
                            11812 ; 193  |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            11813 ; 194  |#define HW_ARC_BASE_ADDR (0x0000)
                            11814 ; 195  |
                            11815 ; 196  |#define HW_ARC_HCSPARAMS (HW_ARC_BASE_ADDR+0x104)
                            11816 ; 197  |#define HW_ARC_USBCMD (HW_ARC_BASE_ADDR+0x140)
                            11817 ; 198  |#define HW_ARC_USBSTS (HW_ARC_BASE_ADDR+0x144)
                            11818 ; 199  |#define HW_ARC_USBINTR (HW_ARC_BASE_ADDR+0x148)
                            11819 ; 200  |#define HW_ARC_DEVADDR (HW_ARC_BASE_ADDR+0x154)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 201

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11820 ; 201  |#define HW_ARC_ENDPTLISTADDR (HW_ARC_BASE_ADDR+0x158)
                            11821 ; 202  |#define HW_ARC_PORTSC1 (HW_ARC_BASE_ADDR+0x184)
                            11822 ; 203  |#define HW_ARC_USBMODE (HW_ARC_BASE_ADDR+0x1a8)
                            11823 ; 204  |#define HW_ARC_ENDPTSETUPSTAT (HW_ARC_BASE_ADDR+0x1ac)
                            11824 ; 205  |#define HW_ARC_ENDPTPRIME (HW_ARC_BASE_ADDR+0x1b0)
                            11825 ; 206  |#define HW_ARC_ENDPTFLUSH (HW_ARC_BASE_ADDR+0x1b4)
                            11826 ; 207  |#define HW_ARC_ENDPTSTATUS (HW_ARC_BASE_ADDR+0x1b8)
                            11827 ; 208  |#define HW_ARC_ENDPTCOMPLETE (HW_ARC_BASE_ADDR+0x1bc)
                            11828 ; 209  |#define HW_ARC_ENDPTCTRL0 (HW_ARC_BASE_ADDR+0x1c0)
                            11829 ; 210  |#define HW_ARC_ENDPTCTRL1 (HW_ARC_BASE_ADDR+0x1c4)
                            11830 ; 211  |#define HW_ARC_ENDPTCTRL2 (HW_ARC_BASE_ADDR+0x1c8)
                            11831 ; 212  |#define HW_ARC_ENDPTCTRL3 (HW_ARC_BASE_ADDR+0x1cc)
                            11832 ; 213  |#define HW_ARC_ENDPTCTRL4 (HW_ARC_BASE_ADDR+0x1d0)
                            11833 ; 214  |#define HW_ARC_ENDPTCTRL5 (HW_ARC_BASE_ADDR+0x1d4)
                            11834 ; 215  |#define HW_ARC_ENDPTCTRL6 (HW_ARC_BASE_ADDR+0x1d8)
                            11835 ; 216  |#define HW_ARC_ENDPTCTRL7 (HW_ARC_BASE_ADDR+0x1dc)
                            11836 ; 217  |#define HW_ARC_ENDPTCTRL8 (HW_ARC_BASE_ADDR+0x1e0)
                            11837 ; 218  |#define HW_ARC_ENDPTCTRL9 (HW_ARC_BASE_ADDR+0x1e4)
                            11838 ; 219  |#define HW_ARC_ENDPTCTRL10 (HW_ARC_BASE_ADDR+0x1e8)
                            11839 ; 220  |#define HW_ARC_ENDPTCTRL11 (HW_ARC_BASE_ADDR+0x1ec)
                            11840 ; 221  |#define HW_ARC_ENDPTCTRL12 (HW_ARC_BASE_ADDR+0x1f0)
                            11841 ; 222  |#define HW_ARC_ENDPTCTRL13 (HW_ARC_BASE_ADDR+0x1f4)
                            11842 ; 223  |#define HW_ARC_ENDPTCTRL14 (HW_ARC_BASE_ADDR+0x1f8)
                            11843 ; 224  |#define HW_ARC_ENDPTCTRL15 (HW_ARC_BASE_ADDR+0x1fc)
                            11844 ; 225  |
                            11845 ; 226  |#define HW_ARC_ENDPTCTRL(n) (HW_ARC_ENDPTCTRL0+((n)*4))    
                            11846 ; 227  |/////////////////////////////////////////////////////////////////////////////////
                            11847 ; 228  |//  USB ARC Register Host Control Structural Parameters (HW_ARC_HCSPARAMS)
                            11848 ; 229  |
                            11849 ; 230  |#define HW_ARC_HCSPARAMS_NPORTS_BITPOS (0)
                            11850 ; 231  |#define HW_ARC_HCSPARAMS_PPC_BITPOS (4)
                            11851 ; 232  |#define HW_ARC_HCSPARAMS_NPCC_BITPOS (8)
                            11852 ; 233  |#define HW_ARC_HCSPARAMS_NCC_BITPOS (12)
                            11853 ; 234  |#define HW_ARC_HCSPARAMS_PI_BITPOS (16)
                            11854 ; 235  |#define HW_ARC_HCSPARAMS_NPTT_BITPOS (20)
                            11855 ; 236  |#define HW_ARC_HCSPARAMS_NTT_BITPOS (24)
                            11856 ; 237  |
                            11857 ; 238  |#define HW_ARC_HCSPARAMS_NPORTS_SETMASK (15<<HW_ARC_HCSPARAMS_NPORTS_BITPOS)
                            11858 ; 239  |#define HW_ARC_HCSPARAMS_PPC_SETMASK (1<<HW_ARC_HCSPARAMS_PPC_BITPOS)        
                            11859 ; 240  |#define HW_ARC_HCSPARAMS_NPCC_SETMASK (15<<HW_ARC_HCSPARAMS_NPCC_BITPOS)  
                            11860 ; 241  |#define HW_ARC_HCSPARAMS_NCC_SETMASK (15<<HW_ARC_HCSPARAMS_NCC_BITPOS)       
                            11861 ; 242  |#define HW_ARC_HCSPARAMS_PI_SETMASK (1<<HW_ARC_HCSPARAMS_PI_BITPOS)     
                            11862 ; 243  |#define HW_ARC_HCSPARAMS_NPTT_SETMASK (15<<HW_ARC_HCSPARAMS_NPTT_BITPOS)  
                            11863 ; 244  |#define HW_ARC_HCSPARAMS_NTT_SETMASK (15<<HW_ARC_HCSPARAMS_NTT_BITPOS)       
                            11864 ; 245  |
                            11865 ; 246  |#define HW_ARC_HCSPARAMS_NPORTS_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPORTS_SETMASK)
                            11866 ; 247  |#define HW_ARC_HCSPARAMS_PPC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PPC_SETMASK)
                            11867 ; 248  |#define HW_ARC_HCSPARAMS_NPCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPCC_SETMASK)
                            11868 ; 249  |#define HW_ARC_HCSPARAMS_NCC_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NCC_SETMASK)
                            11869 ; 250  |#define HW_ARC_HCSPARAMS_PI_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_PI_SETMASK)  
                            11870 ; 251  |#define HW_ARC_HCSPARAMS_NPTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NPTT_SETMASK)
                            11871 ; 252  |#define HW_ARC_HCSPARAMS_NTT_CLRMASK (~(WORD)HW_ARC_HCSPARAMS_NTT_SETMASK)
                            11872 ; 253  |
                            11873 ; 254  |typedef union               
                            11874 ; 255  |{
                            11875 ; 256  |    struct {
                            11876 ; 257  |        int N_PORTS         :4;
                            11877 ; 258  |        int PPC             :1;
                            11878 ; 259  |        int                 :3;
                            11879 ; 260  |        int N_PCC           :4;
                            11880 ; 261  |        int N_CC            :4;
                            11881 ; 262  |        int PI              :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 202

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11882 ; 263  |        int                 :3;
                            11883 ; 264  |        int N_PTT           :4;
                            11884 ; 265  |        int N_TT            :4;
                            11885 ; 266  |        int                 :20;
                            11886 ; 267  |    } B;
                            11887 ; 268  |    DWORD I;
                            11888 ; 269  |} hcsparams_type;
                            11889 ; 270  |// #define HW_ARC_HCSPARAMS (*(volatile hcsparams_type _X*) (HW_ARC_BASEADDR))    
                            11890 ; 271  |
                            11891 ; 272  |/////////////////////////////////////////////////////////////////////////////////
                            11892 ; 273  |//  USB ARC Register USB Command (HW_ARC_USBCMD)
                            11893 ; 274  |
                            11894 ; 275  |#define HW_ARC_USBCMD_RS_BITPOS (0)
                            11895 ; 276  |#define HW_ARC_USBCMD_RST_BITPOS (1)
                            11896 ; 277  |#define HW_ARC_USBCMD_FS0_BITPOS (2)
                            11897 ; 278  |#define HW_ARC_USBCMD_FS1_BITPOS (3)
                            11898 ; 279  |#define HW_ARC_USBCMD_PSE_BITPOS (4)
                            11899 ; 280  |#define HW_ARC_USBCMD_ASE_BITPOS (5)
                            11900 ; 281  |#define HW_ARC_USBCMD_IAA_BITPOS (6)
                            11901 ; 282  |#define HW_ARC_USBCMD_LR_BITPOS (7)
                            11902 ; 283  |#define HW_ARC_USBCMD_ASP0_BITPOS (8)
                            11903 ; 284  |#define HW_ARC_USBCMD_ASP1_BITPOS (9)
                            11904 ; 285  |#define HW_ARC_USBCMD_ASPE_BITPOS (11)
                            11905 ; 286  |#define HW_ARC_USBCMD_FS2_BITPOS (15)
                            11906 ; 287  |#define HW_ARC_USBCMD_ITC_BITPOS (16)
                            11907 ; 288  |
                            11908 ; 289  |#define HW_ARC_USBCMD_RS_SETMASK (1<<HW_ARC_USBCMD_RS_BITPOS)                
                            11909 ; 290  |#define HW_ARC_USBCMD_RST_SETMASK (1<<HW_ARC_USBCMD_RST_BITPOS)   
                            11910 ; 291  |#define HW_ARC_USBCMD_FS0_SETMASK (1<<HW_ARC_USBCMD_FS0_BITPOS)   
                            11911 ; 292  |#define HW_ARC_USBCMD_FS1_SETMASK (1<<HW_ARC_USBCMD_FS1_BITPOS)   
                            11912 ; 293  |#define HW_ARC_USBCMD_PSE_SETMASK (1<<HW_ARC_USBCMD_PSE_BITPOS)   
                            11913 ; 294  |#define HW_ARC_USBCMD_ASE_SETMASK (1<<HW_ARC_USBCMD_ASE_BITPOS)   
                            11914 ; 295  |#define HW_ARC_USBCMD_IAA_SETMASK (1<<HW_ARC_USBCMD_IAA_BITPOS)   
                            11915 ; 296  |#define HW_ARC_USBCMD_LR_SETMASK (1<<HW_ARC_USBCMD_LR_BITPOS)        
                            11916 ; 297  |#define HW_ARC_USBCMD_ASP0_SETMASK (1<<HW_ARC_USBCMD_ASP0_BITPOS)
                            11917 ; 298  |#define HW_ARC_USBCMD_ASP1_SETMASK (1<<HW_ARC_USBCMD_ASP1_BITPOS)
                            11918 ; 299  |#define HW_ARC_USBCMD_ASPE_SETMASK (1<<HW_ARC_USBCMD_ASPE_BITPOS)
                            11919 ; 300  |#define HW_ARC_USBCMD_FS2_SETMASK (1<<HW_ARC_USBCMD_FS2_BITPOS)    
                            11920 ; 301  |#define HW_ARC_USBCMD_ITC_SETMASK (255<<HW_ARC_USBCMD_ITC_BITPOS)
                            11921 ; 302  |
                            11922 ; 303  |#define HW_ARC_USBCMD_RS_CLRMASK (~(WORD)HW_ARC_USBCMD_RS_SETMASK)     
                            11923 ; 304  |#define HW_ARC_USBCMD_RST_CLRMASK (~(WORD)HW_ARC_USBCMD_RST_SETMASK)    
                            11924 ; 305  |#define HW_ARC_USBCMD_FS0_CLRMASK (~(WORD)HW_ARC_USBCMD_FS0_SETMASK)    
                            11925 ; 306  |#define HW_ARC_USBCMD_FS1_CLRMASK (~(WORD)HW_ARC_USBCMD_FS1_SETMASK)    
                            11926 ; 307  |#define HW_ARC_USBCMD_PSE_CLRMASK (~(WORD)HW_ARC_USBCMD_PSE_SETMASK)    
                            11927 ; 308  |#define HW_ARC_USBCMD_ASE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASE_SETMASK)    
                            11928 ; 309  |#define HW_ARC_USBCMD_IAA_CLRMASK (~(WORD)HW_ARC_USBCMD_IAA_SETMASK)    
                            11929 ; 310  |#define HW_ARC_USBCMD_LR_CLRMASK (~(WORD)HW_ARC_USBCMD_LR_SETMASK) 
                            11930 ; 311  |#define HW_ARC_USBCMD_ASP0_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP0_SETMASK)
                            11931 ; 312  |#define HW_ARC_USBCMD_ASP1_CLRMASK (~(WORD)HW_ARC_USBCMD_ASP1_SETMASK)
                            11932 ; 313  |#define HW_ARC_USBCMD_ASPE_CLRMASK (~(WORD)HW_ARC_USBCMD_ASPE_SETMASK)
                            11933 ; 314  |#define HW_ARC_USBCMD_FS2_CLRMASK (~(WORD)HW_ARC_USBCMD_FS2_SETMASK)    
                            11934 ; 315  |#define HW_ARC_USBCMD_ITC_CLRMASK (~(WORD)HW_ARC_USBCMD_ITC_SETMASK)    
                            11935 ; 316  |
                            11936 ; 317  |typedef union               
                            11937 ; 318  |{
                            11938 ; 319  |    struct {
                            11939 ; 320  |        int RS              :1;
                            11940 ; 321  |        int RST             :1;
                            11941 ; 322  |        int FS0             :1;
                            11942 ; 323  |        int FS1             :1;
                            11943 ; 324  |        int PSE             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 203

M:ADDR CODE           CYCLES LINE SOURCELINE
                            11944 ; 325  |        int ASE             :1;
                            11945 ; 326  |        int IAA             :1;
                            11946 ; 327  |        int LR              :1;
                            11947 ; 328  |        int ASP0            :1;
                            11948 ; 329  |        int ASP1            :1;
                            11949 ; 330  |        int                 :1;
                            11950 ; 331  |        int ASPE            :1;
                            11951 ; 332  |        int                 :3;
                            11952 ; 333  |        int FS2             :1;
                            11953 ; 334  |        int ITC             :8;
                            11954 ; 335  |        int                 :24;
                            11955 ; 336  |    } B;
                            11956 ; 337  |    DWORD I;
                            11957 ; 338  |} usbcmd_type;
                            11958 ; 339  |//#define HW_ARC_USBCMD ((volatile usbcmd_type _X*) (HW_ARC_BASEADDR+0x140))    
                            11959 ; 340  |
                            11960 ; 341  |/////////////////////////////////////////////////////////////////////////////////
                            11961 ; 342  |//  USB ARC Register USB Status (HW_ARC_USBSTS)
                            11962 ; 343  |
                            11963 ; 344  |#define HW_ARC_USBSTS_UI_BITPOS (0)
                            11964 ; 345  |#define HW_ARC_USBSTS_UEI_BITPOS (1)
                            11965 ; 346  |#define HW_ARC_USBSTS_PCI_BITPOS (2)
                            11966 ; 347  |#define HW_ARC_USBSTS_FRI_BITPOS (3)
                            11967 ; 348  |#define HW_ARC_USBSTS_SEI_BITPOS (4)
                            11968 ; 349  |#define HW_ARC_USBSTS_AAI_BITPOS (5)
                            11969 ; 350  |#define HW_ARC_USBSTS_URI_BITPOS (6)
                            11970 ; 351  |#define HW_ARC_USBSTS_SRI_BITPOS (7)
                            11971 ; 352  |#define HW_ARC_USBSTS_SLI_BITPOS (8)
                            11972 ; 353  |#define HW_ARC_USBSTS_HCH_BITPOS (12)
                            11973 ; 354  |#define HW_ARC_USBSTS_RCL_BITPOS (13)
                            11974 ; 355  |#define HW_ARC_USBSTS_PS_BITPOS (14)
                            11975 ; 356  |#define HW_ARC_USBSTS_AS_BITPOS (15)
                            11976 ; 357  |
                            11977 ; 358  |#define HW_ARC_USBSTS_UI_SETMASK (1<<HW_ARC_USBSTS_UI_BITPOS)    
                            11978 ; 359  |#define HW_ARC_USBSTS_UEI_SETMASK (1<<HW_ARC_USBSTS_UEI_BITPOS)
                            11979 ; 360  |#define HW_ARC_USBSTS_PCI_SETMASK (1<<HW_ARC_USBSTS_PCI_BITPOS)
                            11980 ; 361  |#define HW_ARC_USBSTS_FRI_SETMASK (1<<HW_ARC_USBSTS_FRI_BITPOS)
                            11981 ; 362  |#define HW_ARC_USBSTS_SEI_SETMASK (1<<HW_ARC_USBSTS_SEI_BITPOS)
                            11982 ; 363  |#define HW_ARC_USBSTS_AAI_SETMASK (1<<HW_ARC_USBSTS_AAI_BITPOS)
                            11983 ; 364  |#define HW_ARC_USBSTS_URI_SETMASK (1<<HW_ARC_USBSTS_URI_BITPOS)
                            11984 ; 365  |#define HW_ARC_USBSTS_SRI_SETMASK (1<<HW_ARC_USBSTS_SRI_BITPOS)
                            11985 ; 366  |#define HW_ARC_USBSTS_SLI_SETMASK (1<<HW_ARC_USBSTS_SLI_BITPOS)
                            11986 ; 367  |#define HW_ARC_USBSTS_HCH_SETMASK (1<<HW_ARC_USBSTS_HCH_BITPOS)
                            11987 ; 368  |#define HW_ARC_USBSTS_RCL_SETMASK (1<<HW_ARC_USBSTS_RCL_BITPOS)
                            11988 ; 369  |#define HW_ARC_USBSTS_PS_SETMASK (1<<HW_ARC_USBSTS_PS_BITPOS)    
                            11989 ; 370  |#define HW_ARC_USBSTS_AS_SETMASK (1<<HW_ARC_USBSTS_AS_BITPOS)    
                            11990 ; 371  |
                            11991 ; 372  |#define HW_ARC_USBSTS_UI_CLRMASK (~(WORD)HW_ARC_USBSTS_UI_SETMASK)
                            11992 ; 373  |#define HW_ARC_USBSTS_UEI_CLRMASK (~(WORD)HW_ARC_USBSTS_UEI_SETMASK)
                            11993 ; 374  |#define HW_ARC_USBSTS_PCI_CLRMASK (~(WORD)HW_ARC_USBSTS_PCI_SETMASK)
                            11994 ; 375  |#define HW_ARC_USBSTS_FRI_CLRMASK (~(WORD)HW_ARC_USBSTS_FRI_SETMASK)
                            11995 ; 376  |#define HW_ARC_USBSTS_SEI_CLRMASK (~(WORD)HW_ARC_USBSTS_SEI_SETMASK)
                            11996 ; 377  |#define HW_ARC_USBSTS_AAI_CLRMASK (~(WORD)HW_ARC_USBSTS_AAI_SETMASK)
                            11997 ; 378  |#define HW_ARC_USBSTS_URI_CLRMASK (~(WORD)HW_ARC_USBSTS_URI_SETMASK)
                            11998 ; 379  |#define HW_ARC_USBSTS_SRI_CLRMASK (~(WORD)HW_ARC_USBSTS_SRI_SETMASK)
                            11999 ; 380  |#define HW_ARC_USBSTS_SLI_CLRMASK (~(WORD)HW_ARC_USBSTS_SLI_SETMASK)
                            12000 ; 381  |#define HW_ARC_USBSTS_HCH_CLRMASK (~(WORD)HW_ARC_USBSTS_HCH_SETMASK)
                            12001 ; 382  |#define HW_ARC_USBSTS_RCL_CLRMASK (~(WORD)HW_ARC_USBSTS_RCL_SETMASK)
                            12002 ; 383  |#define HW_ARC_USBSTS_PS_CLRMASK (~(WORD)HW_ARC_USBSTS_PS_SETMASK)
                            12003 ; 384  |#define HW_ARC_USBSTS_AS_CLRMASK (~(WORD)HW_ARC_USBSTS_AS_SETMASK)
                            12004 ; 385  |
                            12005 ; 386  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 204

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12006 ; 387  |typedef union               
                            12007 ; 388  |{
                            12008 ; 389  |    struct {
                            12009 ; 390  |        int UI              :1;
                            12010 ; 391  |        int UEI             :1;
                            12011 ; 392  |        int PCI             :1;
                            12012 ; 393  |        int FRI             :1;
                            12013 ; 394  |        int SEI             :1;
                            12014 ; 395  |        int AAI             :1;
                            12015 ; 396  |        int URI             :1;
                            12016 ; 397  |        int STI             :1;
                            12017 ; 398  |        int SLI             :1;
                            12018 ; 399  |        int                 :3;
                            12019 ; 400  |        int HCH             :1;
                            12020 ; 401  |        int RCL             :1;
                            12021 ; 402  |        int PS              :1;
                            12022 ; 403  |        int AS              :1;
                            12023 ; 404  |        int                 :24;
                            12024 ; 405  |    } B;
                            12025 ; 406  |    DWORD I;
                            12026 ; 407  |} usbsts_type;
                            12027 ; 408  |//#define HW_ARC_USBSTS (*(volatile usbsts_type _X*) (HW_ARC_BASEADDR+0x144))    
                            12028 ; 409  |
                            12029 ; 410  |/////////////////////////////////////////////////////////////////////////////////
                            12030 ; 411  |//  USB ARC Register USB Interrupt Enable (HW_ARC_USBINTR)
                            12031 ; 412  |
                            12032 ; 413  |#define HW_ARC_USBINTR_UE_BITPOS (0)
                            12033 ; 414  |#define HW_ARC_USBINTR_UEE_BITPOS (1)
                            12034 ; 415  |#define HW_ARC_USBINTR_PCE_BITPOS (2)
                            12035 ; 416  |#define HW_ARC_USBINTR_FRE_BITPOS (3)
                            12036 ; 417  |#define HW_ARC_USBINTR_SEE_BITPOS (4)
                            12037 ; 418  |#define HW_ARC_USBINTR_AAE_BITPOS (5)
                            12038 ; 419  |#define HW_ARC_USBINTR_URE_BITPOS (6)
                            12039 ; 420  |#define HW_ARC_USBINTR_SRE_BITPOS (7)
                            12040 ; 421  |#define HW_ARC_USBINTR_SLE_BITPOS (8)
                            12041 ; 422  |
                            12042 ; 423  |#define HW_ARC_USBINTR_UE_SETMASK (1<<HW_ARC_USBINTR_UE_BITPOS)   
                            12043 ; 424  |#define HW_ARC_USBINTR_UEE_SETMASK (1<<HW_ARC_USBINTR_UEE_BITPOS)
                            12044 ; 425  |#define HW_ARC_USBINTR_PCE_SETMASK (1<<HW_ARC_USBINTR_PCE_BITPOS)
                            12045 ; 426  |#define HW_ARC_USBINTR_FRE_SETMASK (1<<HW_ARC_USBINTR_FRE_BITPOS)
                            12046 ; 427  |#define HW_ARC_USBINTR_SEE_SETMASK (1<<HW_ARC_USBINTR_SEE_BITPOS)
                            12047 ; 428  |#define HW_ARC_USBINTR_AAE_SETMASK (1<<HW_ARC_USBINTR_AAE_BITPOS)
                            12048 ; 429  |#define HW_ARC_USBINTR_URE_SETMASK (1<<HW_ARC_USBINTR_URE_BITPOS)
                            12049 ; 430  |#define HW_ARC_USBINTR_SRE_SETMASK (1<<HW_ARC_USBINTR_SRE_BITPOS)
                            12050 ; 431  |#define HW_ARC_USBINTR_SLE_SETMASK (1<<HW_ARC_USBINTR_SLE_BITPOS)
                            12051 ; 432  |
                            12052 ; 433  |#define HW_ARC_USBINTR_UE_CLRMASK (~(WORD)HW_ARC_USBINTR_UE_SETMASK)
                            12053 ; 434  |#define HW_ARC_USBINTR_UEE_CLRMASK (~(WORD)HW_ARC_USBINTR_UEE_SETMASK)
                            12054 ; 435  |#define HW_ARC_USBINTR_PCE_CLRMASK (~(WORD)HW_ARC_USBINTR_PCE_SETMASK)
                            12055 ; 436  |#define HW_ARC_USBINTR_FRE_CLRMASK (~(WORD)HW_ARC_USBINTR_FRE_SETMASK)
                            12056 ; 437  |#define HW_ARC_USBINTR_SEE_CLRMASK (~(WORD)HW_ARC_USBINTR_SEE_SETMASK)
                            12057 ; 438  |#define HW_ARC_USBINTR_AAE_CLRMASK (~(WORD)HW_ARC_USBINTR_AAE_SETMASK)
                            12058 ; 439  |#define HW_ARC_USBINTR_URE_CLRMASK (~(WORD)HW_ARC_USBINTR_URE_SETMASK)
                            12059 ; 440  |#define HW_ARC_USBINTR_SRE_CLRMASK (~(WORD)HW_ARC_USBINTR_SRE_SETMASK)
                            12060 ; 441  |#define HW_ARC_USBINTR_SLE_CLRMASK (~(WORD)HW_ARC_USBINTR_SLE_SETMASK)
                            12061 ; 442  |
                            12062 ; 443  |
                            12063 ; 444  |typedef union               
                            12064 ; 445  |{
                            12065 ; 446  |    struct {
                            12066 ; 447  |        int UE              :1;
                            12067 ; 448  |        int UEE             :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 205

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12068 ; 449  |        int PCE             :1;
                            12069 ; 450  |        int FRE             :1;
                            12070 ; 451  |        int SEE             :1;
                            12071 ; 452  |        int AAE             :1;
                            12072 ; 453  |        int URE             :1;
                            12073 ; 454  |        int STE             :1;
                            12074 ; 455  |        int SLE             :1;
                            12075 ; 456  |        int                 :39;
                            12076 ; 457  |    } B;
                            12077 ; 458  |    DWORD I;
                            12078 ; 459  |} usbintr_type;
                            12079 ; 460  |//#define HW_ARC_USBINTR (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x148))    
                            12080 ; 461  |
                            12081 ; 462  |
                            12082 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            12083 ; 464  |//  USB ARC Register USB Device Controller Device Address (HW_ARC_DEVADDR)
                            12084 ; 465  |
                            12085 ; 466  |#define HW_ARC_DEVADDR_ADD_BITPOS (25)
                            12086 ; 467  |
                            12087 ; 468  |#define HW_ARC_DEVADDR_ADD_SETMASK (127<<HW_ARC_DEVADDR_ADD_BITPOS)    
                            12088 ; 469  |
                            12089 ; 470  |#define HW_ARC_DEVEADDR_ADD_CLRMASK (~(WORD)HW_ARC_DEVADDR_ADD_SETMASK)   
                            12090 ; 471  |
                            12091 ; 472  |typedef union               
                            12092 ; 473  |{
                            12093 ; 474  |    struct {
                            12094 ; 475  |        int                 :25;
                            12095 ; 476  |        int ADD             :7;
                            12096 ; 477  |        int                 :16;
                            12097 ; 478  |    } B;
                            12098 ; 479  |    DWORD I;
                            12099 ; 480  |} devaddr_type;
                            12100 ; 481  |//#define HW_ARC_DEVADDR (*(volatile devaddr_type _X*) (HW_ARC_BASEADDR+0x154))    
                            12101 ; 482  |
                            12102 ; 483  |
                            12103 ; 484  |/////////////////////////////////////////////////////////////////////////////////
                            12104 ; 485  |//  USB ARC Register USB Device Controller Endpoint List Address (HW_ARC_ENDPTLISTADDR)
                            12105 ; 486  |
                            12106 ; 487  |#define HW_ARC_ENDPTLISTADDR_ADD_BITPOS (11)
                            12107 ; 488  |
                            12108 ; 489  |#define HW_ARC_ENDPTLISTADDR_ADD_SETMASK (0x400000<<HW_ARC_ENDPTLISTADDR_ADD_BITPOS) 
                            12109 ; 490  |
                            12110 ; 491  |#define HW_ARC_ENDPTLISTADDR_ADD_CLRMASK (~(WORD)HW_ARC_ENDPTLISTADDR_ADD_SETMASK) 
                            12111 ; 492  |
                            12112 ; 493  |typedef union               
                            12113 ; 494  |{
                            12114 ; 495  |    struct {
                            12115 ; 496  |        int                 :10;
                            12116 ; 497  |        int ADD             :22;
                            12117 ; 498  |        int                 :16;
                            12118 ; 499  |    } B;
                            12119 ; 500  |    DWORD I;
                            12120 ; 501  |} endptlistaddr_type;
                            12121 ; 502  |//#define HW_ARC_ENDPTLISTADDR (*(volatile endptlistaddr_type _X*) (HW_ARC_BASEADDR+0x158)
                                  )    
                            12122 ; 503  |
                            12123 ; 504  |
                            12124 ; 505  |/////////////////////////////////////////////////////////////////////////////////
                            12125 ; 506  |//  USB ARC Register USB Port Status Control 1 (HW_ARC_PORTSC1)
                            12126 ; 507  |
                            12127 ; 508  |#define HW_ARC_PORTSC1_CCS_BITPOS (0)
                            12128 ; 509  |#define HW_ARC_PORTSC1_CSC_BITPOS (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 206

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12129 ; 510  |#define HW_ARC_PORTSC1_PE_BITPOS (2)
                            12130 ; 511  |#define HW_ARC_PORTSC1_PEC_BITPOS (3)
                            12131 ; 512  |#define HW_ARC_PORTSC1_OCA_BITPOS (4)
                            12132 ; 513  |#define HW_ARC_PORTSC1_OCC_BITPOS (5)
                            12133 ; 514  |#define HW_ARC_PORTSC1_FPR_BITPOS (6)
                            12134 ; 515  |#define HW_ARC_PORTSC1_SUSP_BITPOS (7)
                            12135 ; 516  |#define HW_ARC_PORTSC1_PR_BITPOS (8)
                            12136 ; 517  |#define HW_ARC_PORTSC1_HSP_BITPOS (9)
                            12137 ; 518  |#define HW_ARC_PORTSC1_LS_BITPOS (10)
                            12138 ; 519  |#define HW_ARC_PORTSC1_PP_BITPOS (12)
                            12139 ; 520  |#define HW_ARC_PORTSC1_PO_BITPOS (13)
                            12140 ; 521  |#define HW_ARC_PORTSC1_PIC_BITPOS (14)
                            12141 ; 522  |#define HW_ARC_PORTSC1_PTC_BITPOS (16)
                            12142 ; 523  |#define HW_ARC_PORTSC1_WKCN_BITPOS (20)
                            12143 ; 524  |#define HW_ARC_PORTSC1_WKDS_BITPOS (21)
                            12144 ; 525  |#define HW_ARC_PORTSC1_WKOC_BITPOS (22)
                            12145 ; 526  |#define HW_ARC_PORTSC1_PHCD_BITPOS (23)
                            12146 ; 527  |#define HW_ARC_PORTSC1_PFSC_BITPOS (24)
                            12147 ; 528  |#define HW_ARC_PORTSC1_PSPD_BITPOS (26)
                            12148 ; 529  |#define HW_ARC_PORTSC1_PTW_BITPOS (29)
                            12149 ; 530  |#define HW_ARC_PORTSC1_STS_BITPOS (30)
                            12150 ; 531  |#define HW_ARC_PORTSC1_PTS_BITPOS (31)
                            12151 ; 532  |
                            12152 ; 533  |#define HW_ARC_PORTSC1_CCS_SETMASK (1<<HW_ARC_PORTSC1_CCS_BITPOS)  
                            12153 ; 534  |#define HW_ARC_PORTSC1_CSC_SETMASK (1<<HW_ARC_PORTSC1_CSC_BITPOS)  
                            12154 ; 535  |#define HW_ARC_PORTSC1_PE_SETMASK (1<<HW_ARC_PORTSC1_PE_BITPOS)   
                            12155 ; 536  |#define HW_ARC_PORTSC1_PEC_SETMASK (1<<HW_ARC_PORTSC1_PEC_BITPOS)  
                            12156 ; 537  |#define HW_ARC_PORTSC1_OCA_SETMASK (1<<HW_ARC_PORTSC1_OCA_BITPOS)  
                            12157 ; 538  |#define HW_ARC_PORTSC1_OCC_SETMASK (1<<HW_ARC_PORTSC1_OCC_BITPOS)  
                            12158 ; 539  |#define HW_ARC_PORTSC1_FPR_SETMASK (1<<HW_ARC_PORTSC1_FPR_BITPOS)  
                            12159 ; 540  |#define HW_ARC_PORTSC1_SUSP_SETMASK (1<<HW_ARC_PORTSC1_SUSP_BITPOS)
                            12160 ; 541  |#define HW_ARC_PORTSC1_PR_SETMASK (1<<HW_ARC_PORTSC1_PR_BITPOS)   
                            12161 ; 542  |#define HW_ARC_PORTSC1_HSP_SETMASK (1<<HW_ARC_PORTSC1_HSP_BITPOS)  
                            12162 ; 543  |#define HW_ARC_PORTSC1_LS_SETMASK (3<<HW_ARC_PORTSC1_LS_BITPOS)   
                            12163 ; 544  |#define HW_ARC_PORTSC1_PP_SETMASK (1<<HW_ARC_PORTSC1_PP_BITPOS)   
                            12164 ; 545  |#define HW_ARC_PORTSC1_PO_SETMASK (1<<HW_ARC_PORTSC1_PO_BITPOS)   
                            12165 ; 546  |#define HW_ARC_PORTSC1_PIC_SETMASK (3<<HW_ARC_PORTSC1_PIC_BITPOS)  
                            12166 ; 547  |#define HW_ARC_PORTSC1_PTC_SETMASK (15<<HW_ARC_PORTSC1_PTC_BITPOS) 
                            12167 ; 548  |#define HW_ARC_PORTSC1_WKCN_SETMASK (1<<HW_ARC_PORTSC1_WKCN_BITPOS)
                            12168 ; 549  |#define HW_ARC_PORTSC1_WKDS_SETMASK (1<<HW_ARC_PORTSC1_WKDS_BITPOS)
                            12169 ; 550  |#define HW_ARC_PORTSC1_WKOC_SETMASK (1<<HW_ARC_PORTSC1_WKOC_BITPOS)
                            12170 ; 551  |#define HW_ARC_PORTSC1_PHCD_SETMASK (1<<HW_ARC_PORTSC1_PHCD_BITPOS)
                            12171 ; 552  |
                            12172 ; 553  |// We need to equate the following label like this due to a sign extension problem
                            12173 ; 554  |// if equated like so (1<<HW_ARC_PORTSC1_PFSC_SETMASK)
                            12174 ; 555  |#define HW_ARC_PORTSC1_PFSC_SETMASK (0x01000000)
                            12175 ; 556  |
                            12176 ; 557  |#define HW_ARC_PORTSC1_PSPD_SETMASK (3<<HW_ARC_PORTSC1_PSPD_BITPOS)
                            12177 ; 558  |#define HW_ARC_PORTSC1_PTW_SETMASK (1<<HW_ARC_PORTSC1_PTW_BITPOS)  
                            12178 ; 559  |#define HW_ARC_PORTSC1_STS_SETMASK (1<<HW_ARC_PORTSC1_STS_BITPOS)  
                            12179 ; 560  |#define HW_ARC_PORTSC1_PTS_SETMASK (1<<HW_ARC_PORTSC1_PTS_BITPOS)  
                            12180 ; 561  |
                            12181 ; 562  |#define HW_ARC_PORTSC1_CCS_CLRMASK (~(WORD)HW_ARC_PORTSC1_CCS_SETMASK)   
                            12182 ; 563  |#define HW_ARC_PORTSC1_CSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_CSC_SETMASK)   
                            12183 ; 564  |#define HW_ARC_PORTSC1_PE_CLRMASK (~(WORD)HW_ARC_PORTSC1_PE_SETMASK)    
                            12184 ; 565  |#define HW_ARC_PORTSC1_PEC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PEC_SETMASK)   
                            12185 ; 566  |#define HW_ARC_PORTSC1_OCA_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCA_SETMASK)   
                            12186 ; 567  |#define HW_ARC_PORTSC1_OCC_CLRMASK (~(WORD)HW_ARC_PORTSC1_OCC_SETMASK)   
                            12187 ; 568  |#define HW_ARC_PORTSC1_FPR_CLRMASK (~(WORD)HW_ARC_PORTSC1_FPR_SETMASK)   
                            12188 ; 569  |#define HW_ARC_PORTSC1_SUSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_SUSP_SETMASK)
                            12189 ; 570  |#define HW_ARC_PORTSC1_PR_CLRMASK (~(WORD)HW_ARC_PORTSC1_PR_SETMASK)    
                            12190 ; 571  |#define HW_ARC_PORTSC1_HSP_CLRMASK (~(WORD)HW_ARC_PORTSC1_HSP_SETMASK)   
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 207

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12191 ; 572  |#define HW_ARC_PORTSC1_LS_CLRMASK (~(WORD)HW_ARC_PORTSC1_LS_SETMASK)    
                            12192 ; 573  |#define HW_ARC_PORTSC1_PP_CLRMASK (~(WORD)HW_ARC_PORTSC1_PP_SETMASK)    
                            12193 ; 574  |#define HW_ARC_PORTSC1_PO_CLRMASK (~(WORD)HW_ARC_PORTSC1_PO_SETMASK)    
                            12194 ; 575  |#define HW_ARC_PORTSC1_PIC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PIC_SETMASK)   
                            12195 ; 576  |#define HW_ARC_PORTSC1_PTC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTC_SETMASK)   
                            12196 ; 577  |#define HW_ARC_PORTSC1_WKCN_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKCN_SETMASK)
                            12197 ; 578  |#define HW_ARC_PORTSC1_WKDS_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKDS_SETMASK)
                            12198 ; 579  |#define HW_ARC_PORTSC1_WKOC_CLRMASK (~(WORD)HW_ARC_PORTSC1_WKOC_SETMASK)
                            12199 ; 580  |#define HW_ARC_PORTSC1_PHCD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PHCD_SETMASK)
                            12200 ; 581  |#define HW_ARC_PORTSC1_PFSC_CLRMASK (~(WORD)HW_ARC_PORTSC1_PFSC_SETMASK)
                            12201 ; 582  |#define HW_ARC_PORTSC1_PSPD_CLRMASK (~(WORD)HW_ARC_PORTSC1_PSPD_SETMASK)
                            12202 ; 583  |#define HW_ARC_PORTSC1_PTW_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTW_SETMASK)   
                            12203 ; 584  |#define HW_ARC_PORTSC1_STS_CLRMASK (~(WORD)HW_ARC_PORTSC1_STS_SETMASK)   
                            12204 ; 585  |#define HW_ARC_PORTSC1_PTS_CLRMASK (~(WORD)HW_ARC_PORTSC1_PTS_SETMASK)   
                            12205 ; 586  |
                            12206 ; 587  |typedef union               
                            12207 ; 588  |{
                            12208 ; 589  |    struct {
                            12209 ; 590  |        int CCS             :1;
                            12210 ; 591  |        int CSC             :1;
                            12211 ; 592  |        int PE              :1;
                            12212 ; 593  |        int PEC             :1;
                            12213 ; 594  |        int OCA             :1;
                            12214 ; 595  |        int OCC             :1;
                            12215 ; 596  |        int FPR             :1;
                            12216 ; 597  |        int SUSP            :1;
                            12217 ; 598  |        int PR              :1;
                            12218 ; 599  |        int HSP             :1;
                            12219 ; 600  |        int LS              :2;
                            12220 ; 601  |        int PP              :1;
                            12221 ; 602  |        int PO              :1;
                            12222 ; 603  |        int PIC             :2;
                            12223 ; 604  |        int PTC             :4;
                            12224 ; 605  |        int WKCN            :1;
                            12225 ; 606  |        int WKDS            :1;
                            12226 ; 607  |        int WKOC            :1;
                            12227 ; 608  |        int PHCD            :1;
                            12228 ; 609  |        int PFSC            :1;
                            12229 ; 610  |        int                 :1;
                            12230 ; 611  |        int PSPD            :2;
                            12231 ; 612  |        int                 :1;
                            12232 ; 613  |        int PTW             :1;
                            12233 ; 614  |        int STS             :1;
                            12234 ; 615  |        int PTS             :1;
                            12235 ; 616  |        int                 :16;
                            12236 ; 617  |    } B;
                            12237 ; 618  |    DWORD I;
                            12238 ; 619  |} portsc1_type;
                            12239 ; 620  |//#define HW_ARC_PORTSC1 (*(volatile portsc1_type _X*) (HW_ARC_BASEADDR+0x184))    
                            12240 ; 621  |
                            12241 ; 622  |
                            12242 ; 623  |/////////////////////////////////////////////////////////////////////////////////
                            12243 ; 624  |//  USB ARC Register USB Device Mode (HW_ARC_USBMODE)
                            12244 ; 625  |
                            12245 ; 626  |#define HW_ARC_USBMODE_CM_BITPOS (0)
                            12246 ; 627  |#define HW_ARC_USBMODE_ES_BITPOS (2)
                            12247 ; 628  |
                            12248 ; 629  |#define HW_ARC_USBMODE_CM_SETMASK (3<<HW_ARC_USBMODE_CM_BITPOS)   
                            12249 ; 630  |#define HW_ARC_USBMODE_ES_SETMASK (1<<HW_ARC_USBMODE_ES_BITPOS)   
                            12250 ; 631  |
                            12251 ; 632  |#define HW_ARC_USBMODE_CM_CLRMASK (~(WORD)HW_ARC_USBMODE_CM_SETMASK) 
                            12252 ; 633  |#define HW_ARC_USBMODE_ES_CLRMASK (~(WORD)HW_ARC_USBMODE_ES_SETMASK)    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 208

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12253 ; 634  |
                            12254 ; 635  |typedef union               
                            12255 ; 636  |{
                            12256 ; 637  |    struct {
                            12257 ; 638  |        int CM              :2;
                            12258 ; 639  |        int ES              :1;
                            12259 ; 640  |        int                 :46;
                            12260 ; 641  |    } B;
                            12261 ; 642  |    DWORD I;
                            12262 ; 643  |} usbmode_type;
                            12263 ; 644  |//#define HW_ARC_USBMODE (*(volatile usbmode_type _X*) (HW_ARC_BASEADDR+0x1a8))    
                            12264 ; 645  |
                            12265 ; 646  |
                            12266 ; 647  |/////////////////////////////////////////////////////////////////////////////////
                            12267 ; 648  |//  The following endpoint equates are common for the following registers
                            12268 ; 649  |
                            12269 ; 650  |#define ENDPOINT0_BITPOS (0)
                            12270 ; 651  |#define ENDPOINT1_BITPOS (1)
                            12271 ; 652  |#define ENDPOINT2_BITPOS (2)
                            12272 ; 653  |#define ENDPOINT3_BITPOS (3)
                            12273 ; 654  |#define ENDPOINT4_BITPOS (4)
                            12274 ; 655  |#define ENDPOINT5_BITPOS (5)
                            12275 ; 656  |#define ENDPOINT6_BITPOS (6)
                            12276 ; 657  |#define ENDPOINT7_BITPOS (7)
                            12277 ; 658  |#define ENDPOINT8_BITPOS (8)
                            12278 ; 659  |#define ENDPOINT9_BITPOS (9)
                            12279 ; 660  |#define ENDPOINT10_BITPOS (10)
                            12280 ; 661  |#define ENDPOINT11_BITPOS (11)
                            12281 ; 662  |#define ENDPOINT12_BITPOS (12)
                            12282 ; 663  |#define ENDPOINT13_BITPOS (13)
                            12283 ; 664  |#define ENDPOINT14_BITPOS (14)
                            12284 ; 665  |#define ENDPOINT15_BITPOS (15)
                            12285 ; 666  |
                            12286 ; 667  |#define ENDPOINT0_SETMASK (1<<ENDPOINT0_BITPOS)
                            12287 ; 668  |#define ENDPOINT1_SETMASK (1<<ENDPOINT1_BITPOS)
                            12288 ; 669  |#define ENDPOINT2_SETMASK (1<<ENDPOINT2_BITPOS)
                            12289 ; 670  |#define ENDPOINT3_SETMASK (1<<ENDPOINT3_BITPOS)
                            12290 ; 671  |#define ENDPOINT4_SETMASK (1<<ENDPOINT4_BITPOS)
                            12291 ; 672  |#define ENDPOINT5_SETMASK (1<<ENDPOINT5_BITPOS)
                            12292 ; 673  |#define ENDPOINT6_SETMASK (1<<ENDPOINT6_BITPOS)
                            12293 ; 674  |#define ENDPOINT7_SETMASK (1<<ENDPOINT7_BITPOS)
                            12294 ; 675  |#define ENDPOINT8_SETMASK (1<<ENDPOINT8_BITPOS)
                            12295 ; 676  |#define ENDPOINT9_SETMASK (1<<ENDPOINT9_BITPOS)
                            12296 ; 677  |#define ENDPOINT10_SETMASK (1<<ENDPOINT10_BITPOS)
                            12297 ; 678  |#define ENDPOINT11_SETMASK (1<<ENDPOINT11_BITPOS)
                            12298 ; 679  |#define ENDPOINT12_SETMASK (1<<ENDPOINT12_BITPOS)
                            12299 ; 680  |#define ENDPOINT13_SETMASK (1<<ENDPOINT13_BITPOS)
                            12300 ; 681  |#define ENDPOINT14_SETMASK (1<<ENDPOINT14_BITPOS)
                            12301 ; 682  |#define ENDPOINT15_SETMASK (1<<ENDPOINT15_BITPOS)
                            12302 ; 683  |
                            12303 ; 684  |#define ENDPOINT0_CLRMASK (~(WORD)ENDPOINT0_SETMASK)    
                            12304 ; 685  |#define ENDPOINT1_CLRMASK (~(WORD)ENDPOINT1_SETMASK)    
                            12305 ; 686  |#define ENDPOINT2_CLRMASK (~(WORD)ENDPOINT2_SETMASK)    
                            12306 ; 687  |#define ENDPOINT3_CLRMASK (~(WORD)ENDPOINT3_SETMASK)    
                            12307 ; 688  |#define ENDPOINT4_CLRMASK (~(WORD)ENDPOINT4_SETMASK)    
                            12308 ; 689  |#define ENDPOINT5_CLRMASK (~(WORD)ENDPOINT5_SETMASK)    
                            12309 ; 690  |#define ENDPOINT6_CLRMASK (~(WORD)ENDPOINT6_SETMASK)    
                            12310 ; 691  |#define ENDPOINT7_CLRMASK (~(WORD)ENDPOINT7_SETMASK)    
                            12311 ; 692  |#define ENDPOINT8_CLRMASK (~(WORD)ENDPOINT8_SETMASK)    
                            12312 ; 693  |#define ENDPOINT9_CLRMASK (~(WORD)ENDPOINT9_SETMASK)    
                            12313 ; 694  |#define ENDPOINT10_CLRMASK (~(WORD)ENDPOINT10_SETMASK)
                            12314 ; 695  |#define ENDPOINT11_CLRMASK (~(WORD)ENDPOINT11_SETMASK)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 209

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12315 ; 696  |#define ENDPOINT12_CLRMASK (~(WORD)ENDPOINT12_SETMASK)
                            12316 ; 697  |#define ENDPOINT13_CLRMASK (~(WORD)ENDPOINT13_SETMASK)
                            12317 ; 698  |#define ENDPOINT14_CLRMASK (~(WORD)ENDPOINT14_SETMASK)
                            12318 ; 699  |#define ENDPOINT15_CLRMASK (~(WORD)ENDPOINT15_SETMASK)
                            12319 ; 700  |
                            12320 ; 701  |typedef union               
                            12321 ; 702  |{
                            12322 ; 703  |    struct {
                            12323 ; 704  |        int EP0              :1;
                            12324 ; 705  |        int EP1              :1;
                            12325 ; 706  |        int EP2              :1;
                            12326 ; 707  |        int EP3              :1;
                            12327 ; 708  |        int EP4              :1;
                            12328 ; 709  |        int EP5              :1;
                            12329 ; 710  |        int EP6              :1;
                            12330 ; 711  |        int EP7              :1;
                            12331 ; 712  |        int EP8              :1;
                            12332 ; 713  |        int EP9              :1;
                            12333 ; 714  |        int EP10             :1;
                            12334 ; 715  |        int EP11             :1;
                            12335 ; 716  |        int EP12             :1;
                            12336 ; 717  |        int EP13             :1;
                            12337 ; 718  |        int EP14             :1;
                            12338 ; 719  |        int EP15             :1;
                            12339 ; 720  |        int                  :32;
                            12340 ; 721  |    } B;
                            12341 ; 722  |    DWORD I;
                            12342 ; 723  |} endpsetupstat_type;
                            12343 ; 724  |
                            12344 ; 725  |//#define HW_ARC_ENDPTSETUPSTAT (*(volatile endpsetupstat_type _X*) (HW_ARC_BASEADDR+0x1ac
                                  ))    
                            12345 ; 726  |
                            12346 ; 727  |typedef union               
                            12347 ; 728  |{
                            12348 ; 729  |    struct {
                            12349 ; 730  |        int EP0              :1;
                            12350 ; 731  |        int EP1              :1;
                            12351 ; 732  |        int EP2              :1;
                            12352 ; 733  |        int EP3              :1;
                            12353 ; 734  |        int EP4              :1;
                            12354 ; 735  |        int EP5              :1;
                            12355 ; 736  |        int EP6              :1;
                            12356 ; 737  |        int EP7              :1;
                            12357 ; 738  |        int EP8              :1;
                            12358 ; 739  |        int EP9              :1;
                            12359 ; 740  |        int EP10             :1;
                            12360 ; 741  |        int EP11             :1;
                            12361 ; 742  |        int EP12             :1;
                            12362 ; 743  |        int EP13             :1;
                            12363 ; 744  |        int EP14             :1;
                            12364 ; 745  |        int EP15             :1;
                            12365 ; 746  |        int                  :8;
                            12366 ; 747  |    } B;
                            12367 ; 748  |    WORD I;
                            12368 ; 749  |} endpt_type;
                            12369 
                            12407 
                            12408 ; 750  |
                            12409 ; 751  |typedef union
                            12410 ; 752  |{
                            12411 ; 753  |   struct {
                            12412 ; 754  |       endpt_type  RX;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 210

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12413 ; 755  |       endpt_type  TX;
                            12414 ; 756  |   } W;
                            12415 ; 757  |   DWORD DW;
                            12416 ; 758  |} endptrxtx_type;
                            12417 ; 759  |
                            12418 ; 760  |//#define HW_ARC_ENDPTPRIME    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b0))   
                                   
                            12419 ; 761  |//#define HW_ARC_ENDPTFLUSH    (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b4))   
                                   
                            12420 ; 762  |//#define HW_ARC_ENDPTSTAT     (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1b8))   
                                   
                            12421 ; 763  |//#define HW_ARC_ENDPTCOMPLETE (*(volatile endptrxtx_type _X*) (HW_ARC_BASEADDR+0x1bc))   
                                   
                            12422 ; 764  |
                            12423 ; 765  |
                            12424 ; 766  |
                            12425 ; 767  |/////////////////////////////////////////////////////////////////////////////////
                            12426 ; 768  |//  USB ARC Register Endpoint control (HW_ARC_ENDPTCTRL)
                            12427 ; 769  |
                            12428 ; 770  |#define HW_ARC_ENDPTCTRL_RXS_BITPOS (0)
                            12429 ; 771  |#define HW_ARC_ENDPTCTRL_RXD_BITPOS (1)
                            12430 ; 772  |#define HW_ARC_ENDPTCTRL_RXT_BITPOS (2)
                            12431 ; 773  |#define HW_ARC_ENDPTCTRL_RXI_BITPOS (5)
                            12432 ; 774  |#define HW_ARC_ENDPTCTRL_RXR_BITPOS (6)
                            12433 ; 775  |#define HW_ARC_ENDPTCTRL_RXE_BITPOS (7)
                            12434 ; 776  |#define HW_ARC_ENDPTCTRL_TXS_BITPOS (16)
                            12435 ; 777  |#define HW_ARC_ENDPTCTRL_TXD_BITPOS (17)
                            12436 ; 778  |#define HW_ARC_ENDPTCTRL_TXT_BITPOS (18)
                            12437 ; 779  |#define HW_ARC_ENDPTCTRL_TXI_BITPOS (21)
                            12438 ; 780  |#define HW_ARC_ENDPTCTRL_TXR_BITPOS (22)
                            12439 ; 781  |#define HW_ARC_ENDPTCTRL_TXE_BITPOS (23)
                            12440 ; 782  |
                            12441 ; 783  |#define HW_ARC_ENDPTCTRL_RXS_SETMASK (1<<HW_ARC_ENDPTCTRL_RXS_BITPOS)
                            12442 ; 784  |#define HW_ARC_ENDPTCTRL_RXD_SETMASK (1<<HW_ARC_ENDPTCTRL_RXD_BITPOS)
                            12443 ; 785  |#define HW_ARC_ENDPTCTRL_RXT_SETMASK (3<<HW_ARC_ENDPTCTRL_RXT_BITPOS)
                            12444 ; 786  |#define HW_ARC_ENDPTCTRL_RXI_SETMASK (1<<HW_ARC_ENDPTCTRL_RXI_BITPOS)
                            12445 ; 787  |#define HW_ARC_ENDPTCTRL_RXR_SETMASK (1<<HW_ARC_ENDPTCTRL_RXR_BITPOS)
                            12446 ; 788  |#define HW_ARC_ENDPTCTRL_RXE_SETMASK (1<<HW_ARC_ENDPTCTRL_RXE_BITPOS)
                            12447 ; 789  |#define HW_ARC_ENDPTCTRL_TXS_SETMASK (1<<HW_ARC_ENDPTCTRL_TXS_BITPOS)
                            12448 ; 790  |#define HW_ARC_ENDPTCTRL_TXD_SETMASK (1<<HW_ARC_ENDPTCTRL_TXD_BITPOS)
                            12449 ; 791  |#define HW_ARC_ENDPTCTRL_TXT_SETMASK (3<<HW_ARC_ENDPTCTRL_TXT_BITPOS)
                            12450 ; 792  |#define HW_ARC_ENDPTCTRL_TXI_SETMASK (1<<HW_ARC_ENDPTCTRL_TXI_BITPOS)
                            12451 ; 793  |#define HW_ARC_ENDPTCTRL_TXR_SETMASK (1<<HW_ARC_ENDPTCTRL_TXR_BITPOS)
                            12452 ; 794  |
                            12453 ; 795  |// We need to equate the following label like this due to a sign extension problem
                            12454 ; 796  |// if equated like so (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            12455 ; 797  |#define HW_ARC_ENDPTCTRL_TXE_SETMASK (0x00800000)
                            12456 ; 798  |//HW_ARC_ENDPTCTRL_TXE_SETMASK    equ     (1<<HW_ARC_ENDPTCTRL_TXE_BITPOS)
                            12457 ; 799  |
                            12458 ; 800  |#define HW_ARC_ENDPTCTRL_RXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXS_SETMASK)
                            12459 ; 801  |#define HW_ARC_ENDPTCTRL_RXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXD_SETMASK)
                            12460 ; 802  |#define HW_ARC_ENDPTCTRL_RXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXT_SETMASK)
                            12461 ; 803  |#define HW_ARC_ENDPTCTRL_RXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXI_SETMASK)
                            12462 ; 804  |#define HW_ARC_ENDPTCTRL_RXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXR_SETMASK)
                            12463 ; 805  |#define HW_ARC_ENDPTCTRL_RXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_RXE_SETMASK)
                            12464 ; 806  |#define HW_ARC_ENDPTCTRL_TXS_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXS_SETMASK)
                            12465 ; 807  |#define HW_ARC_ENDPTCTRL_TXD_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXD_SETMASK)
                            12466 ; 808  |#define HW_ARC_ENDPTCTRL_TXT_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXT_SETMASK)
                            12467 ; 809  |#define HW_ARC_ENDPTCTRL_TXI_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXI_SETMASK)
                            12468 ; 810  |#define HW_ARC_ENDPTCTRL_TXR_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXR_SETMASK)
                            12469 ; 811  |#define HW_ARC_ENDPTCTRL_TXE_CLRMASK (~(WORD)HW_ARC_ENDPTCTRL_TXE_SETMASK)
                            12470 ; 812  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 211

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12471 ; 813  |
                            12472 ; 814  |typedef union               
                            12473 ; 815  |{
                            12474 ; 816  |    struct {
                            12475 ; 817  |        int RXS             :1;
                            12476 ; 818  |        int RXD             :1;
                            12477 ; 819  |        int RXT             :2;
                            12478 ; 820  |        int                 :1;
                            12479 ; 821  |        int RXI             :1;
                            12480 ; 822  |        int RXR             :1;
                            12481 ; 823  |        int RXE             :1;
                            12482 ; 824  |        int                 :8;
                            12483 ; 825  |        int TXS             :1;
                            12484 ; 826  |        int TXD             :1;
                            12485 ; 827  |        int TXT             :2;
                            12486 ; 828  |        int                 :1;
                            12487 ; 829  |        int TXI             :1;
                            12488 ; 830  |        int TXR             :1;
                            12489 ; 831  |        int TXE             :1;
                            12490 ; 832  |        int                 :24;
                            12491 ; 833  |    } B;
                            12492 ; 834  |    DWORD I;
                            12493 ; 835  |} endptctrl_type;
                            12494 ; 836  |//#define HW_ARC_ENDPTCTRL[n] (*(volatile usbintr_type _X*) (HW_ARC_BASEADDR+0x1c0+((n)*4)
                                  ))    
                            12495 ; 837  |
                            12496 ; 838  |#endif
                            12497 ; 839  |
                            12498 ; 840  |
                            12499 
                            12501 
                            12502 ; 37   |#include "regsusb20phy.h"
                            12503 
                            12505 
                            12506 ; 1    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12507 ; 2    |//;  Copyright(C) SigmaTel, Inc. 2002-2005
                            12508 ; 3    |//;  File        : regsusbphy.inc
                            12509 ; 4    |//;  Description : USB20 PHY Register definition
                            12510 ; 5    |//;  Updated 2.23.2003 By M. Henson
                            12511 ; 6    |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12512 ; 7    |
                            12513 ; 8    |// The following naming conventions are followed in this file.
                            12514 ; 9    |// All registers are named using the format...
                            12515 ; 10   |//     HW_<module>_<regname>
                            12516 ; 11   |// where <module> is the module name which can be any of the following...
                            12517 ; 12   |//     USB20
                            12518 ; 13   |// (Note that when there is more than one copy of a particular module, the
                            12519 ; 14   |// module name includes a number starting from 0 for the first instance of
                            12520 ; 15   |// that module)
                            12521 ; 16   |// <regname> is the specific register within that module
                            12522 ; 17   |// We also define the following...
                            12523 ; 18   |//     HW_<module>_<regname>_BITPOS
                            12524 ; 19   |// which defines the starting bit (i.e. LSB) of a multi bit field
                            12525 ; 20   |//     HW_<module>_<regname>_SETMASK
                            12526 ; 21   |// which does something else, and
                            12527 ; 22   |//     HW_<module>_<regname>_CLRMASK
                            12528 ; 23   |// which does something else.
                            12529 ; 24   |// Other rules
                            12530 ; 25   |//     All caps
                            12531 ; 26   |//     Numeric identifiers start at 0
                            12532 ; 27   |
                            12533 ; 28   |#if !(defined(regsusbphyinc))
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 212

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12534 ; 29   |#define regsusbphyinc 1
                            12535 ; 30   |
                            12536 ; 31   |#include "types.h"
                            12537 
                            12539 
                            12540 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            12541 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            12542 ; 3    |//
                            12543 ; 4    |// Filename: types.h
                            12544 ; 5    |// Description: Standard data types
                            12545 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            12546 ; 7    |
                            12547 ; 8    |#ifndef _TYPES_H
                            12548 ; 9    |#define _TYPES_H
                            12549 ; 10   |
                            12550 ; 11   |// TODO:  move this outta here!
                            12551 ; 12   |#if !defined(NOERROR)
                            12552 ; 13   |#define NOERROR 0
                            12553 ; 14   |#define SUCCESS 0
                            12554 ; 15   |#endif 
                            12555 ; 16   |#if !defined(SUCCESS)
                            12556 ; 17   |#define SUCCESS  0
                            12557 ; 18   |#endif
                            12558 ; 19   |#if !defined(ERROR)
                            12559 ; 20   |#define ERROR   -1
                            12560 ; 21   |#endif
                            12561 ; 22   |#if !defined(FALSE)
                            12562 ; 23   |#define FALSE 0
                            12563 ; 24   |#endif
                            12564 ; 25   |#if !defined(TRUE)
                            12565 ; 26   |#define TRUE  1
                            12566 ; 27   |#endif
                            12567 ; 28   |
                            12568 ; 29   |#if !defined(NULL)
                            12569 ; 30   |#define NULL 0
                            12570 ; 31   |#endif
                            12571 ; 32   |
                            12572 ; 33   |#define MAX_INT     0x7FFFFF
                            12573 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            12574 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            12575 ; 36   |#define MAX_ULONG   (-1) 
                            12576 ; 37   |
                            12577 ; 38   |#define WORD_SIZE   24              // word size in bits
                            12578 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            12579 ; 40   |
                            12580 ; 41   |
                            12581 ; 42   |#define BYTE    unsigned char       // btVarName
                            12582 ; 43   |#define CHAR    signed char         // cVarName
                            12583 ; 44   |#define USHORT  unsigned short      // usVarName
                            12584 ; 45   |#define SHORT   unsigned short      // sVarName
                            12585 ; 46   |#define WORD    unsigned int        // wVarName
                            12586 ; 47   |#define INT     signed int          // iVarName
                            12587 ; 48   |#define DWORD   unsigned long       // dwVarName
                            12588 ; 49   |#define LONG    signed long         // lVarName
                            12589 ; 50   |#define BOOL    unsigned int        // bVarName
                            12590 ; 51   |#define FRACT   _fract              // frVarName
                            12591 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            12592 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            12593 ; 54   |#define FLOAT   float               // fVarName
                            12594 ; 55   |#define DBL     double              // dVarName
                            12595 ; 56   |#define ENUM    enum                // eVarName
                            12596 ; 57   |#define CMX     _complex            // cmxVarName
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 213

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12597 ; 58   |typedef WORD UCS3;                   // 
                            12598 ; 59   |
                            12599 ; 60   |#define UINT16  unsigned short
                            12600 ; 61   |#define UINT8   unsigned char   
                            12601 ; 62   |#define UINT32  unsigned long
                            12602 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12603 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            12604 ; 65   |#define WCHAR   UINT16
                            12605 ; 66   |
                            12606 ; 67   |//UINT128 is 16 bytes or 6 words
                            12607 ; 68   |typedef struct UINT128_3500 {   
                            12608 ; 69   |    int val[6];     
                            12609 ; 70   |} UINT128_3500;
                            12610 ; 71   |
                            12611 ; 72   |#define UINT128   UINT128_3500
                            12612 ; 73   |
                            12613 ; 74   |// Little endian word packed byte strings:   
                            12614 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12615 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12616 ; 77   |// Little endian word packed byte strings:   
                            12617 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            12618 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            12619 ; 80   |
                            12620 ; 81   |// Declare Memory Spaces To Use When Coding
                            12621 ; 82   |// A. Sector Buffers
                            12622 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            12623 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            12624 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            12625 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            12626 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            12627 ; 88   |// B. Media DDI Memory
                            12628 ; 89   |#define MEDIA_DDI_MEM _Y
                            12629 ; 90   |
                            12630 ; 91   |
                            12631 ; 92   |
                            12632 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            12633 ; 94   |// Examples of circular pointers:
                            12634 ; 95   |//    INT CIRC cpiVarName
                            12635 ; 96   |//    DWORD CIRC cpdwVarName
                            12636 ; 97   |
                            12637 ; 98   |#define RETCODE INT                 // rcVarName
                            12638 ; 99   |
                            12639 ; 100  |// generic bitfield structure
                            12640 ; 101  |struct Bitfield {
                            12641 ; 102  |    unsigned int B0  :1;
                            12642 ; 103  |    unsigned int B1  :1;
                            12643 ; 104  |    unsigned int B2  :1;
                            12644 ; 105  |    unsigned int B3  :1;
                            12645 ; 106  |    unsigned int B4  :1;
                            12646 ; 107  |    unsigned int B5  :1;
                            12647 ; 108  |    unsigned int B6  :1;
                            12648 ; 109  |    unsigned int B7  :1;
                            12649 ; 110  |    unsigned int B8  :1;
                            12650 ; 111  |    unsigned int B9  :1;
                            12651 ; 112  |    unsigned int B10 :1;
                            12652 ; 113  |    unsigned int B11 :1;
                            12653 ; 114  |    unsigned int B12 :1;
                            12654 ; 115  |    unsigned int B13 :1;
                            12655 ; 116  |    unsigned int B14 :1;
                            12656 ; 117  |    unsigned int B15 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 214

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12657 ; 118  |    unsigned int B16 :1;
                            12658 ; 119  |    unsigned int B17 :1;
                            12659 ; 120  |    unsigned int B18 :1;
                            12660 ; 121  |    unsigned int B19 :1;
                            12661 ; 122  |    unsigned int B20 :1;
                            12662 ; 123  |    unsigned int B21 :1;
                            12663 ; 124  |    unsigned int B22 :1;
                            12664 ; 125  |    unsigned int B23 :1;
                            12665 ; 126  |};
                            12666 ; 127  |
                            12667 ; 128  |union BitInt {
                            12668 ; 129  |        struct Bitfield B;
                            12669 ; 130  |        int        I;
                            12670 ; 131  |};
                            12671 ; 132  |
                            12672 ; 133  |#define MAX_MSG_LENGTH 10
                            12673 ; 134  |struct CMessage
                            12674 ; 135  |{
                            12675 ; 136  |        unsigned int m_uLength;
                            12676 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            12677 ; 138  |};
                            12678 ; 139  |
                            12679 ; 140  |typedef struct {
                            12680 ; 141  |    WORD m_wLength;
                            12681 ; 142  |    WORD m_wMessage;
                            12682 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            12683 ; 144  |} Message;
                            12684 ; 145  |
                            12685 ; 146  |struct MessageQueueDescriptor
                            12686 ; 147  |{
                            12687 ; 148  |        int *m_pBase;
                            12688 ; 149  |        int m_iModulo;
                            12689 ; 150  |        int m_iSize;
                            12690 ; 151  |        int *m_pHead;
                            12691 ; 152  |        int *m_pTail;
                            12692 ; 153  |};
                            12693 ; 154  |
                            12694 ; 155  |struct ModuleEntry
                            12695 ; 156  |{
                            12696 ; 157  |    int m_iSignaledEventMask;
                            12697 ; 158  |    int m_iWaitEventMask;
                            12698 ; 159  |    int m_iResourceOfCode;
                            12699 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            12700 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            12701 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            12702 ; 163  |    int m_uTimeOutHigh;
                            12703 ; 164  |    int m_uTimeOutLow;
                            12704 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            12705 ; 166  |};
                            12706 ; 167  |
                            12707 ; 168  |union WaitMask{
                            12708 ; 169  |    struct B{
                            12709 ; 170  |        unsigned int m_bNone     :1;
                            12710 ; 171  |        unsigned int m_bMessage  :1;
                            12711 ; 172  |        unsigned int m_bTimer    :1;
                            12712 ; 173  |        unsigned int m_bButton   :1;
                            12713 ; 174  |    } B;
                            12714 ; 175  |    int I;
                            12715 ; 176  |} ;
                            12716 ; 177  |
                            12717 ; 178  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 215

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12718 ; 179  |struct Button {
                            12719 ; 180  |        WORD wButtonEvent;
                            12720 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            12721 ; 182  |};
                            12722 ; 183  |
                            12723 ; 184  |struct Message {
                            12724 ; 185  |        WORD wMsgLength;
                            12725 ; 186  |        WORD wMsgCommand;
                            12726 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            12727 ; 188  |};
                            12728 ; 189  |
                            12729 ; 190  |union EventTypes {
                            12730 ; 191  |        struct CMessage msg;
                            12731 ; 192  |        struct Button Button ;
                            12732 ; 193  |        struct Message Message;
                            12733 ; 194  |};
                            12734 ; 195  |
                            12735 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            12736 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            12737 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            12738 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            12739 ; 200  |
                            12740 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            12741 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            12742 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            12743 ; 204  |
                            12744 ; 205  |#if DEBUG
                            12745 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            12746 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            12747 ; 208  |#else 
                            12748 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            12749 ; 210  |#define DebugBuildAssert(x)    
                            12750 ; 211  |#endif
                            12751 ; 212  |
                            12752 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            12753 ; 214  |//  #pragma asm
                            12754 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            12755 ; 216  |//  #pragma endasm
                            12756 ; 217  |
                            12757 ; 218  |
                            12758 ; 219  |#ifdef COLOR_262K
                            12759 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            12760 ; 221  |#elif defined(COLOR_65K)
                            12761 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            12762 ; 223  |#else
                            12763 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            12764 ; 225  |#endif
                            12765 ; 226  |    
                            12766 ; 227  |#endif // #ifndef _TYPES_H
                            12767 
                            12769 
                            12770 ; 32   |
                            12771 ; 33   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12772 ; 34   |//   USB2.0 PHY STMP Registers 
                            12773 ; 35   |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            12774 ; 36   |#define HW_USBPHY_BASEADDR (0xF210)
                            12775 ; 37   |
                            12776 ; 38   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 216

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12777 ; 39   |/////////////////////////////////////////////////////////////////////////////////
                            12778 ; 40   |//  USB PHY Powerdown Register (HW_USBPHYPWD) Bit Definitions
                            12779 ; 41   |
                            12780 ; 42   |#define HW_USBPHYPWD_TXDISCON1500_BITPOS (5)
                            12781 ; 43   |#define HW_USBPHYPWD_PLLVCOPWD_BITPOS (6)
                            12782 ; 44   |#define HW_USBPHYPWD_PLLVCPPWD_BITPOS (7)
                            12783 ; 45   |#define HW_USBPHYPWD_TXPWDFS_BITPOS (10)
                            12784 ; 46   |#define HW_USBPHYPWD_TXPWDIBIAS_BITPOS (11)
                            12785 ; 47   |#define HW_USBPHYPWD_TXPWDV2I_BITPOS (12)
                            12786 ; 48   |#define HW_USBPHYPWD_TXPWDVBG_BITPOS (13)
                            12787 ; 49   |#define HW_USBPHYPWD_TXPWDCOMP_BITPOS (14)
                            12788 ; 50   |#define HW_USBPHYPWD_RXPWDDISCONDET_BITPOS (16)
                            12789 ; 51   |#define HW_USBPHYPWD_RXPWDENV_BITPOS (17)
                            12790 ; 52   |#define HW_USBPHYPWD_RXPWD1PT1_BITPOS (18)
                            12791 ; 53   |#define HW_USBPHYPWD_RXPWDDIFF_BITPOS (19)
                            12792 ; 54   |#define HW_USBPHYPWD_RXPWDRX_BITPOS (20)
                            12793 ; 55   |#define HW_USBPHYPWD_PWDIBIAS_BITPOS (22)
                            12794 ; 56   |#define HW_USBPHYPWD_REGRESET_BITPOS (23)
                            12795 ; 57   |
                            12796 ; 58   |#define HW_USBPHYPWD_TXDISCON1500_SETMASK (1<<HW_USBPHYPWD_TXDISCON1500_BITPOS)
                            12797 ; 59   |#define HW_USBPHYPWD_PLLVCOPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCOPWD_BITPOS)
                            12798 ; 60   |#define HW_USBPHYPWD_PLLVCPPWD_SETMASK (1<<HW_USBPHYPWD_PLLVCPPWD_BITPOS)
                            12799 ; 61   |#define HW_USBPHYPWD_TXPWDFS_SETMASK (1<<HW_USBPHYPWD_TXPWDFS_BITPOS)
                            12800 ; 62   |#define HW_USBPHYPWD_TXPWDIBIAS_SETMASK (1<<HW_USBPHYPWD_TXPWDIBIAS_BITPOS)
                            12801 ; 63   |#define HW_USBPHYPWD_TXPWDV2I_SETMASK (1<<HW_USBPHYPWD_TXPWDV2I_BITPOS)
                            12802 ; 64   |#define HW_USBPHYPWD_TXPWDVBG_SETMASK (1<<HW_USBPHYPWD_TXPWDVBG_BITPOS)
                            12803 ; 65   |#define HW_USBPHYPWD_TXPWDCOMP_SETMASK (1<<HW_USBPHYPWD_TXPWDCOMP_BITPOS)
                            12804 ; 66   |#define HW_USBPHYPWD_RXPWDDISCONDET_SETMASK (1<<HW_USBPHYPWD_RXPWDDISCONDET_BITPOS)
                            12805 ; 67   |#define HW_USBPHYPWD_RXPWDENV_SETMASK (1<<HW_USBPHYPWD_RXPWDENV_BITPOS)
                            12806 ; 68   |#define HW_USBPHYPWD_RXPWD1PT1_SETMASK (1<<HW_USBPHYPWD_RXPWD1PT1_BITPOS)
                            12807 ; 69   |#define HW_USBPHYPWD_RXPWDDIFF_SETMASK (1<<HW_USBPHYPWD_RXPWDDIFF_BITPOS)
                            12808 ; 70   |#define HW_USBPHYPWD_RXPWDRX_SETMASK (1<<HW_USBPHYPWD_RXPWDRX_BITPOS)
                            12809 ; 71   |#define HW_USBPHYPWD_PWDIBIAS_SETMASK (1<<HW_USBPHYPWD_PWDIBIAS_BITPOS)
                            12810 ; 72   |#define HW_USBPHYPWD_REGRESET_SETMASK (1<<HW_USBPHYPWD_REGRESET_BITPOS)
                            12811 ; 73   |
                            12812 ; 74   |#define HW_USBPHYPWD_TXDISCON1500_CLRMASK (~(WORD)HW_USBPHYPWD_TXDISCON1500_SETMASK)
                            12813 ; 75   |#define HW_USBPHYPWD_PLLVCOPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCOPWD_SETMASK)
                            12814 ; 76   |#define HW_USBPHYPWD_PLLVCPPWD_CLRMASK (~(WORD)HW_USBPHYPWD_PLLVCPPWD_SETMASK)
                            12815 ; 77   |#define HW_USBPHYPWD_TXPWDFS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDFS_SETMASK)
                            12816 ; 78   |#define HW_USBPHYPWD_TXPWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDIBIAS_SETMASK)
                            12817 ; 79   |#define HW_USBPHYPWD_TXPWDV2I_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDV2I_SETMASK)
                            12818 ; 80   |#define HW_USBPHYPWD_TXPWDVBG_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDVBG_SETMASK)
                            12819 ; 81   |#define HW_USBPHYPWD_TXPWDCOMP_CLRMASK (~(WORD)HW_USBPHYPWD_TXPWDCOMP_SETMASK)
                            12820 ; 82   |#define HW_USBPHYPWD_RXPWDDISCONDET_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDISCONDET_SETMASK)
                            12821 ; 83   |#define HW_USBPHYPWD_RXPWDENV_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDENV_SETMASK)
                            12822 ; 84   |#define HW_USBPHYPWD_RXPWD1PT1_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWD1PT1_SETMASK)
                            12823 ; 85   |#define HW_USBPHYPWD_RXPWDDIFF_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDDIFF_SETMASK)
                            12824 ; 86   |#define HW_USBPHYPWD_RXPWDRX_CLRMASK (~(WORD)HW_USBPHYPWD_RXPWDRX_SETMASK)
                            12825 ; 87   |#define HW_USBPHYPWD_PWDIBIAS_CLRMASK (~(WORD)HW_USBPHYPWD_PWDIBIAS_SETMASK)
                            12826 ; 88   |#define HW_USBPHYPWD_REGRESET_CLRMASK (~(WORD)HW_USBPHYPWD_REGRESET_SETMASK)
                            12827 ; 89   |
                            12828 ; 90   |typedef union               
                            12829 ; 91   |{
                            12830 ; 92   |    struct {
                            12831 ; 93   |        int RSVD0          :5;
                            12832 ; 94   |        int TXDISCON1500   :1;
                            12833 ; 95   |        int PLLVCOPWD      :1;
                            12834 ; 96   |        int PLLVCPPWD      :1;
                            12835 ; 97   |        int RSVD1          :2;
                            12836 ; 98   |        int TXPWDFS        :1;
                            12837 ; 99   |        int TXPWDIBIAS     :1;
                            12838 ; 100  |        int TXPWDV2I       :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 217

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12839 ; 101  |        int TXPWDVBG       :1;
                            12840 ; 102  |        int TXPWDCOMP      :1;
                            12841 ; 103  |        int RSVD2          :1;
                            12842 ; 104  |        int RXPWDDISCONDET :1;
                            12843 ; 105  |        int RXPWDENV       :1;
                            12844 ; 106  |        int RXPWD1PT1      :1;
                            12845 ; 107  |        int RXPWDDIFF      :1;
                            12846 ; 108  |        int RXPWDRX        :1;
                            12847 ; 109  |        int RSVD3          :1;
                            12848 ; 110  |        int PWDIBIAS       :1;
                            12849 ; 111  |        int REGRESET       :1;
                            12850 ; 112  |    } B;
                            12851 ; 113  |    int I;
                            12852 ; 114  |} usbphypwd_type;
                            12853 ; 115  |#define HW_USBPHYPWD      (*(volatile usbphypwd_type _X*) (HW_USBPHY_BASEADDR))    /* USB 
                                  PHY Powerdown Register */
                            12854 ; 116  |
                            12855 ; 117  |/////////////////////////////////////////////////////////////////////////////////
                            12856 ; 118  |//  USB PHY Transmit register (HW_USBPHYTX) Bit Definitions
                            12857 ; 119  |#define HW_USBPHYTX_TXCAL1500_BITPOS (0)
                            12858 ; 120  |#define HW_USBPHYTX_TXENCAL1500_BITPOS (5)
                            12859 ; 121  |#define HW_USBPHYTX_TXHSXCVR_BITPOS (6)
                            12860 ; 122  |#define HW_USBPHYTX_TXCALIBRATE_BITPOS (7)
                            12861 ; 123  |#define HW_USBPHYTX_TXCAL45DN_BITPOS (8)
                            12862 ; 124  |#define HW_USBPHYTX_TXENCAL45DN_BITPOS (13)
                            12863 ; 125  |#define HW_USBPHYTX_TXHSTERM_BITPOS (14)
                            12864 ; 126  |#define HW_USBPHYTX_TXSKEW_BITPOS (15)
                            12865 ; 127  |#define HW_USBPHYTX_TXCAL45DP_BITPOS (16)
                            12866 ; 128  |#define HW_USBPHYTX_TXENCAL45DP_BITPOS (21)
                            12867 ; 129  |#define HW_USBPHYTX_TXFSHIZ_BITPOS (22)
                            12868 ; 130  |#define HW_USBPHYTX_TXCOMPOUT_BITPOS (23)
                            12869 ; 131  |
                            12870 ; 132  |#define HW_USBPHYTX_TXCAL1500_WIDTH (4)
                            12871 ; 133  |#define HW_USBPHYTX_TXENCAL1500_WIDTH (1)
                            12872 ; 134  |#define HW_USBPHYTX_TXHSXCVR_WIDTH (1)
                            12873 ; 135  |#define HW_USBPHYTX_TXCALIBRATE_WIDTH (1)
                            12874 ; 136  |#define HW_USBPHYTX_TXCAL45DN_WIDTH (4)
                            12875 ; 137  |#define HW_USBPHYTX_TXENCAL45DN_WIDTH (1)
                            12876 ; 138  |#define HW_USBPHYTX_TXHSTERM_WIDTH (1)
                            12877 ; 139  |#define HW_USBPHYTX_TXSKEW_WIDTH (1)
                            12878 ; 140  |#define HW_USBPHYTX_TXCAL45DP_WIDTH (4)
                            12879 ; 141  |#define HW_USBPHYTX_TXENCAL45DP_WIDTH (1)
                            12880 ; 142  |#define HW_USBPHYTX_TXFSHIZ_WIDTH (1)
                            12881 ; 143  |#define HW_USBPHYTX_TXCOMPOUT_WIDTH (1)
                            12882 ; 144  |
                            12883 ; 145  |#define HW_USBPHYTX_TXCAL1500_SETMASK (((1<<HW_USBPHYTX_TXCAL1500_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL1500_BITPOS)
                            12884 ; 146  |#define HW_USBPHYTX_TXENCAL1500_SETMASK (((1<<HW_USBPHYTX_TXENCAL1500_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL1500_BITPOS)
                            12885 ; 147  |#define HW_USBPHYTX_TXHSXCVR_SETMASK (((1<<HW_USBPHYTX_TXHSXCVR_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  SXCVR_BITPOS)
                            12886 ; 148  |#define HW_USBPHYTX_TXCALIBRATE_SETMASK (((1<<HW_USBPHYTX_TXCALIBRATE_WIDTH)-1)<<HW_USBPHY
                                  TX_TXCALIBRATE_BITPOS)
                            12887 ; 149  |#define HW_USBPHYTX_TXCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXCAL45DN_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DN_BITPOS)
                            12888 ; 150  |#define HW_USBPHYTX_TXENCAL45DN_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DN_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DN_BITPOS)
                            12889 ; 151  |#define HW_USBPHYTX_TXHSTERM_SETMASK (((1<<HW_USBPHYTX_TXHSTERM_WIDTH)-1)<<HW_USBPHYTX_TXH
                                  STERM_BITPOS)
                            12890 ; 152  |#define HW_USBPHYTX_TXSKEW_SETMASK (((1<<HW_USBPHYTX_TXSKEW_WIDTH)-1)<<HW_USBPHYTX_TXSKEW_
                                  BITPOS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 218

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12891 ; 153  |#define HW_USBPHYTX_TXCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXCAL45DP_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCAL45DP_BITPOS)
                            12892 ; 154  |#define HW_USBPHYTX_TXENCAL45DP_SETMASK (((1<<HW_USBPHYTX_TXENCAL45DP_WIDTH)-1)<<HW_USBPHY
                                  TX_TXENCAL45DP_BITPOS)
                            12893 ; 155  |#define HW_USBPHYTX_TXFSHIZ_SETMASK (((1<<HW_USBPHYTX_TXFSHIZ_WIDTH)-1)<<HW_USBPHYTX_TXFSH
                                  IZ_BITPOS)
                            12894 ; 156  |#define HW_USBPHYTX_TXCOMPOUT_SETMASK (((1<<HW_USBPHYTX_TXCOMPOUT_WIDTH)-1)<<HW_USBPHYTX_T
                                  XCOMPOUT_BITPOS)
                            12895 ; 157  |
                            12896 ; 158  |#define HW_USBPHYTX_TXCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL1500_SETMASK)
                            12897 ; 159  |#define HW_USBPHYTX_TXENCAL1500_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL1500_SETMASK)
                            12898 ; 160  |#define HW_USBPHYTX_TXHSXCVR_CLRMASK (~(WORD)HW_USBPHYTX_TXHSXCVR_SETMASK)
                            12899 ; 161  |#define HW_USBPHYTX_TXCALIBRATE_CLRMASK (~(WORD)HW_USBPHYTX_TXCALIBRATE_SETMASK)
                            12900 ; 162  |#define HW_USBPHYTX_TXCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DN_SETMASK)
                            12901 ; 163  |#define HW_USBPHYTX_TXENCAL45DN_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DN_SETMASK)
                            12902 ; 164  |#define HW_USBPHYTX_TXHSTERM_CLRMASK (~(WORD)HW_USBPHYTX_TXHSTERM_SETMASK)
                            12903 ; 165  |#define HW_USBPHYTX_TXSKEW_CLRMASK (~(WORD)HW_USBPHYTX_TXSKEW_SETMASK)
                            12904 ; 166  |#define HW_USBPHYTX_TXCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXCAL45DP_SETMASK)
                            12905 ; 167  |#define HW_USBPHYTX_TXENCAL45DP_CLRMASK (~(WORD)HW_USBPHYTX_TXENCAL45DP_SETMASK)
                            12906 ; 168  |#define HW_USBPHYTX_TXFSHIZ_CLRMASK (~(WORD)HW_USBPHYTX_TXFSHIZ_SETMASK)
                            12907 ; 169  |#define HW_USBPHYTX_TXCOMPOUT_CLRMASK (~(WORD)HW_USBPHYTX_TXCOMPOUT_SETMASK)
                            12908 ; 170  |
                            12909 ; 171  |typedef union               
                            12910 ; 172  |{
                            12911 ; 173  |    struct {
                            12912 ; 174  |        int TXCAL1500          :4;
                            12913 ; 175  |        int RSVD0              :1;
                            12914 ; 176  |        int TXENCAL1500        :1;
                            12915 ; 177  |        int TXHSXCVR           :1;
                            12916 ; 178  |        int TXCALIBRATE        :1;
                            12917 ; 179  |        int TXCAL45DN          :4;
                            12918 ; 180  |        int RSVD1              :1;
                            12919 ; 181  |        int TXENCAL45DN        :1;
                            12920 ; 182  |        int TXHSTERM           :1;
                            12921 ; 183  |        int TXSKEW             :1;
                            12922 ; 184  |        int TXCAL45DP          :4;
                            12923 ; 185  |        int RSVD2              :1;
                            12924 ; 186  |        int TXENCAL45DP        :1;
                            12925 ; 187  |        int TXFSHIZ            :1;
                            12926 ; 188  |        int TXCOMPOUT          :1;
                            12927 ; 189  |    } B;
                            12928 ; 190  |    int I;
                            12929 ; 191  |} usbphytx_type;
                            12930 ; 192  |#define HW_USBPHYTX      (*(volatile usbphytx_type _X*) (HW_USBPHY_BASEADDR+1))    
                            12931 ; 193  |
                            12932 ; 194  |/////////////////////////////////////////////////////////////////////////////////
                            12933 ; 195  |//  USB PHY PLL register (HW_USBPHYPLL) Bit Definitions
                            12934 ; 196  |#define HW_USBPHYPLL_PLLV2ISEL_BITPOS (0)
                            12935 ; 197  |#define HW_USBPHYPLL_PLLCPDBLIP_BITPOS (5)
                            12936 ; 198  |#define HW_USBPHYPLL_PLLVCOCLK2_BITPOS (6)
                            12937 ; 199  |#define HW_USBPHYPLL_PLLVCOCLK24_BITPOS (7)
                            12938 ; 200  |#define HW_USBPHYPLL_PLLCPNSEL_BITPOS (8)
                            12939 ; 201  |#define HW_USBPHYPLL_PLLCLKDIVSEL_BITPOS (12)
                            12940 ; 202  |#define HW_USBPHYPLL_PLLPFDRST_BITPOS (20)
                            12941 ; 203  |#define HW_USBPHYPLL_PLLCPSHORTLFR_BITPOS (21)
                            12942 ; 204  |#define HW_USBPHYPLL_PLLVCOKSTART_BITPOS (22)
                            12943 ; 205  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_BITPOS (23)
                            12944 ; 206  |
                            12945 ; 207  |#define HW_USBPHYPLL_PLLV2ISEL_WIDTH (4)
                            12946 ; 208  |#define HW_USBPHYPLL_PLLCPDBLIP_WIDTH (1)
                            12947 ; 209  |#define HW_USBPHYPLL_PLLVCOCLK2_WIDTH (1)
                            12948 ; 210  |#define HW_USBPHYPLL_PLLVCOCLK24_WIDTH (1)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 219

M:ADDR CODE           CYCLES LINE SOURCELINE
                            12949 ; 211  |#define HW_USBPHYPLL_PLLCPNSEL_WIDTH (4)
                            12950 ; 212  |#define HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH (4)
                            12951 ; 213  |#define HW_USBPHYPLL_PLLPFDRST_WIDTH (1)
                            12952 ; 214  |#define HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH (1)
                            12953 ; 215  |#define HW_USBPHYPLL_PLLVCOKSTART_WIDTH (1)
                            12954 ; 216  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH (1)
                            12955 ; 217  |
                            12956 ; 218  |#define HW_USBPHYPLL_PLLV2ISEL_SETMASK (((1<<HW_USBPHYPLL_PLLV2ISEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLV2ISEL_BITPOS)
                            12957 ; 219  |#define HW_USBPHYPLL_PLLCPDBLIP_SETMASK (((1<<HW_USBPHYPLL_PLLCPDBLIP_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLCPDBLIP_BITPOS)
                            12958 ; 220  |#define HW_USBPHYPLL_PLLVCOCLK2_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK2_WIDTH)-1)<<HW_USBPHY
                                  PLL_PLLVCOCLK2_BITPOS)
                            12959 ; 221  |#define HW_USBPHYPLL_PLLVCOCLK24_SETMASK (((1<<HW_USBPHYPLL_PLLVCOCLK24_WIDTH)-1)<<HW_USBP
                                  HYPLL_PLLVCOCLK24_BITPOS)
                            12960 ; 222  |#define HW_USBPHYPLL_PLLCPNSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCPNSEL_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLCPNSEL_BITPOS)
                            12961 ; 223  |#define HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVSEL_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLCLKDIVSEL_BITPOS)
                            12962 ; 224  |#define HW_USBPHYPLL_PLLPFDRST_SETMASK (((1<<HW_USBPHYPLL_PLLPFDRST_WIDTH)-1)<<HW_USBPHYPL
                                  L_PLLPFDRST_BITPOS)
                            12963 ; 225  |#define HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK (((1<<HW_USBPHYPLL_PLLCPSHORTLFR_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCPSHORTLFR_BITPOS)
                            12964 ; 226  |#define HW_USBPHYPLL_PLLVCOKSTART_SETMASK (((1<<HW_USBPHYPLL_PLLVCOKSTART_WIDTH)-1)<<HW_US
                                  BPHYPLL_PLLVCOKSTART_BITPOS)
                            12965 ; 227  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK (((1<<HW_USBPHYPLL_PLLCLKDIVRSTZ_WIDTH)-1)<<HW_
                                  USBPHYPLL_PLLCLKDIVRSTZ_BITPOS)
                            12966 ; 228  |
                            12967 ; 229  |#define HW_USBPHYPLL_PLLV2ISEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLV2ISEL_SETMASK)
                            12968 ; 230  |#define HW_USBPHYPLL_PLLCPDBLIP_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPDBLIP_SETMASK)
                            12969 ; 231  |#define HW_USBPHYPLL_PLLVCOCLK2_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK2_SETMASK)
                            12970 ; 232  |#define HW_USBPHYPLL_PLLVCOCLK24_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOCLK24_SETMASK)
                            12971 ; 233  |#define HW_USBPHYPLL_PLLCPNSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPNSEL_SETMASK)
                            12972 ; 234  |#define HW_USBPHYPLL_PLLCLKDIVSEL_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVSEL_SETMASK)
                            12973 ; 235  |#define HW_USBPHYPLL_PLLPFDRST_CLRMASK (~(WORD)HW_USBPHYPLL_PLLPFDRST_SETMASK)
                            12974 ; 236  |#define HW_USBPHYPLL_PLLCPSHORTLFR_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCPSHORTLFR_SETMASK)
                            12975 ; 237  |#define HW_USBPHYPLL_PLLVCOKSTART_CLRMASK (~(WORD)HW_USBPHYPLL_PLLVCOKSTART_SETMASK)
                            12976 ; 238  |#define HW_USBPHYPLL_PLLCLKDIVRSTZ_CLRMASK (~(WORD)HW_USBPHYPLL_PLLCLKDIVRSTZ_SETMASK)
                            12977 ; 239  |
                            12978 ; 240  |typedef union               
                            12979 ; 241  |{
                            12980 ; 242  |    struct {
                            12981 ; 243  |        int PLLV2ISEL        :4;
                            12982 ; 244  |        int RSVD0            :1;
                            12983 ; 245  |        int PLLCPDBLIP       :1;
                            12984 ; 246  |        int PLLVCOCLK2       :1;
                            12985 ; 247  |        int PLLVCOCLK24      :1;
                            12986 ; 248  |        int PLLCPNSEL        :4;
                            12987 ; 249  |        int PLLCLKDIVSEL     :4;
                            12988 ; 250  |        int RSVD1            :4;
                            12989 ; 251  |        int PLLPFDRST        :1;
                            12990 ; 252  |        int PLLCPSHORTLFR    :1;
                            12991 ; 253  |        int PLLVCOKSTART     :1;
                            12992 ; 254  |        int PLLCLKDIVRSTZ    :1;
                            12993 ; 255  |    } B;
                            12994 ; 256  |    int I;
                            12995 ; 257  |} usbphypll_type;
                            12996 ; 258  |#define HW_USBPHYPLL      (*(volatile usbphypll_type _X*) (HW_USBPHY_BASEADDR+2))    
                            12997 ; 259  |
                            12998 ; 260  |/////////////////////////////////////////////////////////////////////////////////
                            12999 ; 261  |//  USB PHY PLL register (HW_USBPHYRX) Bit Definitions
                            13000 ; 262  |#define HW_USBRX_ENVADJ_BITPOS (0)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 220

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13001 ; 263  |#define HW_USBRX_DISCONADJ_BITPOS (4)
                            13002 ; 264  |#define HW_USBRX_DEBUGMODE_BITPOS (8)
                            13003 ; 265  |#define HW_USBRX_PLLLKTIMECTL_BITPOS (12)
                            13004 ; 266  |#define HW_USBRX_PLLCKDIVCTL_BITPOS (16)
                            13005 ; 267  |#define HW_USBRX_HOSTMODETEST_BITPOS (20)
                            13006 ; 268  |#define HW_USBRX_FSCKSOURCESEL_BITPOS (21)
                            13007 ; 269  |#define HW_USBRX_REGRXDBYPASS_BITPOS (22)
                            13008 ; 270  |#define HW_USBRX_PLLLOCKED_BITPOS (23)
                            13009 ; 271  |
                            13010 ; 272  |#define HW_USBRX_ENVADJ_WIDTH (4)
                            13011 ; 273  |#define HW_USBRX_DISCONADJ_WIDTH (4)
                            13012 ; 274  |#define HW_USBRX_DEBUGMODE_WIDTH (4)
                            13013 ; 275  |#define HW_USBRX_PLLLKTIMECTL_WIDTH (4)
                            13014 ; 276  |#define HW_USBRX_PLLCKDIVCTL_WIDTH (4)
                            13015 ; 277  |#define HW_USBRX_HOSTMODETEST_WIDTH (1)
                            13016 ; 278  |#define HW_USBRX_FSCKSOURCESEL_WIDTH (1)
                            13017 ; 279  |#define HW_USBRX_REGRXDBYPASS_WIDTH (1)
                            13018 ; 280  |#define HW_USBRX_PLLLOCKED_WIDTH (1)
                            13019 ; 281  |
                            13020 ; 282  |#define HW_USBRX_ENVADJ_SETMASK (((1<<HW_USBRX_ENVADJ_WIDTH)-1)<<HW_USBRX_ENVADJ_BITPOS)
                            13021 ; 283  |#define HW_USBRX_DISCONADJ_SETMASK (((1<<HW_USBRX_DISCONADJ_WIDTH)-1)<<HW_USBRX_DISCONADJ_
                                  BITPOS)
                            13022 ; 284  |#define HW_USBRX_DEBUGMODE_SETMASK (((1<<HW_USBRX_DEBUGMODE_WIDTH)-1)<<HW_USBRX_DEBUGMODE_
                                  BITPOS)
                            13023 ; 285  |#define HW_USBRX_PLLLKTIMECTL_SETMASK (((1<<HW_USBRX_PLLLKTIMECTL_WIDTH)-1)<<HW_USBRX_PLLL
                                  KTIMECTL_BITPOS)
                            13024 ; 286  |#define HW_USBRX_PLLCKDIVCTL_SETMASK (((1<<HW_USBRX_PLLCKDIVCTL_WIDTH)-1)<<HW_USBRX_PLLCKD
                                  IVCTL_BITPOS)
                            13025 ; 287  |// 480 MHz PLL is divided by named number here. Setmask divider field nibble of 7 gives ac
                                  tual divider of 8 and so on. (8 gives 9, 9 gives 10)
                            13026 ; 288  |//              480Mhz/7 =68.57Mhz
                            13027 ; 289  |#define HW_USBPHYRX_PLLDIV_BY_7 0x060000
                            13028 ; 290  |
                            13029 ; 291  |//              480Mhz/8 ~60Mhz
                            13030 ; 292  |#define HW_USBPHYRX_PLLDIV_BY_8 0x070000
                            13031 ; 293  |
                            13032 ; 294  |//              480Mhz/9 =53.3Mhz
                            13033 ; 295  |#define HW_USBPHYRX_PLLDIV_BY_9 0x080000
                            13034 ; 296  |
                            13035 ; 297  |//              480Mhz/10 =48Mhz
                            13036 ; 298  |#define HW_USBPHYRX_PLLDIV_BY_10 0x090000
                            13037 ; 299  |
                            13038 ; 300  |
                            13039 ; 301  |#define HW_USBRX_HOSTMODETEST_SETMASK (((1<<HW_USBRX_HOSTMODETEST_WIDTH)-1)<<HW_USBRX_HOST
                                  MODETEST_BITPOS)
                            13040 ; 302  |#define HW_USBRX_FSCKSOURCESEL_SETMASK (((1<<HW_USBRX_FSCKSOURCESEL_WIDTH)-1)<<HW_USBRX_FS
                                  CKSOURCESEL_BITPOS)
                            13041 ; 303  |#define HW_USBRX_REGRXDBYPASS_SETMASK (((1<<HW_USBRX_REGRXDBYPASS_WIDTH)-1)<<HW_USBRX_REGR
                                  XDBYPASS_BITPOS)
                            13042 ; 304  |#define HW_USBRX_PLLLOCKED_SETMASK (((1<<HW_USBRX_PLLLOCKED_WIDTH)-1)<<HW_USBRX_PLLLOCKED_
                                  BITPOS)
                            13043 ; 305  |
                            13044 ; 306  |#define HW_USBRX_ENVADJ_CLRMASK (~(WORD)HW_USBRX_ENVADJ_SETMASK)
                            13045 ; 307  |#define HW_USBRX_DISCONADJ_CLRMASK (~(WORD)HW_USBRX_DISCONADJ_SETMASK)
                            13046 ; 308  |#define HW_USBRX_DEBUGMODE_CLRMASK (~(WORD)HW_USBRX_DEBUGMODE_SETMASK)
                            13047 ; 309  |#define HW_USBRX_PLLLKTIMECTL_CLRMASK (~(WORD)HW_USBRX_PLLLKTIMECTL_SETMASK)
                            13048 ; 310  |#define HW_USBRX_PLLCKDIVCTL_CLRMASK (~(WORD)HW_USBRX_PLLCKDIVCTL_SETMASK)
                            13049 ; 311  |#define HW_USBRX_HOSTMODETEST_CLRMASK (~(WORD)HW_USBRX_HOSTMODETEST_SETMASK)
                            13050 ; 312  |#define HW_USBRX_FSCKSOURCESEL_CLRMASK (~(WORD)HW_USBRX_FSCKSOURCESEL_SETMASK)
                            13051 ; 313  |#define HW_USBRX_REGRXDBYPASS_CLRMASK (~(WORD)HW_USBRX_REGRXDBYPASS_SETMASK)
                            13052 ; 314  |#define HW_USBRX_PLLLOCKED_CLRMASK (~(WORD)HW_USBRX_PLLLOCKED_SETMASK)
                            13053 ; 315  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 221

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13054 ; 316  |typedef union               
                            13055 ; 317  |{
                            13056 ; 318  |    struct {
                            13057 ; 319  |     int ENVADJ               :4;
                            13058 ; 320  |     int DISCONADJ            :4;
                            13059 ; 321  |     int DEBUGMODE            :4;
                            13060 ; 322  |     int PLLLKTIMECTL         :4;
                            13061 ; 323  |     int PLLCKDIVCTL          :4;
                            13062 ; 324  |     int HOSTMODETEST         :1;
                            13063 ; 325  |     int FSCKSOURCESEL        :1;
                            13064 ; 326  |     int REGRXDBYPASS         :1;
                            13065 ; 327  |     int PLLLOCKED            :1;
                            13066 ; 328  |    } B;
                            13067 ; 329  |    int I;
                            13068 ; 330  |} usbphyrx_type;
                            13069 ; 331  |#define HW_USBPHYRX      (*(volatile usbphyrx_type _X*) (HW_USBPHY_BASEADDR+3))    
                            13070 ; 332  |
                            13071 ; 333  |#endif
                            13072 ; 334  |
                            13073 
                            13075 
                            13076 ; 38   |
                            13077 ; 39   |
                            13078 ; 40   |#endif // if (!@def(hwequ))
                            13079 ; 41   |
                            13080 
                            13082 
                            13083 ; 12   |#else 
                            13084 ; 13   |//include "regscodec.inc"
                            13085 ; 14   |#endif
                            13086 ; 15   |
                            13087 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            13088 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            13089 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            13090 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
                            13091 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            13092 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            13093 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            13094 ; 23   |
                            13095 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            13096 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            13097 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            13098 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            13099 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            13100 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            13101 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            13102 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                            13103 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            13104 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            13105 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            13106 ; 35   |
                            13107 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            13108 ; 37   |// MEDIA DEFINITIONS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 222

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13109 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            13110 ; 39   |
                            13111 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            13112 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            13113 ; 42   |#if defined(NAND1)
                            13114 ; 43   |#define SM_INTERNAL_CHIPS 1
                            13115 ; 44   |#else 
                            13116 ; 45   |#if defined(NAND2)
                            13117 ; 46   |#define SM_INTERNAL_CHIPS 2
                            13118 ; 47   |#else 
                            13119 ; 48   |#if defined(NAND3)
                            13120 ; 49   |#define SM_INTERNAL_CHIPS 3
                            13121 ; 50   |#else 
                            13122 ; 51   |#if defined(NAND4)
                            13123 ; 52   |#define SM_INTERNAL_CHIPS 4
                            13124 ; 53   |#else 
                            13125 ; 54   |#define SM_INTERNAL_CHIPS 1
                            13126 ; 55   |#endif
                            13127 ; 56   |#endif
                            13128 ; 57   |#endif
                            13129 ; 58   |#endif
                            13130 ; 59   |
                            13131 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            13132 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            13133 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            13134 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            13135 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            13136 ; 65   |//*** comment out if active high ****
                            13137 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            13138 ; 67   |
                            13139 ; 68   |#if defined(SMEDIA)
                            13140 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            13141 ; 70   |#define NUM_SM_EXTERNAL 1
                            13142 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            13143 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            13144 ; 73   |#else 
                            13145 ; 74   |#if defined(MMC)
                            13146 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            13147 ; 76   |#define NUM_SM_EXTERNAL 0
                            13148 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            13149 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            13150 ; 79   |#else 
                            13151 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            13152 ; 81   |#define NUM_SM_EXTERNAL 0
                            13153 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            13154 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            13155 ; 84   |#endif
                            13156 ; 85   |#endif
                            13157 ; 86   |
                            13158 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            13159 ; 88   |// Mass Storage Class definitions
                            13160 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            13161 ; 90   |// Set to 0 if Composite Device build is desired.    
                            13162 ; 91   |#define MULTI_LUN_BUILD 1   
                            13163 ; 92   |
                            13164 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            13165 ; 94   |//  SCSI
                            13166 ; 95   |#if (MULTI_LUN_BUILD==0)
                            13167 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            13168 ; 97   |    #define SCSI_NUM_TARGETS                        2
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 223

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13169 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            13170 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            13171 ; 100  |  #else
                            13172 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            13173 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            13174 ; 103  |  #endif
                            13175 ; 104  |#else
                            13176 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            13177 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            13178 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            13179 ; 108  |  #else
                            13180 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            13181 ; 110  |  #endif
                            13182 ; 111  |#endif
                            13183 ; 112  |
                            13184 ; 113  |
                            13185 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            13186 ; 115  |
                            13187 ; 116  |
                            13188 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            13189 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            13190 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            13191 ; 120  |#ifdef MMC
                            13192 ; 121  |#ifdef MTP_BUILD
                            13193 ; 122  |// --------------------
                            13194 ; 123  |// MTP and MMC
                            13195 ; 124  |// --------------------
                            13196 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            13197 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            13198 ; 127  |#else  // ifndef MTP_BUILD
                            13199 ; 128  |#ifdef STMP_BUILD_PLAYER
                            13200 ; 129  |// --------------------
                            13201 ; 130  |// Player and MMC
                            13202 ; 131  |// --------------------
                            13203 ; 132  |#else
                            13204 ; 133  |// --------------------
                            13205 ; 134  |// USBMSC and MMC
                            13206 ; 135  |// --------------------
                            13207 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            13208 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            13209 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            13210 ; 139  |#endif // ifdef MTP_BUILD
                            13211 ; 140  |#else  // ifndef MMC
                            13212 ; 141  |#ifdef MTP_BUILD
                            13213 ; 142  |// --------------------
                            13214 ; 143  |// MTP and NAND only
                            13215 ; 144  |// --------------------
                            13216 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            13217 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            13218 ; 147  |#else  // ifndef MTP_BUILD
                            13219 ; 148  |#ifdef STMP_BUILD_PLAYER
                            13220 ; 149  |// --------------------
                            13221 ; 150  |// Player and NAND only
                            13222 ; 151  |// --------------------
                            13223 ; 152  |#else
                            13224 ; 153  |// --------------------
                            13225 ; 154  |// USBMSC and NAND only
                            13226 ; 155  |// --------------------
                            13227 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            13228 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            13229 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            13230 ; 159  |#endif // ifdef MTP_BUILD
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 224

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13231 ; 160  |#endif // ifdef MMC 
                            13232 ; 161  |
                            13233 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            13234 ; 163  |#if (defined(MTP_BUILD))
                            13235 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            13236 ; 165  |
                            13237 ; 166  |////!
                            13238 ; 167  |////! This varible holds the watchdog count for the store flush.
                            13239 ; 168  |////!
                            13240 ; 169  |///
                            13241 ; 170  |#include <types.h>
                            13242 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            13243 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            13244 ; 173  |#endif
                            13245 ; 174  |
                            13246 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            13247 ; 176  |// These are needed here for Mass Storage Class
                            13248 ; 177  |// Needs to be cleaned up
                            13249 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            13250 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            13251 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            13252 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            13253 ; 182  |
                            13254 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            13255 ; 184  |
                            13256 ; 185  |#endif
                            13257 ; 186  |
                            13258 ; 187  |
                            13259 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            13260 ; 189  |// SmartMedia/NAND defs
                            13261 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            13262 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            13263 ; 192  |
                            13264 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            13265 ; 194  |// Sysloadresources defs
                            13266 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            13267 ; 196  |
                            13268 ; 197  |/////////////////////////////////////////////////////////////////////////////////
                            13269 ; 198  |// MMC defs
                            13270 ; 199  |#define MMC_MAX_PARTITIONS 1
                            13271 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            13272 ; 201  |
                            13273 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            13274 ; 203  |// SPI defs
                            13275 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            13276 ; 205  |
                            13277 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            13278 ; 207  |// Global media defs
                            13279 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            13280 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            13281 ; 210  |
                            13282 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            13283 ; 212  |// DO NOT CHANGE THESE!!!
                            13284 ; 213  |#define SM_MAX_PARTITIONS 4
                            13285 ; 214  |#define MAX_HANDLES 2
                            13286 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            13287 ; 216  |
                            13288 ; 217  |
                            13289 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            13290 ; 219  |// Battery LRADC Values 
                            13291 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            13292 ; 221  |// brownout trip point in mV (moved by RS)
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 225

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13293 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            13294 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            13295 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            13296 ; 225  |//     audio recording to media.
                            13297 ; 226  |#define BATT_SAFETY_MARGIN 10
                            13298 ; 227  |
                            13299 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            13300 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            13301 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            13302 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            13303 ; 232  |
                            13304 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            13305 ; 234  |
                            13306 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            13307 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            13308 ; 237  |#if (!defined(CLCD))
                            13309 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            13310 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            13311 ; 240  |#else 
                            13312 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            13313 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            13314 ; 243  |#endif
                            13315 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            13316 ; 245  |
                            13317 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            13318 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            13319 ; 248  |// See mp3 encoder overlay.
                            13320 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            13321 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            13322 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            13323 ; 252  |
                            13324 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            13325 ; 254  |// Voice recording filenames
                            13326 ; 255  |// number of digits in filename Vxxx.wav
                            13327 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            13328 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            13329 ; 258  |
                            13330 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            13331 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            13332 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            13333 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            13334 ; 263  |#if defined(DEVICE_3500)
                            13335 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            13336 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            13337 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            13338 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            13339 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            13340 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            13341 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            13342 ; 271  |
                            13343 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            13344 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            13345 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 226

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13346 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            13347 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            13348 ; 277  |
                            13349 ; 278  |#else 
                            13350 ; 279  |// STMP3410
                            13351 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            13352 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            13353 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            13354 ; 283  |#endif
                            13355 ; 284  |
                            13356 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            13357 ; 286  |// Number of available soft timers
                            13358 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            13359 ; 288  |#if defined(SYNC_LYRICS)
                            13360 ; 289  |#define SOFT_TIMERS 10
                            13361 ; 290  |#else 
                            13362 ; 291  |#if defined(JPEG_DECODER)
                            13363 ; 292  |#define SOFT_TIMERS 10
                            13364 ; 293  |#else 
                            13365 ; 294  |#define SOFT_TIMERS 9
                            13366 ; 295  |#endif
                            13367 ; 296  |#endif
                            13368 ; 297  |
                            13369 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            13370 ; 299  |//  sizes
                            13371 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            13372 ; 301  |#if defined(MMC)
                            13373 ; 302  |#if defined(USE_PLAYLIST5)
                            13374 ; 303  |#define MENU_STACK_SIZE 1500
                            13375 ; 304  |#else 
                            13376 ; 305  |#define MENU_STACK_SIZE 1250
                            13377 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            13378 ; 307  |#else 
                            13379 ; 308  |#if defined(USE_PLAYLIST5)
                            13380 ; 309  |#define MENU_STACK_SIZE 1500
                            13381 ; 310  |#else 
                            13382 ; 311  |#define MENU_STACK_SIZE 1250
                            13383 ; 312  |#endif //if @def('USE_PLAYLIST5')
                            13384 ; 313  |#endif //if @def('MMC')
                            13385 ; 314  |
                            13386 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            13387 ; 316  |// 
                            13388 ; 317  |#define STACK_L1_SIZE 750
                            13389 ; 318  |#define STACK_L2_SIZE 100
                            13390 ; 319  |#define STACK_L3_SIZE 160
                            13391 ; 320  |
                            13392 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            13393 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            13394 ; 323  |// is ok with switching code.
                            13395 ; 324  |#if defined(MTP_BUILD)
                            13396 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            13397 ; 326  |#endif
                            13398 ; 327  |
                            13399 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            13400 ; 329  |// maximum number of nested funclets 
                            13401 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            13402 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            13403 ; 332  |
                            13404 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            13405 ; 334  |//    LCD DEFINITIONS
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 227

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13406 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            13407 ; 336  |
                            13408 ; 337  |#define SPACE_CHAR 0x000020          
                            13409 ; 338  |#define ZERO_CHAR 0x000030
                            13410 ; 339  |#define COLON_CHAR 0x00003A
                            13411 ; 340  |#define PERIOD_CHAR 0x00002E
                            13412 ; 341  |
                            13413 ; 342  |#if (defined(S6B33B0A_LCD))
                            13414 ; 343  |#define LCD_X_SIZE 128
                            13415 ; 344  |#define LCD_Y_SIZE 159
                            13416 ; 345  |#endif
                            13417 ; 346  |
                            13418 ; 347  |#if (defined(SED15XX_LCD))
                            13419 ; 348  |#define LCD_X_SIZE 128
                            13420 ; 349  |#define LCD_Y_SIZE 64
                            13421 ; 350  |#endif
                            13422 ; 351  |
                            13423 ; 352  |
                            13424 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            13425 ; 354  |//   Details on Customizing Contrast
                            13426 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            13427 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            13428 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            13429 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            13430 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            13431 ; 360  |//   unless the ezact sequence is remembered.
                            13432 ; 361  |//   To find out what range your player supports: 
                            13433 ; 362  |//   change these equs to full range or comment out (full range is default)
                            13434 ; 363  |//;;;;;;
                            13435 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            13436 ; 365  |// recommended calibration using player -- uncomment 
                            13437 ; 366  |//;;;;;;
                            13438 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            13439 ; 368  |////////////////////////////
                            13440 ; 369  |#if (defined(DEMO_HW))
                            13441 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            13442 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            13443 ; 372  |#define LCD_MIN_CONTRAST 0x1E
                            13444 ; 373  |#else 
                            13445 ; 374  |
                            13446 ; 375  |#if (defined(S6B33B0A_LCD))
                            13447 ; 376  |#define LCD_MAX_CONTRAST 210
                            13448 ; 377  |#define LCD_MIN_CONTRAST 160    
                            13449 ; 378  |#endif
                            13450 ; 379  |
                            13451 ; 380  |#if (defined(SED15XX_LCD))
                            13452 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            13453 ; 382  |// Engineering board regs support range [17-37].
                            13454 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            13455 ; 384  |//   One default contrast range [24-42] works for both.
                            13456 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            13457 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            13458 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            13459 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            13460 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            13461 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            13462 ; 391  |
                            13463 ; 392  |#if (defined(NEWSHINGYIH))
                            13464 ; 393  |#define LCD_MAX_CONTRAST 250
                            13465 ; 394  |#define LCD_MIN_CONTRAST 0
                            13466 ; 395  |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 228

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13467 ; 396  |//-----
                            13468 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            13469 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            13470 ; 399  |#define LCD_MAX_CONTRAST 250
                            13471 ; 400  |#define LCD_MIN_CONTRAST 0
                            13472 ; 401  |
                            13473 ; 402  |//=====
                            13474 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            13475 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            13476 ; 405  |//LCD_MAX_CONTRAST equ 42
                            13477 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            13478 ; 407  |
                            13479 ; 408  |#endif
                            13480 ; 409  |#endif
                            13481 ; 410  |
                            13482 ; 411  |#endif
                            13483 ; 412  |
                            13484 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            13485 ; 414  |// The default value of the lcd contrast in % of range
                            13486 ; 415  |//   the default value is used when no settings.dat is available
                            13487 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            13488 ; 417  |
                            13489 ; 418  |#if (defined(S6B33B0A_LCD))
                            13490 ; 419  |// 60% of range is default value
                            13491 ; 420  |#define DEFAULT_CONTRAST 50 
                            13492 ; 421  |#endif
                            13493 ; 422  |
                            13494 ; 423  |#if (defined(SED15XX_LCD))
                            13495 ; 424  |// % of range is default value (was 60%)
                            13496 ; 425  |#define DEFAULT_CONTRAST 50 
                            13497 ; 426  |#endif
                            13498 ; 427  |
                            13499 ; 428  |
                            13500 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            13501 ; 430  |// make lower when doing calibration
                            13502 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            13503 ; 432  |
                            13504 ; 433  |
                            13505 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            13506 ; 435  |// For FFWD and RWND
                            13507 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            13508 ; 437  |#define SECONDS_TO_SKIP 1
                            13509 ; 438  |#define SECONDS_TO_SKIP1 3
                            13510 ; 439  |#define SECONDS_TO_SKIP2 6
                            13511 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            13512 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            13513 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13514 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            13515 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13516 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            13517 ; 446  |
                            13518 ; 447  |// For audible FFW/RWD
                            13519 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            13520 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            13521 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            13522 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            13523 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13524 ; 453  |#define LEVEL1_BOUNDARY 17 
                            13525 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13526 ; 455  |#define LEVEL2_BOUNDARY 33 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 229

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13527 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            13528 ; 457  |#define LEVEL3_BOUNDARY 50 
                            13529 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            13530 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            13531 ; 460  |// Short Song Time, songs too short to play.
                            13532 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            13533 ; 462  |
                            13534 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            13535 ; 464  |// MP3 Sync Values
                            13536 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            13537 ; 466  |// # bytes to look for sync before marking it bad
                            13538 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            13539 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            13540 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            13541 ; 470  |// once we have sync'd, the isr should be called this frequently
                            13542 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            13543 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            13544 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            13545 ; 474  |
                            13546 ; 475  |
                            13547 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            13548 ; 477  |//// Multi-Stage Volume Control Definitions
                            13549 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            13550 ; 479  |//// Use Multi-Stage Volume
                            13551 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            13552 ; 481  |
                            13553 ; 482  |//// Master Volume definitions
                            13554 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            13555 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            13556 ; 485  |
                            13557 ; 486  |//// DAC-Mode definitions
                            13558 ; 487  |//// Adjusts 0dB point
                            13559 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            13560 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            13561 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            13562 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            13563 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
                            13564 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            13565 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            13566 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            13567 ; 496  |
                            13568 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            13569 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            13570 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            13571 ; 500  |
                            13572 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            13573 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            13574 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            13575 ; 504  |
                            13576 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            13577 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            13578 ; 507  |
                            13579 ; 508  |
                            13580 ; 509  |//// Line In definitions (used for Line-In 1)
                            13581 ; 510  |//// 0dB point of the Line In
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 230

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13582 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            13583 ; 512  |//// Minimum volume of Line In
                            13584 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            13585 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            13586 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            13587 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            13588 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            13589 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            13590 ; 519  |
                            13591 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            13592 ; 521  |//// 0dB point of the Line In
                            13593 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            13594 ; 523  |//// Minimum volume of Line In
                            13595 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            13596 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            13597 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            13598 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            13599 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            13600 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            13601 ; 530  |
                            13602 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            13603 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            13604 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            13605 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            13606 ; 535  |
                            13607 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            13608 ; 537  |////
                            13609 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            13610 ; 539  |////
                            13611 ; 540  |///
                            13612 ; 541  |#include <types.h>
                            13613 ; 542  |extern volatile WORD g_wActivityState;
                            13614 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            13615 ; 544  |
                            13616 ; 545  |void _reentrant Init5VSense(void);
                            13617 ; 546  |void _reentrant ServiceDCDC(void);
                            13618 ; 547  |
                            13619 ; 548  |////////////////////////////////////////////////////////////////////////////
                            13620 ; 549  |//// JPEG Thumbnail Mode Setting
                            13621 ; 550  |//// number of column in thumbnail mode
                            13622 ; 551  |#define THUMBNAIL_X 2           
                            13623 ; 552  |//// number of row in  thumbnail mode
                            13624 ; 553  |#define THUMBNAIL_Y 2           
                            13625 ; 554  |//// thumbnail boundary offset x
                            13626 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            13627 ; 556  |//// thumbnail boundary offset y
                            13628 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            13629 ; 558  |
                            13630 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            13631 ; 560  |
                            13632 
                            13634 
                            13635 ; 4    |#include "resource.h"
                            13636 
                            13638 
                            13639 ; 1    |//  NOTE: This file was generated automatically by rscrenum.pl
                            13640 ; 2    |//  Do not edit it directly.
                            13641 ; 3    |//  Created on Sat Jun 28 16:37:44 2008 using resource.inc as input.
                            13642 ; 4    |
                            13643 ; 5    |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 231

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13644 ; 6    |
                            13645 ; 7    |//  NOTE: This file was generated automatically by rscrenum.pl
                            13646 ; 8    |//  Do not edit it directly.
                            13647 ; 9    |//  Created on Sat Jun 28 16:13:49 2008 using resource.inc as input.
                            13648 ; 10   |
                            13649 ; 11   |
                            13650 ; 12   |
                            13651 ; 13   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13652 ; 14   |//  Do not edit it directly.
                            13653 ; 15   |//  Created on Sat Jun 28 15:55:53 2008 using resource.inc as input.
                            13654 ; 16   |
                            13655 ; 17   |
                            13656 ; 18   |
                            13657 ; 19   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13658 ; 20   |//  Do not edit it directly.
                            13659 ; 21   |//  Created on Thu Jun 26 08:58:05 2008 using resource.inc as input.
                            13660 ; 22   |
                            13661 ; 23   |
                            13662 ; 24   |
                            13663 ; 25   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13664 ; 26   |//  Do not edit it directly.
                            13665 ; 27   |//  Created on Wed Jun 25 17:00:35 2008 using resource.inc as input.
                            13666 ; 28   |
                            13667 ; 29   |
                            13668 ; 30   |
                            13669 ; 31   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13670 ; 32   |//  Do not edit it directly.
                            13671 ; 33   |//  Created on Wed Jun 25 11:42:38 2008 using resource.inc as input.
                            13672 ; 34   |
                            13673 ; 35   |
                            13674 ; 36   |
                            13675 ; 37   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13676 ; 38   |//  Do not edit it directly.
                            13677 ; 39   |//  Created on Wed Jun 25 11:17:50 2008 using resource.inc as input.
                            13678 ; 40   |
                            13679 ; 41   |
                            13680 ; 42   |
                            13681 ; 43   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13682 ; 44   |//  Do not edit it directly.
                            13683 ; 45   |//  Created on Wed Jun 25 11:17:05 2008 using resource.inc as input.
                            13684 ; 46   |
                            13685 ; 47   |
                            13686 ; 48   |
                            13687 ; 49   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13688 ; 50   |//  Do not edit it directly.
                            13689 ; 51   |//  Created on Tue Jun 24 15:21:11 2008 using resource.inc as input.
                            13690 ; 52   |
                            13691 ; 53   |
                            13692 ; 54   |
                            13693 ; 55   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13694 ; 56   |//  Do not edit it directly.
                            13695 ; 57   |//  Created on Sun Jun 22 02:54:01 2008 using resource.inc as input.
                            13696 ; 58   |
                            13697 ; 59   |
                            13698 ; 60   |
                            13699 ; 61   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13700 ; 62   |//  Do not edit it directly.
                            13701 ; 63   |//  Created on Sun Jun 22 00:47:39 2008 using resource.inc as input.
                            13702 ; 64   |
                            13703 ; 65   |
                            13704 ; 66   |
                            13705 ; 67   |//  NOTE: This file was generated automatically by rscrenum.pl
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 232

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13706 ; 68   |//  Do not edit it directly.
                            13707 ; 69   |//  Created on Fri Jun 20 16:15:57 2008 using resource.inc as input.
                            13708 ; 70   |
                            13709 ; 71   |
                            13710 ; 72   |
                            13711 ; 73   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13712 ; 74   |//  Do not edit it directly.
                            13713 ; 75   |//  Created on Thu Jun 19 09:47:30 2008 using resource.inc as input.
                            13714 ; 76   |
                            13715 ; 77   |
                            13716 ; 78   |
                            13717 ; 79   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13718 ; 80   |//  Do not edit it directly.
                            13719 ; 81   |//  Created on Wed Jun 18 23:11:16 2008 using resource.inc as input.
                            13720 ; 82   |
                            13721 ; 83   |
                            13722 ; 84   |
                            13723 ; 85   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13724 ; 86   |//  Do not edit it directly.
                            13725 ; 87   |//  Created on Wed Jun 18 22:57:19 2008 using resource.inc as input.
                            13726 ; 88   |
                            13727 ; 89   |
                            13728 ; 90   |
                            13729 ; 91   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13730 ; 92   |//  Do not edit it directly.
                            13731 ; 93   |//  Created on Wed Jun 18 22:49:16 2008 using resource.inc as input.
                            13732 ; 94   |
                            13733 ; 95   |
                            13734 ; 96   |
                            13735 ; 97   |//  NOTE: This file was generated automatically by rscrenum.pl
                            13736 ; 98   |//  Do not edit it directly.
                            13737 ; 99   |//  Created on Wed Jun 18 11:53:38 2008 using resource.inc as input.
                            13738 ; 100  |
                            13739 ; 101  |
                            13740 ; 102  |
                            13741 ; 103  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13742 ; 104  |//  Do not edit it directly.
                            13743 ; 105  |//  Created on Wed Jun 18 10:45:13 2008 using resource.inc as input.
                            13744 ; 106  |
                            13745 ; 107  |
                            13746 ; 108  |
                            13747 ; 109  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13748 ; 110  |//  Do not edit it directly.
                            13749 ; 111  |//  Created on Wed Jun 18 09:54:56 2008 using resource.inc as input.
                            13750 ; 112  |
                            13751 ; 113  |
                            13752 ; 114  |
                            13753 ; 115  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13754 ; 116  |//  Do not edit it directly.
                            13755 ; 117  |//  Created on Tue Jun 17 16:47:21 2008 using resource.inc as input.
                            13756 ; 118  |
                            13757 ; 119  |
                            13758 ; 120  |
                            13759 ; 121  |//  NOTE: This file was generated automatically by rscrenum.pl
                            13760 ; 122  |//  Do not edit it directly.
                            13761 ; 123  |//  Created on Tue Jun 17 11:30:49 2008 using resource.inc as input.
                            13762 ; 124  |
                            13763 ; 125  |
                            13764 ; 126  |
                            13765 ; 127  |/////////////////////////////////////////////////////////////////////////////////
                            13766 ; 128  |// Copyright(C) SigmaTel, Inc. 2001-2007
                            13767 ; 129  |// Reviews: DanhNguyen (06-2008) for X8iTF/STFM1000
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 233

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13768 ; 130  |// LCD example resource listing
                            13769 ; 131  |/////////////////////////////////////////////////////////////////////////////////
                            13770 ; 132  |
                            13771 ; 133  |#if (!defined(resources))
                            13772 ; 134  |#define resources 1
                            13773 ; 135  |
                            13774 ; 136  |/////////////////////////////////////////////////////////////////////////////////
                            13775 ; 137  |//  Player version number  no leading zeros in version number!!!!!
                            13776 ; 138  |/////////////////////////////////////////////////////////////////////////////////
                            13777 ; 139  |
                            13778 ; 140  |#define VERSION_MAJOR 3
                            13779 ; 141  |#define VERSION_MIDDLE 200
                            13780 ; 142  |#define VERSION_MINOR 910
                            13781 ; 143  |
                            13782 ; 144  |#define LCD_SEG_OFFSET 0x000000
                            13783 ; 145  |#define NUMBER_OF_PRESETS 10
                            13784 ; 146  |
                            13785 ; 147  |
                            13786 ; 148  |/////////////////////////////////////////////////////////////////////////////////
                            13787 ; 149  |//  High usage resource. These have been moved here to take maximum advantage of
                            13788 ; 150  |//  the resource index cache if it was added.
                            13789 ; 151  |//  This block is sorted by frequency of use while loading a new song.
                            13790 ; 152  |/////////////////////////////////////////////////////////////////////////////////
                            13791 ; 153  |
                            13792 ; 154  |//$FILENAME searchdirectory.src
                            13793 ; 155  |#define RSRC_FUNCLET_SEARCHDIRECTORY 1    
                            13794 ; 156  |//$FILENAME shortdirmatch.src
                            13795 ; 157  |#define RSRC_FUNCLET_SHORTDIRMATCH 2    
                            13796 ; 158  |//$FILENAME fopen.src
                            13797 ; 159  |#define RSRC_FUNCLET_FOPEN 3    
                            13798 ; 160  |//$FILENAME musicmenu.src
                            13799 ; 161  |#define RSRC_MUSIC_MENU_CODE_BANK 4    
                            13800 ; 162  |//$FILENAME changepath.src
                            13801 ; 163  |#define RSRC_FUNCLET_CHANGEPATH 5    
                            13802 ; 164  |//$FILENAME _openandverifyslot.src
                            13803 ; 165  |#define RSRC_FUNCLET__OPENANDVERIFYSLOT 6    
                            13804 ; 166  |//$FILENAME _loadslot.src
                            13805 ; 167  |#define RSRC_FUNCLET__LOADSLOT 7    
                            13806 ; 168  |//$FILENAME getname.src
                            13807 ; 169  |#define RSRC_FUNCLET_GETNAME 8    
                            13808 ; 170  |//$FILENAME Funclet_SteppingVoltageSet.src
                            13809 ; 171  |#define RSRC_FUNCLET_STEPPINGVOLTAGESET 9    
                            13810 ; 172  |//$FILENAME sethandleforsearch.src
                            13811 ; 173  |#define RSRC_FUNCLET_SETHANDLEFORSEARCH 10    
                            13812 ; 174  |//$FILENAME wmaWrap.src
                            13813 ; 175  |#define RSRC_WMADEC_CODE 11    
                            13814 ; 176  |//$FILENAME extractfilename.src
                            13815 ; 177  |#define RSRC_FUNCLET_EXTRACTFILENAME 12    
                            13816 ; 178  |//$FILENAME oem_getgroupcertprivatekey.src
                            13817 ; 179  |#define RSRC_FUNCLET_OEM_GETGROUPCERTPRIVATEKEY 13    
                            13818 ; 180  |//$FILENAME SoftTimerMod.src
                            13819 ; 181  |#define RSRC_SOFT_TIMER_MODULE_CODE 14    
                            13820 ; 182  |//$FILENAME GetShortfilename.src
                            13821 ; 183  |#define RSRC_FUNCLET_GETSHORTFILENAME 15    
                            13822 ; 184  |//$FILENAME drm_dcp_loadpropertiescache.src
                            13823 ; 185  |#define RSRC_FUNCLET_DRM_DCP_LOADPROPERTIESCACHE 16    
                            13824 ; 186  |//$FILENAME playerstatemachine.src
                            13825 ; 187  |#define RSRC_PLAY_STATE_MACHINE_CODE_BANK 17    
                            13826 ; 188  |//$FILENAME SysMod.src
                            13827 ; 189  |#define RSRC_SYSMOD_CODE 18    
                            13828 ; 190  |//$FILENAME drm_b64_decodew.src
                            13829 ; 191  |#define RSRC_FUNCLET_DRM_B64_DECODEW 19    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 234

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13830 ; 192  |//$FILENAME discardtrailigperiods.src
                            13831 ; 193  |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODS 20    
                            13832 ; 194  |//$FILENAME uppercase.src
                            13833 ; 195  |#define RSRC_FUNCLET_UPPERCASE 21    
                            13834 ; 196  |//$FILENAME strlength.src
                            13835 ; 197  |#define RSRC_FUNCLET_STRLENGTH 22    
                            13836 ; 198  |//$FILENAME ConverToShortname.src
                            13837 ; 199  |#define RSRC_FUNCLET_CONVERTOSHORTNAME 23    
                            13838 ; 200  |//$FILENAME drm_bbx_hashvalue.src
                            13839 ; 201  |#define RSRC_FUNCLET_DRM_BBX_HASHVALUE 24    
                            13840 ; 202  |//$FILENAME drm_expr_evaluateexpression.src
                            13841 ; 203  |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION 25    
                            13842 ; 204  |//$FILENAME drm_sst_closekey.src
                            13843 ; 205  |#define RSRC_FUNCLET_DRM_SST_CLOSEKEY 26    
                            13844 ; 206  |//$FILENAME Funclet_SysSetSpeed.src
                            13845 ; 207  |#define RSRC_FUNCLET_SYSSETSPEED 27    
                            13846 ; 208  |//$FILENAME freehandle.src
                            13847 ; 209  |#define RSRC_FUNCLET_FREEHANDLE 28    
                            13848 ; 210  |//$FILENAME searchfreehandleallocate.src
                            13849 ; 211  |#define RSRC_FUNCLET_SEARCHFREEHANDLEALLOCATE 29    
                            13850 ; 212  |//$FILENAME _parselicenseattributes.src
                            13851 ; 213  |#define RSRC_FUNCLET__PARSELICENSEATTRIBUTES 30    
                            13852 ; 214  |//$FILENAME variablesecstategetorset.src
                            13853 ; 215  |#define RSRC_FUNCLET_VARIABLESECSTATEGETORSET 31    
                            13854 ; 216  |//$FILENAME _setuplicevalobjecttoshare.src
                            13855 ; 217  |#define RSRC_FUNCLET__SETUPLICEVALOBJECTTOSHARE 32    
                            13856 ; 218  |//$FILENAME drm_mgr_initialize.src
                            13857 ; 219  |#define RSRC_FUNCLET_DRM_MGR_INITIALIZE 33    
                            13858 ; 220  |//$FILENAME display.src
                            13859 ; 221  |#define RSRC_DISPLAY_CODE_BANK 34    
                            13860 ; 222  |//$FILENAME DisplayModule.src
                            13861 ; 223  |#define RSRC_DISPLAY_MODULE 35    
                            13862 ; 224  |//$FILENAME extractpath.src
                            13863 ; 225  |#define RSRC_FUNCLET_EXTRACTPATH 36    
                            13864 ; 226  |//$FILENAME drm_sst_createglobalstorepassword.src
                            13865 ; 227  |#define RSRC_FUNCLET_DRM_SST_CREATEGLOBALSTOREPASSWORD 37    
                            13866 ; 228  |//$FILENAME _getprivatekey.src
                            13867 ; 229  |#define RSRC_FUNCLET__GETPRIVATEKEY 38    
                            13868 ; 230  |//$FILENAME drm_hds_opennamespace.src
                            13869 ; 231  |#define RSRC_FUNCLET_DRM_HDS_OPENNAMESPACE 39    
                            13870 ; 232  |//$FILENAME drm_hds_openslot.src
                            13871 ; 233  |#define RSRC_FUNCLET_DRM_HDS_OPENSLOT 40    
                            13872 ; 234  |//$FILENAME fclose.src
                            13873 ; 235  |#define RSRC_FUNCLET_FCLOSE 41    
                            13874 ; 236  |//$FILENAME drm_cphr_init.src
                            13875 ; 237  |#define RSRC_FUNCLET_DRM_CPHR_INIT 42    
                            13876 ; 238  |//$FILENAME drm_pk_symmetriccrypt.src
                            13877 ; 239  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICCRYPT 43    
                            13878 ; 240  |//$FILENAME drm_mgr_bind.src
                            13879 ; 241  |#define RSRC_FUNCLET_DRM_MGR_BIND 44    
                            13880 ; 242  |//$FILENAME _decryptcontentkey.src
                            13881 ; 243  |#define RSRC_FUNCLET__DECRYPTCONTENTKEY 45    
                            13882 ; 244  |//$FILENAME drm_mac_inv32.src
                            13883 ; 245  |#define RSRC_FUNCLET_DRM_MAC_INV32 46    
                            13884 ; 246  |//$FILENAME drm_lic_getattribute.src
                            13885 ; 247  |#define RSRC_FUNCLET_DRM_LIC_GETATTRIBUTE 47    
                            13886 ; 248  |//$FILENAME drm_utl_getversionasstring.src
                            13887 ; 249  |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONASSTRING 48    
                            13888 ; 250  |//$FILENAME drm_dcp_getattribute.src
                            13889 ; 251  |#define RSRC_FUNCLET_DRM_DCP_GETATTRIBUTE 49    
                            13890 ; 252  |//$FILENAME effectsmodules.src
                            13891 ; 253  |#define RSRC_EFFECTS_MODULES_P 50    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 235

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13892 ; 254  |//$FILENAME janusx.src
                            13893 ; 255  |#define RSRC_JANUSX_CODE 51    
                            13894 ; 256  |//$FILENAME drm_sst_openkeytokens.src
                            13895 ; 257  |#define RSRC_FUNCLET_DRM_SST_OPENKEYTOKENS 52    
                            13896 ; 258  |//$FILENAME eval.src
                            13897 ; 259  |#define RSRC_FUNCLET_EVAL 53    
                            13898 ; 260  |//$FILENAME _verifyslothash.src
                            13899 ; 261  |#define RSRC_FUNCLET__VERIFYSLOTHASH 54    
                            13900 ; 262  |//$FILENAME januscommon.src
                            13901 ; 263  |#define RSRC_JANUS_COMMON 55    
                            13902 ; 264  |//$FILENAME changecase.src
                            13903 ; 265  |#define RSRC_FUNCLET_CHANGECASE 56    
                            13904 ; 266  |//$FILENAME drm_bbx_symmetricverify.src
                            13905 ; 267  |#define RSRC_FUNCLET_DRM_BBX_SYMMETRICVERIFY 57    
                            13906 ; 268  |//$FILENAME _loadlicenseattributes.src
                            13907 ; 269  |#define RSRC_FUNCLET__LOADLICENSEATTRIBUTES 58    
                            13908 ; 270  |//$FILENAME drm_hds_slotseek.src
                            13909 ; 271  |#define RSRC_FUNCLET_DRM_HDS_SLOTSEEK 59    
                            13910 ; 272  |//$FILENAME drm_hds_slotwrite.src
                            13911 ; 273  |#define RSRC_FUNCLET_DRM_HDS_SLOTWRITE 60    
                            13912 ; 274  |//$FILENAME drm_levl_performoperations.src
                            13913 ; 275  |#define RSRC_FUNCLET_DRM_LEVL_PERFORMOPERATIONS 61    
                            13914 ; 276  |//$FILENAME drm_lic_verifysignature.src
                            13915 ; 277  |#define RSRC_FUNCLET_DRM_LIC_VERIFYSIGNATURE 62    
                            13916 ; 278  |//$FILENAME drm_lst_getlicense.src
                            13917 ; 279  |#define RSRC_FUNCLET_DRM_LST_GETLICENSE 63    
                            13918 ; 280  |//$FILENAME drm_utl_numbertostring.src
                            13919 ; 281  |#define RSRC_FUNCLET_DRM_UTL_NUMBERTOSTRING 64    
                            13920 ; 282  |//$FILENAME oem_writefile.src
                            13921 ; 283  |#define RSRC_FUNCLET_OEM_WRITEFILE 65    
                            13922 ; 284  |//$FILENAME drm_sst_getdata.src
                            13923 ; 285  |#define RSRC_FUNCLET_DRM_SST_GETDATA 66    
                            13924 ; 286  |//$FILENAME updatehandlemode.src
                            13925 ; 287  |#define RSRC_FUNCLET_UPDATEHANDLEMODE 67    
                            13926 ; 288  |//$FILENAME _getlicenseinfoandsetup.src
                            13927 ; 289  |#define RSRC_FUNCLET__GETLICENSEINFOANDSETUP 68    
                            13928 ; 290  |//$FILENAME drm_lic_completelicensechain.src
                            13929 ; 291  |#define RSRC_FUNCLET_DRM_LIC_COMPLETELICENSECHAIN 69    
                            13930 ; 292  |//$FILENAME doplay_p.src
                            13931 ; 293  |#define RSRC_DOPLAY_P 70    
                            13932 ; 294  |//$FILENAME fatwritep.src
                            13933 ; 295  |#define RSRC_FATWRITE_P_CODE 71    
                            13934 ; 296  |//$FILENAME findfirst.src
                            13935 ; 297  |#define RSRC_FUNCLET_FINDFIRST 72    
                            13936 ; 298  |//$FILENAME Funclet_SysLoadFatWrite.src
                            13937 ; 299  |#define RSRC_FUNCLET_SYSLOADFATWRITE 73    
                            13938 ; 300  |//$FILENAME changetorootdirectory.src
                            13939 ; 301  |#define RSRC_FUNCLET_CHANGETOROOTDIRECTORY 74    
                            13940 ; 302  |//$FILENAME _findkeypair.src
                            13941 ; 303  |#define RSRC_FUNCLET__FINDKEYPAIR 75    
                            13942 ; 304  |//$FILENAME variablemachinegetorset.src
                            13943 ; 305  |#define RSRC_FUNCLET_VARIABLEMACHINEGETORSET 76    
                            13944 ; 306  |//$FILENAME _hdsslotenumnext.src
                            13945 ; 307  |#define RSRC_FUNCLET__HDSSLOTENUMNEXT 77    
                            13946 ; 308  |//$FILENAME getlspubkey.src
                            13947 ; 309  |#define RSRC_FUNCLET_GETLSPUBKEY 78    
                            13948 ; 310  |//$FILENAME drm_sst_gettokenvalue.src
                            13949 ; 311  |#define RSRC_FUNCLET_DRM_SST_GETTOKENVALUE 79    
                            13950 ; 312  |//$FILENAME drm_utl_decodekid.src
                            13951 ; 313  |#define RSRC_FUNCLET_DRM_UTL_DECODEKID 80    
                            13952 ; 314  |//$FILENAME drm_xml_getnodecdata.src
                            13953 ; 315  |#define RSRC_FUNCLET_DRM_XML_GETNODECDATA 81    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 236

M:ADDR CODE           CYCLES LINE SOURCELINE
                            13954 ; 316  |//$FILENAME _freedrmmanagerinternalcontexts.src
                            13955 ; 317  |#define RSRC_FUNCLET__FREEDRMMANAGERINTERNALCONTEXTS 82    
                            13956 ; 318  |//$FILENAME drm_clk_initchecksecureclock.src
                            13957 ; 319  |#define RSRC_FUNCLET_DRM_CLK_INITCHECKSECURECLOCK 83    
                            13958 ; 320  |//$FILENAME drm_sst_openandlockslot.src
                            13959 ; 321  |#define RSRC_FUNCLET_DRM_SST_OPENANDLOCKSLOT 84    
                            13960 ; 322  |//$FILENAME aes_enc.src
                            13961 ; 323  |#define RSRC_AES_ENC 85    
                            13962 ; 324  |//$FILENAME getprivkey.src
                            13963 ; 325  |#define RSRC_FUNCLET_GETPRIVKEY 86    
                            13964 ; 326  |//$FILENAME Funclet_GetUnicodeCharacterBitmap.src
                            13965 ; 327  |#define RSRC_FUNCLET_GET_UNICODE_CHARACTER_BITMAP 87    
                            13966 ; 328  |//$FILENAME playlist_codebank.src
                            13967 ; 329  |#define RSRC_PLAYLIST_CODEBANK 88    
                            13968 ; 330  |//$FILENAME drm_lic_getenablingbits.src
                            13969 ; 331  |#define RSRC_FUNCLET_DRM_LIC_GETENABLINGBITS 89    
                            13970 ; 332  |//$FILENAME drm_mgr_uninitialize.src
                            13971 ; 333  |#define RSRC_FUNCLET_DRM_MGR_UNINITIALIZE 90    
                            13972 ; 334  |//$FILENAME _getdevicecert.src
                            13973 ; 335  |#define RSRC_FUNCLET__GETDEVICECERT 91    
                            13974 ; 336  |//$FILENAME drm_lic_reportactions.src
                            13975 ; 337  |#define RSRC_FUNCLET_DRM_LIC_REPORTACTIONS 92    
                            13976 ; 338  |//$FILENAME drmcrt_wcsntol.src
                            13977 ; 339  |#define RSRC_FUNCLET_DRMCRT_WCSNTOL 93    
                            13978 ; 340  |//$FILENAME _basicheaderchecks.src
                            13979 ; 341  |#define RSRC_FUNCLET__BASICHEADERCHECKS 94    
                            13980 ; 342  |//$FILENAME drm_hdr_getattribute.src
                            13981 ; 343  |#define RSRC_FUNCLET_DRM_HDR_GETATTRIBUTE 95    
                            13982 ; 344  |//$FILENAME drm_hds_slotenumnext.src
                            13983 ; 345  |#define RSRC_FUNCLET_DRM_HDS_SLOTENUMNEXT 96    
                            13984 ; 346  |//$FILENAME drm_levl_evaluateexpression.src
                            13985 ; 347  |#define RSRC_FUNCLET_DRM_LEVL_EVALUATEEXPRESSION 97    
                            13986 ; 348  |//$FILENAME drm_lst_open.src
                            13987 ; 349  |#define RSRC_FUNCLET_DRM_LST_OPEN 98    
                            13988 ; 350  |//$FILENAME drm_xml_getnodeattribute.src
                            13989 ; 351  |#define RSRC_FUNCLET_DRM_XML_GETNODEATTRIBUTE 99    
                            13990 ; 352  |//$FILENAME _verifysymmerticsignature.src
                            13991 ; 353  |#define RSRC_FUNCLET__VERIFYSYMMERTICSIGNATURE 100    
                            13992 ; 354  |//$FILENAME oem_openfile.src
                            13993 ; 355  |#define RSRC_FUNCLET_OEM_OPENFILE 101    
                            13994 ; 356  |//$FILENAME _getdrmfullpathname.src
                            13995 ; 357  |#define RSRC_FUNCLET__GETDRMFULLPATHNAME 102    
                            13996 ; 358  |//$FILENAME oem_getsecurestoreglobalpasswordseed.src
                            13997 ; 359  |#define RSRC_FUNCLET_OEM_GETSECURESTOREGLOBALPASSWORDSEED 103    
                            13998 ; 360  |//$FILENAME _applydiffstostore.src
                            13999 ; 361  |#define RSRC_FUNCLET__APPLYDIFFSTOSTORE 104    
                            14000 ; 362  |//$FILENAME drm_sst_setdata.src
                            14001 ; 363  |#define RSRC_FUNCLET_DRM_SST_SETDATA 105    
                            14002 ; 364  |//$FILENAME drm_sst_getlockeddata.src
                            14003 ; 365  |#define RSRC_FUNCLET_DRM_SST_GETLOCKEDDATA 106    
                            14004 ; 366  |//$FILENAME drm_sst_setlockeddata.src
                            14005 ; 367  |#define RSRC_FUNCLET_DRM_SST_SETLOCKEDDATA 107    
                            14006 ; 368  |//$FILENAME playerlib_extra.src
                            14007 ; 369  |#define RSRC_PLAYERLIB_EXTRA_CODE_BANK 108    
                            14008 ; 370  |//$FILENAME wmaCommon.src
                            14009 ; 371  |#define RSRC_WMA_COMMON 109    
                            14010 ; 372  |//$FILENAME wmainit.src
                            14011 ; 373  |#define RSRC_WMA_INIT 110    
                            14012 ; 374  |//$FILENAME playlist2traverse_codebank.src
                            14013 ; 375  |#define RSRC_PLAYLIST2TRAVERSE_CODEBANK 111    
                            14014 ; 376  |//$FILENAME drm_bbx_cipherkeysetup.src
                            14015 ; 377  |#define RSRC_FUNCLET_DRM_BBX_CIPHERKEYSETUP 112    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 237

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14016 ; 378  |//$FILENAME drm_lic_checkclockrollback.src
                            14017 ; 379  |#define RSRC_FUNCLET_DRM_LIC_CHECKCLOCKROLLBACK 113    
                            14018 ; 380  |//$FILENAME drm_hds_closestore.src
                            14019 ; 381  |#define RSRC_FUNCLET_DRM_HDS_CLOSESTORE 114    
                            14020 ; 382  |//$FILENAME _hdsloadsrn.src
                            14021 ; 383  |#define RSRC_FUNCLET__HDSLOADSRN 115    
                            14022 ; 384  |//$FILENAME _loadproritizedlist.src
                            14023 ; 385  |#define RSRC_FUNCLET__LOADPRORITIZEDLIST 116    
                            14024 ; 386  |//$FILENAME drm_lst_initenum.src
                            14025 ; 387  |#define RSRC_FUNCLET_DRM_LST_INITENUM 117    
                            14026 ; 388  |//$FILENAME _loadattributesintocache.src
                            14027 ; 389  |#define RSRC_FUNCLET__LOADATTRIBUTESINTOCACHE 118    
                            14028 ; 390  |//$FILENAME drm_pk_symmetricverify.src
                            14029 ; 391  |#define RSRC_FUNCLET_DRM_PK_SYMMETRICVERIFY 119    
                            14030 ; 392  |
                            14031 ; 393  |/////////////////////////////////////////////////////////////////////////////////
                            14032 ; 394  |//  Menu Modules (codebanks)
                            14033 ; 395  |/////////////////////////////////////////////////////////////////////////////////
                            14034 ; 396  |//$FILENAME mainmenu.src
                            14035 ; 397  |#define RSRC_MAIN_MENU_CODE_BANK 120    
                            14036 ; 398  |//$FILENAME displaylists.src
                            14037 ; 399  |#define RSRC_DISPLAY_LISTS_CODE_BANK 121    
                            14038 ; 400  |
                            14039 ; 401  |//$FILENAME voicemenu.src
                            14040 ; 402  |#define RSRC_VOICE_MENU_CODE_BANK 122    
                            14041 ; 403  |//$FILENAME fmtunermenu.src
                            14042 ; 404  |#define RSRC_FMTUNER_MENU_CODE_BANK 123    
                            14043 ; 405  |//$FILENAME recorderstatemachine.src
                            14044 ; 406  |#define RSRC_RECORDER_STATE_MACHINE_CODE_BANK 124    
                            14045 ; 407  |
                            14046 ; 408  |//$FILENAME eqmenu.src
                            14047 ; 409  |#define RSRC_EQ_MENU_CODE_BANK 125    
                            14048 ; 410  |//$FILENAME playmodemenu.src
                            14049 ; 411  |#define RSRC_PLAYMODE_MENU_CODE_BANK 126    
                            14050 ; 412  |//$FILENAME contrastmenu.src
                            14051 ; 413  |#define RSRC_CONTRAST_MENU_CODE_BANK 127    
                            14052 ; 414  |//$FILENAME pwrsettingsmenu.src
                            14053 ; 415  |#define RSRC_PWRSETTINGS_MENU_CODE_BANK 128    
                            14054 ; 416  |//$FILENAME timedatemenu.src
                            14055 ; 417  |#define RSRC_TIMEDATE_MENU_CODE_BANK 129    
                            14056 ; 418  |//$FILENAME settimemenu.src
                            14057 ; 419  |#define RSRC_SETTIME_MENU_CODE_BANK 130    
                            14058 ; 420  |//$FILENAME setdatemenu.src
                            14059 ; 421  |#define RSRC_SETDATE_MENU_CODE_BANK 131    
                            14060 ; 422  |//$FILENAME settingsmenu.src
                            14061 ; 423  |#define RSRC_SETTINGS_MENU_CODE_BANK 132    
                            14062 ; 424  |//$FILENAME string_system_menu.src
                            14063 ; 425  |#define RSRC_SYSTEM_MENU_CODE_BANK 133    
                            14064 ; 426  |//$FILENAME deletemenu.src
                            14065 ; 427  |#define RSRC_DELETE_MENU_CODE_BANK 134    
                            14066 ; 428  |//$FILENAME aboutmenu.src
                            14067 ; 429  |#define RSRC_ABOUT_MENU_CODE_BANK 135    
                            14068 ; 430  |
                            14069 ; 431  |//$FILENAME spectrogram.src
                            14070 ; 432  |#define RSRC_SPECTROGRAM_MENU_CODE_BANK 136    
                            14071 ; 433  |
                            14072 ; 434  |//$FILENAME motionvideomenu.src
                            14073 ; 435  |#define RSRC_MOTION_VIDEO_MENU_CODE_BANK 137    
                            14074 ; 436  |//$FILENAME motionvideomenuinitstate.src
                            14075 ; 437  |#define RSRC_MOTION_VIDEO_MENU_INITSTATE_CODE_BANK 138    
                            14076 ; 438  |//$FILENAME jpegdisplaymenu.src
                            14077 ; 439  |#define RSRC_JPEG_DISPLAY_MENU_CODE_BANK 139    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 238

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14078 ; 440  |//$FILENAME jpegmanualmenu.src
                            14079 ; 441  |#define RSRC_JPEG_MANUAL_MENU_CODE_BANK 140    
                            14080 ; 442  |//$FILENAME jpegthumbnailmenu.src
                            14081 ; 443  |#define RSRC_JPEG_THUMBNAIL_MENU_CODE_BANK 141    
                            14082 ; 444  |//$FILENAME jpegslideshowmenu.src
                            14083 ; 445  |#define RSRC_JPEG_SLIDESHOW_MENU_CODE_BANK 142    
                            14084 ; 446  |//$FILENAME albumartmenu.src
                            14085 ; 447  |#define RSRC_ALBUM_ART_MENU_CODE_BANK 143    
                            14086 ; 448  |//$FILENAME jpegfileutilextra.src
                            14087 ; 449  |#define RSRC_JPEG_FILEUTIL_EXTRA_MENU_CODE_BANK 144    
                            14088 ; 450  |
                            14089 ; 451  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14090 ; 452  |// General Modules
                            14091 ; 453  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14092 ; 454  |//$FILENAME MixMod.src
                            14093 ; 455  |#define RSRC_MIXMOD_CODE 145    
                            14094 ; 456  |//$FILENAME TunerModule.src
                            14095 ; 457  |#define RSRC_TUNER_MODULE 146    
                            14096 ; 458  |//$FILENAME geqoverlay.src
                            14097 ; 459  |#define RSRC_GEQOVERLAY_CODE 147    
                            14098 ; 460  |
                            14099 ; 461  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14100 ; 462  |// Decoders/Encoders
                            14101 ; 463  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14102 ; 464  |//$FILENAME DecMod.src
                            14103 ; 465  |#define RSRC_DECMOD_CODE 148    
                            14104 ; 466  |//$FILENAME mp3p.src
                            14105 ; 467  |#define RSRC_MP3P_CODE 149    
                            14106 ; 468  |//$FILENAME mp3x.src
                            14107 ; 469  |#define RSRC_MP3X_CODE 150    
                            14108 ; 470  |//$FILENAME mp3y.src
                            14109 ; 471  |#define RSRC_MP3Y_CODE 151    
                            14110 ; 472  |//$FILENAME janusp.src
                            14111 ; 473  |#define RSRC_JANUSP_CODE 152    
                            14112 ; 474  |//RSRC_JANUSY_CODE        equ       29    ;$FILENAME janusy.src
                            14113 ; 475  |
                            14114 ; 476  |//$FILENAME decadpcmimamod.src
                            14115 ; 477  |#define RSRC_DEC_ADPCM_MOD_CODE 153    
                            14116 ; 478  |//$FILENAME dec_adpcmp.src
                            14117 ; 479  |#define RSRC_DEC_ADPCMP_CODE 154    
                            14118 ; 480  |//$FILENAME dec_adpcmx.src
                            14119 ; 481  |#define RSRC_DEC_ADPCMX_CODE 155    
                            14120 ; 482  |//$FILENAME dec_adpcmy.src
                            14121 ; 483  |#define RSRC_DEC_ADPCMY_CODE 156    
                            14122 ; 484  |
                            14123 ; 485  |//$FILENAME decadpcmsmvmod.src
                            14124 ; 486  |#define RSRC_DEC_SMVADPCM_MOD_CODE 157    
                            14125 ; 487  |//$FILENAME dec_smvadpcmp.src
                            14126 ; 488  |#define RSRC_DEC_SMVADPCMP_CODE 158    
                            14127 ; 489  |//$FILENAME dec_smvadpcmx.src
                            14128 ; 490  |#define RSRC_DEC_SMVADPCMX_CODE 159    
                            14129 ; 491  |//$FILENAME dec_smvadpcmy.src
                            14130 ; 492  |#define RSRC_DEC_SMVADPCMY_CODE 160    
                            14131 ; 493  |
                            14132 ; 494  |//$FILENAME encadpcmimamod.src
                            14133 ; 495  |#define RSRC_ENC_ADPCM_MOD_CODE 161    
                            14134 ; 496  |//$FILENAME enc_adpcmp.src
                            14135 ; 497  |#define RSRC_ENC_ADPCMP_CODE 162    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 239

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14136 ; 498  |//$FILENAME enc_adpcmx.src
                            14137 ; 499  |#define RSRC_ENC_ADPCMX_CODE 163    
                            14138 ; 500  |//$FILENAME enc_adpcmy.src
                            14139 ; 501  |#define RSRC_ENC_ADPCMY_CODE 164    
                            14140 ; 502  |
                            14141 ; 503  |//$FILENAME jpeg_p.src
                            14142 ; 504  |#define RSRC_JPEG_DECODER_P 165    
                            14143 ; 505  |//$FILENAME jpeg_x.src
                            14144 ; 506  |#define RSRC_JPEG_DECODER_X 166    
                            14145 ; 507  |//$FILENAME jpeg_y.src
                            14146 ; 508  |#define RSRC_JPEG_DECODER_Y 167    
                            14147 ; 509  |//$FILENAME jpeg2_y.src
                            14148 ; 510  |#define RSRC_JPEG_DECODER_Y_2 168    
                            14149 ; 511  |//$FILENAME bmp2_y.src
                            14150 ; 512  |#define RSRC_BMP_DECODER_Y_2 169    
                            14151 ; 513  |//$FILENAME bmp_p.src
                            14152 ; 514  |#define RSRC_BMP_DECODER_P 170    
                            14153 ; 515  |
                            14154 ; 516  |//RSRC_SMVJPEG_DECODER_P    equ       57    ;$FILENAME smvjpeg_p.src
                            14155 ; 517  |//$FILENAME smvjpeg_x.src
                            14156 ; 518  |#define RSRC_SMVJPEG_DECODER_X 171    
                            14157 ; 519  |//$FILENAME smvjpeg_y.src
                            14158 ; 520  |#define RSRC_SMVJPEG_DECODER_Y 172    
                            14159 ; 521  |
                            14160 ; 522  |
                            14161 ; 523  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14162 ; 524  |// System Settings
                            14163 ; 525  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14164 ; 526  |//$FILENAME settings.src
                            14165 ; 527  |#define RSRC_SETTINGS_COMMANDS 173    
                            14166 ; 528  |
                            14167 ; 529  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14168 ; 530  |// Media Device Drivers
                            14169 ; 531  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14170 ; 532  |//This resource is filled with garbage unless it is the MMC build
                            14171 ; 533  |//$FILENAME null.src
                            14172 ; 534  |#define RSRC_MMCDD_CODE 174    
                            14173 ; 535  |//$FILENAME null.src
                            14174 ; 536  |#define RSRC_SMDD_HIGH_CODE 175    
                            14175 ; 537  |
                            14176 ; 538  |/////////////////////////////////////////////////////////////////////////////////
                            14177 ; 539  |//  PlayState resources
                            14178 ; 540  |/////////////////////////////////////////////////////////////////////////////////
                            14179 ; 541  |//$FILENAME play_icon_with_border.src
                            14180 ; 542  |#define RSRC_PLAY_ICON_WITH_BORDER 176    
                            14181 ; 543  |//$FILENAME pause_icon_with_border.src
                            14182 ; 544  |#define RSRC_PAUSE_ICON_WITH_BORDER 177    
                            14183 ; 545  |//$FILENAME stop_icon_with_border.src
                            14184 ; 546  |#define RSRC_STOP_ICON_WITH_BORDER 178    
                            14185 ; 547  |//$FILENAME record_icon_with_border.src
                            14186 ; 548  |#define RSRC_RECORD_ICON_WITH_BORDER 179    
                            14187 ; 549  |//$FILENAME paused_record_icon_with_border.src
                            14188 ; 550  |#define RSRC_PAUSED_RECORD_ICON_BORDER 180    
                            14189 ; 551  |//$FILENAME ffwd_icon_with_border.src
                            14190 ; 552  |#define RSRC_FFWD_ICON_WITH_BORDER 181    
                            14191 ; 553  |//$FILENAME rwnd_icon_with_border.src
                            14192 ; 554  |#define RSRC_RWND_ICON_WITH_BORDER 182    
                            14193 ; 555  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 240

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14194 ; 556  |/////////////////////////////////////////////////////////////////////////////////
                            14195 ; 557  |//  PlayMode resources
                            14196 ; 558  |/////////////////////////////////////////////////////////////////////////////////
                            14197 ; 559  |//$FILENAME repeatall_icon.src
                            14198 ; 560  |#define RSRC_REPEAT_ALL_ICON 183    
                            14199 ; 561  |//$FILENAME repeatsong_icon.src
                            14200 ; 562  |#define RSRC_REPEAT_SONG_ICON 184    
                            14201 ; 563  |//$FILENAME shuffle_icon.src
                            14202 ; 564  |#define RSRC_SHUFFLE_ICON 185    
                            14203 ; 565  |//$FILENAME random_icon.src
                            14204 ; 566  |#define RSRC_RANDOM_ICON 186    
                            14205 ; 567  |//$FILENAME repeatallclear_icon.src
                            14206 ; 568  |#define RSRC_REPEAT_ALL_CLEAR_ICON 187    
                            14207 ; 569  |//$FILENAME repeatsongclear_icon.src
                            14208 ; 570  |#define RSRC_REPEAT_SONG_CLEAR_ICON 188    
                            14209 ; 571  |//$FILENAME shuffleclear_icon.src
                            14210 ; 572  |#define RSRC_SHUFFLE_CLEAR_ICON 189    
                            14211 ; 573  |
                            14212 ; 574  |/////////////////////////////////////////////////////////////////////////////////
                            14213 ; 575  |//  Battery Status
                            14214 ; 576  |/////////////////////////////////////////////////////////////////////////////////
                            14215 ; 577  |//$FILENAME battery_00.src
                            14216 ; 578  |#define RSRC_BATTERY_00 190    
                            14217 ; 579  |//$FILENAME battery_01.src
                            14218 ; 580  |#define RSRC_BATTERY_01 191    
                            14219 ; 581  |//$FILENAME battery_02.src
                            14220 ; 582  |#define RSRC_BATTERY_02 192    
                            14221 ; 583  |//$FILENAME battery_03.src
                            14222 ; 584  |#define RSRC_BATTERY_03 193    
                            14223 ; 585  |//$FILENAME battery_04.src
                            14224 ; 586  |#define RSRC_BATTERY_04 194    
                            14225 ; 587  |//$FILENAME battery_05.src
                            14226 ; 588  |#define RSRC_BATTERY_05 195    
                            14227 ; 589  |//$FILENAME battery_06.src
                            14228 ; 590  |#define RSRC_BATTERY_06 196    
                            14229 ; 591  |//$FILENAME battery_07.src
                            14230 ; 592  |#define RSRC_BATTERY_07 197    
                            14231 ; 593  |//$FILENAME battery_08.src
                            14232 ; 594  |#define RSRC_BATTERY_08 198    
                            14233 ; 595  |//$FILENAME battery_09.src
                            14234 ; 596  |#define RSRC_BATTERY_09 199    
                            14235 ; 597  |//$FILENAME battery_10.src
                            14236 ; 598  |#define RSRC_BATTERY_10 200    
                            14237 ; 599  |
                            14238 ; 600  |/////////////////////////////////////////////////////////////////////////////////
                            14239 ; 601  |//  System Icons
                            14240 ; 602  |/////////////////////////////////////////////////////////////////////////////////
                            14241 ; 603  |//$FILENAME disk_small.src
                            14242 ; 604  |#define RSRC_DISK_ICON 201    
                            14243 ; 605  |//$FILENAME lock_small.src
                            14244 ; 606  |#define RSRC_LOCK_ICON 202    
                            14245 ; 607  |//$FILENAME icon_music_mode.src
                            14246 ; 608  |#define RSRC_MUSIC_MODE_ICON 203    
                            14247 ; 609  |//$FILENAME icon_voice_mode.src
                            14248 ; 610  |#define RSRC_VOICE_MODE_ICON 204    
                            14249 ; 611  |
                            14250 ; 612  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14251 ; 613  |// Volume Bitmaps
                            14252 ; 614  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14253 ; 615  |//$FILENAME icon_vol_00.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 241

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14254 ; 616  |#define RSRC_ICON_VOL_00 205    
                            14255 ; 617  |//$FILENAME icon_vol_01.src
                            14256 ; 618  |#define RSRC_ICON_VOL_01 206    
                            14257 ; 619  |//$FILENAME icon_vol_02.src
                            14258 ; 620  |#define RSRC_ICON_VOL_02 207    
                            14259 ; 621  |//$FILENAME icon_vol_03.src
                            14260 ; 622  |#define RSRC_ICON_VOL_03 208    
                            14261 ; 623  |//$FILENAME icon_vol_04.src
                            14262 ; 624  |#define RSRC_ICON_VOL_04 209    
                            14263 ; 625  |//$FILENAME icon_vol_05.src
                            14264 ; 626  |#define RSRC_ICON_VOL_05 210    
                            14265 ; 627  |//$FILENAME icon_vol_06.src
                            14266 ; 628  |#define RSRC_ICON_VOL_06 211    
                            14267 ; 629  |//$FILENAME icon_vol_07.src
                            14268 ; 630  |#define RSRC_ICON_VOL_07 212    
                            14269 ; 631  |//$FILENAME icon_vol_08.src
                            14270 ; 632  |#define RSRC_ICON_VOL_08 213    
                            14271 ; 633  |//$FILENAME icon_vol_09.src
                            14272 ; 634  |#define RSRC_ICON_VOL_09 214    
                            14273 ; 635  |//$FILENAME icon_vol_10.src
                            14274 ; 636  |#define RSRC_ICON_VOL_10 215    
                            14275 ; 637  |//$FILENAME icon_vol_11.src
                            14276 ; 638  |#define RSRC_ICON_VOL_11 216    
                            14277 ; 639  |//$FILENAME icon_vol_12.src
                            14278 ; 640  |#define RSRC_ICON_VOL_12 217    
                            14279 ; 641  |//$FILENAME icon_vol_13.src
                            14280 ; 642  |#define RSRC_ICON_VOL_13 218    
                            14281 ; 643  |//$FILENAME icon_vol_14.src
                            14282 ; 644  |#define RSRC_ICON_VOL_14 219    
                            14283 ; 645  |//$FILENAME icon_vol_15.src
                            14284 ; 646  |#define RSRC_ICON_VOL_15 220    
                            14285 ; 647  |//$FILENAME icon_vol_16.src
                            14286 ; 648  |#define RSRC_ICON_VOL_16 221    
                            14287 ; 649  |//$FILENAME icon_vol_17.src
                            14288 ; 650  |#define RSRC_ICON_VOL_17 222    
                            14289 ; 651  |//$FILENAME icon_vol_18.src
                            14290 ; 652  |#define RSRC_ICON_VOL_18 223    
                            14291 ; 653  |//$FILENAME icon_vol_19.src
                            14292 ; 654  |#define RSRC_ICON_VOL_19 224    
                            14293 ; 655  |//$FILENAME icon_vol_20.src
                            14294 ; 656  |#define RSRC_ICON_VOL_20 225    
                            14295 ; 657  |//$FILENAME icon_vol_21.src
                            14296 ; 658  |#define RSRC_ICON_VOL_21 226    
                            14297 ; 659  |//$FILENAME icon_vol_22.src
                            14298 ; 660  |#define RSRC_ICON_VOL_22 227    
                            14299 ; 661  |//$FILENAME icon_vol_23.src
                            14300 ; 662  |#define RSRC_ICON_VOL_23 228    
                            14301 ; 663  |//$FILENAME icon_vol_24.src
                            14302 ; 664  |#define RSRC_ICON_VOL_24 229    
                            14303 ; 665  |//$FILENAME icon_vol_25.src
                            14304 ; 666  |#define RSRC_ICON_VOL_25 230    
                            14305 ; 667  |//$FILENAME icon_vol_26.src
                            14306 ; 668  |#define RSRC_ICON_VOL_26 231    
                            14307 ; 669  |//$FILENAME icon_vol_27.src
                            14308 ; 670  |#define RSRC_ICON_VOL_27 232    
                            14309 ; 671  |//$FILENAME icon_vol_28.src
                            14310 ; 672  |#define RSRC_ICON_VOL_28 233    
                            14311 ; 673  |//$FILENAME icon_vol_29.src
                            14312 ; 674  |#define RSRC_ICON_VOL_29 234    
                            14313 ; 675  |//$FILENAME icon_vol_30.src
                            14314 ; 676  |#define RSRC_ICON_VOL_30 235    
                            14315 ; 677  |//$FILENAME icon_vol_31.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 242

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14316 ; 678  |#define RSRC_ICON_VOL_31 236    
                            14317 ; 679  |
                            14318 ; 680  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14319 ; 681  |// Splash Screen Stuff
                            14320 ; 682  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14321 ; 683  |//$FILENAME st_bw1.src
                            14322 ; 684  |#define RSRC_SPLASH_SCREEN 237    
                            14323 ; 685  |//$FILENAME siglogo1.src
                            14324 ; 686  |#define RSRC_SPLASH_SCREEN_1 238    
                            14325 ; 687  |//$FILENAME siglogo2.src
                            14326 ; 688  |#define RSRC_SPLASH_SCREEN_2 239    
                            14327 ; 689  |//$FILENAME siglogo3.src
                            14328 ; 690  |#define RSRC_SPLASH_SCREEN_3 240    
                            14329 ; 691  |//$FILENAME siglogo4.src
                            14330 ; 692  |#define RSRC_SPLASH_SCREEN_4 241    
                            14331 ; 693  |//$FILENAME siglogo5.src
                            14332 ; 694  |#define RSRC_SPLASH_SCREEN_5 242    
                            14333 ; 695  |//$FILENAME siglogo6.src
                            14334 ; 696  |#define RSRC_SPLASH_SCREEN_6 243    
                            14335 ; 697  |//$FILENAME siglogo7.src
                            14336 ; 698  |#define RSRC_SPLASH_SCREEN_7 244    
                            14337 ; 699  |//$FILENAME siglogo8.src
                            14338 ; 700  |#define RSRC_SPLASH_SCREEN_8 245    
                            14339 ; 701  |//$FILENAME siglogo9.src
                            14340 ; 702  |#define RSRC_SPLASH_SCREEN_9 246    
                            14341 ; 703  |//$FILENAME siglogo10.src
                            14342 ; 704  |#define RSRC_SPLASH_SCREEN_10 247    
                            14343 ; 705  |//$FILENAME siglogo11.src
                            14344 ; 706  |#define RSRC_SPLASH_SCREEN_11 248    
                            14345 ; 707  |//$FILENAME siglogo12.src
                            14346 ; 708  |#define RSRC_SPLASH_SCREEN_12 249    
                            14347 ; 709  |//$FILENAME siglogo13.src
                            14348 ; 710  |#define RSRC_SPLASH_SCREEN_13 250    
                            14349 ; 711  |//$FILENAME siglogo.src
                            14350 ; 712  |#define RSRC_SPLASH_SCREEN_ALL 251    
                            14351 ; 713  |
                            14352 ; 714  |//$FILENAME locked.src
                            14353 ; 715  |#define RSRC_LOCKED_SCREEN 252    
                            14354 ; 716  |
                            14355 ; 717  |/////////////////////////////////////////////////////////////////////////////////
                            14356 ; 718  |//  Shutdown
                            14357 ; 719  |/////////////////////////////////////////////////////////////////////////////////
                            14358 ; 720  |//$FILENAME string_arial_8_continue_holding_to_power_off.src
                            14359 ; 721  |#define RSRC_PDOWN_HOLD_STRING 253    
                            14360 ; 722  |//$FILENAME status_16_6_steps_0.src
                            14361 ; 723  |#define RSRC_PDOWN_STATUS_0 254    
                            14362 ; 724  |//$FILENAME status_16_6_steps_1.src
                            14363 ; 725  |#define RSRC_PDOWN_STATUS_1 255    
                            14364 ; 726  |//$FILENAME status_16_6_steps_2.src
                            14365 ; 727  |#define RSRC_PDOWN_STATUS_2 256    
                            14366 ; 728  |//$FILENAME status_16_6_steps_3.src
                            14367 ; 729  |#define RSRC_PDOWN_STATUS_3 257    
                            14368 ; 730  |//$FILENAME status_16_6_steps_4.src
                            14369 ; 731  |#define RSRC_PDOWN_STATUS_4 258    
                            14370 ; 732  |//$FILENAME status_16_6_steps_5.src
                            14371 ; 733  |#define RSRC_PDOWN_STATUS_5 259    
                            14372 ; 734  |//$FILENAME status_16_6_steps_6.src
                            14373 ; 735  |#define RSRC_PDOWN_STATUS_6 260    
                            14374 ; 736  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 243

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14375 ; 737  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14376 ; 738  |// EQ
                            14377 ; 739  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14378 ; 740  |//$FILENAME eq_clear_icon.src
                            14379 ; 741  |#define RSRC_EQ_CLEAR_ICON 261    
                            14380 ; 742  |//$FILENAME rock_icon.src
                            14381 ; 743  |#define RSRC_ROCK_ICON 262    
                            14382 ; 744  |//$FILENAME jazz_icon.src
                            14383 ; 745  |#define RSRC_JAZZ_ICON 263    
                            14384 ; 746  |//$FILENAME classic_icon.src
                            14385 ; 747  |#define RSRC_CLASSIC_ICON 264    
                            14386 ; 748  |//$FILENAME pop_icon.src
                            14387 ; 749  |#define RSRC_POP_ICON 265    
                            14388 ; 750  |//$FILENAME custom_icon.src
                            14389 ; 751  |#define RSRC_CUSTOM_ICON 266    
                            14390 ; 752  |
                            14391 ; 753  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14392 ; 754  |// AB
                            14393 ; 755  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14394 ; 756  |//$FILENAME ab_mark_a.src
                            14395 ; 757  |#define RSRC_AB_MARK_A_ICON 267    
                            14396 ; 758  |//$FILENAME ab_mark_b.src
                            14397 ; 759  |#define RSRC_AB_MARK_B_ICON 268    
                            14398 ; 760  |
                            14399 ; 761  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14400 ; 762  |// Menu Display Resources
                            14401 ; 763  |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            14402 ; 764  |//$FILENAME string_music_menu.src
                            14403 ; 765  |#define RSRC_STRING_MUSIC_MENU 269    
                            14404 ; 766  |//$FILENAME string_mvideo_menu.src
                            14405 ; 767  |#define RSRC_STRING_MVIDEO_MENU 270    
                            14406 ; 768  |//$FILENAME string_jpeg_display_menu.src
                            14407 ; 769  |#define RSRC_STRING_JPEG_DISPLAY_MENU 271    
                            14408 ; 770  |//$FILENAME string_jpeg_manual_menu.src
                            14409 ; 771  |#define RSRC_STRING_JPEG_MANUAL_MENU 272    
                            14410 ; 772  |//$FILENAME string_jpeg_slideshow_menu.src
                            14411 ; 773  |#define RSRC_STRING_JPEG_SLIDESHOW_MENU 273    
                            14412 ; 774  |//$FILENAME string_jpeg_thumbnail_menu.src
                            14413 ; 775  |#define RSRC_STRING_JPEG_THUMBNAIL_MENU 274    
                            14414 ; 776  |//$FILENAME string_voice_menu.src
                            14415 ; 777  |#define RSRC_STRING_VOICE_MENU 275    
                            14416 ; 778  |//$FILENAME string_audible_menu.src
                            14417 ; 779  |#define RSRC_STRING_AUDIBLE_MENU 276    
                            14418 ; 780  |//$FILENAME string_fmtuner_menu.src
                            14419 ; 781  |#define RSRC_STRING_FMTUNER_MENU 277    
                            14420 ; 782  |//$FILENAME string_settings_menu.src
                            14421 ; 783  |#define RSRC_STRING_SETTINGS_MENU 278    
                            14422 ; 784  |//$FILENAME string_eq_menu.src
                            14423 ; 785  |#define RSRC_STRING_EQ_MENU 279    
                            14424 ; 786  |//$FILENAME string_playmode_menu.src
                            14425 ; 787  |#define RSRC_STRING_PLAYMODE_MENU 280    
                            14426 ; 788  |//$FILENAME string_contrast_menu.src
                            14427 ; 789  |#define RSRC_STRING_CONTRAST_MENU 281    
                            14428 ; 790  |//$FILENAME string_pwrsavings_menu.src
                            14429 ; 791  |#define RSRC_STRING_PWRSAVINGS_MENU 282    
                            14430 ; 792  |//$FILENAME string_time_date_menu.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 244

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14431 ; 793  |#define RSRC_STRING_TIME_DATE_MENU 283    
                            14432 ; 794  |//$FILENAME string_set_time_menu.src
                            14433 ; 795  |#define RSRC_STRING_SET_TIME_MENU 284    
                            14434 ; 796  |//$FILENAME string_set_date_menu.src
                            14435 ; 797  |#define RSRC_STRING_SET_DATE_MENU 285    
                            14436 ; 798  |//$FILENAME string_exit_menu.src
                            14437 ; 799  |#define RSRC_STRING_EXIT_MENU 286    
                            14438 ; 800  |//$FILENAME string_rock_menu.src
                            14439 ; 801  |#define RSRC_STRING_ROCK_MENU 287    
                            14440 ; 802  |//$FILENAME string_pop_menu.src
                            14441 ; 803  |#define RSRC_STRING_POP_MENU 288    
                            14442 ; 804  |//$FILENAME string_classic_menu.src
                            14443 ; 805  |#define RSRC_STRING_CLASSIC_MENU 289    
                            14444 ; 806  |//$FILENAME string_normal_menu.src
                            14445 ; 807  |#define RSRC_STRING_NORMAL_MENU 290    
                            14446 ; 808  |//$FILENAME string_jazz_menu.src
                            14447 ; 809  |#define RSRC_STRING_JAZZ_MENU 291    
                            14448 ; 810  |//$FILENAME string_repeat1_menu.src
                            14449 ; 811  |#define RSRC_STRING_REPEAT1_MENU 292    
                            14450 ; 812  |//$FILENAME string_repeatall_menu.src
                            14451 ; 813  |#define RSRC_STRING_REPEATALL_MENU 293    
                            14452 ; 814  |//$FILENAME string_shuffle_menu.src
                            14453 ; 815  |#define RSRC_STRING_SHUFFLE_MENU 294    
                            14454 ; 816  |//$FILENAME string_repeatshuffle_menu.src
                            14455 ; 817  |#define RSRC_STRING_SHUFFLEREPEAT_MENU 295    
                            14456 ; 818  |//$FILENAME string_disable_menu.src
                            14457 ; 819  |#define RSRC_STRING_DISABLE_MENU 296    
                            14458 ; 820  |//$FILENAME string_1min_menu.src
                            14459 ; 821  |#define RSRC_STRING_1MIN_MENU 297    
                            14460 ; 822  |//$FILENAME string_2min_menu.src
                            14461 ; 823  |#define RSRC_STRING_2MIN_MENU 298    
                            14462 ; 824  |//$FILENAME string_5min_menu.src
                            14463 ; 825  |#define RSRC_STRING_5MIN_MENU 299    
                            14464 ; 826  |//$FILENAME string_10min_menu.src
                            14465 ; 827  |#define RSRC_STRING_10MIN_MENU 300    
                            14466 ; 828  |//$FILENAME string_system_menu.src
                            14467 ; 829  |#define RSRC_STRING_SYSTEM_MENU 301    
                            14468 ; 830  |//$FILENAME string_about_menu.src
                            14469 ; 831  |#define RSRC_STRING_ABOUT_MENU 302    
                            14470 ; 832  |//$FILENAME string_delete_menu.src
                            14471 ; 833  |#define RSRC_STRING_DELETE_MENU 303    
                            14472 ; 834  |//$FILENAME string_record_menu.src
                            14473 ; 835  |#define RSRC_STRING_RECORD_MENU 304    
                            14474 ; 836  |//$FILENAME string_spectrogram_menu.src
                            14475 ; 837  |#define RSRC_STRING_SPECTROGRAM_MENU 305    
                            14476 ; 838  |
                            14477 ; 839  |//$FILENAME string_end_of_slide_show.src
                            14478 ; 840  |#define RSRC_STRING_END_OF_SLIDE_SHOW 306    
                            14479 ; 841  |
                            14480 ; 842  |//$FILENAME string_mb.src
                            14481 ; 843  |#define RSRC_STRING_MB 307    
                            14482 ; 844  |
                            14483 ; 845  |//$FILENAME internal_media.src
                            14484 ; 846  |#define RSRC_INT_MEDIA 308    
                            14485 ; 847  |//$FILENAME external_media.src
                            14486 ; 848  |#define RSRC_EXT_MEDIA 309    
                            14487 ; 849  |
                            14488 ; 850  |//$FILENAME about_title.src
                            14489 ; 851  |#define RSRC_ABOUT_TITLE 310    
                            14490 ; 852  |//$FILENAME player_name.src
                            14491 ; 853  |#define RSRC_PLAYER_NAME_VER 311    
                            14492 ; 854  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 245

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14493 ; 855  |//$FILENAME settings_title.src
                            14494 ; 856  |#define RSRC_SETTINGS_TITLE 312    
                            14495 ; 857  |//$FILENAME jpeg_display_title.src
                            14496 ; 858  |#define RSRC_JPEG_DISPLAY_TITLE 313    
                            14497 ; 859  |//$FILENAME erase_title.src
                            14498 ; 860  |#define RSRC_ERASE_TITLE 314    
                            14499 ; 861  |
                            14500 ; 862  |//$FILENAME del_warning_no.src
                            14501 ; 863  |#define RSRC_DELETE_NO 315    
                            14502 ; 864  |//$FILENAME del_warning_yes.src
                            14503 ; 865  |#define RSRC_DELETE_YES 316    
                            14504 ; 866  |//$FILENAME del_warning_line1.src
                            14505 ; 867  |#define RSRC_WARNING_MSG_LINE1 317    
                            14506 ; 868  |//$FILENAME del_warning_line2.src
                            14507 ; 869  |#define RSRC_WARNING_MSG_LINE2 318    
                            14508 ; 870  |//$FILENAME lowbattery.src
                            14509 ; 871  |#define RSRC_BROWNOUT_BITMAP 319    
                            14510 ; 872  |//$FILENAME vbr.src
                            14511 ; 873  |#define RSRC_VBR_BITMAP 320    
                            14512 ; 874  |
                            14513 ; 875  |//$FILENAME string_song.src
                            14514 ; 876  |#define RSRC_STRING_SONG_COLON 321    
                            14515 ; 877  |//$FILENAME string_voice.src
                            14516 ; 878  |#define RSRC_STRING_VOICE_COLON 322    
                            14517 ; 879  |
                            14518 ; 880  |//$FILENAME time_date_title.src
                            14519 ; 881  |#define RSRC_TIME_DATE_TITLE 323    
                            14520 ; 882  |//$FILENAME set_time_title.src
                            14521 ; 883  |#define RSRC_SET_TIME_TITLE 324    
                            14522 ; 884  |//$FILENAME set_date_title.src
                            14523 ; 885  |#define RSRC_SET_DATE_TITLE 325    
                            14524 ; 886  |//$FILENAME string_searching.src
                            14525 ; 887  |#define RSRC_STRING_SEARCHING 326    
                            14526 ; 888  |/////////////////////////////////////////////////////////////////////////////////
                            14527 ; 889  |//  Save Changes
                            14528 ; 890  |/////////////////////////////////////////////////////////////////////////////////
                            14529 ; 891  |//$FILENAME save_changes_yes.src
                            14530 ; 892  |#define RSRC_SAVE_CHANGES_YES 327    
                            14531 ; 893  |//$FILENAME save_changes_no.src
                            14532 ; 894  |#define RSRC_SAVE_CHANGES_NO 328    
                            14533 ; 895  |//$FILENAME save_changes_cancel.src
                            14534 ; 896  |#define RSRC_SAVE_CHANGES_CANCEL 329    
                            14535 ; 897  |//$FILENAME save_changes_clear.src
                            14536 ; 898  |#define RSRC_SAVE_CHANGES_CLEAR 330    
                            14537 ; 899  |/////////////////////////////////////////////////////////////////////////////////
                            14538 ; 900  |//  Contrast
                            14539 ; 901  |/////////////////////////////////////////////////////////////////////////////////
                            14540 ; 902  |//$FILENAME contrast_title.src
                            14541 ; 903  |#define RSRC_CONTRAST_TITLE 331    
                            14542 ; 904  |//$FILENAME contrast_frame.src
                            14543 ; 905  |#define RSRC_CONTRAST_FRAME 332    
                            14544 ; 906  |//$FILENAME contrast_level0.src
                            14545 ; 907  |#define RSRC_CONTRAST_LEVEL_0 333    
                            14546 ; 908  |//$FILENAME contrast_level1.src
                            14547 ; 909  |#define RSRC_CONTRAST_LEVEL_1 334    
                            14548 ; 910  |//$FILENAME contrast_level2.src
                            14549 ; 911  |#define RSRC_CONTRAST_LEVEL_2 335    
                            14550 ; 912  |//$FILENAME contrast_level3.src
                            14551 ; 913  |#define RSRC_CONTRAST_LEVEL_3 336    
                            14552 ; 914  |//$FILENAME contrast_level4.src
                            14553 ; 915  |#define RSRC_CONTRAST_LEVEL_4 337    
                            14554 ; 916  |//$FILENAME contrast_level5.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 246

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14555 ; 917  |#define RSRC_CONTRAST_LEVEL_5 338    
                            14556 ; 918  |//$FILENAME contrast_level6.src
                            14557 ; 919  |#define RSRC_CONTRAST_LEVEL_6 339    
                            14558 ; 920  |//$FILENAME contrast_level7.src
                            14559 ; 921  |#define RSRC_CONTRAST_LEVEL_7 340    
                            14560 ; 922  |//$FILENAME contrast_level8.src
                            14561 ; 923  |#define RSRC_CONTRAST_LEVEL_8 341    
                            14562 ; 924  |//$FILENAME contrast_level9.src
                            14563 ; 925  |#define RSRC_CONTRAST_LEVEL_9 342    
                            14564 ; 926  |//$FILENAME contrast_level10.src
                            14565 ; 927  |#define RSRC_CONTRAST_LEVEL_10 343    
                            14566 ; 928  |
                            14567 ; 929  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14568 ; 930  |// Funclets
                            14569 ; 931  |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14570 ; 932  |//$FILENAME Funclet_SetRTC.src
                            14571 ; 933  |#define RSRC_FUNCLET_SET_RTC 344    
                            14572 ; 934  |//$FILENAME Funclet_InitRTC.src
                            14573 ; 935  |#define RSRC_FUNCLET_INIT_RTC 345    
                            14574 ; 936  |//$FILENAME Funclet_ReadRTC.src
                            14575 ; 937  |#define RSRC_FUNCLET_READ_RTC 346    
                            14576 ; 938  |//$FILENAME Funclet_SysResetAllInt.src
                            14577 ; 939  |#define RSRC_FUNCLET_SYSRESETALLINT 347    
                            14578 ; 940  |//$FILENAME Funclet_SysSetupDecVec.src
                            14579 ; 941  |#define RSRC_FUNCLET_SYSSETUPDECVEC 348    
                            14580 ; 942  |//$FILENAME Funclet_SysSetupEncVec.src
                            14581 ; 943  |#define RSRC_FUNCLET_SYSSETUPENCVEC 349    
                            14582 ; 944  |//$FILENAME Funclet_SysTimeInit.src
                            14583 ; 945  |#define RSRC_FUNCLET_SYSTIMEINIT 350    
                            14584 ; 946  |//$FILENAME Funclet_AnalogInit.src
                            14585 ; 947  |#define RSRC_FUNCLET_ANALOGINIT 351    
                            14586 ; 948  |//$FILENAME Funclet_UsbConnected.src
                            14587 ; 949  |#define RSRC_FUNCLET_USBCONNECTED 352    
                            14588 ; 950  |//$FILENAME Funclet_ButtonInit.src
                            14589 ; 951  |#define RSRC_FUNCLET_BUTTONINIT 353    
                            14590 ; 952  |//$FILENAME Funclet_PowerUpHeadPhones.src
                            14591 ; 953  |#define RSRC_FUNCLET_POWERUPHEADPHONES 354    
                            14592 ; 954  |//$FILENAME Funclet_PowerDownHeadPhones.src
                            14593 ; 955  |#define RSRC_FUNCLET_POWERDOWNHEADPHONES 355    
                            14594 ; 956  |//$FILENAME Funclet_StartProject.src
                            14595 ; 957  |#define RSRC_FUNCLET_STARTPROJECT 356    
                            14596 ; 958  |//$FILENAME Funclet_ModuleSetTimer.src
                            14597 ; 959  |#define RSRC_FUNCLET_MODULESETTIMER 357    
                            14598 ; 960  |//$FILENAME null.src
                            14599 ; 961  |#define RSRC_FUNCLET_MEDIADETECTION 358    
                            14600 ; 962  |//$FILENAME Funclet_SysStopDecoder.src
                            14601 ; 963  |#define RSRC_FUNCLET_SYSSTOPDECODER 359    
                            14602 ; 964  |//$FILENAME Funclet_SysStopEncoder.src
                            14603 ; 965  |#define RSRC_FUNCLET_SYSSTOPENCODER 360    
                            14604 ; 966  |//$FILENAME Funclet_SysSetDecoder.src
                            14605 ; 967  |#define RSRC_FUNCLET_SYSSETDECODER 361    
                            14606 ; 968  |//$FILENAME Funclet_SysSetEncoder.src
                            14607 ; 969  |#define RSRC_FUNCLET_SYSSETENCODER 362    
                            14608 ; 970  |//$FILENAME null.src
                            14609 ; 971  |#define RSRC_FUNCLET_PROCESSPT 363    
                            14610 ; 972  |//$FILENAME Funclet_DisplaySplashScreen.src
                            14611 ; 973  |#define RSRC_FUNCLET_DISPLAYSPLASHSCREEN 364    
                            14612 ; 974  |//$FILENAME Funclet_SysGetVolume.src
                            14613 ; 975  |#define RSRC_FUNCLET_SYSGETVOLUME 365    
                            14614 ; 976  |//$FILENAME null.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 247

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14615 ; 977  |#define RSRC_FUNCLET_MMCENUMERATEPHYSICALDEVICE 366    
                            14616 ; 978  |//$FILENAME null.src
                            14617 ; 979  |#define RSRC_FUNCLET_RESETDEVICE 367    
                            14618 ; 980  |//$FILENAME null.src
                            14619 ; 981  |#define RSRC_FUNCLET_PROCESSCSD 368    
                            14620 ; 982  |//$FILENAME null.src
                            14621 ; 983  |#define RSRC_FUNCLET_PROCESSPARTITION 369    
                            14622 ; 984  |//$FILENAME null.src
                            14623 ; 985  |#define RSRC_FUNCLET_PARTITIONENTRYCOPY 370    
                            14624 ; 986  |//$FILENAME Funclet_MixerMasterFadeOut.src
                            14625 ; 987  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_OUT 371    
                            14626 ; 988  |//$FILENAME Funclet_MixerMasterFadeIn.src
                            14627 ; 989  |#define RSRC_FUNCLET_MIXER_MASTER_FADE_IN 372    
                            14628 ; 990  |//$FILENAME Funclet_EncSetProperties.src
                            14629 ; 991  |#define RSRC_FUNCLET_ENCSETPROPERTIES 373    
                            14630 ; 992  |//$FILENAME null.src
                            14631 ; 993  |#define RSRC_FUNCLET_DOESMBREXIST 374    
                            14632 ; 994  |//$FILENAME null.src
                            14633 ; 995  |#define RSRC_FUNCLET_EXTRACTPARTITIONPARAMETERS 375    
                            14634 ; 996  |//$FILENAME Funclet_SaveSettings.src
                            14635 ; 997  |#define RSRC_FUNCLET_SYSSAVESETTINGS 376    
                            14636 ; 998  |//$FILENAME Funclet_LoadSettings.src
                            14637 ; 999  |#define RSRC_FUNCLET_SYSLOADSETTINGS 377    
                            14638 ; 1000 |///////////////////////////////////////////////////////////////
                            14639 ; 1001 |// Sanyo FM Tuner Fuclet
                            14640 ; 1002 |///////////////////////////////////////////////////////////////
                            14641 ; 1003 |//RSRC_FUNCLET_TUNER_DRIVER_INIT    equ      334    ;$FILENAME Funclet_TunerDriverInit.src
                                  
                            14642 ; 1004 |//RSRC_FUNCLET_TUNER_SCAN_STATIONS    equ      335    ;$FILENAME Funclet_TunerScanStations
                                  .src
                            14643 ; 1005 |//RSRC_FUNCLET_TUNER_SET_TO_PRESET    equ      336    ;$FILENAME Funclet_TunerSetToPreset.
                                  src
                            14644 ; 1006 |//RSRC_FUNCLET_TUNER_SET_MONO_STEREO    equ      337    ;$FILENAME Funclet_TunerSetMonoSte
                                  reo.src
                            14645 ; 1007 |//RSRC_FUNCLET_TUNER_SET_STANDBY    equ      338    ;$FILENAME Funclet_TunerSetStandby.src
                                  
                            14646 ; 1008 |//RSRC_FUNCLET_TUNER_SET_PRESET    equ      339    ;$FILENAME Funclet_TunerSetPreset.src
                            14647 ; 1009 |//RSRC_FUNCLET_TUNER_ERASE_PRESET    equ      340    ;$FILENAME Funclet_TunerErasePreset.s
                                  rc
                            14648 ; 1010 |//RSRC_FUNCLET_TUNER_SET_IF    equ      341    ;$FILENAME Funclet_TunerSetIf.src
                            14649 ; 1011 |//RSRC_FUNCLET_TUNER_WRITE_IF_OSC    equ      342    ;$FILENAME Funclet_TunerWriteIfOSc.sr
                                  c
                            14650 ; 1012 |//RSRC_FUNCLET_TUNER_GET_FIELD_STRENGTH    equ      343    ;$FILENAME Funclet_TunerGetFiel
                                  dStrength.src
                            14651 ; 1013 |//RSRC_FUNCLET_TUNER_INIT_RF_CAP_OSC    equ      344    ;$FILENAME Funclet_TunerInitRfCapO
                                  sc.src
                            14652 ; 1014 |//RSRC_FUNCLET_TUNER_STORE_FM_STATION    equ      345    ;$FILENAME Funclet_TunerStoreFmSt
                                  ation.src
                            14653 ; 1015 |//RSRC_FUNCLET_TUNER_STORE_FM_PRESET    equ      346    ;$FILENAME Funclet_TunerStoreFmPre
                                  set.src
                            14654 ; 1016 |//RSRC_FUNCLET_TUNER_SET_REGION    equ      347    ;$FILENAME Funclet_TunerSetRegion.src
                            14655 ; 1017 |
                            14656 ; 1018 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14657 ; 1019 |// WMA Resources
                            14658 ; 1020 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14659 ; 1021 |//$FILENAME wmaCore.src
                            14660 ; 1022 |#define RSRC_WMA_CORE 378    
                            14661 ; 1023 |//$FILENAME wmaMidLow.src
                            14662 ; 1024 |#define RSRC_WMA_MIDLOW 379    
                            14663 ; 1025 |//$FILENAME wmaHigh.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 248

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14664 ; 1026 |#define RSRC_WMA_HIGH 380    
                            14665 ; 1027 |//$FILENAME wmaHighMid.src
                            14666 ; 1028 |#define RSRC_WMA_HIGHMID 381    
                            14667 ; 1029 |//$FILENAME wmaMid.src
                            14668 ; 1030 |#define RSRC_WMA_MID 382    
                            14669 ; 1031 |//$FILENAME wmaLow.src
                            14670 ; 1032 |#define RSRC_WMA_LOW 383    
                            14671 ; 1033 |//$FILENAME wmaX1mem.src
                            14672 ; 1034 |#define RSRC_WMA_DATA_X1 384    
                            14673 ; 1035 |//$FILENAME wmaYmem.src
                            14674 ; 1036 |#define RSRC_WMA_DATA_Y 385    
                            14675 ; 1037 |//$FILENAME wmaLXmem.src
                            14676 ; 1038 |#define RSRC_WMA_DATA_L_X 386    
                            14677 ; 1039 |//$FILENAME wmaLYmem.src
                            14678 ; 1040 |#define RSRC_WMA_DATA_L_Y 387    
                            14679 ; 1041 |//$FILENAME wmaHuff44Qb.src
                            14680 ; 1042 |#define RSRC_WMA_HUFF44QB 388    
                            14681 ; 1043 |//$FILENAME wmaHuff44Ob.src
                            14682 ; 1044 |#define RSRC_WMA_HUFF44OB 389    
                            14683 ; 1045 |//$FILENAME wmaHuff16Ob.src
                            14684 ; 1046 |#define RSRC_WMA_HUFF16OB 390    
                            14685 ; 1047 |//$FILENAME drmpdcommon.src
                            14686 ; 1048 |#define RSRC_DRMPD_COMMON 391    
                            14687 ; 1049 |//$FILENAME januswmasupport.src
                            14688 ; 1050 |#define RSRC_JANUS_WMASUPPORT 392    
                            14689 ; 1051 |//$FILENAME wmalicenseinit.src
                            14690 ; 1052 |#define RSRC_WMA_LICENSEINIT 393    
                            14691 ; 1053 |//$FILENAME wma_tables.src
                            14692 ; 1054 |#define RSRC_WMA_TABLES 394    
                            14693 ; 1055 |//$FILENAME janus_tables.src
                            14694 ; 1056 |#define RSRC_JANUS_TABLES 395    
                            14695 ; 1057 |//$FILENAME wma_constants.src
                            14696 ; 1058 |#define RSRC_WMA_CONSTANTS 396    
                            14697 ; 1059 |//$FILENAME janus_constants.src
                            14698 ; 1060 |#define RSRC_JANUS_CONSTANTS 397    
                            14699 ; 1061 |//$FILENAME janus_xmem.src
                            14700 ; 1062 |#define RSRC_JANUS_X 398    
                            14701 ; 1063 |//$FILENAME janusy_data.src
                            14702 ; 1064 |#define RSRC_JANUSY_DATA 399    
                            14703 ; 1065 |
                            14704 ; 1066 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14705 ; 1067 |// Fonts -- these are last because they are very large
                            14706 ; 1068 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            14707 ; 1069 |//$FILENAME font_table.src
                            14708 ; 1070 |#define RSRC_FONT_TABLE 400    
                            14709 ; 1071 |//$FILENAME font_PGM.src
                            14710 ; 1072 |#define RSRC_PGM_8 401    
                            14711 ; 1073 |//$FILENAME font_SGMs.src
                            14712 ; 1074 |#define RSRC_SGMS_8 402    
                            14713 ; 1075 |//$FILENAME font_script_00.src
                            14714 ; 1076 |#define RSRC_SCRIPT_00_8 403    
                            14715 ; 1077 |//$FILENAME font_scripts.src
                            14716 ; 1078 |#define RSRC_SCRIPTS_8 404    
                            14717 ; 1079 |//$FILENAME font_PDM.src
                            14718 ; 1080 |#define RSRC_PDM 405    
                            14719 ; 1081 |//$FILENAME font_SDMs.src
                            14720 ; 1082 |#define RSRC_SDMS 406    
                            14721 ; 1083 |//$FILENAME bitmap_warning.src
                            14722 ; 1084 |#define RSRC_WARNING 407    
                            14723 ; 1085 |//$FILENAME bitmap_device_full.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 249

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14724 ; 1086 |#define RSRC_DEVICE_FULL 408    
                            14725 ; 1087 |
                            14726 ; 1088 |
                            14727 ; 1089 |//$FILENAME lcd_controller_init.src
                            14728 ; 1090 |#define RSRC_LCD_INIT_SEQ 409    
                            14729 ; 1091 |
                            14730 ; 1092 |//$FILENAME Funclet_DBCSToUnicode.src
                            14731 ; 1093 |#define RSRC_FUNCLET_DBCS_TO_UNICODE 410    
                            14732 ; 1094 |//$FILENAME Funclet_DBCSToUnicodeDstXSrcY.src
                            14733 ; 1095 |#define RSRC_FUNCLET_DBCS_TO_UNICODE_DSTX_SRCY 411    
                            14734 ; 1096 |//$FILENAME Funclet_LCDSetFont.src
                            14735 ; 1097 |#define RSRC_FUNCLET_SET_FONT 412    
                            14736 ; 1098 |//$FILENAME Funclet_GetTextWidthAddressUnicode.src
                            14737 ; 1099 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_UNICODE 413    
                            14738 ; 1100 |//$FILENAME Funclet_GetTextWidthResourceUnicode.src
                            14739 ; 1101 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_UNICODE 414    
                            14740 ; 1102 |//$FILENAME Funclet_GetTextWidthAddressDBCS.src
                            14741 ; 1103 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_ADDRESS_DBCS 415    
                            14742 ; 1104 |//$FILENAME Funclet_GetTextWidthResourceDBCS.src
                            14743 ; 1105 |#define RSRC_FUNCLET_GET_TEXT_WIDTH_RESOURCE_DBCS 416    
                            14744 ; 1106 |//$FILENAME Funclet_ChipSerialNumberInit.src
                            14745 ; 1107 |#define RSRC_FUNCLET_CHIPSERIALNUMBERINIT 417    
                            14746 ; 1108 |//$FILENAME Funclet_InternalMediaSerialNumberInit.src
                            14747 ; 1109 |#define RSRC_FUNCLET_INTERNALMEDIASERIALNUMBERINIT 418    
                            14748 ; 1110 |//$FILENAME Funclet_ChipGetSerialNumber.src
                            14749 ; 1111 |#define RSRC_FUNCLET_CHIPGETSERIALNUMBER 419    
                            14750 ; 1112 |//$FILENAME Funclet_CreateNullSerialNumber.src
                            14751 ; 1113 |#define RSRC_FUNCLET_CREATENULLSERIALNUMBER 420    
                            14752 ; 1114 |//$FILENAME Funclet_ConvertHexToASCII.src
                            14753 ; 1115 |#define RSRC_FUNCLET_CONVERTHEXTOASCII 421    
                            14754 ; 1116 |//$FILENAME Funclet_LowResolutionAdcInit.src
                            14755 ; 1117 |#define RSRC_FUNCLET_LOWRESOLUTIONADCINIT 422    
                            14756 ; 1118 |
                            14757 ; 1119 |
                            14758 ; 1120 |//$FILENAME sysrecord.src
                            14759 ; 1121 |#define RSRC_SYSRECORD_CODE 423    
                            14760 ; 1122 |
                            14761 ; 1123 |//$FILENAME string_record_settings.src
                            14762 ; 1124 |#define RSRC_STRING_RECORD_SETTINGS 424    
                            14763 ; 1125 |//$FILENAME string_sample_rate.src
                            14764 ; 1126 |#define RSRC_STRING_SAMPLE_RATE 425    
                            14765 ; 1127 |//$FILENAME string_encoder.src
                            14766 ; 1128 |#define RSRC_STRING_ENCODER 426    
                            14767 ; 1129 |//$FILENAME string_adpcm.src
                            14768 ; 1130 |#define RSRC_STRING_ADPCM 427    
                            14769 ; 1131 |//$FILENAME string_msadpcm.src
                            14770 ; 1132 |#define RSRC_STRING_MSADPCM 428    
                            14771 ; 1133 |//$FILENAME string_imadpcm.src
                            14772 ; 1134 |#define RSRC_STRING_IMADPCM 429    
                            14773 ; 1135 |//$FILENAME string_pcm.src
                            14774 ; 1136 |#define RSRC_STRING_PCM 430    
                            14775 ; 1137 |//$FILENAME string_internal.src
                            14776 ; 1138 |#define RSRC_STRING_INTERNAL 431    
                            14777 ; 1139 |//$FILENAME string_external.src
                            14778 ; 1140 |#define RSRC_STRING_EXTERNAL 432    
                            14779 ; 1141 |//$FILENAME string_device.src
                            14780 ; 1142 |#define RSRC_STRING_DEVICE 433    
                            14781 ; 1143 |//$FILENAME string_source.src
                            14782 ; 1144 |#define RSRC_STRING_SOURCE 434    
                            14783 ; 1145 |//$FILENAME string_microphone.src
                            14784 ; 1146 |#define RSRC_STRING_MICROPHONE 435    
                            14785 ; 1147 |//$FILENAME string_linein.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 250

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14786 ; 1148 |#define RSRC_STRING_LINEIN 436    
                            14787 ; 1149 |//$FILENAME string_bits.src
                            14788 ; 1150 |#define RSRC_STRING_BITS 437    
                            14789 ; 1151 |//$FILENAME string_4.src
                            14790 ; 1152 |#define RSRC_STRING_4 438    
                            14791 ; 1153 |//$FILENAME string_8.src
                            14792 ; 1154 |#define RSRC_STRING_8 439    
                            14793 ; 1155 |//$FILENAME string_16.src
                            14794 ; 1156 |#define RSRC_STRING_16 440    
                            14795 ; 1157 |//$FILENAME string_24.src
                            14796 ; 1158 |#define RSRC_STRING_24 441    
                            14797 ; 1159 |//$FILENAME string_fm.src
                            14798 ; 1160 |#define RSRC_STRING_FM 442    
                            14799 ; 1161 |//$FILENAME string_mono.src
                            14800 ; 1162 |#define RSRC_STRING_MONO 443    
                            14801 ; 1163 |//$FILENAME string_stereo.src
                            14802 ; 1164 |#define RSRC_STRING_STEREO 444    
                            14803 ; 1165 |//$FILENAME string_8000hz.src
                            14804 ; 1166 |#define RSRC_STRING_8000HZ 445    
                            14805 ; 1167 |//$FILENAME string_11025hz.src
                            14806 ; 1168 |#define RSRC_STRING_11025HZ 446    
                            14807 ; 1169 |//$FILENAME string_16000hz.src
                            14808 ; 1170 |#define RSRC_STRING_16000HZ 447    
                            14809 ; 1171 |//$FILENAME string_22050hz.src
                            14810 ; 1172 |#define RSRC_STRING_22050HZ 448    
                            14811 ; 1173 |//$FILENAME string_32000hz.src
                            14812 ; 1174 |#define RSRC_STRING_32000HZ 449    
                            14813 ; 1175 |//$FILENAME string_44100hz.src
                            14814 ; 1176 |#define RSRC_STRING_44100HZ 450    
                            14815 ; 1177 |//$FILENAME string_48000hz.src
                            14816 ; 1178 |#define RSRC_STRING_48000HZ 451    
                            14817 ; 1179 |//$FILENAME string_channels.src
                            14818 ; 1180 |#define RSRC_STRING_CHANNELS 452    
                            14819 ; 1181 |//$FILENAME string_spaces.src
                            14820 ; 1182 |#define RSRC_STRING_SPACES 453    
                            14821 ; 1183 |//$FILENAME slider_bar.src
                            14822 ; 1184 |#define RSRC_SLIDER_BAR 454    
                            14823 ; 1185 |//$FILENAME slider_bar_inv.src
                            14824 ; 1186 |#define RSRC_SLIDER_BAR_INV 455    
                            14825 ; 1187 |//$FILENAME slider_track.src
                            14826 ; 1188 |#define RSRC_SLIDER_TRACK 456    
                            14827 ; 1189 |//$FILENAME string_no_files.src
                            14828 ; 1190 |#define RSRC_STRING_NO_FILES 457    
                            14829 ; 1191 |
                            14830 ; 1192 |/////////////////////////////////////////////////////////////////////
                            14831 ; 1193 |//  Time and Date Resource Strings
                            14832 ; 1194 |/////////////////////////////////////////////////////////////////////
                            14833 ; 1195 |//$FILENAME string_sunday.src
                            14834 ; 1196 |#define RSRC_STRING_SUNDAY 458    
                            14835 ; 1197 |//$FILENAME string_monday.src
                            14836 ; 1198 |#define RSRC_STRING_MONDAY 459    
                            14837 ; 1199 |//$FILENAME string_tuesday.src
                            14838 ; 1200 |#define RSRC_STRING_TUESDAY 460    
                            14839 ; 1201 |//$FILENAME string_wednesday.src
                            14840 ; 1202 |#define RSRC_STRING_WEDNESDAY 461    
                            14841 ; 1203 |//$FILENAME string_thursday.src
                            14842 ; 1204 |#define RSRC_STRING_THURSDAY 462    
                            14843 ; 1205 |//$FILENAME string_friday.src
                            14844 ; 1206 |#define RSRC_STRING_FRIDAY 463    
                            14845 ; 1207 |//$FILENAME string_saturday.src
                            14846 ; 1208 |#define RSRC_STRING_SATURDAY 464    
                            14847 ; 1209 |//$FILENAME string_am.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 251

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14848 ; 1210 |#define RSRC_STRING_AM 465    
                            14849 ; 1211 |//$FILENAME string_pm.src
                            14850 ; 1212 |#define RSRC_STRING_PM 466    
                            14851 ; 1213 |//$FILENAME string_amclear.src
                            14852 ; 1214 |#define RSRC_STRING_AMCLEAR 467    
                            14853 ; 1215 |//$FILENAME string_slash.src
                            14854 ; 1216 |#define RSRC_STRING_SLASH 468    
                            14855 ; 1217 |//$FILENAME string_colon.src
                            14856 ; 1218 |#define RSRC_STRING_COLON 469    
                            14857 ; 1219 |//$FILENAME string_12hour.src
                            14858 ; 1220 |#define RSRC_STRING_12HOUR 470    
                            14859 ; 1221 |//$FILENAME string_24hour.src
                            14860 ; 1222 |#define RSRC_STRING_24HOUR 471    
                            14861 ; 1223 |//$FILENAME string_format.src
                            14862 ; 1224 |#define RSRC_STRING_FORMAT 472    
                            14863 ; 1225 |//$FILENAME string_mmddyyyy.src
                            14864 ; 1226 |#define RSRC_STRING_MMDDYYYY 473    
                            14865 ; 1227 |//$FILENAME string_ddmmyyyy.src
                            14866 ; 1228 |#define RSRC_STRING_DDMMYYYY 474    
                            14867 ; 1229 |//$FILENAME string_yyyymmdd.src
                            14868 ; 1230 |#define RSRC_STRING_YYYYMMDD 475    
                            14869 ; 1231 |//$FILENAME string_ok.src
                            14870 ; 1232 |#define RSRC_STRING_OK 476    
                            14871 ; 1233 |//$FILENAME string_cancel.src
                            14872 ; 1234 |#define RSRC_STRING_CANCEL 477    
                            14873 ; 1235 |//$FILENAME negative_sign.src
                            14874 ; 1236 |#define RSRC_NEGATIVE_SIGN 478    
                            14875 ; 1237 |//$FILENAME string_dec_pt5.src
                            14876 ; 1238 |#define RSRC_DEC_PT5_STRING 479    
                            14877 ; 1239 |//$FILENAME string_dec_pt0.src
                            14878 ; 1240 |#define RSRC_DEC_PT0_STRING 480    
                            14879 ; 1241 |//$FILENAME string_db.src
                            14880 ; 1242 |#define RSRC_DB_STRING 481    
                            14881 ; 1243 |//$FILENAME string_hz2.src
                            14882 ; 1244 |#define RSRC_HZ2_STRING 482    
                            14883 ; 1245 |
                            14884 ; 1246 |
                            14885 ; 1247 |//$FILENAME record_settings_menu_code_bank.src
                            14886 ; 1248 |#define RSRC_RECORD_SETTINGS_MENU_CODE_BANK 483    
                            14887 ; 1249 |//$FILENAME metadata_codebank.src
                            14888 ; 1250 |#define RSRC_METADATA_CODEBANK 484    
                            14889 ; 1251 |//$FILENAME mp3metadata_codebank.src
                            14890 ; 1252 |#define RSRC_MP3_METADATA_CODEBANK 485    
                            14891 ; 1253 |//$FILENAME wmametadata_codebank.src
                            14892 ; 1254 |#define RSRC_WMA_METADATA_CODEBANK 486    
                            14893 ; 1255 |//$FILENAME wavmetadata_codebank.src
                            14894 ; 1256 |#define RSRC_WAV_METADATA_CODEBANK 487    
                            14895 ; 1257 |//$FILENAME smvmetadata_codebank.src
                            14896 ; 1258 |#define RSRC_SMV_METADATA_CODEBANK 488    
                            14897 ; 1259 |//$FILENAME playlist2init_codebank.src
                            14898 ; 1260 |#define RSRC_PLAYLIST2INIT_CODEBANK 489    
                            14899 ; 1261 |
                            14900 ; 1262 |//$FILENAME delete_successful.src
                            14901 ; 1263 |#define RSRC_DELETE_SUCCESSFUL 490    
                            14902 ; 1264 |//$FILENAME delete_error.src
                            14903 ; 1265 |#define RSRC_DELETE_ERROR 491    
                            14904 ; 1266 |//$FILENAME lic_expired.src
                            14905 ; 1267 |#define RSRC_LIC_EXPIRED 492    
                            14906 ; 1268 |//$FILENAME id3v2_codebank.src
                            14907 ; 1269 |#define RSRC_ID3V2_CODEBANK 493    
                            14908 ; 1270 |//$FILENAME id3v2lyrics_codebank.src
                            14909 ; 1271 |#define RSRC_ID3V2_LYRICS_CODEBANK 494    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 252

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14910 ; 1272 |//$FILENAME lyrics3_codebank.src
                            14911 ; 1273 |#define RSRC_LYRICS3_CODEBANK 495    
                            14912 ; 1274 |//$FILENAME lrc_codebank.src
                            14913 ; 1275 |#define RSRC_LRC_CODEBANK 496    
                            14914 ; 1276 |//$FILENAME lyrics_api_codebank.src
                            14915 ; 1277 |#define RSRC_LYRICS_API_CODEBANK 497    
                            14916 ; 1278 |//$FILENAME wmalyrics_codebank.src
                            14917 ; 1279 |#define RSRC_WMA_LYRICS_CODEBANK 498    
                            14918 ; 1280 |//$FILENAME apicframe_codebank.src
                            14919 ; 1281 |#define RSRC_APIC_FRAME_CODEBANK 499    
                            14920 ; 1282 |
                            14921 ; 1283 |//$FILENAME exmediaerror1.src
                            14922 ; 1284 |#define RSRC_EXTERNAL_MEDIA_ERROR1 500    
                            14923 ; 1285 |//$FILENAME exmediaerror2.src
                            14924 ; 1286 |#define RSRC_EXTERNAL_MEDIA_ERROR2 501    
                            14925 ; 1287 |//$FILENAME inmediaerror1.src
                            14926 ; 1288 |#define RSRC_INTERNAL_MEDIA_ERROR1 502    
                            14927 ; 1289 |
                            14928 ; 1290 |//$FILENAME backlight_title.src
                            14929 ; 1291 |#define RSRC_BACKLIGHT_TITLE 503    
                            14930 ; 1292 |//$FILENAME backlight_state_on.src
                            14931 ; 1293 |#define RSRC_BACKLIGHT_STATE_ON 504    
                            14932 ; 1294 |//$FILENAME backlight_state_off.src
                            14933 ; 1295 |#define RSRC_BACKLIGHT_STATE_OFF 505    
                            14934 ; 1296 |//$FILENAME backlightmenu.src
                            14935 ; 1297 |#define RSRC_BACKLIGHT_MENU_CODE_BANK 506    
                            14936 ; 1298 |//$FILENAME string_backlight_menu.src
                            14937 ; 1299 |#define RSRC_STRING_BACKLIGHT_MENU 507    
                            14938 ; 1300 |
                            14939 ; 1301 |//$FILENAME enc_mp3mod.src
                            14940 ; 1302 |#define RSRC_ENC_MP3_MOD_CODE 508    
                            14941 ; 1303 |//$FILENAME enc_mp3p.src
                            14942 ; 1304 |#define RSRC_ENC_MP3P_CODE 509    
                            14943 ; 1305 |//$FILENAME enc_mp3x.src
                            14944 ; 1306 |#define RSRC_ENC_MP3X_CODE 510    
                            14945 ; 1307 |//$FILENAME enc_mp3y.src
                            14946 ; 1308 |#define RSRC_ENC_MP3Y_CODE 511    
                            14947 ; 1309 |//$FILENAME mp3_implementation.src
                            14948 ; 1310 |#define RSRC_MP3_IMPLEMENTATION 512    
                            14949 ; 1311 |//$FILENAME string_mp3.src
                            14950 ; 1312 |#define RSRC_STRING_MP3 513    
                            14951 ; 1313 |//$FILENAME string_all.src
                            14952 ; 1314 |#define RSRC_STRING_ALL 514    
                            14953 ; 1315 |
                            14954 ; 1316 |//$FILENAME mediastartup.src
                            14955 ; 1317 |#define RSRC_NANDMEDIAINIT 515    
                            14956 ; 1318 |#define RSRC_NANDMEDIAALLOCATE 0
                            14957 ; 1319 |#define RSRC_NANDMEDIADISCOVERALLOCATION 0
                            14958 ; 1320 |#define RSRC_NANDMEDIAGETMEDIATABLE RSRC_NANDMEDIAINIT
                            14959 ; 1321 |#define RSRC_NANDMEDIAGETINFO RSRC_NANDMEDIAINIT
                            14960 ; 1322 |#define RSRC_NANDMEDIAERASE 0
                            14961 ; 1323 |
                            14962 ; 1324 |//$FILENAME nanddatadriveinit.src
                            14963 ; 1325 |#define RSRC_NANDDATADRIVEINIT 516    
                            14964 ; 1326 |#define RSRC_NANDDATADRIVEGETINFO RSRC_NANDDATADRIVEREADSECTOR
                            14965 ; 1327 |#define RSRC_NANDDATADRIVESETINFO 0
                            14966 ; 1328 |//$FILENAME nanddatadrivereadsector.src
                            14967 ; 1329 |#define RSRC_NANDDATADRIVEREADSECTOR 517    
                            14968 ; 1330 |#define RSRC_NANDDATADRIVEWRITESECTOR RSRC_NANDDATADRIVEREADSECTOR
                            14969 ; 1331 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESETUP 0
                            14970 ; 1332 |#define RSRC_NANDDATADRIVEDUMBMULTIWRITESECTOR 0
                            14971 ; 1333 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESETUP 0
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 253

M:ADDR CODE           CYCLES LINE SOURCELINE
                            14972 ; 1334 |#define RSRC_NANDDATADRIVECACHEMULTIWRITESECTOR 0
                            14973 ; 1335 |#define RSRC_NANDDATADRIVEERASE 0
                            14974 ; 1336 |#define RSRC_NANDDATADRIVEFLUSH RSRC_NANDDATADRIVEREADSECTOR
                            14975 ; 1337 |
                            14976 ; 1338 |#define RSRC_NANDSYSTEMDRIVEINIT RSRC_NANDMEDIAINIT
                            14977 ; 1339 |#define RSRC_NANDSYSTEMDRIVEGETINFO RSRC_NANDMEDIAINIT
                            14978 ; 1340 |#define RSRC_NANDSYSTEMDRIVESETINFO 0
                            14979 ; 1341 |#define RSRC_NANDSYSTEMDRIVEREADSECTOR 0
                            14980 ; 1342 |#define RSRC_NANDSYSTEMDRIVEWRITESECTOR 0
                            14981 ; 1343 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESETUP 0
                            14982 ; 1344 |#define RSRC_NANDSYSTEMDRIVEMULTIWRITESECTOR 0
                            14983 ; 1345 |#define RSRC_NANDSYSTEMDRIVEERASE 0
                            14984 ; 1346 |#define RSRC_NANDSYSTEMDRIVEFLUSH 0
                            14985 ; 1347 |
                            14986 ; 1348 |//$FILENAME vbr_codebank.src
                            14987 ; 1349 |#define RSRC_VBR_CODEBANK 518    
                            14988 ; 1350 |
                            14989 ; 1351 |//$FILENAME string_recordtest_menu.src
                            14990 ; 1352 |#define RSRC_STRING_RECORDTEST_MENU 519    
                            14991 ; 1353 |//$FILENAME string_recordtest_duration.src
                            14992 ; 1354 |#define RSRC_STRING_DURATION 520    
                            14993 ; 1355 |//$FILENAME string_recordtest_time5.src
                            14994 ; 1356 |#define RSRC_STRING_TIME5 521    
                            14995 ; 1357 |//$FILENAME string_recordtest_time10.src
                            14996 ; 1358 |#define RSRC_STRING_TIME10 522    
                            14997 ; 1359 |//$FILENAME string_recordtest_time30.src
                            14998 ; 1360 |#define RSRC_STRING_TIME30 523    
                            14999 ; 1361 |//$FILENAME string_recordtest_time60.src
                            15000 ; 1362 |#define RSRC_STRING_TIME60 524    
                            15001 ; 1363 |//$FILENAME string_recordtest_time300.src
                            15002 ; 1364 |#define RSRC_STRING_TIME300 525    
                            15003 ; 1365 |//$FILENAME string_recordtest_time600.src
                            15004 ; 1366 |#define RSRC_STRING_TIME600 526    
                            15005 ; 1367 |
                            15006 ; 1368 |//$FILENAME test_title.src
                            15007 ; 1369 |#define RSRC_TEST_TITLE 527    
                            15008 ; 1370 |//$FILENAME testmenu.src
                            15009 ; 1371 |#define RSRC_TEST_MENU_CODE_BANK 528    
                            15010 ; 1372 |
                            15011 ; 1373 |
                            15012 ; 1374 |//$FILENAME mmcmediastartup.src
                            15013 ; 1375 |#define RSRC_MMCDATADRIVEINIT 529    
                            15014 ; 1376 |#define RSRC_MMCMEDIAALLOCATE RSRC_MMCDATADRIVEINIT
                            15015 ; 1377 |#define RSRC_MMCMEDIADISCOVERALLOCATION RSRC_MMCDATADRIVEINIT
                            15016 ; 1378 |//$FILENAME mmcinfo.src
                            15017 ; 1379 |#define RSRC_MMCMEDIAGETINFO 530    
                            15018 ; 1380 |#define RSRC_MMCMEDIAGETMEDIATABLE RSRC_MMCMEDIAGETINFO
                            15019 ; 1381 |//$FILENAME mmcerase.src
                            15020 ; 1382 |#define RSRC_MMCMEDIAERASE 531    
                            15021 ; 1383 |
                            15022 ; 1384 |
                            15023 ; 1385 |#define RSRC_MMCDATADRIVEFLUSH RSRC_MMCDATADRIVEINIT
                            15024 ; 1386 |
                            15025 ; 1387 |//$FILENAME mmcenumerate.src
                            15026 ; 1388 |#define RSRC_MMCENUMERATE 532    
                            15027 ; 1389 |//$FILENAME mmcresetdevice.src
                            15028 ; 1390 |#define RSRC_MMC_RESETDEVICE 533    
                            15029 ; 1391 |//$FILENAME mmcprocesscsd.src
                            15030 ; 1392 |#define RSRC_MMC_PROCESSCSD 534    
                            15031 ; 1393 |//$FILENAME mmcprocesscid.src
                            15032 ; 1394 |#define RSRC_MMC_PROCESSCID 535    
                            15033 ; 1395 |//$FILENAME mmcprocesscid2.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 254

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15034 ; 1396 |#define RSRC_FUNCLET_MMCPROCESSCID2 536    
                            15035 ; 1397 |//$FILENAME mmcdetectpresence.src
                            15036 ; 1398 |#define RSRC_MMC_DETECTPRESENCE 537    
                            15037 ; 1399 |//$FILENAME mmcserialnumberinit.src
                            15038 ; 1400 |#define RSRC_MMCSERIALNUMBERINIT 538    
                            15039 ; 1401 |//$FILENAME mmccheckwriteprotect.src
                            15040 ; 1402 |#define RSRC_MMC_CHECKWRITEPROTECT 539    
                            15041 ; 1403 |
                            15042 ; 1404 |//$FILENAME mmcread.src
                            15043 ; 1405 |#define RSRC_MMCDATADRIVEREADSECTOR 540    
                            15044 ; 1406 |//$FILENAME mmcmediainit.src
                            15045 ; 1407 |#define RSRC_MMCMEDIAINIT 541    
                            15046 ; 1408 |//$FILENAME mmcdatadriveinfo.src
                            15047 ; 1409 |#define RSRC_MMCDATADRIVESETINFO 542    
                            15048 ; 1410 |#define RSRC_MMCDATADRIVEGETINFO RSRC_MMCDATADRIVESETINFO
                            15049 ; 1411 |//$FILENAME mmcdatadriveerase.src
                            15050 ; 1412 |#define RSRC_MMCDATADRIVEERASE 543    
                            15051 ; 1413 |
                            15052 ; 1414 |#define RSRC_MMCDATADRIVEWRITESECTOR RSRC_MMCDATADRIVEREADSECTOR
                            15053 ; 1415 |#define RSRC_MMCDATADRIVEMULTIWRITESETUP RSRC_MMCDATADRIVEWRITESECTOR
                            15054 ; 1416 |#define RSRC_MMCDATADRIVEMULTIWRITESECTOR RSRC_MMCDATADRIVEWRITESECTOR
                            15055 ; 1417 |
                            15056 ; 1418 |
                            15057 ; 1419 |/////////////////////////////////////////////////////////////////////////////////
                            15058 ; 1420 |//  File system
                            15059 ; 1421 |/////////////////////////////////////////////////////////////////////////////////
                            15060 ; 1422 |//$FILENAME arrangefilename.src
                            15061 ; 1423 |#define RSRC_FUNCLET_ARRANGEFILENAME 544    
                            15062 ; 1424 |//$FILENAME clearcluster.src
                            15063 ; 1425 |#define RSRC_FUNCLET_CLEARCLUSTER 545    
                            15064 ; 1426 |//$FILENAME createdirectory.src
                            15065 ; 1427 |#define RSRC_FUNCLET_CREATEDIRECTORY 546    
                            15066 ; 1428 |//$FILENAME deletecontent.src
                            15067 ; 1429 |#define RSRC_FUNCLET_DELETECONTENT 547    
                            15068 ; 1430 |//$FILENAME deleterecord.src
                            15069 ; 1431 |#define RSRC_FUNCLET_DELETERECORD 548    
                            15070 ; 1432 |//$FILENAME fastopen.src
                            15071 ; 1433 |#define RSRC_FUNCLET_FASTOPEN 549    
                            15072 ; 1434 |//$FILENAME fcreate.src
                            15073 ; 1435 |#define RSRC_FUNCLET_FCREATE 550    
                            15074 ; 1436 |//$FILENAME filegetattrib.src
                            15075 ; 1437 |#define RSRC_FUNCLET_FILEGETATTRIB 551    
                            15076 ; 1438 |//$FILENAME filegetdate.src
                            15077 ; 1439 |#define RSRC_FUNCLET_FILEGETDATE 552    
                            15078 ; 1440 |//$FILENAME filesetattrib.src
                            15079 ; 1441 |#define RSRC_FUNCLET_FILESETATTRIB 553    
                            15080 ; 1442 |//$FILENAME filesetdate.src
                            15081 ; 1443 |#define RSRC_FUNCLET_FILESETDATE 554    
                            15082 ; 1444 |//$FILENAME fsinit.src
                            15083 ; 1445 |#define RSRC_FUNCLET_FSINIT 555    
                            15084 ; 1446 |//$FILENAME fsshutdown.src
                            15085 ; 1447 |#define RSRC_FUNCLET_FSSHUTDOWN 556    
                            15086 ; 1448 |//$FILENAME readdevicerecord.src
                            15087 ; 1449 |#define RSRC_FUNCLET_READDEVICERECORD 557    
                            15088 ; 1450 |//$FILENAME checkspaceinrootdir.src
                            15089 ; 1451 |#define RSRC_FUNCLET_CHECKSPACEINROOTDIR 558    
                            15090 ; 1452 |//$FILENAME setcwdhandle.src
                            15091 ; 1453 |#define RSRC_FUNCLET_SETCWDHANDLE 559    
                            15092 ; 1454 |//$FILENAME fsdriveinit.src
                            15093 ; 1455 |#define RSRC_FUNCLET_FSDRIVEINIT 560    
                            15094 ; 1456 |//$FILENAME fsclearBuf.src
                            15095 ; 1457 |#define RSRC_FUNCLET_FSCLEARDRIVEBUF 561    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 255

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15096 ; 1458 |//RSRC_FUNCLET_TOTALFREECLUSTER    equ      328    ;$FILENAME totalfreecluster.src
                            15097 ; 1459 |//RSRC_FUNCLET_TOTALFREECLUSTERFAT16    equ      328    ;$FILENAME totalfreeclusterfat16.s
                                  rc
                            15098 ; 1460 |//$FILENAME fgetfasthandle.src
                            15099 ; 1461 |#define RSRC_FUNCLET_FGETFASTHANDLE 562    
                            15100 ; 1462 |//$FILENAME ishandlewriteallocated.src
                            15101 ; 1463 |#define RSRC_FUNCLET_ISHANDLEWRITEALLOCATED 563    
                            15102 ; 1464 |//$FILENAME isfileopen.src
                            15103 ; 1465 |#define RSRC_FUNCLET_ISFILEOPEN 564    
                            15104 ; 1466 |//$FILENAME iscurrworkdir.src
                            15105 ; 1467 |#define RSRC_FUNCLET_ISCURRWORKDIR 565    
                            15106 ; 1468 |//$FILENAME chdir.src
                            15107 ; 1469 |#define RSRC_FUNCLET_CHDIR 566    
                            15108 ; 1470 |//$FILENAME chdirFromOffset.src
                            15109 ; 1471 |#define RSRC_FUNCLET_CHDIR_FROM_OFFSET 567    
                            15110 ; 1472 |//$FILENAME deletetree.src
                            15111 ; 1473 |#define RSRC_FUNCLET_DELETETREE 568    
                            15112 ; 1474 |//$FILENAME deleteallrecords.src
                            15113 ; 1475 |#define RSRC_FUNCLET_DELETEALLRECORDS 569    
                            15114 ; 1476 |//$FILENAME cleardata.src
                            15115 ; 1477 |#define RSRC_FUNCLET_CLEARDATA 570    
                            15116 ; 1478 |//$FILENAME changetolowleveldir.src
                            15117 ; 1479 |#define RSRC_FUNCLET_CHANGETOLOWLEVELDIR 571    
                            15118 ; 1480 |//$FILENAME getrecordnumber.src
                            15119 ; 1481 |#define RSRC_FUNCLET_GETRECORDNUMBER 572    
                            15120 ; 1482 |//$FILENAME fileremove.src
                            15121 ; 1483 |#define RSRC_FUNCLET_FILEREMOVE 573    
                            15122 ; 1484 |//$FILENAME charactersearch.src
                            15123 ; 1485 |#define RSRC_FUNCLET_CHARACTERSEARCH 574    
                            15124 ; 1486 |//$FILENAME stringcompare.src
                            15125 ; 1487 |#define RSRC_FUNCLET_STRINGCOMPARE 575    
                            15126 ; 1488 |//$FILENAME fopenw.src
                            15127 ; 1489 |#define RSRC_FUNCLET_FOPENW 576    
                            15128 ; 1490 |//$FILENAME fremove.src
                            15129 ; 1491 |#define RSRC_FUNCLET_FREMOVE 577    
                            15130 ; 1492 |//$FILENAME fremovew.src
                            15131 ; 1493 |#define RSRC_FUNCLET_FREMOVEW 578    
                            15132 ; 1494 |//$FILENAME mkdir.src
                            15133 ; 1495 |#define RSRC_FUNCLET_MKDIR 579    
                            15134 ; 1496 |//$FILENAME mkdirw.src
                            15135 ; 1497 |#define RSRC_FUNCLET_MKDIRW 580    
                            15136 ; 1498 |//$FILENAME rmdir.src
                            15137 ; 1499 |#define RSRC_FUNCLET_RMDIR 581    
                            15138 ; 1500 |//$FILENAME rmdirw.src
                            15139 ; 1501 |#define RSRC_FUNCLET_RMDIRW 582    
                            15140 ; 1502 |//$FILENAME fgetc.src
                            15141 ; 1503 |#define RSRC_FUNCLET_FGETC 583    
                            15142 ; 1504 |//$FILENAME fgets.src
                            15143 ; 1505 |#define RSRC_FUNCLET_FGETS 584    
                            15144 ; 1506 |//$FILENAME fputc.src
                            15145 ; 1507 |#define RSRC_FUNCLET_FPUTC 585    
                            15146 ; 1508 |//$FILENAME fputs.src
                            15147 ; 1509 |#define RSRC_FUNCLET_FPUTS 586    
                            15148 ; 1510 |//$FILENAME arrangelongfilename.src
                            15149 ; 1511 |#define RSRC_FUNCLET_ARRANGELONGFILENAME 587    
                            15150 ; 1512 |//$FILENAME convert_itoa.src
                            15151 ; 1513 |#define RSRC_FUNCLET_CONVERT_ITOA 588    
                            15152 ; 1514 |//$FILENAME createdirrecord.src
                            15153 ; 1515 |#define RSRC_FUNCLET_CREATEDIRRECORD 589    
                            15154 ; 1516 |//$FILENAME chksum.src
                            15155 ; 1517 |#define RSRC_FUNCLET_CHKSUM 590    
                            15156 ; 1518 |//$FILENAME createshortdirrecord.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 256

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15157 ; 1519 |#define RSRC_FUNCLET_CREATESHORTDIRRECORD 591    
                            15158 ; 1520 |//$FILENAME discardtrailigperiodsucs3.src
                            15159 ; 1521 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSUCS3 592    
                            15160 ; 1522 |//$FILENAME discardtrailigperiodsw.src
                            15161 ; 1523 |#define RSRC_FUNCLET_DISCARDTRAILIGPERIODSW 593    
                            15162 ; 1524 |//$FILENAME extractfilenamew.src
                            15163 ; 1525 |#define RSRC_FUNCLET_EXTRACTFILENAMEW 594    
                            15164 ; 1526 |//$FILENAME extractpathw.src
                            15165 ; 1527 |#define RSRC_FUNCLET_EXTRACTPATHW 595    
                            15166 ; 1528 |//$FILENAME findfreerecord.src
                            15167 ; 1529 |#define RSRC_FUNCLET_FINDFREERECORD 596    
                            15168 ; 1530 |//$FILENAME getnamew.src
                            15169 ; 1531 |#define RSRC_FUNCLET_GETNAMEW 597    
                            15170 ; 1532 |//$FILENAME isdirectoryempty.src
                            15171 ; 1533 |#define RSRC_FUNCLET_ISDIRECTORYEMPTY 598    
                            15172 ; 1534 |//$FILENAME isshortnamevalid.src
                            15173 ; 1535 |#define RSRC_FUNCLET_ISSHORTNAMEVALID 599    
                            15174 ; 1536 |//$FILENAME longdirmatch.src
                            15175 ; 1537 |#define RSRC_FUNCLET_LONGDIRMATCH 600    
                            15176 ; 1538 |//$FILENAME unicodetooem.src
                            15177 ; 1539 |#define RSRC_FUNCLET_UNICODETOOEM 601    
                            15178 ; 1540 |//$FILENAME matchdirrecordw.src
                            15179 ; 1541 |#define RSRC_FUNCLET_MATCHDIRRECORDW 602    
                            15180 ; 1542 |//$FILENAME setcwd.src
                            15181 ; 1543 |#define RSRC_FUNCLET_SETCWD 603    
                            15182 ; 1544 |//$FILENAME setshortfilename.src
                            15183 ; 1545 |#define RSRC_FUNCLET_SETSHORTFILENAME 604    
                            15184 ; 1546 |//$FILENAME generatefilenametail.src
                            15185 ; 1547 |#define RSRC_FUNCLET_GENERATEFILENAMETAIL 605    
                            15186 ; 1548 |//$FILENAME dbcstounicode.src
                            15187 ; 1549 |#define RSRC_FUNCLET_DBCSTOUNICODE 606    
                            15188 ; 1550 |//$FILENAME strcpy.src
                            15189 ; 1551 |#define RSRC_FUNCLET_STRCPY 607    
                            15190 ; 1552 |//$FILENAME strcpyw.src
                            15191 ; 1553 |#define RSRC_FUNCLET_STRCPYW 608    
                            15192 ; 1554 |//$FILENAME strlengthw.src
                            15193 ; 1555 |#define RSRC_FUNCLET_STRLENGTHW 609    
                            15194 ; 1556 |//$FILENAME filesystempresent.src
                            15195 ; 1557 |#define RSRC_FUNCLET_FILESYSTEMPRESENT 610    
                            15196 ; 1558 |//$FILENAME DataDriveInit.src
                            15197 ; 1559 |#define RSRC_FUNCLET_DATADRIVEINIT 611    
                            15198 ; 1560 |//$FILENAME FSGetDataDrivePbsLocation.src
                            15199 ; 1561 |#define RSRC_FUNCLET_FSGETDATADRIVEPBSLOCATION 612    
                            15200 ; 1562 |//$FILENAME FSPartitionEntryCopy.src
                            15201 ; 1563 |#define RSRC_FUNCLET_FSPARTITIONENTRYCOPYFSDD 613    
                            15202 ; 1564 |//$FILENAME DataDriveGetSize.src
                            15203 ; 1565 |#define RSRC_FUNCLET_DATADRIVEGETSIZE 614    
                            15204 ; 1566 |//$FILENAME ConstructLongFileName.src
                            15205 ; 1567 |#define RSRC_FUNCLET_CONSTRUCTLONGFILENAME 615    
                            15206 ; 1568 |//$FILENAME strcpyucs3_2.src
                            15207 ; 1569 |#define RSRC_FUNCLET_STRCPYUCS3_2 616    
                            15208 ; 1570 |//$FILENAME getvolumelabel.src
                            15209 ; 1571 |#define RSRC_FUNCLET_GETVOLUMELABEL 617    
                            15210 ; 1572 |//$FILENAME setvolumelabel.src
                            15211 ; 1573 |#define RSRC_FUNCLET_SETVOLUMELABEL 618    
                            15212 ; 1574 |//$FILENAME disk_full.src
                            15213 ; 1575 |#define RSRC_DISK_FULL 619    
                            15214 ; 1576 |//$FILENAME chkdskstartup.src
                            15215 ; 1577 |#define RSRC_CHECKDISK 620    
                            15216 ; 1578 |//$FILENAME chkdskstartupy.src
                            15217 ; 1579 |#define RSRC_CHKDSK_YMEM 621    
                            15218 ; 1580 |//$FILENAME low_level_pwr_line1.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 257

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15219 ; 1581 |#define RSRC_LOW_PWR_EXT_DEV_LINE1 622    
                            15220 ; 1582 |//$FILENAME low_level_pwr_line2.src
                            15221 ; 1583 |#define RSRC_LOW_PWR_EXT_DEV_LINE2 623    
                            15222 ; 1584 |//$FILENAME string_bit_rate.src
                            15223 ; 1585 |#define RSRC_STRING_BIT_RATE 624    
                            15224 ; 1586 |//$FILENAME string_96000hz.src
                            15225 ; 1587 |#define RSRC_STRING_96KBPS 625    
                            15226 ; 1588 |//$FILENAME string_112000hz.src
                            15227 ; 1589 |#define RSRC_STRING_112KBPS 626    
                            15228 ; 1590 |//$FILENAME string_128000hz.src
                            15229 ; 1591 |#define RSRC_STRING_128KBPS 627    
                            15230 ; 1592 |//$FILENAME string_160000hz.src
                            15231 ; 1593 |#define RSRC_STRING_160KBPS 628    
                            15232 ; 1594 |//$FILENAME string_192000hz.src
                            15233 ; 1595 |#define RSRC_STRING_192KBPS 629    
                            15234 ; 1596 |//$FILENAME string_224000hz.src
                            15235 ; 1597 |#define RSRC_STRING_224KBPS 630    
                            15236 ; 1598 |//$FILENAME string_256000hz.src
                            15237 ; 1599 |#define RSRC_STRING_256KBPS 631    
                            15238 ; 1600 |//$FILENAME string_320000hz.src
                            15239 ; 1601 |#define RSRC_STRING_320KBPS 632    
                            15240 ; 1602 |//$FILENAME string_hz.src
                            15241 ; 1603 |#define RSRC_STRING_HZ 633    
                            15242 ; 1604 |//$FILENAME EncCommonp.src
                            15243 ; 1605 |#define RSRC_ENCODERCOMMON_P_CODE 634    
                            15244 ; 1606 |//$FILENAME adc_adcx.src
                            15245 ; 1607 |#define RSRC_ADC_ADCX_CODE 635    
                            15246 ; 1608 |//$FILENAME adc_adcy.src
                            15247 ; 1609 |#define RSRC_ADC_ADCY_CODE 636    
                            15248 ; 1610 |//$FILENAME Funclet_encodercommon.src
                            15249 ; 1611 |#define RSRC_FUNCLET_LOADENCODERCOMMON 637    
                            15250 ; 1612 |//$FILENAME string_album.src
                            15251 ; 1613 |#define RSRC_STRING_ALBUM 638    
                            15252 ; 1614 |//$FILENAME string_encoder_song.src
                            15253 ; 1615 |#define RSRC_STRING_SONG 639    
                            15254 ; 1616 |//$FILENAME string_mode.src
                            15255 ; 1617 |#define RSRC_STRING_MODE 640    
                            15256 ; 1618 |
                            15257 ; 1619 |//////////////////////////////////////////////////////////////////////////////////
                            15258 ; 1620 |// display related
                            15259 ; 1621 |//////////////////////////////////////////////////////////////////////////////////
                            15260 ; 1622 |//$FILENAME Funclet_HalDisplayInit.src
                            15261 ; 1623 |#define RSRC_FUNCLET_HAL_DISPLAY_INIT 641    
                            15262 ; 1624 |//$FILENAME Funclet_SalDisplayInit.src
                            15263 ; 1625 |#define RSRC_FUNCLET_SAL_DISPLAY_INIT 642    
                            15264 ; 1626 |//$FILENAME Funclet_SalHandleMessage.src
                            15265 ; 1627 |#define RSRC_FUNCLET_SAL_HANDLE_MSG 643    
                            15266 ; 1628 |//$FILENAME Funclet_FixBitmapHeader.src
                            15267 ; 1629 |#define RSRC_FUNCLET_FIXBITMAPHEADER 644    
                            15268 ; 1630 |//$FILENAME Funclet_BitmapReadHeader.src
                            15269 ; 1631 |#define RSRC_FUNCLET_BITMAPREADHEADER 645    
                            15270 ; 1632 |//$FILENAME Funclet_BitmapReadPalette.src
                            15271 ; 1633 |#define RSRC_FUNCLET_BITMAPREADPALETTE 646    
                            15272 ; 1634 |//$FILENAME Funclet_BitmapReadBitMask.src
                            15273 ; 1635 |#define RSRC_FUNCLET_BITMAPREADBITMASK 647    
                            15274 ; 1636 |//$FILENAME Funclet_BitmapPrintNonPalette.src
                            15275 ; 1637 |#define RSRC_FUNCLET_BITMAPPRINTNONPALETTE 648    
                            15276 ; 1638 |//$FILENAME Funclet_BitmapPrintPalette.src
                            15277 ; 1639 |#define RSRC_FUNCLET_BITMAPPRINTPALETTE 649    
                            15278 ; 1640 |//$FILENAME Funclet_DisplayPrintBitmapFile.src
                            15279 ; 1641 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPFILE 650    
                            15280 ; 1642 |//$FILENAME Funclet_DisplayPrintBitmapResource.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 258

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15281 ; 1643 |#define RSRC_FUNCLET_DISPLAYPRINTBITMAPRESOURCE 651    
                            15282 ; 1644 |
                            15283 ; 1645 |//////////////////////////////////////////////////////////////////////////////////
                            15284 ; 1646 |//WMDRM Related
                            15285 ; 1647 |//////////////////////////////////////////////////////////////////////////////////
                            15286 ; 1648 |//$FILENAME legacy_decryptcontentkey.src
                            15287 ; 1649 |#define RSRC_FUNCLET_LEGACY_DECRYPTCONTENTKEY 652    
                            15288 ; 1650 |//$FILENAME drm_bbx_legacycipherkeysetup.src
                            15289 ; 1651 |#define RSRC_FUNCLET_DRM_BBX_LEGACYCIPHERKEYSETUP 653    
                            15290 ; 1652 |//$FILENAME drm_bbx_initialize.src
                            15291 ; 1653 |#define RSRC_FUNCLET_DRM_BBX_INITIALIZE 654    
                            15292 ; 1654 |//$FILENAME drm_bbx_canbind.src
                            15293 ; 1655 |#define RSRC_FUNCLET_DRM_BBX_CANBIND 655    
                            15294 ; 1656 |//$FILENAME verifychecksum.src
                            15295 ; 1657 |#define RSRC_FUNCLET_VERIFYCHECKSUM 656    
                            15296 ; 1658 |//$FILENAME drm_b64_encodew.src
                            15297 ; 1659 |#define RSRC_FUNCLET_DRM_B64_ENCODEW 657    
                            15298 ; 1660 |//$FILENAME _performactions.src
                            15299 ; 1661 |#define RSRC_FUNCLET__PERFORMACTIONS 658    
                            15300 ; 1662 |//$FILENAME _processendofchain.src
                            15301 ; 1663 |#define RSRC_FUNCLET__PROCESSENDOFCHAIN 659    
                            15302 ; 1664 |//$FILENAME drmcrt_iswxdigit.src
                            15303 ; 1665 |#define RSRC_FUNCLET_DRMCRT_ISWXDIGIT 660    
                            15304 ; 1666 |//$FILENAME drmcrt_towlower.src
                            15305 ; 1667 |#define RSRC_FUNCLET_DRMCRT_TOWLOWER 661    
                            15306 ; 1668 |//$FILENAME drmcrt_wcslen.src
                            15307 ; 1669 |#define RSRC_FUNCLET_DRMCRT_WCSLEN 662    
                            15308 ; 1670 |//$FILENAME drmcrt_wcsncpy.src
                            15309 ; 1671 |#define RSRC_FUNCLET_DRMCRT_WCSNCPY 663    
                            15310 ; 1672 |//$FILENAME drmcrt_memmove.src
                            15311 ; 1673 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE 664    
                            15312 ; 1674 |//$FILENAME performoperation_part1.src
                            15313 ; 1675 |#define RSRC_FUNCLET_PERFORMOPERATION_PART1 665    
                            15314 ; 1676 |//$FILENAME performoperation_part2.src
                            15315 ; 1677 |#define RSRC_FUNCLET_PERFORMOPERATION_PART2 666    
                            15316 ; 1678 |//$FILENAME performoperation_part3.src
                            15317 ; 1679 |#define RSRC_FUNCLET_PERFORMOPERATION_PART3 667    
                            15318 ; 1680 |//$FILENAME performoperation_part4.src
                            15319 ; 1681 |#define RSRC_FUNCLET_PERFORMOPERATION_PART4 668    
                            15320 ; 1682 |//$FILENAME performoperation_part5.src
                            15321 ; 1683 |#define RSRC_FUNCLET_PERFORMOPERATION_PART5 669    
                            15322 ; 1684 |//$FILENAME performoperation_part6.src
                            15323 ; 1685 |#define RSRC_FUNCLET_PERFORMOPERATION_PART6 670    
                            15324 ; 1686 |//$FILENAME isvalidfunction.src
                            15325 ; 1687 |#define RSRC_FUNCLET_ISVALIDFUNCTION 671    
                            15326 ; 1688 |//$FILENAME functiongetvalue.src
                            15327 ; 1689 |#define RSRC_FUNCLET_FUNCTIONGETVALUE 672    
                            15328 ; 1690 |//$FILENAME globalsetvariable.src
                            15329 ; 1691 |#define RSRC_FUNCLET_GLOBALSETVARIABLE 673    
                            15330 ; 1692 |//$FILENAME variabledrmkgetorset.src
                            15331 ; 1693 |#define RSRC_FUNCLET_VARIABLEDRMKGETORSET 674    
                            15332 ; 1694 |//$FILENAME variabledrmgetorset.src
                            15333 ; 1695 |#define RSRC_FUNCLET_VARIABLEDRMGETORSET 675    
                            15334 ; 1696 |//$FILENAME variableappgetorset.src
                            15335 ; 1697 |#define RSRC_FUNCLET_VARIABLEAPPGETORSET 676    
                            15336 ; 1698 |//$FILENAME variablelicensegetorset.src
                            15337 ; 1699 |#define RSRC_FUNCLET_VARIABLELICENSEGETORSET 677    
                            15338 ; 1700 |//$FILENAME variablecontentgetorset.src
                            15339 ; 1701 |#define RSRC_FUNCLET_VARIABLECONTENTGETORSET 678    
                            15340 ; 1702 |//$FILENAME variabledevicegetorset.src
                            15341 ; 1703 |#define RSRC_FUNCLET_VARIABLEDEVICEGETORSET 679    
                            15342 ; 1704 |//$FILENAME variablepmlicensegetorset.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 259

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15343 ; 1705 |#define RSRC_FUNCLET_VARIABLEPMLICENSEGETORSET 680    
                            15344 ; 1706 |//$FILENAME drm_hds_createstore.src
                            15345 ; 1707 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE 681    
                            15346 ; 1708 |//$FILENAME drm_hds_init.src
                            15347 ; 1709 |#define RSRC_FUNCLET_DRM_HDS_INIT 682    
                            15348 ; 1710 |//$FILENAME drm_hds_uninit.src
                            15349 ; 1711 |#define RSRC_FUNCLET_DRM_HDS_UNINIT 683    
                            15350 ; 1712 |//$FILENAME drm_hds_openstore.src
                            15351 ; 1713 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE 684    
                            15352 ; 1714 |//$FILENAME drm_hds_deleteslot.src
                            15353 ; 1715 |#define RSRC_FUNCLET_DRM_HDS_DELETESLOT 685    
                            15354 ; 1716 |//$FILENAME drm_hds_slotresize.src
                            15355 ; 1717 |#define RSRC_FUNCLET_DRM_HDS_SLOTRESIZE 686    
                            15356 ; 1718 |//$FILENAME drm_hds_initslotenum.src
                            15357 ; 1719 |#define RSRC_FUNCLET_DRM_HDS_INITSLOTENUM 687    
                            15358 ; 1720 |//$FILENAME drm_hds_cleanupstore.src
                            15359 ; 1721 |#define RSRC_FUNCLET_DRM_HDS_CLEANUPSTORE 688    
                            15360 ; 1722 |//$FILENAME _hdscopyslot_child2child.src
                            15361 ; 1723 |#define RSRC_FUNCLET__HDSCOPYSLOT_CHILD2CHILD 689    
                            15362 ; 1724 |//$FILENAME _hdscopychildpayload.src
                            15363 ; 1725 |#define RSRC_FUNCLET__HDSCOPYCHILDPAYLOAD 690    
                            15364 ; 1726 |//$FILENAME _hdsdefragmentfile.src
                            15365 ; 1727 |#define RSRC_FUNCLET__HDSDEFRAGMENTFILE 691    
                            15366 ; 1728 |//$FILENAME _hdscleanupnamespace.src
                            15367 ; 1729 |#define RSRC_FUNCLET__HDSCLEANUPNAMESPACE 692    
                            15368 ; 1730 |//$FILENAME _hdscleanupstore.src
                            15369 ; 1731 |#define RSRC_FUNCLET__HDSCLEANUPSTORE 693    
                            15370 ; 1732 |//$FILENAME drm_lst_clean.src
                            15371 ; 1733 |#define RSRC_FUNCLET_DRM_LST_CLEAN 694    
                            15372 ; 1734 |//$FILENAME _hdslocatefreeblockforslot.src
                            15373 ; 1735 |#define RSRC_FUNCLET__HDSLOCATEFREEBLOCKFORSLOT 695    
                            15374 ; 1736 |//$FILENAME _hdslockblock2deleteslot.src
                            15375 ; 1737 |#define RSRC_FUNCLET__HDSLOCKBLOCK2DELETESLOT 696    
                            15376 ; 1738 |//$FILENAME _hdsunlockblock2deleteslot.src
                            15377 ; 1739 |#define RSRC_FUNCLET__HDSUNLOCKBLOCK2DELETESLOT 697    
                            15378 ; 1740 |//$FILENAME _hdscreatenamespace.src
                            15379 ; 1741 |#define RSRC_FUNCLET__HDSCREATENAMESPACE 698    
                            15380 ; 1742 |//$FILENAME _hdsfilepos2blocknum.src
                            15381 ; 1743 |#define RSRC_FUNCLET__HDSFILEPOS2BLOCKNUM 699    
                            15382 ; 1744 |//$FILENAME _writesrn.src
                            15383 ; 1745 |#define RSRC_FUNCLET__WRITESRN 700    
                            15384 ; 1746 |//$FILENAME _writecommonblockheader.src
                            15385 ; 1747 |#define RSRC_FUNCLET__WRITECOMMONBLOCKHEADER 701    
                            15386 ; 1748 |//$FILENAME _writechildblockheader.src
                            15387 ; 1749 |#define RSRC_FUNCLET__WRITECHILDBLOCKHEADER 702    
                            15388 ; 1750 |//$FILENAME _readdatablockheader.src
                            15389 ; 1751 |#define RSRC_FUNCLET__READDATABLOCKHEADER 703    
                            15390 ; 1752 |//$FILENAME _writedatablockheader.src
                            15391 ; 1753 |#define RSRC_FUNCLET__WRITEDATABLOCKHEADER 704    
                            15392 ; 1754 |//$FILENAME _hdsexpandstore.src
                            15393 ; 1755 |#define RSRC_FUNCLET__HDSEXPANDSTORE 705    
                            15394 ; 1756 |//$FILENAME _hdsallocblock.src
                            15395 ; 1757 |#define RSRC_FUNCLET__HDSALLOCBLOCK 706    
                            15396 ; 1758 |//$FILENAME _hdsfreeblock.src
                            15397 ; 1759 |#define RSRC_FUNCLET__HDSFREEBLOCK 707    
                            15398 ; 1760 |//$FILENAME _hdscreateoversizedslot.src
                            15399 ; 1761 |#define RSRC_FUNCLET__HDSCREATEOVERSIZEDSLOT 708    
                            15400 ; 1762 |//$FILENAME _hdsallocslotinfile.src
                            15401 ; 1763 |#define RSRC_FUNCLET__HDSALLOCSLOTINFILE 709    
                            15402 ; 1764 |//$FILENAME _hdswriteblockhdr.src
                            15403 ; 1765 |#define RSRC_FUNCLET__HDSWRITEBLOCKHDR 710    
                            15404 ; 1766 |//$FILENAME _hdsadjustchildpayload.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 260

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15405 ; 1767 |#define RSRC_FUNCLET__HDSADJUSTCHILDPAYLOAD 711    
                            15406 ; 1768 |//$FILENAME _hdsfindleftmostleafblock.src
                            15407 ; 1769 |#define RSRC_FUNCLET__HDSFINDLEFTMOSTLEAFBLOCK 712    
                            15408 ; 1770 |//$FILENAME _hdscreateandopenslot.src
                            15409 ; 1771 |#define RSRC_FUNCLET__HDSCREATEANDOPENSLOT 713    
                            15410 ; 1772 |//$FILENAME _hdsremoveslot.src
                            15411 ; 1773 |#define RSRC_FUNCLET__HDSREMOVESLOT 714    
                            15412 ; 1774 |//$FILENAME _hdscopyandlocknewslot.src
                            15413 ; 1775 |#define RSRC_FUNCLET__HDSCOPYANDLOCKNEWSLOT 715    
                            15414 ; 1776 |//$FILENAME _hdsrelocateslotandkeepcurrlock.src
                            15415 ; 1777 |#define RSRC_FUNCLET__HDSRELOCATESLOTANDKEEPCURRLOCK 716    
                            15416 ; 1778 |//$FILENAME _hdstraversenextrightsiblingblock.src
                            15417 ; 1779 |#define RSRC_FUNCLET__HDSTRAVERSENEXTRIGHTSIBLINGBLOCK 717    
                            15418 ; 1780 |//$FILENAME _hdstraverseblocksinpostorder.src
                            15419 ; 1781 |#define RSRC_FUNCLET__HDSTRAVERSEBLOCKSINPOSTORDER 718    
                            15420 ; 1782 |//$FILENAME _hdsslotresize.src
                            15421 ; 1783 |#define RSRC_FUNCLET__HDSSLOTRESIZE 719    
                            15422 ; 1784 |//$FILENAME _isnull.src
                            15423 ; 1785 |#define RSRC_FUNCLET__ISNULL 720    
                            15424 ; 1786 |//$FILENAME _hdsgensrnhash.src
                            15425 ; 1787 |#define RSRC_FUNCLET__HDSGENSRNHASH 721    
                            15426 ; 1788 |//$FILENAME _hdsallocblockbuffer.src
                            15427 ; 1789 |#define RSRC_FUNCLET__HDSALLOCBLOCKBUFFER 722    
                            15428 ; 1790 |//$FILENAME _readsrn.src
                            15429 ; 1791 |#define RSRC_FUNCLET__READSRN 723    
                            15430 ; 1792 |//$FILENAME _hdsgetputchildblocknum.src
                            15431 ; 1793 |#define RSRC_FUNCLET__HDSGETPUTCHILDBLOCKNUM 724    
                            15432 ; 1794 |//$FILENAME _hdshashkeytoindex.src
                            15433 ; 1795 |#define RSRC_FUNCLET__HDSHASHKEYTOINDEX 725    
                            15434 ; 1796 |//$FILENAME _hdsslotwrite.src
                            15435 ; 1797 |#define RSRC_FUNCLET__HDSSLOTWRITE 726    
                            15436 ; 1798 |//$FILENAME _hdsinitslotenum.src
                            15437 ; 1799 |#define RSRC_FUNCLET__HDSINITSLOTENUM 727    
                            15438 ; 1800 |//$FILENAME drm_lst_close.src
                            15439 ; 1801 |#define RSRC_FUNCLET_DRM_LST_CLOSE 728    
                            15440 ; 1802 |//$FILENAME drm_lst_enumnext.src
                            15441 ; 1803 |#define RSRC_FUNCLET_DRM_LST_ENUMNEXT 729    
                            15442 ; 1804 |//$FILENAME drm_lst_enumdelete.src
                            15443 ; 1805 |#define RSRC_FUNCLET_DRM_LST_ENUMDELETE 730    
                            15444 ; 1806 |//$FILENAME _processextensions.src
                            15445 ; 1807 |#define RSRC_FUNCLET__PROCESSEXTENSIONS 731    
                            15446 ; 1808 |//$FILENAME _processidlist.src
                            15447 ; 1809 |#define RSRC_FUNCLET__PROCESSIDLIST 732    
                            15448 ; 1810 |//$FILENAME _processexclusions.src
                            15449 ; 1811 |#define RSRC_FUNCLET__PROCESSEXCLUSIONS 733    
                            15450 ; 1812 |//$FILENAME _processinclusions.src
                            15451 ; 1813 |#define RSRC_FUNCLET__PROCESSINCLUSIONS 734    
                            15452 ; 1814 |//$FILENAME drm_opl_processcopyoutputleveldata.src
                            15453 ; 1815 |#define RSRC_FUNCLET_DRM_OPL_PROCESSCOPYOUTPUTLEVELDATA 735    
                            15454 ; 1816 |//$FILENAME _getopllevel.src
                            15455 ; 1817 |#define RSRC_FUNCLET__GETOPLLEVEL 736    
                            15456 ; 1818 |//$FILENAME drm_opl_processplayoutputleveldata.src
                            15457 ; 1819 |#define RSRC_FUNCLET_DRM_OPL_PROCESSPLAYOUTPUTLEVELDATA 737    
                            15458 ; 1820 |//$FILENAME _updateattributetokeninslot.src
                            15459 ; 1821 |#define RSRC_FUNCLET__UPDATEATTRIBUTETOKENINSLOT 738    
                            15460 ; 1822 |//$FILENAME drm_sst_settokenvalue.src
                            15461 ; 1823 |#define RSRC_FUNCLET_DRM_SST_SETTOKENVALUE 739    
                            15462 ; 1824 |//$FILENAME drm_sst_createlicensestatepassword.src
                            15463 ; 1825 |#define RSRC_FUNCLET_DRM_SST_CREATELICENSESTATEPASSWORD 740    
                            15464 ; 1826 |//$FILENAME drm_utl_promoteansitounicode.src
                            15465 ; 1827 |#define RSRC_FUNCLET_DRM_UTL_PROMOTEANSITOUNICODE 741    
                            15466 ; 1828 |//$FILENAME drm_pk_symmetricsign.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 261

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15467 ; 1829 |#define RSRC_FUNCLET_DRM_PK_SYMMETRICSIGN 742    
                            15468 ; 1830 |//$FILENAME drm_utl_getversionfromstring.src
                            15469 ; 1831 |#define RSRC_FUNCLET_DRM_UTL_GETVERSIONFROMSTRING 743    
                            15470 ; 1832 |//$FILENAME drm_utl_stringinsertblanksubstring.src
                            15471 ; 1833 |#define RSRC_FUNCLET_DRM_UTL_STRINGINSERTBLANKSUBSTRING 744    
                            15472 ; 1834 |//$FILENAME drm_utl_stringremovesubstring.src
                            15473 ; 1835 |#define RSRC_FUNCLET_DRM_UTL_STRINGREMOVESUBSTRING 745    
                            15474 ; 1836 |//$FILENAME drm_utl_dstrsearch.src
                            15475 ; 1837 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCH 746    
                            15476 ; 1838 |//$FILENAME drm_utl_dstrsearchreverse.src
                            15477 ; 1839 |#define RSRC_FUNCLET_DRM_UTL_DSTRSEARCHREVERSE 747    
                            15478 ; 1840 |//$FILENAME drm_utl_stringtoguid.src
                            15479 ; 1841 |#define RSRC_FUNCLET_DRM_UTL_STRINGTOGUID 748    
                            15480 ; 1842 |//$FILENAME drm_utl_ensuredataalignment.src
                            15481 ; 1843 |#define RSRC_FUNCLET_DRM_UTL_ENSUREDATAALIGNMENT 749    
                            15482 ; 1844 |//$FILENAME overlappingdates.src
                            15483 ; 1845 |#define RSRC_FUNCLET_OVERLAPPINGDATES 750    
                            15484 ; 1846 |//$FILENAME drm_asd_parsev2license.src
                            15485 ; 1847 |#define RSRC_FUNCLET_DRM_ASD_PARSEV2LICENSE 751    
                            15486 ; 1848 |//$FILENAME neginfdate.src
                            15487 ; 1849 |#define RSRC_FUNCLET_NEGINFDATE 752    
                            15488 ; 1850 |//$FILENAME infdate.src
                            15489 ; 1851 |#define RSRC_FUNCLET_INFDATE 753    
                            15490 ; 1852 |//$FILENAME isexpired.src
                            15491 ; 1853 |#define RSRC_FUNCLET_ISEXPIRED 754    
                            15492 ; 1854 |//$FILENAME getsecstateattr.src
                            15493 ; 1855 |#define RSRC_FUNCLET_GETSECSTATEATTR 755    
                            15494 ; 1856 |//$FILENAME setexpirycategory.src
                            15495 ; 1857 |#define RSRC_FUNCLET_SETEXPIRYCATEGORY 756    
                            15496 ; 1858 |//$FILENAME getv2licenseinfo.src
                            15497 ; 1859 |#define RSRC_FUNCLET_GETV2LICENSEINFO 757    
                            15498 ; 1860 |//$FILENAME getnextlicense.src
                            15499 ; 1861 |#define RSRC_FUNCLET_GETNEXTLICENSE 758    
                            15500 ; 1862 |//$FILENAME aggregate.src
                            15501 ; 1863 |#define RSRC_FUNCLET_AGGREGATE 759    
                            15502 ; 1864 |//$FILENAME drm_asd_getlicenseaggregatedata.src
                            15503 ; 1865 |#define RSRC_FUNCLET_DRM_ASD_GETLICENSEAGGREGATEDATA 760    
                            15504 ; 1866 |//$FILENAME _scannodeforattributew.src
                            15505 ; 1867 |#define RSRC_FUNCLET__SCANNODEFORATTRIBUTEW 761    
                            15506 ; 1868 |//$FILENAME _getxmlnodecdataw.src
                            15507 ; 1869 |#define RSRC_FUNCLET__GETXMLNODECDATAW 762    
                            15508 ; 1870 |//$FILENAME drm_ddc_getdevicecertificate.src
                            15509 ; 1871 |#define RSRC_FUNCLET_DRM_DDC_GETDEVICECERTIFICATE 763    
                            15510 ; 1872 |//$FILENAME _createdevicestore.src
                            15511 ; 1873 |#define RSRC_FUNCLET__CREATEDEVICESTORE 764    
                            15512 ; 1874 |//$FILENAME _mapdrmerror.src
                            15513 ; 1875 |#define RSRC_FUNCLET__MAPDRMERROR 765    
                            15514 ; 1876 |//$FILENAME _comparemachineid.src
                            15515 ; 1877 |#define RSRC_FUNCLET__COMPAREMACHINEID 766    
                            15516 ; 1878 |//$FILENAME initmgrcontext.src
                            15517 ; 1879 |#define RSRC_FUNCLET_INITMGRCONTEXT 767    
                            15518 ; 1880 |//$FILENAME drm_mgr_setv2header.src
                            15519 ; 1881 |#define RSRC_FUNCLET_DRM_MGR_SETV2HEADER 768    
                            15520 ; 1882 |//$FILENAME drm_mgr_commit.src
                            15521 ; 1883 |#define RSRC_FUNCLET_DRM_MGR_COMMIT 769    
                            15522 ; 1884 |//$FILENAME drm_mgr_cleanuplicensestore.src
                            15523 ; 1885 |#define RSRC_FUNCLET_DRM_MGR_CLEANUPLICENSESTORE 770    
                            15524 ; 1886 |//$FILENAME januscleandatastore.src
                            15525 ; 1887 |#define RSRC_FUNCLET_JANUSCLEANDATASTORE 771    
                            15526 ; 1888 |//$FILENAME drm_mtr_openid.src
                            15527 ; 1889 |#define RSRC_FUNCLET_DRM_MTR_OPENID 772    
                            15528 ; 1890 |//$FILENAME drm_mtr_incrementcount.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 262

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15529 ; 1891 |#define RSRC_FUNCLET_DRM_MTR_INCREMENTCOUNT 773    
                            15530 ; 1892 |//$FILENAME drm_mtr_closecontext.src
                            15531 ; 1893 |#define RSRC_FUNCLET_DRM_MTR_CLOSECONTEXT 774    
                            15532 ; 1894 |//$FILENAME oem_setendoffile.src
                            15533 ; 1895 |#define RSRC_FUNCLET_OEM_SETENDOFFILE 775    
                            15534 ; 1896 |//$FILENAME oem_genrandombytes.src
                            15535 ; 1897 |#define RSRC_FUNCLET_OEM_GENRANDOMBYTES 776    
                            15536 ; 1898 |//$FILENAME oem_getfallbacksigningkey.src
                            15537 ; 1899 |#define RSRC_FUNCLET_OEM_GETFALLBACKSIGNINGKEY 777    
                            15538 ; 1900 |//$FILENAME oem_getdevicecerttemplate.src
                            15539 ; 1901 |#define RSRC_FUNCLET_OEM_GETDEVICECERTTEMPLATE 778    
                            15540 ; 1902 |//$FILENAME oem_setdevicecert.src
                            15541 ; 1903 |#define RSRC_FUNCLET_OEM_SETDEVICECERT 779    
                            15542 ; 1904 |//$FILENAME oem_getclockresetstate.src
                            15543 ; 1905 |#define RSRC_FUNCLET_OEM_GETCLOCKRESETSTATE 780    
                            15544 ; 1906 |//$FILENAME oem_setclockresetstate.src
                            15545 ; 1907 |#define RSRC_FUNCLET_OEM_SETCLOCKRESETSTATE 781    
                            15546 ; 1908 |//$FILENAME oem_getuniqueid.src
                            15547 ; 1909 |#define RSRC_FUNCLET_OEM_GETUNIQUEID 782    
                            15548 ; 1910 |//$FILENAME oem_getdevicecert.src
                            15549 ; 1911 |#define RSRC_FUNCLET_OEM_GETDEVICECERT 783    
                            15550 ; 1912 |//$FILENAME drm_snc_openstore.src
                            15551 ; 1913 |#define RSRC_FUNCLET_DRM_SNC_OPENSTORE 784    
                            15552 ; 1914 |//$FILENAME drm_snc_closestore.src
                            15553 ; 1915 |#define RSRC_FUNCLET_DRM_SNC_CLOSESTORE 785    
                            15554 ; 1916 |//$FILENAME _setkidstoredata.src
                            15555 ; 1917 |#define RSRC_FUNCLET__SETKIDSTOREDATA 786    
                            15556 ; 1918 |//$FILENAME drm_snc_deletekid.src
                            15557 ; 1919 |#define RSRC_FUNCLET_DRM_SNC_DELETEKID 787    
                            15558 ; 1920 |//$FILENAME drm_snc_updatekid.src
                            15559 ; 1921 |#define RSRC_FUNCLET_DRM_SNC_UPDATEKID 788    
                            15560 ; 1922 |//$FILENAME drm_mgr_setv1header.src
                            15561 ; 1923 |#define RSRC_FUNCLET_DRM_MGR_SETV1HEADER 789    
                            15562 ; 1924 |//$FILENAME functiongetvalue_part1.src
                            15563 ; 1925 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_PART1 790    
                            15564 ; 1926 |//$FILENAME functiongetvalue_fn_datediff.src
                            15565 ; 1927 |#define RSRC_FUNCLET_FUNCTIONGETVALUE_FN_DATEDIFF 791    
                            15566 ; 1928 |//$FILENAME _hdscreatenamespacestore.src
                            15567 ; 1929 |#define RSRC_FUNCLET__HDSCREATENAMESPACESTORE 792    
                            15568 ; 1930 |//$FILENAME drm_hds_createstore2.src
                            15569 ; 1931 |#define RSRC_FUNCLET_DRM_HDS_CREATESTORE2 793    
                            15570 ; 1932 |//$FILENAME drm_hds_openstore2.src
                            15571 ; 1933 |#define RSRC_FUNCLET_DRM_HDS_OPENSTORE2 794    
                            15572 ; 1934 |//$FILENAME _hdsprealloc.src
                            15573 ; 1935 |#define RSRC_FUNCLET__HDSPREALLOC 795    
                            15574 ; 1936 |//$FILENAME oem_systemtimetofiletime.src
                            15575 ; 1937 |#define RSRC_FUNCLET_OEM_SYSTEMTIMETOFILETIME 796    
                            15576 ; 1938 |//$FILENAME oem_filetimetosystemtime.src
                            15577 ; 1939 |#define RSRC_FUNCLET_OEM_FILETIMETOSYSTEMTIME 797    
                            15578 ; 1940 |//$FILENAME gendevicecertificate.src
                            15579 ; 1941 |#define RSRC_FUNCLET_GENDEVICECERTIFICATE 798    
                            15580 ; 1942 |//$FILENAME drmcrt_memmove_mem.src
                            15581 ; 1943 |#define RSRC_FUNCLET_DRMCRT_MEMMOVE_MEM 799    
                            15582 ; 1944 |//$FILENAME copyhdsdtore.src
                            15583 ; 1945 |#define RSRC_FUNCLET_COPYHDSDTORE 800    
                            15584 ; 1946 |//$FILENAME generatedevicecert.src
                            15585 ; 1947 |#define RSRC_FUNCLET_GENERATEDEVICECERT 801    
                            15586 ; 1948 |//$FILENAME oem_getdevicedatetime.src
                            15587 ; 1949 |#define RSRC_FUNCLET_OEM_GETDEVICEDATETIME 802    
                            15588 ; 1950 |//$FILENAME drm_mtr_updatedata.src
                            15589 ; 1951 |#define RSRC_FUNCLET_DRM_MTR_UPDATEDATA 803    
                            15590 ; 1952 |//$FILENAME _hdsupdatesrn.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 263

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15591 ; 1953 |#define RSRC_FUNCLET__HDSUPDATESRN 804    
                            15592 ; 1954 |//$FILENAME drm_b64_decodew_inplace.src
                            15593 ; 1955 |#define RSRC_FUNCLET_DRM_B64_DECODEW_INPLACE 805    
                            15594 ; 1956 |//$FILENAME _checksecureclock.src
                            15595 ; 1957 |#define RSRC_FUNCLET__CHECKSECURECLOCK 806    
                            15596 ; 1958 |//$FILENAME _preparesecureclockdataforwriting.src
                            15597 ; 1959 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORWRITING 807    
                            15598 ; 1960 |//$FILENAME _preparesecureclockdataforreading.src
                            15599 ; 1961 |#define RSRC_FUNCLET__PREPARESECURECLOCKDATAFORREADING 808    
                            15600 ; 1962 |//$FILENAME drm_sst_closelockedslot.src
                            15601 ; 1963 |#define RSRC_FUNCLET_DRM_SST_CLOSELOCKEDSLOT 809    
                            15602 ; 1964 |//$FILENAME variablesecuretimegetorset.src
                            15603 ; 1965 |#define RSRC_FUNCLET_VARIABLESECURETIMEGETORSET 810    
                            15604 ; 1966 |//$FILENAME strtol.src
                            15605 ; 1967 |#define RSRC_FUNCLET_STRTOL 811    
                            15606 ; 1968 |//$FILENAME mktime.src
                            15607 ; 1969 |#define RSRC_FUNCLET_MKTIME 812    
                            15608 ; 1970 |//$FILENAME gmtime.src
                            15609 ; 1971 |#define RSRC_FUNCLET_GMTIME 813    
                            15610 ; 1972 |//$FILENAME localtime.src
                            15611 ; 1973 |#define RSRC_FUNCLET_LOCALTIME 814    
                            15612 ; 1974 |//$FILENAME _struct_tm_to_systemtime.src
                            15613 ; 1975 |#define RSRC_FUNCLET__STRUCT_TM_TO_SYSTEMTIME 815    
                            15614 ; 1976 |//$FILENAME _systemtime_to_struct_tm.src
                            15615 ; 1977 |#define RSRC_FUNCLET__SYSTEMTIME_TO_STRUCT_TM 816    
                            15616 ; 1978 |//$FILENAME _systemtimetotime_t.src
                            15617 ; 1979 |#define RSRC_FUNCLET__SYSTEMTIMETOTIME_T 817    
                            15618 ; 1980 |//$FILENAME oem_setsystemtime.src
                            15619 ; 1981 |#define RSRC_FUNCLET_OEM_SETSYSTEMTIME 818    
                            15620 ; 1982 |//$FILENAME const_pkcrypto.src
                            15621 ; 1983 |#define RSRC_CONST_PKCRYPTO 819    
                            15622 ; 1984 |//$FILENAME const_y.src
                            15623 ; 1985 |#define RSRC_CONST_Y 820    
                            15624 ; 1986 |//$FILENAME aes_dec_table.src
                            15625 ; 1987 |#define RSRC_AES_DEC_TABLE 821    
                            15626 ; 1988 |//$FILENAME aes_key_table.src
                            15627 ; 1989 |#define RSRC_AES_KEY_TABLE 822    
                            15628 ; 1990 |//$FILENAME aes_enc_table.src
                            15629 ; 1991 |#define RSRC_AES_ENC_TABLE 823    
                            15630 ; 1992 |//$FILENAME device_cert.src
                            15631 ; 1993 |#define RSRC_DEVCERT 824    
                            15632 ; 1994 |//$FILENAME devcert_template.src
                            15633 ; 1995 |#define RSRC_DEVCERT_TEMPLATE 825    
                            15634 ; 1996 |//$FILENAME getbase64decodedkey.src
                            15635 ; 1997 |#define RSRC_FUNCLET_GETBASE64DECODEDKEY 826    
                            15636 ; 1998 |//$FILENAME _initslot.src
                            15637 ; 1999 |#define RSRC_FUNCLET__INITSLOT 827    
                            15638 ; 2000 |//$FILENAME hdsimplcommon.src
                            15639 ; 2001 |#define RSRC_HDSIMPLCOMMON_P 828    
                            15640 ; 2002 |//$FILENAME hdsimpl_p.src
                            15641 ; 2003 |#define RSRC_HDSIMPL_P 829    
                            15642 ; 2004 |
                            15643 ; 2005 |
                            15644 ; 2006 |//////////////////////////////////////////////////////////////////////////////////
                            15645 ; 2007 |//pkcrypto Related
                            15646 ; 2008 |//////////////////////////////////////////////////////////////////////////////////
                            15647 ; 2009 |//$FILENAME two_adic_inverse.src
                            15648 ; 2010 |#define RSRC_FUNCLET_TWO_ADIC_INVERSE 830    
                            15649 ; 2011 |//$FILENAME mp_shift.src
                            15650 ; 2012 |#define RSRC_FUNCLET_MP_SHIFT 831    
                            15651 ; 2013 |//$FILENAME mp_significant_bit_count.src
                            15652 ; 2014 |#define RSRC_FUNCLET_MP_SIGNIFICANT_BIT_COUNT 832    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 264

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15653 ; 2015 |//$FILENAME set_immediate.src
                            15654 ; 2016 |#define RSRC_FUNCLET_SET_IMMEDIATE 833    
                            15655 ; 2017 |//$FILENAME multiply_immediate.src
                            15656 ; 2018 |#define RSRC_FUNCLET_MULTIPLY_IMMEDIATE 834    
                            15657 ; 2019 |//$FILENAME multiply.src
                            15658 ; 2020 |#define RSRC_FUNCLET_MULTIPLY 835    
                            15659 ; 2021 |//$FILENAME divide_precondition_1.src
                            15660 ; 2022 |#define RSRC_FUNCLET_DIVIDE_PRECONDITION_1 836    
                            15661 ; 2023 |//$FILENAME divide_immediate.src
                            15662 ; 2024 |#define RSRC_FUNCLET_DIVIDE_IMMEDIATE 837    
                            15663 ; 2025 |//$FILENAME ecaffine_exponentiation_tabular.src
                            15664 ; 2026 |#define RSRC_FUNCLET_ECAFFINE_EXPONENTIATION_TABULAR 838    
                            15665 ; 2027 |//$FILENAME ecaffine_table_construction.src
                            15666 ; 2028 |#define RSRC_FUNCLET_ECAFFINE_TABLE_CONSTRUCTION 839    
                            15667 ; 2029 |//$FILENAME ecproj5_to_ecaffine.src
                            15668 ; 2030 |#define RSRC_FUNCLET_ECPROJ5_TO_ECAFFINE 840    
                            15669 ; 2031 |//$FILENAME ecproj5_set_infinite.src
                            15670 ; 2032 |#define RSRC_FUNCLET_ECPROJ5_SET_INFINITE 841    
                            15671 ; 2033 |//$FILENAME ecaffine_on_curve.src
                            15672 ; 2034 |#define RSRC_FUNCLET_ECAFFINE_ON_CURVE 842    
                            15673 ; 2035 |//$FILENAME ecaffine_addition.src
                            15674 ; 2036 |#define RSRC_FUNCLET_ECAFFINE_ADDITION 843    
                            15675 ; 2037 |//$FILENAME ecaffine_addition_subtraction.src
                            15676 ; 2038 |#define RSRC_FUNCLET_ECAFFINE_ADDITION_SUBTRACTION 844    
                            15677 ; 2039 |//$FILENAME ecaffine_attributes2.src
                            15678 ; 2040 |#define RSRC_FUNCLET_ECAFFINE_ATTRIBUTES2 845    
                            15679 ; 2041 |//$FILENAME kfdesc_initialize.src
                            15680 ; 2042 |#define RSRC_FUNCLET_KFDESC_INITIALIZE 846    
                            15681 ; 2043 |//$FILENAME kimmediate.src
                            15682 ; 2044 |#define RSRC_FUNCLET_KIMMEDIATE 847    
                            15683 ; 2045 |//$FILENAME kprime_immediater.src
                            15684 ; 2046 |#define RSRC_FUNCLET_KPRIME_IMMEDIATER 848    
                            15685 ; 2047 |//$FILENAME kprime_sqrter.src
                            15686 ; 2048 |#define RSRC_FUNCLET_KPRIME_SQRTER 849    
                            15687 ; 2049 |//$FILENAME kinitialize_prime.src
                            15688 ; 2050 |#define RSRC_FUNCLET_KINITIALIZE_PRIME 850    
                            15689 ; 2051 |//$FILENAME mod_lucasuv.src
                            15690 ; 2052 |#define RSRC_FUNCLET_MOD_LUCASUV 851    
                            15691 ; 2053 |//$FILENAME mod_lucas.src
                            15692 ; 2054 |#define RSRC_FUNCLET_MOD_LUCAS 852    
                            15693 ; 2055 |//$FILENAME bucket_multiply.src
                            15694 ; 2056 |#define RSRC_FUNCLET_BUCKET_MULTIPLY 853    
                            15695 ; 2057 |//$FILENAME mod_exp2000.src
                            15696 ; 2058 |#define RSRC_FUNCLET_MOD_EXP2000 854    
                            15697 ; 2059 |//$FILENAME mod_exp.src
                            15698 ; 2060 |#define RSRC_FUNCLET_MOD_EXP 855    
                            15699 ; 2061 |//$FILENAME modmul_choices1.src
                            15700 ; 2062 |#define RSRC_FUNCLET_MODMUL_CHOICES1 856    
                            15701 ; 2063 |//$FILENAME mod_sqrt.src
                            15702 ; 2064 |#define RSRC_FUNCLET_MOD_SQRT 857    
                            15703 ; 2065 |//$FILENAME create_modulus.src
                            15704 ; 2066 |#define RSRC_FUNCLET_CREATE_MODULUS 858    
                            15705 ; 2067 |//$FILENAME from_modular.src
                            15706 ; 2068 |#define RSRC_FUNCLET_FROM_MODULAR 859    
                            15707 ; 2069 |//$FILENAME add_immediate.src
                            15708 ; 2070 |#define RSRC_FUNCLET_ADD_IMMEDIATE 860    
                            15709 ; 2071 |//$FILENAME add_diff.src
                            15710 ; 2072 |#define RSRC_FUNCLET_ADD_DIFF 861    
                            15711 ; 2073 |//$FILENAME add_full.src
                            15712 ; 2074 |#define RSRC_FUNCLET_ADD_FULL 862    
                            15713 ; 2075 |//$FILENAME compare_sum_same.src
                            15714 ; 2076 |#define RSRC_FUNCLET_COMPARE_SUM_SAME 863    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 265

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15715 ; 2077 |//$FILENAME sub_immediate.src
                            15716 ; 2078 |#define RSRC_FUNCLET_SUB_IMMEDIATE 864    
                            15717 ; 2079 |//$FILENAME mp_initialization.src
                            15718 ; 2080 |#define RSRC_FUNCLET_MP_INITIALIZATION 865    
                            15719 ; 2081 |//$FILENAME new_random_bytes.src
                            15720 ; 2082 |#define RSRC_FUNCLET_NEW_RANDOM_BYTES 866    
                            15721 ; 2083 |//$FILENAME new_random_dword_interval.src
                            15722 ; 2084 |#define RSRC_FUNCLET_NEW_RANDOM_DWORD_INTERVAL 867    
                            15723 ; 2085 |//$FILENAME new_random_digit_interval.src
                            15724 ; 2086 |#define RSRC_FUNCLET_NEW_RANDOM_DIGIT_INTERVAL 868    
                            15725 ; 2087 |//$FILENAME new_random_mod.src
                            15726 ; 2088 |#define RSRC_FUNCLET_NEW_RANDOM_MOD 869    
                            15727 ; 2089 |//$FILENAME new_random_mod_nonzero.src
                            15728 ; 2090 |#define RSRC_FUNCLET_NEW_RANDOM_MOD_NONZERO 870    
                            15729 ; 2091 |//$FILENAME new_random_digits.src
                            15730 ; 2092 |#define RSRC_FUNCLET_NEW_RANDOM_DIGITS 871    
                            15731 ; 2093 |//$FILENAME words_to_ecaffine.src
                            15732 ; 2094 |#define RSRC_FUNCLET_WORDS_TO_ECAFFINE 872    
                            15733 ; 2095 |//$FILENAME ecaffine_to_dwords.src
                            15734 ; 2096 |#define RSRC_FUNCLET_ECAFFINE_TO_DWORDS 873    
                            15735 ; 2097 |//$FILENAME _threadunsafepkinit.src
                            15736 ; 2098 |#define RSRC_FUNCLET__THREADUNSAFEPKINIT 874    
                            15737 ; 2099 |//$FILENAME pkinit.src
                            15738 ; 2100 |#define RSRC_FUNCLET_PKINIT 875    
                            15739 ; 2101 |//$FILENAME drm_pk_genkeypair.src
                            15740 ; 2102 |#define RSRC_FUNCLET_DRM_PK_GENKEYPAIR 876    
                            15741 ; 2103 |//$FILENAME drm_pk_encrypt.src
                            15742 ; 2104 |#define RSRC_FUNCLET_DRM_PK_ENCRYPT 877    
                            15743 ; 2105 |//$FILENAME drm_pk_decrypt.src
                            15744 ; 2106 |#define RSRC_FUNCLET_DRM_PK_DECRYPT 878    
                            15745 ; 2107 |//$FILENAME byte_array_mod_bignum.src
                            15746 ; 2108 |#define RSRC_FUNCLET_BYTE_ARRAY_MOD_BIGNUM 879    
                            15747 ; 2109 |//$FILENAME fe2ipmod.src
                            15748 ; 2110 |#define RSRC_FUNCLET_FE2IPMOD 880    
                            15749 ; 2111 |//$FILENAME drm_pk_sign.src
                            15750 ; 2112 |#define RSRC_FUNCLET_DRM_PK_SIGN 881    
                            15751 ; 2113 |//$FILENAME drm_pk_verify.src
                            15752 ; 2114 |#define RSRC_FUNCLET_DRM_PK_VERIFY 882    
                            15753 ; 2115 |//$FILENAME random_bytes.src
                            15754 ; 2116 |#define RSRC_FUNCLET_RANDOM_BYTES 883    
                            15755 ; 2117 |//$FILENAME mp_gcdex.src
                            15756 ; 2118 |#define RSRC_FUNCLET_MP_GCDEX 884    
                            15757 ; 2119 |//$FILENAME mp_gcdex_split1.src
                            15758 ; 2120 |#define RSRC_FUNCLET_MP_GCDEX_SPLIT1 885    
                            15759 ; 2121 |//$FILENAME pkcrypto_p.src
                            15760 ; 2122 |#define RSRC_PKCRYPTO_P 886    
                            15761 ; 2123 |//$FILENAME pkcrypto_ovl_p.src
                            15762 ; 2124 |#define RSRC_PKCRYPTO_OVL_P 887    
                            15763 ; 2125 |//$FILENAME del_all_warning_line2.src
                            15764 ; 2126 |#define RSRC_WARNING_MSG_ALL_LINE2 888    
                            15765 ; 2127 |//$FILENAME del_all_file_star.src
                            15766 ; 2128 |#define RSRC_FILE_DELETE_STAR 889    
                            15767 ; 2129 |//$FILENAME string_voice_menu_delete_all.src
                            15768 ; 2130 |#define RSRC_STRING_VOICE_MENU_DELETE_ALL 890    
                            15769 ; 2131 |//$FILENAME Funclet_Init5VSense.src
                            15770 ; 2132 |#define RSRC_FUNCLET_INIT5VSENSE 891    
                            15771 ; 2133 |//$FILENAME Funclet_UpdateDCDCDutyCycle.src
                            15772 ; 2134 |#define RSRC_FUNCLET_UPDATEDCDCDUTYCYCLE 892    
                            15773 ; 2135 |//$FILENAME Funclet_changeplayset.src
                            15774 ; 2136 |#define RSRC_FUNCLET_CHANGE_PLAYSET 893    
                            15775 ; 2137 |
                            15776 ; 2138 |//$FILENAME Funclet_mmctesterase.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 266

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15777 ; 2139 |#define RSRC_FUNCLET_MMC_TEST_ERASE 894    
                            15778 ; 2140 |//$FILENAME Funclet_mmchalinit.src
                            15779 ; 2141 |#define RSRC_FUNCLET_MMC_HALINIT 895    
                            15780 ; 2142 |
                            15781 ; 2143 |
                            15782 ; 2144 |// Added to allow rechargeable battery configurations to build
                            15783 ; 2145 |//$FILENAME battery_charging.src
                            15784 ; 2146 |#define RSRC_BATTERY_CHARGING 896    
                            15785 ; 2147 |//$FILENAME batterychargecodebank.src
                            15786 ; 2148 |#define RSRC_BATTERY_CHARGE_CODEBANK 897    
                            15787 ; 2149 |//$FILENAME updatevolume.src
                            15788 ; 2150 |#define RSRC_FUNCLET_SYSUPDATEVOLUME 898    
                            15789 ; 2151 |//$FILENAME Funclet_TestSkipCheckDisk.src
                            15790 ; 2152 |#define RSRC_FUNCLET_TESTSKIPCHECKDISK 899    
                            15791 ; 2153 |//$FILENAME Funclet_DisableStmpGeneratedMicBias.src
                            15792 ; 2154 |#define RSRC_FUNCLET_DISABLE_STMP_GENERATED_MICBIAS 900    
                            15793 ; 2155 |//$FILENAME Funclet_EnableStmpGeneratedMicBias.src
                            15794 ; 2156 |#define RSRC_FUNCLET_ENABLE_STMP_GENERATED_MICBIAS 901    
                            15795 ; 2157 |//$FILENAME Funclet_SetSkipCheckDisk.src
                            15796 ; 2158 |#define RSRC_FUNCLET_SETSKIPCHECKDISK 902    
                            15797 ; 2159 |//$FILENAME drm_expr_evaluateexpression_no_more_tokens.src
                            15798 ; 2160 |#define RSRC_FUNCLET_DRM_EXPR_EVALUATEEXPRESSION_NO_MORE_TOKENS 903    
                            15799 ; 2161 |//$FILENAME _iscachedevent.src
                            15800 ; 2162 |#define RSRC_FUNCLET__ISCACHEDEVENT 904    
                            15801 ; 2163 |//$FILENAME setcountedexpirycategory.src
                            15802 ; 2164 |#define RSRC_FUNCLET_SETCOUNTEDEXPIRYCATEGORY 905    
                            15803 ; 2165 |//$FILENAME oem_data.src
                            15804 ; 2166 |#define RSRC_OEM_DATA 906    
                            15805 ; 2167 |//$FILENAME gpk_p.src
                            15806 ; 2168 |#define RSRC_GPK_P 907    
                            15807 ; 2169 |//$FILENAME key_data.src
                            15808 ; 2170 |#define RSRC_KEY_DATA 908    
                            15809 ; 2171 |//$FILENAME string_arial_8_defragmenting_store.src
                            15810 ; 2172 |#define RSRC_DEFRAGMENT_STORE_STRING 909    
                            15811 ; 2173 |//$FILENAME string_working.src
                            15812 ; 2174 |#define RSRC_STRING_WORKING 910    
                            15813 ; 2175 |//$FILENAME Funclet_loadusertime.src
                            15814 ; 2176 |#define RSRC_FUNCLET_LOADUSERTIME 911    
                            15815 ; 2177 |//$FILENAME Funclet_saveusertime.src
                            15816 ; 2178 |#define RSRC_FUNCLET_SAVEUSERTIME 912    
                            15817 ; 2179 |
                            15818 ; 2180 |//$FILENAME Funclet_SysLRADCBrownoutInit.src
                            15819 ; 2181 |#define RSRC_FUNCLET_SYSLRADCBROWNOUTINIT 913    
                            15820 ; 2182 |//$FILENAME Funclet_SysBatteryGetLevel.src
                            15821 ; 2183 |#define RSRC_FUNCLET_SYSBATTERYGETLEVEL 914    
                            15822 ; 2184 |
                            15823 ; 2185 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15824 ; 2186 |// Audible ACELP Resources
                            15825 ; 2187 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15826 ; 2188 |//$FILENAME AudibleAcelpDec.src
                            15827 ; 2189 |#define RSRC_AUDIBLE_ACELPDEC_CODE 915    
                            15828 ; 2190 |//$FILENAME AudibleAcelpP.src
                            15829 ; 2191 |#define RSRC_AUDIBLE_ACELP_CODE_P 916    
                            15830 ; 2192 |//$FILENAME AudibleAcelpX.src
                            15831 ; 2193 |#define RSRC_AUDIBLE_ACELP_DATA_X 917    
                            15832 ; 2194 |//$FILENAME AudibleAcelpY.src
                            15833 ; 2195 |#define RSRC_AUDIBLE_ACELP_DATA_Y 918    
                            15834 ; 2196 |
                            15835 ; 2197 |//$FILENAME AudibleDecMod.src
                            15836 ; 2198 |#define RSRC_AUDIBLE_DECMOD_CODE 919    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 267

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15837 ; 2199 |//$FILENAME audiblemp3p.src
                            15838 ; 2200 |#define RSRC_AUDIBLE_MP3P_CODE 920    
                            15839 ; 2201 |//$FILENAME audiblemp3x.src
                            15840 ; 2202 |#define RSRC_AUDIBLE_MP3X_CODE 921    
                            15841 ; 2203 |//$FILENAME audiblemp3y.src
                            15842 ; 2204 |#define RSRC_AUDIBLE_MP3Y_CODE 922    
                            15843 ; 2205 |
                            15844 ; 2206 |//$FILENAME audiblemetadata_p.src
                            15845 ; 2207 |#define RSRC_AUDIBLE_METADATA_P 923    
                            15846 ; 2208 |//$FILENAME audiblemetadata_y.src
                            15847 ; 2209 |#define RSRC_AUDIBLE_METADATA_Y 924    
                            15848 ; 2210 |//$FILENAME audiblesongposition_p.src
                            15849 ; 2211 |#define RSRC_AUDIBLE_SONG_POSITION_P 925    
                            15850 ; 2212 |//$FILENAME audibletargetcheck_p.src
                            15851 ; 2213 |#define RSRC_AUDIBLE_TARGET_CHECK_P 926    
                            15852 ; 2214 |//$FILENAME audiblefillfileinfo_p.src
                            15853 ; 2215 |#define RSRC_AUDIBLE_FILLFILEINFO_P 927    
                            15854 ; 2216 |//$FILENAME audibledsa_p.src
                            15855 ; 2217 |#define RSRC_AUDIBLE_DSA_P 928    
                            15856 ; 2218 |//$FILENAME audiblefillmetadata_p.src
                            15857 ; 2219 |#define RSRC_AUDIBLE_FILLMETADATA_P 929    
                            15858 ; 2220 |//$FILENAME audiblemetastrings_p.src
                            15859 ; 2221 |#define RSRC_AUDIBLE_METASTRINGS_P 930    
                            15860 ; 2222 |//$FILENAME aaactivationrecords_p.src
                            15861 ; 2223 |#define RSRC_AUDIBLE_ACTIVATION_P 931    
                            15862 ; 2224 |
                            15863 ; 2225 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15864 ; 2226 |// Effects and SRS Resources
                            15865 ; 2227 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15866 ; 2228 |//$FILENAME srs_effectsmodules_p.src
                            15867 ; 2229 |#define RSRC_SRS_EFFECTS_MODULES_P 932    
                            15868 ; 2230 |//$FILENAME srs_effectsmodules_x.src
                            15869 ; 2231 |#define RSRC_SRS_EFFECTS_MODULES_X 933    
                            15870 ; 2232 |//$FILENAME wowctrl.src
                            15871 ; 2233 |#define RSRC_WOW_CTRL 934    
                            15872 ; 2234 |
                            15873 ; 2235 |//$FILENAME wowmenu.src
                            15874 ; 2236 |#define RSRC_WOW_MENU_CODE_BANK 935    
                            15875 ; 2237 |//$FILENAME string_wowbrightness_menu.src
                            15876 ; 2238 |#define RSRC_STRING_WOW_BRIGHTNESS 936    
                            15877 ; 2239 |//$FILENAME string_wow_menu.src
                            15878 ; 2240 |#define RSRC_STRING_WOW_MENU 937    
                            15879 ; 2241 |//$FILENAME string_wowtrubass_menu.src
                            15880 ; 2242 |#define RSRC_STRING_WOW_TRUBASS 938    
                            15881 ; 2243 |//$FILENAME string_wowvolume_menu.src
                            15882 ; 2244 |#define RSRC_STRING_WOW_VOLUME 939    
                            15883 ; 2245 |//$FILENAME string_wowbrightness_low_menu.src
                            15884 ; 2246 |#define RSRC_STRING_WOW_BRIGHT_LOW 940    
                            15885 ; 2247 |//$FILENAME string_wowbrightness_mid_menu.src
                            15886 ; 2248 |#define RSRC_STRING_WOW_BRIGHT_MID 941    
                            15887 ; 2249 |//$FILENAME string_wowbrightness_high_menu.src
                            15888 ; 2250 |#define RSRC_STRING_WOW_BRIGHT_HIGH 942    
                            15889 ; 2251 |//$FILENAME wow_icon.src
                            15890 ; 2252 |#define RSRC_WOW_ICON 943    
                            15891 ; 2253 |
                            15892 ; 2254 |//$FILENAME wow16k.src
                            15893 ; 2255 |#define RSRC_WOW16K 944    
                            15894 ; 2256 |//$FILENAME wow32k.src
                            15895 ; 2257 |#define RSRC_WOW32K 945    
                            15896 ; 2258 |//$FILENAME wow8k.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 268

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15897 ; 2259 |#define RSRC_WOW8K 946    
                            15898 ; 2260 |//$FILENAME wow11k.src
                            15899 ; 2261 |#define RSRC_WOW11K 947    
                            15900 ; 2262 |//$FILENAME wow22k.src
                            15901 ; 2263 |#define RSRC_WOW22K 948    
                            15902 ; 2264 |//$FILENAME wow24k.src
                            15903 ; 2265 |#define RSRC_WOW24K 949    
                            15904 ; 2266 |//$FILENAME wow44k.src
                            15905 ; 2267 |#define RSRC_WOW44K 950    
                            15906 ; 2268 |//$FILENAME wow48k.src
                            15907 ; 2269 |#define RSRC_WOW48K 951    
                            15908 ; 2270 |
                            15909 ; 2271 |//$FILENAME wow16k_Y.src
                            15910 ; 2272 |#define RSRC_WOW16K_Y 952    
                            15911 ; 2273 |//$FILENAME wow32k_Y.src
                            15912 ; 2274 |#define RSRC_WOW32K_Y 953    
                            15913 ; 2275 |//$FILENAME wow8k_Y.src
                            15914 ; 2276 |#define RSRC_WOW8K_Y 954    
                            15915 ; 2277 |//$FILENAME wow11k_Y.src
                            15916 ; 2278 |#define RSRC_WOW11K_Y 955    
                            15917 ; 2279 |//$FILENAME wow22k_Y.src
                            15918 ; 2280 |#define RSRC_WOW22K_Y 956    
                            15919 ; 2281 |//$FILENAME wow24k_Y.src
                            15920 ; 2282 |#define RSRC_WOW24K_Y 957    
                            15921 ; 2283 |//$FILENAME wow44k_Y.src
                            15922 ; 2284 |#define RSRC_WOW44K_Y 958    
                            15923 ; 2285 |//$FILENAME wow48k_Y.src
                            15924 ; 2286 |#define RSRC_WOW48K_Y 959    
                            15925 ; 2287 |
                            15926 ; 2288 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15927 ; 2289 |// Audible Section Navigation
                            15928 ; 2290 |//////////////////////////////////////////////////////////////////////////////////////////
                                  ///////////
                            15929 ; 2291 |//$FILENAME audible_secnav.src
                            15930 ; 2292 |#define RSRC_AUDIBLE_SECNAV_ICON 960    
                            15931 ; 2293 |
                            15932 ; 2294 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15933 ; 2295 |// PLAYLIST3 and Music Library
                            15934 ; 2296 |//////////////////////////////////////////////////////////////////////////////////////////
                                  //////////
                            15935 ; 2297 |
                            15936 ; 2298 |//$FILENAME build_ml.src
                            15937 ; 2299 |#define RSRC_BUILD_ML 961    
                            15938 ; 2300 |//$FILENAME build_ml_warning.src
                            15939 ; 2301 |#define RSRC_BUILD_ML_WARNING 962    
                            15940 ; 2302 |//$FILENAME build_ml_warning2.src
                            15941 ; 2303 |#define RSRC_BUILD_ML_WARNING2 963    
                            15942 ; 2304 |//$FILENAME build_flash1.src
                            15943 ; 2305 |#define RSRC_BUILD_FLASH1 964    
                            15944 ; 2306 |//$FILENAME build_flash2.src
                            15945 ; 2307 |#define RSRC_BUILD_FLASH2 965    
                            15946 ; 2308 |//$FILENAME build_flash3.src
                            15947 ; 2309 |#define RSRC_BUILD_FLASH3 966    
                            15948 ; 2310 |//$FILENAME build_sd1.src
                            15949 ; 2311 |#define RSRC_BUILD_SD1 967    
                            15950 ; 2312 |//$FILENAME build_sd2.src
                            15951 ; 2313 |#define RSRC_BUILD_SD2 968    
                            15952 ; 2314 |//$FILENAME build_sd3.src
                            15953 ; 2315 |#define RSRC_BUILD_SD3 969    
                            15954 ; 2316 |//$FILENAME build_newmusic.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 269

M:ADDR CODE           CYCLES LINE SOURCELINE
                            15955 ; 2317 |#define RSRC_BUILD_NEWMUSIC 970    
                            15956 ; 2318 |//$FILENAME sdmd.src
                            15957 ; 2319 |#define RSRC_SDMD_MENU_CODE_BANK 971    
                            15958 ; 2320 |//$FILENAME musiclib_build_function_sec.src
                            15959 ; 2321 |#define RSRC_MUSICLIB_BUILD_FUNCTION_SEC 972    
                            15960 ; 2322 |//$FILENAME musiclib_build_function_flush.src
                            15961 ; 2323 |#define RSRC_MUSICLIB_BUILD_FUNCTION_FLUSH 973    
                            15962 ; 2324 |//$FILENAME MusicLibBuildModule.src
                            15963 ; 2325 |#define RSRC_MUSICLIB_BUILD_MODULE 974    
                            15964 ; 2326 |//$FILENAME MusicLibBuildGenreTable.src
                            15965 ; 2327 |#define RSRC_MUSICLIB_BUILD_GENRE_TABLE 975    
                            15966 ; 2328 |//$FILENAME MusicLibBuildFlushMem.src
                            15967 ; 2329 |#define RSRC_MUSICLIB_BUILD_FLUSH_MEM 976    
                            15968 ; 2330 |//$FILENAME MusicLibBrowseModule.src
                            15969 ; 2331 |#define RSRC_MUSICLIB_BROWSE_MODULE 977    
                            15970 ; 2332 |//$FILENAME MusicLibPlayModule.src
                            15971 ; 2333 |#define RSRC_MUSICLIB_PLAY_MODULE 978    
                            15972 ; 2334 |//$FILENAME MusicLibPlayAllNextModule.src
                            15973 ; 2335 |#define RSRC_MUSICLIB_PLAYALLNEXT_MODULE 979    
                            15974 ; 2336 |//$FILENAME MusicLibPlayAllPrevModule.src
                            15975 ; 2337 |#define RSRC_MUSICLIB_PLAYALLPREV_MODULE 980    
                            15976 ; 2338 |//$FILENAME MusicLibShuffleModule.src
                            15977 ; 2339 |#define RSRC_MUSICLIB_SHUFFLE_MODULE 981    
                            15978 ; 2340 |//$FILENAME Funclet_write_detection_access.src
                            15979 ; 2341 |#define RSRC_FUNCLET_WRITE_DETECTION_ACCESS 982    
                            15980 ; 2342 |//$FILENAME Funclet_LOCAL_GetLvlOneItem_info.src
                            15981 ; 2343 |#define RSRC_FUNCLET_LOCAL_GET_LVL_ONE_ITEM_INFO 983    
                            15982 ; 2344 |//$FILENAME Funclet_LOCAL_GetFlashAssociatedList_info.src
                            15983 ; 2345 |#define RSRC_FUNCLET_LOCAL_GET_FLASH_ASSOCIATED_LIST_INFO 984    
                            15984 ; 2346 |//$FILENAME Funclet_ML_ResumePlayState.src
                            15985 ; 2347 |#define RSRC_FUNCLET_ML_RESUMEPLAYSTATE 985    
                            15986 ; 2348 |//$FILENAME Funclet_ML_UpdateOnTheGo.src
                            15987 ; 2349 |#define RSRC_FUNCLET_ML_UPDATE_ON_THE_GO 986    
                            15988 ; 2350 |//$FILENAME Funclet_ML_ChOnTheGo.src
                            15989 ; 2351 |#define RSRC_FUNCLET_ML_CH_ON_THE_GO 987    
                            15990 ; 2352 |//$FILENAME Funclet_ML_LoadOnTheGo.src
                            15991 ; 2353 |#define RSRC_FUNCLET_ML_LOAD_ON_THE_GO 988    
                            15992 ; 2354 |//$FILENAME Funclet_Build_InitandUseCache.src
                            15993 ; 2355 |#define RSRC_FUNCLET_BUILD_INIT_AND_USE_CACHE 989    
                            15994 ; 2356 |//$FILENAME Funclet_Build_FlushAndCloseCache.src
                            15995 ; 2357 |#define RSRC_FUNCLET_BUILD_FLUSH_AND_CLOSE_CACHE 990    
                            15996 ; 2358 |//$FILENAME Funclet_ML_movePointerBackward.src
                            15997 ; 2359 |#define RSRC_FUNCLET_ML_MOVE_POINTER_BACKWARD 991    
                            15998 ; 2360 |//$FILENAME Funclet_ML_findLastItemPointer.src
                            15999 ; 2361 |#define RSRC_FUNCLET_ML_FIND_LAST_ITEM_POINTER 992    
                            16000 ; 2362 |//$FILENAME Funclet_ML_startShuffle.src
                            16001 ; 2363 |#define RSRC_FUNCLET_ML_START_SHUFFLE 993    
                            16002 ; 2364 |//$FILENAME Funclet_ML_GetFlashDirAssocListId.src
                            16003 ; 2365 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ID 994    
                            16004 ; 2366 |//$FILENAME Funclet_ML_GetFlashDirAssocListRootId.src
                            16005 ; 2367 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_ROOT_ID 995    
                            16006 ; 2368 |//$FILENAME Funclet_ML_GetFlashDirAssocListSize.src
                            16007 ; 2369 |#define RSRC_FUNCLET_ML_GET_FLASH_DIR_ASSOC_LIST_SIZE 996    
                            16008 ; 2370 |//$FILENAME Funclet_ML_GetIdByStateAndPosition.src
                            16009 ; 2371 |#define RSRC_FUNCLET_ML_GET_ID_BY_STATE_AND_POSITION 997    
                            16010 ; 2372 |//$FILENAME Funclet_ML_StartPlayDirSongInit.src
                            16011 ; 2373 |#define RSRC_FUNCLET_ML_START_PLAY_DIR_SONG_INIT 998    
                            16012 ; 2374 |//$FILENAME Funclet_ML_ShuffleNextDirSong.src
                            16013 ; 2375 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_DIR_SONG 999    
                            16014 ; 2376 |//$FILENAME Funclet_ML_BrowseMenu.src
                            16015 ; 2377 |#define RSRC_FUNCLET_ML_BROWSE_MENU 1000    
                            16016 ; 2378 |//$FILENAME Funclet_ML_StartPlayAllSong.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 270

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16017 ; 2379 |#define RSRC_FUNCLET_ML_START_PLAY_ALL_SONG 1001    
                            16018 ; 2380 |//$FILENAME Funclet_ML_PlayAllNextSong.src
                            16019 ; 2381 |#define RSRC_FUNCLET_ML_PLAY_ALL_NEXT_SONG 1002    
                            16020 ; 2382 |//$FILENAME Funclet_ML_PlayAllPreviousSong.src
                            16021 ; 2383 |#define RSRC_FUNCLET_ML_PLAY_ALL_PREVIOUS_SONG 1003    
                            16022 ; 2384 |//$FILENAME Funclet_ML_PlayPreviousDirSong.src
                            16023 ; 2385 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_DIR_SONG 1004    
                            16024 ; 2386 |//$FILENAME Funclet_ML_ShuffleNextSong.src
                            16025 ; 2387 |#define RSRC_FUNCLET_ML_SHUFFLE_NEXT_SONG 1005    
                            16026 ; 2388 |//$FILENAME Funclet_ML_PlayNextSong.src
                            16027 ; 2389 |#define RSRC_FUNCLET_ML_PLAY_NEXT_SONG 1006    
                            16028 ; 2390 |//$FILENAME Funclet_ML_PlayPreviousSong.src
                            16029 ; 2391 |#define RSRC_FUNCLET_ML_PLAY_PREVIOUS_SONG 1007    
                            16030 ; 2392 |//$FILENAME Funclet_BuildVoiceFilePath.src
                            16031 ; 2393 |#define RSRC_FUNCLET_BUILDVOICEFILEPATH 1008    
                            16032 ; 2394 |//$FILENAME Funclet_BuildFMFilePath.src
                            16033 ; 2395 |#define RSRC_FUNCLET_BUILDFMFILEPATH 1009    
                            16034 ; 2396 |//$FILENAME Funclet_BuildLINEINFilePath.src
                            16035 ; 2397 |#define RSRC_FUNCLET_BUILDLINEINFILEPATH 1010    
                            16036 ; 2398 |//$FILENAME Funclet_GetVoiceFastKey.src
                            16037 ; 2399 |#define RSRC_FUNCLET_GETVOICEFASTKEY 1011    
                            16038 ; 2400 |//$FILENAME MusicLibVoiceApp.src
                            16039 ; 2401 |#define RSRC_MUSICLIB_VOICE_APP 1012    
                            16040 ; 2402 |//$FILENAME MusicLibVoiceModule.src
                            16041 ; 2403 |#define RSRC_MUSICLIB_VOICE_MODULE 1013    
                            16042 ; 2404 |//$FILENAME MusicLibVoicePlayModule.src
                            16043 ; 2405 |#define RSRC_MUSICLIB_VOICEPLAY_MODULE 1014    
                            16044 ; 2406 |//$FILENAME MusicLibMergeFunction.src
                            16045 ; 2407 |#define RSRC_MUSICLIB_MERGE_FUNCTION 1015    
                            16046 ; 2408 |//$FILENAME MusicLibMergeModule.src
                            16047 ; 2409 |#define RSRC_MUSICLIB_MERGE_MODULE 1016    
                            16048 ; 2410 |//$FILENAME MusicLibBrowseApp.src
                            16049 ; 2411 |#define RSRC_MUSICLIB_BROWSE_APP 1017    
                            16050 ; 2412 |//$FILENAME playmusicmenu.src
                            16051 ; 2413 |#define RSRC_PLAYMUSIC_MENU_CODE_BANK 1018    
                            16052 ; 2414 |//$FILENAME browsemenu.src
                            16053 ; 2415 |#define RSRC_BROWSE_MENU_CODE_BANK 1019    
                            16054 ; 2416 |//$FILENAME browsemenu_extra.src
                            16055 ; 2417 |#define RSRC_BROWSE_MENU_EXTRA_CODE_BANK 1020    
                            16056 ; 2418 |//$FILENAME string_play_all.src
                            16057 ; 2419 |#define RSRC_STRING_PLAY_ALL 1021    
                            16058 ; 2420 |//$FILENAME string_play.src
                            16059 ; 2421 |#define RSRC_STRING_PLAY 1022    
                            16060 ; 2422 |//$FILENAME string_unknown_year.src
                            16061 ; 2423 |#define RSRC_STRING_UNKNOWN_YEAR 1023    
                            16062 ; 2424 |//$FILENAME string_year_width.src
                            16063 ; 2425 |#define RSRC_STRING_YEAR_WIDTH 1024    
                            16064 ; 2426 |//$FILENAME string_artist.src
                            16065 ; 2427 |#define RSRC_STRING_ARTIST 1025    
                            16066 ; 2428 |//$FILENAME string_songs.src
                            16067 ; 2429 |#define RSRC_STRING_SONGS 1026    
                            16068 ; 2430 |//$FILENAME string_on_the_fly.src
                            16069 ; 2431 |#define RSRC_STRING_ON_THE_FLY 1027    
                            16070 ; 2432 |//$FILENAME string_new_music.src
                            16071 ; 2433 |#define RSRC_STRING_NEW_MUSIC_MENU 1028    
                            16072 ; 2434 |//$FILENAME string_genre.src
                            16073 ; 2435 |#define RSRC_STRING_GENRE 1029    
                            16074 ; 2436 |//$FILENAME string_year.src
                            16075 ; 2437 |#define RSRC_STRING_YEAR 1030    
                            16076 ; 2438 |//$FILENAME string_playlist.src
                            16077 ; 2439 |#define RSRC_STRING_PLAYLIST 1031    
                            16078 ; 2440 |//$FILENAME string_fm_rec.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 271

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16079 ; 2441 |#define RSRC_STRING_FM_REC 1032    
                            16080 ; 2442 |//$FILENAME string_linein_rec.src
                            16081 ; 2443 |#define RSRC_STRING_LINEIN_REC 1033    
                            16082 ; 2444 |//$FILENAME string_play_music.src
                            16083 ; 2445 |#define RSRC_STRING_PLAY_MUSIC 1034    
                            16084 ; 2446 |//$FILENAME highlight_back.src
                            16085 ; 2447 |#define RSRC_HIGHLIGHT_BACK 1035    
                            16086 ; 2448 |//$FILENAME newmusicmenu.src
                            16087 ; 2449 |#define RSRC_NEW_MUSIC_MENU_CODE_BANK 1036    
                            16088 ; 2450 |//$FILENAME string_1_day.src
                            16089 ; 2451 |#define RSRC_STRING_1_DAY 1037    
                            16090 ; 2452 |//$FILENAME string_1_week.src
                            16091 ; 2453 |#define RSRC_STRING_1_WEEK 1038    
                            16092 ; 2454 |//$FILENAME string_1_month.src
                            16093 ; 2455 |#define RSRC_STRING_1_MONTH 1039    
                            16094 ; 2456 |//$FILENAME on_the_fly_full.src
                            16095 ; 2457 |#define RSRC_LIST_FULL_MESSAGE 1040    
                            16096 ; 2458 |//$FILENAME on_the_fly_free1.src
                            16097 ; 2459 |#define RSRC_LIST_FREE_MESSAGE 1041    
                            16098 ; 2460 |//$FILENAME on_the_fly_free2.src
                            16099 ; 2461 |#define RSRC_LIST_FREE_MESSAGE2 1042    
                            16100 ; 2462 |//$FILENAME on_the_fly_delete1.src
                            16101 ; 2463 |#define RSRC_LIST_DELETE_MESSAGE 1043    
                            16102 ; 2464 |//$FILENAME on_the_fly_delete2.src
                            16103 ; 2465 |#define RSRC_LIST_DELETE_MESSAGE2 1044    
                            16104 ; 2466 |//$FILENAME empty_favourite.src
                            16105 ; 2467 |#define RSRC_EMPTY_FAVOURITE 1045    
                            16106 ; 2468 |//$FILENAME sd_remove.src
                            16107 ; 2469 |#define RSRC_SD_REMOVE 1046    
                            16108 ; 2470 |//$FILENAME sd_insert.src
                            16109 ; 2471 |#define RSRC_SD_INSERT 1047    
                            16110 ; 2472 |//$FILENAME check_disk_1.src
                            16111 ; 2473 |#define RSRC_CHECK_DISK_1 1048    
                            16112 ; 2474 |//$FILENAME check_disk_2.src
                            16113 ; 2475 |#define RSRC_CHECK_DISK_2 1049    
                            16114 ; 2476 |//$FILENAME check_disk_3.src
                            16115 ; 2477 |#define RSRC_CHECK_DISK_3 1050    
                            16116 ; 2478 |//$FILENAME flash_error.src
                            16117 ; 2479 |#define RSRC_FLASH_ERROR 1051    
                            16118 ; 2480 |
                            16119 ; 2481 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16120 ; 2482 |// STFM1000 Tuner funclet
                            16121 ; 2483 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16122 ; 2484 |//$FILENAME Funclet_TunerDriverInit.src
                            16123 ; 2485 |#define RSRC_FUNCLET_TUNER_DRIVER_INIT 1052    
                            16124 ; 2486 |//$FILENAME Funclet_TunerDriverIncUp.src
                            16125 ; 2487 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_UP 1053    
                            16126 ; 2488 |//$FILENAME Funclet_TunerDriverIncDown.src
                            16127 ; 2489 |#define RSRC_FUNCLET_TUNER_DRIVER_INC_DOWN 1054    
                            16128 ; 2490 |//$FILENAME Funclet_TunerDriverStandyby.src
                            16129 ; 2491 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_STANDBY 1055    
                            16130 ; 2492 |//$FILENAME Funclet_TunerDriverReplacePreset.src
                            16131 ; 2493 |#define RSRC_FUNCLET_TUNER_DRIVER_REPLACE_PRESET 1056    
                            16132 ; 2494 |//$FILENAME Funclet_TunerDriverErasePreset.src
                            16133 ; 2495 |#define RSRC_FUNCLET_TUNER_DRIVER_ERASE_PRESET 1057    
                            16134 ; 2496 |//$FILENAME Funclet_TunerDriverTuneToPreset.src
                            16135 ; 2497 |#define RSRC_FUNCLET_TUNER_DRIVER_TUNE_TO_PRESET 1058    
                            16136 ; 2498 |//$FILENAME Funclet_TunerDriverSearchDown.src
                            16137 ; 2499 |#define RSRC_FUNCLET_TUNER_DRIVER_SEARCH_DOWN 1059    
                            16138 ; 2500 |//$FILENAME Funclet_TunerSTFM1000SafePowerDown.src
                            16139 ; 2501 |#define RSRC_FUNCLET_TUNER_SAFE_POWER_DOWN 1060    
                            16140 ; 2502 |//$FILENAME Funclet_TunerSTFM1000OptimizeChannel.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 272

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16141 ; 2503 |#define RSRC_FUNCLET_STFM1000_TUNER_OPTIMIZE_CHANNEL 1061    
                            16142 ; 2504 |//$FILENAME decstfmmod.src
                            16143 ; 2505 |#define RSRC_DEC_STFM_MOD_CODE 1062    
                            16144 ; 2506 |//$FILENAME dec_stfmp.src
                            16145 ; 2507 |#define RSRC_DEC_STFMP_CODE 1063    
                            16146 ; 2508 |//$FILENAME dec_stfmx.src
                            16147 ; 2509 |#define RSRC_DEC_STFMX_CODE 1064    
                            16148 ; 2510 |//$FILENAME dec_stfmy.src
                            16149 ; 2511 |#define RSRC_DEC_STFMY_CODE 1065    
                            16150 ; 2512 |//$FILENAME Funclet_TunerSTFM1000I2CInit.src
                            16151 ; 2513 |#define RSRC_FUNCLET_STFM1000_I2C_INIT 1066    
                            16152 ; 2514 |//$FILENAME Funclet_TunerDriverScanStations.src
                            16153 ; 2515 |#define RSRC_FUNCLET_TUNER_DRIVER_SCAN_STATION 1067    
                            16154 ; 2516 |//$FILENAME Funclet_TunerDriverSetMonoStereoMode.src
                            16155 ; 2517 |#define RSRC_FUNCLET_TUNER_DRIVER_SET_MONO_STEREO_MODE 1068    
                            16156 ; 2518 |//$FILENAME Funclet_STFM1000TestPresence.src
                            16157 ; 2519 |#define RSRC_FUNCLET_STFM1000_TEST_PRESENCE 1069    
                            16158 ; 2520 |//$FILENAME Funclet_I2CWriteTunerRegister.src
                            16159 ; 2521 |#define RSRC_FUNCLET_I2C_WRITE_TUNER_REGISTER 1070    
                            16160 ; 2522 |//$FILENAME Funclet_I2CReset.src
                            16161 ; 2523 |#define RSRC_FUNCLET_I2C_RESET 1071    
                            16162 ; 2524 |//$FILENAME fmtunersecondrsrc.src
                            16163 ; 2525 |#define RSRC_FM_TUNER_SECOND_RSRC 1072    
                            16164 ; 2526 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp1.src
                            16165 ; 2527 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP1 1073    
                            16166 ; 2528 |//$FILENAME Funclet_TunerSTFM1000RegPowerUp2.src
                            16167 ; 2529 |#define RSRC_FUNCLET_STFM1000_REG_POWER_UP2 1074    
                            16168 ; 2530 |//$FILENAME Funclet_TunerSTFM1000FindRssiThreshold.src
                            16169 ; 2531 |#define RSRC_FUNCLET_STFM1000_FIND_RSSI_THRESHOLD 1075    
                            16170 ; 2532 |//$FILENAME Funclet_TunerSTFM1000DataPathOff.src
                            16171 ; 2533 |#define RSRC_FUNCLET_STFM1000_DATA_PATH_OFF 1076    
                            16172 ; 2534 |//$FILENAME Funclet_TunerSTFM1000ContinueSearching.src
                            16173 ; 2535 |#define RSRC_FUNCLET_STFM1000_CONTINUE_SEARCHING 1077    
                            16174 ; 2536 |//RSRC_FUNCLET_STFM1000_SET_LNA_BIAS    equ      975    ;$FILENAME Funclet_STFM1000SetLnaB
                                  ias.src
                            16175 ; 2537 |//RSRC_FUNCLET_STFM1000_LOOK_FOR_PILOT    equ      976    ;$FILENAME Funclet_STFM1000LookF
                                  orPilot.src
                            16176 ; 2538 |//$FILENAME Funclet_STFM1000TunerSearchEnded.src
                            16177 ; 2539 |#define RSRC_FUNCLET_STFM1000_TUNER_SEARCH_ENDED 1078    
                            16178 ; 2540 |// for RestoreDriveFromBackup
                            16179 ; 2541 |//$FILENAME restoresysdrive.src
                            16180 ; 2542 |#define RSRC_RESTORESYSDRIVE_P_CODE 1079    
                            16181 ; 2543 |
                            16182 ; 2544 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16183 ; 2545 |// Playlist5 sources
                            16184 ; 2546 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16185 ; 2547 |//$FILENAME playlist5_browsemenu.src
                            16186 ; 2548 |#define RSRC_PL5BROWSE_MENU_CODEBANK 1080    
                            16187 ; 2549 |//$FILENAME playlist5_browsemenu_extra.src
                            16188 ; 2550 |#define RSRC_PL5_BROWSEMENU_EXTRA 1081    
                            16189 ; 2551 |//$FILENAME playlist5_browse_submenu.src
                            16190 ; 2552 |#define RSRC_PL5BROWSE_SUBMENU_CODEBANK 1082    
                            16191 ; 2553 |//$FILENAME playlist5_playback_module.src
                            16192 ; 2554 |#define RSRC_PLAYLIST5_PLAYBACK_MODULE 1083    
                            16193 ; 2555 |//$FILENAME playlist5_browse_module.src
                            16194 ; 2556 |#define RSRC_PLAYLIST5_BROWSE_MODULE 1084    
                            16195 ; 2557 |
                            16196 ; 2558 |//$FILENAME Funclet_Get_LRCDirName_PL5.src
                            16197 ; 2559 |#define RSRC_FUNCLET_GET_LRC_DIR_NAME_PL5 1085    
                            16198 ; 2560 |//$FILENAME Funclet_PL5_PL_QueuePushBack.src   
                            16199 ; 2561 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHBACK 1086    
                            16200 ; 2562 |//$FILENAME Funclet_PL5_PL_QueuePushFront.src 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 273

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16201 ; 2563 |#define RSRC_FUNCLET_PL5_PL_QUEUEPUSHFRONT 1087    
                            16202 ; 2564 |
                            16203 ; 2565 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16204 ; 2566 |// DanhNguyen added bitmaps
                            16205 ; 2567 |//;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            16206 ; 2568 |//$FILENAME icon_folder.src
                            16207 ; 2569 |#define RSRC_ICON_FOLDER 1088    
                            16208 ; 2570 |//$FILENAME icon_song.src
                            16209 ; 2571 |#define RSRC_ICON_SONG 1089    
                            16210 ; 2572 |
                            16211 ; 2573 |//$FILENAME menu_music.src
                            16212 ; 2574 |#define RSRC_MENU_MUSIC 1090    
                            16213 ; 2575 |//$FILENAME vie_menu_music.src
                            16214 ; 2576 |#define RSRC_VIE_MENU_MUSIC 1091    
                            16215 ; 2577 |
                            16216 ; 2578 |//$FILENAME menu_voice.src
                            16217 ; 2579 |#define RSRC_MENU_VOICE 1092    
                            16218 ; 2580 |//$FILENAME vie_menu_voice.src
                            16219 ; 2581 |#define RSRC_VIE_MENU_VOICE 1093    
                            16220 ; 2582 |
                            16221 ; 2583 |//$FILENAME menu_fmtuner.src
                            16222 ; 2584 |#define RSRC_MENU_FMTUNER 1094    
                            16223 ; 2585 |//$FILENAME vie_menu_fmtuner.src
                            16224 ; 2586 |#define RSRC_VIE_MENU_FMTUNER 1095    
                            16225 ; 2587 |
                            16226 ; 2588 |//$FILENAME menu_record.src
                            16227 ; 2589 |#define RSRC_MENU_RECORD 1096    
                            16228 ; 2590 |//$FILENAME vie_menu_record.src
                            16229 ; 2591 |#define RSRC_VIE_MENU_RECORD 1097    
                            16230 ; 2592 |
                            16231 ; 2593 |//$FILENAME menu_settings.src
                            16232 ; 2594 |#define RSRC_MENU_SETTINGS 1098    
                            16233 ; 2595 |//$FILENAME vie_menu_settings.src
                            16234 ; 2596 |#define RSRC_VIE_MENU_SETTINGS 1099    
                            16235 ; 2597 |
                            16236 ; 2598 |//$FILENAME menu_shutdown.src
                            16237 ; 2599 |#define RSRC_MENU_SHUTDOWN 1100    
                            16238 ; 2600 |//$FILENAME vie_menu_shutdown.src
                            16239 ; 2601 |#define RSRC_VIE_MENU_SHUTDOWN 1101    
                            16240 ; 2602 |
                            16241 ; 2603 |//$FILENAME menu_clock.src
                            16242 ; 2604 |#define RSRC_MENU_CLOCK 1102    
                            16243 ; 2605 |//$FILENAME vie_menu_clock.src
                            16244 ; 2606 |#define RSRC_VIE_MENU_CLOCK 1103    
                            16245 ; 2607 |
                            16246 ; 2608 |//$FILENAME menu_ab.src
                            16247 ; 2609 |#define RSRC_MENU_AB 1104    
                            16248 ; 2610 |//$FILENAME vie_menu_ab.src
                            16249 ; 2611 |#define RSRC_VIE_MENU_AB 1105    
                            16250 ; 2612 |
                            16251 ; 2613 |//$FILENAME menu_delete.src
                            16252 ; 2614 |#define RSRC_MENU_DELETE 1106    
                            16253 ; 2615 |//$FILENAME vie_menu_delete.src
                            16254 ; 2616 |#define RSRC_VIE_MENU_DELETE 1107    
                            16255 ; 2617 |
                            16256 ; 2618 |//$FILENAME menu_about.src
                            16257 ; 2619 |#define RSRC_MENU_ABOUT 1108    
                            16258 ; 2620 |//$FILENAME vie_menu_about.src
                            16259 ; 2621 |#define RSRC_VIE_MENU_ABOUT 1109    
                            16260 ; 2622 |
                            16261 ; 2623 |//$FILENAME menu_exit.src
                            16262 ; 2624 |#define RSRC_MENU_EXIT 1110    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 274

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16263 ; 2625 |//$FILENAME vie_menu_exit.src
                            16264 ; 2626 |#define RSRC_VIE_MENU_EXIT 1111    
                            16265 ; 2627 |
                            16266 ; 2628 |//$FILENAME music_play_all.src
                            16267 ; 2629 |#define RSRC_MUSIC_PLAY_ALL 1112    
                            16268 ; 2630 |//$FILENAME vie_music_play_all.src
                            16269 ; 2631 |#define RSRC_VIE_MUSIC_PLAY_ALL 1113    
                            16270 ; 2632 |
                            16271 ; 2633 |//$FILENAME music_folder_internal.src
                            16272 ; 2634 |#define RSRC_MUSIC_FOLDER_INTERNAL 1114    
                            16273 ; 2635 |//$FILENAME vie_music_folder_internal.src
                            16274 ; 2636 |#define RSRC_VIE_MUSIC_FOLDER_INTERNAL 1115    
                            16275 ; 2637 |
                            16276 ; 2638 |//$FILENAME music_folder_external.src
                            16277 ; 2639 |#define RSRC_MUSIC_FOLDER_EXTERNAL 1116    
                            16278 ; 2640 |//$FILENAME vie_music_folder_external.src
                            16279 ; 2641 |#define RSRC_VIE_MUSIC_FOLDER_EXTERNAL 1117    
                            16280 ; 2642 |
                            16281 ; 2643 |//$FILENAME music_songs.src
                            16282 ; 2644 |#define RSRC_MUSIC_SONGS 1118    
                            16283 ; 2645 |//$FILENAME vie_music_songs.src
                            16284 ; 2646 |#define RSRC_VIE_MUSIC_SONGS 1119    
                            16285 ; 2647 |
                            16286 ; 2648 |//$FILENAME music_favorites.src
                            16287 ; 2649 |#define RSRC_MUSIC_FAVORITES 1120    
                            16288 ; 2650 |//$FILENAME vie_music_favorites.src
                            16289 ; 2651 |#define RSRC_VIE_MUSIC_FAVORITES 1121    
                            16290 ; 2652 |
                            16291 ; 2653 |//$FILENAME music_fm_record.src
                            16292 ; 2654 |#define RSRC_MUSIC_FM_RECORD 1122    
                            16293 ; 2655 |//$FILENAME vie_music_fm_record.src
                            16294 ; 2656 |#define RSRC_VIE_MUSIC_FM_RECORD 1123    
                            16295 ; 2657 |
                            16296 ; 2658 |//$FILENAME music_exit.src
                            16297 ; 2659 |#define RSRC_MUSIC_EXIT 1124    
                            16298 ; 2660 |//$FILENAME vie_music_exit.src
                            16299 ; 2661 |#define RSRC_VIE_MUSIC_EXIT 1125    
                            16300 ; 2662 |
                            16301 ; 2663 |//$FILENAME browse_music_folder_internal.src
                            16302 ; 2664 |#define RSRC_BROWSE_MUSIC_FOLDER_INTERNAL 1126    
                            16303 ; 2665 |//$FILENAME vie_browse_music_folder_internal.src
                            16304 ; 2666 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_INTERNAL 1127    
                            16305 ; 2667 |
                            16306 ; 2668 |//$FILENAME browse_music_folder_external.src
                            16307 ; 2669 |#define RSRC_BROWSE_MUSIC_FOLDER_EXTERNAL 1128    
                            16308 ; 2670 |//$FILENAME vie_browse_music_folder_external.src
                            16309 ; 2671 |#define RSRC_VIE_BROWSE_MUSIC_FOLDER_EXTERNAL 1129    
                            16310 ; 2672 |
                            16311 ; 2673 |//$FILENAME browse_music_list_songs.src
                            16312 ; 2674 |#define RSRC_BROWSE_MUSIC_LIST_SONGS 1130    
                            16313 ; 2675 |//$FILENAME vie_browse_music_list_songs.src
                            16314 ; 2676 |#define RSRC_VIE_BROWSE_MUSIC_LIST_SONGS 1131    
                            16315 ; 2677 |
                            16316 ; 2678 |//$FILENAME browse_music_favourites.src
                            16317 ; 2679 |#define RSRC_BROWSE_MUSIC_FAVOURITES 1132    
                            16318 ; 2680 |//$FILENAME vie_browse_music_favourites.src
                            16319 ; 2681 |#define RSRC_VIE_BROWSE_MUSIC_FAVOURITES 1133    
                            16320 ; 2682 |
                            16321 ; 2683 |//$FILENAME browse_music_fm_files.src
                            16322 ; 2684 |#define RSRC_BROWSE_MUSIC_FM_FILES 1134    
                            16323 ; 2685 |//$FILENAME vie_browse_music_fm_files.src
                            16324 ; 2686 |#define RSRC_VIE_BROWSE_MUSIC_FM_FILES 1135    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 275

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16325 ; 2687 |
                            16326 ; 2688 |//$FILENAME browse_voice.src
                            16327 ; 2689 |#define RSRC_BROWSE_VOICE 1136    
                            16328 ; 2690 |//$FILENAME vie_browse_voice.src
                            16329 ; 2691 |#define RSRC_VIE_BROWSE_VOICE 1137    
                            16330 ; 2692 |
                            16331 ; 2693 |//$FILENAME favourites_list_add.src
                            16332 ; 2694 |#define RSRC_FAVOURITES_LIST_ADD 1138    
                            16333 ; 2695 |//$FILENAME vie_favourites_list_add.src
                            16334 ; 2696 |#define RSRC_VIE_FAVOURITES_LIST_ADD 1139    
                            16335 ; 2697 |
                            16336 ; 2698 |//$FILENAME favourites_list_remove.src
                            16337 ; 2699 |#define RSRC_FAVOURITES_LIST_REMOVE 1140    
                            16338 ; 2700 |//$FILENAME vie_favourites_list_remove.src
                            16339 ; 2701 |#define RSRC_VIE_FAVOURITES_LIST_REMOVE 1141    
                            16340 ; 2702 |
                            16341 ; 2703 |//$FILENAME favourites_list_is_full.src
                            16342 ; 2704 |#define RSRC_FAVOURITES_LIST_IS_FULL 1142    
                            16343 ; 2705 |//$FILENAME vie_favourites_list_is_full.src
                            16344 ; 2706 |#define RSRC_VIE_FAVOURITES_LIST_IS_FULL 1143    
                            16345 ; 2707 |
                            16346 ; 2708 |//$FILENAME about_screen_1.src
                            16347 ; 2709 |#define RSRC_ABOUT_SCREEN_1 1144    
                            16348 ; 2710 |//$FILENAME vie_about_screen_1.src
                            16349 ; 2711 |#define RSRC_VIE_ABOUT_SCREEN_1 1145    
                            16350 ; 2712 |
                            16351 ; 2713 |//$FILENAME about_screen_2.src
                            16352 ; 2714 |#define RSRC_ABOUT_SCREEN_2 1146    
                            16353 ; 2715 |//$FILENAME vie_about_screen_2.src
                            16354 ; 2716 |#define RSRC_VIE_ABOUT_SCREEN_2 1147    
                            16355 ; 2717 |
                            16356 ; 2718 |//$FILENAME about_screen_3.src
                            16357 ; 2719 |#define RSRC_ABOUT_SCREEN_3 1148    
                            16358 ; 2720 |//$FILENAME vie_about_screen_3.src
                            16359 ; 2721 |#define RSRC_VIE_ABOUT_SCREEN_3 1149    
                            16360 ; 2722 |
                            16361 ; 2723 |//$FILENAME about_screen_4.src
                            16362 ; 2724 |#define RSRC_ABOUT_SCREEN_4 1150    
                            16363 ; 2725 |//$FILENAME vie_about_screen_4.src
                            16364 ; 2726 |#define RSRC_VIE_ABOUT_SCREEN_4 1151    
                            16365 ; 2727 |
                            16366 ; 2728 |//$FILENAME time_date_exit_title.src
                            16367 ; 2729 |#define RSRC_TIME_DATE_EXIT_TITLE 1152    
                            16368 ; 2730 |//$FILENAME vie_time_date_exit_title.src
                            16369 ; 2731 |#define RSRC_VIE_TIME_DATE_EXIT_TITLE 1153    
                            16370 ; 2732 |
                            16371 ; 2733 |//$FILENAME time_clean_desktop.src
                            16372 ; 2734 |#define RSRC_TIME_CLEAN_DESKTOP 1154    
                            16373 ; 2735 |//$FILENAME time_dash.src
                            16374 ; 2736 |#define RSRC_TIME_DASH 1155    
                            16375 ; 2737 |
                            16376 ; 2738 |//$FILENAME time_day_7.src
                            16377 ; 2739 |#define RSRC_TIME_DAY_SAT 1156    
                            16378 ; 2740 |//$FILENAME vie_time_day_7.src
                            16379 ; 2741 |#define RSRC_VIE_TIME_DAY_SAT 1157    
                            16380 ; 2742 |//$FILENAME time_day_cn.src
                            16381 ; 2743 |#define RSRC_TIME_DAY_SUN 1158    
                            16382 ; 2744 |//$FILENAME vie_time_day_cn.src
                            16383 ; 2745 |#define RSRC_VIE_TIME_DAY_SUN 1159    
                            16384 ; 2746 |//$FILENAME time_day_2.src
                            16385 ; 2747 |#define RSRC_TIME_DAY_MON 1160    
                            16386 ; 2748 |//$FILENAME vie_time_day_2.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 276

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16387 ; 2749 |#define RSRC_VIE_TIME_DAY_MON 1161    
                            16388 ; 2750 |//$FILENAME time_day_3.src
                            16389 ; 2751 |#define RSRC_TIME_DAY_TUE 1162    
                            16390 ; 2752 |//$FILENAME vie_time_day_3.src
                            16391 ; 2753 |#define RSRC_VIE_TIME_DAY_TUE 1163    
                            16392 ; 2754 |//$FILENAME time_day_4.src
                            16393 ; 2755 |#define RSRC_TIME_DAY_WED 1164    
                            16394 ; 2756 |//$FILENAME vie_time_day_4.src
                            16395 ; 2757 |#define RSRC_VIE_TIME_DAY_WED 1165    
                            16396 ; 2758 |//$FILENAME time_day_5.src
                            16397 ; 2759 |#define RSRC_TIME_DAY_THU 1166    
                            16398 ; 2760 |//$FILENAME vie_time_day_5.src
                            16399 ; 2761 |#define RSRC_VIE_TIME_DAY_THU 1167    
                            16400 ; 2762 |//$FILENAME time_day_6.src
                            16401 ; 2763 |#define RSRC_TIME_DAY_FRI 1168    
                            16402 ; 2764 |//$FILENAME vie_time_day_6.src
                            16403 ; 2765 |#define RSRC_VIE_TIME_DAY_FRI 1169    
                            16404 ; 2766 |
                            16405 ; 2767 |//$FILENAME time_month_1.src
                            16406 ; 2768 |#define RSRC_TIME_MONTH_1 1170    
                            16407 ; 2769 |//$FILENAME vie_time_month_1.src
                            16408 ; 2770 |#define RSRC_VIE_TIME_MONTH_1 1171    
                            16409 ; 2771 |//$FILENAME time_month_2.src
                            16410 ; 2772 |#define RSRC_TIME_MONTH_2 1172    
                            16411 ; 2773 |//$FILENAME vie_time_month_2.src
                            16412 ; 2774 |#define RSRC_VIE_TIME_MONTH_2 1173    
                            16413 ; 2775 |//$FILENAME time_month_3.src
                            16414 ; 2776 |#define RSRC_TIME_MONTH_3 1174    
                            16415 ; 2777 |//$FILENAME vie_time_month_3.src
                            16416 ; 2778 |#define RSRC_VIE_TIME_MONTH_3 1175    
                            16417 ; 2779 |//$FILENAME time_month_4.src
                            16418 ; 2780 |#define RSRC_TIME_MONTH_4 1176    
                            16419 ; 2781 |//$FILENAME vie_time_month_4.src
                            16420 ; 2782 |#define RSRC_VIE_TIME_MONTH_4 1177    
                            16421 ; 2783 |//$FILENAME time_month_5.src
                            16422 ; 2784 |#define RSRC_TIME_MONTH_5 1178    
                            16423 ; 2785 |//$FILENAME vie_time_month_5.src
                            16424 ; 2786 |#define RSRC_VIE_TIME_MONTH_5 1179    
                            16425 ; 2787 |//$FILENAME time_month_6.src
                            16426 ; 2788 |#define RSRC_TIME_MONTH_6 1180    
                            16427 ; 2789 |//$FILENAME vie_time_month_6.src
                            16428 ; 2790 |#define RSRC_VIE_TIME_MONTH_6 1181    
                            16429 ; 2791 |//$FILENAME time_month_7.src
                            16430 ; 2792 |#define RSRC_TIME_MONTH_7 1182    
                            16431 ; 2793 |//$FILENAME vie_time_month_7.src
                            16432 ; 2794 |#define RSRC_VIE_TIME_MONTH_7 1183    
                            16433 ; 2795 |//$FILENAME time_month_8.src
                            16434 ; 2796 |#define RSRC_TIME_MONTH_8 1184    
                            16435 ; 2797 |//$FILENAME vie_time_month_8.src
                            16436 ; 2798 |#define RSRC_VIE_TIME_MONTH_8 1185    
                            16437 ; 2799 |//$FILENAME time_month_9.src
                            16438 ; 2800 |#define RSRC_TIME_MONTH_9 1186    
                            16439 ; 2801 |//$FILENAME vie_time_month_9.src
                            16440 ; 2802 |#define RSRC_VIE_TIME_MONTH_9 1187    
                            16441 ; 2803 |//$FILENAME time_month_10.src
                            16442 ; 2804 |#define RSRC_TIME_MONTH_10 1188    
                            16443 ; 2805 |//$FILENAME vie_time_month_10.src
                            16444 ; 2806 |#define RSRC_VIE_TIME_MONTH_10 1189    
                            16445 ; 2807 |//$FILENAME time_month_11.src
                            16446 ; 2808 |#define RSRC_TIME_MONTH_11 1190    
                            16447 ; 2809 |//$FILENAME vie_time_month_11.src
                            16448 ; 2810 |#define RSRC_VIE_TIME_MONTH_11 1191    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 277

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16449 ; 2811 |//$FILENAME time_month_12.src
                            16450 ; 2812 |#define RSRC_TIME_MONTH_12 1192    
                            16451 ; 2813 |//$FILENAME vie_time_month_12.src
                            16452 ; 2814 |#define RSRC_VIE_TIME_MONTH_12 1193    
                            16453 ; 2815 |
                            16454 ; 2816 |//$FILENAME time_num_am.src
                            16455 ; 2817 |#define RSRC_TIME_NUM_AM 1194    
                            16456 ; 2818 |//$FILENAME time_num_am.src
                            16457 ; 2819 |#define RSRC_TIME_NUM_PM 1195    
                            16458 ; 2820 |//$FILENAME settime_format_12h.src
                            16459 ; 2821 |#define RSRC_SETTIME_FORMAT_12H 1196    
                            16460 ; 2822 |//$FILENAME settime_format_24h.src
                            16461 ; 2823 |#define RSRC_SETTIME_FORMAT_24H 1197    
                            16462 ; 2824 |//$FILENAME setdate_format_dmy.src
                            16463 ; 2825 |#define RSRC_SETDATE_FORMAT_DMY 1198    
                            16464 ; 2826 |//$FILENAME setdate_format_mdy.src
                            16465 ; 2827 |#define RSRC_SETDATE_FORMAT_MDY 1199    
                            16466 ; 2828 |//$FILENAME setdate_format_ymd.src
                            16467 ; 2829 |#define RSRC_SETDATE_FORMAT_YMD 1200    
                            16468 ; 2830 |
                            16469 ; 2831 |//$FILENAME time_num_large_0.src
                            16470 ; 2832 |#define RSRC_TIME_NUM_LARGE_0 1201    
                            16471 ; 2833 |//$FILENAME time_num_large_1.src
                            16472 ; 2834 |#define RSRC_TIME_NUM_LARGE_1 1202    
                            16473 ; 2835 |//$FILENAME time_num_large_2.src
                            16474 ; 2836 |#define RSRC_TIME_NUM_LARGE_2 1203    
                            16475 ; 2837 |//$FILENAME time_num_large_3.src
                            16476 ; 2838 |#define RSRC_TIME_NUM_LARGE_3 1204    
                            16477 ; 2839 |//$FILENAME time_num_large_4.src
                            16478 ; 2840 |#define RSRC_TIME_NUM_LARGE_4 1205    
                            16479 ; 2841 |//$FILENAME time_num_large_5.src
                            16480 ; 2842 |#define RSRC_TIME_NUM_LARGE_5 1206    
                            16481 ; 2843 |//$FILENAME time_num_large_6.src
                            16482 ; 2844 |#define RSRC_TIME_NUM_LARGE_6 1207    
                            16483 ; 2845 |//$FILENAME time_num_large_7.src
                            16484 ; 2846 |#define RSRC_TIME_NUM_LARGE_7 1208    
                            16485 ; 2847 |//$FILENAME time_num_large_8.src
                            16486 ; 2848 |#define RSRC_TIME_NUM_LARGE_8 1209    
                            16487 ; 2849 |//$FILENAME time_num_large_9.src
                            16488 ; 2850 |#define RSRC_TIME_NUM_LARGE_9 1210    
                            16489 ; 2851 |
                            16490 ; 2852 |//$FILENAME time_num_medium_0.src
                            16491 ; 2853 |#define RSRC_TIME_NUM_MEDIUM_0 1211    
                            16492 ; 2854 |//$FILENAME time_num_medium_1.src
                            16493 ; 2855 |#define RSRC_TIME_NUM_MEDIUM_1 1212    
                            16494 ; 2856 |//$FILENAME time_num_medium_2.src
                            16495 ; 2857 |#define RSRC_TIME_NUM_MEDIUM_2 1213    
                            16496 ; 2858 |//$FILENAME time_num_medium_3.src
                            16497 ; 2859 |#define RSRC_TIME_NUM_MEDIUM_3 1214    
                            16498 ; 2860 |//$FILENAME time_num_medium_4.src
                            16499 ; 2861 |#define RSRC_TIME_NUM_MEDIUM_4 1215    
                            16500 ; 2862 |//$FILENAME time_num_medium_5.src
                            16501 ; 2863 |#define RSRC_TIME_NUM_MEDIUM_5 1216    
                            16502 ; 2864 |//$FILENAME time_num_medium_6.src
                            16503 ; 2865 |#define RSRC_TIME_NUM_MEDIUM_6 1217    
                            16504 ; 2866 |//$FILENAME time_num_medium_7.src
                            16505 ; 2867 |#define RSRC_TIME_NUM_MEDIUM_7 1218    
                            16506 ; 2868 |//$FILENAME time_num_medium_8.src
                            16507 ; 2869 |#define RSRC_TIME_NUM_MEDIUM_8 1219    
                            16508 ; 2870 |//$FILENAME time_num_medium_9.src
                            16509 ; 2871 |#define RSRC_TIME_NUM_MEDIUM_9 1220    
                            16510 ; 2872 |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 278

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16511 ; 2873 |//$FILENAME time_colon.src
                            16512 ; 2874 |#define RSRC_TIME_COLON 1221    
                            16513 ; 2875 |
                            16514 ; 2876 |//$FILENAME settings_backlight_title.src
                            16515 ; 2877 |#define RSRC_SETTINGS_BACKLIGHT_TITLE 1222    
                            16516 ; 2878 |//$FILENAME settings_auto_shutdown_title.src
                            16517 ; 2879 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_TITLE 1223    
                            16518 ; 2880 |//$FILENAME settings_playmode_title.src
                            16519 ; 2881 |#define RSRC_SETTINGS_PLAYMODE_TITLE 1224    
                            16520 ; 2882 |
                            16521 ; 2883 |//$FILENAME settings_contrast_title.src
                            16522 ; 2884 |#define RSRC_SETTINGS_CONTRAST_TITLE 1225    
                            16523 ; 2885 |//$FILENAME vie_settings_contrast_title.src
                            16524 ; 2886 |#define RSRC_VIE_SETTINGS_CONTRAST_TITLE 1226    
                            16525 ; 2887 |
                            16526 ; 2888 |//$FILENAME settings_eq_title.src
                            16527 ; 2889 |#define RSRC_SETTINGS_EQ_TITLE 1227    
                            16528 ; 2890 |//$FILENAME vie_settings_eq_title.src
                            16529 ; 2891 |#define RSRC_VIE_SETTINGS_EQ_TITLE 1228    
                            16530 ; 2892 |
                            16531 ; 2893 |//$FILENAME settings_exit_title.src
                            16532 ; 2894 |#define RSRC_SETTINGS_EXIT_TITLE 1229    
                            16533 ; 2895 |//$FILENAME vie_settings_exit_title.src
                            16534 ; 2896 |#define RSRC_VIE_SETTINGS_EXIT_TITLE 1230    
                            16535 ; 2897 |
                            16536 ; 2898 |//$FILENAME settings_set_date_title.src
                            16537 ; 2899 |#define RSRC_SETTINGS_SET_DATE_TITLE 1231    
                            16538 ; 2900 |//$FILENAME vie_settings_set_date_title.src
                            16539 ; 2901 |#define RSRC_VIE_SETTINGS_SET_DATE_TITLE 1232    
                            16540 ; 2902 |
                            16541 ; 2903 |//$FILENAME settings_set_time_title.src
                            16542 ; 2904 |#define RSRC_SETTINGS_SET_TIME_TITLE 1233    
                            16543 ; 2905 |//$FILENAME vie_settings_set_time_title.src
                            16544 ; 2906 |#define RSRC_VIE_SETTINGS_SET_TIME_TITLE 1234    
                            16545 ; 2907 |
                            16546 ; 2908 |//$FILENAME settings_playmode_normal.src
                            16547 ; 2909 |#define RSRC_SETTINGS_PLAYMODE_NORMAL 1235    
                            16548 ; 2910 |//$FILENAME vie_settings_playmode_normal.src
                            16549 ; 2911 |#define RSRC_VIE_SETTINGS_PLAYMODE_NORMAL 1236    
                            16550 ; 2912 |
                            16551 ; 2913 |//$FILENAME settings_playmode_repeatone.src
                            16552 ; 2914 |#define RSRC_SETTINGS_PLAYMODE_REPEATONE 1237    
                            16553 ; 2915 |//$FILENAME vie_settings_playmode_repeatone.src
                            16554 ; 2916 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATONE 1238    
                            16555 ; 2917 |
                            16556 ; 2918 |//$FILENAME settings_playmode_repeatall.src
                            16557 ; 2919 |#define RSRC_SETTINGS_PLAYMODE_REPEATALL 1239    
                            16558 ; 2920 |//$FILENAME vie_settings_playmode_repeatall.src
                            16559 ; 2921 |#define RSRC_VIE_SETTINGS_PLAYMODE_REPEATALL 1240    
                            16560 ; 2922 |
                            16561 ; 2923 |//$FILENAME settings_playmode_shuffle.src
                            16562 ; 2924 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE 1241    
                            16563 ; 2925 |//$FILENAME vie_settings_playmode_shuffle.src
                            16564 ; 2926 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE 1242    
                            16565 ; 2927 |
                            16566 ; 2928 |//$FILENAME settings_playmode_shuffle_repeat.src
                            16567 ; 2929 |#define RSRC_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1243    
                            16568 ; 2930 |//$FILENAME vie_settings_playmode_shuffle_repeat.src
                            16569 ; 2931 |#define RSRC_VIE_SETTINGS_PLAYMODE_SHUFFLE_REPEAT 1244    
                            16570 ; 2932 |
                            16571 ; 2933 |//$FILENAME settings_backlight_on.src
                            16572 ; 2934 |#define RSRC_SETTINGS_BACKLIGHT_ON 1245    
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 279

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16573 ; 2935 |//$FILENAME vie_settings_backlight_on.src
                            16574 ; 2936 |#define RSRC_VIE_SETTINGS_BACKLIGHT_ON 1246    
                            16575 ; 2937 |
                            16576 ; 2938 |//$FILENAME settings_backlight_10s.src
                            16577 ; 2939 |#define RSRC_SETTINGS_BACKLIGHT_10S 1247    
                            16578 ; 2940 |//$FILENAME vie_settings_backlight_10s.src
                            16579 ; 2941 |#define RSRC_VIE_SETTINGS_BACKLIGHT_10S 1248    
                            16580 ; 2942 |
                            16581 ; 2943 |//$FILENAME settings_backlight_20s.src
                            16582 ; 2944 |#define RSRC_SETTINGS_BACKLIGHT_20S 1249    
                            16583 ; 2945 |//$FILENAME vie_settings_backlight_20s.src
                            16584 ; 2946 |#define RSRC_VIE_SETTINGS_BACKLIGHT_20s 1250    
                            16585 ; 2947 |
                            16586 ; 2948 |//$FILENAME settings_backlight_30s.src
                            16587 ; 2949 |#define RSRC_SETTINGS_BACKLIGHT_30S 1251    
                            16588 ; 2950 |//$FILENAME vie_settings_backlight_30s.src
                            16589 ; 2951 |#define RSRC_VIE_SETTINGS_BACKLIGHT_30S 1252    
                            16590 ; 2952 |
                            16591 ; 2953 |//$FILENAME settings_auto_shutdown_disable.src
                            16592 ; 2954 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_DISABLE 1253    
                            16593 ; 2955 |//$FILENAME vie_settings_auto_shutdown_disable.src
                            16594 ; 2956 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_DISABLE 1254    
                            16595 ; 2957 |
                            16596 ; 2958 |//$FILENAME settings_auto_shutdown_1minute.src
                            16597 ; 2959 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1255    
                            16598 ; 2960 |//$FILENAME vie_settings_auto_shutdown_1min.src
                            16599 ; 2961 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_1MINUTE 1256    
                            16600 ; 2962 |
                            16601 ; 2963 |//$FILENAME settings_auto_shutdown_2minutes.src
                            16602 ; 2964 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1257    
                            16603 ; 2965 |//$FILENAME vie_settings_auto_shutdown_2min.src
                            16604 ; 2966 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_2MINUTES 1258    
                            16605 ; 2967 |
                            16606 ; 2968 |//$FILENAME settings_auto_shutdown_5minutes.src
                            16607 ; 2969 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1259    
                            16608 ; 2970 |//$FILENAME vie_settings_auto_shutdown_5min.src
                            16609 ; 2971 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_5MINUTES 1260    
                            16610 ; 2972 |
                            16611 ; 2973 |//$FILENAME settings_auto_shutdown_10minutes.src
                            16612 ; 2974 |#define RSRC_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1261    
                            16613 ; 2975 |//$FILENAME vie_settings_auto_shutdown_10min.src
                            16614 ; 2976 |#define RSRC_VIE_SETTINGS_AUTO_SHUTDOWN_10MINUTES 1262    
                            16615 ; 2977 |
                            16616 ; 2978 |//$FILENAME settings_languages_eng.src
                            16617 ; 2979 |#define RSRC_SETTINGS_LANGUAGES_ENG 1263    
                            16618 ; 2980 |//$FILENAME settings_languages_vie.src
                            16619 ; 2981 |#define RSRC_SETTINGS_LANGUAGES_VIE 1264    
                            16620 ; 2982 |
                            16621 ; 2983 |//$FILENAME fraction_dot.src
                            16622 ; 2984 |#define RSRC_FRACTION_DOT 1265    
                            16623 ; 2985 |
                            16624 ; 2986 |//$FILENAME fm_background.src
                            16625 ; 2987 |#define RSRC_FM_BACKGROUND 1266    
                            16626 ; 2988 |//$FILENAME vie_fm_background.src
                            16627 ; 2989 |#define RSRC_VIE_FM_BACKGROUND 1267    
                            16628 ; 2990 |
                            16629 ; 2991 |//$FILENAME searching_please_wait.src
                            16630 ; 2992 |#define RSRC_SEARCHING_PLEASE_WAIT 1268    
                            16631 ; 2993 |//$FILENAME vie_searching_please_wait.src
                            16632 ; 2994 |#define RSRC_VIE_SEARCHING_PLEASE_WAIT 1269    
                            16633 ; 2995 |
                            16634 ; 2996 |//$FILENAME fm_auto_search.src
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 280

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16635 ; 2997 |#define RSRC_FM_AUTO_SEARCH 1270    
                            16636 ; 2998 |//$FILENAME vie_fm_auto_search.src
                            16637 ; 2999 |#define RSRC_VIE_FM_AUTO_SEARCH 1271    
                            16638 ; 3000 |
                            16639 ; 3001 |//$FILENAME jvj_shutdown_player.src
                            16640 ; 3002 |#define RSRC_JVJ_SHUTDOWN_PLAYER 1272    
                            16641 ; 3003 |//$FILENAME vie_jvj_shutdown_player.src
                            16642 ; 3004 |#define RSRC_VIE_JVJ_SHUTDOWN_PLAYER 1273    
                            16643 ; 3005 |
                            16644 ; 3006 |#endif //IF (!@def(resources))
                            16645 ; 3007 |
                            16646 
                            16648 
                            16649 ; 5    |#include "displaydrv.h"
                            16650 
                            16652 
                            16653 ; 1    |///////////////////////////////////////////////////////////////////////////////
                            16654 ; 2    |///
                            16655 ; 3    |/// Filename: displaydrv.h
                            16656 ; 4    |/// Description: Prototypes for the display driver files.
                            16657 ; 5    |///
                            16658 ; 6    |///
                            16659 ; 7    |/// Copyright (c) SigmaTel, Inc. Unpublished
                            16660 ; 8    |///
                            16661 ; 9    |/// SigmaTel, Inc.
                            16662 ; 10   |/// Proprietary  Confidential
                            16663 ; 11   |///
                            16664 ; 12   |/// This source code and the algorithms implemented therein constitute
                            16665 ; 13   |/// confidential information and may comprise trade secrets of SigmaTel, Inc.
                            16666 ; 14   |/// or its associates, and any use thereof is subject to the terms and
                            16667 ; 15   |/// conditions of the Confidential Disclosure Agreement pursuant to which this
                            16668 ; 16   |/// source code was originally received.
                            16669 ; 17   |///
                            16670 ; 18   |///////////////////////////////////////////////////////////////////////////////
                            16671 ; 19   |#ifndef __DISPLAY_H
                            16672 ; 20   |#define __DISPLAY_H
                            16673 ; 21   |
                            16674 ; 22   |#include "project.h"
                            16675 
                            16677 
                            16678 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            16679 ; 2    |//  Copyright(C) SigmaTel, Inc. 2000-2004
                            16680 ; 3    |//  Filename: project.inc
                            16681 ; 4    |//  Description: 
                            16682 ; 5    |/////////////////////////////////////////////////////////////////////////////////
                            16683 ; 6    |
                            16684 ; 7    |#if (!defined(_PROJECT_INC))
                            16685 ; 8    |#define _PROJECT_INC 1
                            16686 ; 9    |
                            16687 ; 10   |#if defined(STMP_BUILD_PLAYER)
                            16688 ; 11   |#include "hwequ.h"
                            16689 ; 12   |#else 
                            16690 ; 13   |//include "regscodec.inc"
                            16691 ; 14   |#endif
                            16692 ; 15   |
                            16693 ; 16   |//////////////////////////////////////////////////////////////////////////////////
                            16694 ; 17   |// Uncomment next define to allow player boot if you have stfm1000 macro enabled (defaults
                                   ON) & 
                            16695 ; 18   |// your board crystal is not able to output nominal voltage range. Used in player main.asm
                                  . STMP00012148
                            16696 ; 19   |// Defining this will result in lower battery life (price of using a lower quality crystal
                                  ). 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 281

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16697 ; 20   |// Those that want to save battery life and have good crystals that meet our HW team's spe
                                  cs can 
                            16698 ; 21   |// comment out this line to reduce crystal bias current and so battery current in player m
                                  ode.  
                            16699 ; 22   |#define SUPPORT_MARGINAL_XTALS 1
                            16700 ; 23   |
                            16701 ; 24   |/////////////////////////////////////////////////////////////////////////////////
                            16702 ; 25   |// BOOT SPEED CONFIG & ASSOCIATED BATTERY VOLTAGE CHECK ENABLE
                            16703 ; 26   |/////////////////////////////////////////////////////////////////////////////////
                            16704 ; 27   |// Users can enable one of ATTEMPT_FAST_BOOT or FASTEST boot or neither project define bel
                                  ow by defining
                            16705 ; 28   |// values as 0 or 1, else it defaults to the boot speed used in previous SDKs.
                            16706 ; 29   |#define ATTEMPT_FAST_BOOT 1
                            16707 ; 30   |#define ATTEMPT_FASTEST_BOOT 0   
                            16708 ; 31   |// Changing this define to 0 removes Vbat threshholding & unconditionally gives fast boot 
                                  config above- 
                            16709 ; 32   |// disabling this check is suggested for profiling if you want to try to tweak down thresh
                                  holds by maybe 50mV.
                            16710 ; 33   |// Also the tests should clear the fast boot config defines to link & boot at normal speed
                                  .
                            16711 ; 34   |#define SPEED_BOOT_BATTERY_CHECK 1
                            16712 ; 35   |
                            16713 ; 36   |/////////////////////////////////////////////////////////////////////////////////
                            16714 ; 37   |// MEDIA DEFINITIONS
                            16715 ; 38   |/////////////////////////////////////////////////////////////////////////////////
                            16716 ; 39   |
                            16717 ; 40   |/////////////////////////////////////////////////////////////////////////////////
                            16718 ; 41   |// MNAND - Number of chips forming the internal physical device (i.e. # of NANDs)
                            16719 ; 42   |#if defined(NAND1)
                            16720 ; 43   |#define SM_INTERNAL_CHIPS 1
                            16721 ; 44   |#else 
                            16722 ; 45   |#if defined(NAND2)
                            16723 ; 46   |#define SM_INTERNAL_CHIPS 2
                            16724 ; 47   |#else 
                            16725 ; 48   |#if defined(NAND3)
                            16726 ; 49   |#define SM_INTERNAL_CHIPS 3
                            16727 ; 50   |#else 
                            16728 ; 51   |#if defined(NAND4)
                            16729 ; 52   |#define SM_INTERNAL_CHIPS 4
                            16730 ; 53   |#else 
                            16731 ; 54   |#define SM_INTERNAL_CHIPS 1
                            16732 ; 55   |#endif
                            16733 ; 56   |#endif
                            16734 ; 57   |#endif
                            16735 ; 58   |#endif
                            16736 ; 59   |
                            16737 ; 60   |/////////////////////////////////////////////////////////////////////////////////
                            16738 ; 61   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is defined:
                            16739 ; 62   |//   SmartMedia will be detected as inserted if the GPIO pin reads 1 and removed if it rea
                                  ds 0.  
                            16740 ; 63   |// If SMARTMEDIA_DETECT_ACTIVE_HIGH is not defined ** comment out next line **
                            16741 ; 64   |//   SmartMedia will be detected as inserted if the GPIO pin reads 0 and removed if it rea
                                  ds 1.
                            16742 ; 65   |//*** comment out if active high ****
                            16743 ; 66   |//SMARTMEDIA_DETECT_ACTIVE_HIGH  equ     1
                            16744 ; 67   |
                            16745 ; 68   |#if defined(SMEDIA)
                            16746 ; 69   |#define NUM_REMOVABLE_MEDIA 1
                            16747 ; 70   |#define NUM_SM_EXTERNAL 1
                            16748 ; 71   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            16749 ; 72   |#define SM_MAX_LOGICAL_DEVICES 2
                            16750 ; 73   |#else 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 282

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16751 ; 74   |#if defined(MMC)
                            16752 ; 75   |#define NUM_REMOVABLE_MEDIA 1
                            16753 ; 76   |#define NUM_SM_EXTERNAL 0
                            16754 ; 77   |#define MMC_MAX_PHYSICAL_DEVICES 1
                            16755 ; 78   |#define SM_MAX_LOGICAL_DEVICES 1
                            16756 ; 79   |#else 
                            16757 ; 80   |#define NUM_REMOVABLE_MEDIA 0
                            16758 ; 81   |#define NUM_SM_EXTERNAL 0
                            16759 ; 82   |#define MMC_MAX_PHYSICAL_DEVICES 0
                            16760 ; 83   |#define SM_MAX_LOGICAL_DEVICES 1
                            16761 ; 84   |#endif
                            16762 ; 85   |#endif
                            16763 ; 86   |
                            16764 ; 87   |/////////////////////////////////////////////////////////////////////////////////
                            16765 ; 88   |// Mass Storage Class definitions
                            16766 ; 89   |/////////////////////////////////////////////////////////////////////////////////
                            16767 ; 90   |// Set to 0 if Composite Device build is desired.    
                            16768 ; 91   |#define MULTI_LUN_BUILD 1   
                            16769 ; 92   |
                            16770 ; 93   |////////////////////////////////////////////////////////////////////////////////
                            16771 ; 94   |//  SCSI
                            16772 ; 95   |#if (MULTI_LUN_BUILD==0)
                            16773 ; 96   |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16774 ; 97   |    #define SCSI_NUM_TARGETS                        2
                            16775 ; 98   |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16776 ; 99   |    #define SCSI_DEVICE_NUM_LUNS_DEV_1              1
                            16777 ; 100  |  #else
                            16778 ; 101  |    #define SCSI_NUM_TARGETS                        1
                            16779 ; 102  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1
                            16780 ; 103  |  #endif
                            16781 ; 104  |#else
                            16782 ; 105  |    #define SCSI_NUM_TARGETS                        1
                            16783 ; 106  |  #if (NUM_REMOVABLE_MEDIA == 1)
                            16784 ; 107  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              2
                            16785 ; 108  |  #else
                            16786 ; 109  |    #define SCSI_DEVICE_NUM_LUNS_DEV_0              1  
                            16787 ; 110  |  #endif
                            16788 ; 111  |#endif
                            16789 ; 112  |
                            16790 ; 113  |
                            16791 ; 114  |#define USBMSC_NUM_DEVICES                      SCSI_NUM_TARGETS
                            16792 ; 115  |
                            16793 ; 116  |
                            16794 ; 117  |////////////////////////////////////////////////////////////////////////////////
                            16795 ; 118  |// Define number of logical medias and drives for three builds (MTP, USBMSC, and Player)
                            16796 ; 119  |////////////////////////////////////////////////////////////////////////////////
                            16797 ; 120  |#ifdef MMC
                            16798 ; 121  |#ifdef MTP_BUILD
                            16799 ; 122  |// --------------------
                            16800 ; 123  |// MTP and MMC
                            16801 ; 124  |// --------------------
                            16802 ; 125  |#define NUM_LOGICAL_MEDIA       2
                            16803 ; 126  |#define NUM_LOGICAL_DRIVES      8
                            16804 ; 127  |#else  // ifndef MTP_BUILD
                            16805 ; 128  |#ifdef STMP_BUILD_PLAYER
                            16806 ; 129  |// --------------------
                            16807 ; 130  |// Player and MMC
                            16808 ; 131  |// --------------------
                            16809 ; 132  |#else
                            16810 ; 133  |// --------------------
                            16811 ; 134  |// USBMSC and MMC
                            16812 ; 135  |// --------------------
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 283

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16813 ; 136  |#define NUM_LOGICAL_MEDIA       3
                            16814 ; 137  |#define NUM_LOGICAL_DRIVES      8
                            16815 ; 138  |#endif // ifdef STMP_BUILD_PLAYER
                            16816 ; 139  |#endif // ifdef MTP_BUILD
                            16817 ; 140  |#else  // ifndef MMC
                            16818 ; 141  |#ifdef MTP_BUILD
                            16819 ; 142  |// --------------------
                            16820 ; 143  |// MTP and NAND only
                            16821 ; 144  |// --------------------
                            16822 ; 145  |#define NUM_LOGICAL_MEDIA       1
                            16823 ; 146  |#define NUM_LOGICAL_DRIVES      7
                            16824 ; 147  |#else  // ifndef MTP_BUILD
                            16825 ; 148  |#ifdef STMP_BUILD_PLAYER
                            16826 ; 149  |// --------------------
                            16827 ; 150  |// Player and NAND only
                            16828 ; 151  |// --------------------
                            16829 ; 152  |#else
                            16830 ; 153  |// --------------------
                            16831 ; 154  |// USBMSC and NAND only
                            16832 ; 155  |// --------------------
                            16833 ; 156  |#define NUM_LOGICAL_MEDIA       2
                            16834 ; 157  |#define NUM_LOGICAL_DRIVES      7
                            16835 ; 158  |#endif // ifdef STMP_BUILD_PLAYER
                            16836 ; 159  |#endif // ifdef MTP_BUILD
                            16837 ; 160  |#endif // ifdef MMC 
                            16838 ; 161  |
                            16839 ; 162  |// If we are in an MTP build then we don't use as many transfers buffers.
                            16840 ; 163  |#if (defined(MTP_BUILD))
                            16841 ; 164  |#define MAX_USB_TRANSFERS_QUEUED 16
                            16842 ; 165  |
                            16843 ; 166  |////!
                            16844 ; 167  |////! This varible holds the watchdog count for the store flush.
                            16845 ; 168  |////!
                            16846 ; 169  |///
                            16847 ; 170  |#include <types.h>
                            16848 ; 171  |extern volatile INT g_StoreWatchDogCount;
                            16849 ; 172  |extern const INT g_StoreWatchDogTimeout;
                            16850 ; 173  |#endif
                            16851 ; 174  |
                            16852 ; 175  |////////////////////////////////////////////////////////////////////////////////
                            16853 ; 176  |// These are needed here for Mass Storage Class
                            16854 ; 177  |// Needs to be cleaned up
                            16855 ; 178  |////////////////////////////////////////////////////////////////////////////////
                            16856 ; 179  |#if (!defined(STMP_BUILD_PLAYER))
                            16857 ; 180  |#define SCRATCH_USER_Y_SIZE 512
                            16858 ; 181  |#define SCRATCH_USER_X_SIZE 512
                            16859 ; 182  |
                            16860 ; 183  |#define BROWNOUT_LEVEL1_DETECTED                0x000001
                            16861 ; 184  |
                            16862 ; 185  |#endif
                            16863 ; 186  |
                            16864 ; 187  |
                            16865 ; 188  |/////////////////////////////////////////////////////////////////////////////////
                            16866 ; 189  |// SmartMedia/NAND defs
                            16867 ; 190  |#define SM_MAX_PHYSICAL_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16868 ; 191  |#define SM_REMOVABLE_DEVICE_NUM SM_INTERNAL_CHIPS
                            16869 ; 192  |
                            16870 ; 193  |/////////////////////////////////////////////////////////////////////////////////
                            16871 ; 194  |// Sysloadresources defs
                            16872 ; 195  |#define SM_MAX_RESOURCE_DEVICES SM_INTERNAL_CHIPS+NUM_SM_EXTERNAL
                            16873 ; 196  |
                            16874 ; 197  |/////////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 284

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16875 ; 198  |// MMC defs
                            16876 ; 199  |#define MMC_MAX_PARTITIONS 1
                            16877 ; 200  |#define MMC_MAX_LOGICAL_DEVICES MMC_MAX_PHYSICAL_DEVICES*MMC_MAX_PARTITIONS
                            16878 ; 201  |
                            16879 ; 202  |/////////////////////////////////////////////////////////////////////////////////
                            16880 ; 203  |// SPI defs
                            16881 ; 204  |#define SPI_MAX_DEVICES MMC_MAX_PHYSICAL_DEVICES
                            16882 ; 205  |
                            16883 ; 206  |/////////////////////////////////////////////////////////////////////////////////
                            16884 ; 207  |// Global media defs
                            16885 ; 208  |#define MAX_PHYSICAL_DEVICES SM_MAX_PHYSICAL_DEVICES+MMC_MAX_PHYSICAL_DEVICES
                            16886 ; 209  |#define MAX_LOGICAL_DEVICES SM_MAX_LOGICAL_DEVICES+MMC_MAX_LOGICAL_DEVICES
                            16887 ; 210  |
                            16888 ; 211  |/////////////////////////////////////////////////////////////////////////////////
                            16889 ; 212  |// DO NOT CHANGE THESE!!!
                            16890 ; 213  |#define SM_MAX_PARTITIONS 4
                            16891 ; 214  |#define MAX_HANDLES 2
                            16892 ; 215  |/////////////////////////////////////////////////////////////////////////////////
                            16893 ; 216  |
                            16894 ; 217  |
                            16895 ; 218  |/////////////////////////////////////////////////////////////////////////////////
                            16896 ; 219  |// Battery LRADC Values 
                            16897 ; 220  |/////////////////////////////////////////////////////////////////////////////////
                            16898 ; 221  |// brownout trip point in mV (moved by RS)
                            16899 ; 222  |// BATT_SAFETY_MARGIN:  percentage value used by:
                            16900 ; 223  |//   * SysSaveSettings to determine if enough power is left to attempt a settings save. 
                            16901 ; 224  |//   * Recorder to conditionally prevent the start or continuation of 
                            16902 ; 225  |//     audio recording to media.
                            16903 ; 226  |#define BATT_SAFETY_MARGIN 10
                            16904 ; 227  |
                            16905 ; 228  |//; player resource drive refresh allowed only when battery usable % is above this value. 
                                  
                            16906 ; 229  |//; 50% of usable range [0.9V to 1.5V] is around 1.2V This is the safe target alkaline vol
                                  tage to do a refresh.
                            16907 ; 230  |//; LIION will also require 50% which will work but that could be changed in the future. 
                            16908 ; 231  |//RESOURCE_REFRESH_MIN_BATT_PCT equ 50
                            16909 ; 232  |
                            16910 ; 233  |// stmp00005071 adds these for mp3 encode stability at low battery per battery type & mmc 
                                  presence.
                            16911 ; 234  |
                            16912 ; 235  |//// Vbat threshholds empirically tuned by profiling max bat current for 3 HW cases: 
                            16913 ; 236  |//// 1 GigaByte MMC, NAND flash only, & LiIon Buck mode. See voicemenu pre-encode Vbat che
                                  ck.
                            16914 ; 237  |#if (!defined(CLCD))
                            16915 ; 238  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1100
                            16916 ; 239  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1000
                            16917 ; 240  |#else 
                            16918 ; 241  |#define MP3_ENC_MMC_MIN_V_BAT_MV 1250
                            16919 ; 242  |#define MP3_ENC_NANDONLY_MIN_V_BAT_MV 1150
                            16920 ; 243  |#endif
                            16921 ; 244  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_MV 3300
                            16922 ; 245  |
                            16923 ; 246  |// These Vbat use-range-percentages are derived to correspond with target battery 
                            16924 ; 247  |// voltages of 1.10V for MMC, 1.0V for nand only (alkaline or nimh), and 3.3V for any LiIo
                                  n.
                            16925 ; 248  |// See mp3 encoder overlay.
                            16926 ; 249  |#define MP3_ENC_MMC_MIN_V_BAT_RANGE_PCT 33
                            16927 ; 250  |#define MP3_ENC_NANDONLY_MIN_V_BAT_RANGE_PCT 17
                            16928 ; 251  |#define MP3_ENC_BUCKMODE_MIN_V_BAT_RANGE_PCT 25
                            16929 ; 252  |
                            16930 ; 253  |/////////////////////////////////////////////////////////////////////////////////
                            16931 ; 254  |// Voice recording filenames
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 285

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16932 ; 255  |// number of digits in filename Vxxx.wav
                            16933 ; 256  |/////////////////////////////////////////////////////////////////////////////////
                            16934 ; 257  |#define DIGITS_IN_VOICE_FILENAME 3   
                            16935 ; 258  |
                            16936 ; 259  |/////////////////////////////////////////////////////////////////////////////////
                            16937 ; 260  |// Mic Bias: Set this enable to 1 to internally generate mic bias voltage. 
                            16938 ; 261  |// Also below, must configure internal resistor value and pin to use for DC bias. 
                            16939 ; 262  |// Can set to 0 to disable internally generated mic bias voltage at pin lradc1/2.
                            16940 ; 263  |#if defined(DEVICE_3500)
                            16941 ; 264  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 1 
                            16942 ; 265  |// MIC BIAS circuit source selection: use Low Resolution ADC pin 2 or 1 to bias mic. 
                            16943 ; 266  |// Per your layout: select LRADC 2 or 1 below 
                            16944 ; 267  |//   (pin LRADC 2 for 35xx cpu card revB, LRADC 1 for 35xx cpu card revC, ref schematics, 
                                  & demo player)
                            16945 ; 268  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16946 ; 269  |// Sets internal mic bias R to value 2, 4, or 8 (in kOhms).
                            16947 ; 270  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 8
                            16948 ; 271  |
                            16949 ; 272  |// Allows mic bias to settle before sampling. This delay currently unused. For rec btn whe
                                  n bias not yet ready.
                            16950 ; 273  |#define REC_BTN_INTERNAL_MIC_BIAS_SETTLING_DELAY_MS 400 
                            16951 ; 274  |// Option always keeps bias enabled after mainmenu init. This allows for start pop prevent
                                  ion if you use rec button from outside voice menu.
                            16952 ; 275  |// This selection costs 1 mWatt but gains the desired low record button to sampling latenc
                                  y in the record-from-music-menu use-case.
                            16953 ; 276  |#define KEEP_MIC_BIAS_ENABLED 0
                            16954 ; 277  |
                            16955 ; 278  |#else 
                            16956 ; 279  |// STMP3410
                            16957 ; 280  |#define ENABLE_INTERNALLY_GENERATED_MICBIAS 0
                            16958 ; 281  |#define LRADC_NUM_FOR_MIC_BIAS 1 
                            16959 ; 282  |#define MICBIAS_CONFIGURED_RESISTOR_KOHMS 2
                            16960 ; 283  |#endif
                            16961 ; 284  |
                            16962 ; 285  |/////////////////////////////////////////////////////////////////////////////////
                            16963 ; 286  |// Number of available soft timers
                            16964 ; 287  |/////////////////////////////////////////////////////////////////////////////////
                            16965 ; 288  |#if defined(SYNC_LYRICS)
                            16966 ; 289  |#define SOFT_TIMERS 10
                            16967 ; 290  |#else 
                            16968 ; 291  |#if defined(JPEG_DECODER)
                            16969 ; 292  |#define SOFT_TIMERS 10
                            16970 ; 293  |#else 
                            16971 ; 294  |#define SOFT_TIMERS 9
                            16972 ; 295  |#endif
                            16973 ; 296  |#endif
                            16974 ; 297  |
                            16975 ; 298  |/////////////////////////////////////////////////////////////////////////////////
                            16976 ; 299  |//  sizes
                            16977 ; 300  |/////////////////////////////////////////////////////////////////////////////////
                            16978 ; 301  |#if defined(MMC)
                            16979 ; 302  |#if defined(USE_PLAYLIST5)
                            16980 ; 303  |#define MENU_STACK_SIZE 1500
                            16981 ; 304  |#else 
                            16982 ; 305  |#define MENU_STACK_SIZE 1250
                            16983 ; 306  |#endif //if @def('USE_PLAYLIST5')
                            16984 ; 307  |#else 
                            16985 ; 308  |#if defined(USE_PLAYLIST5)
                            16986 ; 309  |#define MENU_STACK_SIZE 1500
                            16987 ; 310  |#else 
                            16988 ; 311  |#define MENU_STACK_SIZE 1250
                            16989 ; 312  |#endif //if @def('USE_PLAYLIST5')
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 286

M:ADDR CODE           CYCLES LINE SOURCELINE
                            16990 ; 313  |#endif //if @def('MMC')
                            16991 ; 314  |
                            16992 ; 315  |// NOTE: SDK2.6 USED 550 FOR NEXT LINE, BUT SDK3.0BETA USED 750. Should it be ifdef MTP 75
                                  0 else 550 for other builds? TOVERIFY. MYALLOC
                            16993 ; 316  |// 
                            16994 ; 317  |#define STACK_L1_SIZE 750
                            16995 ; 318  |#define STACK_L2_SIZE 100
                            16996 ; 319  |#define STACK_L3_SIZE 160
                            16997 ; 320  |
                            16998 ; 321  |// If we are in MTP mode the overlay task stack can shrink.
                            16999 ; 322  |// TODO shrink this stack for MTP, I will leave it at 500 until we verify that it 
                            17000 ; 323  |// is ok with switching code.
                            17001 ; 324  |#if defined(MTP_BUILD)
                            17002 ; 325  |#define OVERLAY_MANAGER_STACK_SIZE 300
                            17003 ; 326  |#endif
                            17004 ; 327  |
                            17005 ; 328  |/////////////////////////////////////////////////////////////////////////////////
                            17006 ; 329  |// maximum number of nested funclets 
                            17007 ; 330  |/////////////////////////////////////////////////////////////////////////////////
                            17008 ; 331  |#define MAX_NESTED_FUNCLET 6 
                            17009 ; 332  |
                            17010 ; 333  |/////////////////////////////////////////////////////////////////////////////////
                            17011 ; 334  |//    LCD DEFINITIONS
                            17012 ; 335  |/////////////////////////////////////////////////////////////////////////////////
                            17013 ; 336  |
                            17014 ; 337  |#define SPACE_CHAR 0x000020          
                            17015 ; 338  |#define ZERO_CHAR 0x000030
                            17016 ; 339  |#define COLON_CHAR 0x00003A
                            17017 ; 340  |#define PERIOD_CHAR 0x00002E
                            17018 ; 341  |
                            17019 ; 342  |#if (defined(S6B33B0A_LCD))
                            17020 ; 343  |#define LCD_X_SIZE 128
                            17021 ; 344  |#define LCD_Y_SIZE 159
                            17022 ; 345  |#endif
                            17023 ; 346  |
                            17024 ; 347  |#if (defined(SED15XX_LCD))
                            17025 ; 348  |#define LCD_X_SIZE 128
                            17026 ; 349  |#define LCD_Y_SIZE 64
                            17027 ; 350  |#endif
                            17028 ; 351  |
                            17029 ; 352  |
                            17030 ; 353  |//////////////////////////////////////////////////////////////////////////////////
                            17031 ; 354  |//   Details on Customizing Contrast
                            17032 ; 355  |/////////////////////////////////////////////////////////////////////////////////
                            17033 ; 356  |//   Max supported LCD range is 0 - 3F; however due to hardware/voltage differences
                            17034 ; 357  |//   the range of visibility is usually smaller than this.  It is important to 
                            17035 ; 358  |//   calibrate the visible range, because the contrast setting is saved.
                            17036 ; 359  |//   If the user shuts off the player while lcd is not visible, the player is useless
                            17037 ; 360  |//   unless the ezact sequence is remembered.
                            17038 ; 361  |//   To find out what range your player supports: 
                            17039 ; 362  |//   change these equs to full range or comment out (full range is default)
                            17040 ; 363  |//;;;;;;
                            17041 ; 364  |// uncomment the line below to build code that will provide raw contrast value
                            17042 ; 365  |// recommended calibration using player -- uncomment 
                            17043 ; 366  |//;;;;;;
                            17044 ; 367  |//CONTRAST_CALIBRATION    equ  1
                            17045 ; 368  |////////////////////////////
                            17046 ; 369  |#if (defined(DEMO_HW))
                            17047 ; 370  |// this is the setting for ET301 demos; Next 2 line have not been updated for new Shingyi 
                                  LCD (June6'05)
                            17048 ; 371  |#define LCD_MAX_CONTRAST 0x32 
                            17049 ; 372  |#define LCD_MIN_CONTRAST 0x1E
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 287

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17050 ; 373  |#else 
                            17051 ; 374  |
                            17052 ; 375  |#if (defined(S6B33B0A_LCD))
                            17053 ; 376  |#define LCD_MAX_CONTRAST 210
                            17054 ; 377  |#define LCD_MIN_CONTRAST 160    
                            17055 ; 378  |#endif
                            17056 ; 379  |
                            17057 ; 380  |#if (defined(SED15XX_LCD))
                            17058 ; 381  |// Next 3 line comment was for OLD shingyi LCD: (default LCD before sdk2.6)
                            17059 ; 382  |// Engineering board regs support range [17-37].
                            17060 ; 383  |//   Engineering board DC/DC support range [24-46]. 
                            17061 ; 384  |//   One default contrast range [24-42] works for both.
                            17062 ; 385  |// The 3 sets of contrast ranges below are updated for SDK2.6 to support either 
                            17063 ; 386  |// new or old ShingYih LCDs. "File" refers to \resource\shingyih\system_lcd_init_seq.src
                            17064 ; 387  |// 3/10/05 - Use one of the 2 next contrast ranges depending on which
                            17065 ; 388  |// ShingYih LCD you have.  See \resources\shingyi\readme.txt 
                            17066 ; 389  |// Optimal for NEW LCD with NEW file (SDK2.6 default)  
                            17067 ; 390  |// G098064-41 LCD module (present on engr board revH LCD card)
                            17068 ; 391  |
                            17069 ; 392  |#if (defined(NEWSHINGYIH))
                            17070 ; 393  |#define LCD_MAX_CONTRAST 250
                            17071 ; 394  |#define LCD_MIN_CONTRAST 0
                            17072 ; 395  |#else 
                            17073 ; 396  |//-----
                            17074 ; 397  |// Near optimal for OLD LCD with NEW file. 
                            17075 ; 398  |// NOT optimal for the new lcd but pretty good. So u may use this if u want 1 build for bo
                                  th LCDs.
                            17076 ; 399  |#define LCD_MAX_CONTRAST 250
                            17077 ; 400  |#define LCD_MIN_CONTRAST 0
                            17078 ; 401  |
                            17079 ; 402  |//=====
                            17080 ; 403  |// Optimal for OLD ShingYih LCD with OLD file (as sdk2.521)
                            17081 ; 404  |// Suggest going with default new init file & values above for your LCD instead of this hi
                                  storic ver.
                            17082 ; 405  |//LCD_MAX_CONTRAST equ 42
                            17083 ; 406  |//LCD_MIN_CONTRAST equ 24 
                            17084 ; 407  |
                            17085 ; 408  |#endif
                            17086 ; 409  |#endif
                            17087 ; 410  |
                            17088 ; 411  |#endif
                            17089 ; 412  |
                            17090 ; 413  |//////////////////////////////////////////////////////////////////////////////////
                            17091 ; 414  |// The default value of the lcd contrast in % of range
                            17092 ; 415  |//   the default value is used when no settings.dat is available
                            17093 ; 416  |//////////////////////////////////////////////////////////////////////////////////
                            17094 ; 417  |
                            17095 ; 418  |#if (defined(S6B33B0A_LCD))
                            17096 ; 419  |// 60% of range is default value
                            17097 ; 420  |#define DEFAULT_CONTRAST 50 
                            17098 ; 421  |#endif
                            17099 ; 422  |
                            17100 ; 423  |#if (defined(SED15XX_LCD))
                            17101 ; 424  |// % of range is default value (was 60%)
                            17102 ; 425  |#define DEFAULT_CONTRAST 50 
                            17103 ; 426  |#endif
                            17104 ; 427  |
                            17105 ; 428  |
                            17106 ; 429  |// percentage change per increment/decrement message (LCD_DEC_CONTRAST/LCD_INC_CONTRAST)
                            17107 ; 430  |// make lower when doing calibration
                            17108 ; 431  |#define LCD_STEPSIZE_CONTRAST 10  
                            17109 ; 432  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 288

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17110 ; 433  |
                            17111 ; 434  |/////////////////////////////////////////////////////////////////////////////////
                            17112 ; 435  |// For FFWD and RWND
                            17113 ; 436  |/////////////////////////////////////////////////////////////////////////////////
                            17114 ; 437  |#define SECONDS_TO_SKIP 1
                            17115 ; 438  |#define SECONDS_TO_SKIP1 3
                            17116 ; 439  |#define SECONDS_TO_SKIP2 6
                            17117 ; 440  |// number of seconds to cause reset to begin of song for PREV push
                            17118 ; 441  |#define PREV_SONG_THRESHOLD 5  
                            17119 ; 442  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17120 ; 443  |#define FIRST_TIME_BOUNDARY 15 
                            17121 ; 444  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17122 ; 445  |#define SECOND_TIME_BOUNDARY 30 
                            17123 ; 446  |
                            17124 ; 447  |// For audible FFW/RWD
                            17125 ; 448  |#define SECONDS_TO_SKIP_FOR_3X_RATE 1
                            17126 ; 449  |#define SECONDS_TO_SKIP_FOR_60X_RATE 18
                            17127 ; 450  |#define SECONDS_TO_SKIP_FOR_600X_RATE 180
                            17128 ; 451  |#define SECONDS_TO_SKIP_FOR_1800X_RATE 540
                            17129 ; 452  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17130 ; 453  |#define LEVEL1_BOUNDARY 17 
                            17131 ; 454  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17132 ; 455  |#define LEVEL2_BOUNDARY 33 
                            17133 ; 456  |// number of 300 mSec periods before the numbers of seconds to skip increases
                            17134 ; 457  |#define LEVEL3_BOUNDARY 50 
                            17135 ; 458  |// Stmp00010296 Ticket #71685:  for song shorter than the min. skip size
                            17136 ; 459  |// if song_time < skip_size, bCurrentSongShort=>TRUE (ignore FWD/RWD commands)
                            17137 ; 460  |// Short Song Time, songs too short to play.
                            17138 ; 461  |#define SHORT_SONG_TIME SECONDS_TO_SKIP         
                            17139 ; 462  |
                            17140 ; 463  |/////////////////////////////////////////////////////////////////////////////////
                            17141 ; 464  |// MP3 Sync Values
                            17142 ; 465  |/////////////////////////////////////////////////////////////////////////////////
                            17143 ; 466  |// # bytes to look for sync before marking it bad
                            17144 ; 467  |#define MP3_SYNC_THRESHOLD 70000 
                            17145 ; 468  |// # bytes to look for sync before slowing decoder isr frequency (to let menus run)
                            17146 ; 469  |#define MP3_SYNC_THRESHOLD1 10000 
                            17147 ; 470  |// once we have sync'd, the isr should be called this frequently
                            17148 ; 471  |#define MP3_DECODERISR_FAST 7500  
                            17149 ; 472  |// if decoder is having difficulty syncing, switch isr to be called less frequently
                            17150 ; 473  |#define MP3_DECODERISR_SLOW 50000 
                            17151 ; 474  |
                            17152 ; 475  |
                            17153 ; 476  |/////////////////////////////////////////////////////////////////////////////////
                            17154 ; 477  |//// Multi-Stage Volume Control Definitions
                            17155 ; 478  |/////////////////////////////////////////////////////////////////////////////////
                            17156 ; 479  |//// Use Multi-Stage Volume
                            17157 ; 480  |#define MULTI_STAGE_VOLUME 0x1                  
                            17158 ; 481  |
                            17159 ; 482  |//// Master Volume definitions
                            17160 ; 483  |#define MIX_MSTR_MAX_VOL 0x0
                            17161 ; 484  |#define NUM_MSTR_ATT_STEPS (0x1F-MIX_MSTR_MAX_VOL)
                            17162 ; 485  |
                            17163 ; 486  |//// DAC-Mode definitions
                            17164 ; 487  |//// Adjusts 0dB point
                            17165 ; 488  |#define MIX_DAC_NOM_VOL 0x6                  
                            17166 ; 489  |#define MIX_DAC_MIN_VOL 0x1F
                            17167 ; 490  |// For minimum clipping: Set MIX_DAC_MAX_VOL below to match MIX_DAC_NOM_VOL value 2 lines 
                                  above.
                            17168 ; 491  |// For additional gain (with possible clipping): Set MIX_DAC_MAX_VOL in range below. 
                            17169 ; 492  |//                                               Each integer below MIX_DAC_NOM_VOL provid
                                  es 1.5 dB gain on Stmp34x0; 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 289

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17170 ; 493  |//                                               Max gain possible: 8 step diff would prov
                                  ide +12dB gain.   
                            17171 ; 494  |// range: [0 to MIX_DAC_NOM_VOL] (0 for loudest volume)
                            17172 ; 495  |#define MIX_DAC_MAX_VOL 0x0  
                            17173 ; 496  |
                            17174 ; 497  |#define NUM_DAC_ATT_STEPS (MIX_DAC_MIN_VOL-MIX_DAC_NOM_VOL+1)
                            17175 ; 498  |#define NUM_DAC_GAIN_STEPS (MIX_DAC_NOM_VOL-MIX_DAC_MAX_VOL)
                            17176 ; 499  |#define NUM_DAC_MODE_VOL_STEPS (NUM_DAC_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_DAC_GAIN_STEPS+1)
                                  
                            17177 ; 500  |
                            17178 ; 501  |//// If there is no stored volume, set to 50% of DAC-Mode max; change if DAC Mode is not t
                                  he default
                            17179 ; 502  |//// STMP35xx has 2dB attenuation per step so default needs a few more steps above midpoin
                                  t.
                            17180 ; 503  |#define DEFAULT_VOLUME ((NUM_DAC_MODE_VOL_STEPS/2)+6)         
                            17181 ; 504  |
                            17182 ; 505  |//// Set maximum restored volume to 75% of DAC-Mode max; change if DAC Mode is not the def
                                  ault
                            17183 ; 506  |#define MAX_RESTORED_VOLUME ((3*NUM_DAC_MODE_VOL_STEPS)/4)   
                            17184 ; 507  |
                            17185 ; 508  |
                            17186 ; 509  |//// Line In definitions (used for Line-In 1)
                            17187 ; 510  |//// 0dB point of the Line In
                            17188 ; 511  |#define MIX_LINE_NOM_VOL 0x8                  
                            17189 ; 512  |//// Minimum volume of Line In
                            17190 ; 513  |#define MIX_LINE_MIN_VOL 0x1F                 
                            17191 ; 514  |//// Maximum volume of Line In (can adjust extra gain)
                            17192 ; 515  |#define MIX_LINE_MAX_VOL 0x6                  
                            17193 ; 516  |#define NUM_LINE_ATT_STEPS (MIX_LINE_MIN_VOL-MIX_LINE_NOM_VOL+1)
                            17194 ; 517  |#define NUM_LINE_GAIN_STEPS (MIX_LINE_NOM_VOL-MIX_LINE_MAX_VOL)
                            17195 ; 518  |#define NUM_LINE_MODE_VOL_STEPS (NUM_LINE_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_LINE_GAIN_STEPS
                                  +1)
                            17196 ; 519  |
                            17197 ; 520  |//// Line In definitions (used for FM tuner with 144 pin package)
                            17198 ; 521  |//// 0dB point of the Line In
                            17199 ; 522  |#define MIX_FM_NOM_VOL 0x8                  
                            17200 ; 523  |//// Minimum volume of Line In
                            17201 ; 524  |#define MIX_FM_MIN_VOL 0x1F                 
                            17202 ; 525  |//// Maximum volume of Line In (can adjust extra gain)
                            17203 ; 526  |#define MIX_FM_MAX_VOL 0x6                  
                            17204 ; 527  |#define NUM_FM_ATT_STEPS (MIX_FM_MIN_VOL-MIX_FM_NOM_VOL+1)
                            17205 ; 528  |#define NUM_FM_GAIN_STEPS (MIX_FM_NOM_VOL-MIX_FM_MAX_VOL)
                            17206 ; 529  |#define NUM_FM_MODE_VOL_STEPS (NUM_FM_ATT_STEPS+NUM_MSTR_ATT_STEPS+NUM_FM_GAIN_STEPS+1)
                            17207 ; 530  |
                            17208 ; 531  |/////////////////////////////////////////////////////////////////////////////////
                            17209 ; 532  |//// When enabled (1), periodically checks for one of several FM state machine invalid dea
                                  dlock states & recovers. 
                            17210 ; 533  |//// Define as 0 to disable FM-deadlock-state checking and recovery.
                            17211 ; 534  |#define FM_WATCHDOG_ENABLE 1
                            17212 ; 535  |
                            17213 ; 536  |#if !defined(STMP_BUILD_PLAYER)
                            17214 ; 537  |////
                            17215 ; 538  |////! This varible holds the lcd display state for the mtp project.
                            17216 ; 539  |////
                            17217 ; 540  |///
                            17218 ; 541  |#include <types.h>
                            17219 ; 542  |extern volatile WORD g_wActivityState;
                            17220 ; 543  |#endif // if !@def('STMP_BUILD_PLAYER')
                            17221 ; 544  |
                            17222 ; 545  |void _reentrant Init5VSense(void);
                            17223 ; 546  |void _reentrant ServiceDCDC(void);
                            17224 ; 547  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 290

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17225 ; 548  |////////////////////////////////////////////////////////////////////////////
                            17226 ; 549  |//// JPEG Thumbnail Mode Setting
                            17227 ; 550  |//// number of column in thumbnail mode
                            17228 ; 551  |#define THUMBNAIL_X 2           
                            17229 ; 552  |//// number of row in  thumbnail mode
                            17230 ; 553  |#define THUMBNAIL_Y 2           
                            17231 ; 554  |//// thumbnail boundary offset x
                            17232 ; 555  |#define THUMBNAIL_X_OFFSET 4            
                            17233 ; 556  |//// thumbnail boundary offset y
                            17234 ; 557  |#define THUMBNAIL_Y_OFFSET 4            
                            17235 ; 558  |
                            17236 ; 559  |#endif // if (!@def(_PROJECT_INC))
                            17237 ; 560  |
                            17238 
                            17240 
                            17241 ; 23   |
                            17242 ; 24   |#define MAX_BITMAP_SIZE 10000
                            17243 ; 25   |
                            17244 ; 26   |//comment this out to put the frame buffer in Y
                            17245 ; 27   |
                            17246 ; 28   |#ifndef LCD_X_SIZE     
                            17247 ; 29   |#define LCD_X_SIZE          98
                            17248 ; 30   |#endif
                            17249 ; 31   |
                            17250 ; 32   |#ifndef LCD_Y_SIZE
                            17251 ; 33   |#define LCD_Y_SIZE          64
                            17252 ; 34   |#endif
                            17253 ; 35   |
                            17254 ; 36   |#define BITMAP_MEMORY_SPACE TARGET_MEM_Y
                            17255 ; 37   |
                            17256 ; 38   |typedef union
                            17257 ; 39   |{
                            17258 ; 40   |    struct
                            17259 ; 41   |    {
                            17260 ; 42   |        INT m_Resource:21;
                            17261 ; 43   |        INT m_Type :3;
                            17262 ; 44   |    } Complex;
                            17263 ; 45   |    WORD I;
                            17264 ; 46   |} COMPLEX_RESOURCE;
                            17265 ; 47   |
                            17266 ; 48   |#define RESOURCE_TYPE_SIMPLE    0
                            17267 ; 49   |#define RESOURCE_TYPE_NESTED    1
                            17268 ; 50   |#define RESOURCE_TYPE_UNICODE   2
                            17269 ; 51   |
                            17270 ; 52   |
                            17271 ; 53   |typedef struct 
                            17272 ; 54   |{
                            17273 ; 55   |    INT m_iMaskLeft;
                            17274 ; 56   |    INT m_iMaskTop;
                            17275 ; 57   |    INT m_iMaskRight;
                            17276 ; 58   |    INT m_iMaskBottom;
                            17277 ; 59   |}   MASK;
                            17278 ; 60   |
                            17279 ; 61   |typedef struct 
                            17280 ; 62   |{
                            17281 ; 63   |    INT m_iWidth;
                            17282 ; 64   |    INT m_iHeight;
                            17283 ; 65   |    WORD m_wBitmap[MAX_BITMAP_SIZE];
                            17284 ; 66   |} BITMAP;
                            17285 ; 67   |
                            17286 ; 68   |
                            17287 ; 69   |typedef struct 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 291

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17288 ; 70   |{
                            17289 ; 71   |    INT m_iWidth;
                            17290 ; 72   |    INT m_iHeight;
                            17291 ; 73   |} BITMAPHEADER;
                            17292 ; 74   |
                            17293 ; 75   |#define DISPLAY_NORMAL  0
                            17294 ; 76   |#define DISPLAY_INVERT  1
                            17295 ; 77   |#define DISPLAY_CLEAR   2 
                            17296 ; 78   |
                            17297 ; 79   |void _reentrant DisplayInit(void);
                            17298 
                            17305 
                            17306 ; 80   |
                            17307 ; 81   |
                            17308 ; 82   |_reentrant void DisplayHandleMessage(Message *);
                            17309 ; 83   |
                            17310 ; 84   |_reentrant void DisplayUpdateDisplay(void);
                            17311 ; 85   |
                            17312 ; 86   |_reentrant void DisplayClearRange           (INT  x,INT  y,WORD cx         ,WORD cy    );
                            17313 ; 87   |_reentrant void DisplayPrintBitmapResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            17314 ; 88   |_reentrant void DisplayPrintStringResource  (INT  x,INT  y,WORD wResource  ,INT bInvert);
                            17315 ; 89   |_reentrant void DisplayPrintStringAddress   (INT  x,INT  y,void *pAddress  ,INT bInvert);
                            17316 ; 90   |_reentrant void DisplaySetFont(INT);
                            17317 ; 91   |_reentrant void DisplayPrintBitmapAddress(INT x,INT y,BITMAP *pBitmap,INT bInvert);
                            17318 
                            17325 
                            17326 ; 92   |_reentrant void DisplayPrintStringAddressUnicode   (INT x,INT y,void *pAddress ,INT bInver
                                  t);
                            17327 ; 93   |_reentrant void DisplayPrintStringResourceUnicode  (INT x,INT y,WORD wResource,INT bInvert
                                  );
                            17328 ; 94   |_reentrant void DisplayPrintNumber  (INT x,INT y,INT iNumber    ,INT iDigits    ,INT iFill
                                  er    ,INT bInvert);
                            17329 ; 95   |_reentrant void DisplayPrintTime    (INT x,INT y,INT iMinutes   ,INT iSeconds             
                                        ,INT bInvert);
                            17330 ; 96   |_reentrant void DisplayPrintLongTime(INT x,INT y,INT iHours     ,INT iMinutes   ,INT iSeco
                                  nds   ,INT bInvert);
                            17331 ; 97   |_reentrant void DisplaySetFont(INT iFont);
                            17332 ; 98   |_reentrant int DisplayPrintCharUnicode   (INT  x,INT y,WORD wChar,INT bInvert);
                            17333 ; 99   |
                            17334 ; 100  |
                            17335 ; 101  |#endif
                            17336 
                            17338 
                            17339 ; 6    |#include "sysresource.h"
                            17340 
                            17342 
                            17343 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17344 ; 2    |// Copyright(C) SigmaTel, Inc. 2002 - 2005
                            17345 ; 3    |//
                            17346 ; 4    |// File : SysResource.h
                            17347 ; 5    |// Description : Structures and Functions Definitions for System Resource
                            17348 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17349 ; 7    |
                            17350 ; 8    |#ifndef __SysResource_h__
                            17351 ; 9    |#define __SysResource_h__ 1
                            17352 ; 10   |
                            17353 ; 11   |#include "types.h"
                            17354 
                            17356 
                            17357 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17358 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            17359 ; 3    |//
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 292

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17360 ; 4    |// Filename: types.h
                            17361 ; 5    |// Description: Standard data types
                            17362 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17363 ; 7    |
                            17364 ; 8    |#ifndef _TYPES_H
                            17365 ; 9    |#define _TYPES_H
                            17366 ; 10   |
                            17367 ; 11   |// TODO:  move this outta here!
                            17368 ; 12   |#if !defined(NOERROR)
                            17369 ; 13   |#define NOERROR 0
                            17370 ; 14   |#define SUCCESS 0
                            17371 ; 15   |#endif 
                            17372 ; 16   |#if !defined(SUCCESS)
                            17373 ; 17   |#define SUCCESS  0
                            17374 ; 18   |#endif
                            17375 ; 19   |#if !defined(ERROR)
                            17376 ; 20   |#define ERROR   -1
                            17377 ; 21   |#endif
                            17378 ; 22   |#if !defined(FALSE)
                            17379 ; 23   |#define FALSE 0
                            17380 ; 24   |#endif
                            17381 ; 25   |#if !defined(TRUE)
                            17382 ; 26   |#define TRUE  1
                            17383 ; 27   |#endif
                            17384 ; 28   |
                            17385 ; 29   |#if !defined(NULL)
                            17386 ; 30   |#define NULL 0
                            17387 ; 31   |#endif
                            17388 ; 32   |
                            17389 ; 33   |#define MAX_INT     0x7FFFFF
                            17390 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            17391 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            17392 ; 36   |#define MAX_ULONG   (-1) 
                            17393 ; 37   |
                            17394 ; 38   |#define WORD_SIZE   24              // word size in bits
                            17395 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            17396 ; 40   |
                            17397 ; 41   |
                            17398 ; 42   |#define BYTE    unsigned char       // btVarName
                            17399 ; 43   |#define CHAR    signed char         // cVarName
                            17400 ; 44   |#define USHORT  unsigned short      // usVarName
                            17401 ; 45   |#define SHORT   unsigned short      // sVarName
                            17402 ; 46   |#define WORD    unsigned int        // wVarName
                            17403 ; 47   |#define INT     signed int          // iVarName
                            17404 ; 48   |#define DWORD   unsigned long       // dwVarName
                            17405 ; 49   |#define LONG    signed long         // lVarName
                            17406 ; 50   |#define BOOL    unsigned int        // bVarName
                            17407 ; 51   |#define FRACT   _fract              // frVarName
                            17408 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            17409 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            17410 ; 54   |#define FLOAT   float               // fVarName
                            17411 ; 55   |#define DBL     double              // dVarName
                            17412 ; 56   |#define ENUM    enum                // eVarName
                            17413 ; 57   |#define CMX     _complex            // cmxVarName
                            17414 ; 58   |typedef WORD UCS3;                   // 
                            17415 ; 59   |
                            17416 ; 60   |#define UINT16  unsigned short
                            17417 ; 61   |#define UINT8   unsigned char   
                            17418 ; 62   |#define UINT32  unsigned long
                            17419 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 293

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17420 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            17421 ; 65   |#define WCHAR   UINT16
                            17422 ; 66   |
                            17423 ; 67   |//UINT128 is 16 bytes or 6 words
                            17424 ; 68   |typedef struct UINT128_3500 {   
                            17425 ; 69   |    int val[6];     
                            17426 ; 70   |} UINT128_3500;
                            17427 ; 71   |
                            17428 ; 72   |#define UINT128   UINT128_3500
                            17429 ; 73   |
                            17430 ; 74   |// Little endian word packed byte strings:   
                            17431 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17432 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17433 ; 77   |// Little endian word packed byte strings:   
                            17434 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            17435 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            17436 ; 80   |
                            17437 ; 81   |// Declare Memory Spaces To Use When Coding
                            17438 ; 82   |// A. Sector Buffers
                            17439 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            17440 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            17441 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            17442 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            17443 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
                            17444 ; 88   |// B. Media DDI Memory
                            17445 ; 89   |#define MEDIA_DDI_MEM _Y
                            17446 ; 90   |
                            17447 ; 91   |
                            17448 ; 92   |
                            17449 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            17450 ; 94   |// Examples of circular pointers:
                            17451 ; 95   |//    INT CIRC cpiVarName
                            17452 ; 96   |//    DWORD CIRC cpdwVarName
                            17453 ; 97   |
                            17454 ; 98   |#define RETCODE INT                 // rcVarName
                            17455 ; 99   |
                            17456 ; 100  |// generic bitfield structure
                            17457 ; 101  |struct Bitfield {
                            17458 ; 102  |    unsigned int B0  :1;
                            17459 ; 103  |    unsigned int B1  :1;
                            17460 ; 104  |    unsigned int B2  :1;
                            17461 ; 105  |    unsigned int B3  :1;
                            17462 ; 106  |    unsigned int B4  :1;
                            17463 ; 107  |    unsigned int B5  :1;
                            17464 ; 108  |    unsigned int B6  :1;
                            17465 ; 109  |    unsigned int B7  :1;
                            17466 ; 110  |    unsigned int B8  :1;
                            17467 ; 111  |    unsigned int B9  :1;
                            17468 ; 112  |    unsigned int B10 :1;
                            17469 ; 113  |    unsigned int B11 :1;
                            17470 ; 114  |    unsigned int B12 :1;
                            17471 ; 115  |    unsigned int B13 :1;
                            17472 ; 116  |    unsigned int B14 :1;
                            17473 ; 117  |    unsigned int B15 :1;
                            17474 ; 118  |    unsigned int B16 :1;
                            17475 ; 119  |    unsigned int B17 :1;
                            17476 ; 120  |    unsigned int B18 :1;
                            17477 ; 121  |    unsigned int B19 :1;
                            17478 ; 122  |    unsigned int B20 :1;
                            17479 ; 123  |    unsigned int B21 :1;
                            17480 ; 124  |    unsigned int B22 :1;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 294

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17481 ; 125  |    unsigned int B23 :1;
                            17482 ; 126  |};
                            17483 ; 127  |
                            17484 ; 128  |union BitInt {
                            17485 ; 129  |        struct Bitfield B;
                            17486 ; 130  |        int        I;
                            17487 ; 131  |};
                            17488 ; 132  |
                            17489 ; 133  |#define MAX_MSG_LENGTH 10
                            17490 ; 134  |struct CMessage
                            17491 ; 135  |{
                            17492 ; 136  |        unsigned int m_uLength;
                            17493 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            17494 ; 138  |};
                            17495 ; 139  |
                            17496 ; 140  |typedef struct {
                            17497 ; 141  |    WORD m_wLength;
                            17498 ; 142  |    WORD m_wMessage;
                            17499 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            17500 ; 144  |} Message;
                            17501 ; 145  |
                            17502 ; 146  |struct MessageQueueDescriptor
                            17503 ; 147  |{
                            17504 ; 148  |        int *m_pBase;
                            17505 ; 149  |        int m_iModulo;
                            17506 ; 150  |        int m_iSize;
                            17507 ; 151  |        int *m_pHead;
                            17508 ; 152  |        int *m_pTail;
                            17509 ; 153  |};
                            17510 ; 154  |
                            17511 ; 155  |struct ModuleEntry
                            17512 ; 156  |{
                            17513 ; 157  |    int m_iSignaledEventMask;
                            17514 ; 158  |    int m_iWaitEventMask;
                            17515 ; 159  |    int m_iResourceOfCode;
                            17516 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            17517 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            17518 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            17519 ; 163  |    int m_uTimeOutHigh;
                            17520 ; 164  |    int m_uTimeOutLow;
                            17521 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            17522 ; 166  |};
                            17523 ; 167  |
                            17524 ; 168  |union WaitMask{
                            17525 ; 169  |    struct B{
                            17526 ; 170  |        unsigned int m_bNone     :1;
                            17527 ; 171  |        unsigned int m_bMessage  :1;
                            17528 ; 172  |        unsigned int m_bTimer    :1;
                            17529 ; 173  |        unsigned int m_bButton   :1;
                            17530 ; 174  |    } B;
                            17531 ; 175  |    int I;
                            17532 ; 176  |} ;
                            17533 ; 177  |
                            17534 ; 178  |
                            17535 ; 179  |struct Button {
                            17536 ; 180  |        WORD wButtonEvent;
                            17537 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            17538 ; 182  |};
                            17539 ; 183  |
                            17540 ; 184  |struct Message {
                            17541 ; 185  |        WORD wMsgLength;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 295

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17542 ; 186  |        WORD wMsgCommand;
                            17543 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            17544 ; 188  |};
                            17545 ; 189  |
                            17546 ; 190  |union EventTypes {
                            17547 ; 191  |        struct CMessage msg;
                            17548 ; 192  |        struct Button Button ;
                            17549 ; 193  |        struct Message Message;
                            17550 ; 194  |};
                            17551 ; 195  |
                            17552 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            17553 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            17554 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            17555 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            17556 ; 200  |
                            17557 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            17558 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            17559 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            17560 ; 204  |
                            17561 ; 205  |#if DEBUG
                            17562 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            17563 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            17564 ; 208  |#else 
                            17565 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
                            17566 ; 210  |#define DebugBuildAssert(x)    
                            17567 ; 211  |#endif
                            17568 ; 212  |
                            17569 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            17570 ; 214  |//  #pragma asm
                            17571 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            17572 ; 216  |//  #pragma endasm
                            17573 ; 217  |
                            17574 ; 218  |
                            17575 ; 219  |#ifdef COLOR_262K
                            17576 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            17577 ; 221  |#elif defined(COLOR_65K)
                            17578 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            17579 ; 223  |#else
                            17580 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            17581 ; 225  |#endif
                            17582 ; 226  |    
                            17583 ; 227  |#endif // #ifndef _TYPES_H
                            17584 
                            17586 
                            17587 ; 12   |#include "ddildl.h"
                            17588 
                            17590 
                            17591 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            17592 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                            17593 ; 3    |//
                            17594 ; 4    |// Filename: ddildl.h
                            17595 ; 5    |// Description: 
                            17596 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            17597 ; 7    |
                            17598 ; 8    |#ifndef _DDILDL_H
                            17599 ; 9    |#define _DDILDL_H
                            17600 ; 10   |
                            17601 ; 11   |///////////////////////////////////////////////////////////////////////////////
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 296

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17602 ; 12   |// Includes
                            17603 ; 13   |///////////////////////////////////////////////////////////////////////////////
                            17604 ; 14   |
                            17605 ; 15   |///////////////////////////////////////////////////////////////////////////////
                            17606 ; 16   |// Definitions
                            17607 ; 17   |///////////////////////////////////////////////////////////////////////////////
                            17608 ; 18   |// version before march 11 2005 
                            17609 ; 19   |//#ifdef PLAYER_BUILD
                            17610 ; 20   |//#define MAX_MEDIA_TABLE_ENTRIES                12
                            17611 ; 21   |//#else
                            17612 ; 22   |//#define MAX_MEDIA_TABLE_ENTRIES                14
                            17613 ; 23   |//#endif
                            17614 ; 24   |// Mar 14 2007: Only requires the maximum number of drives in one media
                            17615 ; 25   |// NAND:(2 data drives + 9 system drives + 1 extra system drive in future) = 12
                            17616 ; 26   |#define MAX_MEDIA_TABLE_ENTRIES                12
                            17617 ; 27   |
                            17618 ; 28   |#define MAX_LOGICAL_MEDIA                       2
                            17619 ; 29   |
                            17620 ; 30   |//
                            17621 ; 31   |// WARNING
                            17622 ; 32   |// The maximum number of drives needed for player, mtp and usbmsc 
                            17623 ; 33   |// builds is currently the player build which has the largest number of drives = 12(NAND)+
                                  1(MMC).
                            17624 ; 34   |// Private lib references to this change to use a ddiproject global that's init per projec
                                  t 
                            17625 ; 35   |// instead so those plib references are no longer fixed at lib compile time. March 1 2005
                            17626 ; 36   |#ifdef PLAYER_BUILD
                            17627 ; 37   |#define MAX_LOGICAL_DRIVES                      13
                            17628 ; 38   |#else // MTP_BUILD & USBMSC/updater need support for the ram drive used in msc
                            17629 ; 39   |/********************************************************************************
                            17630 ; 40   | * We have to define 2 more than the actually size for usbmsc case
                            17631 ; 41   | * We have totally 9 system drives, 3 data drives, 1 extra system drive in future, 
                            17632 ; 42   | * so the total number is 13. The max will be 13 + 2 = 15
                            17633 ; 43   | ********************************************************************************/
                            17634 ; 44   |#define MAX_LOGICAL_DRIVES                      15
                            17635 ; 45   |#endif
                            17636 ; 46   |
                            17637 ; 47   |#define DDI_MAGIC_NUMBER                        0xADEADE
                            17638 ; 48   |
                            17639 ; 49   |///////////////////////////////////////////////////////////////////////////////
                            17640 ; 50   |// Error codes
                            17641 ; 51   |///////////////////////////////////////////////////////////////////////////////
                            17642 ; 52   |
                            17643 ; 53   |#include "errors.h"
                            17644 
                            17646 
                            17647 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            17648 ; 2    |//// Copyright(C) SigmaTel, Inc. 2003
                            17649 ; 3    |////
                            17650 ; 4    |//// Filename: errors.inc
                            17651 ; 5    |//// Description: 
                            17652 ; 6    |/////////////////////////////////////////////////////////////////////////////////
                            17653 ; 7    |
                            17654 ; 8    |#if (!defined(ERRORS_INC))
                            17655 ; 9    |#define ERRORS_INC 1
                            17656 ; 10   |
                            17657 ; 11   |#define LDRIVE_ERROR_INVALID_DRIVE_NUMBER 0x0101
                            17658 ; 12   |#define LDRIVE_ERROR_NOT_INITIALIZED 0x0102
                            17659 ; 13   |#define LDRIVE_ERROR_HARDWARE_FAILURE 0x0103
                            17660 ; 14   |#define LDRIVE_ERROR_INVALID_DRIVE_TYPE 0x0104
                            17661 ; 15   |#define LDRIVE_ERROR_INVALID_INFO_TYPE 0x0105
                            17662 ; 16   |#define LDRIVE_ERROR_SECTOR_OUT_OF_BOUNDS 0x0106
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 297

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17663 ; 17   |#define LDRIVE_ERROR_WRITE_FAILURE 0x0107
                            17664 ; 18   |#define LDRIVE_ERROR_WRITE_PROTECTED 0x0108
                            17665 ; 19   |#define LDRIVE_ERROR_MULTI_WRITE_IN_PROGRESS 0x0109
                            17666 ; 20   |#define LDRIVE_ERROR_MUST_HAVE_MORE_THAN_ONE_SECTOR 0x010A
                            17667 ; 21   |#define LDRIVE_ERROR_MULTI_WRITE_NOT_SETUP 0x010B
                            17668 ; 22   |// The WRITE_ABORT Error is returned when the system drive detects a bad
                            17669 ; 23   |// block in the device. The block was marked bad and tables updated.
                            17670 ; 24   |// The application must start over.
                            17671 ; 25   |#define LDRIVE_ERROR_WRITE_ABORT 0x010C
                            17672 ; 26   |#define LDRIVE_ERROR_READ_FAILURE 0x010D
                            17673 ; 27   |#define LDRIVE_ERROR_MEDIA_NOT_ALLOCATED 0x010E
                            17674 ; 28   |#define LDRIVE_ERROR_LOW_LEVEL_MEDIA_FORMAT_REQUIRED 0x010F
                            17675 ; 29   |
                            17676 ; 30   |#define LMEDIA_ERROR_HARDWARE_FAILURE 0x0200
                            17677 ; 31   |#define LMEDIA_ERROR_INVALID_MEDIA_NUMBER 0x0201
                            17678 ; 32   |#define LMEDIA_ERROR_MEDIA_NOT_INITIALIZED 0x0202
                            17679 ; 33   |#define LMEDIA_ERROR_MEDIA_NOT_DISCOVERED 0x0203
                            17680 ; 34   |#define LMEDIA_ERROR_INVALID_MEDIA_INFO_TYPE 0x0204
                            17681 ; 35   |#define LMEDIA_ERROR_ALLOCATION_TO_LARGE 0x0205
                            17682 ; 36   |#define LMEDIA_ERROR_MEDIA_NOT_ERASED 0x0206
                            17683 ; 37   |#define LMEDIA_ERROR_MEDIA_ERASED 0x0207
                            17684 ; 38   |//Specific to NAND
                            17685 ; 39   |#define LMEDIA_ERROR_NO_REGIONS_IN_MEDIA 0x0208     
                            17686 ; 40   |#define LMEDIA_ERROR_DRIVES_MAX_OUT 0x0209 
                            17687 ; 41   |#define LMEDIA_ERROR_MEDIA_WRITE_PROTECTED 0x020A
                            17688 ; 42   |#define LMEDIA_ERROR_INVALID_INFO_TYPE 0x020B
                            17689 ; 43   |#define LMEDIA_ERROR_BAD_BLOCKS_MAX_OUT 0x020C
                            17690 ; 44   |#define LMEDIA_ERROR_NOT_ALLOCATED 0x020D
                            17691 ; 45   |
                            17692 ; 46   |#define LMEDIA_ERROR_DRIVE_TYPE_NOT_SUPPORTED 0x0210
                            17693 ; 47   |
                            17694 ; 48   |#define NAND_ERROR_WRITE_PHYS_SECTOR_PROGRAM_FAILED 0x0301
                            17695 ; 49   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_OVERFLOW 0x0302
                            17696 ; 50   |#define ERROR_MULTI_WRITE_SECTOR_FIFO_UNDERFLOW 0x0303
                            17697 ; 51   |
                            17698 ; 52   |#define NAND_DATA_DRIVE_ERROR_LOGICAL_SECTOR_OUT_OF_BOUNDS 0x0401
                            17699 ; 53   |#define NAND_DATA_DRIVE_ERROR_RBLOCK_NOT_FOUND 0x0402
                            17700 ; 54   |#define NAND_DATA_DRIVE_ERROR_NO_FREE_RBLOCKS 0x0403
                            17701 ; 55   |#define NAND_DATA_DRIVE_ERROR_USECTOR_LOOKUP_INTERNAL_1 0x0404
                            17702 ; 56   |#define NAND_DATA_DRIVE_SECTOR_NOT_UPDATED 0x0405
                            17703 ; 57   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_USECTOR_MAP 0x0406
                            17704 ; 58   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_LBAS_INCONSISTENT 0x0407
                            17705 ; 59   |#define NAND_DATA_DRIVE_ERROR_HSECTORIDX_IN_UBLOCK_OUT_OF_RANGE 0x0408
                            17706 ; 60   |#define NAND_DATA_DRIVE_ERROR_CANT_RECYCLE_UBLOCK 0x0409
                            17707 ; 61   |#define NAND_DATA_DRIVE_ERROR_BBTABLE_FULL 0x040A
                            17708 ; 62   |#define NAND_DATA_DRIVE_ERROR_UPDATE_NOT_OPEN 0x040B
                            17709 ; 63   |#define NAND_DATA_DRIVE_ERROR_ADD_USECTOR_INTERNAL_1 0x040C
                            17710 ; 64   |#define NAND_DATA_DRIVE_ERROR_CANT_GET_ERASED_UBLOCK 0x040D
                            17711 ; 65   |#define NAND_DATA_DRIVE_ERROR_NO_ERASED_UBLOCKS 0x040E
                            17712 ; 66   |#define NAND_DATA_DRIVE_ERROR_CANT_ERASE_FREE_UBLOCK 0x040F
                            17713 ; 67   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_1 0x0410
                            17714 ; 68   |#define NAND_DATA_DRIVE_ERROR_KILLUSECTOR_INTERNAL_2 0x0411
                            17715 ; 69   |#define NAND_DATA_DRIVE_RETURN_BLOCK_NOT_UPDATED 0x0412
                            17716 ; 70   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_PROTECT_TABLE_FULL 0x0413
                            17717 ; 71   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_ALREADY_PROTECTED 0x0414
                            17718 ; 72   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_PROTECTED 0x0415
                            17719 ; 73   |#define NAND_DATA_DRIVE_ERROR_UBLOCKPROTECT_INTERNAL_1 0x0416
                            17720 ; 74   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_1 0x0417
                            17721 ; 75   |#define NAND_DATA_DRIVE_ERROR_RECOVERUBLOCK_INTERNAL_2 0x0418
                            17722 ; 76   |#define NAND_DATA_DRIVE_ERROR_UBLOCK_NOT_IN_UTABLE 0x0419
                            17723 ; 77   |#define NAND_DATA_DRIVE_ERROR_CANT_ALLOCATE_USECTORS_MAPS 0x041A
                            17724 ; 78   |#define NAND_DATA_DRIVE_ERROR_CANT_INIT_DATA_REGIONS_LIST 0x041B
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 298

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17725 ; 79   |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_UBLOCKS_IN_CONFIG 0x041C
                            17726 ; 80   |#define NAND_DATA_DRIVE_ERROR_USECTOR_INDEX_IS_NOT_NEXT 0x041D
                            17727 ; 81   |#define NAND_DATA_DRIVE_ERROR_USECTOR_ALREADY_UPDATED 0x041E
                            17728 ; 82   |#define NAND_DATA_DRIVE_ERROR_BgGC_USECTOR_ERASE_TIMEDOUT 0x041F
                            17729 ; 83   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_COPY_TIMEDOUT 0x0420
                            17730 ; 84   |#define NAND_DATA_DRIVE_ERROR_BgGC_ALREADY_ENABLED 0x0421
                            17731 ; 85   |#define NAND_DATA_DRIVE_ERROR_BgGC_HSECTOR_ERASE_TIMEDOUT 0x0422
                            17732 ; 86   |#define NAND_DATA_DRIVE_ERROR_BgGC_SECTOR_NOT_UPDATED 0x0423
                            17733 ; 87   |#define NAND_DATA_DRIVE_ERROR_NO_STALE_UBLOCKS 0x0424
                            17734 ; 88   |#define NAND_DATA_DRIVE_ERROR_NAND_IS_READY_TIMEOUT 0x0425
                            17735 ; 89   |#define NAND_DATA_DRIVE_ERROR_CANT_CLOSE_UPDATE 0x0426
                            17736 ; 90   |
                            17737 ; 91   |#define NAND_DATA_DRIVE_ERROR_CMW_S0_FETCH_FAILED 0x042C
                            17738 ; 92   |#define NAND_DATA_DRIVE_ERROR_CMW_S1_FETCH_FAILED 0x042D
                            17739 ; 93   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_1_FETCH_FAILED 0x042E
                            17740 ; 94   |#define NAND_DATA_DRIVE_ERROR_CMW_S2_2_FETCH_FAILED 0x042F
                            17741 ; 95   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_1_FETCH_FAILED 0x0430
                            17742 ; 96   |#define NAND_DATA_DRIVE_ERROR_CMW_S3_2_FETCH_FAILED 0x0431
                            17743 ; 97   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_1_FETCH_FAILED 0x0432
                            17744 ; 98   |#define NAND_DATA_DRIVE_ERROR_CMW_S4_2_FETCH_FAILED 0x0433
                            17745 ; 99   |#define NAND_DATA_DRIVE_ERROR_CMW_S5_FETCH_FAILED 0x0434
                            17746 ; 100  |#define NAND_DATA_DRIVE_ERROR_CMW_S0_ECC_TIMEOUT 0x0435
                            17747 ; 101  |#define NAND_DATA_DRIVE_ERROR_CMW_S2_ECC_TIMEOUT 0x0436
                            17748 ; 102  |#define NAND_DATA_DRIVE_ERROR_CMW_S3_ECC_TIMEOUT 0x0437
                            17749 ; 103  |#define NAND_DATA_DRIVE_ERROR_CMW_S4_ECC_TIMEOUT 0x0438
                            17750 ; 104  |#define NAND_DATA_DRIVE_ERROR_CMW_S5_ECC_TIMEOUT 0x0439
                            17751 ; 105  |#define NAND_DATA_DRIVE_ERROR_CMW_WRITE_FAILED 0x043A
                            17752 ; 106  |#define NAND_DATA_DRIVE_ERROR_CMW_RELEASE_FAILED 0x043B
                            17753 ; 107  |
                            17754 ; 108  |#define NAND_DATA_DRIVE_ERROR_INVALID_LOGICAL_SECTOR 0x0427
                            17755 ; 109  |#define NAND_DATA_DRIVE_ERROR_INVALID_RELATIVE_SECTOR 0x0428
                            17756 ; 110  |#define NAND_DATA_DRIVE_ERROR_UBLOCK_IS_EMPTY 0x0429
                            17757 ; 111  |#define NAND_DATA_DRIVE_ERROR_USECTOR_MAP_IS_BAD 0x042A
                            17758 ; 112  |#define NAND_DATA_DRIVE_ERROR_TOO_MANY_BLOCK_RECOVERIES 0x042B
                            17759 ; 113  |
                            17760 ; 114  |// indicates that during the NandHalInit, the NandType did not
                            17761 ; 115  |// match the previously initialized Nand chip type.
                            17762 ; 116  |#define NANDHAL_ERROR_NANDTYPE_MISMATCH 0x0500 
                            17763 ; 117  |#define NANDHAL_ERROR_LOOKUP_ID_FAILED 0x0501
                            17764 ; 118  |// Errors from calling HIL functions
                            17765 ; 119  |#define NANDHAL_ERROR_INIT_PORT 0x0502
                            17766 ; 120  |#define NANDHAL_ERROR_WRITE_PORT_CMD 0x0503
                            17767 ; 121  |#define NANDHAL_ERROR_WRITE_PORT_ADDR 0x0504
                            17768 ; 122  |#define NANDHAL_ERROR_READ_PORT_DATA 0x0505
                            17769 ; 123  |#define NANDHAL_ERROR_WAIT_FOR_READY_PORT 0x0506
                            17770 ; 124  |#define NANDHAL_ERROR_POWER_UP_FLASH_PADS 0x0507
                            17771 ; 125  |#define NANDHAL_ERROR_TERMINATE_PORT 0x0508
                            17772 ; 126  |#define NANDHAL_ERROR_LOCKPORT_TIMEOUT 0x0509
                            17773 ; 127  |#define NANDHAL_ERROR_LOCKNAND_TIMEOUT 0x050A
                            17774 ; 128  |// for 3410 build
                            17775 ; 129  |#define NANDHAL_ERROR_LOCKPORT_LOCKED 0x050B
                            17776 ; 130  |// for 3410 build
                            17777 ; 131  |#define NANDHAL_ERROR_LOCKNAND_LOCKED 0x050C
                            17778 ; 132  |#define NANDHAL_ERROR_WRITE_DATA_PORT 0x050D
                            17779 ; 133  |
                            17780 ; 134  |// indicates that the GetStatus returned a FAIL
                            17781 ; 135  |#define NANDHAL_ERROR_GETSTATUS_FAILED 0x050E
                            17782 ; 136  |#define NANDHAL_ERROR_WRITE_FAILED 0x050F
                            17783 ; 137  |#define NANDHAL_ERROR_READ_FAILED 0x0510
                            17784 ; 138  |#define NANDHAL_ERROR_READID1_FAILED 0x0511
                            17785 ; 139  |#define NANDHAL_ERROR_READID2_FAILED 0x0512
                            17786 ; 140  |#define NANDHAL_ERROR_READIDEXT_FAILED 0x0513
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 299

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17787 ; 141  |// indicates the NAND was already BUSY
                            17788 ; 142  |#define NANDHAL_ERROR_SETNANDBUSY_FAILED 0x0514
                            17789 ; 143  |#define NANDHAL_ERROR_ASYNCWAIT_CALLBACK_ERR 0x0515
                            17790 ; 144  |// ECC Error Codes
                            17791 ; 145  |// ECC Computation has successfully completed
                            17792 ; 146  |#define COMPUTE_ECC_SUCCESS 0         
                            17793 ; 147  |// ECC computation still busy
                            17794 ; 148  |#define COMPUTE_ECC_NOT_DONE 0x0516
                            17795 ; 149  |// timed out while waiting on object
                            17796 ; 150  |#define NANDHAL_ERROR_LOCKECC_TIMEOUT 0x0517
                            17797 ; 151  |// flag already set for SDK2.4 lock
                            17798 ; 152  |#define NANDHAL_ERROR_LOCKECC_LOCKED 0x0518
                            17799 ; 153  |
                            17800 ; 154  |#define NANDHAL_ECC_NOERROR 0
                            17801 ; 155  |// SKIP 0519-051B for space optimization in ECC calculate functions
                            17802 ; 156  |#define NANDHAL_ECC_ERROR_FIXED 0x051C
                            17803 ; 157  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_SECTOR 0x051D
                            17804 ; 158  |#define NANDHAL_ECC_FIX_FAILED 0x051E
                            17805 ; 159  |#define NANDHAL_ECC_ERROR_FIXED_REWRITE_FAILED 0x051F
                            17806 ; 160  |
                            17807 ; 161  |// MMC Errors
                            17808 ; 162  |#define MMC_MEDIA_ERROR_DEVICE_NOT_INSERTED 0x0600
                            17809 ; 163  |#define MMC_MEDIA_ERROR_RESET_FAILED 0x0601
                            17810 ; 164  |#define MMC_MEDIA_APP_COMMAND_FAILED 0x0602
                            17811 ; 165  |#define MMC_MEDIA_ERROR_INIT_FAILED 0x0603
                            17812 ; 166  |#define MMC_MEDIA_ERROR_SEND_OP_TIMEOUT 0x0604
                            17813 ; 167  |#define MMC_MEDIA_READ_OCR_FAILED 0x0605
                            17814 ; 168  |#define MMC_MEDIA_UNSUPPORTED_OCR_VOLTAGES 0x0606
                            17815 ; 169  |#define MMC_MEDIA_READ_CSD_FAILED 0x0607
                            17816 ; 170  |#define MMC_MEDIA_INVALID_CSD_VERSION 0x0608
                            17817 ; 171  |#define MMC_MEDIA_READ_CID_FAILED 0x0609
                            17818 ; 172  |#define MMC_MEDIA_INVALID_CID 0x060A
                            17819 ; 173  |#define MMC_MEDIA_SPEC_VERSION_NOT_SUPPORTED 0x060B
                            17820 ; 174  |#define MMC_MEDIA_ERROR_NOT_FORMATTED 0x060C
                            17821 ; 175  |#define MMC_MEDIA_ERROR_NOT_ENUMERATED 0x060D
                            17822 ; 176  |
                            17823 ; 177  |#define MMC_DATA_DRIVE_ERROR_WRITE_SECTOR_FAIL 0x0700
                            17824 ; 178  |#define MMC_DATA_DRIVE_ERROR_INVALID_SECTOR 0x0701
                            17825 ; 179  |#define MMC_DATA_DRIVE_ERROR_READ_SECTOR_FAIL 0x0702
                            17826 ; 180  |#define MMC_DATA_DRIVE_ERROR_WRITE_PROTECTED 0x0703
                            17827 ; 181  |#define MMC_DATA_DRIVE_ERROR_ERASE_FAILED 0x0704
                            17828 ; 182  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_FIRST_FAIL 0x0705
                            17829 ; 183  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_NEXT_FAIL 0x0706
                            17830 ; 184  |#define MMC_DATA_DRIVE_ERROR_SEQUENTIAL_END_FAIL 0x0707
                            17831 ; 185  |#define MMC_DATA_DRIVE_ERROR_BLOCK_ALIGN_FAIL 0x0708
                            17832 ; 186  |
                            17833 ; 187  |/////////////////////////////////////////////////////////////////////////////////
                            17834 ; 188  |//// MMC HAL Error codes
                            17835 ; 189  |/////////////////////////////////////////////////////////////////////////////////
                            17836 ; 190  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_BLOCKED 0x0800
                            17837 ; 191  |#define MMC_HAL_ERROR_PHYSICAL_DEVICE_NOT_BLOCKED 0x0801
                            17838 ; 192  |#define MMC_HAL_ERROR_SPI_BUS_BLOCKED 0x0802
                            17839 ; 193  |#define MMC_HAL_ERROR_SPI_BUS_NOT_BLOCKED 0x0803
                            17840 ; 194  |#define MMC_HAL_ERROR_SPI_DRIVER_INIT_FAILED 0x0804
                            17841 ; 195  |#define MMC_HAL_ERROR_SPI_BUS_INIT_FAILED 0x0805
                            17842 ; 196  |
                            17843 ; 197  |#define MMC_HAL_ERROR_NO_COMMAND_RESPONSE 0x0810
                            17844 ; 198  |#define MMC_HAL_ERROR_BAD_START_BYTE 0x0811
                            17845 ; 199  |#define MMC_HAL_ERROR_BAD_WRITE_STATUS 0x0812
                            17846 ; 200  |#define MMC_HAL_ERROR_BAD_CSD_WRITE_STATUS 0x0813
                            17847 ; 201  |
                            17848 ; 202  |#define MMC_HAL_ERROR_START_BYTE_TIMEOUT 0x0820
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 300

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17849 ; 203  |#define MMC_HAL_ERROR_WRITE_BUSY_TIMEOUT 0x0821
                            17850 ; 204  |#define MMC_HAL_ERROR_CSD_WRITE_BUSY_TIMEOUT 0x0822
                            17851 ; 205  |#define MMC_HAL_ERROR_ERASE_BUSY_TIMEOUT 0x0823
                            17852 ; 206  |#define MMC_HAL_ERROR_REGISTER_READ_TIMEOUT 0x0824
                            17853 ; 207  |
                            17854 ; 208  |#define MMC_HAL_ERROR_CMD_FAIL_CMD0 0x0830
                            17855 ; 209  |#define MMC_HAL_ERROR_CMD_FAIL_CMD1 0x0831
                            17856 ; 210  |#define MMC_HAL_ERROR_CMD_FAIL_CMD9 0x0832
                            17857 ; 211  |#define MMC_HAL_ERROR_CMD_FAIL_CMD10 0x0833
                            17858 ; 212  |#define MMC_HAL_ERROR_CMD_FAIL_CMD12 0x0834
                            17859 ; 213  |#define MMC_HAL_ERROR_CMD_FAIL_CMD13 0x0835
                            17860 ; 214  |#define MMC_HAL_ERROR_CMD_FAIL_CMD16 0x0836
                            17861 ; 215  |#define MMC_HAL_ERROR_CMD_FAIL_CMD17 0x0837
                            17862 ; 216  |#define MMC_HAL_ERROR_CMD_FAIL_CMD18 0x0838
                            17863 ; 217  |#define MMC_HAL_ERROR_CMD_FAIL_CMD23 0x0839
                            17864 ; 218  |#define MMC_HAL_ERROR_CMD_FAIL_CMD24 0x083A
                            17865 ; 219  |#define MMC_HAL_ERROR_CMD_FAIL_CMD25 0x083B
                            17866 ; 220  |#define MMC_HAL_ERROR_CMD_FAIL_CMD27 0x083C
                            17867 ; 221  |#define MMC_HAL_ERROR_CMD_FAIL_CMD28 0x083D
                            17868 ; 222  |#define MMC_HAL_ERROR_CMD_FAIL_CMD29 0x083E
                            17869 ; 223  |#define MMC_HAL_ERROR_CMD_FAIL_CMD30 0x083F
                            17870 ; 224  |#define MMC_HAL_ERROR_CMD_FAIL_CMD32 0x0840
                            17871 ; 225  |#define MMC_HAL_ERROR_CMD_FAIL_CMD33 0x0841
                            17872 ; 226  |#define MMC_HAL_ERROR_CMD_FAIL_CMD35 0x0842
                            17873 ; 227  |#define MMC_HAL_ERROR_CMD_FAIL_CMD36 0x0843
                            17874 ; 228  |#define MMC_HAL_ERROR_CMD_FAIL_CMD38 0x0844
                            17875 ; 229  |#define MMC_HAL_ERROR_CMD_FAIL_CMD42 0x0845
                            17876 ; 230  |#define MMC_HAL_ERROR_CMD_FAIL_CMD55 0x0846
                            17877 ; 231  |#define MMC_HAL_ERROR_CMD_FAIL_CMD56 0x0847
                            17878 ; 232  |#define MMC_HAL_ERROR_CMD_FAIL_CMD58 0x0848
                            17879 ; 233  |#define MMC_HAL_ERROR_CMD_FAIL_CMD59 0x0849
                            17880 ; 234  |
                            17881 ; 235  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD13 0x0850
                            17882 ; 236  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD22 0x0851
                            17883 ; 237  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD23 0x0852
                            17884 ; 238  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD41 0x0853
                            17885 ; 239  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD42 0x0854
                            17886 ; 240  |#define MMC_HAL_ERROR_SD_CMD_FAIL_ACMD51 0x0855
                            17887 ; 241  |
                            17888 ; 242  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD0 0x0860
                            17889 ; 243  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD1 0x0861
                            17890 ; 244  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD9 0x0862
                            17891 ; 245  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD10 0x0863
                            17892 ; 246  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD12 0x0864
                            17893 ; 247  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD13 0x0865
                            17894 ; 248  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD16 0x0866
                            17895 ; 249  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD17 0x0867
                            17896 ; 250  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD18 0x0868
                            17897 ; 251  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD23 0x0869
                            17898 ; 252  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD24 0x086A
                            17899 ; 253  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD25 0x086B
                            17900 ; 254  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD27 0x086C
                            17901 ; 255  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD28 0x086D
                            17902 ; 256  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD29 0x086E
                            17903 ; 257  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD30 0x086F
                            17904 ; 258  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD32 0x0870
                            17905 ; 259  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD33 0x0871
                            17906 ; 260  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD35 0x0872
                            17907 ; 261  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD36 0x0873
                            17908 ; 262  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD38 0x0874
                            17909 ; 263  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD42 0x0875
                            17910 ; 264  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD55 0x0876
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 301

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17911 ; 265  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD56 0x0877
                            17912 ; 266  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD58 0x0878
                            17913 ; 267  |#define MMC_HAL_ERROR_BAD_CMD_RESPONSE_CMD59 0x0879
                            17914 ; 268  |
                            17915 ; 269  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD13 0x0880
                            17916 ; 270  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD22 0x0881
                            17917 ; 271  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD23 0x0882
                            17918 ; 272  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD41 0x0883
                            17919 ; 273  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD42 0x0884
                            17920 ; 274  |#define MMC_HAL_ERROR_SD_BAD_CMD_RESPONSE_ACMD51 0x0885
                            17921 ; 275  |
                            17922 ; 276  |//;;;;;;; < Library Error Codes > ;;;;;;;;
                            17923 ; 277  |//MATH errors...
                            17924 ; 278  |#define ERRZeroDivide 0x7FFFFF
                            17925 ; 279  |
                            17926 ; 280  |//Memory Pointer errors...
                            17927 ; 281  |#define INVALID_MEMORY_SPACE 0x900000
                            17928 ; 282  |//****************************************************************/
                            17929 ; 283  |#if (!defined(NOERROR))
                            17930 ; 284  |#define NOERROR 0
                            17931 ; 285  |#endif
                            17932 ; 286  |
                            17933 ; 287  |////Added by RAKS
                            17934 ; 288  |
                            17935 ; 289  |#define ERRProgram 0x911111
                            17936 ; 290  |#define ERRNoMedia 0x922222
                            17937 ; 291  |#define ERRHwFail 0x933333   
                            17938 ; 292  |#define ERRInvMedia 0x944444
                            17939 ; 293  |#define ERRBlkFail 0x955555
                            17940 ; 294  |#define ERRInvDataStatus 0x966666
                            17941 ; 295  |#define ERRWriteFail 0x977777
                            17942 ; 296  |#define ERRECCCorr 0x988888
                            17943 ; 297  |#define ERRECCFail 0x999999
                            17944 ; 298  |#define ERRZoneFull 0x9aaaaa
                            17945 ; 299  |#define ERR_PAGE_UNASSIGNED 0x9aaaaB   
                            17946 ; 300  |// Partition Table Error Codes.                 Note 9AAAAA used above and below.
                            17947 ; 301  |//invalid partition table signature. 
                            17948 ; 302  |#define ERRPartTableSignature 0x9AAAAA   
                            17949 ; 303  |//boot ID bad
                            17950 ; 304  |#define ERRBootID 0x9BBBBB   
                            17951 ; 305  |#define ERRBootTableSignature 0x9CCCCC   
                            17952 ; 306  |////Nothing was here : RAKS
                            17953 ; 307  |//JUMP instruction bad
                            17954 ; 308  |#define ERRBootJump 0x9DDDDD  
                            17955 ; 309  |//ID Byte bad
                            17956 ; 310  |#define ERRIDByte 0x9EEEEE  
                            17957 ; 311  |
                            17958 ; 312  |
                            17959 ; 313  |//****************************************************************
                            17960 ; 314  |//        < < <  EMC5600 FAT12 FileSystem  > > >
                            17961 ; 315  |//****************************************************************
                            17962 ; 316  |// Master ERROR File
                            17963 ; 317  |//****************************************************************/
                            17964 ; 318  |// FAT File System Error Codes
                            17965 ; 319  |// corrupt FAT
                            17966 ; 320  |#define FATCorrupt -1        
                            17967 ; 321  |// invalid FAT sector
                            17968 ; 322  |#define DIRInvlaidSector -2        
                            17969 ; 323  |
                            17970 ; 324  |#define FATwarningFreeCx 0x0AFCFC
                            17971 ; 325  |#define FATwarningEndOfChain 0x0AECEC
                            17972 ; 326  |#define FATwarningReservedCx 0x0A1111
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 302

M:ADDR CODE           CYCLES LINE SOURCELINE
                            17973 ; 327  |#define FATwarningBadCx 0x0ABCBC       
                            17974 ; 328  |//FATcxsFree==0 
                            17975 ; 329  |#define FATwarningNoFreeCxs 0x0A0F0F   
                            17976 ; 330  |#define FATwarningBoundaryCx 0x0A2222
                            17977 ; 331  |#define FATwarningWriteBackAborted 0x0A3333
                            17978 ; 332  |
                            17979 ; 333  |#define FATfailedReadPrimaryFAT 0x7F0000
                            17980 ; 334  |#define FATfailedWritePrimaryFAT 0x7FFFFF   
                            17981 ; 335  |#define FATfailedWriteSecondaryFAT 0x7F8888
                            17982 ; 336  |
                            17983 ; 337  |#define FATerrorNoFreeBlocks 0x80A0A0
                            17984 ; 338  |#define FATerrorTableOverFlow 0x80CCCC
                            17985 ; 339  |#define FATerrorClusterUnderFlow 0x80DDDD
                            17986 ; 340  |#define FATerrorClusterOverFlow 0x80EEEE
                            17987 ; 341  |//No Free Cxs on FAT Scan!
                            17988 ; 342  |#define FATerrorNoFreeCxs 0x80FFFF   
                            17989 ; 343  |
                            17990 ; 344  |#define MATHerrorNotPowerOf2 0x802222
                            17991 ; 345  |
                            17992 ; 346  |#define MEDIAerrorFSNotSupported 0x810000
                            17993 ; 347  |#define MEDIAerrorMediaNotUsable 0x811111
                            17994 ; 348  |
                            17995 ; 349  |#define CXerrorValueOverFlow 0x82AAAA
                            17996 ; 350  |#define CXerrorValueUnderFlow 0x82BBBB
                            17997 ; 351  |
                            17998 ; 352  |#define HNDLerrorNoHandles 0x83AAAA
                            17999 ; 353  |#define HNDLerrorInvalidHandle 0x83BBBB
                            18000 ; 354  |#define HNDLerrorInvalidDevice 0x830D0D
                            18001 ; 355  |#define HNDLerrorIndexSect 0x83CCCC
                            18002 ; 356  |
                            18003 ; 357  |#define FCBwarningEndOfFile 0x84EFEF
                            18004 ; 358  |#define FCBerrorCXtoSect 0x84CCCC
                            18005 ; 359  |#define FCBerrorDiskFull 0x84DFDF
                            18006 ; 360  |
                            18007 ; 361  |#define SEEKprefix 0x85
                            18008 ; 362  |#define SEEKerrorAccessDenied 0x85ADAD
                            18009 ; 363  |#define SEEKerrorPassedBeginingOfFile 0x85BFBF
                            18010 ; 364  |#define SEEKerrorCurruptFCB 0x85CCCC
                            18011 ; 365  |#define SEEKerrorPassedEndOfFile 0x85EFEF
                            18012 ; 366  |
                            18013 ; 367  |#define READprefix 0x86
                            18014 ; 368  |#define READerrorMemoryOverFlow 0x860F0F
                            18015 ; 369  |#define READerrorInvalidBufferPntr 0x86BFBF
                            18016 ; 370  |#define READerrorInvalidByteCount 0x86BCBC
                            18017 ; 371  |#define READerrorAccessDenied 0x86ADAD
                            18018 ; 372  |#define READerrorFreeCx 0x860000
                            18019 ; 373  |#define READerrorEndOfChain 0x861111
                            18020 ; 374  |#define READerrorReservedCx 0x862222
                            18021 ; 375  |#define READerrorBadCx 0x863333
                            18022 ; 376  |
                            18023 ; 377  |#define WRITEprefix 0x87
                            18024 ; 378  |#define WRITEerrorMemoryOverFlow 0x870F0F
                            18025 ; 379  |#define WRITEerrorInvalidBufferPntr 0x87BFBF
                            18026 ; 380  |#define WRITEerrorInvalidByteCount 0x87BCBC
                            18027 ; 381  |#define WRITEerrorAccessDenied 0x87ADAD
                            18028 ; 382  |#define WRITEerrorFreeCx 0x870000
                            18029 ; 383  |#define WRITEerrorEndOfChain 0x871111
                            18030 ; 384  |#define WRITEerrorReservedCx 0x872222
                            18031 ; 385  |#define WRITEerrorBadCx 0x873333
                            18032 ; 386  |
                            18033 ; 387  |#define UTILprefix 0x88
                            18034 ; 388  |#define UTILerrorDeviceInvalid 0x88BDBD
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 303

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18035 ; 389  |
                            18036 ; 390  |// Directory Error Codes
                            18037 ; 391  |
                            18038 ; 392  |// invalid DIR sector specified
                            18039 ; 393  |#define ERR_DIRInvalidSector 0xA00000  
                            18040 ; 394  |// PATH search string has invlaid directory
                            18041 ; 395  |#define ERR_DIRInvalidPath 0xA00001  
                            18042 ; 396  |#define ERR_DIR_ALREADY_EXISTS 0xA00002
                            18043 ; 397  |#define ERR_DIR_WRITE_FAILED 0xA00003
                            18044 ; 398  |#define ERR_DIR_NOT_EMPTY 0xA00003
                            18045 ; 399  |// Bad cluster number
                            18046 ; 400  |#define ERR_CLUSTER_OUT_OF_RANGE 0xA11111  
                            18047 ; 401  |// Can't open ROOT
                            18048 ; 402  |#define ERR_OPEN_ROOT 0xA22222  
                            18049 ; 403  |#define ERR_CLUSTER_FLAGGED_BAD 0xA33333 
                            18050 ; 404  |#define ERR_CLUSTER_UNREADABLE 0xA44444 
                            18051 ; 405  |#define ERR_SECTOR_UNREADABLE 0xA44441 
                            18052 ; 406  |// bad record number to read
                            18053 ; 407  |#define ERR_INVLAID_DIR_REQUEST 0xA55555  
                            18054 ; 408  |// record requeste not in range
                            18055 ; 409  |#define ERR_ReadRecordRangeError 0xA66666  
                            18056 ; 410  |// record requeste past end of ROOT
                            18057 ; 411  |#define ERR_ReadPastEndOfROOT 0xA66660  
                            18058 ; 412  |// device number invalid
                            18059 ; 413  |#define ERR_BadDeviceNumber 0xA77777  
                            18060 ; 414  |// FCB Does not popint to a sub-Directory entry
                            18061 ; 415  |#define ERR_FCB_Not_SubDir 0xA88888  
                            18062 ; 416  |// Path specified is invalid
                            18063 ; 417  |#define ERR_INVLAID_PATH 0xA99999  
                            18064 ; 418  |#define ERR_FILE_NOT_FOUND 0xAAAAAA
                            18065 ; 419  |#define ERR_FILE_EXISTS 0xABBBBB
                            18066 ; 420  |#define ERR_DISK_FULL 0xACCCCC
                            18067 ; 421  |#define ERR_DIR_DEVICE_NOT_READY 0xACCCC0
                            18068 ; 422  |#define ERR_CX_ALLOCATION 0xADDDDD
                            18069 ; 423  |#define ERR_INVALID_MODE 0xAEEEEE
                            18070 ; 424  |
                            18071 ; 425  |#define ERR_DUPLICATE_FILE_NAME 0xAFFFFC
                            18072 ; 426  |#define ERR_FAT_WRITE_FAILED 0xAFFFFD
                            18073 ; 427  |#define ERR_CANT_DELETE_CHAIN 0xAFFFFE
                            18074 ; 428  |#define ERR_FAT_CHAIN_CORRUPT 0xAFFFFF
                            18075 ; 429  |// String Manipulation Error Codes
                            18076 ; 430  |#define ERR_END_OF_STRING 0xABBBB0
                            18077 ; 431  |
                            18078 ; 432  |#endif //@DEF(ERRORS_INC)
                            18079 ; 433  |
                            18080 
                            18082 
                            18083 ; 54   |
                            18084 ; 55   |///////////////////////////////////////////////////////////////////////////////
                            18085 ; 56   |// Typedefs
                            18086 ; 57   |///////////////////////////////////////////////////////////////////////////////
                            18087 ; 58   |
                            18088 ; 59   |typedef void (*MULTI_WRITE_CALLBACK_FUNCTION)(LONG lValue);
                            18089 ; 60   |
                            18090 ; 61   |#include "ddildl\ddildl_defs.h"
                            18091 
                            18093 
                            18094 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            18095 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                            18096 ; 3    |//
                            18097 ; 4    |// Filename: ddildl_defs.h
                            18098 ; 5    |// Description: 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 304

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18099 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            18100 ; 7    |
                            18101 ; 8    |#ifndef _DDILDL_DEFS_H
                            18102 ; 9    |#define _DDILDL_DEFS_H
                            18103 ; 10   |
                            18104 ; 11   |///////////////////////////////////////////////////////////////////////////////
                            18105 ; 12   |// Typedefs
                            18106 ; 13   |///////////////////////////////////////////////////////////////////////////////
                            18107 ; 14   |
                            18108 ; 15   |typedef enum {
                            18109 ; 16   |  MediaStateUnknown,
                            18110 ; 17   |  MediaStateErased,
                            18111 ; 18   |  MediaStateAllocated
                            18112 ; 19   |} MEDIA_STATE, * P_MEDIA_STATE;
                            18113 ; 20   |
                            18114 ; 21   |typedef enum {
                            18115 ; 22   |    MediaTypeNand = 0,
                            18116 ; 23   |    MediaTypeMMC = 1,
                            18117 ; 24   |    MediaTypeHDD = 2,
                            18118 ; 25   |    MediaTypeRAM = 3
                            18119 ; 26   |} PHYSICAL_MEDIA_TYPE, * P_PHYSICAL_MEDIA_TYPE;
                            18120 ; 27   |
                            18121 ; 28   |typedef enum {
                            18122 ; 29   |    MediaInfoNumberOfDrives = 0,
                            18123 ; 30   |    MediaInfoSizeInBytes = 1,
                            18124 ; 31   |    MediaInfoAllocationUnitSizeInBytes = 2,
                            18125 ; 32   |    MediaInfoIsInitialized = 3,
                            18126 ; 33   |    MediaInfoMediaState = 4,
                            18127 ; 34   |    MediaInfoIsWriteProtected = 5,
                            18128 ; 35   |    MediaInfoPhysicalMediaType = 6,
                            18129 ; 36   |    MediaInfoSizeOfSerialNumberInBytes = 7,
                            18130 ; 37   |    MediaInfoSerialNumber = 8,
                            18131 ; 38   |    MediaInfoIsSystemMedia = 9,
                            18132 ; 39   |    MediaInfoIsMediaPresent = 10
                            18133 ; 40   |} LOGICAL_MEDIA_INFO, * P_LOGICAL_MEDIA_INFO;
                            18134 ; 41   |
                            18135 ; 42   |#ifdef MFG_TOOL
                            18136 ; 43   |  
                            18137 ; 44   |typedef enum {
                            18138 ; 45   |    SerialNoInfoSizeOfSerialNumberInBytes = 0,
                            18139 ; 46   |    SerialNoInfoSerialNumber = 1
                            18140 ; 47   |} SERIAL_NO_INFO, * P_SERIAL_NO_INFO;
                            18141 ; 48   |#endif
                            18142 ; 49   |
                            18143 ; 50   |typedef enum {
                            18144 ; 51   |    DriveInfoSectorSizeInBytes = 0,
                            18145 ; 52   |    DriveInfoEraseSizeInBytes = 1,
                            18146 ; 53   |    DriveInfoSizeInBytes = 2,
                            18147 ; 54   |    DriveInfoSizeInMegaBytes = 3,
                            18148 ; 55   |    DriveInfoSizeInSectors = 4,
                            18149 ; 56   |    DriveInfoType = 5,
                            18150 ; 57   |    DriveInfoTag = 6,
                            18151 ; 58   |    DriveInfoComponentVersion = 7,
                            18152 ; 59   |    DriveInfoProjectVersion = 8,
                            18153 ; 60   |    DriveInfoIsWriteProtected = 9,
                            18154 ; 61   |    DriveInfoSizeOfSerialNumberInBytes = 10,
                            18155 ; 62   |    DriveInfoSerialNumber = 11,
                            18156 ; 63   |    DriveInfoMediaPresent = 12,
                            18157 ; 64   |    DriveInfoMediaChange = 13,
                            18158 ; 65   |    DriveInfoSectorAllocation = 14
                            18159 ; 66   |} LOGICAL_DRIVE_INFO, * P_LOGICAL_DRIVE_INFO;
                            18160 ; 67   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 305

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18161 ; 68   |#define DRIVE_TAG_STMPSYS_S         0x00        //!< player drive tag.
                            18162 ; 69   |#define DRIVE_TAG_HOSTLINK_S        0x01        //!< UsbMscMtp drive tag, old name was DRI
                                  VE_TAG_USBMSC_S. 
                            18163 ; 70   |#define DRIVE_TAG_RESOURCE_BIN      0x02        //!< player resource drive tag.
                            18164 ; 71   |#define DRIVE_TAG_EXTRA_S           0x03        //!< the host has 0x03 reserved for an ext
                                  ra system drive.
                            18165 ; 72   |// if you change line below, also change this equ: asm_DRIVE_TAG_RESOURCE1_BIN in player m
                                  ain.asm!! Values must match. 
                            18166 ; 73   |#define DRIVE_TAG_RESOURCE1_BIN (DRIVE_TAG_RESOURCE_BIN+0x10)//<! was just 0x04. old comme
                                  nt"the host has 0x04 reserved for an extra system drive." May17'06 JLN: correction: ChrisW says 0x
                                  10+resource.bin tag is tag for 2nd ver of resource.bin in new 2.61x post sdkrelease updater. 
                            18167 ; 74   |#define DRIVE_TAG_RESOURCE2_BIN (DRIVE_TAG_RESOURCE_BIN+0x20)// master has tag 0x22 (3rd c
                                  opy)
                            18168 ; 75   |#define DRIVE_TAG_OTGHOST_S         0x05        //!< the host has 0x05 reserved for OTG dr
                                  ive.
                            18169 ; 76   |#define DRIVE_TAG_HOSTRSC_BIN       0x06        //!< UsbMscMtp resource drive tag, old nam
                                  e was DRIVE_TAG_MTP_BIN.
                            18170 ; 77   |#define DRIVE_TAG_DATA              0x0A        //!< data drive tag.
                            18171 ; 78   |#define DRIVE_TAG_DATA_HIDDEN       0x0B        //!< hidden data drive tag, old name was D
                                  RIVE_TAG_HIDDEN
                            18172 ; 79   |#define DRIVE_TAG_BOOTMANAGER_S     0x50        //!< boot manager drive tag
                            18173 ; 80   |#define DRIVE_TAG_UPDATER_S         0xFF        //!< the host has 0xFF reserved for usbmsc
                                  .sb file used in recovery mode operation only.
                            18174 ; 81   |#define DRIVE_TAG_HOSTRSC1_BIN      0x16        //!< back up resource for hostrsrc.bin.
                            18175 ; 82   |#define DRIVE_TAG_HOSTRSC2_BIN      0x26        //!< MASTER COPY resource for hostrsrc.bin
                                  .
                            18176 ; 83   |// Do not use this enum... use the defs above.  We need to use defs so customers
                            18177 ; 84   |//  may extend the system drives without DDI source code.
                            18178 ; 85   |/*
                            18179 ; 86   |typedef enum {
                            18180 ; 87   |    ResourceBinDriveTag = 0x00,
                            18181 ; 88   |    BootManagerDriveTag = 0x50,
                            18182 ; 89   |    StmpSysDriveTag = 0x01,
                            18183 ; 90   |    UsbMscDriveTag = 0x02,
                            18184 ; 91   |    DataDriveTag = 0x0A
                            18185 ; 92   |} LOGICAL_DRIVE_TAG, * P_LOGICAL_DRIVE_TAG;
                            18186 ; 93   |*/
                            18187 ; 94   |
                            18188 ; 95   |typedef enum {
                            18189 ; 96   |    DriveTypeData = 0,
                            18190 ; 97   |    DriveTypeSystem = 1,
                            18191 ; 98   |    DriveTypeHidden = 2,
                            18192 ; 99   |    DriveTypeUnknown = 3
                            18193 ; 100  |} LOGICAL_DRIVE_TYPE, * P_LOGICAL_DRIVE_TYPE;
                            18194 
                            18201 
                            18202 ; 101  |
                            18203 ; 102  |typedef struct {
                            18204 ; 103  |    WORD wDriveNumber;          // In reference to the entire system
                            18205 ; 104  |    LOGICAL_DRIVE_TYPE Type;
                            18206 ; 105  |    WORD wTag;
                            18207 ; 106  |    DWORD dwSizeInBytes;
                            18208 ; 107  |    BOOL bRequired;
                            18209 ; 108  |} MEDIA_ALLOCATION_TABLE_ENTRY, * P_MEDIA_ALLOCATION_TABLE_ENTRY;
                            18210 
                            18218 
                            18219 ; 109  |
                            18220 ; 110  |typedef struct {
                            18221 ; 111  |    WORD wNumEntries;
                            18222 ; 112  |    MEDIA_ALLOCATION_TABLE_ENTRY Entry[MAX_MEDIA_TABLE_ENTRIES];
                            18223 ; 113  |} MEDIA_ALLOCATION_TABLE, * P_MEDIA_ALLOCATION_TABLE;
                            18224 ; 114  |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 306

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18225 ; 115  |
                            18226 ; 116  |#define TA6_ROM_REV_ID  6
                            18227 ; 117  |#define ROM_REV_ID  (*((WORD _X *)0xFA02) & 0x0F)
                            18228 ; 118  |
                            18229 ; 119  | 
                            18230 ; 120  |typedef union {
                            18231 ; 121  |
                            18232 ; 122  |    struct {
                            18233 ; 123  |        WORD MinorL      : 8;
                            18234 ; 124  |        WORD MinorH      : 8;
                            18235 ; 125  |        WORD MiddleL     : 8;
                            18236 ; 126  |        WORD MiddleH     : 8;
                            18237 ; 127  |        WORD MajorL      : 8;
                            18238 ; 128  |        WORD MajorH      : 8;
                            18239 ; 129  |        } PARTIAL_VERSION;
                            18240 ; 130  |        
                            18241 ; 131  |    DWORD   Version;        
                            18242 ; 132  |
                            18243 ; 133  |} SYSTEM_VERSION;
                            18244 ; 134  |
                            18245 ; 135  |
                            18246 ; 136  |#endif // #ifndef _DDILDL_DEFS_H
                            18247 
                            18249 
                            18250 ; 62   |
                            18251 ; 63   |///////////////////////////////////////////////////////////////////////////////
                            18252 ; 64   |// Prototypes
                            18253 ; 65   |// Note that these are prototypes for the highest level access to the DDI.
                            18254 ; 66   |//  The LDL steering mechanism converts the wLogMediaNumber & wLogDriveNumber
                            18255 ; 67   |//  parameters & passes pointers to the media/drive desctriptrs to the DDIs.
                            18256 ; 68   |///////////////////////////////////////////////////////////////////////////////
                            18257 ; 69   |RETCODE _reentrant MediaInit(WORD wLogMediaNumber);
                            18258 ; 70   |RETCODE _reentrant MediaAllocate(WORD wLogMediaNumber,
                            18259 
                            18267 
                            18268 ; 71   |    P_MEDIA_ALLOCATION_TABLE pMediaTable);
                            18269 ; 72   |RETCODE _reentrant MediaDiscoverAllocation(WORD wLogMediaNumber);
                            18270 ; 73   |RETCODE _reentrant MediaGetMediaTable(WORD wLogMediaNumber,
                            18271 ; 74   |    P_MEDIA_ALLOCATION_TABLE *pMediaTable);
                            18272 ; 75   |RETCODE _reentrant MediaGetInfo(WORD wLogMediaNumber, LOGICAL_MEDIA_INFO Type,
                            18273 
                            18287 
                            18288 ; 76   |    void * _Y pInfo);
                            18289 ; 77   |RETCODE _reentrant MediaErase(WORD wLogMediaNumber, WORD wMagicNumber);
                            18290 ; 78   |
                            18291 ; 79   |RETCODE _reentrant DriveInit(WORD wLogDriveNumber);
                            18292 ; 80   |RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                            18293 
                            18311 
                            18312 ; 81   |    void * pInfo);
                            18313 ; 82   |RETCODE _reentrant DriveSetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                            18314 ; 83   |    void * pInfo);
                            18315 ; 84   |RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                            18316 
                            18320 
                            18321 ; 85   |    P_SECTOR_BUFFER pSectorData);
                            18322 ; 86   |RETCODE _reentrant DriveWriteSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
                            18323 ; 87   |    P_SECTOR_BUFFER pSectorData);
                            18324 ; 88   |RETCODE _reentrant DriveMultiWriteSetup(WORD wLogDriveNumber,
                            18325 ; 89   |    DWORD dwStartSectorNumber, WORD wSectorCount,
                            18326 
                            18331 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 307

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18332 ; 90   |    MULTI_WRITE_CALLBACK_FUNCTION pCallBackFunction);
                            18333 ; 91   |RETCODE _reentrant DriveMultiWriteSector(WORD wLogDriveNumber,
                            18334 ; 92   |    P_SECTOR_BUFFER pSectorData, LONG lCallBackPassThru);
                            18335 ; 93   |RETCODE _reentrant DriveErase(WORD wLogDriveNumber, WORD wMagicNumber);
                            18336 ; 94   |RETCODE _reentrant DriveFlush(WORD wDriveNumber);
                            18337 ; 95   |
                            18338 ; 96   |RETCODE DdiInitAll(void);
                            18339 ; 97   |
                            18340 ; 98   |
                            18341 ; 99   |#endif // #ifndef _DDILDL_H
                            18342 
                            18344 
                            18345 ; 13   |#include "sectordef.h"
                            18346 
                            18348 
                            18349 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            18350 ; 2    |// Copyright(C) SigmaTel, Inc. 2003-2005
                            18351 ; 3    |//
                            18352 ; 4    |// Filename:     sectordef.h
                            18353 ; 5    |// Description:  Contains structs, prototypes, equates for the NAND Hal & other 
                            18354 ; 6    |//               routines.
                            18355 ; 7    |////////////////////////////////////////////////////////////////////////////////
                            18356 ; 8    |
                            18357 ; 9    |#ifndef _SECTORDEF_H
                            18358 ; 10   |#define _SECTORDEF_H
                            18359 ; 11   |
                            18360 ; 12   |    #define RAM_SECTOR_TOTAL_SIZE                 (528)
                            18361 ; 13   |    #define RAM_SECTOR_DATA_SIZE                  (512)
                            18362 ; 14   |    #define RAM_SECTOR_REDUNDANT_SIZE             (16)
                            18363 ; 15   |
                            18364 ; 16   |
                            18365 ; 17   |    #define MMC_SECTOR_TOTAL_SIZE                 (528)
                            18366 ; 18   |    #define MMC_SECTOR_DATA_SIZE                  (512)
                            18367 ; 19   |    #define MMC_SECTOR_REDUNDANT_SIZE             (16)
                            18368 ; 20   |
                            18369 ; 21   |
                            18370 ; 22   |    #define SSFDC_SECTOR_TOTAL_SIZE                 (528)
                            18371 ; 23   |    #define SSFDC_SECTOR_DATA_SIZE                  (512)
                            18372 ; 24   |    #define SSFDC_SECTOR_REDUNDANT_SIZE             (16)
                            18373 ; 25   |
                            18374 ; 26   | // Define large sector macros as small ones so sdk3.x fits in ram and mtp with small 
                            18375 ; 27   | // sector flash gets the performance boosts from optimized nand timings, etc. 
                            18376 ; 28   | // TOVERIFY: Comment out the next macro def when you want large sector support as 
                            18377 ; 29   | // in sdk2.6 and you can find the free data RAM. Or uncomment if you want to save data ra
                                  m
                            18378 ; 30   | // and only support 512 byte sectors and their associated flash types. 
                            18379 ; 31   |//#define LARGE_SECTOR_DEFS_AS_SMALL_SECTOR
                            18380 ; 32   |#ifdef LARGE_SECTOR_DEFS_AS_SMALL_SECTOR 
                            18381 ; 33   |    #define LARGE_SECTOR_TOTAL_SIZE                 (528)
                            18382 ; 34   |    #define LARGE_SECTOR_DATA_SIZE                  (512)
                            18383 ; 35   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (16)
                            18384 ; 36   |#else
                            18385 ; 37   |    // Real large sector defines to use when large sector flash support is desired.
                            18386 ; 38   |    #define LARGE_SECTOR_TOTAL_SIZE                 (2112)
                            18387 ; 39   |    #define LARGE_SECTOR_DATA_SIZE                  (2048)
                            18388 ; 40   |    #define LARGE_SECTOR_REDUNDANT_SIZE             (64)
                            18389 ; 41   |#endif
                            18390 ; 42   |    
                            18391 ; 43   |    // round up to the nearest WORD, then add one to pad for the ECC DMA bug
                            18392 ; 44   |    #define SECTOR_BUFFER_ALLOC_SIZE(a)             (((a+2)/3)+1)
                            18393 ; 45   |
                            18394 ; 46   |
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 308

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18395 ; 47   |    // These are moved here from chkdsk.h     TOVERIFY. 
                            18396 ; 48   |    #define SEC_512_BYTES_PER_SECTOR                        SSFDC_SECTOR_DATA_SIZE
                            18397 ; 49   |        #define SEC_512_BYTES_TOTAL_SIZE                                                SS
                                  FDC_SECTOR_TOTAL_SIZE
                            18398 ; 50   |        #define SEC_512_WORDS_TOTAL_SIZE                                                17
                                  6
                            18399 ; 51   |    #define SEC_512_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT    12
                            18400 ; 52   |    #define SEC_512_BYTES_DIR_REC_PER_SECTOR                16
                            18401 ; 53   |    #define SEC_512_BYTES_WORDS_PER_SECTOR                  177
                            18402 ; 54   |    #define SEC_2K_BYTES_PER_SECTOR                         LARGE_SECTOR_DATA_SIZE
                            18403 ; 55   |        #define SEC_2K_BYTES_TOTAL_SIZE                                                 LA
                                  RGE_SECTOR_TOTAL_SIZE
                            18404 ; 56   |    #define SEC_2K_BYTES_CLUSTER_ENTRY_PER_SECTOR_SHIFT     12
                            18405 ; 57   |    #define SEC_2K_BYTES_DIR_REC_PER_SECTOR                 64
                            18406 ; 58   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR                   705
                            18407 ; 59   |    #define SEC_2K_BYTES_WORDS_PER_SECTOR_NO_RA             683
                            18408 ; 60   |
                            18409 ; 61   |    // Next 5 lines imported from nandsystemdrivewritesector.c
                            18410 ; 62   |    #define RA_ATTR_MEMORY_OFFSET           682
                            18411 ; 63   |    #define NUMBER_OF_WORDS_IN_512BYTES     171
                            18412 ; 64   |    #define NUM_ECC_DATA_IN_WORDS           3
                            18413 ; 65   |    #define SEC_512_WORD1_RA_SWAP           171
                            18414 ; 66   |    #define SEC_512_WORD2_RA_SWAP           173
                            18415 ; 67   |
                            18416 ; 68   |#endif  // _SECTORDEF_H
                            18417 ; 69   |
                            18418 
                            18420 
                            18421 ; 14   |
                            18422 ; 15   |typedef struct {
                            18423 ; 16   |    DWORD    dwSectNumber;          // Current Sector Loaded in Buffer
                            18424 ; 17   |    P_SECTOR_BUFFER pSectBuffer;    // Pointer to the sector buffer
                            18425 ; 18   |} Struct_Buffer_Sector_Desc, * pStruct_Buffer_Sector_Desc;
                            18426 ; 19   |
                            18427 ; 20   |#define SECTOR_DATA_SIZE_IN_BYTES           (510)  // Number of valid data bytes before pa
                                  dding
                            18428 ; 21   |
                            18429 ; 22   |#ifdef READ_ONLY_THE_RESOURCE
                            18430 ; 23   |    #define SECTOR_BUFFER_SIZE              (SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_S
                                  IZE))
                            18431 ; 24   |#else
                            18432 ; 25   |    #define SECTOR_BUFFER_SIZE              (SECTOR_BUFFER_ALLOC_SIZE(SSFDC_SECTOR_TOTAL_S
                                  IZE)+9)      // The extra 27 bytes here is for extra ECC data needed
                            18433 ; 26   |#endif
                            18434 ; 27   |// Player index cache enabled saves ~400 mseconds of intersong delay. 
                            18435 ; 28   |#ifdef STMP_BUILD_PLAYER
                            18436 ; 29   |        // This number selected based on profiling (8/17/2005)
                            18437 ; 30   |        #define RESOURCE_INDEX_CACHE_SIZE           (128)   
                            18438 ; 31   |#else //MTP                                             
                            18439 ; 32   |         // This number selected based on profiling (8/17/2005)                           
                                                  
                            18440 ; 33   |        #define RESOURCE_INDEX_CACHE_SIZE           (75)
                            18441 ; 34   |#endif
                            18442 ; 35   |
                            18443 ; 36   |
                            18444 ; 37   |#if RESOURCE_INDEX_CACHE_SIZE > 0
                            18445 ; 38   |        #define ENABLE_RESOURCE_INDEX_CACHE (1)
                            18446 ; 39   |#else
                            18447 ; 40   |        #define ENABLE_RESOURCE_INDEX_CACHE (0)
                            18448 ; 41   |#endif
                            18449 ; 42   |
                            18450 ; 43   |extern RETCODE _reentrant DriveReadSector(WORD wLogDriveNumber, DWORD dwSectorNumber,
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 309

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18451 ; 44   |        P_SECTOR_BUFFER pSectorData);
                            18452 ; 45   |extern RETCODE _reentrant DriveGetInfo(WORD wLogDriveNumber, LOGICAL_DRIVE_INFO Type,
                            18453 ; 46   |        void * pInfo);
                            18454 ; 47   |
                            18455 ; 48   |RETCODE _reentrant ResourceFileRead(DWORD dwStartPos, WORD wNumBytesToRead, void * pwBuffe
                                  r, WORD MemSpaceDest);
                            18456 ; 49   |
                            18457 ; 50   |void _reentrant CloseResourceDrive(void);
                            18458 ; 51   |
                            18459 ; 52   |RETCODE _reentrant CopyWords(WORD wNumWordsToCopy, void * pDest, WORD SECTOR_BUFFER_MEM * 
                                  pSrc,
                            18460 ; 53   |                        WORD wMemSpaceDest);
                            18461 ; 54   |
                            18462 ; 55   |void _reentrant CopyWordsFromSectorBufToY(WORD wNumWordsToCopy, WORD _Y * pDest,
                            18463 ; 56   |                WORD SECTOR_BUFFER_MEM * pSrc);
                            18464 ; 57   |void _reentrant CopyWordsFromSectorBufToX(WORD wNumWordsToCopy, WORD _X * pDest,
                            18465 ; 58   |                WORD SECTOR_BUFFER_MEM * pSrc);
                            18466 ; 59   |void _reentrant CopyWordsFromSectorBufToP(WORD wNumWordsToCopy, WORD _P * pDest,
                            18467 ; 60   |                WORD SECTOR_BUFFER_MEM * pSrc);
                            18468 ; 61   |
                            18469 ; 62   |#endif
                            18470 ; 63   |/* EOF */
                            18471 ; 64   |
                            18472 
                            18474 
                            18475 ; 7    |#include "displaydriver.h"
                            18476 
                            18478 
                            18479 ; 1    |#ifndef _DISPLAY_DRIVER_H
                            18480 ; 2    |#define _DISPLAY_DRIVER_H
                            18481 ; 3    |
                            18482 ; 4    |//currently, framebuffer only works when located in the Y memory space.
                            18483 ; 5    |#include "types.h"
                            18484 
                            18486 
                            18487 ; 1    |////////////////////////////////////////////////////////////////////////////////
                            18488 ; 2    |// Copyright(C) SigmaTel, Inc. 2000-2004
                            18489 ; 3    |//
                            18490 ; 4    |// Filename: types.h
                            18491 ; 5    |// Description: Standard data types
                            18492 ; 6    |////////////////////////////////////////////////////////////////////////////////
                            18493 ; 7    |
                            18494 ; 8    |#ifndef _TYPES_H
                            18495 ; 9    |#define _TYPES_H
                            18496 ; 10   |
                            18497 ; 11   |// TODO:  move this outta here!
                            18498 ; 12   |#if !defined(NOERROR)
                            18499 ; 13   |#define NOERROR 0
                            18500 ; 14   |#define SUCCESS 0
                            18501 ; 15   |#endif 
                            18502 ; 16   |#if !defined(SUCCESS)
                            18503 ; 17   |#define SUCCESS  0
                            18504 ; 18   |#endif
                            18505 ; 19   |#if !defined(ERROR)
                            18506 ; 20   |#define ERROR   -1
                            18507 ; 21   |#endif
                            18508 ; 22   |#if !defined(FALSE)
                            18509 ; 23   |#define FALSE 0
                            18510 ; 24   |#endif
                            18511 ; 25   |#if !defined(TRUE)
                            18512 ; 26   |#define TRUE  1
                            18513 ; 27   |#endif
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 310

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18514 ; 28   |
                            18515 ; 29   |#if !defined(NULL)
                            18516 ; 30   |#define NULL 0
                            18517 ; 31   |#endif
                            18518 ; 32   |
                            18519 ; 33   |#define MAX_INT     0x7FFFFF
                            18520 ; 34   |#define MAX_LONG    0x7FFFFFffffff
                            18521 ; 35   |        // max positive unsigned long value: -1 == 0xFFFFFFffffff
                            18522 ; 36   |#define MAX_ULONG   (-1) 
                            18523 ; 37   |
                            18524 ; 38   |#define WORD_SIZE   24              // word size in bits
                            18525 ; 39   |#define BYTES_PER_WORD 3            // 8 bit bytes
                            18526 ; 40   |
                            18527 ; 41   |
                            18528 ; 42   |#define BYTE    unsigned char       // btVarName
                            18529 ; 43   |#define CHAR    signed char         // cVarName
                            18530 ; 44   |#define USHORT  unsigned short      // usVarName
                            18531 ; 45   |#define SHORT   unsigned short      // sVarName
                            18532 ; 46   |#define WORD    unsigned int        // wVarName
                            18533 ; 47   |#define INT     signed int          // iVarName
                            18534 ; 48   |#define DWORD   unsigned long       // dwVarName
                            18535 ; 49   |#define LONG    signed long         // lVarName
                            18536 ; 50   |#define BOOL    unsigned int        // bVarName
                            18537 ; 51   |#define FRACT   _fract              // frVarName
                            18538 ; 52   |#define LFRACT  long _fract         // lfrVarName
                            18539 ; 53   |#define CIRC    _circ               // cp<type prefix>VarName (see below)
                            18540 ; 54   |#define FLOAT   float               // fVarName
                            18541 ; 55   |#define DBL     double              // dVarName
                            18542 ; 56   |#define ENUM    enum                // eVarName
                            18543 ; 57   |#define CMX     _complex            // cmxVarName
                            18544 ; 58   |typedef WORD UCS3;                   // 
                            18545 ; 59   |
                            18546 ; 60   |#define UINT16  unsigned short
                            18547 ; 61   |#define UINT8   unsigned char   
                            18548 ; 62   |#define UINT32  unsigned long
                            18549 ; 63   |#define UINT64  unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            18550 ; 64   |#define INT64   unsigned long   // need to figure out how to do 64 bit values.  Or port ex
                                  isiting code to only use 48 bit
                            18551 ; 65   |#define WCHAR   UINT16
                            18552 ; 66   |
                            18553 ; 67   |//UINT128 is 16 bytes or 6 words
                            18554 ; 68   |typedef struct UINT128_3500 {   
                            18555 ; 69   |    int val[6];     
                            18556 ; 70   |} UINT128_3500;
                            18557 ; 71   |
                            18558 ; 72   |#define UINT128   UINT128_3500
                            18559 ; 73   |
                            18560 ; 74   |// Little endian word packed byte strings:   
                            18561 ; 75   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            18562 ; 76   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            18563 ; 77   |// Little endian word packed byte strings:   
                            18564 ; 78   |//      _packed BYTE bTextVarName[]="a string";  bText is a packed byte string prefix
                            18565 ; 79   |// Convert to big endian words by reordering bytes from high to low using swizzle.
                            18566 ; 80   |
                            18567 ; 81   |// Declare Memory Spaces To Use When Coding
                            18568 ; 82   |// A. Sector Buffers
                            18569 ; 83   |#define SECTOR_BUFFER_MEM_X _X
                            18570 ; 84   |#define SECTOR_BUFFER_MEM_Y _Y
                            18571 ; 85   |#define SECTOR_BUFFER_MEM SECTOR_BUFFER_MEM_X
                            18572 ; 86   |typedef WORD SECTOR_BUFFER_MEM SECTOR_BUFFER;
                            18573 ; 87   |typedef SECTOR_BUFFER * P_SECTOR_BUFFER;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 311

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18574 ; 88   |// B. Media DDI Memory
                            18575 ; 89   |#define MEDIA_DDI_MEM _Y
                            18576 ; 90   |
                            18577 ; 91   |
                            18578 ; 92   |
                            18579 ; 93   |// Pointers to linear structures are labeled as: p<type prefix>VarName
                            18580 ; 94   |// Examples of circular pointers:
                            18581 ; 95   |//    INT CIRC cpiVarName
                            18582 ; 96   |//    DWORD CIRC cpdwVarName
                            18583 ; 97   |
                            18584 ; 98   |#define RETCODE INT                 // rcVarName
                            18585 ; 99   |
                            18586 ; 100  |// generic bitfield structure
                            18587 ; 101  |struct Bitfield {
                            18588 ; 102  |    unsigned int B0  :1;
                            18589 ; 103  |    unsigned int B1  :1;
                            18590 ; 104  |    unsigned int B2  :1;
                            18591 ; 105  |    unsigned int B3  :1;
                            18592 ; 106  |    unsigned int B4  :1;
                            18593 ; 107  |    unsigned int B5  :1;
                            18594 ; 108  |    unsigned int B6  :1;
                            18595 ; 109  |    unsigned int B7  :1;
                            18596 ; 110  |    unsigned int B8  :1;
                            18597 ; 111  |    unsigned int B9  :1;
                            18598 ; 112  |    unsigned int B10 :1;
                            18599 ; 113  |    unsigned int B11 :1;
                            18600 ; 114  |    unsigned int B12 :1;
                            18601 ; 115  |    unsigned int B13 :1;
                            18602 ; 116  |    unsigned int B14 :1;
                            18603 ; 117  |    unsigned int B15 :1;
                            18604 ; 118  |    unsigned int B16 :1;
                            18605 ; 119  |    unsigned int B17 :1;
                            18606 ; 120  |    unsigned int B18 :1;
                            18607 ; 121  |    unsigned int B19 :1;
                            18608 ; 122  |    unsigned int B20 :1;
                            18609 ; 123  |    unsigned int B21 :1;
                            18610 ; 124  |    unsigned int B22 :1;
                            18611 ; 125  |    unsigned int B23 :1;
                            18612 ; 126  |};
                            18613 ; 127  |
                            18614 ; 128  |union BitInt {
                            18615 ; 129  |        struct Bitfield B;
                            18616 ; 130  |        int        I;
                            18617 ; 131  |};
                            18618 ; 132  |
                            18619 ; 133  |#define MAX_MSG_LENGTH 10
                            18620 ; 134  |struct CMessage
                            18621 ; 135  |{
                            18622 ; 136  |        unsigned int m_uLength;
                            18623 ; 137  |        unsigned int m_uMsg[MAX_MSG_LENGTH];
                            18624 ; 138  |};
                            18625 ; 139  |
                            18626 ; 140  |typedef struct {
                            18627 ; 141  |    WORD m_wLength;
                            18628 ; 142  |    WORD m_wMessage;
                            18629 ; 143  |    WORD m_wParams[MAX_MSG_LENGTH];
                            18630 ; 144  |} Message;
                            18631 ; 145  |
                            18632 ; 146  |struct MessageQueueDescriptor
                            18633 ; 147  |{
                            18634 ; 148  |        int *m_pBase;
                            18635 ; 149  |        int m_iModulo;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 312

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18636 ; 150  |        int m_iSize;
                            18637 ; 151  |        int *m_pHead;
                            18638 ; 152  |        int *m_pTail;
                            18639 ; 153  |};
                            18640 ; 154  |
                            18641 ; 155  |struct ModuleEntry
                            18642 ; 156  |{
                            18643 ; 157  |    int m_iSignaledEventMask;
                            18644 ; 158  |    int m_iWaitEventMask;
                            18645 ; 159  |    int m_iResourceOfCode;
                            18646 ; 160  |    struct MessageQueueDescriptor *m_pMessageQueue;
                            18647 ; 161  |    int _asmfunc (*m_pProcessEntryPoint)(union WaitMask Signals,struct MessageQueueDescrip
                                  tor *);
                            18648 ; 162  |    int _asmfunc (*m_pInitFunction)(struct MessageQueueDescriptor *);
                            18649 ; 163  |    int m_uTimeOutHigh;
                            18650 ; 164  |    int m_uTimeOutLow;
                            18651 ; 165  |    int _asmfunc (*m_pBackgroundFunction)(struct MessageQueueDescriptor *);
                            18652 ; 166  |};
                            18653 ; 167  |
                            18654 ; 168  |union WaitMask{
                            18655 ; 169  |    struct B{
                            18656 ; 170  |        unsigned int m_bNone     :1;
                            18657 ; 171  |        unsigned int m_bMessage  :1;
                            18658 ; 172  |        unsigned int m_bTimer    :1;
                            18659 ; 173  |        unsigned int m_bButton   :1;
                            18660 ; 174  |    } B;
                            18661 ; 175  |    int I;
                            18662 ; 176  |} ;
                            18663 ; 177  |
                            18664 ; 178  |
                            18665 ; 179  |struct Button {
                            18666 ; 180  |        WORD wButtonEvent;
                            18667 ; 181  |        WORD wUnused[MAX_MSG_LENGTH];   
                            18668 ; 182  |};
                            18669 ; 183  |
                            18670 ; 184  |struct Message {
                            18671 ; 185  |        WORD wMsgLength;
                            18672 ; 186  |        WORD wMsgCommand;
                            18673 ; 187  |        WORD wMsgParms[MAX_MSG_LENGTH-1];
                            18674 ; 188  |};
                            18675 ; 189  |
                            18676 ; 190  |union EventTypes {
                            18677 ; 191  |        struct CMessage msg;
                            18678 ; 192  |        struct Button Button ;
                            18679 ; 193  |        struct Message Message;
                            18680 ; 194  |};
                            18681 ; 195  |
                            18682 ; 196  |// next 2 used to get updater build to return correct protocol ver in scsi response.
                            18683 ; 197  |#define BUILD_TYPE_UPDATER  0x100
                            18684 ; 198  |#define BUILD_TYPE_HOSTLINK 0x101
                            18685 ; 199  |#define BUILD_TYPE_PLAYER   0x102
                            18686 ; 200  |
                            18687 ; 201  |// Resets part if RETAIL build. DEBUG build executes debug instruction to halt.
                            18688 ; 202  |#define SystemHalt() __asm(" include 'sysmacro.asm' \n error") 
                            18689 ; 203  |#define assert(x)    if(!(x)) __asm(" include 'sysmacro.asm' \n error")
                            18690 ; 204  |
                            18691 ; 205  |#if DEBUG
                            18692 ; 206  |// For DEBUG builds, DebugBuildAssert(condition) halts if condition evaluates to FALSE. 
                            18693 ; 207  |#define DebugBuildAssert(x)    if(!(x)) __asm(" debug ")
                            18694 ; 208  |#else 
                            18695 ; 209  |// For RETAIL builds, DebugBuildAssert(condition) does nothing & execution continues rathe
                                  r than halt or reset. 
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 313

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18696 ; 210  |#define DebugBuildAssert(x)    
                            18697 ; 211  |#endif
                            18698 ; 212  |
                            18699 ; 213  |// Do this in your C files to make a reminder that's displayed during the build.
                            18700 ; 214  |//  #pragma asm
                            18701 ; 215  |//  WARN 'Note to builder: reminder to do this after verifying that'
                            18702 ; 216  |//  #pragma endasm
                            18703 ; 217  |
                            18704 ; 218  |
                            18705 ; 219  |#ifdef COLOR_262K
                            18706 ; 220  |#define RGB(r,g,b)    ((0x0000FC & (r)) << 10) | ((0x0000FC & (g)) << 4) | ((0x0000FC & (b
                                  )) >> 2)    //262k
                            18707 ; 221  |#elif defined(COLOR_65K)
                            18708 ; 222  |#define RGB(r,g,b)    ((0x0000F8 & (r)) << 8) | ((0x0000FC & (g)) << 3) | ((0x0000F8 & (b)
                                  ) >> 3)  //65k
                            18709 ; 223  |#else
                            18710 ; 224  |#define RGB(r,g,b)       ((0x0000F0 & (r)) << 4) | (0x0000F0 & (g)) | ((0x0000F0 & (b)) >>
                                   4)
                            18711 ; 225  |#endif
                            18712 ; 226  |    
                            18713 ; 227  |#endif // #ifndef _TYPES_H
                            18714 
                            18716 
                            18717 ; 6    |
                            18718 ; 7    |_reentrant void HALDisplayInit(void);
                            18719 ; 8    |_reentrant void HALDisplaySendCommand(WORD wCommand);
                            18720 ; 9    |_reentrant void HALDisplaySendData(WORD wPage, WORD wColumn, WORD wCount, WORD wByteIndex,
                                  WORD* pBuffer, WORD wDisplayOperation);
                            18721 ; 10   |_reentrant void HALDisplaySetContrast(INT iContrast);
                            18722 ; 11   |_reentrant void HALDisplayDecContrast(void);
                            18723 ; 12   |_reentrant void HALDisplayIncContrast(void);
                            18724 ; 13   |_reentrant void HALHandleMessage(Message *pMsg);
                            18725 ; 14   |
                            18726 ; 15   |
                            18727 ; 16   |
                            18728 ; 17   |
                            18729 ; 18   |#endif
                            18730 
                            18732 
                            18733 ; 8    |
                            18734 ; 9    |#ifdef STMP_BUILD_PLAYER
                            18735 ; 10   |#include "sysmem.h"
                            18736 
                            18738 
                            18739 ; 1    |//;******************************************************************************
                            18740 ; 2    |//; Copyright(C) SigmaTel, Inc. 2000-2003
                            18741 ; 3    |//; File: sysmem.h
                            18742 ; 4    |//; ST System Memory Externs
                            18743 ; 5    |//;******************************************************************************
                            18744 ; 6    |
                            18745 ; 7    |#ifndef SYSMEM_XREF_C
                            18746 ; 8    |#define SYSMEM_XREF_C
                            18747 ; 9    |
                            18748 ; 10   |// Variables in X
                            18749 ; 11   |extern unsigned int _X g_wDecoderCSR;
                            18750 ; 12   |extern unsigned int _X g_wDecoderSR;
                            18751 ; 13   |extern unsigned int _X g_wDecoderCSR2;  // DECODE2EOF
                            18752 ; 14   |extern unsigned int _X g_wEncoderSR;
                            18753 ; 15   |extern unsigned int _X g_wEncoderCSR;
                            18754 ; 16   |extern unsigned int _X g_wRecStartTimeHigh;
                            18755 ; 17   |extern unsigned int _X g_wRecStartTimeLow;
                            18756 ; 18   |extern unsigned int _X g_wSysError;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 314

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18757 ; 19   |#ifdef TRACEBUF_EN
                            18758 ; 20   |extern unsigned int _X g_wTraceBuffer; //Disabled by default.   
                            18759 ; 21   |extern unsigned int _X g_wTracePointer;
                            18760 ; 22   |#endif
                            18761 ; 23   |extern unsigned int _X g_wUserScratchX[];
                            18762 ; 24   |extern unsigned int _X g_wNextVoiceNumValue;
                            18763 ; 25   |extern unsigned int _X g_wEncAdpcmSave_r7;
                            18764 ; 26   |extern unsigned int _X g_wEncAdpcmSave_m7;
                            18765 ; 27   |extern unsigned int _X g_wEncModuleState;
                            18766 ; 28   |extern unsigned int _X g_wEncoderIsrSR;
                            18767 ; 29   |extern unsigned int _X g_bAudibleNeedFileSize;          // 10/12/04 mmiu - Added for AA fi
                                  le navigation
                            18768 ; 30   |extern unsigned int _X g_bAudiblePlayThrough;           // 11/1/04 mmiu - Added for file p
                                  osition play-through indicator
                            18769 ; 31   |extern unsigned int _X g_wSongStartOffsetHigh;          // 11/1/04 mmiu - Added until conf
                                  irmed we can use g_wSongByteTotalConsumedHigh/Low
                            18770 ; 32   |extern unsigned int _X g_wSongStartOffsetLow;
                            18771 ; 33   |
                            18772 ; 34   |// Variables in Y
                            18773 ; 35   |extern int          _Y g_VolumeBias;
                            18774 ; 36   |extern unsigned int _Y g_wCurrentRoutinePtr;
                            18775 ; 37   |extern unsigned int _Y g_wSystemFileHandle;
                            18776 ; 38   |extern unsigned int _Y g_wSongByteTotalHigh;
                            18777 ; 39   |extern unsigned int _Y g_wSongByteTotalLow; 
                            18778 ; 40   |extern unsigned int _Y g_wSongByteLengthHigh;
                            18779 ; 41   |extern unsigned int _Y g_wSongByteLengthLow;
                            18780 ; 42   |extern unsigned int _Y g_wInvSampleRate;
                            18781 ; 43   |extern unsigned int _Y g_wCurrentSongBad;
                            18782 ; 44   |extern unsigned int _Y g_iSongType;
                            18783 ; 45   |extern _packed BYTE _Y g_CurrentSongName[];
                            18784 ; 46   |extern unsigned int _Y g_wCurrentDirDevId;
                            18785 ; 47   |extern unsigned int _Y g_wSongInvBitRatePtr;
                            18786 ; 48   |extern unsigned int _Y g_wUserScratchXDescriptor;
                            18787 ; 49   |extern unsigned int _Y g_wUserScratchYDescriptor;
                            18788 ; 50   |extern _packed BYTE _Y g_EncFileNameString[];
                            18789 ; 51   |extern unsigned int _Y g_wEncFileHandle;
                            18790 ; 52   |extern unsigned int _Y g_wEncAdpcmOvlSave_sp;
                            18791 ; 53   |extern unsigned int _Y g_wRootDirectory;
                            18792 ; 54   |extern unsigned int _Y g_wUserScratchY[];
                            18793 ; 55   |extern unsigned int _Y g_wPrevInvBitRatePtr;
                            18794 ; 56   |
                            18795 ; 57   |#endif  // SYSMEM_XREF_C
                            18796 
                            18798 
                            18799 ; 11   |#include "sysequ.h"
                            18800 
                            18802 
                            18803 ; 1    |/////////////////////////////////////////////////////////////////////////////////
                            18804 ; 2    |// Copyright(C) SigmaTel, Inc. 2000
                            18805 ; 3    |// System defs
                            18806 ; 4    |/////////////////////////////////////////////////////////////////////////////////
                            18807 ; 5    |
                            18808 ; 6    |#if (!defined(SYSEQU_INC))
                            18809 ; 7    |#define SYSEQU_INC 1
                            18810 ; 8    |
                            18811 ; 9    |#define SOFTTIMER_CONTINUOUS_EVENT 0
                            18812 ; 10   |
                            18813 ; 11   |
                            18814 ; 12   |#define HOLD_BUTTON_REPORTED_BITMASK 4
                            18815 ; 13   |
                            18816 ; 14   |
                            18817 ; 15   |// Decoder types
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 315

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18818 ; 16   |#define DECODER_TYPE_MP3 0
                            18819 ; 17   |#define DECODER_TYPE_WMA 1
                            18820 ; 18   |#define DECODER_TYPE_AAC 2
                            18821 ; 19   |#define DECODER_TYPE_ADPCM_IMA 3
                            18822 ; 20   |#define DECODER_TYPE_ADPCM_MS 4
                            18823 ; 21   |#define DECODER_TYPE_PCM 5
                            18824 ; 22   |#define DECODER_TYPE_STFM 6
                            18825 ; 23   |
                            18826 ; 24   |// Encoder types
                            18827 ; 25   |#define ENCODER_TYPE_ADPCM_IMA 0
                            18828 ; 26   |#define ENCODER_TYPE_PCM 1
                            18829 ; 27   |#define ENCODER_TYPE_MP3 2
                            18830 ; 28   |
                            18831 ; 29   |// EncoderSR/EncoderCSR bit equates.  Also uses Stop & Play below.
                            18832 ; 30   |#define EncNotEnoughSpace 0
                            18833 ; 31   |#define EncRanOutOfSpace 1
                            18834 ; 32   |#define EncRecordError 2
                            18835 ; 33   |#define EncToldToStop 3
                            18836 ; 34   |#define EncAlreadyRecording 4
                            18837 ; 35   |// ENCODER_STOPPED       equ     6   ; As RecorderStateMachine.h
                            18838 ; 36   |#define EncWarnLowSpace 7
                            18839 ; 37   |#define EncWarningSent 8
                            18840 ; 38   |// ENCODER_RECORDING     equ     12
                            18841 ; 39   |
                            18842 ; 40   |// DecoderSR/DecoderCSR bit equates
                            18843 ; 41   |//  This bit is set when the decoder sends a message to the parser and is 
                            18844 ; 42   |#define DecoderIgnoreMessages 0   
                            18845 ; 43   |//  waiting for a response.
                            18846 ; 44   |#define VBRFlag 1
                            18847 ; 45   |#define RepeatSong 2
                            18848 ; 46   |#define RepeatAll 3
                            18849 ; 47   |#define Random 4
                            18850 ; 48   |#define Pause 5
                            18851 ; 49   |#define Stop 6
                            18852 ; 50   |#define Rwnd 7
                            18853 ; 51   |#define Ffwd 8
                            18854 ; 52   |#define TimeMode 9
                            18855 ; 53   |// set when Fstatus_o = 1 for mp3 
                            18856 ; 54   |#define DecSync 10    
                            18857 ; 55   |#define Play 12
                            18858 ; 56   |// starting with sdk2.105: changed to set when decoder done instead of when file reads don
                                  e 
                            18859 ; 57   |#define EndOfSong 13    
                            18860 ; 58   |#define EndOfList 14
                            18861 ; 59   |#define SongInfo 15
                            18862 ; 60   |// set when a song file is currently opened by the decoder
                            18863 ; 61   |#define FileIsOpen 16    
                            18864 ; 62   |// used by parser
                            18865 ; 63   |#define SkipBlockHeader 17    
                            18866 ; 64   |#define ABMode_A 18
                            18867 ; 65   |#define ABMode_B 19
                            18868 ; 66   |#define ABQuiet 20
                            18869 ; 67   |// set if bad file encountered
                            18870 ; 68   |#define BadFile 21    
                            18871 ; 69   |// mp3 decoder looking for sync
                            18872 ; 70   |#define SyncWait 22    
                            18873 ; 71   |// error reading file, duh
                            18874 ; 72   |#define FileReadError 23    
                            18875 ; 73   |
                            18876 ; 74   |// DecoderCSR2 bit equates
                            18877 ; 75   |//Set when EOF reached, prevent freads beyond EOF 
                            18878 ; 76   |#define EndOfFileReached 0  
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 316

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18879 ; 77   |// Set when need to allow LCD to update time
                            18880 ; 78   |#define TimeNeedsUpdate 1  
                            18881 ; 79   |
                            18882 ; 80   |
                            18883 ; 81   |// ParserVoiceCSR bits (specific to voice files)
                            18884 ; 82   |// repeat playing current file
                            18885 ; 83   |#define RepeatOneFile 0     
                            18886 ; 84   |// continuously loop through files
                            18887 ; 85   |#define RepeatAllFiles 1     
                            18888 ; 86   |// start at current file, play all files, then stop
                            18889 ; 87   |#define LoopOnce 2     
                            18890 ; 88   |
                            18891 ; 89   |// DecAdpcmFlags bits (used by ADPCM decoders)
                            18892 ; 90   |// Set to '1' when header unpacked, cleared during StopCurrentSong
                            18893 ; 91   |#define WaveHeaderFound 0       
                            18894 ; 92   |
                            18895 ; 93   |#if (defined(TRACEBUF_EN))
                            18896 ; 94   |// Trace buffer words.  Not ENabled by default.
                            18897 ; 95   |#define TRACE_BUFF_SIZE 256
                            18898 ; 96   |#define TRACE_BUFF_MODULO TRACE_BUFF_SIZE-1 
                            18899 ; 97   |#endif
                            18900 ; 98   |
                            18901 ; 99   |// Scratch area stuff
                            18902 ; 100  |#if defined(STMP_BUILD_PLAYER)
                            18903 ; 101  |#define SCRATCH_USER_Y_SIZE 512
                            18904 ; 102  |#define SCRATCH_USER_X_SIZE 256
                            18905 ; 103  |#else 
                            18906 ; 104  |#if defined(FAT32TEST)
                            18907 ; 105  |#define SCRATCH_USER_Y_SIZE 683
                            18908 ; 106  |#define SCRATCH_USER_X_SIZE 128
                            18909 ; 107  |#else 
                            18910 ; 108  |#define SCRATCH_USER_Y_SIZE 128
                            18911 ; 109  |#define SCRATCH_USER_X_SIZE 128
                            18912 ; 110  |#endif
                            18913 ; 111  |#endif
                            18914 ; 112  |
                            18915 ; 113  |#define SCRATCH_USER_X_SIZE_BYTES SCRATCH_USER_X_SIZE*3
                            18916 ; 114  |#define SCRATCH_USER_X_MODULO SCRATCH_USER_X_SIZE-1
                            18917 ; 115  |#define SCRATCH_USER_Y_SIZE_BYTES SCRATCH_USER_Y_SIZE*3
                            18918 ; 116  |#define SCRATCH_USER_Y_MODULO SCRATCH_USER_Y_SIZE-1
                            18919 ; 117  |
                            18920 ; 118  |// Boot ROM execute location
                            18921 ; 119  |#define BootExecuteCommand 0x012B
                            18922 ; 120  |
                            18923 ; 121  |#define BOOT_USB 0x000002
                            18924 ; 122  |#define BOOT_SMARTMEDIA 0x000004
                            18925 ; 123  |#define BOOT_COMPACTFLASH 0x000005
                            18926 ; 124  |#define BOOT_I2C_SLAVE 0x000009
                            18927 ; 125  |#define BOOT_I2C_MASTER 0x00000A
                            18928 ; 126  |#define BOOT_SPI_SLAVE 0x00000B
                            18929 ; 127  |#define BOOT_SPI_MASTER 0x00000C
                            18930 ; 128  |#define BOOT_HOSTPORT 0x00000D
                            18931 ; 129  |#define BOOT_BURNIN 0x00000F
                            18932 ; 130  |
                            18933 ; 131  |// Numerical constants
                            18934 ; 132  |//PI              equ     3.141592654
                            18935 ; 133  |
                            18936 ; 134  |// Buffer Descriptor offsets
                            18937 ; 135  |#define BD_BufferBaseAddress 0
                            18938 ; 136  |#define BD_BufferModulo 1
                            18939 ; 137  |#define BD_BufferSize 2
                            18940 ; 138  |#define BD_HdPtr 3
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 317

M:ADDR CODE           CYCLES LINE SOURCELINE
                            18941 ; 139  |#define BD_TailPtr 4
                            18942 ; 140  |
                            18943 ; 141  |// Size of a buffer descriptor
                            18944 ; 142  |#define BUFF_DESC_SIZE 5
                            18945 ; 143  |
                            18946 ; 144  |// Mp3 Song Table Descriptor Offsets
                            18947 ; 145  |// number of elements for each song
                            18948 ; 146  |#define MST_ELEMENT_COUNT 7        
                            18949 ; 147  |#define MST_CARD_NUMBER 0
                            18950 ; 148  |#define MST_ADDR_LOW 1
                            18951 ; 149  |#define MST_ADDR_HIGH 2
                            18952 ; 150  |#define MST_BYTES_LOW 3
                            18953 ; 151  |#define MST_BYTES_HIGH 4
                            18954 ; 152  |#define MST_SAMPLE_RATE 5
                            18955 ; 153  |#define MST_SONG_TYPE 6
                            18956 ; 154  |
                            18957 ; 155  |// Data Format Descriptor offsets
                            18958 ; 156  |#define DF_NumChannels 0
                            18959 ; 157  |#define DF_SampleRate 1
                            18960 ; 158  |#define DF_BitsPerSample 2
                            18961 ; 159  |
                            18962 ; 160  |
                            18963 ; 161  |// Timer Descriptor Offset
                            18964 ; 162  |#define TD_TimerNumber 0
                            18965 ; 163  |#define TD_ControlValue 1
                            18966 ; 164  |#define TD_CountValue 2
                            18967 ; 165  |#define TD_ControlRegister 3
                            18968 ; 166  |#define TD_CountRegister 4
                            18969 ; 167  |
                            18970 ; 168  |
                            18971 ; 169  |// File IO defines
                            18972 ; 170  |#define FileInPort 0x8000
                            18973 ; 171  |#define FileOutPort 0x8001
                            18974 ; 172  |#define OnceInPort 0x8000
                            18975 ; 173  |#define OnceOutPort 0x8001
                            18976 ; 174  |#define SmFakeInPort 0x8002
                            18977 ; 175  |#define SmFakeOutPort 0x8003
                            18978 ; 176  |#define UsbFakeInPort 0x8004
                            18979 ; 177  |#define UsbFakeOutPort 0x8005
                            18980 ; 178  |
                            18981 ; 179  |// Target memory stuff
                            18982 ; 180  |#define TARGET_MEM_MASK 0xF00000
                            18983 ; 181  |#define TARGET_MEM_X 0x800000
                            18984 ; 182  |#define TARGET_MEM_Y 0x400000
                            18985 ; 183  |#define TARGET_MEM_L 0x200000
                            18986 ; 184  |#define TARGET_MEM_P 0x100000
                            18987 ; 185  |
                            18988 ; 186  |#define TARGET_MEM_X_BITPOS 23
                            18989 ; 187  |#define TARGET_MEM_Y_BITPOS 22
                            18990 ; 188  |#define TARGET_MEM_L_BITPOS 21
                            18991 ; 189  |#define TARGET_MEM_P_BITPOS 20
                            18992 ; 190  |
                            18993 ; 191  |
                            18994 ; 192  |// File System Stuff
                            18995 ; 193  |// assume 3 deep max with 8.3 format (38 bytes inc. /'s)
                            18996 ; 194  |#define MaxDirCount 13         
                            18997 ; 195  |
                            18998 ; 196  |// Error Codes
                            18999 ; 197  |//      Value           Error
                            19000 ; 198  |//      --------------------------------------------
                            19001 ; 199  |//      $000000         Reserved - no error
                            19002 ; 200  |//      $000001         SmartMedia Bad Programming Error
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 318

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19003 ; 201  |//      $000002         SmartMedia Read Timeout
                            19004 ; 202  |//      $000003         USB PLL Lock Timeout
                            19005 ; 203  |//       $000010         GetNumSongs returned an error
                            19006 ; 204  |//       $000011         fopen failed to open file number (in x:TrackNum)
                            19007 ; 205  |//       $000012         fread failed when attempting to read page
                            19008 ; 206  |//       $000013         fread failed to read correct number of bytes
                            19009 ; 207  |#define NO_ERROR 0x000000
                            19010 ; 208  |#define ERROR_PLL_LOCK_TIMEOUT 0x000001
                            19011 ; 209  |
                            19012 ; 210  |#define ERROR_SM_BADP 0x000100
                            19013 ; 211  |#define ERROR_SM_TIMEOUT 0x000101
                            19014 ; 212  |#define ERROR_SM_INVALID_BLOCK 0x000102
                            19015 ; 213  |#define ERROR_SM_INVALID_DATA 0x000103
                            19016 ; 214  |#define ERROR_SM_ECC 0x000104
                            19017 ; 215  |#define ERROR_SM_BLOCK_ERASE_FAILED 0x000105
                            19018 ; 216  |#define ERROR_SM_CARD_NOT_FOUND 0x000106
                            19019 ; 217  |#define ERROR_SM_BUSY_TIMEOUT 0x000107
                            19020 ; 218  |#define ERROR_SM_WRITE_FAILED 0x000108
                            19021 ; 219  |#define ERROR_SM_DEVICE_ID 0x000109
                            19022 ; 220  |
                            19023 ; 221  |#define ERROR_NUM_SONGS 0x000200
                            19024 ; 222  |#define ERROR_FOPEN_FILENUM 0x000201
                            19025 ; 223  |#define ERROR_FREAD_PAGE 0x000202
                            19026 ; 224  |#define ERROR_FREAD_BYTE_COUNT 0x000203
                            19027 ; 225  |#define ERROR_CREATING_VOICE_DIR 0x000204 
                            19028 ; 226  |
                            19029 ; 227  |#define ERROR_USB_DISCONNECTED 0x000300
                            19030 ; 228  |
                            19031 ; 229  |#define ERROR_DECODER_PLAYING 0x000400
                            19032 ; 230  |// Attempted to set position past the end of file
                            19033 ; 231  |#define ERROR_DECODER_SETPOS 0x000401             
                            19034 ; 232  |
                            19035 ; 233  |// PLL defs
                            19036 ; 234  |// According to Mike May, the PLL takes about 200us to stabalize, worst-case.
                            19037 ; 235  |//   PLL lock delay is $000000001388 = 5000. We're always using the xtal at
                            19038 ; 236  |//   24.576MHz, so this delay is 5000/(24.576MHz) = 203.5us.  We'll do this 5000
                            19039 ; 237  |//   times for a total of 1.017s.
                            19040 ; 238  |#define PLL_LOCK_DELAY_HIGH 0x000000
                            19041 ; 239  |#define PLL_LOCK_DELAY_LOW 0x001388
                            19042 ; 240  |#define PLL_TIMEOUT 0x001388
                            19043 ; 241  |
                            19044 ; 242  |// Generic wait defs
                            19045 ; 243  |#define WAIT_10_MS 245760/2
                            19046 ; 244  |
                            19047 ; 245  |//Those equates are used in the DCC/USBMSC
                            19048 ; 246  |//Low battery detection bit
                            19049 ; 247  |#define LOW_BATTERY_DETECTED_BITPOS 0
                            19050 ; 248  |
                            19051 ; 249  |#endif // IF (!@def(SYSEQU_INC))
                            19052 ; 250  |
                            19053 ; 251  |
                            19054 
                            19056 
                            19057 ; 12   |#endif
                            19058 ; 13   |
                            19059 ; 14   |
                            19060 ; 15   |#pragma optimize 1
                            19062 ; 16   |
                            19063 ; 17   |WORD g_bWorkingOnFrame=FALSE;
                            19064 
                            19065 
Y:0000                      19066         org     y,".ydataframebuffer",init:
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 319

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19067 Fg_bWorkingOnFrame:
Y:0000 000000               19068         dc      $000000
                            19071 
                            19072 ; 18   |
                            19073 ; 19   |_reentrant void SALDisplayCopyBitmapToBitmap(INT xDestination, INT yDestination, BITMAP *p
                                  Source, INT bInvert, BITMAP *pDestination);
                            19074 
                            19079 
                            19080 ; 20   |
                            19081 ; 21   |//////////////////////////////////////////////////////////////////////////////
                            19082 ; 22   |//These two must follow each other!                                         //
                            19083 ; 23   |BITMAPHEADER  RootBufferHeader={LCD_X_SIZE,LCD_Y_SIZE};                //
                            19084 
                            19085 FRootBufferHeader:
Y:0001 000080 000040        19086         dc      $000080,$000040
                            19089 
                            19090 ; 24   |unsigned int g_wFrameBuffer[LCD_X_SIZE*(1+(LCD_Y_SIZE-1)/24)]={0x0};          //
                            19091 
                            19092 Fg_wFrameBuffer:
Y:0003 000000 000000        19093         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:000B 000000 000000        19094         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0013 000000 000000        19095         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:001B 000000 000000        19096         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0023 000000 000000        19097         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:002B 000000 000000        19098         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0033 000000 000000        19099         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:003B 000000 000000        19100         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0043 000000 000000        19101         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:004B 000000 000000        19102         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0053 000000 000000        19103         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 320

M:ADDR CODE           CYCLES LINE SOURCELINE
Y:005B 000000 000000        19104         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0063 000000 000000        19105         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:006B 000000 000000        19106         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0073 000000 000000        19107         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:007B 000000 000000        19108         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0083 000000 000000        19109         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:008B 000000 000000        19110         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0093 000000 000000        19111         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:009B 000000 000000        19112         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00A3 000000 000000        19113         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00AB 000000 000000        19114         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00B3 000000 000000        19115         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00BB 000000 000000        19116         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00C3 000000 000000        19117         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00CB 000000 000000        19118         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00D3 000000 000000        19119         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 321

M:ADDR CODE           CYCLES LINE SOURCELINE
       000000 000000              
Y:00DB 000000 000000        19120         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00E3 000000 000000        19121         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00EB 000000 000000        19122         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00F3 000000 000000        19123         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:00FB 000000 000000        19124         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0103 000000 000000        19125         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:010B 000000 000000        19126         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0113 000000 000000        19127         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:011B 000000 000000        19128         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0123 000000 000000        19129         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:012B 000000 000000        19130         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0133 000000 000000        19131         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:013B 000000 000000        19132         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0143 000000 000000        19133         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:014B 000000 000000        19134         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0153 000000 000000        19135         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 322

M:ADDR CODE           CYCLES LINE SOURCELINE
       000000 000000              
       000000 000000              
Y:015B 000000 000000        19136         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0163 000000 000000        19137         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:016B 000000 000000        19138         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:0173 000000 000000        19139         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
Y:017B 000000 000000        19140         dc      $000000,$000000,$000000,$000000,$000000,$000000,$000000,$000000
       000000 000000              
       000000 000000              
       000000 000000              
                            19144 
                            19145 ; 25   |//////////////////////////////////////////////////////////////////////////////
                            19146 ; 26   |
                            19147 ; 27   |BITMAP *  g_pCurrentBuffer = (BITMAP * )&RootBufferHeader;
                            19148 
                            19149 Fg_pCurrentBuffer:
Y:0183 rrrrrr               19150         dc      FRootBufferHeader
                            19155 
                            19156 ; 28   |BITMAP *  g_pRootBuffer    = (BITMAP * )&RootBufferHeader;
                            19157 
                            19158 Fg_pRootBuffer:
Y:0184 rrrrrr               19159         dc      FRootBufferHeader
                            19162 
                            19163 ; 29   |
                            19164 ; 30   |_reentrant void SALDisplayInit(void)
                            19165 ; 31   |{
                            19166 
P:0000                      19167         org     p,".ptextframebuffer":
                            19172 FSALDisplayInit:
                            19173 
                            19174 ; 32   |}
                            19175 
P:0000 00000C         4    419177         rts
                            19179 
                            19180 ; 33   |
                            19181 ; 34   |_reentrant void SALHandleMessage(Message  *pMsg)
                            19182 ; 35   |{
                            19183 
                            19190 FSALHandleMessage:
                            19196 
                            19197 ; 36   |
                            19198 ; 37   |    switch(pMsg->m_wMessage)
                            19199 
P:0001 055F7C         2    619191         movec   ssh,y:(r7)+
P:0002 56F400 03001B  3    919203         move    #196635,a
P:0004 205800         2   1119201         move    (r0)+
P:0005 5FD000         2   1319202         move    y:(r0)-,b
P:0006 2B0000         2   1519204         move    #0,b2
P:0007 56F40D 03001F  3   1819205         cmp     a,b     #196639,a
P:0009 0AF0AA rrrrrr  6   2419206         jeq     L4
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 323

M:ADDR CODE           CYCLES LINE SOURCELINE
P:000B 56F40D 03001A  3   2719207         cmp     a,b     #196634,a
P:000D 0AF0AA rrrrrr  6   3319208         jeq     L5
P:000F 20000D         2   3519209         cmp     a,b
P:0010 0AF0A2 rrrrrr  6   4119210         jne     L7
                            19211 
                            19212 ; 38   |    {
                            19213 ; 39   |    case LCD_BEGIN_FRAME:
                            19214 ; 40   |        g_bWorkingOnFrame = TRUE;
                            19215 
                            19219 
                            19220 ; 41   |        break;
                            19221 
P:0012 2D0100         2   4319217         move    #1,b1
P:0013 5D7000 rrrrrr  3   4619218         move    b1,y:Fg_bWorkingOnFrame
P:0015 0AF080 rrrrrr  6   5219223         jmp     L11
                            19224 
                            19225 ; 42   |    case LCD_END_FRAME:
                            19226 ; 43   |        g_bWorkingOnFrame = FALSE;
                            19227 
                            19229 L4:
                            19231 
                            19232 ; 44   |        break;
                            19233 
P:0017 2C0000         2   5419229         move    #0,a1
P:0018 5C7000 rrrrrr  3   5719230         move    a1,y:Fg_bWorkingOnFrame
P:001A 0AF080 rrrrrr  6   6319235         jmp     L11
                            19236 
                            19237 ; 45   |    case LCD_SET_FRAMEBUFFER:
                            19238 ; 46   |        if(pMsg->m_wParams[0])
                            19239 
                            19241 L5:
P:001C 3E0200         2   6519241         move    #2,n6
P:001D 221600         2   6719242         move    r0,r6
P:001E 000000         2   6919242         nop             ; (inserted)
P:001F 5FEE00         4   7319244         move    y:(r6+n6),b
P:0020 2B0000         2   7519247         move    #0,b2
P:0021 20000B         2   7719248         tst     b
P:0022 0AF0AA rrrrrr  6   8319249         jeq     L6
                            19250 
                            19251 ; 47   |            g_pCurrentBuffer = (BITMAP *)pMsg->m_wParams[0];
                            19252 
P:0024 5D7000 rrrrrr  3   8619254         move    b1,y:Fg_pCurrentBuffer
P:0026 0AF080 rrrrrr  6   9219255         jmp     L11
                            19256 
                            19257 ; 48   |        else
                            19258 ; 49   |            g_pCurrentBuffer = (BITMAP *)&RootBufferHeader;
                            19259 
                            19261 L6:
                            19263 
                            19264 ; 50   |        break;
                            19265 
P:0028 70F400 rrrrrr  3   9519261         move    #FRootBufferHeader,n0
P:002A 787000 rrrrrr  3   9819262         move    n0,y:Fg_pCurrentBuffer
P:002C 0AF080 rrrrrr  6  10419267         jmp     L11
                            19268 
                            19269 ; 51   |    default://Any unhandled messages are sent to the HAL
                            19270 ; 52   |        HALHandleMessage(pMsg);
                            19271 
                            19273 L7:
P:002E 0BF080 rrrrrr  6  11019276         jsr     FHALHandleMessage
                            19278 
                            19279 ; 53   |        break;
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 324

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19280 ; 54   |    }
                            19281 
                            19283 L11:
                            19284 
                            19285 ; 55   |}
                            19286 
P:0030 05FF7C         4  11419288         movec   y:-(r7),ssh
P:0031 000000         2  11619288         nop             ; (inserted)
P:0032 00000C         4  12019292         rts
                            19294 
                            19295 ; 56   |
                            19296 ; 57   |_reentrant void SALDisplayUpdate(void)
                            19297 ; 58   |{
                            19298 
                            19303 FSALDisplayUpdate:
                            19309 
                            19310 ; 59   |    if(!g_bWorkingOnFrame)
                            19311 
P:0033 055F7C         2  12219304         movec   ssh,y:(r7)+
P:0034 5FF000 rrrrrr  3  12519313         move    y:Fg_bWorkingOnFrame,b
P:0036 2B0000         2  12719314         move    #0,b2
P:0037 205F0B         2  12919315         tst     b	                (r7)+
P:0038 0AF0A2 rrrrrr  6  13519316         jne     L12
                            19317 
                            19318 ; 60   |    {   //this can be optimized with dirty bits
                            19319 ; 61   |        HALDisplaySendData(0,0,LCD_X_SIZE,LCD_X_SIZE*0,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                            19320 
P:003A 380213         2  13719322         clr     a	                #2,n0
P:003B 68F000 rrrrrr  3  14019324         move    y:Fg_pRootBuffer,r0
P:003D 045FA0         2  14219326         movec   m0,n7
P:003E 260000         2  14419330         move    #0,y0
P:003F 44F400 000080  3  14719332         move    #>$80,x0
P:0041 25001B         2  14919323         clr     b	                #0,x1
P:0042 204800         2  15119329         move    (r0)+n0
P:0043 786F00         4  15519328         move    n0,y:(r7+n7)
P:0044 0BF080 rrrrrr  6  16119333         jsr     FHALDisplaySendData
                            19334 
                            19335 ; 62   |        HALDisplaySendData(1,0,LCD_X_SIZE,LCD_X_SIZE*1,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                            19336 
P:0046 68F000 rrrrrr  3  16419339         move    y:Fg_pRootBuffer,r0
P:0048 045FA0         2  16619340         movec   m0,n7
P:0049 250000         2  16819346         move    #0,x1
P:004A 78EF00         4  17219342         move    y:(r7+n7),n0
P:004B 44F41B 000080  3  17519345         clr     b	                #>$80,x0
P:004D 56F400 000001  3  17819348         move    #>1,a
P:004F 204800         2  18019344         move    (r0)+n0
P:0050 208600         2  18219347         move    x0,y0
P:0051 0BF080 rrrrrr  6  18819349         jsr     FHALDisplaySendData
                            19350 
                            19351 ; 63   |        HALDisplaySendData(2,0,LCD_X_SIZE,LCD_X_SIZE*2,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                            19352 
P:0053 68F000 rrrrrr  3  19119354         move    y:Fg_pRootBuffer,r0
P:0055 045FA0         2  19319355         movec   m0,n7
P:0056 25001B         2  19519360         clr     b	                #0,x1
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 325

M:ADDR CODE           CYCLES LINE SOURCELINE
P:0057 78EF00         4  19919357         move    y:(r7+n7),n0
P:0058 56F400 000002  3  20219363         move    #>2,a
P:005A 46F400 000100  3  20519364         move    #$100,y0
P:005C 44F400 000080  3  20819362         move    #>$80,x0
P:005E 204800         2  21019359         move    (r0)+n0
P:005F 0BF080 rrrrrr  6  21619365         jsr     FHALDisplaySendData
                            19366 
                            19367 ; 64   |        HALDisplaySendData(3,0,LCD_X_SIZE,LCD_X_SIZE*3,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                            19368 
P:0061 68F000 rrrrrr  3  21919370         move    y:Fg_pRootBuffer,r0
P:0063 045FA0         2  22119371         movec   m0,n7
P:0064 25001B         2  22319376         clr     b	                #0,x1
P:0065 78EF00         4  22719373         move    y:(r7+n7),n0
P:0066 56F400 000003  3  23019380         move    #>3,a
P:0068 46F400 000180  3  23319379         move    #$180,y0
P:006A 44F400 000080  3  23619378         move    #>$80,x0
P:006C 204800         2  23819375         move    (r0)+n0
P:006D 0BF080 rrrrrr  6  24419381         jsr     FHALDisplaySendData
                            19382 
                            19383 ; 65   |        HALDisplaySendData(4,0,LCD_X_SIZE,LCD_X_SIZE*4,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                            19384 
P:006F 68F000 rrrrrr  3  24719386         move    y:Fg_pRootBuffer,r0
P:0071 045FA0         2  24919387         movec   m0,n7
P:0072 25001B         2  25119392         clr     b	                #0,x1
P:0073 78EF00         4  25519389         move    y:(r7+n7),n0
P:0074 56F400 000004  3  25819396         move    #>4,a
P:0076 46F400 000200  3  26119395         move    #$200,y0
P:0078 44F400 000080  3  26419394         move    #>$80,x0
P:007A 204800         2  26619391         move    (r0)+n0
P:007B 0BF080 rrrrrr  6  27219397         jsr     FHALDisplaySendData
                            19398 
                            19399 ; 66   |        HALDisplaySendData(5,0,LCD_X_SIZE,LCD_X_SIZE*5,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                            19400 
P:007D 68F000 rrrrrr  3  27519402         move    y:Fg_pRootBuffer,r0
P:007F 045FA0         2  27719403         movec   m0,n7
P:0080 25001B         2  27919408         clr     b	                #0,x1
P:0081 78EF00         4  28319405         move    y:(r7+n7),n0
P:0082 56F400 000005  3  28619412         move    #>5,a
P:0084 46F400 000280  3  28919411         move    #640,y0
P:0086 44F400 000080  3  29219410         move    #>$80,x0
P:0088 204800         2  29419407         move    (r0)+n0
P:0089 0BF080 rrrrrr  6  30019413         jsr     FHALDisplaySendData
                            19414 
                            19415 ; 67   |        HALDisplaySendData(6,0,LCD_X_SIZE,LCD_X_SIZE*6,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                            19416 
P:008B 68F000 rrrrrr  3  30319418         move    y:Fg_pRootBuffer,r0
P:008D 045FA0         2  30519419         movec   m0,n7
P:008E 25001B         2  30719424         clr     b	                #0,x1
P:008F 78EF00         4  31119421         move    y:(r7+n7),n0
P:0090 56F400 000006  3  31419428         move    #>6,a
P:0092 46F400 000300  3  31719427         move    #$300,y0
P:0094 44F400 000080  3  32019426         move    #>$80,x0
P:0096 204800         2  32219423         move    (r0)+n0
P:0097 0BF080 rrrrrr  6  32819429         jsr     FHALDisplaySendData
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 326

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19430 
                            19431 ; 68   |        HALDisplaySendData(7,0,LCD_X_SIZE,LCD_X_SIZE*7,g_pRootBuffer->m_wBitmap,DISPLAY_NO
                                  RMAL);
                            19432 
P:0099 68F000 rrrrrr  3  33119434         move    y:Fg_pRootBuffer,r0
P:009B 045FA0         2  33319435         movec   m0,n7
P:009C 25001B         2  33519441         clr     b	                #0,x1
P:009D 78EF00         4  33919437         move    y:(r7+n7),n0
P:009E 56F400 000007  3  34219444         move    #>7,a
P:00A0 44F400 000080  3  34519443         move    #>$80,x0
P:00A2 46F400 000380  3  34819442         move    #$380,y0
P:00A4 204800         2  35019439         move    (r0)+n0
P:00A5 0BF080 rrrrrr  6  35619445         jsr     FHALDisplaySendData
                            19446 
                            19447 ; 69   |    }
                            19448 
                            19450 L12:
                            19451 
                            19452 ; 70   |}
                            19453 
P:00A7 205700         2  35819455         move    (r7)-
P:00A8 05FF7C         4  36219457         movec   y:-(r7),ssh
P:00A9 000000         2  36419457         nop             ; (inserted)
P:00AA 00000C         4  36819461         rts
                            19463 
                            19464 ; 71   |
                            19465 ; 72   |
                            19466 ; 73   |_reentrant void SALDisplayPrintBitmapAddress   (INT x,INT y,void _Y *pAddress ,INT bInvert
                                  )
                            19467 ; 74   |{
                            19468 
                            19475 FSALDisplayPrintBitmapAddress:
                            19487 
                            19488 ; 75   |    SALDisplayCopyBitmapToBitmap(x,y,(void *)pAddress,bInvert, g_pCurrentBuffer);
                            19489 
P:00AB 055F7C         2  37019476         movec   ssh,y:(r7)+
P:00AC 6CF000 rrrrrr  3  37319491         move    y:Fg_pCurrentBuffer,r4
P:00AE 0BF080 rrrrrr  6  37919492         jsr     FSALDisplayCopyBitmapToBitmap
                            19497 
                            19498 ; 76   |}
                            19499 
P:00B0 05FF7C         4  38319501         movec   y:-(r7),ssh
P:00B1 000000         2  38519501         nop             ; (inserted)
P:00B2 00000C         4  38919505         rts
                            19507 
                            19508 ; 77   |
                            19509 ; 78   |
                            19510 ; 79   |_reentrant INT SALDisplayGetWidth(void)
                            19511 ; 80   |{
                            19512 
                            19517 FSALDisplayGetWidth:
                            19518 
                            19519 ; 81   |    return ((WORD*)g_pCurrentBuffer)[0];
                            19520 
                            19526 
                            19527 ; 82   |}
                            19528 
P:00B3 6EF000 rrrrrr  3  39219522         move    y:Fg_pCurrentBuffer,r6
P:00B5 000000         2  39419522         nop             ; (inserted)
P:00B6 5EE600         2  39619524         move    y:(r6),a
P:00B7 218E00         2  39819525         move    a1,a
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 327

M:ADDR CODE           CYCLES LINE SOURCELINE
P:00B8 00000C         4  40219530         rts
                            19532 
                            19533 ; 83   |_reentrant INT SALDisplayGetHeight(void)
                            19534 ; 84   |{
                            19535 
                            19540 FSALDisplayGetHeight:
                            19541 
                            19542 ; 85   |    return ((WORD*)g_pCurrentBuffer)[1];
                            19543 
                            19550 
                            19551 ; 86   |}
                            19552 
P:00B9 6EF000 rrrrrr  3  40519545         move    y:Fg_pCurrentBuffer,r6
P:00BB 000000         2  40719545         nop             ; (inserted)
P:00BC 205E00         2  40919547         move    (r6)+
P:00BD 5ED600         2  41119548         move    y:(r6)-,a
P:00BE 218E00         2  41319549         move    a1,a
P:00BF 00000C         4  41719554         rts
                            19556 
                            19557 ; 87   |
                            19558 ; 88   |
                            19559 ; 89   |
                            19560 ; 90   |_reentrant void SALDisplayClearRange(INT x,INT y,WORD iSourceWidth,WORD iSourceHeight)
                            19561 ; 91   |{
                            19562 
                            19567 FSALDisplayClearRange:
                            19584 
                            19585 ; 92   |    WORD FakeBitmap[2];
                            19586 ; 93   |    FakeBitmap[0]=iSourceWidth;
                            19587 
                            19592 
                            19593 ; 94   |    FakeBitmap[1]=iSourceHeight;
                            19594 
                            19599 
                            19600 ; 95   |
                            19601 ; 96   |    SALDisplayPrintBitmapAddress(x,y,FakeBitmap,2);
                            19602 
P:00C0 055F7C         2  41919568         movec   ssh,y:(r7)+
P:00C1 77F400 FFFFFE  3  42219589         move    #-2,n7
P:00C3 205F00         2  42419571         move    (r7)+
P:00C4 205F00         2  42619572         move    (r7)+
P:00C5 4C6F00         4  43019591         move    x0,y:(r7+n7)
P:00C6 045FA0         2  43219596         movec   m0,n7
P:00C7 44F400 000002  3  43519607         move    #>2,x0
P:00C9 4E6F00         4  43919598         move    y0,y:(r7+n7)
P:00CA 77F400 FFFFFE  3  44219604         move    #-2,n7
P:00CC 000000         2  44419604         nop             ; (inserted)
P:00CD 044F10         4  44819606         lua     (r7)+n7,r0
P:00CE 0BF080 rrrrrr  6  45419608         jsr     FSALDisplayPrintBitmapAddress
                            19613 
                            19614 ; 97   |}
                            19615 
P:00D0 205700         2  45619617         move    (r7)-
P:00D1 205700         2  45819618         move    (r7)-
P:00D2 05FF7C         4  46219620         movec   y:-(r7),ssh
P:00D3 000000         2  46419620         nop             ; (inserted)
P:00D4 00000C         4  46819624         rts
                            19635 
                            19636         extern  FHALDisplaySendData, FHALHandleMessage
                            19637         extern  FSALDisplayCopyBitmapToBitmap
                            19638 
                            19639         global  FRootBufferHeader, FSALDisplayClearRange
TASKING DSP2410 assembler v1.5r1 Build 138 SN 00100122
                                                                                                                            Page 328

M:ADDR CODE           CYCLES LINE SOURCELINE
                            19640         global  FSALDisplayGetHeight, FSALDisplayGetWidth, FSALDisplayInit
                            19641         global  FSALDisplayPrintBitmapAddress, FSALDisplayUpdate
                            19642         global  FSALHandleMessage, Fg_bWorkingOnFrame, Fg_pCurrentBuffer
                            19643         global  Fg_pRootBuffer, Fg_wFrameBuffer
                            19644 
                            19645         local   L4, L5, L6, L7, L11, L12
                            19646 
                            19647         calls   "SALDisplayClearRange", "SALDisplayPrintBitmapAddress"
                            19648         calls   "SALDisplayPrintBitmapAddress", "SALDisplayCopyBitmapToBitmap"
                            19649         calls   "SALDisplayUpdate", "HALDisplaySendData"
                            19650         calls   "SALHandleMessage", "HALHandleMessage"
                            19651 
